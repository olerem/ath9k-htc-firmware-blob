
../ath9k-htc-firmware-blob/magpie/fw.elf:     Dateiformat elf32-xtensa-be
../ath9k-htc-firmware-blob/magpie/fw.elf
Architektur: xtensa, Flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
Startadresse 0x00906000

Xtensa header:

Machine     = Base
Insn tables = true
Literal tables = true

Programm-Header:
    LOAD off    0x00501000 vaddr 0x00501000 paddr 0x00501000 align 2**29
         filesz 0x00001c68 memsz 0x00001c68 flags r--
    LOAD off    0x00510d00 vaddr 0x00510d00 paddr 0x00510d00 align 2**29
         filesz 0x00001f68 memsz 0x00002210 flags rw-
    LOAD off    0x00906000 vaddr 0x00906000 paddr 0x00906000 align 2**29
         filesz 0x000090ed memsz 0x000090ed flags r-x

Sektionen:
Idx Name          Größe     VMA       LMA       Datei-Off Ausr.
  0 .lit4         00019000  004e8000  004e8000  00000000  2**0
                  ALLOC
  1 .rodata       00001440  00501000  00501000  00501000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .literals     00000828  00502440  00502440  00502440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00001f68  00510d00  00510d00  00510d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000002a8  00512c68  00512c68  00512c68  2**2
                  ALLOC
  5 .boot         00000268  00906000  00906000  00906000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text         00008e85  00906268  00906268  00906268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .debug_aranges 00000348  00000000  00000000  0090f0ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0005bfe2  00000000  00000000  0090f435  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005ee0  00000000  00000000  0096b417  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000116d6  00000000  00000000  009712f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001fb8  00000000  00000000  009829d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00008628  00000000  00000000  00984988  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000eb32  00000000  00000000  0098cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .xt.prop      00004fc8  00000000  00000000  0099bae2  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 000017d0  00000000  00000000  009a0aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000006d  00000000  00000000  009a227a  2**0
                  CONTENTS, READONLY
 17 .xtensa.info  00000038  00000000  00000000  009a22e7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
004e8000 l    d  .lit4	00000000 .lit4
00501000 l    d  .rodata	00000000 .rodata
00502440 l    d  .literals	00000000 .literals
00510d00 l    d  .data	00000000 .data
00512c68 l    d  .bss	00000000 .bss
00906000 l    d  .boot	00000000 .boot
00906268 l    d  .text	00000000 .text
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .xt.prop	00000000 .xt.prop
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .xtensa.info	00000000 .xtensa.info
00000000 l    df *ABS*	00000000 magpie.c
00501000 l     O .rodata	0000000d __FUNCTION__$3859
00000000 l    df *ABS*	00000000 adf_nbuf.c
00501010 l     O .rodata	00000010 __FUNCTION__$4966
00501020 l     O .rodata	0000001c __FUNCTION__$4971
0050103c l     O .rodata	0000001c __FUNCTION__$4976
00501058 l     O .rodata	00000012 __FUNCTION__$4982
00501084 l     O .rodata	00000010 __FUNCTION__$5011
00501094 l     O .rodata	00000013 __FUNCTION__$5016
005010a8 l     O .rodata	00000014 __FUNCTION__$5029
005010bc l     O .rodata	0000001b __FUNCTION__$5086
005010d8 l     O .rodata	00000019 __FUNCTION__$5099
0050106c l     O .rodata	00000015 __FUNCTION__$5006
00000000 l    df *ABS*	00000000 dbg_api.c
00906dc4 l     F .text	00000011 db_incorect_format
00906dd8 l     F .text	00000028 zf_debug_init
00906e00 l     F .text	00000066 db_ascii_to_hex
00906e68 l     F .text	00000037 db_hex_to_ascii
00906ea0 l     F .text	0000003b db_help_cmd
00906edc l     F .text	00000013 db_cmd_starthtc
00906ef0 l     F .text	0000005c db_cmd_memcmp
00906f4c l     F .text	000000a8 db_cmd_memdump
00906ff4 l     F .text	000000c0 db_str_cmd
009070b4 l     F .text	00000083 db_ldr_cmd
00907138 l     F .text	000000dd db_intr_cmd
00907218 l     F .text	0000014a db_wdt_cmd
00907364 l     F .text	00000036 db_usb_cmd
0090739c l     F .text	00000024 db_info_cmd
009073c0 l     F .text	00000264 zf_debug_task
00907660 l     F .text	0000006f db_clock_cmd
00000000 l    df *ABS*	00000000 usb_api_main_patch.c
00510d00 l     O .data	00000002 cmd_is_new$3834
00512c80 l     O .bss	00000004 evntbuf$3832
00512c84 l     O .bss	00000004 regaddr$3833
00512c88 l     O .bss	00000002 buf_len$3831
00510d02 l     O .data	00000002 cmd_is_new$3853
00512c8c l     O .bss	00000004 buf$3851
00512c90 l     O .bss	00000002 cmd_len$3850
005011c0 l     O .rodata	00000012 __func__$3854
00512c94 l     O .bss	00000004 regaddr$3849
00000000 l    df *ABS*	00000000 if_ath.c
00907b48 l     F .text	00000014 __adf_os_mem_alloc
00907b5c l     F .text	00000013 __adf_os_mem_copy
00907b70 l     F .text	00000013 __adf_os_mem_set
00907b84 l     F .text	00000005 tgt_HTCRecv_uapsdhandler
00501258 l     O .rodata	00000019 __FUNCTION__$7595
00907b8c l     F .text	0000001c dispatch_magpie_sys_cmds
00907ba8 l     F .text	00000005 htc_setup_comp
00908008 l     F .text	00000130 tgt_HTCSendCompleteHandler
00907f3c l     F .text	00000070 tgt_ServiceConnect
00907bb0 l     F .text	0000002e tgt_reg_service
00907be0 l     F .text	00000010 tgt_HTCRecv_mgmthandler
00907bf0 l     F .text	000000c2 ath_tgt_rx_tasklet
00907cb4 l     F .text	00000098 ath_descdma_cleanup
00907d4c l     F .text	00000014 __adf_os_init_bh$isra$4
00907d60 l     F .text	00000010 __adf_os_sched_bh$isra$5
00907d70 l     F .text	00000194 ath_rxdesc_init
00512c9c l     O .bss	00000001 reset_pll$7404
00907f04 l     F .text	00000036 ath_pll_reset_ones$isra$9
005012a4 l     O .rodata	00000013 __FUNCTION__$7635
00907fac l     F .text	0000005c ath_reg_read_filter
00908138 l     F .text	0000004c ath_desc_free
005012c8 l     O .rodata	00000012 __FUNCTION__$7187
00908184 l     F .text	000000af ath_descdma_setup$constprop$22
00501274 l     O .rodata	0000001a __FUNCTION__$7146
00908234 l     F .text	000000aa tgt_HTCRecvMessageHandler
009082e0 l     F .text	0000003b tgt_HTCRecv_cabhandler
0090836c l     F .text	00000012 ath_fatal_tasklet
00908380 l     F .text	00000012 ath_bmiss_tasklet
00510d04 l     O .data	00000004 ath_numrxbufs
00501204 l     O .rodata	0000001a __FUNCTION__$7010
005011f8 l     O .rodata	0000000c __FUNCTION__$6952
00908b30 l     F .text	0000006a ath_hal_reg_rmw_tgt
00908b9c l     F .text	00000084 ath_rc_mask_tgt
00908c20 l     F .text	00000023 ath_rx_stats_tgt
00908c44 l     F .text	00000042 ath_tx_stats_tgt
00908c88 l     F .text	00000032 ath_int_stats_tgt
00908cbc l     F .text	00000062 ath_node_update_tgt
00908d20 l     F .text	0000002a ath_detach_tgt
00501220 l     O .rodata	00000014 __FUNCTION__$7326
00908d4c l     F .text	00000088 ath_enable_aggr_tgt
00908dd4 l     F .text	0000002c ath_ic_update_tgt
00908e00 l     F .text	00000056 handle_rc_rate_update_cmd
00908e58 l     F .text	00000052 handle_rc_state_change_cmd
00908eac l     F .text	0000004a ath_hal_reg_write_tgt
00908ef8 l     F .text	0000003f ath_hal_reg_read_tgt
00501234 l     O .rodata	00000013 __FUNCTION__$7349
00908f38 l     F .text	00000074 ath_vap_create_tgt
00908fac l     F .text	00000054 ath_vap_delete_tgt
00909000 l     F .text	0000002c ath_node_cleanup_tgt
0090902c l     F .text	00000097 ath_node_create_tgt
00501248 l     O .rodata	0000000f __FUNCTION__$6931
009090c4 l     F .text	00000078 ath_setcurmode_tgt
0090913c l     F .text	00000050 ath_flushrecv_tgt
0090918c l     F .text	0000003a ath_stoprecv_tgt
009091c8 l     F .text	00000086 ath_startrecv_tgt
00909250 l     F .text	000000c8 ath_draintxq_tgt
00909318 l     F .text	0000002e ath_tx_draintxq_tgt
00909348 l     F .text	00000023 ath_aborttx_dma_tgt
0090936c l     F .text	00000026 ath_stop_tx_dma_tgt
00909394 l     F .text	00000040 ath_aborttxq_tgt
009093d4 l     F .text	0000004e ath_init_tgt
00909424 l     F .text	00000054 ath_enable_intr_tgt
00909478 l     F .text	00000026 ath_disable_intr_tgt
009094a0 l     F .text	0000001e ath_get_tgt_version
009094c0 l     F .text	00000013 handle_echo_command
00501290 l     O .rodata	00000014 __FUNCTION__$7070
009094ec l     F .text	000001d2 tgt_HTCRecv_beaconhandler
00510d0c l     O .data	00000100 Magpie_Sys_DispatchEntries
00510d08 l     O .data	00000004 ath_numrxdescs
005012b8 l     O .rodata	0000000f __FUNCTION__$7211
00000000 l    df *ABS*	00000000 htc.c
005012dc l     O .rodata	00000018 __FUNCTION__$4065
00000000 l    df *ABS*	00000000 wmi_svc.c
0090a420 l     F .text	0000000b WMIServiceConnect
0090a42c l     F .text	00000007 _WMI_GetPendingEventsCount
0090a434 l     F .text	00000007 _WMI_GetControlEp
0090a43c l     F .text	00000014 _WMI_RegisterDispatchTable
0090a450 l     F .text	00000005 _WMI_Shutdown
005012f4 l     O .rodata	00000016 __FUNCTION__$3864
0090a458 l     F .text	0000009e WMIRecvMessageHandler
0090a4f8 l     F .text	00000020 _WMI_SendCompleteHandler
0090a518 l     F .text	00000030 _WMI_AllocEvent
0090a548 l     F .text	00000036 _WMI_SendEvent
0090a580 l     F .text	0000006f _WMI_Init
00000000 l    df *ABS*	00000000 ar5416_hw.c
0050130c l     O .rodata	000000d4 ar5416hal_10
00000000 l    df *ABS*	00000000 ratectrl_11n_ln.c
0090c1ac l     F .text	000000c0 rcRateSetseries
0090c26c l     F .text	00000074 rcIsValidPhyRate
005013e0 l     O .rodata	00000028 nRetry2PerLookup$7250
0090c2e0 l     F .text	000001fe rcUpdate_ht$isra$4
0090c4e0 l     F .text	00000396 rcSibUpdate_ht$constprop$6
0090c878 l     F .text	0000002a ath_rate_newassoc_11n
00000000 l    df *ABS*	00000000 if_owl.c
0090ce7c l     F .text	00000013 __adf_os_mem_copy
0090ce90 l     F .text	0000004c ieee80211_anyhdrsize
0090cedc l     F .text	0000004b owl_tgt_tid_init
00501498 l     O .rodata	00000016 __FUNCTION__$7146
0090cf28 l     F .text	0000008b ath_tgt_txq_add_ucast
0090cfb4 l     F .text	0000006e ath_update_stats
0090d024 l     F .text	0000005e ath_tx_update_baw
0090d084 l     F .text	00000016 ath_dma_unmap
0090d09c l     F .text	00000026 ath_tgt_skb_free
0090d0c4 l     F .text	000000a6 ath_filltxdesc
0090d16c l     F .text	0000004e ath_tx_tgt_setds
0090d1bc l     F .text	00000024 ath_tgt_tx_enqueue
0090d1e0 l     F .text	00000082 ath_update_aggr_stats$isra$2
0090d264 l     F .text	00000013 __adf_os_mem_set$constprop$13
00501430 l     O .rodata	00000040 bits_per_symbol
0090d278 l     F .text	000001fa ath_buf_set_rate
0090d474 l     F .text	00000017 ath_dma_map
00501408 l     O .rodata	0000000f __FUNCTION__$6945
0090d48c l     F .text	0000010d ath_buf_toggle
0090d59c l     F .text	00000083 ath_tx_freebuf
0090d620 l     F .text	0000003c ath_buf_comp
0090ee34 l     F .text	000000f4 ath_bar_tx_comp
0090d65c l     F .text	0000015e ath_bar_tx
0090d7cc l     F .text	00000031 ath_tx_set_retry
0090d950 l     F .text	000000e0 ath_tx_retry_subframe
0090da30 l     F .text	000000ae ath_tx_comp_aggr_error
00501484 l     O .rodata	00000011 __FUNCTION__$7108
00501470 l     O .rodata	00000013 __FUNCTION__$7117
005014b0 l     O .rodata	00000011 __FUNCTION__$7227
005014c4 l     O .rodata	00000016 __FUNCTION__$7248
0090e808 l     F .text	0000004e ath_tgt_tx_comp_normal
005014f0 l     O .rodata	00000015 __FUNCTION__$7339
00501418 l     O .rodata	00000016 __FUNCTION__$7301
0090e564 l     F .text	0000020a ath_tgt_txq_schedule
0090e770 l     F .text	0000004a ath_aggr_resume_tid
0090e7bc l     F .text	0000004b owl_tgt_tid_cleanup
00501508 l     O .rodata	00000015 __FUNCTION__$7376
005014dc l     O .rodata	00000014 __FUNCTION__$7271
00000000 l    df *ABS*	00000000 app_start.c
0090eff4 l     F .text	00000029 io32_rmw
00000000 l    df *ABS*	00000000 init.c
00906268 l     F .text	00000029 io32_rmw
00512c70 l     O .bss	00000004 loop_high
00512c74 l     O .bss	00000004 loop_low
00000000 l    df *ABS*	00000000 ah_osdep.c
00000000 l    df *ABS*	00000000 wlan_pci.c
00000000 l    df *ABS*	00000000 usb_api_magpie_patch.c
0090a628 l     F .text	00000029 io32_rmw
0090a654 l     F .text	00000068 _fw_restore_dma_fifo
0090a6bc l     F .text	00000377 _fw_reset_dma_fifo
00000000 l    df *ABS*	00000000 if_ath_pci.c
0090ef28 l     F .text	00000005 ath_pci_suspend
0090ef30 l     F .text	00000005 ath_pci_resume
0090ef38 l     F .text	00000010 ath_pci_remove
00511bc0 l     O .data	00000020 ath_drv_info
0090ef58 l     F .text	0000007e ath_pci_probe
00511be0 l     O .data	00000160 ath_pci_id_table
00000000 l    df *ABS*	00000000 buf_pool_static.c
00000000 l    df *ABS*	00000000 cmnos_clock_patch.c
00512cbc l     O .bss	00000004 last_tick$3775
00000000 l    df *ABS*	00000000 HIF_usb_patch.c
00000000 l    df *ABS*	00000000 adf_os_dma.c
00000000 l    df *ABS*	00000000 adf_os_irq_pvt.c
00000000 l    df *ABS*	00000000 ah.c
00000000 l    df *ABS*	00000000 ar5416_phy.c
00000000 l    df *ABS*	00000000 adf_net.c
00000000 l    df *ABS*	00000000 ar5416Phy.c
00000000 l    df *ABS*	00000000 ieee80211_output.c
00000000 l    df *ABS*	00000000 
00500abc g       *ABS*	00000000 u16TxRxCounter
00906724 g     F .text	00000032 init_mem
00511388 g     O .data	000002bc ar5416_11g_table
008e37e8 g       *ABS*	00000000 HIFusb_DescTraceDump
0090cdfc g     F .text	00000036 ath_rate_tx_complete
004e8000 g       *ABS*	00000000 _rom_literal_start
00906540 g     F .text	00000054 zfGenWrongEpidEvent
00906a88 g     F .text	0000002b __adf_nbuf_dmamap_info
00512cf4 g     O .bss	000000a0 cmd_str
00510e0c g     O .data	00000002 bEepromExist
00907a44 g     F .text	00000078 bGet_descriptor_patch
0090db28 g     F .text	0000002d ath_tgt_tid_drain
00906bcc g     F .text	00000011 __adf_nbuf_last
00500ad0 g       *ABS*	00000000 u8UsbInterfaceValue
0090697c g     F .text	00000020 __adf_nbuf_copy
00512cc0 g     O .bss	00000004 _assfail_ori
00906a68 g     F .text	00000009 __adf_nbuf_map
00502440 g       *ABS*	00000000 _bss_table_end
0090f0dc g     F .text	0000000c __adf_net_register_drv
00512ca0 g     O .bss	00000004 g_wlan_intr
00906a4c g     F .text	0000001c __adf_nbuf_dmamap_create
0090adf4 g     F .text	00000052 ath_hal_get_curmode
00511d40 g     O .data	00000004 ar5416_11naRateTable
0090a158 g     F .text	0000009c HTCControlSvcProcessMsg
0051247c g     O .data	00000004 ar5416_11ngRateTable
00512d94 g     O .bss	00000002 gvLen
00909b40 g     F .text	0000000f wlan_pci_module_init
00500000 g       *ABS*	00000000 _indir_tbl
0090ad38 g     F .text	00000010 ath_hal_attach_tgt
00906da0 g     F .text	00000023 buf_pool_module_install
00501000 g       *ABS*	00000000 _lit4_end
00906c84 g     F .text	00000007 __adf_nbuf_is_cloned
0090786c g     F .text	00000107 usb_reg_out_patch
00906ab4 g     F .text	00000005 __adf_nbuf_set_rx_cksum
0090bc0c g     F .text	000000bc ar5416AbortTxDma
00512d98 g     O .bss	00000004 cmd_buf_ptr
0090f0ed g       *ABS*	00000000 _text_end
0090e858 g     F .text	00000376 ath_tgt_tx_comp_aggr
0090ac60 g     F .text	00000011 _HIFusb_isr_handler_patch
0090cda0 g     F .text	0000002e ath_rate_attach
0090bb18 g     F .text	00000044 ar5416Set11nBurstDuration_20
009079b8 g     F .text	00000022 vUsbFIFO_EPxCfg_FS_patch
00906ac4 g     F .text	000000a7 __adf_nbuf_create_frm_frag
0090773c g     F .text	00000022 cold_reboot
00501000 g       *ABS*	00000000 _lit4_start
009076e8 g     F .text	0000000f cmnos_dbg_module_install
00502c68 g       *ABS*	00000000 _dram0_literal_end
0090a1f4 g     F .text	00000031 AdjustCreditThreshold
00502c68 g       *ABS*	00000000 _dram0_literal_start
0090ae48 g     F .text	00000029 ath_hal_wait
0090f0ed g       .text	00000000 _etext
0090bb5c g     F .text	0000006f ar5416Set11nVirtualMoreFrag_20
008e4f60 g       *ABS*	00000000 vbuf_module_install
00512c68 g     O .bss	00000004 idle_cnt
0090d800 g     F .text	00000043 owl_tgt_node_init
00907760 g     F .text	0000010a usb_status_in_patch
00909b50 g     F .text	0000000a wlan_pci_register_drv
00906924 g     F .text	0000002a __adf_nbuf_push_head
009076f8 g     F .text	00000022 _fw_usbfifo_recv_command
0090efe4 g     F .text	0000000f ar5416AttachRateTables
00909cec g     F .text	000000bf _HTC_Init
009068c4 g     F .text	0000001e __adf_nbuf_realloc_headroom
0090b948 g     F .text	00000089 ar5416Set11nAggrFirst_20
00906a80 g     F .text	00000005 __adf_nbuf_dmamap_destroy
0090de54 g     F .text	00000412 ath_tgt_send_mgt
0090c178 g     F .text	00000032 ar5416GetRateTable
00906ca4 g     F .text	0000000d __adf_nbuf_queue_init
008e6b64 g       *ABS*	00000000 memcpy
009076d0 g     F .text	00000016 dbg_timer_func
0090ce34 g     F .text	00000012 ath_rate_newassoc
00502440 g       *ABS*	00000000 _rodata_end
00906abc g     F .text	00000007 __adf_nbuf_get_vlan_info
0090cba4 g     F .text	00000158 rcUpdate_11n
0090ad84 g     F .text	0000006f ath_hal_computetxtime
00500ad8 g       *ABS*	00000000 u8UsbDeviceDescriptor
0090ccfc g     F .text	000000a2 ath_tx_status_update_rate
00906cbc g     F .text	00000007 __adf_nbuf_queue_first
00512cc4 g     O .bss	00000004 htc_handle
0090d7bc g     F .text	00000010 ATH_SKB_2_WH
0090f020 g     F .text	000000b9 ieee80211_tgt_crypto_encap
008e6a4c g       *ABS*	00000000 __udivsi3
00909e3c g     F .text	00000057 _HTC_Ready
00907abc g     F .text	00000010 ath_hal_getuptime
00906be0 g     F .text	0000003b __adf_nbuf_trim_tail
00512c68 g       *ABS*	00000000 _bss_start
00510d00 g       *ABS*	00000000 _dram0_data_end
00511900 g     O .data	000002bc ar5416_11a_table
00909f3c g     F .text	00000062 ReturnBuffers
0090ddd0 g     F .text	00000084 ath_tgt_tx_send_normal
00500ad2 g       *ABS*	00000000 u8UsbInterfaceAlternateSetting
00512c68 g       *ABS*	00000000 __XT_EXCEPTION_DESCS__
0090ecdc g     F .text	000000a2 ath_tgt_handle_aggr
005010f4 g     O .rodata	000000cc command_table
00906268 g       *ABS*	00000000 _text_start
0090771c g     F .text	00000020 _fw_usbfifo_init
0090ebd0 g     F .text	0000009a owltgt_tx_processq
009068e4 g     F .text	0000001e __adf_nbuf_realloc_tailroom
0090e268 g     F .text	00000062 ath_tgt_handle_normal
0090b23c g     F .text	00000015 ar5416StartTxDma
0090bdd8 g     F .text	00000059 ar5416SetRxFilter
00907b28 g     F .text	00000005 ath_hal_free
0090a228 g     F .text	00000156 _HTC_SendMsg
0090c100 g     F .text	00000077 ar5416Attach
00906c7c g     F .text	00000005 __adf_nbuf_cat
0090b228 g     F .text	00000012 ar5416SetTxDP
0090ce48 g     F .text	00000012 ath_rate_node_update
008e1548 g       *ABS*	00000000 generic_hif_module_install
00906c50 g     F .text	00000019 __adf_nbuf_tailroom
00906c74 g     F .text	00000007 __adf_nbuf_clone
008e4934 g       *ABS*	00000000 mUsbFIFOConfig
0090abdc g     F .text	0000000a cmnos_clock_init_patch
008e36e4 g       *ABS*	00000000 _HIFusb_isr_handler
00906cfc g     F .text	00000057 _buf_pool_static_create_pool
00512d9c g     O .bss	00000028 raw_cmd
00906cb4 g     F .text	00000007 __adf_nbuf_queue_len
00501000 g       *ABS*	00000000 _dport0_literal_start
0090efd8 g     F .text	0000000b exit_ath_pci
00512f10 g       *ABS*	00000000 _bss_end
00906cf4 g     F .text	00000005 _buf_pool_static_shutdown
0090b1c4 g     F .text	00000061 ar5416UpdateTxTrigLevel
00512cb4 g     O .bss	00000002 bJumptoFlash
00512cc8 g     O .bss	0000002c g_poolCtx
009069e4 g     F .text	00000020 __adf_nbuf_get_priv
00512cb0 g     O .bss	00000004 gpio_func
0090a0d4 g     F .text	00000082 HTCProcessConfigPipeMsg
00906d54 g     F .text	00000022 _buf_pool_static_alloc_buf
0090bcec g     F .text	0000000a ar5416Detach
0090af38 g     F .text	0000000f ar5416EnableReceive
00500aa4 g       *ABS*	00000000 usbFifoConf
00500ab8 g       *ABS*	00000000 pu8DescriptorEX
0090abe8 g     F .text	0000000a cmnos_refclk_speed_get_patch
0090b5c4 g     F .text	0000010c ar5416Set11nTxDesc_20
00510d00 g       *ABS*	00000000 _dram0_data_start
0090ef48 g     F .text	0000000d init_ath_pci
00511644 g     O .data	000002bc ar5416_11b_table
008e3a9c g       *ABS*	00000000 bGet_descriptor
0090b254 g     F .text	0000002b ar5416NumTxPending
009096c0 g     F .text	00000456 ath_tgt_attach
00909c94 g     F .text	00000013 _HTC_GetReservedHeadroom
0090682c g     F .text	0000003c Magpie_init
00512c68 g       *ABS*	00000000 __XT_EXCEPTION_DESCS_END__
00906464 g     F .text	0000005e zfGenExceptionEvent
00906b6c g     F .text	00000060 __adf_nbuf_split_to_frag
0090a5f0 g     F .text	00000037 WMI_service_module_install
00906d78 g     F .text	00000010 _buf_pool_static_alloc_buf_align
00501000 g       *ABS*	00000000 _dport0_rodata_start
00510d00 g       *ABS*	00000000 _dport0_data_start
008e6958 g       *ABS*	00000000 xthal_get_ccount
00906904 g     F .text	0000001e __adf_nbuf_expand
0090ae8c g     F .text	00000083 ar5416SetInterrupts
009062dc g     F .text	00000062 change_magpie_clk
0090af28 g     F .text	0000000d ar5416SetRxDP
0090d844 g     F .text	00000010 ath_tx_status_clear
00512ca4 g     O .bss	00000004 g_wlan_drv_handle
00909ca8 g     F .text	0000002a HTCSendDoneHandler
0090aa34 g     F .text	00000079 _fw_usb_suspend_reboot
008e497c g       *ABS*	00000000 mUsbEPMxPtSzLow
0090af10 g     F .text	00000015 ar5416GetTsf64
00512cb8 g     O .bss	00000004 ref_clk
00909e94 g     F .text	00000066 HTCCheckAndSendCreditReport
00500a98 g       *ABS*	00000000 ControlCmd
00510d00 g       *ABS*	00000000 _data_start
00500ace g       *ABS*	00000000 u8UsbConfigValue
00907b04 g     F .text	00000022 ath_hal_malloc
0090bcc8 g     F .text	00000021 ar5416StopDmaReceive
00909dac g     F .text	00000005 _HTC_PauseRecv
0090f0e8 g     F .text	00000005 __adf_net_unregister_drv
0090acf4 g     F .text	0000002b __adf_os_dmamem_alloc
008e48f8 g       *ABS*	00000000 mUsbEPMap
00906950 g     F .text	0000002b __adf_nbuf_pull_head
0090ad20 g     F .text	0000000c __adf_os_setup_intr
00512c7c g     O .bss	00000004 m_origUsbfifoRecvCmd
0090ac10 g     F .text	0000002b cmnos_tick_patch
00906a04 g     F .text	0000001e __adf_nbuf_queue_add
00908ad4 g     F .text	0000005a wmi_cmd_rsp
0090699c g     F .text	00000020 __adf_nbuf_unshare
00512ec0 g     O .bss	00000012 UsbDeviceDescriptorPatch
00906d88 g     F .text	00000016 _buf_pool_static_free_buf
00906ccc g     F .text	0000000e __adf_nbuf_is_queue_empty
0090ae74 g     F .text	00000017 ar5416IsInterruptPending
00907b30 g     F .text	00000015 ath_hal_memcpy
008e6348 g       *ABS*	00000000 _xtos_set_exception_handler
00906000 g     F .boot	00000268 app_start
0090b280 g     F .text	000001e6 ar5416SetupTxDesc_20
0050095c g       *ABS*	00000000 cticks
008e5010 g       *ABS*	00000000 vdesc_module_install
0090d854 g     F .text	0000008b ath_tx_status_update
00512c68 g       *ABS*	00000000 _data_end
0090f0ed g       *ABS*	00000000 _iram0_text_end
0090e318 g     F .text	0000024b ath_tgt_tx_form_aggr
00502430 g       *ABS*	00000000 __XT_EXCEPTION_TABLE__
0090e2cc g     F .text	0000004a ath_tx_addto_baw
00906a24 g     F .text	00000026 __adf_nbuf_queue_remove
00909b18 g     F .text	00000028 ath_detach
00906758 g     F .text	0000005b wlan_task
00502440 g       *ABS*	00000000 _literals_start
00512dc4 g     O .bss	000000f0 cmd_buffer
00906cdc g     F .text	00000017 _buf_pool_static_init
00512c6c g     O .bss	00000001 htc_complete_setup
00906c6c g     F .text	00000008 __adf_nbuf_len
0090bbcc g     F .text	0000003d ar5416StopTxDma
00909c64 g     F .text	00000016 wlan_pci_isr
008e6e48 g       *ABS*	00000000 memset
00502c68 g       *ABS*	00000000 _literals_end
00909c7c g     F .text	00000005 _HTC_Shutdown
0090ad48 g     F .text	0000003a ath_hal_getcapability
009069bc g     F .text	00000027 __adf_nbuf_frag_info
00501000 g       *ABS*	00000000 _dport0_rodata_end
0090abf4 g     F .text	0000001c cmnos_delay_us_patch
00500ac4 g       *ABS*	00000000 eUsbCxFinishAction
00512c98 g     O .bss	00000004 init_htc_handle
00909e00 g     F .text	00000016 HTCFreeMsgBuffer
0090b9d4 g     F .text	00000083 ar5416Set11nAggrMiddle_20
00906c8c g     F .text	00000015 __adf_nbuf_peek_header
009065c8 g     F .text	0000015b HTCMsgRecvHandler_patch
00906438 g     F .text	0000002a reset_EP4_FIFO
008e6998 g       *ABS*	00000000 __divsi3
008e6560 g       *ABS*	00000000 strcmp
0090afd8 g     F .text	000001ea ar5416ProcRxDescFast_20
00501000 g       *ABS*	00000000 _dram0_rodata_start
0090aab0 g     F .text	000000da zfTurnOffPower_patch
00501000 g       *ABS*	00000000 _rom_literal_end
0090831c g     F .text	0000004e wmi_event
00512c78 g     O .bss	00000004 delay
00909b8c g     F .text	00000038 wlan_pci_config_read
00908394 g     F .text	0000073e ath_intr
00909fa0 g     F .text	00000010 _HTC_ReturnBuffers
008e1574 g       *ABS*	00000000 athos_indirection_table_install
008e6980 g       *ABS*	00000000 xthal_get_intenable
0090ec6c g     F .text	0000006e owl_tgt_tx_tasklet
008e4954 g       *ABS*	00000000 mUsbEPMxPtSzHigh
00907af4 g     F .text	00000010 ath_hal_delay
00500ac0 g       *ABS*	00000000 u8ConfigDescriptorEX
00906868 g     F .text	0000003e __adf_nbuf_alloc
0090ac74 g     F .text	00000080 _HIFusb_start_patch
00906cc4 g     F .text	00000007 __adf_nbuf_queue_next
00907624 g     F .text	00000039 db_ascii_to_int
0090a380 g     F .text	00000097 HTCMsgRecvHandler
0090d8e0 g     F .text	0000006e ath_tx_status_update_aggr
009068a8 g     F .text	0000001c __adf_nbuf_free
00512eb4 g     O .bss	00000004 cmd_not_found
008e4914 g       *ABS*	00000000 mUsbFIFOMap
009067b4 g     F .text	00000005 htc_setup_comp
00502430 g       *ABS*	00000000 _bss_table_start
005110cc g     O .data	000002bc ar5416_11ng_table
00906a74 g     F .text	00000009 __adf_nbuf_unmap
00906c44 g     F .text	0000000a __adf_nbuf_headroom
0090ed80 g     F .text	000000b3 ath_tgt_tx_cleanup
008e3e64 g       *ABS*	00000000 bStandardCommand
008e3b54 g       *ABS*	00000000 bSet_configuration
00909bc4 g     F .text	000000a0 wlan_pci_probe
009064c4 g     F .text	0000007c AR6002_fatal_exception_handler_patch
00909dbc g     F .text	00000041 htc_module_install
00510d00 g       *ABS*	00000000 _dport0_data_end
0090ac3c g     F .text	0000000d cmnos_milliseconds_patch
00512cac g     O .bss	00000004 gpio
00501000 g       *ABS*	00000000 _rodata_start
009094d4 g     F .text	00000018 ath_get_minrateidx
00512f10 g       .bss	00000000 _end
008e34a0 g       *ABS*	00000000 _HIFusb_start
0090ac4c g     F .text	00000011 _HIFusb_get_max_msg_len_patch
0090ab8c g     F .text	0000004f zfResetUSBFIFO_patch
0090dae0 g     F .text	00000046 ath_tx_status_send
00512eb8 g     O .bss	00000004 cmd_buf_full
0090f0ed g       *ABS*	00000000 _iram0_text_start
0090ba58 g     F .text	0000007d ar5416Set11nAggrLast_20
00909efc g     F .text	0000003f HTCControlSvcProcessSendComplete
00909e18 g     F .text	00000021 HTCAllocMsgBuffer
00511bbc g     O .data	00000004 g_pci_init_func
00909c84 g     F .text	0000000d _HTC_RegisterService
00907acc g     F .text	00000026 _ath_hal_attach_tgt
00909ff4 g     F .text	000000e0 HTCProcessConnectMsg
0090bad8 g     F .text	0000003e ar5416Clr11nAggr_20
0090c8a4 g     F .text	000002fe rcRateFind_11n
00906c1c g     F .text	00000026 __adf_nbuf_put_tail
0090cdd0 g     F .text	0000002c ath_rate_findrate
00512ca8 g     O .bss	00000004 g_wlan_drv
00906340 g     F .text	000000f6 exception_reset
0090b468 g     F .text	00000136 ar5416FillTxDesc_20
00909cd4 g     F .text	00000017 HTC_AssembleBuffers
00510e10 g     O .data	000002bc ar5416_11na_table
00512f10 g       *ABS*	00000000 _fw_image_end
00909db4 g     F .text	00000005 _HTC_ResumeRecv
0090db58 g     F .text	00000278 ath_tgt_tx_prepare
00906268 g       .text	00000000 _stext
009079dc g     F .text	00000023 bSet_configuration_patch
0090ad2c g     F .text	0000000c __adf_os_free_intr
0090b5a0 g     F .text	00000021 ar5416FillKeyTxDesc_20
009067bc g     F .text	0000006e _wmi_cmd_rsp
00512ebc g     O .bss	00000004 pressed_time
00909b5c g     F .text	0000002f wlan_pci_config_write
00906294 g     F .text	00000046 fatal_exception_func
00909fb0 g     F .text	00000044 _HTC_ReturnBuffersList
0090af60 g     F .text	00000077 ar5416SetupRxDesc_20
00906594 g     F .text	00000032 HTCControlSvcProcessMsg_patch
008e49a0 g       *ABS*	00000000 mUsbEPinHighBandSet
0090ce5c g     F .text	0000001e ath_rate_newstate
00510d00 g       *ABS*	00000000 _dport0_bss_start
00501000 g       *ABS*	00000000 _dram0_rodata_end
0090be34 g     F .text	000002c9 ar5416ProcTxDesc_20
0090a418 g     F .text	00000005 RedistributeCredit
00907974 g     F .text	00000042 vUSBFIFO_EP6Cfg_FS_patch
00510d00 g       *ABS*	00000000 _dport0_bss_end
00907a00 g     F .text	00000044 bStandardCommand_patch
00512ed4 g     O .bss	0000003c ConfigDescriptorPatch
0090bcf8 g     F .text	000000df ar5416GetPendingInterrupts
00501000 g       *ABS*	00000000 _dport0_literal_end
0090b6d0 g     F .text	00000278 ar5416Set11nRateScenario_20
0090af48 g     F .text	00000017 ar5416StopPcuReceive



Disassembly of section .boot:

00906000 <app_start>:

extern BOOLEAN bJumptoFlash;
extern BOOLEAN bEepromExist;

void __section(boot) __noreturn __visible app_start(void)
{
  906000:	6c1004        	entry	a1, 32
#if defined(PROJECT_MAGPIE)
	T_EEP_RET retEEP;
#endif

	/* Zero BSS segment & dynamic memory section. */
	init_mem();
  906003:	5801c8        	call8	906724 <init_mem>

#if defined(PROJECT_MAGPIE)
	fatal_exception_func();
  906006:	5800a3        	call8	906294 <fatal_exception_func>
#endif

	if( IS_FLASHBOOT() ) {
  906009:	126910        	l32r	a2, 8e044c <_bss_end+0x3cd53c>
  90600c:	136911        	l32r	a3, 8e0450 <_bss_end+0x3cd540>
  90600f:	0c0200        	memw
  906012:	242200        	l32i	a4, a2, 0
  906015:	126913        	l32r	a2, 8e0464 <_bss_end+0x3cd554>
  906018:	04045f        	extui	a4, a4, 16, 16
  90601b:	734935        	bne	a4, a3, 906054 <app_start+0x54>
		athos_indirection_table_install();
  90601e:	5b6d55        	call8	8e1574 <athos_indirection_table_install>
		DBG_MODULE_INSTALL();
  906021:	1a6912        	l32r	a10, 8e046c <_bss_end+0x3cd55c>
  906024:	5805b0        	call8	9076e8 <cmnos_dbg_module_install>
		A_CLOCK_INIT(SYSTEM_CLK);
  906027:	1a6914        	l32r	a10, 8e0478 <_bss_end+0x3cd568>
  90602a:	232238        	l32i	a3, a2, 224
  90602d:	0b3000        	callx8	a3
		A_UART_INIT();
  906030:	2a2213        	l32i	a10, a2, 76
  906033:	0ba000        	callx8	a10
		A_PRINTF_INIT();
  906036:	232211        	l32i	a3, a2, 68
  906039:	0b3000        	callx8	a3
		A_DBG_INIT();
  90603c:	23226e        	l32i	a3, a2, 0x1b8
  90603f:	0b3000        	callx8	a3
		A_EEP_INIT();
  906042:	23225f        	l32i	a3, a2, 0x17c
  906045:	0b3000        	callx8	a3
		A_TASKLET_INIT();
  906048:	232269        	l32i	a3, a2, 0x1a4
  90604b:	0b3000        	callx8	a3
		_indir_tbl.cmnos.timer._timer_init();
  90604e:	222241        	l32i	a2, a2, 0x104
  906051:	600002        	j	906057 <app_start+0x57>
		u8UsbInterfaceAlternateSetting = u8UsbConfigValue = u8UsbInterfaceValue = 0;
#endif
	}
#ifdef ROM_VER_1_1
	else
		A_EEP_INIT(); /*Required for 1_1*/
  906054:	22225f        	l32i	a2, a2, 0x17c
  906057:	0b2000        	callx8	a2
#endif

#if defined(PROJECT_MAGPIE)
	retEEP = A_EEP_IS_EXIST();
  90605a:	126913        	l32r	a2, 8e04a8 <_bss_end+0x3cd598>
	bJumptoFlash = FALSE;
  90605d:	c040      	movi.n	a4, 0
	else
		A_EEP_INIT(); /*Required for 1_1*/
#endif

#if defined(PROJECT_MAGPIE)
	retEEP = A_EEP_IS_EXIST();
  90605f:	2a2262        	l32i	a10, a2, 0x188
  906062:	0ba000        	callx8	a10
	bJumptoFlash = FALSE;
  906065:	136915        	l32r	a3, 8e04bc <_bss_end+0x3cd5ac>
  906068:	243500        	s16i	a4, a3, 0
  90606b:	136916        	l32r	a3, 8e04c4 <_bss_end+0x3cd5b4>
	if ( RET_SUCCESS == retEEP ) {
  90606e:	cca0      	bnez.n	a10, 906072 <app_start+0x72>
		bEepromExist = TRUE;
  906070:	c041      	movi.n	a4, 1
	} else {
		bEepromExist = FALSE;
	}
#endif

	hostif = A_IS_HOST_PRESENT();
  906072:	8a2e      	l32i.n	a10, a2, 56
	retEEP = A_EEP_IS_EXIST();
	bJumptoFlash = FALSE;
	if ( RET_SUCCESS == retEEP ) {
		bEepromExist = TRUE;
	} else {
		bEepromExist = FALSE;
  906074:	243500        	s16i	a4, a3, 0
	}
#endif

	hostif = A_IS_HOST_PRESENT();
  906077:	0ba000        	callx8	a10
  90607a:	d5a0      	mov.n	a5, a10
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90607c:	136917        	l32r	a3, 8e04d8 <_bss_end+0x3cd5c8>
#elif defined(PROJECT_K2)
	rst_status = ioread32(MAGPIE_REG_RST_STATUS_ADDR);
#endif /* #if defined(PROJECT_MAGPIE) */


	A_PRINTF(" A_WDT_INIT()\n\r");
  90607f:	242212        	l32i	a4, a2, 72
  906082:	1a6918        	l32r	a10, 8e04e4 <_bss_end+0x3cd5d4>
  906085:	0c0200        	memw
  906088:	8330      	l32i.n	a3, a3, 0
  90608a:	0b4000        	callx8	a4
		_indir_tbl.cmnos.usb._usb_fw_task = _fw_usb_fw_task;
		_indir_tbl.cmnos.usb._usb_reset_fifo = _fw_usb_reset_fifo;
#endif
	}

	if( rst_status == WDT_MAGIC_PATTERN ) {
  90608d:	146919        	l32r	a4, 8e04f4 <_bss_end+0x3cd5e4>
  906090:	74391d        	bne	a3, a4, 9060b1 <app_start+0xb1>
		A_PRINTF(" ==>WDT reset<==\n");
  906093:	222212        	l32i	a2, a2, 72
  906096:	1a691a        	l32r	a10, 8e0500 <_bss_end+0x3cd5f0>
  906099:	0b2000        	callx8	a2
#if defined(PROJECT_MAGPIE)
		reset_EP4_FIFO();
  90609c:	5800e6        	call8	906438 <reset_EP4_FIFO>
#endif
		*((volatile uint32_t*)WATCH_DOG_RESET_COUNTER_ADDR)+=1;
  90609f:	12691b        	l32r	a2, 8e050c <_bss_end+0x3cd5fc>
  9060a2:	0c0200        	memw
  9060a5:	8320      	l32i.n	a3, a2, 0
  9060a7:	b133      	addi.n	a3, a3, 1
  9060a9:	0c0200        	memw
  9060ac:	9320      	s32i.n	a3, a2, 0
  9060ae:	600011        	j	9060c3 <app_start+0xc3>
	} else if (rst_status == SUS_MAGIC_PATTERN) {
  9060b1:	14691c        	l32r	a4, 8e0524 <_bss_end+0x3cd614>
		A_PRINTF(" ==>warm start<==\n");
  9060b4:	222212        	l32i	a2, a2, 72
  9060b7:	1a691d        	l32r	a10, 8e052c <_bss_end+0x3cd61c>
		A_PRINTF(" ==>WDT reset<==\n");
#if defined(PROJECT_MAGPIE)
		reset_EP4_FIFO();
#endif
		*((volatile uint32_t*)WATCH_DOG_RESET_COUNTER_ADDR)+=1;
	} else if (rst_status == SUS_MAGIC_PATTERN) {
  9060ba:	743102        	beq	a3, a4, 9060c0 <app_start+0xc0>
		A_PRINTF(" ==>warm start<==\n");
	} else
		A_PRINTF(" ==>cold start<==\n");
  9060bd:	1a691e        	l32r	a10, 8e0538 <_bss_end+0x3cd628>
  9060c0:	0b2000        	callx8	a2

#if defined(PROJECT_MAGPIE)
	*((volatile uint32_t*)WATCH_DOG_MAGIC_PATTERN_ADDR)=WDT_MAGIC_PATTERN;
  9060c3:	136919        	l32r	a3, 8e0528 <_bss_end+0x3cd618>
  9060c6:	126917        	l32r	a2, 8e0524 <_bss_end+0x3cd614>
#endif /* #if defined(PROJECT_MAGPIE) */

	/* intr enable would left for firmware */
	/* athos_interrupt_init(); */

	DBG_MODULE_INSTALL();
  9060c9:	1a6912        	l32r	a10, 8e0514 <_bss_end+0x3cd604>
		A_PRINTF(" ==>warm start<==\n");
	} else
		A_PRINTF(" ==>cold start<==\n");

#if defined(PROJECT_MAGPIE)
	*((volatile uint32_t*)WATCH_DOG_MAGIC_PATTERN_ADDR)=WDT_MAGIC_PATTERN;
  9060cc:	0c0200        	memw
  9060cf:	232600        	s32i	a3, a2, 0
#endif /* #if defined(PROJECT_MAGPIE) */

	/* intr enable would left for firmware */
	/* athos_interrupt_init(); */

	DBG_MODULE_INSTALL();
  9060d2:	580585        	call8	9076e8 <cmnos_dbg_module_install>
	SFLASH_MODULE_INSTALL();
	A_SFLASH_INIT();
#endif
#endif

	HIF_MODULE_INSTALL();
  9060d5:	1a691f        	l32r	a10, 8e0554 <_bss_end+0x3cd644>
  9060d8:	5b6d1b        	call8	8e1548 <generic_hif_module_install>
	HTC_MODULE_INSTALL();
  9060db:	1a6920        	l32r	a10, 8e055c <_bss_end+0x3cd64c>
  9060de:	580f37        	call8	909dbc <htc_module_install>
	WMI_SERVICE_MODULE_INSTALL();
  9060e1:	1a6921        	l32r	a10, 8e0568 <_bss_end+0x3cd658>
  9060e4:	581142        	call8	90a5f0 <WMI_service_module_install>
	BUF_POOL_MODULE_INSTALL();
  9060e7:	1a6922        	l32r	a10, 8e0570 <_bss_end+0x3cd660>
  9060ea:	58032d        	call8	906da0 <buf_pool_module_install>
	VBUF_MODULE_INSTALL();
  9060ed:	1a6923        	l32r	a10, 8e057c <_bss_end+0x3cd66c>
  9060f0:	5b7b9b        	call8	8e4f60 <vbuf_module_install>
	VDESC_MODULE_INSTALL();
  9060f3:	1a6924        	l32r	a10, 8e0584 <_bss_end+0x3cd674>
  9060f6:	5b7bc6        	call8	8e5010 <vdesc_module_install>

	//init each module, should be put together..
	A_PRINTF("ALLOCRAM start 0x%x size %d\n", ALLOCRAM_START, ALLOCRAM_SIZE);
  9060f9:	126925        	l32r	a2, 8e0590 <_bss_end+0x3cd680>
  9060fc:	136926        	l32r	a3, 8e0594 <_bss_end+0x3cd684>
  9060ff:	b424      	addi.n	a4, a2, 4
  906101:	02330c        	sub	a3, a3, a2
  906104:	126913        	l32r	a2, 8e0550 <_bss_end+0x3cd640>
  906107:	1a6927        	l32r	a10, 8e05a4 <_bss_end+0x3cd694>
  90610a:	282212        	l32i	a8, a2, 72
  90610d:	db40      	mov.n	a11, a4
  90610f:	033c02        	or	a12, a3, a3
  906112:	0b8000        	callx8	a8
	A_ALLOCRAM_INIT(ALLOCRAM_START, ALLOCRAM_SIZE);
  906115:	282251        	l32i	a8, a2, 0x144
  906118:	da40      	mov.n	a10, a4
  90611a:	033b02        	or	a11, a3, a3
  90611d:	0b8000        	callx8	a8

	if( hostif == HIF_USB ) {
  906120:	6550c5        	bnez	a5, 9061e9 <app_start+0x1e9>
		_indir_tbl.hif._get_max_msg_len = _HIFusb_get_max_msg_len_patch;
  906123:	136928        	l32r	a3, 8e05c4 <_bss_end+0x3cd6b4>
  906126:	232679        	s32i	a3, a2, 0x1e4
		_indir_tbl.cmnos.usb._usb_reg_out = usb_reg_out_patch;
  906129:	136929        	l32r	a3, 8e05d0 <_bss_end+0x3cd6c0>
  90612c:	232633        	s32i	a3, a2, 204
		_indir_tbl.hif._isr_handler = _HIFusb_isr_handler_patch;
  90612f:	13692a        	l32r	a3, 8e05d8 <_bss_end+0x3cd6c8>
  906132:	23267b        	s32i	a3, a2, 0x1ec
		_indir_tbl.cmnos.usb._usb_set_configuration = bSet_configuration_patch;
  906135:	13692b        	l32r	a3, 8e05e4 <_bss_end+0x3cd6d4>
  906138:	232626        	s32i	a3, a2, 152
		_indir_tbl.cmnos.usb._usb_status_in = usb_status_in_patch;
  90613b:	13692c        	l32r	a3, 8e05ec <_bss_end+0x3cd6dc>
  90613e:	232634        	s32i	a3, a2, 208
		_indir_tbl.cmnos.usb._usb_get_descriptor = bGet_descriptor_patch;
  906141:	13692d        	l32r	a3, 8e05f8 <_bss_end+0x3cd6e8>
  906144:	232630        	s32i	a3, a2, 192
		_indir_tbl.cmnos.usb._usb_standard_cmd = bStandardCommand_patch;
  906147:	13692e        	l32r	a3, 8e0600 <_bss_end+0x3cd6f0>
  90614a:	232627        	s32i	a3, a2, 156
		_indir_tbl.usbfifo_api._init = _fw_usbfifo_init;
  90614d:	13692f        	l32r	a3, 8e060c <_bss_end+0x3cd6fc>
  906150:	232696        	s32i	a3, a2, 0x258

#if defined(PROJECT_MAGPIE)
		_indir_tbl.cmnos.usb._usb_power_off = zfTurnOffPower_patch;
  906153:	136930        	l32r	a3, 8e0614 <_bss_end+0x3cd704>
  906156:	232629        	s32i	a3, a2, 164
		_indir_tbl.cmnos.usb._usb_reset_fifo = zfResetUSBFIFO_patch;
  906159:	136931        	l32r	a3, 8e0620 <_bss_end+0x3cd710>
  90615c:	23262a        	s32i	a3, a2, 168
		_indir_tbl.hif._start = _HIFusb_start_patch;
  90615f:	136932        	l32r	a3, 8e0628 <_bss_end+0x3cd718>
  906162:	232674        	s32i	a3, a2, 0x1d0
		_indir_tbl.htc._HTC_MsgRecvHandler = HTCMsgRecvHandler_patch;
  906165:	136933        	l32r	a3, 8e0634 <_bss_end+0x3cd724>
  906168:	232686        	s32i	a3, a2, 0x218
		_indir_tbl.htc._HTC_ControlSvcProcessMsg = HTCControlSvcProcessMsg_patch;
  90616b:	136934        	l32r	a3, 8e063c <_bss_end+0x3cd72c>
  90616e:	232688        	s32i	a3, a2, 0x220

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  906171:	126935        	l32r	a2, 8e0648 <_bss_end+0x3cd738>
  906174:	222000        	l8ui	a2, a2, 0
#endif

		if (!(ioread8_usb(ZM_MAIN_CTRL_OFFSET) & BIT6))
  906177:	792f02        	bbsi	a2, 25, 90617d <app_start+0x17d>
			vUSBFIFO_EP6Cfg_FS_patch();
  90617a:	5805fe        	call8	907974 <vUSBFIFO_EP6Cfg_FS_patch>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90617d:	126936        	l32r	a2, 8e0658 <_bss_end+0x3cd748>

#ifdef FUSION_USB_ENABLE_TX_STREAM
		// For K2, enable tx stream mode
		A_PRINTF("Enable Tx Stream mode: 0x%x\r\n",
  906180:	136913        	l32r	a3, 8e05cc <_bss_end+0x3cd6bc>
  906183:	0c0200        	memw
  906186:	8b20      	l32i.n	a11, a2, 0
  906188:	233212        	l32i	a3, a3, 72
  90618b:	1a6937        	l32r	a10, 8e0668 <_bss_end+0x3cd758>
  90618e:	0b3000        	callx8	a3
			ioread32_usb(ZM_SOC_USB_MODE_CTRL_OFFSET));

		/* Patch for K2 USB STREAM mode */
		/* disable down stream DMA mode */
		io32_rmw_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT6, BIT0);
  906191:	da20      	mov.n	a10, a2
  906193:	c4b0      	movi.n	a11, 64
  906195:	c0c1      	movi.n	a12, 1
  906197:	582397        	call8	90eff4 <io32_rmw>
#if SYSTEM_MODULE_HP_EP5
		io32_set_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT8);
  90619a:	da20      	mov.n	a10, a2
  90619c:	2b1a00        	movi	a11, 0x100
  90619f:	c0c0      	movi.n	a12, 0
  9061a1:	582394        	call8	90eff4 <io32_rmw>
#endif

#if SYSTEM_MODULE_HP_EP6
		io32_set_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT9);
  9061a4:	da20      	mov.n	a10, a2
  9061a6:	2b2a00        	movi	a11, 0x200
  9061a9:	c0c0      	movi.n	a12, 0
  9061ab:	582392        	call8	90eff4 <io32_rmw>
#endif
		/* enable down stream DMA mode */
		io32_set_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT0);
  9061ae:	da20      	mov.n	a10, a2
  9061b0:	c0b1      	movi.n	a11, 1
  9061b2:	2c0a00        	movi	a12, 0
  9061b5:	58238f        	call8	90eff4 <io32_rmw>
#endif

#ifdef FUSION_USB_ENABLE_RX_STREAM
		/* Patch for K2 USB STREAM mode */
		/* disable upstream DMA mode and enable upstream stream mode */
		io32_clr_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT1 | BIT3);
  9061b8:	da20      	mov.n	a10, a2
  9061ba:	c0b0      	movi.n	a11, 0
  9061bc:	c0ca      	movi.n	a12, 10
  9061be:	58238d        	call8	90eff4 <io32_rmw>

		/* K2, Set maximum IN transfer to 8K */
		io32_rmw_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, 0x20, 0x30);
  9061c1:	da20      	mov.n	a10, a2
  9061c3:	c2b0      	movi.n	a11, 32
  9061c5:	c3c0      	movi.n	a12, 48
  9061c7:	58238b        	call8	90eff4 <io32_rmw>

		/* enable upstream DMA mode */
		io32_set_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT1);
  9061ca:	da20      	mov.n	a10, a2
  9061cc:	c0b2      	movi.n	a11, 2
  9061ce:	2c0a00        	movi	a12, 0
  9061d1:	582388        	call8	90eff4 <io32_rmw>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9061d4:	126938        	l32r	a2, 8e06b4 <_bss_end+0x3cd7a4>
  9061d7:	230aa0        	movi	a3, 160
  9061da:	0c0200        	memw
  9061dd:	9320      	s32i.n	a3, a2, 0
  9061df:	126939        	l32r	a2, 8e06c4 <_bss_end+0x3cd7b4>
  9061e2:	c039      	movi.n	a3, 9
  9061e4:	0c0200        	memw
  9061e7:	9320      	s32i.n	a3, a2, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  9061e9:	12693a        	l32r	a2, 8e06d4 <_bss_end+0x3cd7c4>
	}
#if defined(PROJECT_MAGPIE) && !defined(ROM_VER_1_1)
	else if (hostif == HIF_PCI )
		hif_pci_patch_install(&_indir_tbl.hif);
#endif
	A_PRINTF("USB mode: 0x%x\r\n", ioread32_usb(0x100));
  9061ec:	1a693b        	l32r	a10, 8e06d8 <_bss_end+0x3cd7c8>
  9061ef:	0c0200        	memw
  9061f2:	8b20      	l32i.n	a11, a2, 0
  9061f4:	126913        	l32r	a2, 8e0640 <_bss_end+0x3cd730>
  9061f7:	232212        	l32i	a3, a2, 72
  9061fa:	0b3000        	callx8	a3

	// patch the clock function
	if(1) {
		_indir_tbl.cmnos.clock._clock_init = cmnos_clock_init_patch;
  9061fd:	13693c        	l32r	a3, 8e06f0 <_bss_end+0x3cd7e0>
		_indir_tbl.cmnos.clock._delay_us = cmnos_delay_us_patch;
		_indir_tbl.cmnos.clock._clock_tick = cmnos_tick_patch;
		_indir_tbl.cmnos.clock._milliseconds = cmnos_milliseconds_patch;

		//default clock, setup initial variable, SYSTEM_FREQ=40
		A_CLOCK_INIT(SYSTEM_FREQ);
  906200:	2a0a28        	movi	a10, 40
#endif
	A_PRINTF("USB mode: 0x%x\r\n", ioread32_usb(0x100));

	// patch the clock function
	if(1) {
		_indir_tbl.cmnos.clock._clock_init = cmnos_clock_init_patch;
  906203:	232638        	s32i	a3, a2, 224
		_indir_tbl.cmnos.clock._refclk_speed_get = cmnos_refclk_speed_get_patch;
  906206:	13693d        	l32r	a3, 8e06fc <_bss_end+0x3cd7ec>
  906209:	23263d        	s32i	a3, a2, 244
		_indir_tbl.cmnos.clock._delay_us = cmnos_delay_us_patch;
  90620c:	13693e        	l32r	a3, 8e0704 <_bss_end+0x3cd7f4>
  90620f:	23263b        	s32i	a3, a2, 236
		_indir_tbl.cmnos.clock._clock_tick = cmnos_tick_patch;
  906212:	13693f        	l32r	a3, 8e0710 <_bss_end+0x3cd800>
  906215:	232640        	s32i	a3, a2, 0x100
		_indir_tbl.cmnos.clock._milliseconds = cmnos_milliseconds_patch;
  906218:	136940        	l32r	a3, 8e0718 <_bss_end+0x3cd808>
  90621b:	23263e        	s32i	a3, a2, 248

		//default clock, setup initial variable, SYSTEM_FREQ=40
		A_CLOCK_INIT(SYSTEM_FREQ);
  90621e:	58126f        	call8	90abdc <cmnos_clock_init_patch>
	}

	Magpie_init();
  906221:	580182        	call8	90682c <Magpie_init>

#if MAGPIE_ENABLE_WLAN == 1
	io32_clr(MAGPIE_REG_RST_RESET_ADDR, BIT10 | BIT8 | BIT7 | BIT6);
  906224:	1a6941        	l32r	a10, 8e0728 <_bss_end+0x3cd818>
  906227:	2b0a00        	movi	a11, 0
  90622a:	2c5ac0        	movi	a12, 0x5c0
  90622d:	582371        	call8	90eff4 <io32_rmw>
#if defined(PROJECT_MAGPIE)
	io32_set(MAGPIE_REG_AHB_ARB_ADDR, BIT1);
  906230:	1a6942        	l32r	a10, 8e0738 <_bss_end+0x3cd828>
  906233:	2b0a02        	movi	a11, 2
  906236:	2c0a00        	movi	a12, 0
  906239:	58236e        	call8	90eff4 <io32_rmw>
#endif

	wlan_pci_module_init();
  90623c:	580e40        	call8	909b40 <wlan_pci_module_init>
	wlan_pci_probe();
  90623f:	580e61        	call8	909bc4 <wlan_pci_probe>
#endif


	A_PRINTF("Tgt running\n\r");
  906242:	1a6943        	l32r	a10, 8e0750 <_bss_end+0x3cd840>
  906245:	232212        	l32i	a3, a2, 72
  906248:	0b3000        	callx8	a3

#if defined(PROJECT_MAGPIE)
	if(1) {
		A_PRINTF("======= Apply MISC Assert patch\n\r");
  90624b:	1a6944        	l32r	a10, 8e075c <_bss_end+0x3cd84c>
  90624e:	232212        	l32i	a3, a2, 72
  906251:	0b3000        	callx8	a3
		_assfail_ori =  _indir_tbl.cmnos.misc._assfail;
  906254:	842a      	l32i.n	a4, a2, 40
  906256:	136945        	l32r	a3, 8e076c <_bss_end+0x3cd85c>
  906259:	243600        	s32i	a4, a3, 0
		_indir_tbl.cmnos.misc._assfail = exception_reset;
  90625c:	136946        	l32r	a3, 8e0774 <_bss_end+0x3cd864>
  90625f:	23260a        	s32i	a3, a2, 40
	}

	change_magpie_clk();
  906262:	58001e        	call8	9062dc <change_magpie_clk>
#endif
	wlan_task(); //never return
  906265:	58013c        	call8	906758 <wlan_task>

Disassembly of section .text:

00906268 <io32_rmw>:
	iowrite8(addr, val);
}

static inline void io32_rmw(volatile uint32_t addr,
			    const uint32_t set, const uint32_t clr)
{
  906268:	6c1006        	entry	a1, 48
  90626b:	0c0200        	memw
  90626e:	9210      	s32i.n	a2, a1, 0
	uint32_t val;

	val = ioread32(addr);
  906270:	0c0200        	memw
  906273:	8810      	l32i.n	a8, a1, 0
	val &= ~clr;
  906275:	c79f      	movi.n	a9, -1
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  906277:	0c0200        	memw
  90627a:	8880      	l32i.n	a8, a8, 0
			    const uint32_t set, const uint32_t clr)
{
	uint32_t val;

	val = ioread32(addr);
	val &= ~clr;
  90627c:	049403        	xor	a4, a9, a4
  90627f:	084801        	and	a8, a4, a8
	val |= set;
	iowrite32(addr, val);
  906282:	0c0200        	memw
  906285:	8a10      	l32i.n	a10, a1, 0
{
	uint32_t val;

	val = ioread32(addr);
	val &= ~clr;
	val |= set;
  906287:	038302        	or	a3, a8, a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90628a:	0c0200        	memw
  90628d:	93a0      	s32i.n	a3, a10, 0
  90628f:	d10f      	retw.n
  906291:	000000        	ill

00906294 <fatal_exception_func>:

static void idle_task();

#if defined(PROJECT_MAGPIE)
void fatal_exception_func()
{
  906294:	6c1004        	entry	a1, 32
	// patch for execption
	(void)_xtos_set_exception_handler(EXCCAUSE_UNALIGNED, AR6002_fatal_exception_handler_patch);
  906297:	126947        	l32r	a2, 8e07b4 <_bss_end+0x3cd8a4>
  90629a:	c0a9      	movi.n	a10, 9
  90629c:	022b02        	or	a11, a2, a2
  90629f:	5b802a        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_LOAD_STORE_ERROR, AR6002_fatal_exception_handler_patch);
  9062a2:	db20      	mov.n	a11, a2
  9062a4:	2a0a03        	movi	a10, 3
  9062a7:	5b8028        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_ILLEGAL, AR6002_fatal_exception_handler_patch);
  9062aa:	db20      	mov.n	a11, a2
  9062ac:	2a0a00        	movi	a10, 0
  9062af:	5b8026        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_INSTR_ERROR, AR6002_fatal_exception_handler_patch);
  9062b2:	db20      	mov.n	a11, a2
  9062b4:	2a0a02        	movi	a10, 2
  9062b7:	5b8024        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_PRIVILEGED, AR6002_fatal_exception_handler_patch);
  9062ba:	db20      	mov.n	a11, a2
  9062bc:	2a0a08        	movi	a10, 8
  9062bf:	5b8022        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_INSTR_DATA_ERROR, AR6002_fatal_exception_handler_patch);
  9062c2:	db20      	mov.n	a11, a2
  9062c4:	2a0a0c        	movi	a10, 12
  9062c7:	5b8020        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_LOAD_STORE_DATA_ERROR, AR6002_fatal_exception_handler_patch);
  9062ca:	db20      	mov.n	a11, a2
  9062cc:	c0ad      	movi.n	a10, 13
  9062ce:	5b801e        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_DIVIDE_BY_ZERO, AR6002_fatal_exception_handler_patch);
  9062d1:	db20      	mov.n	a11, a2
  9062d3:	c0a6      	movi.n	a10, 6
  9062d5:	5b801c        	call8	8e6348 <_xtos_set_exception_handler>
  9062d8:	d10f      	retw.n
	...

009062dc <change_magpie_clk>:
#endif

#if defined(PROJECT_MAGPIE)
void
change_magpie_clk(void)
{
  9062dc:	6c1004        	entry	a1, 32
  9062df:	126948        	l32r	a2, 8e0800 <_bss_end+0x3cd8f0>
  9062e2:	c131      	movi.n	a3, 17
  9062e4:	0c0200        	memw
  9062e7:	9320      	s32i.n	a3, a2, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  9062e9:	0c0200        	memw
  9062ec:	8320      	l32i.n	a3, a2, 0
	iowrite32(0x00056004, BIT4 | BIT0);

	/* Wait for the update bit (BIT0) to get cleared */
	while (ioread32(0x00056004) & BIT0)
  9062ee:	030340        	extui	a3, a3, 0, 1
  9062f1:	653ff4        	bnez	a3, 9062e9 <change_magpie_clk+0xd>
		;

	/* Put the PLL into reset */
	io32_set(0x00050010, BIT1);
  9062f4:	146941        	l32r	a4, 8e07f8 <_bss_end+0x3cd8e8>
  9062f7:	dc30      	mov.n	a12, a3
  9062f9:	da40      	mov.n	a10, a4
  9062fb:	c0b2      	movi.n	a11, 2
  9062fd:	5bffda        	call8	906268 <io32_rmw>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  906300:	186949        	l32r	a8, 8e0824 <_bss_end+0x3cd914>
  906303:	293a25        	movi	a9, 0x325
	 */
	/* Setting PLL to 400MHz */
	iowrite32(0x00056000, 0x325);

	/* Pull CPU PLL out of Reset */
	io32_clr(0x00050010, BIT1);
  906306:	da40      	mov.n	a10, a4
  906308:	db30      	mov.n	a11, a3
  90630a:	0c0200        	memw
  90630d:	9980      	s32i.n	a9, a8, 0
  90630f:	2c0a02        	movi	a12, 2
  906312:	5bffd5        	call8	906268 <io32_rmw>

	A_DELAY_USECS(60); // wait for stable
  906315:	136913        	l32r	a3, 8e0764 <_bss_end+0x3cd854>
  906318:	c3ac      	movi.n	a10, 60
  90631a:	24323b        	l32i	a4, a3, 236
  90631d:	0b4000        	callx8	a4
  906320:	14694a        	l32r	a4, 8e0848 <_bss_end+0x3cd938>
  906323:	0c0200        	memw
  906326:	9420      	s32i.n	a4, a2, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  906328:	0c0200        	memw
  90632b:	8420      	l32i.n	a4, a2, 0
	/*
	 * AHB clk = ( CPU clk / 2 )
	 */
	iowrite32(0x00056004, 0x00001 | BIT16 | BIT8); /* set plldiv to 2 */

	while (ioread32(0x00056004) & BIT0)
  90632d:	7f4ff7        	bbsi	a4, 31, 906328 <change_magpie_clk+0x4c>
		;

	/* UART Setting */
	A_UART_HWINIT((100*1000*1000), 115200);
  906330:	22321a        	l32i	a2, a3, 104
  906333:	1a694b        	l32r	a10, 8e0860 <_bss_end+0x3cd950>
  906336:	1b694c        	l32r	a11, 8e0868 <_bss_end+0x3cd958>
  906339:	0b2000        	callx8	a2
  90633c:	d10f      	retw.n
	...

00906340 <exception_reset>:

}

void exception_reset(struct register_dump_s *dump)
{
  906340:	6c1004        	entry	a1, 32
	A_PRINTF("exception_reset \n");
  906343:	136913        	l32r	a3, 8e0790 <_bss_end+0x3cd880>
  906346:	1a694d        	l32r	a10, 8e087c <_bss_end+0x3cd96c>
  906349:	243212        	l32i	a4, a3, 72
  90634c:	0b4000        	callx8	a4

	/* phase I dump info */
	A_PRINTF("exception reset-phase 1\n");
  90634f:	1a694e        	l32r	a10, 8e0888 <_bss_end+0x3cd978>
  906352:	243212        	l32i	a4, a3, 72
  906355:	0b4000        	callx8	a4
	if(_assfail_ori)
  906358:	146945        	l32r	a4, 8e086c <_bss_end+0x3cd95c>
  90635b:	8440      	l32i.n	a4, a4, 0
  90635d:	c844      	beqz.n	a4, 906365 <exception_reset+0x25>
		_assfail_ori(dump);
  90635f:	022a02        	or	a10, a2, a2
  906362:	0b4000        	callx8	a4

	/* phase II reset */
	A_PRINTF("exception reset-phase 2\n");
  906365:	223212        	l32i	a2, a3, 72
  906368:	1a694f        	l32r	a10, 8e08a4 <_bss_end+0x3cd994>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90636b:	c040      	movi.n	a4, 0
  90636d:	0b2000        	callx8	a2
  906370:	156917        	l32r	a5, 8e07cc <_bss_end+0x3cd8bc>
  906373:	126919        	l32r	a2, 8e07d8 <_bss_end+0x3cd8c8>
	iowrite32(WATCH_DOG_MAGIC_PATTERN_ADDR, WDT_MAGIC_PATTERN);

	io32_set(MAGPIE_REG_RST_RESET_ADDR, BIT10 | BIT8 | BIT7 | BIT6);
  906376:	2b5ac0        	movi	a11, 0x5c0
  906379:	0c0200        	memw
  90637c:	9250      	s32i.n	a2, a5, 0
  90637e:	126941        	l32r	a2, 8e0884 <_bss_end+0x3cd974>
  906381:	c0c0      	movi.n	a12, 0
  906383:	da20      	mov.n	a10, a2
  906385:	5bffb8        	call8	906268 <io32_rmw>

	io32_set(MAGPIE_REG_AHB_ARB_ADDR, BIT1);
  906388:	1a6942        	l32r	a10, 8e0890 <_bss_end+0x3cd980>
  90638b:	2b0a02        	movi	a11, 2
  90638e:	2c0a00        	movi	a12, 0
  906391:	5bffb5        	call8	906268 <io32_rmw>
  906394:	166950        	l32r	a6, 8e08d4 <_bss_end+0x3cd9c4>

	iowrite32_usb(ZM_SOC_USB_DMA_RESET_OFFSET, 0x0);
	io32_set(0x50010, BIT4);
  906397:	dc40      	mov.n	a12, a4
  906399:	0c0200        	memw
  90639c:	9460      	s32i.n	a4, a6, 0
  90639e:	da20      	mov.n	a10, a2
  9063a0:	c1b0      	movi.n	a11, 16
  9063a2:	5bffb1        	call8	906268 <io32_rmw>
	A_DELAY_USECS(5);
  9063a5:	28323b        	l32i	a8, a3, 236
  9063a8:	c0a5      	movi.n	a10, 5
  9063aa:	0b8000        	callx8	a8
	io32_clr(0x50010, BIT4);
  9063ad:	c1c0      	movi.n	a12, 16
  9063af:	044b02        	or	a11, a4, a4
  9063b2:	022a02        	or	a10, a2, a2
  9063b5:	5bffac        	call8	906268 <io32_rmw>
	A_DELAY_USECS(5);
  9063b8:	22323b        	l32i	a2, a3, 236
  9063bb:	c0a5      	movi.n	a10, 5
  9063bd:	0b2000        	callx8	a2
  9063c0:	c021      	movi.n	a2, 1
  9063c2:	0c0200        	memw
  9063c5:	226600        	s32i	a2, a6, 0
  9063c8:	166948        	l32r	a6, 8e08e8 <_bss_end+0x3cd9d8>
  9063cb:	280a11        	movi	a8, 17
  9063ce:	0c0200        	memw
  9063d1:	286600        	s32i	a8, a6, 0
	iowrite32_usb(ZM_SOC_USB_DMA_RESET_OFFSET, BIT0);

	// set clock to bypass mode - 40Mhz from XTAL
	iowrite32(MAGPIE_REG_CPU_PLL_BYPASS_ADDR, BIT0 | BIT4);
	A_DELAY_USECS(100); // wait for stable
  9063d4:	26323b        	l32i	a6, a3, 236
  9063d7:	2a0a64        	movi	a10, 100
  9063da:	0b6000        	callx8	a6
  9063dd:	186951        	l32r	a8, 8e0924 <_bss_end+0x3cda14>
  9063e0:	166949        	l32r	a6, 8e0904 <_bss_end+0x3cd9f4>
	iowrite32(MAGPIE_REG_CPU_PLL_ADDR, BIT16);

	A_UART_HWINIT((40*1000*1000), 115200);
  9063e3:	1b694c        	l32r	a11, 8e0914 <_bss_end+0x3cda04>
  9063e6:	0c0200        	memw
  9063e9:	9860      	s32i.n	a8, a6, 0
  9063eb:	1a6914        	l32r	a10, 8e083c <_bss_end+0x3cd92c>
  9063ee:	26321a        	l32i	a6, a3, 104
  9063f1:	0b6000        	callx8	a6

	A_PRINTF("do TX/RX swap\n");
  9063f4:	1a6952        	l32r	a10, 8e093c <_bss_end+0x3cda2c>
  9063f7:	263212        	l32i	a6, a3, 72
  9063fa:	0b6000        	callx8	a6

	MAGPIE_REG_USB_RX0_SWAP_DATA = 0x1;
  9063fd:	166953        	l32r	a6, 8e094c <_bss_end+0x3cda3c>
	MAGPIE_REG_USB_TX0_SWAP_DATA = 0x1;
	MAGPIE_REG_USB_RX1_SWAP_DATA = 0x1;
	MAGPIE_REG_USB_RX2_SWAP_DATA = 0x1;

        A_PRINTF("Cold reboot initiated.");
  906400:	1a6957        	l32r	a10, 8e095c <_bss_end+0x3cda4c>

	A_UART_HWINIT((40*1000*1000), 115200);

	A_PRINTF("do TX/RX swap\n");

	MAGPIE_REG_USB_RX0_SWAP_DATA = 0x1;
  906403:	0c0200        	memw
  906406:	9260      	s32i.n	a2, a6, 0
	MAGPIE_REG_USB_TX0_SWAP_DATA = 0x1;
  906408:	166954        	l32r	a6, 8e0958 <_bss_end+0x3cda48>
  90640b:	0c0200        	memw
  90640e:	226600        	s32i	a2, a6, 0
	MAGPIE_REG_USB_RX1_SWAP_DATA = 0x1;
  906411:	166955        	l32r	a6, 8e0968 <_bss_end+0x3cda58>
  906414:	0c0200        	memw
  906417:	226600        	s32i	a2, a6, 0
	MAGPIE_REG_USB_RX2_SWAP_DATA = 0x1;
  90641a:	166956        	l32r	a6, 8e0974 <_bss_end+0x3cda64>
  90641d:	0c0200        	memw
  906420:	226600        	s32i	a2, a6, 0

        A_PRINTF("Cold reboot initiated.");
  906423:	223212        	l32i	a2, a3, 72
  906426:	0b2000        	callx8	a2
#if defined(PROJECT_MAGPIE)
	iowrite32(WATCH_DOG_MAGIC_PATTERN_ADDR, 0);
#elif defined(PROJECT_K2)
	iowrite32(MAGPIE_REG_RST_STATUS_ADDR, 0);
#endif /* #if defined(PROJECT_MAGPIE) */
	A_USB_JUMP_BOOT();
  906429:	22322c        	l32i	a2, a3, 176
  90642c:	0c0200        	memw
  90642f:	9450      	s32i.n	a4, a5, 0
  906431:	0b2000        	callx8	a2
  906434:	d10f      	retw.n
	...

00906438 <reset_EP4_FIFO>:
}

void reset_EP4_FIFO(void)
{
  906438:	6c1004        	entry	a1, 32
  90643b:	186958        	l32r	a8, 8e099c <_bss_end+0x3cda8c>
{
	uint8_t val;

	val = ioread8(addr);
	val &= ~clr;
	val |= set;
  90643e:	c1a0      	movi.n	a10, 16

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  906440:	298000        	l8ui	a9, a8, 0
  906443:	090947        	extui	a9, a9, 0, 8
{
	uint8_t val;

	val = ioread8(addr);
	val &= ~clr;
	val |= set;
  906446:	0a9902        	or	a9, a9, a10
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  906449:	0c0200        	memw
  90644c:	298400        	s8i	a9, a8, 0

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  90644f:	298000        	l8ui	a9, a8, 0
			    const uint8_t set, const uint8_t clr)
{
	uint8_t val;

	val = ioread8(addr);
	val &= ~clr;
  906452:	c6af      	movi.n	a10, -17

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  906454:	090947        	extui	a9, a9, 0, 8
			    const uint8_t set, const uint8_t clr)
{
	uint8_t val;

	val = ioread8(addr);
	val &= ~clr;
  906457:	0a9901        	and	a9, a9, a10
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  90645a:	0c0200        	memw
  90645d:	298400        	s8i	a9, a8, 0
  906460:	d10f      	retw.n
	...

00906464 <zfGenExceptionEvent>:
	for(i = 0; i < 100; i++) {}
	io8_clr_usb(ZM_EP4_BYTE_COUNT_HIGH_OFFSET, BIT4);
}

LOCAL void zfGenExceptionEvent(uint32_t exccause, uint32_t pc, uint32_t badvaddr)
{
  906464:	6c1004        	entry	a1, 32
	uint32_t pattern = 0x33221199;

	A_PRINTF("<Exception>Tgt Drv send an event 44332211 to Host Drv\n");
  906467:	186913        	l32r	a8, 8e08b4 <_bss_end+0x3cd9a4>
  90646a:	1a6959        	l32r	a10, 8e09d0 <_bss_end+0x3cdac0>
  90646d:	288212        	l32i	a8, a8, 72
  906470:	0b8000        	callx8	a8

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  906473:	18695a        	l32r	a8, 8e09dc <_bss_end+0x3cdacc>
	mUSB_STATUS_IN_INT_DISABLE();
  906476:	2a0ac0        	movi	a10, 192
  906479:	298000        	l8ui	a9, a8, 0
  90647c:	090947        	extui	a9, a9, 0, 8
  90647f:	0a9902        	or	a9, a9, a10
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  906482:	0c0200        	memw
  906485:	298400        	s8i	a9, a8, 0
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  906488:	18693a        	l32r	a8, 8e0970 <_bss_end+0x3cda60>
  90648b:	c09f      	movi.n	a9, 15
  90648d:	0c0200        	memw
  906490:	9980      	s32i.n	a9, a8, 0
  906492:	18695b        	l32r	a8, 8e0a00 <_bss_end+0x3cdaf0>
  906495:	19695c        	l32r	a9, 8e0a08 <_bss_end+0x3cdaf8>
  906498:	0c0200        	memw
  90649b:	9980      	s32i.n	a9, a8, 0
  90649d:	0c0200        	memw
  9064a0:	9280      	s32i.n	a2, a8, 0
  9064a2:	0c0200        	memw
  9064a5:	9380      	s32i.n	a3, a8, 0
  9064a7:	0c0200        	memw
  9064aa:	9480      	s32i.n	a4, a8, 0

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  9064ac:	18695d        	l32r	a8, 8e0a20 <_bss_end+0x3cdb10>
	iowrite32_usb(ZM_EP3_DATA_OFFSET, pattern);
	iowrite32_usb(ZM_EP3_DATA_OFFSET, exccause);
	iowrite32_usb(ZM_EP3_DATA_OFFSET, pc);
	iowrite32_usb(ZM_EP3_DATA_OFFSET, badvaddr);
    
	mUSB_EP3_XFER_DONE();
  9064af:	c038      	movi.n	a3, 8
  9064b1:	228000        	l8ui	a2, a8, 0
  9064b4:	020247        	extui	a2, a2, 0, 8
  9064b7:	032202        	or	a2, a2, a3
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  9064ba:	0c0200        	memw
  9064bd:	228400        	s8i	a2, a8, 0
  9064c0:	d10f      	retw.n
	...

009064c4 <AR6002_fatal_exception_handler_patch>:
	mUSB_EP3_XFER_DONE();
}

void
AR6002_fatal_exception_handler_patch(CPU_exception_frame_t *exc_frame)
{
  9064c4:	6c1016        	entry	a1, 176
	struct register_dump_s dump;
	uint32_t  exc_cause, exc_vaddr;
	asm volatile("rsr %0,%1" : "=r" (exc_cause) : "n" (EXCCAUSE));
  9064c7:	04e830        	rsr.exccause	a4
	asm volatile("rsr %0,%1" : "=r" (exc_vaddr) : "n" (EXCVADDR));
  9064ca:	03ee30        	rsr.excvaddr	a3

	dump.exc_frame              = *exc_frame; /* structure copy */
  9064cd:	2c0a80        	movi	a12, 128
  9064d0:	022b02        	or	a11, a2, a2
  9064d3:	2a1c10        	addi	a10, a1, 16
  9064d6:	5b81a3        	call8	8e6b64 <memcpy>
	dump.badvaddr               = exc_vaddr;
	dump.exc_frame.xt_exccause  = exc_cause;
	dump.pc                     = exc_frame->xt_pc;
  9064d9:	8b20      	l32i.n	a11, a2, 0
	dump.assline                = 0;

	zfGenExceptionEvent(dump.exc_frame.xt_exccause, dump.pc, dump.badvaddr);
  9064db:	da40      	mov.n	a10, a4
  9064dd:	dc30      	mov.n	a12, a3

	dump.exc_frame              = *exc_frame; /* structure copy */
	dump.badvaddr               = exc_vaddr;
	dump.exc_frame.xt_exccause  = exc_cause;
	dump.pc                     = exc_frame->xt_pc;
	dump.assline                = 0;
  9064df:	c020      	movi.n	a2, 0
	uint32_t  exc_cause, exc_vaddr;
	asm volatile("rsr %0,%1" : "=r" (exc_cause) : "n" (EXCCAUSE));
	asm volatile("rsr %0,%1" : "=r" (exc_vaddr) : "n" (EXCVADDR));

	dump.exc_frame              = *exc_frame; /* structure copy */
	dump.badvaddr               = exc_vaddr;
  9064e1:	9313      	s32i.n	a3, a1, 12
	dump.exc_frame.xt_exccause  = exc_cause;
	dump.pc                     = exc_frame->xt_pc;
  9064e3:	9b12      	s32i.n	a11, a1, 8
	dump.assline                = 0;
  9064e5:	9211      	s32i.n	a2, a1, 4
	asm volatile("rsr %0,%1" : "=r" (exc_cause) : "n" (EXCCAUSE));
	asm volatile("rsr %0,%1" : "=r" (exc_vaddr) : "n" (EXCVADDR));

	dump.exc_frame              = *exc_frame; /* structure copy */
	dump.badvaddr               = exc_vaddr;
	dump.exc_frame.xt_exccause  = exc_cause;
  9064e7:	941c      	s32i.n	a4, a1, 48
	dump.pc                     = exc_frame->xt_pc;
	dump.assline                = 0;

	zfGenExceptionEvent(dump.exc_frame.xt_exccause, dump.pc, dump.badvaddr);
  9064e9:	5bffde        	call8	906464 <zfGenExceptionEvent>

#if SYSTEM_MODULE_PRINT
	A_PRINTF("\nFatal exception (%d): \tpc=0x%x \n\r\tbadvaddr=0x%x \n\r\tdump area=0x%x\n",
  9064ec:	126913        	l32r	a2, 8e0938 <_bss_end+0x3cda28>
  9064ef:	8b1c      	l32i.n	a11, a1, 48
  9064f1:	232212        	l32i	a3, a2, 72
  9064f4:	8c12      	l32i.n	a12, a1, 8
  9064f6:	8d13      	l32i.n	a13, a1, 12
  9064f8:	1a695e        	l32r	a10, 8e0a70 <_bss_end+0x3cdb60>
  9064fb:	de10      	mov.n	a14, a1
  9064fd:	0b3000        	callx8	a3
		 dump.exc_frame.xt_exccause, dump.pc, dump.badvaddr, &dump);
	PRINT_FAILURE_STATE();
  906500:	0bb130        	rsr.epc1	a11
  906503:	0cb230        	rsr.epc2	a12
  906506:	0db330        	rsr.epc3	a13
  906509:	0eb430        	rsr.epc4	a14
  90650c:	1a695f        	l32r	a10, 8e0a88 <_bss_end+0x3cdb78>
  90650f:	232212        	l32i	a3, a2, 72
  906512:	0b3000        	callx8	a3
  906515:	136910        	l32r	a3, 8e0958 <_bss_end+0x3cda48>
  906518:	1a6960        	l32r	a10, 8e0a98 <_bss_end+0x3cdb88>
  90651b:	0c0200        	memw
  90651e:	8b30      	l32i.n	a11, a3, 0
  906520:	13691b        	l32r	a3, 8e098c <_bss_end+0x3cda7c>
  906523:	0c0200        	memw
  906526:	8c30      	l32i.n	a12, a3, 0
  906528:	136917        	l32r	a3, 8e0984 <_bss_end+0x3cda74>
  90652b:	0c0200        	memw
  90652e:	8d30      	l32i.n	a13, a3, 0
  906530:	232212        	l32i	a3, a2, 72
  906533:	0b3000        	callx8	a3
#else
	A_PUTS("Fatal exception\n\r");
#endif
	A_ASSFAIL(&dump);
  906536:	822a      	l32i.n	a2, a2, 40
  906538:	da10      	mov.n	a10, a1
  90653a:	0b2000        	callx8	a2
  90653d:	63fffc        	j	90653d <AR6002_fatal_exception_handler_patch+0x79>

00906540 <zfGenWrongEpidEvent>:
    
	mUSB_EP3_XFER_DONE();
}

LOCAL void zfGenWrongEpidEvent(uint32_t epid)
{
  906540:	6c1004        	entry	a1, 32
	uint32_t pattern   = 0x33221299;

	A_PRINTF("<WrongEPID>Tgt Drv send an event 44332212 to Host Drv\n");
  906543:	186913        	l32r	a8, 8e0990 <_bss_end+0x3cda80>
  906546:	1a6961        	l32r	a10, 8e0acc <_bss_end+0x3cdbbc>
  906549:	288212        	l32i	a8, a8, 72
  90654c:	0b8000        	callx8	a8

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  90654f:	18695a        	l32r	a8, 8e0ab8 <_bss_end+0x3cdba8>
	mUSB_STATUS_IN_INT_DISABLE();
  906552:	2a0ac0        	movi	a10, 192
  906555:	298000        	l8ui	a9, a8, 0
  906558:	090947        	extui	a9, a9, 0, 8
  90655b:	0a9902        	or	a9, a9, a10
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  90655e:	0c0200        	memw
  906561:	298400        	s8i	a9, a8, 0
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  906564:	18693a        	l32r	a8, 8e0a4c <_bss_end+0x3cdb3c>
  906567:	c09f      	movi.n	a9, 15
  906569:	0c0200        	memw
  90656c:	9980      	s32i.n	a9, a8, 0
  90656e:	18695b        	l32r	a8, 8e0adc <_bss_end+0x3cdbcc>
  906571:	196962        	l32r	a9, 8e0afc <_bss_end+0x3cdbec>
  906574:	0c0200        	memw
  906577:	9980      	s32i.n	a9, a8, 0
  906579:	0c0200        	memw
  90657c:	9280      	s32i.n	a2, a8, 0

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  90657e:	18695d        	l32r	a8, 8e0af4 <_bss_end+0x3cdbe4>
	iowrite32_usb(ZM_CBUS_FIFO_SIZE_OFFSET, 0x0f);

	iowrite32_usb(ZM_EP3_DATA_OFFSET, pattern);
	iowrite32_usb(ZM_EP3_DATA_OFFSET, epid);

	mUSB_EP3_XFER_DONE();
  906581:	c098      	movi.n	a9, 8
  906583:	228000        	l8ui	a2, a8, 0
  906586:	020247        	extui	a2, a2, 0, 8
  906589:	092202        	or	a2, a2, a9
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  90658c:	0c0200        	memw
  90658f:	228400        	s8i	a2, a8, 0
  906592:	d10f      	retw.n

00906594 <HTCControlSvcProcessMsg_patch>:
}

void 
HTCControlSvcProcessMsg_patch(HTC_ENDPOINT_ID EndpointID, adf_nbuf_t hdr_buf,
			      adf_nbuf_t pBuffers, void *arg)
{
  906594:	6c1006        	entry	a1, 48
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  906597:	da40      	mov.n	a10, a4
  906599:	b41b      	addi.n	a11, a1, 4
  90659b:	dc10      	mov.n	a12, a1
  90659d:	5801bb        	call8	906c8c <__adf_nbuf_peek_header>
	/* we assume buffers are aligned such that we can access the message
	 * parameters directly*/
	adf_nbuf_peek_header(pBuffers, &anbdata, &anblen);
	pMsg = (HTC_UNKNOWN_MSG *)anbdata;

	if (pMsg->MessageID == HTC_MSG_SETUP_COMPLETE_ID) {
  9065a0:	8811      	l32i.n	a8, a1, 4
  9065a2:	298000        	l8ui	a9, a8, 0
  9065a5:	288001        	l8ui	a8, a8, 1
  9065a8:	089911        	slli	a9, a9, 8
  9065ab:	098802        	or	a8, a8, a9
  9065ae:	698407        	bnei	a8, 4, 9065b9 <HTCControlSvcProcessMsg_patch+0x25>
		htc_complete_setup = 1;
  9065b1:	186963        	l32r	a8, 8e0b40 <_bss_end+0x3cdc30>
  9065b4:	c091      	movi.n	a9, 1
  9065b6:	298400        	s8i	a9, a8, 0
	}

	HTCControlSvcProcessMsg(EndpointID, hdr_buf, pBuffers, arg);
  9065b9:	da20      	mov.n	a10, a2
  9065bb:	db30      	mov.n	a11, a3
  9065bd:	dc40      	mov.n	a12, a4
  9065bf:	dd50      	mov.n	a13, a5
  9065c1:	580ee5        	call8	90a158 <HTCControlSvcProcessMsg>
  9065c4:	d10f      	retw.n
	...

009065c8 <HTCMsgRecvHandler_patch>:
}

/* Patch callback for check the endpoint ID is correct or not */
void 
HTCMsgRecvHandler_patch(adf_nbuf_t hdr_buf, adf_nbuf_t buffer, void *context)
{
  9065c8:	6c100a        	entry	a1, 80
	adf_nbuf_t tmp_nbuf;
	HTC_FRAME_HDR *pHTCHdr;
                
	if (hdr_buf == ADF_NBUF_NULL) {
		/* HTC hdr is not in the hdr_buf */
		tmp_nbuf = buffer;
  9065cb:	033502        	or	a5, a3, a3
  9065ce:	022539        	movnez	a5, a2, a2
  9065d1:	2b1c24        	addi	a11, a1, 36
  9065d4:	055a02        	or	a10, a5, a5
  9065d7:	2c1c20        	addi	a12, a1, 32
  9065da:	5801ac        	call8	906c8c <__adf_nbuf_peek_header>
	} else {
		tmp_nbuf = hdr_buf;
	}
                
	adf_nbuf_peek_header(tmp_nbuf, &anbdata, &anblen);        
	pHTCHdr = (HTC_FRAME_HDR *)anbdata; 
  9065dd:	8619      	l32i.n	a6, a1, 36
  
	eid = pHTCHdr->EndpointID;
  9065df:	2b6000        	l8ui	a11, a6, 0
    
	if ((eid != 0) && (htc_complete_setup == 0)) {
  9065e2:	64b132        	beqz	a11, 906718 <HTCMsgRecvHandler_patch+0x150>
  9065e5:	186963        	l32r	a8, 8e0b74 <_bss_end+0x3cdc64>
  9065e8:	288000        	l8ui	a8, a8, 0
  9065eb:	658095        	bnez	a8, 906684 <HTCMsgRecvHandler_patch+0xbc>
		A_PRINTF("\nHTC Hdr EndpointID = %d, anblen = %d\n", pHTCHdr->EndpointID, anblen);
  9065ee:	126913        	l32r	a2, 8e0a3c <_bss_end+0x3cdb2c>
  9065f1:	8c18      	l32i.n	a12, a1, 32
  9065f3:	232212        	l32i	a3, a2, 72
  9065f6:	1a6964        	l32r	a10, 8e0b88 <_bss_end+0x3cdc78>
  9065f9:	0b3000        	callx8	a3
		A_PRINTF("HTC Hder : %2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x\n",
                         *anbdata, *(anbdata+1), *(anbdata+2), *(anbdata+3), 
  9065fc:	8819      	l32i.n	a8, a1, 36
  
	eid = pHTCHdr->EndpointID;
    
	if ((eid != 0) && (htc_complete_setup == 0)) {
		A_PRINTF("\nHTC Hdr EndpointID = %d, anblen = %d\n", pHTCHdr->EndpointID, anblen);
		A_PRINTF("HTC Hder : %2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x\n",
  9065fe:	1a6965        	l32r	a10, 8e0b94 <_bss_end+0x3cdc84>
  906601:	238005        	l8ui	a3, a8, 5
  906604:	2b8000        	l8ui	a11, a8, 0
  906607:	2c8001        	l8ui	a12, a8, 1
  90660a:	2d8002        	l8ui	a13, a8, 2
  90660d:	2e8003        	l8ui	a14, a8, 3
  906610:	2f8004        	l8ui	a15, a8, 4
  906613:	9310      	s32i.n	a3, a1, 0
  906615:	238006        	l8ui	a3, a8, 6
  906618:	9311      	s32i.n	a3, a1, 4
  90661a:	238007        	l8ui	a3, a8, 7
  90661d:	9312      	s32i.n	a3, a1, 8
  90661f:	238008        	l8ui	a3, a8, 8
  906622:	9313      	s32i.n	a3, a1, 12
  906624:	238009        	l8ui	a3, a8, 9
  906627:	9314      	s32i.n	a3, a1, 16
  906629:	23800a        	l8ui	a3, a8, 10
  90662c:	9315      	s32i.n	a3, a1, 20
  90662e:	23800b        	l8ui	a3, a8, 11
  906631:	9316      	s32i.n	a3, a1, 24
  906633:	232212        	l32i	a3, a2, 72
  906636:	0b3000        	callx8	a3
                         *anbdata, *(anbdata+1), *(anbdata+2), *(anbdata+3), 
                         *(anbdata+4), *(anbdata+5), *(anbdata+6), *(anbdata+7),
                         *(anbdata+8), *(anbdata+9), *(anbdata+10), *(anbdata+11)); 
		A_PRINTF("init_htc_handle = 0x%8x\n", init_htc_handle);
  906639:	136967        	l32r	a3, 8e0bd8 <_bss_end+0x3cdcc8>
  90663c:	242212        	l32i	a4, a2, 72
  90663f:	1a6966        	l32r	a10, 8e0bd8 <_bss_end+0x3cdcc8>
  906642:	2b3200        	l32i	a11, a3, 0
  906645:	0b4000        	callx8	a4
            
		if (pHTCHdr->EndpointID == 1) {
  906648:	266000        	l8ui	a6, a6, 0
  90664b:	696112        	bnei	a6, 1, 906661 <HTCMsgRecvHandler_patch+0x99>
			A_PRINTF("Return WMI Command buffer\n");
  90664e:	242212        	l32i	a4, a2, 72
  906651:	1a6968        	l32r	a10, 8e0bf4 <_bss_end+0x3cdce4>
  906654:	0b4000        	callx8	a4
			HTC_ReturnBuffers(init_htc_handle, 1, tmp_nbuf);
  906657:	8a30      	l32i.n	a10, a3, 0
  906659:	222282        	l32i	a2, a2, 0x208
  90665c:	db60      	mov.n	a11, a6
  90665e:	60001b        	j	90667d <HTCMsgRecvHandler_patch+0xb5>
		} else if ((pHTCHdr->EndpointID == 5) || (pHTCHdr->EndpointID == 6)) {
  906661:	266cfb        	addi	a6, a6, -5
  906664:	060647        	extui	a6, a6, 0, 8
  906667:	6e6202        	bltui	a6, 2, 90666d <HTCMsgRecvHandler_patch+0xa5>
  90666a:	6000b3        	j	906721 <HTCMsgRecvHandler_patch+0x159>
			A_PRINTF("Return Data buffer\n");
  90666d:	242212        	l32i	a4, a2, 72
  906670:	1a6969        	l32r	a10, 8e0c14 <_bss_end+0x3cdd04>
  906673:	0b4000        	callx8	a4
			HTC_ReturnBuffers(init_htc_handle, 6, tmp_nbuf);
  906676:	8a30      	l32i.n	a10, a3, 0
  906678:	222282        	l32i	a2, a2, 0x208
  90667b:	c0b6      	movi.n	a11, 6
  90667d:	dc50      	mov.n	a12, a5
  90667f:	0b2000        	callx8	a2
  906682:	d10f      	retw.n
		} else {
		}
	} else {
		if ((pHTCHdr->EndpointID < 0) || (pHTCHdr->EndpointID >= ENDPOINT_MAX)) {
  906684:	c185      	movi.n	a8, 21
  906686:	7b8302        	bltu	a8, a11, 90668c <HTCMsgRecvHandler_patch+0xc4>
  906689:	60008b        	j	906718 <HTCMsgRecvHandler_patch+0x150>
			A_PRINTF("HTC Hdr EndpointID = %d, anblen = %d\n", pHTCHdr->EndpointID, anblen);
  90668c:	126913        	l32r	a2, 8e0ad8 <_bss_end+0x3cdbc8>
  90668f:	8c18      	l32i.n	a12, a1, 32
  906691:	232212        	l32i	a3, a2, 72
  906694:	1a696a        	l32r	a10, 8e0c3c <_bss_end+0x3cdd2c>
			A_PRINTF("HTC Hder : %2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x\n", 
                                 *anbdata, *(anbdata+1), *(anbdata+2), *(anbdata+3), 
                                 *(anbdata+4), *(anbdata+5), *(anbdata+6), *(anbdata+7));

			if (anblen > 64) {
  906697:	c440      	movi.n	a4, 64
			HTC_ReturnBuffers(init_htc_handle, 6, tmp_nbuf);
		} else {
		}
	} else {
		if ((pHTCHdr->EndpointID < 0) || (pHTCHdr->EndpointID >= ENDPOINT_MAX)) {
			A_PRINTF("HTC Hdr EndpointID = %d, anblen = %d\n", pHTCHdr->EndpointID, anblen);
  906699:	0b3000        	callx8	a3
			A_PRINTF("HTC Hder : %2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x\n", 
                                 *anbdata, *(anbdata+1), *(anbdata+2), *(anbdata+3), 
  90669c:	8819      	l32i.n	a8, a1, 36
		} else {
		}
	} else {
		if ((pHTCHdr->EndpointID < 0) || (pHTCHdr->EndpointID >= ENDPOINT_MAX)) {
			A_PRINTF("HTC Hdr EndpointID = %d, anblen = %d\n", pHTCHdr->EndpointID, anblen);
			A_PRINTF("HTC Hder : %2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x\n", 
  90669e:	1a696b        	l32r	a10, 8e0c4c <_bss_end+0x3cdd3c>
  9066a1:	238005        	l8ui	a3, a8, 5
  9066a4:	2b8000        	l8ui	a11, a8, 0
  9066a7:	2c8001        	l8ui	a12, a8, 1
  9066aa:	2d8002        	l8ui	a13, a8, 2
  9066ad:	2e8003        	l8ui	a14, a8, 3
  9066b0:	2f8004        	l8ui	a15, a8, 4
  9066b3:	9310      	s32i.n	a3, a1, 0
  9066b5:	238006        	l8ui	a3, a8, 6
  9066b8:	9311      	s32i.n	a3, a1, 4
  9066ba:	238007        	l8ui	a3, a8, 7
  9066bd:	231602        	s32i	a3, a1, 8
  9066c0:	232212        	l32i	a3, a2, 72
  9066c3:	0b3000        	callx8	a3
                                 *anbdata, *(anbdata+1), *(anbdata+2), *(anbdata+3), 
                                 *(anbdata+4), *(anbdata+5), *(anbdata+6), *(anbdata+7));

			if (anblen > 64) {
  9066c6:	231208        	l32i	a3, a1, 32
  9066c9:	734b20        	bgeu	a4, a3, 9066ed <HTCMsgRecvHandler_patch+0x125>
				A_PRINTF("EP1-Tx-Data with Wrong Htc Header Endpoint ID, WAR free this buffer\n");
  9066cc:	232212        	l32i	a3, a2, 72
  9066cf:	1a696c        	l32r	a10, 8e0c80 <_bss_end+0x3cdd70>
  9066d2:	0b3000        	callx8	a3
				HTC_ReturnBuffers(init_htc_handle, 6, tmp_nbuf);
  9066d5:	146967        	l32r	a4, 8e0c74 <_bss_end+0x3cdd64>
  9066d8:	232282        	l32i	a3, a2, 0x208
  9066db:	8a40      	l32i.n	a10, a4, 0
  9066dd:	c0b6      	movi.n	a11, 6
  9066df:	dc50      	mov.n	a12, a5
  9066e1:	0b3000        	callx8	a3
				A_PRINTF("EP1-Tx-Data > Free this buffer successfully\n");
  9066e4:	1a696d        	l32r	a10, 8e0c98 <_bss_end+0x3cdd88>
  9066e7:	222212        	l32i	a2, a2, 72
  9066ea:	600024        	j	906712 <HTCMsgRecvHandler_patch+0x14a>
			} else {
				A_PRINTF("EP4-WMI-Cmd with Wrong Htc Header Endpoint ID, WAR free this buffer\n");
  9066ed:	232212        	l32i	a3, a2, 72
  9066f0:	1a696e        	l32r	a10, 8e0ca8 <_bss_end+0x3cdd98>
  9066f3:	0b3000        	callx8	a3
				zfGenWrongEpidEvent((a_uint32_t)pHTCHdr->EndpointID);
  9066f6:	2a6000        	l8ui	a10, a6, 0
  9066f9:	5bff91        	call8	906540 <zfGenWrongEpidEvent>
				HTC_ReturnBuffers(init_htc_handle, 1, tmp_nbuf);
  9066fc:	146967        	l32r	a4, 8e0c98 <_bss_end+0x3cdd88>
  9066ff:	232282        	l32i	a3, a2, 0x208
  906702:	8a40      	l32i.n	a10, a4, 0
  906704:	c0b1      	movi.n	a11, 1
  906706:	055c02        	or	a12, a5, a5
  906709:	0b3000        	callx8	a3
				A_PRINTF("EP4-WMI-Cmd > Free this buffer successfully\n");
  90670c:	1a696f        	l32r	a10, 8e0cc8 <_bss_end+0x3cddb8>
  90670f:	222212        	l32i	a2, a2, 72
  906712:	0b2000        	callx8	a2
  906715:	d10f      	retw.n
  906717:	00da20        	excw
			}
		} else
			HTCMsgRecvHandler( hdr_buf, buffer, context);
  90671a:	db30      	mov.n	a11, a3
  90671c:	dc40      	mov.n	a12, a4
  90671e:	580f18        	call8	90a380 <HTCMsgRecvHandler>
  906721:	d10f      	retw.n
	...

00906724 <init_mem>:
	}
}
#endif

void init_mem()
{
  906724:	6c1004        	entry	a1, 32
	int i = 0;
	uint32_t *temp = (uint32_t *)ALLOCRAM_START;

	/* clear bss segment */
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
  906727:	186970        	l32r	a8, 8e0ce8 <_bss_end+0x3cddd8>
  90672a:	196971        	l32r	a9, 8e0cf0 <_bss_end+0x3cdde0>
		*temp = 0;
  90672d:	c0a0      	movi.n	a10, 0
{
	int i = 0;
	uint32_t *temp = (uint32_t *)ALLOCRAM_START;

	/* clear bss segment */
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
  90672f:	600003        	j	906736 <init_mem+0x12>
		*temp = 0;
  906732:	9a80      	s32i.n	a10, a8, 0
{
	int i = 0;
	uint32_t *temp = (uint32_t *)ALLOCRAM_START;

	/* clear bss segment */
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
  906734:	b488      	addi.n	a8, a8, 4
  906736:	7983f8        	bltu	a8, a9, 906732 <init_mem+0xe>
		*temp = 0;

	/* clear heap segment */
	for(i = 0; i < ((ALLOCRAM_SIZE - 4)/4); i++)
  906739:	1a6972        	l32r	a10, 8e0d04 <_bss_end+0x3cddf4>
  90673c:	196925        	l32r	a9, 8e0bd0 <_bss_end+0x3cdcc0>
  90673f:	09a90c        	sub	a9, a10, a9
  906742:	092914        	srli	a9, a9, 2
			HTCMsgRecvHandler( hdr_buf, buffer, context);
	}
}
#endif

void init_mem()
  906745:	08990a        	addx4	a9, a9, a8
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
		*temp = 0;

	/* clear heap segment */
	for(i = 0; i < ((ALLOCRAM_SIZE - 4)/4); i++)
		temp[i] = 0;
  906748:	c0a0      	movi.n	a10, 0
  90674a:	600003        	j	906751 <init_mem+0x2d>
  90674d:	9a80      	s32i.n	a10, a8, 0
  90674f:	b488      	addi.n	a8, a8, 4
	/* clear bss segment */
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
		*temp = 0;

	/* clear heap segment */
	for(i = 0; i < ((ALLOCRAM_SIZE - 4)/4); i++)
  906751:	7989f8        	bne	a8, a9, 90674d <init_mem+0x29>
		temp[i] = 0;
}
  906754:	d10f      	retw.n
	...

00906758 <wlan_task>:
	}
	return;
}

void __noreturn wlan_task(void)
{
  906758:	6c1004        	entry	a1, 32
	loop_low=loop_high=0;
  90675b:	136973        	l32r	a3, 8e0d28 <_bss_end+0x3cde18>
  90675e:	c020      	movi.n	a2, 0
  906760:	9230      	s32i.n	a2, a3, 0
  906762:	136974        	l32r	a3, 8e0d34 <_bss_end+0x3cde24>
  906765:	9230      	s32i.n	a2, a3, 0

	while(1) {
		/* update wdt timer */
		A_WDT_TASK();
  906767:	126913        	l32r	a2, 8e0bb4 <_bss_end+0x3cdca4>
  90676a:	23225c        	l32i	a3, a2, 0x170
  90676d:	0b3000        	callx8	a3

		/* UPDATE cticks - to be moved to idle_tsk, put here will be easier to read  */
		A_CLOCK_TICK();
  906770:	232240        	l32i	a3, a2, 0x100
  906773:	0b3000        	callx8	a3

		HIF_isr_handler(NULL);
  906776:	23227b        	l32i	a3, a2, 0x1ec
  906779:	c0a0      	movi.n	a10, 0
  90677b:	0b3000        	callx8	a3

#if MAGPIE_ENABLE_WLAN == 1
		wlan_pci_isr();
  90677e:	580d39        	call8	909c64 <wlan_pci_isr>
#endif

		A_TASKLET_RUN();
  906781:	23226d        	l32i	a3, a2, 0x1b4
  906784:	0b3000        	callx8	a3
		A_TIMER_RUN();
  906787:	232245        	l32i	a3, a2, 0x114
  90678a:	0b3000        	callx8	a3

		/* Very low priority tasks */
		if ((loop_low & 0x1fff) == 0x7)
  90678d:	136974        	l32r	a3, 8e0d60 <_bss_end+0x3cde50>
  906790:	8830      	l32i.n	a8, a3, 0
  906792:	08084c        	extui	a8, a8, 0, 13
  906795:	698705        	bnei	a8, 7, 90679e <wlan_task+0x46>
			A_DBG_TASK();
  906798:	28226f        	l32i	a8, a2, 0x1bc
  90679b:	0b8000        	callx8	a8
		temp[i] = 0;
}

static void idle_task()
{
	if (loop_low == 0xffffffff) {
  90679e:	8830      	l32i.n	a8, a3, 0
  9067a0:	698008        	bnei	a8, -1, 9067ac <wlan_task+0x54>
		loop_low = 0;
  9067a3:	c080      	movi.n	a8, 0
  9067a5:	9830      	s32i.n	a8, a3, 0
		loop_high++;
  9067a7:	136973        	l32r	a3, 8e0d74 <_bss_end+0x3cde64>
  9067aa:	8830      	l32i.n	a8, a3, 0
	} else {
		loop_low++;
  9067ac:	b188      	addi.n	a8, a8, 1
  9067ae:	9830      	s32i.n	a8, a3, 0
  9067b0:	63ffb6        	j	90676a <wlan_task+0x12>
	...

009067b4 <htc_setup_comp>:
#define MAGPIE 1

#if MAGPIE==1

void htc_setup_comp(void)
{
  9067b4:	6c1004        	entry	a1, 32
  9067b7:	d10f      	retw.n
  9067b9:	000000        	ill

009067bc <_wmi_cmd_rsp>:
	}
}

void _wmi_cmd_rsp(void *pContext, WMI_COMMAND_ID cmd_id, A_UINT16 SeqNo,
		  A_UINT8 *buffer, int Length)
{
  9067bc:	6c1006        	entry	a1, 48
	adf_nbuf_t netbuf = ADF_NBUF_NULL;
	A_UINT8 *pData;

	netbuf = WMI_AllocEvent(pContext, WMI_EVT_CLASS_CMD_REPLY, sizeof(WMI_CMD_HDR) + Length);
  9067bf:	176913        	l32r	a7, 8e0c0c <_bss_end+0x3cdcfc>
  9067c2:	da20      	mov.n	a10, a2
  9067c4:	28728d        	l32i	a8, a7, 0x234
  9067c7:	2b0a01        	movi	a11, 1
  9067ca:	2c6c04        	addi	a12, a6, 4
  9067cd:	0b8000        	callx8	a8
	}
}

void _wmi_cmd_rsp(void *pContext, WMI_COMMAND_ID cmd_id, A_UINT16 SeqNo,
		  A_UINT8 *buffer, int Length)
{
  9067d0:	04044f        	extui	a4, a4, 0, 16
	adf_nbuf_t netbuf = ADF_NBUF_NULL;
	A_UINT8 *pData;

	netbuf = WMI_AllocEvent(pContext, WMI_EVT_CLASS_CMD_REPLY, sizeof(WMI_CMD_HDR) + Length);
  9067d3:	d8a0      	mov.n	a8, a10
    
	if (netbuf == ADF_NBUF_NULL) {
  9067d5:	cea5      	bnez.n	a10, 9067fe <_wmi_cmd_rsp+0x42>
		adf_os_print("%s: buffer allocation for event_id %x failed!\n", __FUNCTION__, cmd_id);
  9067d7:	126976        	l32r	a2, 8e0db0 <_bss_end+0x3cdea0>
  9067da:	247212        	l32i	a4, a7, 72
  9067dd:	1a6975        	l32r	a10, 8e0db4 <_bss_end+0x3cdea4>
  9067e0:	022b02        	or	a11, a2, a2
  9067e3:	033c02        	or	a12, a3, a3
  9067e6:	0b4000        	callx8	a4
		adf_os_assert(0);
  9067e9:	1a6977        	l32r	a10, 8e0dc8 <_bss_end+0x3cdeb8>
  9067ec:	237212        	l32i	a3, a7, 72
  9067ef:	db20      	mov.n	a11, a2
  9067f1:	0b3000        	callx8	a3
  9067f4:	126978        	l32r	a2, 8e0dd4 <_bss_end+0x3cdec4>
  9067f7:	0c0200        	memw
  9067fa:	8220      	l32i.n	a2, a2, 0
  9067fc:	d10f      	retw.n
		return;
	}

	if (Length != 0 && buffer != NULL) {
  9067fe:	c962      	beqz.n	a6, 906814 <_wmi_cmd_rsp+0x58>
  906800:	c950      	beqz.n	a5, 906814 <_wmi_cmd_rsp+0x58>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  906802:	db60      	mov.n	a11, a6
  906804:	9810      	s32i.n	a8, a1, 0
  906806:	580105        	call8	906c1c <__adf_nbuf_put_tail>
}

/* move a memory buffer */
static inline void 		__adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    A_MEMCPY(dst,src,size);    
  906809:	8775      	l32i.n	a7, a7, 20
  90680b:	db50      	mov.n	a11, a5
  90680d:	dc60      	mov.n	a12, a6
  90680f:	0b7000        	callx8	a7
  906812:	8810      	l32i.n	a8, a1, 0
		pData = (A_UINT8 *)adf_nbuf_put_tail(netbuf, Length);
		adf_os_mem_copy(pData, buffer, Length);
	}

	WMI_SendEvent(pContext, netbuf, cmd_id, SeqNo, Length);
  906814:	156913        	l32r	a5, 8e0c60 <_bss_end+0x3cdd50>
  906817:	da20      	mov.n	a10, a2
  906819:	25528e        	l32i	a5, a5, 0x238
  90681c:	db80      	mov.n	a11, a8
  90681e:	030c4f        	extui	a12, a3, 0, 16
  906821:	dd40      	mov.n	a13, a4
  906823:	de60      	mov.n	a14, a6
  906825:	0b5000        	callx8	a5
  906828:	d10f      	retw.n
	...

0090682c <Magpie_init>:
}


void Magpie_init(void)
{
  90682c:	6c1004        	entry	a1, 32
	A_PRINTF("[+++Magpie_init]\n\r");
  90682f:	126913        	l32r	a2, 8e0c7c <_bss_end+0x3cdd6c>
  906832:	1a6979        	l32r	a10, 8e0e18 <_bss_end+0x3cdf08>
  906835:	232212        	l32i	a3, a2, 72
  906838:	0b3000        	callx8	a3
 
	A_PRINTF("[+++VBUF_init(%d)]\n\r", MAX_BUF_NUM);
  90683b:	13697a        	l32r	a3, 8e0e24 <_bss_end+0x3cdf14>
  90683e:	282212        	l32i	a8, a2, 72
  906841:	2b0a64        	movi	a11, 100
  906844:	da30      	mov.n	a10, a3
  906846:	0b8000        	callx8	a8
	VBUF_init(MAX_BUF_NUM);
  906849:	2822a0        	l32i	a8, a2, 0x280
  90684c:	2a0a64        	movi	a10, 100
  90684f:	0b8000        	callx8	a8
    
	A_PRINTF("[+++VBUF_init(%d)]\n\r", MAX_DESC_NUM);
  906852:	282212        	l32i	a8, a2, 72
  906855:	da30      	mov.n	a10, a3
  906857:	2b0a64        	movi	a11, 100
  90685a:	0b8000        	callx8	a8
	VDESC_init(MAX_DESC_NUM);
  90685d:	2222a5        	l32i	a2, a2, 0x294
  906860:	2a0a64        	movi	a10, 100
  906863:	0b2000        	callx8	a2
  906866:	d10f      	retw.n

00906868 <__adf_nbuf_alloc>:
 * @return newly allocated nbuf
 */
__adf_nbuf_t 
__adf_nbuf_alloc(adf_os_size_t size, a_uint32_t reserve, 
                 a_uint32_t align)
{
  906868:	6c1004        	entry	a1, 32
    VBUF *buf = NULL;
    VDESC *desc;
    
    buf = VBUF_alloc_vbuf();
  90686b:	156913        	l32r	a5, 8e0cb8 <_bss_end+0x3cdda8>
 * @return newly allocated nbuf
 */
__adf_nbuf_t 
__adf_nbuf_alloc(adf_os_size_t size, a_uint32_t reserve, 
                 a_uint32_t align)
{
  90686e:	d620      	mov.n	a6, a2
    VBUF *buf = NULL;
    VDESC *desc;
    
    buf = VBUF_alloc_vbuf();
  906870:	2a52a1        	l32i	a10, a5, 0x284
  906873:	0ba000        	callx8	a10
  906876:	d2a0      	mov.n	a2, a10
    if ( buf != NULL ) {
  906878:	64a028        	beqz	a10, 9068a4 <__adf_nbuf_alloc+0x3c>
        desc = VDESC_alloc_vdesc();
  90687b:	2a52a6        	l32i	a10, a5, 0x298
  90687e:	0ba000        	callx8	a10
        desc->buf_addr = (A_UINT8 *)A_ALLOCRAM(size);
  906881:	255252        	l32i	a5, a5, 0x148
    VBUF *buf = NULL;
    VDESC *desc;
    
    buf = VBUF_alloc_vbuf();
    if ( buf != NULL ) {
        desc = VDESC_alloc_vdesc();
  906884:	d4a0      	mov.n	a4, a10
        desc->buf_addr = (A_UINT8 *)A_ALLOCRAM(size);
  906886:	db60      	mov.n	a11, a6
  906888:	c0a0      	movi.n	a10, 0
  90688a:	0b5000        	callx8	a5
        desc->buf_size = size;
        desc->next_desc = NULL;
  90688d:	c080      	movi.n	a8, 0
    VDESC *desc;
    
    buf = VBUF_alloc_vbuf();
    if ( buf != NULL ) {
        desc = VDESC_alloc_vdesc();
        desc->buf_addr = (A_UINT8 *)A_ALLOCRAM(size);
  90688f:	9a41      	s32i.n	a10, a4, 4
        desc->buf_size = size;
  906891:	264504        	s16i	a6, a4, 8
        desc->next_desc = NULL;
  906894:	9840      	s32i.n	a8, a4, 0
        desc->data_offset = reserve;
  906896:	234505        	s16i	a3, a4, 10
        desc->data_size = 0;
  906899:	284506        	s16i	a8, a4, 12
        desc->control = 0;    
  90689c:	284507        	s16i	a8, a4, 14
        
        buf->desc_list = desc;
  90689f:	9420      	s32i.n	a4, a2, 0
        buf->buf_length = 0;    
  9068a1:	282504        	s16i	a8, a2, 8
    }
    
    return buf;
}   
  9068a4:	d10f      	retw.n
	...

009068a8 <__adf_nbuf_free>:
 * @param hdl
 * @param adf_nbuf
 * 
 */
void __adf_nbuf_free(__adf_nbuf_t  buf)
{
  9068a8:	6c1004        	entry	a1, 32
    adf_os_assert(0);
  9068ab:	186913        	l32r	a8, 8e0cf8 <_bss_end+0x3cdde8>
  9068ae:	1a697b        	l32r	a10, 8e0e9c <_bss_end+0x3cdf8c>
  9068b1:	288212        	l32i	a8, a8, 72
  9068b4:	1b697c        	l32r	a11, 8e0ea4 <_bss_end+0x3cdf94>
  9068b7:	0b8000        	callx8	a8
  9068ba:	186978        	l32r	a8, 8e0e9c <_bss_end+0x3cdf8c>
  9068bd:	0c0200        	memw
  9068c0:	8880      	l32i.n	a8, a8, 0
  9068c2:	d10f      	retw.n

009068c4 <__adf_nbuf_realloc_headroom>:
 * 
 * @return new nbuf
 */
__adf_nbuf_t 
__adf_nbuf_realloc_headroom(__adf_nbuf_t buf, a_uint32_t headroom)
{
  9068c4:	6c1004        	entry	a1, 32
    adf_os_assert(0);
  9068c7:	186913        	l32r	a8, 8e0d14 <_bss_end+0x3cde04>
  9068ca:	1b697d        	l32r	a11, 8e0ec0 <_bss_end+0x3cdfb0>
  9068cd:	288212        	l32i	a8, a8, 72
  9068d0:	1a697b        	l32r	a10, 8e0ebc <_bss_end+0x3cdfac>
    return NULL;
}
  9068d3:	c020      	movi.n	a2, 0
 * @return new nbuf
 */
__adf_nbuf_t 
__adf_nbuf_realloc_headroom(__adf_nbuf_t buf, a_uint32_t headroom)
{
    adf_os_assert(0);
  9068d5:	0b8000        	callx8	a8
  9068d8:	186978        	l32r	a8, 8e0eb8 <_bss_end+0x3cdfa8>
  9068db:	0c0200        	memw
  9068de:	8880      	l32i.n	a8, a8, 0
    return NULL;
}
  9068e0:	d10f      	retw.n
	...

009068e4 <__adf_nbuf_realloc_tailroom>:
 * 
 * @return struct mbuf * (buffer with the new tailroom)
 */
__adf_nbuf_t 
__adf_nbuf_realloc_tailroom(__adf_nbuf_t  buf, a_uint32_t tailroom)
{
  9068e4:	6c1004        	entry	a1, 32
    adf_os_assert(0);
  9068e7:	186913        	l32r	a8, 8e0d34 <_bss_end+0x3cde24>
  9068ea:	1b697e        	l32r	a11, 8e0ee4 <_bss_end+0x3cdfd4>
  9068ed:	288212        	l32i	a8, a8, 72
  9068f0:	1a697b        	l32r	a10, 8e0edc <_bss_end+0x3cdfcc>
    return NULL;
}
  9068f3:	c020      	movi.n	a2, 0
 * @return struct mbuf * (buffer with the new tailroom)
 */
__adf_nbuf_t 
__adf_nbuf_realloc_tailroom(__adf_nbuf_t  buf, a_uint32_t tailroom)
{
    adf_os_assert(0);
  9068f5:	0b8000        	callx8	a8
  9068f8:	186978        	l32r	a8, 8e0ed8 <_bss_end+0x3cdfc8>
  9068fb:	0c0200        	memw
  9068fe:	8880      	l32i.n	a8, a8, 0
    return NULL;
}
  906900:	d10f      	retw.n
	...

00906904 <__adf_nbuf_expand>:
 * 
 * @return struct mbuf* (NULL if something goofed up)
 */
__adf_nbuf_t 
__adf_nbuf_expand(__adf_nbuf_t buf, a_uint32_t headroom, a_uint32_t tailroom)
{
  906904:	6c1004        	entry	a1, 32
    adf_os_assert(0);
  906907:	186913        	l32r	a8, 8e0d54 <_bss_end+0x3cde44>
  90690a:	1b697f        	l32r	a11, 8e0f08 <_bss_end+0x3cdff8>
  90690d:	288212        	l32i	a8, a8, 72
  906910:	1a697b        	l32r	a10, 8e0efc <_bss_end+0x3cdfec>
    return NULL;
}
  906913:	c020      	movi.n	a2, 0
 * @return struct mbuf* (NULL if something goofed up)
 */
__adf_nbuf_t 
__adf_nbuf_expand(__adf_nbuf_t buf, a_uint32_t headroom, a_uint32_t tailroom)
{
    adf_os_assert(0);
  906915:	0b8000        	callx8	a8
  906918:	186978        	l32r	a8, 8e0ef8 <_bss_end+0x3cdfe8>
  90691b:	0c0200        	memw
  90691e:	8880      	l32i.n	a8, a8, 0
    return NULL;
}
  906920:	d10f      	retw.n
	...

00906924 <__adf_nbuf_push_head>:
 * @return new data pointer ,NULL if the len is more than the
 *         space available in the head frag.
 */
a_uint8_t *       
__adf_nbuf_push_head(__adf_nbuf_t buf, adf_os_size_t len)
{
  906924:	6c1004        	entry	a1, 32
    a_uint8_t *ptr = NULL; 
    VDESC *desc = buf->desc_list;
  906927:	8820      	l32i.n	a8, a2, 0
    
    desc->data_offset -= len;
  906929:	03034f        	extui	a3, a3, 0, 16
    desc->data_size += len;
  90692c:	2a8106        	l16ui	a10, a8, 12
__adf_nbuf_push_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL; 
    VDESC *desc = buf->desc_list;
    
    desc->data_offset -= len;
  90692f:	298105        	l16ui	a9, a8, 10
    desc->data_size += len;
  906932:	aa3a      	add.n	a10, a3, a10
  906934:	2a8506        	s16i	a10, a8, 12
__adf_nbuf_push_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL; 
    VDESC *desc = buf->desc_list;
    
    desc->data_offset -= len;
  906937:	03990c        	sub	a9, a9, a3
    desc->data_size += len;
    buf->buf_length += len;
  90693a:	2a2104        	l16ui	a10, a2, 8
__adf_nbuf_push_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL; 
    VDESC *desc = buf->desc_list;
    
    desc->data_offset -= len;
  90693d:	09094f        	extui	a9, a9, 0, 16
  906940:	298505        	s16i	a9, a8, 10
    desc->data_size += len;
    buf->buf_length += len;
  906943:	aa33      	add.n	a3, a3, a10
  906945:	232504        	s16i	a3, a2, 8
    ptr = desc->buf_addr + desc->data_offset;
  906948:	8281      	l32i.n	a2, a8, 4
    return(ptr);
}
  90694a:	a922      	add.n	a2, a2, a9
  90694c:	d10f      	retw.n
	...

00906950 <__adf_nbuf_pull_head>:
 * 
 * @return new data pointer
 */
a_uint8_t * 
__adf_nbuf_pull_head(__adf_nbuf_t buf, adf_os_size_t len)
{
  906950:	6c1004        	entry	a1, 32
    a_uint8_t *ptr = NULL;
    VDESC *desc = buf->desc_list;
  906953:	8820      	l32i.n	a8, a2, 0
    
    desc->data_offset += len;
  906955:	03034f        	extui	a3, a3, 0, 16
    desc->data_size -= len;
  906958:	2a8106        	l16ui	a10, a8, 12
__adf_nbuf_pull_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL;
    VDESC *desc = buf->desc_list;
    
    desc->data_offset += len;
  90695b:	298105        	l16ui	a9, a8, 10
    desc->data_size -= len;
  90695e:	03aa0c        	sub	a10, a10, a3
  906961:	2a8506        	s16i	a10, a8, 12
__adf_nbuf_pull_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL;
    VDESC *desc = buf->desc_list;
    
    desc->data_offset += len;
  906964:	a939      	add.n	a9, a3, a9
    desc->data_size -= len;
    buf->buf_length -= len;
  906966:	2a2104        	l16ui	a10, a2, 8
__adf_nbuf_pull_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL;
    VDESC *desc = buf->desc_list;
    
    desc->data_offset += len;
  906969:	09094f        	extui	a9, a9, 0, 16
  90696c:	298505        	s16i	a9, a8, 10
    desc->data_size -= len;
    buf->buf_length -= len;
  90696f:	03a30c        	sub	a3, a10, a3
  906972:	232504        	s16i	a3, a2, 8
    ptr = desc->buf_addr + desc->data_offset;
  906975:	8281      	l32i.n	a2, a8, 4
    
    return ptr;
}
  906977:	a922      	add.n	a2, a2, a9
  906979:	d10f      	retw.n
	...

0090697c <__adf_nbuf_copy>:
 * 
 * @return struct mbuf * (newly allocated buffer)
 */
__adf_nbuf_t 
__adf_nbuf_copy(__adf_nbuf_t src)
{
  90697c:	6c1004        	entry	a1, 32
    __adf_nbuf_t buf = NULL; 

    adf_os_assert(src != NULL);
  90697f:	cd25      	bnez.n	a2, 906998 <__adf_nbuf_copy+0x1c>
  906981:	186913        	l32r	a8, 8e0dd0 <_bss_end+0x3cdec0>
  906984:	1a697b        	l32r	a10, 8e0f70 <_bss_end+0x3ce060>
  906987:	288212        	l32i	a8, a8, 72
  90698a:	1b6980        	l32r	a11, 8e0f8c <_bss_end+0x3ce07c>
  90698d:	0b8000        	callx8	a8
  906990:	186978        	l32r	a8, 8e0f70 <_bss_end+0x3ce060>
  906993:	0c0200        	memw
  906996:	8880      	l32i.n	a8, a8, 0
    
    return buf;
}
  906998:	c020      	movi.n	a2, 0
  90699a:	d10f      	retw.n

0090699c <__adf_nbuf_unshare>:
 * 
 * @return new nbuf
 */
__adf_nbuf_t 
__adf_nbuf_unshare(__adf_nbuf_t  src)
{
  90699c:	6c1004        	entry	a1, 32
    __adf_nbuf_t buf = NULL;

    adf_os_assert(src != NULL);
  90699f:	cd25      	bnez.n	a2, 9069b8 <__adf_nbuf_unshare+0x1c>
  9069a1:	186913        	l32r	a8, 8e0df0 <_bss_end+0x3cdee0>
  9069a4:	1a697b        	l32r	a10, 8e0f90 <_bss_end+0x3ce080>
  9069a7:	288212        	l32i	a8, a8, 72
  9069aa:	1b6981        	l32r	a11, 8e0fb0 <_bss_end+0x3ce0a0>
  9069ad:	0b8000        	callx8	a8
  9069b0:	186978        	l32r	a8, 8e0f90 <_bss_end+0x3ce080>
  9069b3:	0c0200        	memw
  9069b6:	8880      	l32i.n	a8, a8, 0

    return buf;
}
  9069b8:	c020      	movi.n	a2, 0
  9069ba:	d10f      	retw.n

009069bc <__adf_nbuf_frag_info>:
 * @param[out] sg (scatter/gather list of all the frags)
 * 
 */
void  
__adf_nbuf_frag_info(__adf_nbuf_t buf, adf_os_sglist_t	*sg)
{
  9069bc:	6c1004        	entry	a1, 32
    VDESC *desc = buf->desc_list;
  9069bf:	8820      	l32i.n	a8, a2, 0
  9069c1:	d930      	mov.n	a9, a3
    int count = 0;
  9069c3:	c0a0      	movi.n	a10, 0
    
    while( desc != NULL ) {
  9069c5:	600013        	j	9069dc <__adf_nbuf_frag_info+0x20>
        sg->sg_segs[count].vaddr = desc->buf_addr + desc->data_offset;
  9069c8:	2b8105        	l16ui	a11, a8, 10
  9069cb:	8c81      	l32i.n	a12, a8, 4
        sg->sg_segs[count].len   = desc->data_size;
        
        count++;        
  9069cd:	b1aa      	addi.n	a10, a10, 1
{
    VDESC *desc = buf->desc_list;
    int count = 0;
    
    while( desc != NULL ) {
        sg->sg_segs[count].vaddr = desc->buf_addr + desc->data_offset;
  9069cf:	abcb      	add.n	a11, a12, a11
  9069d1:	9b91      	s32i.n	a11, a9, 4
        sg->sg_segs[count].len   = desc->data_size;
  9069d3:	2b8106        	l16ui	a11, a8, 12
  9069d6:	9b92      	s32i.n	a11, a9, 8
        
        count++;        
        desc = desc->next_desc;
  9069d8:	8880      	l32i.n	a8, a8, 0
  9069da:	b899      	addi.n	a9, a9, 8
__adf_nbuf_frag_info(__adf_nbuf_t buf, adf_os_sglist_t	*sg)
{
    VDESC *desc = buf->desc_list;
    int count = 0;
    
    while( desc != NULL ) {
  9069dc:	658fe8        	bnez	a8, 9069c8 <__adf_nbuf_frag_info+0xc>
        
        count++;        
        desc = desc->next_desc;
    }
    
    sg->nsegs = count;
  9069df:	9a30      	s32i.n	a10, a3, 0
  9069e1:	d10f      	retw.n
	...

009069e4 <__adf_nbuf_get_priv>:
 * 
 * @return uint8_t* ( pointer to the data )
 */
a_uint8_t *
__adf_nbuf_get_priv(__adf_nbuf_t buf)
{
  9069e4:	6c1004        	entry	a1, 32
    adf_os_assert(buf != NULL);
  9069e7:	cd25      	bnez.n	a2, 906a00 <__adf_nbuf_get_priv+0x1c>
  9069e9:	186913        	l32r	a8, 8e0e38 <_bss_end+0x3cdf28>
  9069ec:	1a697b        	l32r	a10, 8e0fd8 <_bss_end+0x3ce0c8>
  9069ef:	288212        	l32i	a8, a8, 72
  9069f2:	1b6982        	l32r	a11, 8e0ffc <_bss_end+0x3ce0ec>
  9069f5:	0b8000        	callx8	a8
  9069f8:	186978        	l32r	a8, 8e0fd8 <_bss_end+0x3ce0c8>
  9069fb:	0c0200        	memw
  9069fe:	8880      	l32i.n	a8, a8, 0

    return buf->ctx;
}
  906a00:	bc22      	addi.n	a2, a2, 12
  906a02:	d10f      	retw.n

00906a04 <__adf_nbuf_queue_add>:
 * 
 */
void 
__adf_nbuf_queue_add(__adf_nbuf_qhead_t  *qhead, 
                     __adf_nbuf_t  buf)
{
  906a04:	6c1004        	entry	a1, 32
    qhead->qlen++;
  906a07:	8822      	l32i.n	a8, a2, 8
  906a09:	b188      	addi.n	a8, a8, 1
  906a0b:	9822      	s32i.n	a8, a2, 8

    buf->next_buf = NULL;
  906a0d:	c080      	movi.n	a8, 0
  906a0f:	9831      	s32i.n	a8, a3, 4

    if (qhead->head == NULL) {
  906a11:	8820      	l32i.n	a8, a2, 0
  906a13:	cc83      	bnez.n	a8, 906a1a <__adf_nbuf_queue_add+0x16>
        qhead->head = buf;
  906a15:	9320      	s32i.n	a3, a2, 0
  906a17:	600003        	j	906a1e <__adf_nbuf_queue_add+0x1a>
    }
    else {
        qhead->tail->next_buf = buf;
  906a1a:	8821      	l32i.n	a8, a2, 4
  906a1c:	9381      	s32i.n	a3, a8, 4
    }
    qhead->tail = buf;
  906a1e:	9321      	s32i.n	a3, a2, 4
  906a20:	d10f      	retw.n
	...

00906a24 <__adf_nbuf_queue_remove>:
 * 
 * @return the nbuf
 */
__adf_nbuf_t   
__adf_nbuf_queue_remove(__adf_nbuf_qhead_t *qhead)
{
  906a24:	6c1004        	entry	a1, 32
  906a27:	d820      	mov.n	a8, a2
    __adf_nbuf_t  b0 = NULL;

    if (qhead->head) {
  906a29:	8220      	l32i.n	a2, a2, 0
  906a2b:	c929      	beqz.n	a2, 906a48 <__adf_nbuf_queue_remove+0x24>
        qhead->qlen--;
  906a2d:	8982      	l32i.n	a9, a8, 8
        b0 = qhead->head;
        if ( qhead->head == qhead->tail ) {
  906a2f:	8a81      	l32i.n	a10, a8, 4
__adf_nbuf_queue_remove(__adf_nbuf_qhead_t *qhead)
{
    __adf_nbuf_t  b0 = NULL;

    if (qhead->head) {
        qhead->qlen--;
  906a31:	b099      	addi.n	a9, a9, -1
  906a33:	9982      	s32i.n	a9, a8, 8
  906a35:	c090      	movi.n	a9, 0
        b0 = qhead->head;
        if ( qhead->head == qhead->tail ) {
  906a37:	7a2907        	bne	a2, a10, 906a42 <__adf_nbuf_queue_remove+0x1e>
            qhead->head = NULL;
  906a3a:	9980      	s32i.n	a9, a8, 0
            qhead->tail = NULL;
  906a3c:	9981      	s32i.n	a9, a8, 4
  906a3e:	600004        	j	906a46 <__adf_nbuf_queue_remove+0x22>
  906a41:	008a21        	excw
        } else {
            qhead->head = qhead->head->next_buf;
  906a44:	9a80      	s32i.n	a10, a8, 0
        }
    
        b0->next_buf = NULL;
  906a46:	9921      	s32i.n	a9, a2, 4
    }
	return b0;
}
  906a48:	d10f      	retw.n
	...

00906a4c <__adf_nbuf_dmamap_create>:
 * 
 * @return a_status_t
 */
a_status_t 
__adf_nbuf_dmamap_create(__adf_os_device_t osdev, __adf_os_dma_map_t *dmap)
{
  906a4c:	6c1004        	entry	a1, 32
    a_status_t retval = A_STATUS_OK;
    
    (*dmap) = A_ALLOCRAM(sizeof(struct __adf_dma_map));
  906a4f:	126913        	l32r	a2, 8e0e9c <_bss_end+0x3cdf8c>
  906a52:	c0a0      	movi.n	a10, 0
  906a54:	222252        	l32i	a2, a2, 0x148
  906a57:	c0bc      	movi.n	a11, 12
  906a59:	0b2000        	callx8	a2
  906a5c:	9a30      	s32i.n	a10, a3, 0
    if(*dmap == NULL)
        return A_STATUS_ENOMEM;
  906a5e:	c023      	movi.n	a2, 3
__adf_nbuf_dmamap_create(__adf_os_device_t osdev, __adf_os_dma_map_t *dmap)
{
    a_status_t retval = A_STATUS_OK;
    
    (*dmap) = A_ALLOCRAM(sizeof(struct __adf_dma_map));
    if(*dmap == NULL)
  906a60:	c8a2      	beqz.n	a10, 906a66 <__adf_nbuf_dmamap_create+0x1a>
        return A_STATUS_ENOMEM;
            
    (*dmap)->buf = NULL;
  906a62:	c020      	movi.n	a2, 0
  906a64:	92a0      	s32i.n	a2, a10, 0
    return retval;
}
  906a66:	d10f      	retw.n

00906a68 <__adf_nbuf_map>:


a_status_t 
__adf_nbuf_map(__adf_os_device_t osdev, __adf_os_dma_map_t bmap, 
                          __adf_nbuf_t buf, adf_os_dma_dir_t dir)
{   
  906a68:	6c1004        	entry	a1, 32
    bmap->buf = buf;
  906a6b:	9430      	s32i.n	a4, a3, 0
    
    return A_STATUS_OK;
}
  906a6d:	c020      	movi.n	a2, 0
  906a6f:	d10f      	retw.n
  906a71:	000000        	ill

00906a74 <__adf_nbuf_unmap>:

void 
__adf_nbuf_unmap(__adf_os_device_t osdev, __adf_os_dma_map_t bmap, 
                            adf_os_dma_dir_t dir)
{
  906a74:	6c1004        	entry	a1, 32
    bmap->buf = NULL;
  906a77:	c080      	movi.n	a8, 0
  906a79:	9830      	s32i.n	a8, a3, 0
  906a7b:	d10f      	retw.n
  906a7d:	000000        	ill

00906a80 <__adf_nbuf_dmamap_destroy>:
}

void
__adf_nbuf_dmamap_destroy(__adf_os_device_t osdev, 
                          __adf_os_dma_map_t dmap)
{
  906a80:	6c1004        	entry	a1, 32
  906a83:	d10f      	retw.n
  906a85:	000000        	ill

00906a88 <__adf_nbuf_dmamap_info>:
 * @param[in]  bmap
 * @param[out] sg (map_info ptr)
 */
void 
__adf_nbuf_dmamap_info(__adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
  906a88:	6c1004        	entry	a1, 32
    VDESC *desc = bmap->buf->desc_list;
  906a8b:	8820      	l32i.n	a8, a2, 0
  906a8d:	d930      	mov.n	a9, a3
  906a8f:	8880      	l32i.n	a8, a8, 0
    int count = 0;
  906a91:	c0a0      	movi.n	a10, 0
    
    while( desc != NULL ) {
  906a93:	600015        	j	906aac <__adf_nbuf_dmamap_info+0x24>
  906a96:	00002b        	mulsh	a0, a0, a0
        sg->dma_segs[count].paddr = (adf_os_dma_addr_t)(desc->buf_addr + desc->data_offset);
  906a99:	8105      	l32i.n	a1, a0, 20
  906a9b:	8c81      	l32i.n	a12, a8, 4
        sg->dma_segs[count].len   = desc->data_size;
        
        count++;        
  906a9d:	b1aa      	addi.n	a10, a10, 1
{
    VDESC *desc = bmap->buf->desc_list;
    int count = 0;
    
    while( desc != NULL ) {
        sg->dma_segs[count].paddr = (adf_os_dma_addr_t)(desc->buf_addr + desc->data_offset);
  906a9f:	abcb      	add.n	a11, a12, a11
  906aa1:	9b91      	s32i.n	a11, a9, 4
        sg->dma_segs[count].len   = desc->data_size;
  906aa3:	2b8106        	l16ui	a11, a8, 12
        
        count++;        
        desc = desc->next_desc;
  906aa6:	8880      	l32i.n	a8, a8, 0
    VDESC *desc = bmap->buf->desc_list;
    int count = 0;
    
    while( desc != NULL ) {
        sg->dma_segs[count].paddr = (adf_os_dma_addr_t)(desc->buf_addr + desc->data_offset);
        sg->dma_segs[count].len   = desc->data_size;
  906aa8:	9b92      	s32i.n	a11, a9, 8
  906aaa:	b899      	addi.n	a9, a9, 8
__adf_nbuf_dmamap_info(__adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
    VDESC *desc = bmap->buf->desc_list;
    int count = 0;
    
    while( desc != NULL ) {
  906aac:	658fe8        	bnez	a8, 906a98 <__adf_nbuf_dmamap_info+0x10>
        
        count++;        
        desc = desc->next_desc;
    }
    
    sg->nsegs = count;    
  906aaf:	9a30      	s32i.n	a10, a3, 0
  906ab1:	d10f      	retw.n
	...

00906ab4 <__adf_nbuf_set_rx_cksum>:
 * @param buf
 * @param cksum
 */
void 
__adf_nbuf_set_rx_cksum(__adf_nbuf_t buf, adf_nbuf_rx_cksum_t *cksum)
{
  906ab4:	6c1004        	entry	a1, 32
  906ab7:	d10f      	retw.n
  906ab9:	000000        	ill

00906abc <__adf_nbuf_get_vlan_info>:
}

a_status_t      
__adf_nbuf_get_vlan_info(adf_net_handle_t hdl, __adf_nbuf_t buf, 
                         adf_net_vlanhdr_t *vlan)
{
  906abc:	6c1004        	entry	a1, 32
    return A_STATUS_OK;
}
  906abf:	c020      	movi.n	a2, 0
  906ac1:	d10f      	retw.n
	...

00906ac4 <__adf_nbuf_create_frm_frag>:

__adf_nbuf_t
__adf_nbuf_create_frm_frag(__adf_nbuf_queue_t *qhead)
{
  906ac4:	6c1004        	entry	a1, 32
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
    a_uint32_t cnt = 0, len = __adf_nbuf_queue_len(qhead);
    a_uint16_t total_len = 0;

    buf_head = VBUF_alloc_vbuf();
  906ac7:	166913        	l32r	a6, 8e0f14 <_bss_end+0x3ce004>
    return A_STATUS_OK;
}

__adf_nbuf_t
__adf_nbuf_create_frm_frag(__adf_nbuf_queue_t *qhead)
{
  906aca:	022402        	or	a4, a2, a2
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
    a_uint32_t cnt = 0, len = __adf_nbuf_queue_len(qhead);
    a_uint16_t total_len = 0;

    buf_head = VBUF_alloc_vbuf();
  906acd:	2a62a1        	l32i	a10, a6, 0x284
 * 
 */
a_uint32_t  
__adf_nbuf_queue_len(__adf_nbuf_qhead_t *qhead)
{
    return qhead->qlen;
  906ad0:	252202        	l32i	a5, a2, 8
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
    a_uint32_t cnt = 0, len = __adf_nbuf_queue_len(qhead);
    a_uint16_t total_len = 0;

    buf_head = VBUF_alloc_vbuf();
  906ad3:	0ba000        	callx8	a10
  906ad6:	d2a0      	mov.n	a2, a10
 * @return (NULL if the Q is empty)
 */
__adf_nbuf_t   
__adf_nbuf_queue_first(__adf_nbuf_queue_t *qhead)
{
    return qhead->head;
  906ad8:	8340      	l32i.n	a3, a4, 0
    a_uint16_t total_len = 0;

    buf_head = VBUF_alloc_vbuf();
    buf_tmp = __adf_nbuf_queue_first(qhead);

    __adf_os_assert(buf_head);
  906ada:	cda2      	bnez.n	a10, 906af0 <__adf_nbuf_create_frm_frag+0x2c>
  906adc:	266212        	l32i	a6, a6, 72
  906adf:	1a697b        	l32r	a10, 8e10cc <_bss_end+0x3ce1bc>
  906ae2:	1b6983        	l32r	a11, 8e10f0 <_bss_end+0x3ce1e0>
  906ae5:	0b6000        	callx8	a6
  906ae8:	166978        	l32r	a6, 8e10c8 <_bss_end+0x3ce1b8>
  906aeb:	0c0200        	memw
  906aee:	8660      	l32i.n	a6, a6, 0
    __adf_os_assert(buf_tmp);
  906af0:	cd35      	bnez.n	a3, 906b09 <__adf_nbuf_create_frm_frag+0x45>
  906af2:	166913        	l32r	a6, 8e0f40 <_bss_end+0x3ce030>
  906af5:	1a697b        	l32r	a10, 8e10e4 <_bss_end+0x3ce1d4>
  906af8:	266212        	l32i	a6, a6, 72
  906afb:	1b6983        	l32r	a11, 8e1108 <_bss_end+0x3ce1f8>
  906afe:	0b6000        	callx8	a6
  906b01:	166978        	l32r	a6, 8e10e4 <_bss_end+0x3ce1d4>
  906b04:	0c0200        	memw
  906b07:	8660      	l32i.n	a6, a6, 0

    buf_head->desc_list = buf_tmp->desc_list;
  906b09:	8330      	l32i.n	a3, a3, 0
  906b0b:	9320      	s32i.n	a3, a2, 0
__adf_nbuf_create_frm_frag(__adf_nbuf_queue_t *qhead)
{
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
    a_uint32_t cnt = 0, len = __adf_nbuf_queue_len(qhead);
    a_uint16_t total_len = 0;
  906b0d:	c030      	movi.n	a3, 0
__adf_nbuf_t
__adf_nbuf_create_frm_frag(__adf_nbuf_queue_t *qhead)
{
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
    a_uint32_t cnt = 0, len = __adf_nbuf_queue_len(qhead);
  906b0f:	d730      	mov.n	a7, a3

__adf_nbuf_t
__adf_nbuf_create_frm_frag(__adf_nbuf_queue_t *qhead)
{
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
  906b11:	d630      	mov.n	a6, a3
    __adf_os_assert(buf_head);
    __adf_os_assert(buf_tmp);

    buf_head->desc_list = buf_tmp->desc_list;

    while ((buf_tmp = __adf_nbuf_queue_remove(qhead)) != NULL) {
  906b13:	60002d        	j	906b44 <__adf_nbuf_create_frm_frag+0x80>
  906b16:	000029        	excw
        cnt++;

        //adf_os_print("merge buf: %x\n", buf_tmp->desc_list->buf_addr + buf_tmp->desc_list->data_offset);

        total_len += buf_tmp->buf_length;
  906b19:	a104      	add.n	a4, a0, a1
    __adf_os_assert(buf_tmp);

    buf_head->desc_list = buf_tmp->desc_list;

    while ((buf_tmp = __adf_nbuf_queue_remove(qhead)) != NULL) {
        cnt++;
  906b1b:	b177      	addi.n	a7, a7, 1

        //adf_os_print("merge buf: %x\n", buf_tmp->desc_list->buf_addr + buf_tmp->desc_list->data_offset);

        total_len += buf_tmp->buf_length;
  906b1d:	a933      	add.n	a3, a3, a9
  906b1f:	03034f        	extui	a3, a3, 0, 16
  906b22:	89a0      	l32i.n	a9, a10, 0

        if (vdesc_prev) {
  906b24:	c860      	beqz.n	a6, 906b28 <__adf_nbuf_create_frm_frag+0x64>
            /* link "the last VDESC of previous VBUF" to "the 1st VDESC of this VBUF" */
            vdesc_prev->next_desc = buf_tmp->desc_list;
  906b26:	9960      	s32i.n	a9, a6, 0
        }

        /* traverse VDESC list in this VBUF to find out the last VDESC */
        vdesc_tmp = buf_tmp->desc_list;
  906b28:	d690      	mov.n	a6, a9
        while (vdesc_tmp->next_desc) {
  906b2a:	600002        	j	906b30 <__adf_nbuf_create_frm_frag+0x6c>
  906b2d:	00d680        	excw
  906b30:	8860      	l32i.n	a8, a6, 0
  906b32:	658ff8        	bnez	a8, 906b2e <__adf_nbuf_create_frm_frag+0x6a>
        vdesc_prev = vdesc_tmp;

        /* return VBUF to the pool */
        buf_tmp->desc_list = NULL;
        buf_tmp->buf_length = 0;
        VBUF_free_vbuf(buf_tmp);
  906b35:	196913        	l32r	a9, 8e0f84 <_bss_end+0x3ce074>
            vdesc_tmp = vdesc_tmp->next_desc;
        }
        vdesc_prev = vdesc_tmp;

        /* return VBUF to the pool */
        buf_tmp->desc_list = NULL;
  906b38:	28a600        	s32i	a8, a10, 0
        buf_tmp->buf_length = 0;
  906b3b:	28a504        	s16i	a8, a10, 8
        VBUF_free_vbuf(buf_tmp);
  906b3e:	2892a3        	l32i	a8, a9, 0x28c
  906b41:	0b8000        	callx8	a8
    __adf_os_assert(buf_head);
    __adf_os_assert(buf_tmp);

    buf_head->desc_list = buf_tmp->desc_list;

    while ((buf_tmp = __adf_nbuf_queue_remove(qhead)) != NULL) {
  906b44:	da40      	mov.n	a10, a4
  906b46:	5bffb7        	call8	906a24 <__adf_nbuf_queue_remove>
  906b49:	65afcb        	bnez	a10, 906b18 <__adf_nbuf_create_frm_frag+0x54>
        buf_tmp->desc_list = NULL;
        buf_tmp->buf_length = 0;
        VBUF_free_vbuf(buf_tmp);
    }

    if (cnt != len) {
  906b4c:	757116        	beq	a7, a5, 906b66 <__adf_nbuf_create_frm_frag+0xa2>
        //adf_os_print("cnt: %x, len: %x, __adf_nbuf_queue_len: %x\n", cnt, len, 
        //             __adf_nbuf_queue_len(qhead));
        adf_os_assert(0);
  906b4f:	146913        	l32r	a4, 8e0f9c <_bss_end+0x3ce08c>
  906b52:	1a697b        	l32r	a10, 8e1140 <_bss_end+0x3ce230>
  906b55:	244212        	l32i	a4, a4, 72
  906b58:	1b6983        	l32r	a11, 8e1164 <_bss_end+0x3ce254>
  906b5b:	0b4000        	callx8	a4
  906b5e:	146978        	l32r	a4, 8e1140 <_bss_end+0x3ce230>
  906b61:	0c0200        	memw
  906b64:	8440      	l32i.n	a4, a4, 0
    }
    //__adf_os_assert(cnt == len);

    buf_head->buf_length = total_len;
  906b66:	232504        	s16i	a3, a2, 8

    return buf_head;
}
  906b69:	d10f      	retw.n
	...

00906b6c <__adf_nbuf_split_to_frag>:

void
__adf_nbuf_split_to_frag(__adf_nbuf_t buf, __adf_nbuf_qhead_t *qhead)
{
  906b6c:	6c1004        	entry	a1, 32
 * @param qhead
 */
void 
__adf_nbuf_queue_init(__adf_nbuf_qhead_t *qhead)
{
    qhead->qlen = 0;
  906b6f:	c040      	movi.n	a4, 0
  906b71:	9432      	s32i.n	a4, a3, 8
    qhead->head = NULL;
  906b73:	9430      	s32i.n	a4, a3, 0
    qhead->tail = NULL;
  906b75:	9431      	s32i.n	a4, a3, 4
  906b77:	166913        	l32r	a6, 8e0fc4 <_bss_end+0x3ce0b4>
{
    VBUF *buf_tmp;
    VDESC *desc_tmp = NULL;

    __adf_nbuf_queue_init(qhead);
    desc_tmp = buf->desc_list;
  906b7a:	8420      	l32i.n	a4, a2, 0

    while (desc_tmp /*&& desc_tmp->buf_addr*/) {
  906b7c:	60003a        	j	906bba <__adf_nbuf_split_to_frag+0x4e>
  906b7f:	00002a        	muluh	a0, a0, a0
        buf_tmp = VBUF_alloc_vbuf();
  906b82:	62a10b        	j	8f0c91 <memset+0x9e49>
  906b85:	a000      	add.n	a0, a0, a0
  906b87:	d5a0      	mov.n	a5, a10

        __adf_os_assert(buf_tmp);
  906b89:	65a014        	bnez	a10, 906ba1 <__adf_nbuf_split_to_frag+0x35>
  906b8c:	276212        	l32i	a7, a6, 72
  906b8f:	1a697b        	l32r	a10, 8e117c <_bss_end+0x3ce26c>
  906b92:	1b6984        	l32r	a11, 8e11a4 <_bss_end+0x3ce294>
  906b95:	0b7000        	callx8	a7
  906b98:	176978        	l32r	a7, 8e1178 <_bss_end+0x3ce268>
  906b9b:	0c0200        	memw
  906b9e:	277200        	l32i	a7, a7, 0

        //desc_tmp->data_size = 0;
        buf_tmp->desc_list = desc_tmp;
        //buf_tmp->buf_length = desc_tmp->buf_size;
        buf_tmp->buf_length = desc_tmp->data_size;
  906ba1:	274106        	l16ui	a7, a4, 12
        buf_tmp = VBUF_alloc_vbuf();

        __adf_os_assert(buf_tmp);

        //desc_tmp->data_size = 0;
        buf_tmp->desc_list = desc_tmp;
  906ba4:	9450      	s32i.n	a4, a5, 0
        //buf_tmp->buf_length = desc_tmp->buf_size;
        buf_tmp->buf_length = desc_tmp->data_size;
  906ba6:	275504        	s16i	a7, a5, 8
        buf_tmp->next_buf = NULL;
  906ba9:	c070      	movi.n	a7, 0
  906bab:	9751      	s32i.n	a7, a5, 4

        //adf_os_print("split - buf: %x\n", buf_tmp->desc_list->buf_addr + buf_tmp->desc_list->data_offset);

        __adf_nbuf_queue_add(qhead, buf_tmp);
  906bad:	db50      	mov.n	a11, a5
  906baf:	da30      	mov.n	a10, a3
  906bb1:	5bff94        	call8	906a04 <__adf_nbuf_queue_add>

        desc_tmp = desc_tmp->next_desc;

        buf_tmp->desc_list->next_desc = NULL;
  906bb4:	8550      	l32i.n	a5, a5, 0

        //adf_os_print("split - buf: %x\n", buf_tmp->desc_list->buf_addr + buf_tmp->desc_list->data_offset);

        __adf_nbuf_queue_add(qhead, buf_tmp);

        desc_tmp = desc_tmp->next_desc;
  906bb6:	8440      	l32i.n	a4, a4, 0

        buf_tmp->desc_list->next_desc = NULL;
  906bb8:	9750      	s32i.n	a7, a5, 0
    VDESC *desc_tmp = NULL;

    __adf_nbuf_queue_init(qhead);
    desc_tmp = buf->desc_list;

    while (desc_tmp /*&& desc_tmp->buf_addr*/) {
  906bba:	654fc3        	bnez	a4, 906b81 <__adf_nbuf_split_to_frag+0x15>
        buf_tmp->desc_list->next_desc = NULL;
    }

    buf->desc_list = NULL;
    buf->buf_length = 0;
    VBUF_free_vbuf(buf);
  906bbd:	2362a3        	l32i	a3, a6, 0x28c
        desc_tmp = desc_tmp->next_desc;

        buf_tmp->desc_list->next_desc = NULL;
    }

    buf->desc_list = NULL;
  906bc0:	9420      	s32i.n	a4, a2, 0
    buf->buf_length = 0;
  906bc2:	242504        	s16i	a4, a2, 8
    VBUF_free_vbuf(buf);
  906bc5:	da20      	mov.n	a10, a2
  906bc7:	0b3000        	callx8	a3
  906bca:	d10f      	retw.n

00906bcc <__adf_nbuf_last>:
 * 
 * @return struct mbuf*
 */
VDESC * 
__adf_nbuf_last(VBUF *buf)
{
  906bcc:	6c1004        	entry	a1, 32
    VDESC *desc = buf->desc_list;
  906bcf:	8220      	l32i.n	a2, a2, 0
    
    //for(; desc->next_desc != NULL; desc = desc->next_desc)
    //    ;
    while(desc->next_desc != NULL)
  906bd1:	600001        	j	906bd6 <__adf_nbuf_last+0xa>
    {
        desc = desc->next_desc;
  906bd4:	d280      	mov.n	a2, a8
{
    VDESC *desc = buf->desc_list;
    
    //for(; desc->next_desc != NULL; desc = desc->next_desc)
    //    ;
    while(desc->next_desc != NULL)
  906bd6:	8820      	l32i.n	a8, a2, 0
  906bd8:	658ff8        	bnez	a8, 906bd4 <__adf_nbuf_last+0x8>
    {
        desc = desc->next_desc;
    }
    
    return desc;
}
  906bdb:	d10f      	retw.n
  906bdd:	000000        	ill

00906be0 <__adf_nbuf_trim_tail>:
 * @param len (how much to strip down)
 * 
 */
void 
__adf_nbuf_trim_tail(__adf_nbuf_t buf, adf_os_size_t len)
{
  906be0:	6c1004        	entry	a1, 32
    VDESC *last_desc = __adf_nbuf_last(buf);
  906be3:	022a02        	or	a10, a2, a2
  906be6:	5bfff9        	call8	906bcc <__adf_nbuf_last>
  906be9:	d4a0      	mov.n	a4, a10
    
    adf_os_assert(buf != NULL);
  906beb:	cd25      	bnez.n	a2, 906c04 <__adf_nbuf_trim_tail+0x24>
  906bed:	186913        	l32r	a8, 8e103c <_bss_end+0x3ce12c>
  906bf0:	1a697b        	l32r	a10, 8e11dc <_bss_end+0x3ce2cc>
  906bf3:	288212        	l32i	a8, a8, 72
  906bf6:	1b6985        	l32r	a11, 8e120c <_bss_end+0x3ce2fc>
  906bf9:	0b8000        	callx8	a8
  906bfc:	186978        	l32r	a8, 8e11dc <_bss_end+0x3ce2cc>
  906bff:	0c0200        	memw
  906c02:	8880      	l32i.n	a8, a8, 0
    last_desc->data_size -= len;
  906c04:	284106        	l16ui	a8, a4, 12
  906c07:	03034f        	extui	a3, a3, 0, 16
  906c0a:	03880c        	sub	a8, a8, a3
  906c0d:	284506        	s16i	a8, a4, 12
    buf->buf_length -= len;
  906c10:	242104        	l16ui	a4, a2, 8
  906c13:	03430c        	sub	a3, a4, a3
  906c16:	232504        	s16i	a3, a2, 8
  906c19:	d10f      	retw.n
	...

00906c1c <__adf_nbuf_put_tail>:
 * @return previous tail (data+len),NULL if the len is more than
 *         space available
 */
a_uint8_t *
__adf_nbuf_put_tail(__adf_nbuf_t buf, adf_os_size_t len)
{
  906c1c:	6c1004        	entry	a1, 32
    a_uint8_t *tail = NULL;
    VDESC *last_desc = __adf_nbuf_last(buf);
  906c1f:	da20      	mov.n	a10, a2
  906c21:	5bffea        	call8	906bcc <__adf_nbuf_last>
    
    tail = last_desc->buf_addr + last_desc->data_offset + last_desc->data_size;
  906c24:	28a106        	l16ui	a8, a10, 12
  906c27:	29a105        	l16ui	a9, a10, 10
    last_desc->data_size += len;
  906c2a:	03034f        	extui	a3, a3, 0, 16
__adf_nbuf_put_tail(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *tail = NULL;
    VDESC *last_desc = __adf_nbuf_last(buf);
    
    tail = last_desc->buf_addr + last_desc->data_offset + last_desc->data_size;
  906c2d:	a989      	add.n	a9, a8, a9
    last_desc->data_size += len;
  906c2f:	a838      	add.n	a8, a3, a8
  906c31:	28a506        	s16i	a8, a10, 12
    buf->buf_length += len;
  906c34:	282104        	l16ui	a8, a2, 8
__adf_nbuf_put_tail(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *tail = NULL;
    VDESC *last_desc = __adf_nbuf_last(buf);
    
    tail = last_desc->buf_addr + last_desc->data_offset + last_desc->data_size;
  906c37:	8ba1      	l32i.n	a11, a10, 4
    last_desc->data_size += len;
    buf->buf_length += len;
  906c39:	a833      	add.n	a3, a3, a8
  906c3b:	232504        	s16i	a3, a2, 8
    
    return tail;
}
  906c3e:	a9b2      	add.n	a2, a11, a9
  906c40:	d10f      	retw.n
	...

00906c44 <__adf_nbuf_headroom>:
 * 
 * @return num of bytes available
 */
a_uint32_t
__adf_nbuf_headroom(__adf_nbuf_t  buf)
{
  906c44:	6c1004        	entry	a1, 32
    return buf->desc_list->data_offset;
  906c47:	8820      	l32i.n	a8, a2, 0
}
  906c49:	228105        	l16ui	a2, a8, 10
  906c4c:	d10f      	retw.n
	...

00906c50 <__adf_nbuf_tailroom>:
 * @return num of bytes
 */

a_uint32_t 
__adf_nbuf_tailroom(__adf_nbuf_t  buf)
{
  906c50:	6c1004        	entry	a1, 32
    VDESC *last_desc = __adf_nbuf_last(buf);
  906c53:	da20      	mov.n	a10, a2
  906c55:	5bffdd        	call8	906bcc <__adf_nbuf_last>
    
    return last_desc->buf_size - last_desc->data_offset - last_desc->data_size;
  906c58:	28a104        	l16ui	a8, a10, 8
  906c5b:	22a105        	l16ui	a2, a10, 10
  906c5e:	02820c        	sub	a2, a8, a2
  906c61:	28a106        	l16ui	a8, a10, 12
}
  906c64:	08220c        	sub	a2, a2, a8
  906c67:	d10f      	retw.n
  906c69:	000000        	ill

00906c6c <__adf_nbuf_len>:
 * 
 * @return total length of packet (sum of all frag lengths)
 */ 
a_uint32_t
__adf_nbuf_len(__adf_nbuf_t  buf)
{
  906c6c:	6c1004        	entry	a1, 32
    return buf->buf_length; 
}
  906c6f:	222104        	l16ui	a2, a2, 8
  906c72:	d10f      	retw.n

00906c74 <__adf_nbuf_clone>:
 * 
 * @return Read-only copy of the nbuf (including clusters)
 */
__adf_nbuf_t 
__adf_nbuf_clone(__adf_nbuf_t  src)
{
  906c74:	6c1004        	entry	a1, 32
    __adf_nbuf_t buf = NULL;
    
    return buf;
}
  906c77:	c020      	movi.n	a2, 0
  906c79:	d10f      	retw.n
	...

00906c7c <__adf_nbuf_cat>:

void
__adf_nbuf_cat(__adf_nbuf_t dst, __adf_nbuf_t src)
{
  906c7c:	6c1004        	entry	a1, 32
  906c7f:	d10f      	retw.n
  906c81:	000000        	ill

00906c84 <__adf_nbuf_is_cloned>:
 * 
 * @return a_bool_t
 */
a_bool_t
__adf_nbuf_is_cloned(__adf_nbuf_t  buf)
{
  906c84:	6c1004        	entry	a1, 32
    return A_FALSE;
}
  906c87:	c020      	movi.n	a2, 0
  906c89:	d10f      	retw.n
	...

00906c8c <__adf_nbuf_peek_header>:
 * @brief This will return the header's addr & m_len
 */
void
__adf_nbuf_peek_header(__adf_nbuf_t buf, a_uint8_t   **addr, 
                       a_uint32_t	*len)
{
  906c8c:	6c1004        	entry	a1, 32
    VDESC *desc = buf->desc_list;
  906c8f:	8820      	l32i.n	a8, a2, 0
    
    *addr = desc->buf_addr + desc->data_offset;
  906c91:	298105        	l16ui	a9, a8, 10
  906c94:	8a81      	l32i.n	a10, a8, 4
    *len = desc->data_size; 
  906c96:	288106        	l16ui	a8, a8, 12
__adf_nbuf_peek_header(__adf_nbuf_t buf, a_uint8_t   **addr, 
                       a_uint32_t	*len)
{
    VDESC *desc = buf->desc_list;
    
    *addr = desc->buf_addr + desc->data_offset;
  906c99:	a9a9      	add.n	a9, a10, a9
  906c9b:	9930      	s32i.n	a9, a3, 0
    *len = desc->data_size; 
  906c9d:	9840      	s32i.n	a8, a4, 0
  906c9f:	d10f      	retw.n
  906ca1:	000000        	ill

00906ca4 <__adf_nbuf_queue_init>:
 * @brief init the queue
 * @param qhead
 */
void 
__adf_nbuf_queue_init(__adf_nbuf_qhead_t *qhead)
{
  906ca4:	6c1004        	entry	a1, 32
    qhead->qlen = 0;
  906ca7:	c080      	movi.n	a8, 0
  906ca9:	9822      	s32i.n	a8, a2, 8
    qhead->head = NULL;
  906cab:	9820      	s32i.n	a8, a2, 0
    qhead->tail = NULL;
  906cad:	9821      	s32i.n	a8, a2, 4
  906caf:	d10f      	retw.n
  906cb1:	000000        	ill

00906cb4 <__adf_nbuf_queue_len>:
 * @return length
 * 
 */
a_uint32_t  
__adf_nbuf_queue_len(__adf_nbuf_qhead_t *qhead)
{
  906cb4:	6c1004        	entry	a1, 32
    return qhead->qlen;
}
  906cb7:	8222      	l32i.n	a2, a2, 8
  906cb9:	d10f      	retw.n
	...

00906cbc <__adf_nbuf_queue_first>:
 * 
 * @return (NULL if the Q is empty)
 */
__adf_nbuf_t   
__adf_nbuf_queue_first(__adf_nbuf_queue_t *qhead)
{
  906cbc:	6c1004        	entry	a1, 32
    return qhead->head;
}
  906cbf:	8220      	l32i.n	a2, a2, 0
  906cc1:	d10f      	retw.n
	...

00906cc4 <__adf_nbuf_queue_next>:
 * 
 * @return (NULL if no packets are there)
 */
__adf_nbuf_t   
__adf_nbuf_queue_next(__adf_nbuf_t  buf)
{
  906cc4:	6c1004        	entry	a1, 32
    return buf->next_buf;
}
  906cc7:	8221      	l32i.n	a2, a2, 4
  906cc9:	d10f      	retw.n
	...

00906ccc <__adf_nbuf_is_queue_empty>:
 * 
 * @return a_bool_t
 */
a_bool_t  
__adf_nbuf_is_queue_empty(__adf_nbuf_qhead_t *qhead)
{
  906ccc:	6c1004        	entry	a1, 32
    return ((qhead->qlen == 0));
  906ccf:	8922      	l32i.n	a9, a2, 8
  906cd1:	c081      	movi.n	a8, 1
  906cd3:	c020      	movi.n	a2, 0
  906cd5:	098238        	moveqz	a2, a8, a9
}
  906cd8:	d10f      	retw.n
	...

00906cdc <_buf_pool_static_init>:
    pAPIs->_free_buf = _buf_pool_static_free_buf;
    pAPIs->_shutdown = _buf_pool_static_shutdown;
}
 
LOCAL pool_handle_t _buf_pool_static_init(adf_os_handle_t handle)
{
  906cdc:	6c1004        	entry	a1, 32
  906cdf:	c080      	movi.n	a8, 0
    pAPIs->_alloc_buf_align = _buf_pool_static_alloc_buf_align;
    pAPIs->_free_buf = _buf_pool_static_free_buf;
    pAPIs->_shutdown = _buf_pool_static_shutdown;
}
 
LOCAL pool_handle_t _buf_pool_static_init(adf_os_handle_t handle)
  906ce1:	126986        	l32r	a2, 8e12fc <_bss_end+0x3ce3ec>
{
#if 1
    int i;
    
    for(i=0; i < POOL_ID_MAX; i++) {
        g_poolCtx.bufQ[i] = NULL;
  906ce4:	db80      	mov.n	a11, a8
LOCAL pool_handle_t _buf_pool_static_init(adf_os_handle_t handle)
{
#if 1
    int i;
    
    for(i=0; i < POOL_ID_MAX; i++) {
  906ce6:	c298      	movi.n	a9, 40
    pAPIs->_alloc_buf_align = _buf_pool_static_alloc_buf_align;
    pAPIs->_free_buf = _buf_pool_static_free_buf;
    pAPIs->_shutdown = _buf_pool_static_shutdown;
}
 
LOCAL pool_handle_t _buf_pool_static_init(adf_os_handle_t handle)
  906ce8:	a28a      	add.n	a10, a8, a2
{
#if 1
    int i;
    
    for(i=0; i < POOL_ID_MAX; i++) {
        g_poolCtx.bufQ[i] = NULL;
  906cea:	9ba0      	s32i.n	a11, a10, 0
  906cec:	b488      	addi.n	a8, a8, 4
LOCAL pool_handle_t _buf_pool_static_init(adf_os_handle_t handle)
{
#if 1
    int i;
    
    for(i=0; i < POOL_ID_MAX; i++) {
  906cee:	7989f6        	bne	a8, a9, 906ce8 <_buf_pool_static_init+0xc>
    ctx = (BUF_POOL_STATIC_CONTEXT *)adf_os_mem_alloc(sizeof(BUF_POOL_STATIC_CONTEXT));
    ctx->NetHandle = handle;
    
    return ctx; 
#endif    
}      
  906cf1:	d10f      	retw.n
	...

00906cf4 <_buf_pool_static_shutdown>:
    
LOCAL void _buf_pool_static_shutdown(pool_handle_t handle) 
{
  906cf4:	6c1004        	entry	a1, 32
  906cf7:	d10f      	retw.n
  906cf9:	000000        	ill

00906cfc <_buf_pool_static_create_pool>:
    // SHALL NOT BE USED in FW
}

LOCAL void _buf_pool_static_create_pool(pool_handle_t handle, BUF_POOL_ID poolId, int nItems, int nSize)
{
  906cfc:	6c1006        	entry	a1, 48
        desc->data_size = 0;
        
        buf->buf_length = 0;        
        buf->desc_list = desc;
        
        if ( g_poolCtx.bufQ[poolId] == NULL ) {
  906cff:	126986        	l32r	a2, 8e1318 <_bss_end+0x3ce408>
{
    // SHALL NOT BE USED in FW
}

LOCAL void _buf_pool_static_create_pool(pool_handle_t handle, BUF_POOL_ID poolId, int nItems, int nSize)
{
  906d02:	d940      	mov.n	a9, a4
    VDESC *desc;
    
    //BUF_POOL_STATIC_CONTEXT *ctx = (BUF_POOL_STATIC_CONTEXT *)handle;
    
    for ( i = 0; i < nItems; i++) {
        buf = VBUF_alloc_vbuf();
  906d04:	176913        	l32r	a7, 8e1150 <_bss_end+0x3ce240>
    VBUF *buf;
    VDESC *desc;
    
    //BUF_POOL_STATIC_CONTEXT *ctx = (BUF_POOL_STATIC_CONTEXT *)handle;
    
    for ( i = 0; i < nItems; i++) {
  906d07:	c040      	movi.n	a4, 0
        desc->data_size = 0;
        
        buf->buf_length = 0;        
        buf->desc_list = desc;
        
        if ( g_poolCtx.bufQ[poolId] == NULL ) {
  906d09:	02330a        	addx4	a3, a3, a2
    VBUF *buf;
    VDESC *desc;
    
    //BUF_POOL_STATIC_CONTEXT *ctx = (BUF_POOL_STATIC_CONTEXT *)handle;
    
    for ( i = 0; i < nItems; i++) {
  906d0c:	60003e        	j	906d4e <_buf_pool_static_create_pool+0x52>
  906d0f:	002a72        	excw
        buf = VBUF_alloc_vbuf();
  906d12:	a199      	add.n	a9, a9, a1
  906d14:	100ba0        	l32r	a0, 8c9b94 <_bss_end+0x3b6c84>
  906d17:	00d2a0        	excw
        desc = VDESC_alloc_vdesc();
  906d1a:	2a72a6        	l32i	a10, a7, 0x298
  906d1d:	0ba000        	callx8	a10
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  906d20:	287252        	l32i	a8, a7, 0x148
  906d23:	d6a0      	mov.n	a6, a10
  906d25:	db50      	mov.n	a11, a5
  906d27:	c0a0      	movi.n	a10, 0
  906d29:	0b8000        	callx8	a8

        desc->buf_addr = (A_UINT8 *)adf_os_mem_alloc(nSize);
        desc->buf_size = nSize;
        desc->data_offset = 0;
  906d2c:	c080      	movi.n	a8, 0
    
    for ( i = 0; i < nItems; i++) {
        buf = VBUF_alloc_vbuf();
        desc = VDESC_alloc_vdesc();

        desc->buf_addr = (A_UINT8 *)adf_os_mem_alloc(nSize);
  906d2e:	9a61      	s32i.n	a10, a6, 4
        desc->buf_size = nSize;
  906d30:	256504        	s16i	a5, a6, 8
        desc->data_offset = 0;
  906d33:	286505        	s16i	a8, a6, 10
        desc->data_size = 0;
  906d36:	286506        	s16i	a8, a6, 12
        
        buf->buf_length = 0;        
        buf->desc_list = desc;
  906d39:	9620      	s32i.n	a6, a2, 0
        
        if ( g_poolCtx.bufQ[poolId] == NULL ) {
  906d3b:	8630      	l32i.n	a6, a3, 0
        desc->buf_addr = (A_UINT8 *)adf_os_mem_alloc(nSize);
        desc->buf_size = nSize;
        desc->data_offset = 0;
        desc->data_size = 0;
        
        buf->buf_length = 0;        
  906d3d:	282504        	s16i	a8, a2, 8
        buf->desc_list = desc;
        
        if ( g_poolCtx.bufQ[poolId] == NULL ) {
  906d40:	8910      	l32i.n	a9, a1, 0
  906d42:	cc62      	bnez.n	a6, 906d48 <_buf_pool_static_create_pool+0x4c>
  906d44:	600002        	j	906d4a <_buf_pool_static_create_pool+0x4e>
  906d47:	009621        	excw
            g_poolCtx.bufQ[poolId] = buf;
        } else {
            buf->next_buf = g_poolCtx.bufQ[poolId];
            g_poolCtx.bufQ[poolId] = buf;
  906d4a:	9230      	s32i.n	a2, a3, 0
    VBUF *buf;
    VDESC *desc;
    
    //BUF_POOL_STATIC_CONTEXT *ctx = (BUF_POOL_STATIC_CONTEXT *)handle;
    
    for ( i = 0; i < nItems; i++) {
  906d4c:	b144      	addi.n	a4, a4, 1
  906d4e:	7942be        	blt	a4, a9, 906d10 <_buf_pool_static_create_pool+0x14>
        } else {
            buf->next_buf = g_poolCtx.bufQ[poolId];
            g_poolCtx.bufQ[poolId] = buf;
        }
    }
}
  906d51:	d10f      	retw.n
	...

00906d54 <_buf_pool_static_alloc_buf>:
            
LOCAL adf_nbuf_t  _buf_pool_static_alloc_buf(pool_handle_t handle, BUF_POOL_ID poolId, int reserve)
{
  906d54:	6c1004        	entry	a1, 32
    VBUF *buf;
    
    buf = g_poolCtx.bufQ[poolId];
  906d57:	126986        	l32r	a2, 8e1370 <_bss_end+0x3ce460>
  906d5a:	02330a        	addx4	a3, a3, a2
  906d5d:	8230      	l32i.n	a2, a3, 0
    if ( buf != NULL ) {
  906d5f:	c921      	beqz.n	a2, 906d74 <_buf_pool_static_alloc_buf+0x20>
        g_poolCtx.bufQ[poolId] = buf->next_buf;
  906d61:	8821      	l32i.n	a8, a2, 4
  906d63:	9830      	s32i.n	a8, a3, 0
        
        buf->next_buf = NULL;
        buf->desc_list->data_offset = reserve;
  906d65:	8920      	l32i.n	a9, a2, 0
    
    buf = g_poolCtx.bufQ[poolId];
    if ( buf != NULL ) {
        g_poolCtx.bufQ[poolId] = buf->next_buf;
        
        buf->next_buf = NULL;
  906d67:	c080      	movi.n	a8, 0
  906d69:	9821      	s32i.n	a8, a2, 4
        buf->desc_list->data_offset = reserve;
  906d6b:	249505        	s16i	a4, a9, 10
        buf->desc_list->data_size = 0;
  906d6e:	289506        	s16i	a8, a9, 12
        buf->buf_length = 0;
  906d71:	282504        	s16i	a8, a2, 8
    }
    
    return buf;
}
  906d74:	d10f      	retw.n
	...

00906d78 <_buf_pool_static_alloc_buf_align>:

LOCAL adf_nbuf_t  _buf_pool_static_alloc_buf_align(pool_handle_t handle, BUF_POOL_ID poolId, int reserve, int align)
{
  906d78:	6c1004        	entry	a1, 32
    return _buf_pool_static_alloc_buf(handle, poolId, reserve);
  906d7b:	da20      	mov.n	a10, a2
  906d7d:	db30      	mov.n	a11, a3
  906d7f:	dc40      	mov.n	a12, a4
  906d81:	5bfff4        	call8	906d54 <_buf_pool_static_alloc_buf>
}
  906d84:	d2a0      	mov.n	a2, a10
  906d86:	d10f      	retw.n

00906d88 <_buf_pool_static_free_buf>:
    
LOCAL void _buf_pool_static_free_buf(pool_handle_t handle, BUF_POOL_ID poolId, adf_nbuf_t buf)
{
  906d88:	6c1004        	entry	a1, 32
    if ( g_poolCtx.bufQ[poolId] == NULL ) {
  906d8b:	186986        	l32r	a8, 8e13a4 <_bss_end+0x3ce494>
  906d8e:	08330a        	addx4	a3, a3, a8
  906d91:	8830      	l32i.n	a8, a3, 0
  906d93:	cc81      	bnez.n	a8, 906d98 <_buf_pool_static_free_buf+0x10>
  906d95:	600001        	j	906d9a <_buf_pool_static_free_buf+0x12>
        g_poolCtx.bufQ[poolId] = buf;
    } else {
        buf->next_buf = g_poolCtx.bufQ[poolId];
  906d98:	9841      	s32i.n	a8, a4, 4
        g_poolCtx.bufQ[poolId] = buf;
  906d9a:	9430      	s32i.n	a4, a3, 0
  906d9c:	d10f      	retw.n
	...

00906da0 <buf_pool_module_install>:
LOCAL void _buf_pool_static_shutdown(pool_handle_t handle);      

BUF_POOL_STATIC_CONTEXT g_poolCtx;

void buf_pool_module_install(struct buf_pool_api *pAPIs)
{   
  906da0:	6c1004        	entry	a1, 32
    pAPIs->_init = _buf_pool_static_init;
  906da3:	186987        	l32r	a8, 8e13c0 <_bss_end+0x3ce4b0>
  906da6:	9820      	s32i.n	a8, a2, 0
    pAPIs->_create_pool = _buf_pool_static_create_pool;
  906da8:	186988        	l32r	a8, 8e13c8 <_bss_end+0x3ce4b8>
  906dab:	9822      	s32i.n	a8, a2, 8
    pAPIs->_alloc_buf = _buf_pool_static_alloc_buf;
  906dad:	186989        	l32r	a8, 8e13d4 <_bss_end+0x3ce4c4>
  906db0:	9823      	s32i.n	a8, a2, 12
    pAPIs->_alloc_buf_align = _buf_pool_static_alloc_buf_align;
  906db2:	18698a        	l32r	a8, 8e13dc <_bss_end+0x3ce4cc>
  906db5:	9824      	s32i.n	a8, a2, 16
    pAPIs->_free_buf = _buf_pool_static_free_buf;
  906db7:	18698b        	l32r	a8, 8e13e4 <_bss_end+0x3ce4d4>
  906dba:	9825      	s32i.n	a8, a2, 20
    pAPIs->_shutdown = _buf_pool_static_shutdown;
  906dbc:	18698c        	l32r	a8, 8e13ec <_bss_end+0x3ce4dc>
  906dbf:	9821      	s32i.n	a8, a2, 4
  906dc1:	d10f      	retw.n
	...

00906dc4 <db_incorect_format>:
int cmd_not_found;
uint16_t gvLen;
int pressed_time;

static void db_incorect_format(void)
{
  906dc4:	6c1004        	entry	a1, 32
	A_PRINTF("Error! Incorrect format.\n\r");
  906dc7:	186913        	l32r	a8, 8e1214 <_bss_end+0x3ce304>
  906dca:	1a698d        	l32r	a10, 8e1400 <_bss_end+0x3ce4f0>
  906dcd:	288212        	l32i	a8, a8, 72
  906dd0:	0b8000        	callx8	a8
  906dd3:	d10f      	retw.n
  906dd5:	000000        	ill

00906dd8 <zf_debug_init>:
	} while (mem1 < mem2);
	A_PRINTF("\n\r");
}

static void zf_debug_init(void)
{
  906dd8:	6c1006        	entry	a1, 48
	uint8_t ch;

	/* Purge Rx FIFO */
	while ((zm_get_char(&ch)) != 0)
  906ddb:	126913        	l32r	a2, 8e1228 <_bss_end+0x3ce318>
  906dde:	282215        	l32i	a8, a2, 84
  906de1:	da10      	mov.n	a10, a1
  906de3:	0b8000        	callx8	a8
  906de6:	65aff4        	bnez	a10, 906dde <zf_debug_init+0x6>
	{
	}

	cmd_buf_ptr = 0;
  906de9:	12698e        	l32r	a2, 8e1424 <_bss_end+0x3ce514>
  906dec:	9a20      	s32i.n	a10, a2, 0
	cmd_buf_full = FALSE;
  906dee:	12698f        	l32r	a2, 8e142c <_bss_end+0x3ce51c>
  906df1:	9a20      	s32i.n	a10, a2, 0
	gvLen = 0;
  906df3:	126990        	l32r	a2, 8e1434 <_bss_end+0x3ce524>
  906df6:	2a2500        	s16i	a10, a2, 0
	pressed_time = 0;
  906df9:	126991        	l32r	a2, 8e1440 <_bss_end+0x3ce530>
  906dfc:	9a20      	s32i.n	a10, a2, 0
  906dfe:	d10f      	retw.n

00906e00 <db_ascii_to_hex>:
	}
	return (int)A_STRLEN(cmd_str);
}

static int db_ascii_to_hex(char *num_str, unsigned long *hex_num)
{
  906e00:	6c1004        	entry	a1, 32
	int i = 0;

	*hex_num = 0;
  906e03:	c080      	movi.n	a8, 0
  906e05:	9830      	s32i.n	a8, a3, 0
	while (num_str[i])
	{
		if ((num_str[i] >= '0') && (num_str[i] <= '9'))
  906e07:	c099      	movi.n	a9, 9
static int db_ascii_to_hex(char *num_str, unsigned long *hex_num)
{
	int i = 0;

	*hex_num = 0;
	while (num_str[i])
  906e09:	60004b        	j	906e58 <db_ascii_to_hex+0x58>
	{
		if ((num_str[i] >= '0') && (num_str[i] <= '9'))
  906e0c:	2a8cd0        	addi	a10, a8, -48
  906e0f:	0a0a47        	extui	a10, a10, 0, 8
  906e12:	7a930e        	bltu	a9, a10, 906e24 <db_ascii_to_hex+0x24>
		{
			*hex_num <<= 4;
  906e15:	8830      	l32i.n	a8, a3, 0
  906e17:	0c8811        	slli	a8, a8, 4
  906e1a:	9830      	s32i.n	a8, a3, 0
			*hex_num += (num_str[i] - '0');
  906e1c:	288cd0        	addi	a8, a8, -48
  906e1f:	60002c        	j	906e4f <db_ascii_to_hex+0x4f>
  906e22:	00002a        	muluh	a0, a0, a0
		}
		else if ((num_str[i] >= 'A') && (num_str[i] <= 'F'))
  906e25:	8cbf      	l32i.n	a12, a11, 60
  906e27:	0a0a47        	extui	a10, a10, 0, 8
  906e2a:	6fa60e        	bgeui	a10, 6, 906e3c <db_ascii_to_hex+0x3c>
		{
			*hex_num <<= 4;
  906e2d:	8830      	l32i.n	a8, a3, 0
  906e2f:	0c8811        	slli	a8, a8, 4
  906e32:	9830      	s32i.n	a8, a3, 0
			*hex_num += (num_str[i] - 'A' + 10);
  906e34:	288cc9        	addi	a8, a8, -55
  906e37:	600014        	j	906e4f <db_ascii_to_hex+0x4f>
  906e3a:	000028        	mull	a0, a0, a0
		}
		else if ((num_str[i] >= 'a') && (num_str[i] <= 'f'))
  906e3d:	8c9f      	l32i.n	a12, a9, 60
  906e3f:	080847        	extui	a8, a8, 0, 8
  906e42:	6f861c        	bgeui	a8, 6, 906e62 <db_ascii_to_hex+0x62>
		{
			*hex_num <<= 4;
  906e45:	8830      	l32i.n	a8, a3, 0
  906e47:	0c8811        	slli	a8, a8, 4
  906e4a:	9830      	s32i.n	a8, a3, 0
			*hex_num += (num_str[i] - 'a' + 10);
  906e4c:	288ca9        	addi	a8, a8, -87
  906e4f:	2a2000        	l8ui	a10, a2, 0
  906e52:	b122      	addi.n	a2, a2, 1
  906e54:	aa88      	add.n	a8, a8, a10
  906e56:	9830      	s32i.n	a8, a3, 0
static int db_ascii_to_hex(char *num_str, unsigned long *hex_num)
{
	int i = 0;

	*hex_num = 0;
	while (num_str[i])
  906e58:	282000        	l8ui	a8, a2, 0
  906e5b:	658fad        	bnez	a8, 906e0c <db_ascii_to_hex+0xc>
		{
			return -1;
		}
		i++;
	}
	return 0;
  906e5e:	d280      	mov.n	a2, a8
  906e60:	d10f      	retw.n
			*hex_num <<= 4;
			*hex_num += (num_str[i] - 'a' + 10);
		}
		else
		{
			return -1;
  906e62:	c72f      	movi.n	a2, -1
		}
		i++;
	}
	return 0;
}
  906e64:	d10f      	retw.n
	...

00906e68 <db_hex_to_ascii>:
	}
	return 0;
}

static int db_hex_to_ascii(unsigned long hex_num, char *num_str)
{
  906e68:	6c1004        	entry	a1, 32
  906e6b:	d930      	mov.n	a9, a3
  906e6d:	c18c      	movi.n	a8, 28
	unsigned long four_bits;

	for (i=7; i>=0; i--)
	{
		four_bits = (hex_num >> i*4) & 0xf;
		if (four_bits < 10)
  906e6f:	c0c9      	movi.n	a12, 9
static int db_hex_to_ascii(unsigned long hex_num, char *num_str)
{
	int i;
	unsigned long four_bits;

	for (i=7; i>=0; i--)
  906e71:	2bfafc        	movi	a11, -4
	{
		four_bits = (hex_num >> i*4) & 0xf;
  906e74:	008004        	ssr	a8
  906e77:	020a19        	srl	a10, a2
  906e7a:	0a0a43        	extui	a10, a10, 0, 4
		if (four_bits < 10)
  906e7d:	7ac307        	bltu	a12, a10, 906e88 <db_hex_to_ascii+0x20>
		{
			num_str[7-i] = four_bits + '0';
  906e80:	2aac30        	addi	a10, a10, 48
  906e83:	600004        	j	906e8b <db_hex_to_ascii+0x23>
  906e86:	00002a        	muluh	a0, a0, a0
		}
		else
		{
			num_str[7-i] = four_bits - 10 + 'A';
  906e89:	ac37      	add.n	a7, a3, a12
  906e8b:	2a9400        	s8i	a10, a9, 0
  906e8e:	288cfc        	addi	a8, a8, -4
  906e91:	b199      	addi.n	a9, a9, 1
static int db_hex_to_ascii(unsigned long hex_num, char *num_str)
{
	int i;
	unsigned long four_bits;

	for (i=7; i>=0; i--)
  906e93:	7b89dd        	bne	a8, a11, 906e74 <db_hex_to_ascii+0xc>
		else
		{
			num_str[7-i] = four_bits - 10 + 'A';
		}
	}
	num_str[8] = 0;
  906e96:	c020      	movi.n	a2, 0
  906e98:	223408        	s8i	a2, a3, 8
	return 0;
}
  906e9b:	c020      	movi.n	a2, 0
  906e9d:	d10f      	retw.n
	...

00906ea0 <db_help_cmd>:

int db_help_cmd(char *cmd, char *param1, char *param2, char *param3)
{
  906ea0:	6c1004        	entry	a1, 32
	int i;

	i = 0;

	A_PRINTF("%s %s\n", ATH_DEBUGGER_VERSION_STR, ATH_COMMAND_LIST_STR);
  906ea3:	146913        	l32r	a4, 8e12f0 <_bss_end+0x3ce3e0>
  906ea6:	1a6992        	l32r	a10, 8e14f0 <_bss_end+0x3ce5e0>
  906ea9:	224212        	l32i	a2, a4, 72
  906eac:	1b6993        	l32r	a11, 8e14f8 <_bss_end+0x3ce5e8>
  906eaf:	1c6994        	l32r	a12, 8e1500 <_bss_end+0x3ce5f0>
  906eb2:	0b2000        	callx8	a2
  906eb5:	136995        	l32r	a3, 8e150c <_bss_end+0x3ce5fc>

int db_help_cmd(char *cmd, char *param1, char *param2, char *param3)
{
	int i;

	i = 0;
  906eb8:	c020      	movi.n	a2, 0

	A_PRINTF("%s %s\n", ATH_DEBUGGER_VERSION_STR, ATH_COMMAND_LIST_STR);

	while (command_table[i].cmd_func)
  906eba:	600016        	j	906ed4 <db_help_cmd+0x34>
	}
	num_str[8] = 0;
	return 0;
}

int db_help_cmd(char *cmd, char *param1, char *param2, char *param3)
  906ebd:	293cfc        	addi	a9, a3, -4
  906ec0:	2b3cf8        	addi	a11, a3, -8

	A_PRINTF("%s %s\n", ATH_DEBUGGER_VERSION_STR, ATH_COMMAND_LIST_STR);

	while (command_table[i].cmd_func)
	{
		A_PRINTF("%s\t%s\n\r", command_table[i].cmd_str,
  906ec3:	284212        	l32i	a8, a4, 72
  906ec6:	1a6996        	l32r	a10, 8e1520 <_bss_end+0x3ce610>
  906ec9:	8bb0      	l32i.n	a11, a11, 0
  906ecb:	8c90      	l32i.n	a12, a9, 0
				       command_table[i].help_str);
		i++;
  906ecd:	b122      	addi.n	a2, a2, 1

	A_PRINTF("%s %s\n", ATH_DEBUGGER_VERSION_STR, ATH_COMMAND_LIST_STR);

	while (command_table[i].cmd_func)
	{
		A_PRINTF("%s\t%s\n\r", command_table[i].cmd_str,
  906ecf:	0b8000        	callx8	a8
  906ed2:	bc33      	addi.n	a3, a3, 12

	i = 0;

	A_PRINTF("%s %s\n", ATH_DEBUGGER_VERSION_STR, ATH_COMMAND_LIST_STR);

	while (command_table[i].cmd_func)
  906ed4:	8830      	l32i.n	a8, a3, 0
  906ed6:	658fe3        	bnez	a8, 906ebd <db_help_cmd+0x1d>
		A_PRINTF("%s\t%s\n\r", command_table[i].cmd_str,
				       command_table[i].help_str);
		i++;
	}
	return i;
}
  906ed9:	d10f      	retw.n
	...

00906edc <db_cmd_starthtc>:
#endif
	return 1;
}

static int db_cmd_starthtc(char *cmd, char *param1, char *param2, char *param3)
{
  906edc:	6c1004        	entry	a1, 32
    extern htc_handle_t htc_handle;
    HTC_Ready(htc_handle);
  906edf:	126913        	l32r	a2, 8e132c <_bss_end+0x3ce41c>
  906ee2:	282281        	l32i	a8, a2, 0x204
  906ee5:	126997        	l32r	a2, 8e1544 <_bss_end+0x3ce634>
  906ee8:	8a20      	l32i.n	a10, a2, 0
  906eea:	0b8000        	callx8	a8
}
  906eed:	d10f      	retw.n
	...

00906ef0 <db_cmd_memcmp>:
#endif
#endif /* #if defined(PROJECT_K2) */

/* Memory Comparison */
static int db_cmd_memcmp(char *cmd, char *param1, char *param2, char *param3)
{
  906ef0:	6c1006        	entry	a1, 48
	unsigned long       addr1, addr2, len;
	A_UINT8             *buf1, *buf2;

	if (db_ascii_to_hex(param1, &addr1) != -1 &&
  906ef3:	033a02        	or	a10, a3, a3
  906ef6:	2b1c08        	addi	a11, a1, 8
  906ef9:	5bffc1        	call8	906e00 <db_ascii_to_hex>
  906efc:	68a045        	beqi	a10, -1, 906f45 <db_cmd_memcmp+0x55>
	    db_ascii_to_hex(param2, &addr2) != -1 &&
  906eff:	044a02        	or	a10, a4, a4
  906f02:	2b1c04        	addi	a11, a1, 4
  906f05:	5bffbe        	call8	906e00 <db_ascii_to_hex>
static int db_cmd_memcmp(char *cmd, char *param1, char *param2, char *param3)
{
	unsigned long       addr1, addr2, len;
	A_UINT8             *buf1, *buf2;

	if (db_ascii_to_hex(param1, &addr1) != -1 &&
  906f08:	68a039        	beqi	a10, -1, 906f45 <db_cmd_memcmp+0x55>
	    db_ascii_to_hex(param2, &addr2) != -1 &&
	    db_ascii_to_hex(param3, &len) != -1 &&
  906f0b:	055a02        	or	a10, a5, a5
  906f0e:	011b02        	or	a11, a1, a1
  906f11:	5bffbb        	call8	906e00 <db_ascii_to_hex>
{
	unsigned long       addr1, addr2, len;
	A_UINT8             *buf1, *buf2;

	if (db_ascii_to_hex(param1, &addr1) != -1 &&
	    db_ascii_to_hex(param2, &addr2) != -1 &&
  906f14:	68a02d        	beqi	a10, -1, 906f45 <db_cmd_memcmp+0x55>
	    db_ascii_to_hex(param3, &len) != -1 &&
	    addr1 != addr2 && addr1%4 == 0 && addr2%4 == 0 && len%4 == 0)
  906f17:	8a12      	l32i.n	a10, a1, 8
  906f19:	8b11      	l32i.n	a11, a1, 4
	unsigned long       addr1, addr2, len;
	A_UINT8             *buf1, *buf2;

	if (db_ascii_to_hex(param1, &addr1) != -1 &&
	    db_ascii_to_hex(param2, &addr2) != -1 &&
	    db_ascii_to_hex(param3, &len) != -1 &&
  906f1b:	7ba126        	beq	a10, a11, 906f45 <db_cmd_memcmp+0x55>
	    addr1 != addr2 && addr1%4 == 0 && addr2%4 == 0 && len%4 == 0)
  906f1e:	0a0241        	extui	a2, a10, 0, 2
  906f21:	ce20      	bnez.n	a2, 906f45 <db_cmd_memcmp+0x55>
  906f23:	0b0241        	extui	a2, a11, 0, 2
  906f26:	cd2b      	bnez.n	a2, 906f45 <db_cmd_memcmp+0x55>
  906f28:	8c10      	l32i.n	a12, a1, 0
  906f2a:	0c0241        	extui	a2, a12, 0, 2
  906f2d:	cd24      	bnez.n	a2, 906f45 <db_cmd_memcmp+0x55>
	{
		buf1 = (A_UINT8 *)addr1;
		buf2 = (A_UINT8 *)addr2;        ;

		A_PRINTF("memcmp(buf1, buf2, len) = %d\n\r", A_MEMCMP(buf1, buf2, len));
  906f2f:	186913        	l32r	a8, 8e137c <_bss_end+0x3ce46c>
  906f32:	8587      	l32i.n	a5, a8, 28
  906f34:	248212        	l32i	a4, a8, 72
  906f37:	0b5000        	callx8	a5
  906f3a:	dba0      	mov.n	a11, a10
  906f3c:	1a6998        	l32r	a10, 8e159c <athos_indirection_table_install+0x28>
  906f3f:	0b4000        	callx8	a4
  906f42:	d10f      	retw.n
  906f44:	005bff        	excw
		return 0;
	}

	db_incorect_format();
  906f47:	9fc7      	s32i.n	a15, a12, 28
	return -1;
  906f49:	2fd10f        	l16ui	a15, a13, 30

00906f4c <db_cmd_memdump>:
}

/* Memory Dump */
static int db_cmd_memdump(char *cmd, char *param1, char *param2, char *param3)
{
  906f4c:	6c1006        	entry	a1, 48
	unsigned long       addr1, addr2;

	if (db_ascii_to_hex(param1, &addr1) != -1 && db_ascii_to_hex(param2, &addr2) != -1 && addr1 < addr2 && addr1%4 == 0)
  906f4f:	033a02        	or	a10, a3, a3
  906f52:	2b1c04        	addi	a11, a1, 4
  906f55:	5bffaa        	call8	906e00 <db_ascii_to_hex>
  906f58:	69a002        	bnei	a10, -1, 906f5e <db_cmd_memdump+0x12>
  906f5b:	60008e        	j	906fed <db_cmd_memdump+0xa1>
  906f5e:	da40      	mov.n	a10, a4
  906f60:	db10      	mov.n	a11, a1
  906f62:	5bffa7        	call8	906e00 <db_ascii_to_hex>
  906f65:	69a002        	bnei	a10, -1, 906f6b <db_cmd_memdump+0x1f>
  906f68:	600081        	j	906fed <db_cmd_memdump+0xa1>
  906f6b:	8211      	l32i.n	a2, a1, 4
  906f6d:	241200        	l32i	a4, a1, 0
  906f70:	742b79        	bgeu	a2, a4, 906fed <db_cmd_memdump+0xa1>
  906f73:	020341        	extui	a3, a2, 0, 2
  906f76:	653073        	bnez	a3, 906fed <db_cmd_memdump+0xa1>
	unsigned int i = 0;
	const char *tmp;

	do {
		if (i == 0) {
			A_PRINTF("\n\r%06x: ", mem1);
  906f79:	176913        	l32r	a7, 8e13c8 <_bss_end+0x3ce4b8>
{
	unsigned int i = 0;
	const char *tmp;

	do {
		if (i == 0) {
  906f7c:	cc3c      	bnez.n	a3, 906f8c <db_cmd_memdump+0x40>
			A_PRINTF("\n\r%06x: ", mem1);
  906f7e:	257212        	l32i	a5, a7, 72
  906f81:	1a6999        	l32r	a10, 8e15e8 <athos_indirection_table_install+0x74>
  906f84:	db20      	mov.n	a11, a2
  906f86:	0b5000        	callx8	a5
  906f89:	022502        	or	a5, a2, a2
			tmp = mem1;
		}

		A_PRINTF("%04x ", *(uint16_t *)mem1);
  906f8c:	166913        	l32r	a6, 8e13d8 <_bss_end+0x3ce4c8>
  906f8f:	2b2100        	l16ui	a11, a2, 0
  906f92:	286212        	l32i	a8, a6, 72
  906f95:	1a699a        	l32r	a10, 8e1600 <athos_indirection_table_install+0x8c>

		mem1 += 2;
		i++;
  906f98:	233c01        	addi	a3, a3, 1
		if (i == 0) {
			A_PRINTF("\n\r%06x: ", mem1);
			tmp = mem1;
		}

		A_PRINTF("%04x ", *(uint16_t *)mem1);
  906f9b:	0b8000        	callx8	a8

		mem1 += 2;
  906f9e:	b222      	addi.n	a2, a2, 2
		i++;

		if (i == 8) {
  906fa0:	693834        	bnei	a3, 8, 906fd8 <db_cmd_memdump+0x8c>
			A_PRINTF(" ");
  906fa3:	236212        	l32i	a3, a6, 72
  906fa6:	1a699b        	l32r	a10, 8e1614 <athos_indirection_table_install+0xa0>
  906fa9:	0b3000        	callx8	a3
			do {
				if (*tmp > 0x20 && *tmp < 0x7e)
  906fac:	c53c      	movi.n	a3, 92
  906fae:	2b5000        	l8ui	a11, a5, 0
  906fb1:	166913        	l32r	a6, 8e1400 <_bss_end+0x3ce4f0>
  906fb4:	28bcdf        	addi	a8, a11, -33
  906fb7:	080847        	extui	a8, a8, 0, 8
					A_PRINTF("%c", *tmp);
  906fba:	266212        	l32i	a6, a6, 72
		i++;

		if (i == 8) {
			A_PRINTF(" ");
			do {
				if (*tmp > 0x20 && *tmp < 0x7e)
  906fbd:	783308        	bltu	a3, a8, 906fc9 <db_cmd_memdump+0x7d>
					A_PRINTF("%c", *tmp);
  906fc0:	1a699c        	l32r	a10, 8e1630 <athos_indirection_table_install+0xbc>
  906fc3:	0b6000        	callx8	a6
  906fc6:	600005        	j	906fcf <db_cmd_memdump+0x83>
				else
					A_PRINTF(".");
  906fc9:	1a699d        	l32r	a10, 8e1640 <athos_indirection_table_install+0xcc>
  906fcc:	0b6000        	callx8	a6
				tmp++;
  906fcf:	255c01        	addi	a5, a5, 1
			} while (tmp < mem1);
  906fd2:	7253d8        	bltu	a5, a2, 906fae <db_cmd_memdump+0x62>
			i = 0;
  906fd5:	230a00        	movi	a3, 0
		}
	} while (mem1 < mem2);
  906fd8:	7423a0        	bltu	a2, a4, 906f7c <db_cmd_memdump+0x30>
	A_PRINTF("\n\r");
  906fdb:	126913        	l32r	a2, 8e1428 <_bss_end+0x3ce518>
  906fde:	1a699e        	l32r	a10, 8e1658 <athos_indirection_table_install+0xe4>
  906fe1:	222212        	l32i	a2, a2, 72
  906fe4:	0b2000        	callx8	a2
	unsigned long       addr1, addr2;

	if (db_ascii_to_hex(param1, &addr1) != -1 && db_ascii_to_hex(param2, &addr2) != -1 && addr1 < addr2 && addr1%4 == 0)
	{
		db_print_dump((const char *)addr1, (const char *)addr2);
		return 0;
  906fe7:	c020      	movi.n	a2, 0
  906fe9:	d10f      	retw.n
  906feb:	00005b        	extui	a0, a0, 16, 12
	}

	db_incorect_format();
  906fee:	ff          	.byte 0xff
  906fef:	75c72f        	bbci	a12, 21, 907022 <db_str_cmd+0x2e>
	return -1;
}
  906ff2:	d10f      	retw.n

00906ff4 <db_str_cmd>:
	db_incorect_format();
	return -1;
}

static int db_str_cmd(char *cmd, char *param1, char *param2, char *param3)
{
  906ff4:	6c100a        	entry	a1, 80
	unsigned long val;
	unsigned long addr;
	char val_str[20];
	char addr_str[20];

	if ((A_STRLEN(param2) > 0) &&
  906ff7:	186913        	l32r	a8, 8e1444 <_bss_end+0x3ce534>
  906ffa:	da40      	mov.n	a10, a4
  906ffc:	288266        	l32i	a8, a8, 0x198
  906fff:	0b8000        	callx8	a8
  907002:	6ba102        	bgei	a10, 1, 907008 <db_str_cmd+0x14>
  907005:	6000a4        	j	9070ad <db_str_cmd+0xb9>
	    (db_ascii_to_hex(param1, &addr) != -1) &&
  907008:	da30      	mov.n	a10, a3
  90700a:	2b1c28        	addi	a11, a1, 40
  90700d:	5bff7c        	call8	906e00 <db_ascii_to_hex>
	unsigned long val;
	unsigned long addr;
	char val_str[20];
	char addr_str[20];

	if ((A_STRLEN(param2) > 0) &&
  907010:	69a002        	bnei	a10, -1, 907016 <db_str_cmd+0x22>
  907013:	600096        	j	9070ad <db_str_cmd+0xb9>
	    (db_ascii_to_hex(param1, &addr) != -1) &&
	    (db_ascii_to_hex(param2, &val) != -1))
  907016:	da40      	mov.n	a10, a4
  907018:	2b1c2c        	addi	a11, a1, 44
  90701b:	5bff79        	call8	906e00 <db_ascii_to_hex>
	unsigned long addr;
	char val_str[20];
	char addr_str[20];

	if ((A_STRLEN(param2) > 0) &&
	    (db_ascii_to_hex(param1, &addr) != -1) &&
  90701e:	69a002        	bnei	a10, -1, 907024 <db_str_cmd+0x30>
  907021:	600088        	j	9070ad <db_str_cmd+0xb9>
	    (db_ascii_to_hex(param2, &val) != -1))
	{
		if (strcmp(cmd, "STR") == 0)
  907024:	1b699f        	l32r	a11, 8e16a0 <athos_indirection_table_install+0x12c>
  907027:	da20      	mov.n	a10, a2
  907029:	5b7d4d        	call8	8e6560 <strcmp>
  90702c:	cda1      	bnez.n	a10, 907041 <db_str_cmd+0x4d>
		{
			addr &= 0xfffffffc;
  90702e:	821a      	l32i.n	a2, a1, 40
  907030:	c73c      	movi.n	a3, -4
  907032:	023201        	and	a2, a3, a2
			iowrite32(addr, val);
  907035:	831b      	l32i.n	a3, a1, 44
	    (db_ascii_to_hex(param1, &addr) != -1) &&
	    (db_ascii_to_hex(param2, &val) != -1))
	{
		if (strcmp(cmd, "STR") == 0)
		{
			addr &= 0xfffffffc;
  907037:	921a      	s32i.n	a2, a1, 40
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  907039:	0c0200        	memw
  90703c:	9320      	s32i.n	a3, a2, 0
  90703e:	600044        	j	907086 <db_str_cmd+0x92>
			iowrite32(addr, val);
		}

		else if (strcmp(cmd, "STRH") == 0)
  907041:	1b69a0        	l32r	a11, 8e16c4 <athos_indirection_table_install+0x150>
  907044:	da20      	mov.n	a10, a2
  907046:	5b7d46        	call8	8e6560 <strcmp>
  907049:	cda3      	bnez.n	a10, 907060 <db_str_cmd+0x6c>
		{
			addr &= 0xfffffffe;
  90704b:	821a      	l32i.n	a2, a1, 40
  90704d:	c73e      	movi.n	a3, -2
  90704f:	023201        	and	a2, a3, a2
  907052:	231117        	l16ui	a3, a1, 46
  907055:	921a      	s32i.n	a2, a1, 40
	*(volatile uint8_t *) addr = b;
}

static inline void iowrite16(volatile uint32_t addr, const uint16_t b)
{
	*(volatile uint16_t *) addr = b;
  907057:	0c0200        	memw
  90705a:	232500        	s16i	a3, a2, 0
  90705d:	600025        	j	907086 <db_str_cmd+0x92>
			//*(volatile unsigned short *)(addr & 0xfffffffe) = (unsigned short)val;
			iowrite16(addr, val);
		}
		else if (strcmp(cmd, "STRB") == 0)
  907060:	1b69a1        	l32r	a11, 8e16e4 <athos_indirection_table_install+0x170>
  907063:	da20      	mov.n	a10, a2
  907065:	5b7d3e        	call8	8e6560 <strcmp>
  907068:	cdaa      	bnez.n	a10, 907086 <db_str_cmd+0x92>
		{
			if( addr & 0x00f00000 )
  90706a:	821a      	l32i.n	a2, a1, 40
  90706c:	1369a2        	l32r	a3, 8e16f4 <athos_indirection_table_install+0x180>
  90706f:	841b      	l32i.n	a4, a1, 44
  907071:	732003        	bnone	a2, a3, 907078 <db_str_cmd+0x84>
  907074:	600005        	j	90707d <db_str_cmd+0x89>
  907077:	00c033        	excw
				iowrite8(addr, val);
			else
				iowrite8(addr^3, val);
  90707a:	032203        	xor	a2, a2, a3
  90707d:	040447        	extui	a4, a4, 0, 8
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  907080:	0c0200        	memw
  907083:	242400        	s8i	a4, a2, 0
			//*(volatile unsigned char *)addr = (unsigned char)val;
		}

		db_hex_to_ascii(val, val_str);
  907086:	8a1b      	l32i.n	a10, a1, 44
  907088:	2b1c14        	addi	a11, a1, 20
  90708b:	5bff77        	call8	906e68 <db_hex_to_ascii>
		db_hex_to_ascii(addr, addr_str);
  90708e:	8a1a      	l32i.n	a10, a1, 40
  907090:	db10      	mov.n	a11, a1
  907092:	5bff75        	call8	906e68 <db_hex_to_ascii>

		A_PRINTF("%s : %s\n\r", addr_str, val_str);
  907095:	126913        	l32r	a2, 8e14e4 <_bss_end+0x3ce5d4>
  907098:	1a69a3        	l32r	a10, 8e1724 <athos_indirection_table_install+0x1b0>
  90709b:	222212        	l32i	a2, a2, 72
  90709e:	db10      	mov.n	a11, a1
  9070a0:	2c1c14        	addi	a12, a1, 20
  9070a3:	0b2000        	callx8	a2
		return 0;
  9070a6:	c020      	movi.n	a2, 0
  9070a8:	d10f      	retw.n
  9070aa:	000000        	ill
	}

	db_incorect_format();
  9070ad:	5bff45        	call8	906dc4 <db_incorect_format>
	return -1;
  9070b0:	c72f      	movi.n	a2, -1
}
  9070b2:	d10f      	retw.n

009070b4 <db_ldr_cmd>:
	}
	return i;
}

static int db_ldr_cmd(char *cmd, char *param1, char *param2, char *param3)
{
  9070b4:	6c100a        	entry	a1, 80
	unsigned long val;
	unsigned long addr;
	char val_str[20];
	char addr_str[20];

	if (db_ascii_to_hex(param1, &addr) != -1)
  9070b7:	033a02        	or	a10, a3, a3
  9070ba:	2b1c28        	addi	a11, a1, 40
  9070bd:	5bff50        	call8	906e00 <db_ascii_to_hex>
  9070c0:	d3a0      	mov.n	a3, a10
  9070c2:	68a06b        	beqi	a10, -1, 907131 <db_ldr_cmd+0x7d>
	{
		if( addr == 0 )
  9070c5:	831a      	l32i.n	a3, a1, 40
  9070c7:	cd31      	bnez.n	a3, 9070dc <db_ldr_cmd+0x28>
		{
			A_PRINTF("Error! bad address 0x%08x.\n\r",
  9070c9:	126913        	l32r	a2, 8e1518 <_bss_end+0x3ce608>
  9070cc:	1a69a4        	l32r	a10, 8e175c <athos_indirection_table_install+0x1e8>
  9070cf:	222212        	l32i	a2, a2, 72
  9070d2:	033b02        	or	a11, a3, a3
  9070d5:	0b2000        	callx8	a2
				 (unsigned long)addr);
			return -1;
  9070d8:	c72f      	movi.n	a2, -1
  9070da:	d10f      	retw.n
		}
		if (strcmp(cmd, "LDR") == 0)
  9070dc:	1b69a5        	l32r	a11, 8e1770 <athos_indirection_table_install+0x1fc>
  9070df:	da20      	mov.n	a10, a2
  9070e1:	5b7d1f        	call8	8e6560 <strcmp>
  9070e4:	ccad      	bnez.n	a10, 9070f5 <db_ldr_cmd+0x41>
		{
			addr &= 0xfffffffc;
  9070e6:	c72c      	movi.n	a2, -4
  9070e8:	023301        	and	a3, a3, a2
  9070eb:	931a      	s32i.n	a3, a1, 40
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  9070ed:	0c0200        	memw
  9070f0:	8430      	l32i.n	a4, a3, 0
  9070f2:	600017        	j	90710d <db_ldr_cmd+0x59>
			//val = *(unsigned long *)addr;

			val = ioread32(addr);
		}
		else if (strcmp(cmd, "LDRH") == 0)
  9070f5:	1b69a6        	l32r	a11, 8e1790 <athos_indirection_table_install+0x21c>
  9070f8:	022a02        	or	a10, a2, a2
  9070fb:	5b7d19        	call8	8e6560 <strcmp>
  9070fe:	ccab      	bnez.n	a10, 90710d <db_ldr_cmd+0x59>
		{
			addr &= 0xfffffffe;
  907100:	c72e      	movi.n	a2, -2
  907102:	023301        	and	a3, a3, a2
	return *(const volatile uint8_t *) addr;
}

static inline uint16_t ioread16(const volatile uint32_t addr)
{
	return *(const volatile uint16_t *) addr;
  907105:	243100        	l16ui	a4, a3, 0
  907108:	931a      	s32i.n	a3, a1, 40
  90710a:	04044f        	extui	a4, a4, 0, 16
		}
		else if (strcmp(cmd, "LDRB") == 0)
		{
		}

		db_hex_to_ascii(val, val_str);
  90710d:	2b1c14        	addi	a11, a1, 20
  907110:	da40      	mov.n	a10, a4
  907112:	5bff55        	call8	906e68 <db_hex_to_ascii>
		db_hex_to_ascii(addr, addr_str);
  907115:	8a1a      	l32i.n	a10, a1, 40
  907117:	db10      	mov.n	a11, a1
  907119:	5bff53        	call8	906e68 <db_hex_to_ascii>

		A_PRINTF("%s : %s\n\r", addr_str, val_str);
  90711c:	126913        	l32r	a2, 8e1568 <generic_hif_module_install+0x20>
  90711f:	1a69a3        	l32r	a10, 8e17ac <athos_indirection_table_install+0x238>
  907122:	222212        	l32i	a2, a2, 72
  907125:	db10      	mov.n	a11, a1
  907127:	2c1c14        	addi	a12, a1, 20
  90712a:	0b2000        	callx8	a2
		return 0;
  90712d:	c020      	movi.n	a2, 0
  90712f:	d10f      	retw.n
	}

	db_incorect_format();
  907131:	5bff24        	call8	906dc4 <db_incorect_format>
  907134:	63ffa0        	j	9070d8 <db_ldr_cmd+0x24>
	...

00907138 <db_intr_cmd>:
}

uint32_t delay = 0;

static int db_intr_cmd(char *cmd, char *param1, char *param2, char *param3)
{
  907138:	6c1006        	entry	a1, 48
#if SYSTEM_MODULE_INTR
	uint32_t pending_intrs;

	if(strcmp(param1, "read") == 0 )
  90713b:	1b69a7        	l32r	a11, 8e17d8 <athos_indirection_table_install+0x264>
  90713e:	033a02        	or	a10, a3, a3
  907141:	5b7d07        	call8	8e6560 <strcmp>
  907144:	65a024        	bnez	a10, 90716c <db_intr_cmd+0x34>
	{
		{
			/* Update snapshot of pending interrupts */

			pending_intrs = A_INTR_GET_INTRPENDING();
  907147:	146913        	l32r	a4, 8e1594 <athos_indirection_table_install+0x20>
  90714a:	2a424f        	l32i	a10, a4, 0x13c
  90714d:	0ba000        	callx8	a10
  907150:	d2a0      	mov.n	a2, a10

			A_PRINTF("intr mask [0x%08x]\n\r", xthal_get_intenable());
  907152:	234212        	l32i	a3, a4, 72
  907155:	5b7e0a        	call8	8e6980 <xthal_get_intenable>
  907158:	dba0      	mov.n	a11, a10
  90715a:	1a69a8        	l32r	a10, 8e17fc <athos_indirection_table_install+0x288>
  90715d:	0b3000        	callx8	a3
			A_PRINTF("intr on [0x%08x]\n\r", pending_intrs);
  907160:	1a69a9        	l32r	a10, 8e1804 <athos_indirection_table_install+0x290>
  907163:	234212        	l32i	a3, a4, 72
  907166:	db20      	mov.n	a11, a2
  907168:	600089        	j	9071f5 <db_intr_cmd+0xbd>
  90716b:	001b69        	excw
		}
	}
	else if (strcmp(param1, "timer") == 0 )
  90716e:	aada      	add.n	a10, a13, a10
  907170:	305b7c        	excw
  907173:	fb          	.byte 0xfb
  907174:	65a084        	bnez	a10, 9071fc <db_intr_cmd+0xc4>
	{
		uint32_t data = 0;

		if (strcmp(param2, "on") == 0 )
  907177:	1b69ab        	l32r	a11, 8e1824 <athos_indirection_table_install+0x2b0>
			A_PRINTF("intr on [0x%08x]\n\r", pending_intrs);
		}
	}
	else if (strcmp(param1, "timer") == 0 )
	{
		uint32_t data = 0;
  90717a:	9a10      	s32i.n	a10, a1, 0

		if (strcmp(param2, "on") == 0 )
  90717c:	da40      	mov.n	a10, a4
  90717e:	5b7cf8        	call8	8e6560 <strcmp>
  907181:	65a013        	bnez	a10, 907198 <db_intr_cmd+0x60>
		{
			/* TODO: this part is probably dead. */
			pending_intrs = A_INTR_GET_INTRENABLE()|CMNOS_IMASK_XTTIMER;
  907184:	146913        	l32r	a4, 8e15d0 <athos_indirection_table_install+0x5c>
  907187:	230a02        	movi	a3, 2
  90718a:	2a424d        	l32i	a10, a4, 0x134
  90718d:	0ba000        	callx8	a10
  907190:	03a302        	or	a3, a10, a3
  907193:	600019        	j	9071b0 <db_intr_cmd+0x78>
  907196:	00001b        	sra	a0, a0
			A_INTR_SET_INTRENABLE(pending_intrs);
			A_PRINTF("- intr [0x%08x]\n\r", pending_intrs);
		}
		else if ( strcmp(param2, "off") == 0 )
  907199:	69adda        	bnei	a10, 64, 907177 <db_intr_cmd+0x3f>
  90719c:	405b7c        	excw
  90719f:	f0          	.byte 0xf0
  9071a0:	cea5      	bnez.n	a10, 9071c9 <db_intr_cmd+0x91>
		{
			pending_intrs = A_INTR_GET_INTRENABLE()&(~CMNOS_IMASK_XTTIMER);
  9071a2:	146913        	l32r	a4, 8e15f0 <athos_indirection_table_install+0x7c>
  9071a5:	c73d      	movi.n	a3, -3
  9071a7:	2a424d        	l32i	a10, a4, 0x134
  9071aa:	0ba000        	callx8	a10
  9071ad:	03a301        	and	a3, a10, a3
			A_INTR_SET_INTRENABLE(pending_intrs);
  9071b0:	22424e        	l32i	a2, a4, 0x138
  9071b3:	033a02        	or	a10, a3, a3
  9071b6:	0b2000        	callx8	a2
			A_PRINTF("- intr [0x%08x]\n\r", pending_intrs);
  9071b9:	1a69ac        	l32r	a10, 8e186c <athos_indirection_table_install+0x2f8>
  9071bc:	244212        	l32i	a4, a4, 72
  9071bf:	db30      	mov.n	a11, a3
  9071c1:	0b4000        	callx8	a4
  9071c4:	600049        	j	907211 <db_intr_cmd+0xd9>
  9071c7:	0000da        	excw
            
		}
		else if( db_ascii_to_hex(param2, &data)==0 )
  9071ca:	40db10        	excw
  9071cd:	5bff0c        	call8	906e00 <db_ascii_to_hex>
  9071d0:	cfad      	bnez.n	a10, 907211 <db_intr_cmd+0xd9>
		{
			if( data>=0 && data <=10 )
  9071d2:	8410      	l32i.n	a4, a1, 0
  9071d4:	c02a      	movi.n	a2, 10
  9071d6:	1369ae        	l32r	a3, 8e1890 <athos_indirection_table_install+0x31c>
  9071d9:	742304        	bltu	a2, a4, 9071e1 <db_intr_cmd+0xa9>
				delay = data;
  9071dc:	9430      	s32i.n	a4, a3, 0
  9071de:	600004        	j	9071e6 <db_intr_cmd+0xae>
			else
				delay = 3;
  9071e1:	c023      	movi.n	a2, 3
  9071e3:	223600        	s32i	a2, a3, 0
            
			A_PRINTF("==>set cb to %d seconds \n\r", delay);
  9071e6:	126913        	l32r	a2, 8e1634 <athos_indirection_table_install+0xc0>
  9071e9:	1a69af        	l32r	a10, 8e18a8 <athos_indirection_table_install+0x334>
  9071ec:	232212        	l32i	a3, a2, 72
  9071ef:	1269ae        	l32r	a2, 8e18a8 <athos_indirection_table_install+0x334>
  9071f2:	2b2200        	l32i	a11, a2, 0
  9071f5:	0b3000        	callx8	a3
  9071f8:	600015        	j	907211 <db_intr_cmd+0xd9>
  9071fb:	001369        	excw
		}

	}
	else
	{
		A_PRINTF("\tintr read - read the interrenable status\n\r");
  9071fe:	131a69        	l32r	a3, 8cdba4 <_bss_end+0x3bac94>
  907201:	b022      	addi.n	a2, a2, -1
  907203:	32120b        	excw
  907206:	20001a        	l8ui	a0, a0, 26
		A_PRINTF("\tintr timer on/off/tick - timer attach on/off/ticks\n\r");
  907209:	69b122        	bnei	a11, 1, 90722f <db_wdt_cmd+0x17>
  90720c:	32120b        	excw
  90720f:	2000c0        	l8ui	a0, a0, 192

	}

#endif //#if SYSTEM_MODULE_INTR
	return 0;
}
  907212:	20d10f        	l16ui	a0, a13, 30
  907215:	000000        	ill

00907218 <db_wdt_cmd>:
    extern htc_handle_t htc_handle;
    HTC_Ready(htc_handle);
}

static int db_wdt_cmd(char *cmd, char *param1, char *param2, char *param3)
{
  907218:	6c1008        	entry	a1, 64
        if ( strcmp(param1, "rst") == 0 )
  90721b:	1b69b2        	l32r	a11, 8e18e4 <athos_indirection_table_install+0x370>
  90721e:	033a02        	or	a10, a3, a3
  907221:	5b7ccf        	call8	8e6560 <strcmp>
  907224:	cda1      	bnez.n	a10, 907239 <db_wdt_cmd+0x21>
        {
		A_PRINTF(" reseting...\n\n\r");
  907226:	136913        	l32r	a3, 8e1674 <athos_indirection_table_install+0x100>
  907229:	1a69b3        	l32r	a10, 8e18f8 <athos_indirection_table_install+0x384>
  90722c:	243212        	l32i	a4, a3, 72
  90722f:	0b4000        	callx8	a4
		A_WDT_RESET();
  907232:	22325d        	l32i	a2, a3, 0x174
  907235:	600010        	j	907249 <db_wdt_cmd+0x31>
  907238:	001b69        	excw
        }
        else if( strcmp(param1, "on") == 0 )
  90723b:	abda      	add.n	a10, a13, a11
  90723d:	305b7c        	excw
  907240:	c8cc      	beqz.n	a12, 907250 <db_wdt_cmd+0x38>
  907242:	ab12      	add.n	a2, a1, a11
        {
		A_WDT_ENABLE();
  907244:	691322        	bnei	a1, 3, 90726a <db_wdt_cmd+0x52>
  907247:	22590b        	l16si	a2, a5, 22
  90724a:	2000d1        	l8ui	a0, a0, 209
  90724d:	0f0000        	callx12	a0
        }
        else if (strcmp(param1, "off") == 0 )
  907250:	1b69ad        	l32r	a11, 8e1904 <athos_indirection_table_install+0x390>
  907253:	da30      	mov.n	a10, a3
  907255:	5b7cc2        	call8	8e6560 <strcmp>
  907258:	cca8      	bnez.n	a10, 907264 <db_wdt_cmd+0x4c>
        {
		A_WDT_DISABLE();
  90725a:	126913        	l32r	a2, 8e16a8 <athos_indirection_table_install+0x134>
  90725d:	22225a        	l32i	a2, a2, 0x168
  907260:	63ffe5        	j	907249 <db_wdt_cmd+0x31>
  907263:	001b69        	excw
        }
        else if ( strcmp(param1, "boot") == 0 )
  907266:	b4da      	addi.n	a10, a13, 4
  907268:	305b7c        	excw
  90726b:	bdce      	addi.n	a14, a12, 13
  90726d:	a413      	add.n	a3, a1, a4
        {
		A_PRINTF("Last BOOT is ");
  90726f:	69131a        	bnei	a1, 3, 90728d <db_wdt_cmd+0x75>
  907272:	69b524        	bnei	a11, 5, 90729a <db_wdt_cmd+0x82>
  907275:	32120b        	excw
  907278:	40002a        	excw
		if (ENUM_WDT_BOOT == A_WDT_LASTBOOT() )
  90727b:	325e0b        	excw
  90727e:	a000      	add.n	a0, a0, a0
			A_PRINTF("wdt");
  907280:	233212        	l32i	a3, a3, 72
		A_WDT_DISABLE();
        }
        else if ( strcmp(param1, "boot") == 0 )
        {
		A_PRINTF("Last BOOT is ");
		if (ENUM_WDT_BOOT == A_WDT_LASTBOOT() )
  907283:	69a105        	bnei	a10, 1, 90728c <db_wdt_cmd+0x74>
			A_PRINTF("wdt");
  907286:	1a69b6        	l32r	a10, 8e1960 <athos_indirection_table_install+0x3ec>
  907289:	600002        	j	90728f <db_wdt_cmd+0x77>
		else
			A_PRINTF("normal boot");
  90728c:	1a69b7        	l32r	a10, 8e1968 <athos_indirection_table_install+0x3f4>
  90728f:	0b3000        	callx8	a3
  907292:	d10f      	retw.n
        }
        else if (strcmp(param1, "loop") == 0 )
  907294:	1b69b8        	l32r	a11, 8e1974 <athos_indirection_table_install+0x400>
  907297:	da30      	mov.n	a10, a3
  907299:	5b7cb1        	call8	8e6560 <strcmp>
  90729c:	ceac      	bnez.n	a10, 9072cc <db_wdt_cmd+0xb4>
        {
		T_WDT_CMD wdt_cmd;
		uint32_t time_offset;
		A_PRINTF(" doing the wdt reseting...");
  90729e:	136913        	l32r	a3, 8e16ec <athos_indirection_table_install+0x178>
  9072a1:	1a69b9        	l32r	a10, 8e1988 <athos_indirection_table_install+0x414>
  9072a4:	253212        	l32i	a5, a3, 72
  9072a7:	0b5000        	callx8	a5

		if( db_ascii_to_hex(param2, &time_offset)!=0 )
  9072aa:	da40      	mov.n	a10, a4
  9072ac:	2b1c10        	addi	a11, a1, 16
  9072af:	5bfed4        	call8	906e00 <db_ascii_to_hex>
		{
			if( time_offset < 0 || time_offset >0xffffffff )
				time_offset = 0xffffff;
		}
		A_PRINTF(" (wdt tick: 0x%08x...\n\n\r", time_offset);
  9072b2:	2b1204        	l32i	a11, a1, 16
  9072b5:	243212        	l32i	a4, a3, 72
  9072b8:	1a69ba        	l32r	a10, 8e19a0 <athos_indirection_table_install+0x42c>
  9072bb:	0b4000        	callx8	a4
		wdt_cmd.cmd = WDT_TIMEOUT;
		wdt_cmd.timeout = time_offset;

		A_WDT_SET(wdt_cmd);
  9072be:	8b14      	l32i.n	a11, a1, 16
  9072c0:	23325b        	l32i	a3, a3, 0x16c
  9072c3:	c0a1      	movi.n	a10, 1
  9072c5:	0b3000        	callx8	a3
  9072c8:	63fffc        	j	9072c8 <db_wdt_cmd+0xb0>
  9072cb:	001b69        	excw
		while(1) ;
        }
        else if (strcmp(param1, "noloop") == 0 )
  9072ce:	bbda      	addi.n	a10, a13, 11
  9072d0:	305b7c        	excw
  9072d3:	a3ce      	add.n	a14, a12, a3
  9072d5:	ad13      	add.n	a3, a1, a13
        {
		T_WDT_CMD wdt_cmd;
		uint32_t time_offset;
		A_PRINTF(" doing the wdt reseting...");
  9072d7:	69131a        	bnei	a1, 3, 9072f5 <db_wdt_cmd+0xdd>
  9072da:	69b924        	bnei	a11, 10, 907302 <db_wdt_cmd+0xea>
  9072dd:	32120b        	excw
  9072e0:	40002b        	excw

		if( db_ascii_to_hex(param3, &time_offset)!=0 )
  9072e3:	1c10da        	l32r	a12, 8cb64c <_bss_end+0x3b873c>
  9072e6:	505bfe        	call0	91e2e0 <_etext+0xf1f3>
  9072e9:	c62b      	movi.n	a2, -21
		{
			if( time_offset < 0 || time_offset >0xffffffff )
				time_offset = 0xffffff;
		}
		A_PRINTF(" (wdt tick: 0x%08x...\n\n\r", time_offset);
  9072eb:	120424        	l32r	a2, 8c837c <_bss_end+0x3b546c>
  9072ee:	32121a        	excw
  9072f1:	69ba0b        	bnei	a11, 12, 907300 <db_wdt_cmd+0xe8>
  9072f4:	40008b        	excw

		wdt_cmd.cmd = WDT_TIMEOUT;
		wdt_cmd.timeout = time_offset;

		A_WDT_SET(wdt_cmd);
  9072f7:	142332        	l32r	a4, 8cffc0 <_bss_end+0x3bd0b0>
  9072fa:	5bc0a1        	call8	8f7580 <memset+0x10738>
  9072fd:	0b3000        	callx8	a3
  907300:	d10f      	retw.n
  907302:	000000        	ill
        }
        else if( strcmp(param1, "event") == 0 )
  907305:	1b69bc        	l32r	a11, 8e19f8 <athos_indirection_table_install+0x484>
  907308:	da30      	mov.n	a10, a3
  90730a:	5b7c95        	call8	8e6560 <strcmp>
  90730d:	65a04f        	bnez	a10, 907360 <db_wdt_cmd+0x148>

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  907310:	13695a        	l32r	a3, 8e1878 <athos_indirection_table_install+0x304>
        {
		uint32_t event= 0x00123400;

		/* disable ep3 intr */
		iowrite8_usb(0x17, ioread8_usb(0x17)|0xc0);
  907313:	240ac0        	movi	a4, 192
  907316:	223000        	l8ui	a2, a3, 0
  907319:	18695d        	l32r	a8, 8e1890 <athos_indirection_table_install+0x31c>
  90731c:	020247        	extui	a2, a2, 0, 8
  90731f:	042202        	or	a2, a2, a4
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  907322:	0c0200        	memw
  907325:	223400        	s8i	a2, a3, 0
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  907328:	12693a        	l32r	a2, 8e1810 <athos_indirection_table_install+0x29c>
  90732b:	c04f      	movi.n	a4, 15
  90732d:	0c0200        	memw
  907330:	9420      	s32i.n	a4, a2, 0
  907332:	1469bd        	l32r	a4, 8e1a28 <athos_indirection_table_install+0x4b4>
  907335:	12695b        	l32r	a2, 8e18a4 <athos_indirection_table_install+0x330>
  907338:	0c0200        	memw
  90733b:	9420      	s32i.n	a4, a2, 0

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  90733d:	228000        	l8ui	a2, a8, 0

		/* ZM_EP3_DATA_REG = event; */
		iowrite32_usb(0xF8, event);

		/* tx done */
		iowrite8_usb(0xAE, ioread8_usb(0xAE) | 0x08);
  907340:	c048      	movi.n	a4, 8
  907342:	020247        	extui	a2, a2, 0, 8
  907345:	042202        	or	a2, a2, a4
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  907348:	0c0200        	memw
  90734b:	228400        	s8i	a2, a8, 0

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  90734e:	223000        	l8ui	a2, a3, 0

		/* enable ep3 intr */
		iowrite8_usb(0x17, ioread8_usb(0x17) & 0xbf);
  907351:	24fabf        	movi	a4, -65
  907354:	020247        	extui	a2, a2, 0, 8
  907357:	042201        	and	a2, a2, a4
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  90735a:	0c0200        	memw
  90735d:	223400        	s8i	a2, a3, 0
        }
}
  907360:	d10f      	retw.n
	...

00907364 <db_usb_cmd>:
#endif //#if SYSTEM_MODULE_INTR
	return 0;
}

static int db_usb_cmd(char *cmd, char *param1, char *param2, char *param3)
{
  907364:	6c1004        	entry	a1, 32
	A_PRINTF("THIS IS USB COMMAND\n\r");
  907367:	126913        	l32r	a2, 8e17b4 <athos_indirection_table_install+0x240>
  90736a:	1a69be        	l32r	a10, 8e1a64 <athos_indirection_table_install+0x4f0>
  90736d:	282212        	l32i	a8, a2, 72
  907370:	0b8000        	callx8	a8

	if( strcmp(param1, "que") == 0 )
  907373:	1b69bf        	l32r	a11, 8e1a70 <athos_indirection_table_install+0x4fc>
  907376:	033a02        	or	a10, a3, a3
  907379:	5b7c79        	call8	8e6560 <strcmp>
  90737c:	cca4      	bnez.n	a10, 907384 <db_usb_cmd+0x20>
	{
		HIFusb_DescTraceDump();
  90737e:	5b711a        	call8	8e37e8 <HIFusb_DescTraceDump>
  907381:	600011        	j	907396 <db_usb_cmd+0x32>
	}
	else
	{
		A_PRINTF("\tusb que - dump descriptor queue\n\r");
  907384:	282212        	l32i	a8, a2, 72
  907387:	1a69c0        	l32r	a10, 8e1a88 <athos_indirection_table_install+0x514>
  90738a:	0b8000        	callx8	a8
		A_PRINTF("\tusb fw on/off - enable/disable write fw download to ram\n\r");
  90738d:	1a69c1        	l32r	a10, 8e1a94 <athos_indirection_table_install+0x520>
  907390:	222212        	l32i	a2, a2, 72
  907393:	0b2000        	callx8	a2

	}
	return 0;
}
  907396:	c020      	movi.n	a2, 0
  907398:	d10f      	retw.n
	...

0090739c <db_info_cmd>:
		clk_change(clk, ratio, baud);
	}
}

static int db_info_cmd(char *cmd, char *param1, char *param2, char *param3)
{
  90739c:	6c1004        	entry	a1, 32
#if 1

	if(strcmp(param1, "ram") == 0 )
  90739f:	1b69c2        	l32r	a11, 8e1aa8 <athos_indirection_table_install+0x534>
  9073a2:	033a02        	or	a10, a3, a3
  9073a5:	5b7c6e        	call8	8e6560 <strcmp>
  9073a8:	65a00d        	bnez	a10, 9073b9 <db_info_cmd+0x1d>
	{
		A_ALLOCRAM_DEBUG();
  9073ab:	186913        	l32r	a8, 8e17f8 <athos_indirection_table_install+0x284>
  9073ae:	288253        	l32i	a8, a8, 0x14c
  9073b1:	0b8000        	callx8	a8
  9073b4:	600004        	j	9073bc <db_info_cmd+0x20>
  9073b7:	00005b        	extui	a0, a0, 16, 12
	* is dead too */
	else if(strcmp(param1, "cpu") == 0)
		zfPrintCpuUtilization();
#endif
	else   // defalut dump
		HIFusb_DescTraceDump();
  9073ba:	710bc0        	bgeu	a0, a1, 90737e <db_usb_cmd+0x1a>
		A_PRINTF("read 0x%08x (0x%08x) use %d clocks\n\r", data3, data, ccount2-ccount1);

	}
#endif
	return 1;
}
  9073bd:	21d10f        	l16ui	a1, a13, 30

009073c0 <zf_debug_task>:
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
{
  9073c0:	6c1006        	entry	a1, 48
	int i;
	uint8_t ch;

	if ((zm_get_char(&ch)) == 0)
  9073c3:	136913        	l32r	a3, 8e1810 <athos_indirection_table_install+0x29c>
  9073c6:	da10      	mov.n	a10, a1
  9073c8:	223215        	l32i	a2, a3, 84
  9073cb:	0b2000        	callx8	a2
  9073ce:	64a250        	beqz	a10, 907622 <zf_debug_task+0x262>
	{
		return;
	}

	if (db_get_cmd_line(ch, raw_cmd, &gvLen) == 0)
  9073d1:	2b1000        	l8ui	a11, a1, 0

static uint16_t db_get_cmd_line(uint8_t ch, char *cmd_line, uint16_t *i)
{
	int cmd_buf_loc;

	switch (ch)
  9073d4:	69b802        	bnei	a11, 8, 9073da <zf_debug_task+0x1a>
  9073d7:	6000f6        	j	9074d1 <zf_debug_task+0x111>
  9073da:	c028      	movi.n	a2, 8
  9073dc:	7b2306        	bltu	a2, a11, 9073e6 <zf_debug_task+0x26>
  9073df:	64b23f        	beqz	a11, 907622 <zf_debug_task+0x262>
  9073e2:	60010a        	j	9074f0 <zf_debug_task+0x130>
  9073e5:	00c02d        	excw
  9073e8:	72b179        	beq	a11, a2, 907465 <zf_debug_task+0xa5>
  9073eb:	c52c      	movi.n	a2, 92
  9073ed:	72b102        	beq	a11, a2, 9073f3 <zf_debug_task+0x33>
  9073f0:	6000fc        	j	9074f0 <zf_debug_task+0x130>
	{
	case '\\' : /* Last command */
		pressed_time++;
  9073f3:	126991        	l32r	a2, 8e1a38 <athos_indirection_table_install+0x4c4>
  9073f6:	8320      	l32i.n	a3, a2, 0
  9073f8:	b133      	addi.n	a3, a3, 1
		if (pressed_time >= COMMAND_BUFFER_SIZE)
  9073fa:	6b3602        	bgei	a3, 6, 907400 <zf_debug_task+0x40>
	int cmd_buf_loc;

	switch (ch)
	{
	case '\\' : /* Last command */
		pressed_time++;
  9073fd:	232600        	s32i	a3, a2, 0
		if (pressed_time >= COMMAND_BUFFER_SIZE)
		{
			pressed_time--;
		}
		cmd_buf_loc = cmd_buf_ptr - pressed_time;
  907400:	13698e        	l32r	a3, 8e1a38 <athos_indirection_table_install+0x4c4>
  907403:	8220      	l32i.n	a2, a2, 0
  907405:	8a30      	l32i.n	a10, a3, 0
  907407:	02aa0c        	sub	a10, a10, a2
		if (cmd_buf_loc < 0)
  90740a:	67a00e        	bgez	a10, 90741c <zf_debug_task+0x5c>
		{
			if (cmd_buf_full == TRUE)
  90740d:	12698f        	l32r	a2, 8e1a4c <athos_indirection_table_install+0x4d8>
  907410:	8320      	l32i.n	a3, a2, 0
			{
				cmd_buf_loc += COMMAND_BUFFER_SIZE;
  907412:	b6a2      	addi.n	a2, a10, 6
  907414:	b033      	addi.n	a3, a3, -1
  907416:	2a0a00        	movi	a10, 0
  907419:	032a38        	moveqz	a10, a2, a3
			{
				cmd_buf_loc = 0;
			}
		}

		if (A_STRLEN(cmd_buffer[cmd_buf_loc]) != 0)
  90741c:	1269c3        	l32r	a2, 8e1b28 <athos_indirection_table_install+0x5b4>
  90741f:	0aaa0a        	addx4	a10, a10, a10
  907422:	02a30b        	addx8	a3, a10, a2
  907425:	126913        	l32r	a2, 8e1874 <athos_indirection_table_install+0x300>
  907428:	033a02        	or	a10, a3, a3
  90742b:	242266        	l32i	a4, a2, 0x198
  90742e:	0b4000        	callx8	a4
  907431:	64a1ed        	beqz	a10, 907622 <zf_debug_task+0x262>
		{
			A_STRCPY(cmd_line, cmd_buffer[cmd_buf_loc]);
  907434:	1469c4        	l32r	a4, 8e1b44 <athos_indirection_table_install+0x5d0>
  907437:	252264        	l32i	a5, a2, 0x190
  90743a:	db30      	mov.n	a11, a3
  90743c:	da40      	mov.n	a10, a4
  90743e:	0b5000        	callx8	a5
			*i = A_STRLEN(cmd_buffer[cmd_buf_loc]);
  907441:	252266        	l32i	a5, a2, 0x198
  907444:	da30      	mov.n	a10, a3
  907446:	0b5000        	callx8	a5
  907449:	136990        	l32r	a3, 8e1a8c <athos_indirection_table_install+0x518>
  90744c:	2a3500        	s16i	a10, a3, 0
			A_PRINTF("\r>");
  90744f:	232212        	l32i	a3, a2, 72
  907452:	1a69c5        	l32r	a10, 8e1b68 <athos_indirection_table_install+0x5f4>
  907455:	0b3000        	callx8	a3
			A_PRINTF("%s", cmd_line);
  907458:	1a69c6        	l32r	a10, 8e1b70 <athos_indirection_table_install+0x5fc>
  90745b:	222212        	l32i	a2, a2, 72
  90745e:	db40      	mov.n	a11, a4
  907460:	6000d1        	j	907535 <zf_debug_task+0x175>
  907463:	000012        	srai	a0, a0, 0
		}
		break;
	case 13 : /* Return */
		pressed_time = 0;
  907466:	6991c0        	bnei	a9, 1, 90742a <zf_debug_task+0x6a>
  907469:	509520        	call0	92c8ec <_etext+0x1d7ff>
		cmd_line[*i] = 0;
  90746c:	126990        	l32r	a2, 8e1aac <athos_indirection_table_install+0x538>
  90746f:	1469c4        	l32r	a4, 8e1b80 <athos_indirection_table_install+0x60c>
  907472:	262100        	l16ui	a6, a2, 0
		A_PRINTF("\n\r");
  907475:	1a699e        	l32r	a10, 8e1af0 <athos_indirection_table_install+0x57c>
			A_PRINTF("%s", cmd_line);
		}
		break;
	case 13 : /* Return */
		pressed_time = 0;
		cmd_line[*i] = 0;
  907478:	064608        	add	a6, a4, a6
  90747b:	256400        	s8i	a5, a6, 0
		A_PRINTF("\n\r");
  90747e:	253212        	l32i	a5, a3, 72
  907481:	0b5000        	callx8	a5
		if (*i != 0)
  907484:	222100        	l16ui	a2, a2, 0
  907487:	ca2d      	beqz.n	a2, 9074b8 <zf_debug_task+0xf8>
		{
			//Filter duplicated string in command history
			if (strcmp(cmd_buffer[(cmd_buf_ptr==0)?(COMMAND_BUFFER_SIZE-1):(cmd_buf_ptr-1)], cmd_line) != 0)
  907489:	16698e        	l32r	a6, 8e1ac4 <athos_indirection_table_install+0x550>
  90748c:	c0a5      	movi.n	a10, 5
  90748e:	8260      	l32i.n	a2, a6, 0
  907490:	db40      	mov.n	a11, a4
  907492:	252cff        	addi	a5, a2, -1
  907495:	025a39        	movnez	a10, a5, a2
  907498:	1569c3        	l32r	a5, 8e1ba4 <athos_indirection_table_install+0x630>
  90749b:	0aaa0a        	addx4	a10, a10, a10
  90749e:	05aa0b        	addx8	a10, a10, a5
  9074a1:	5b7c2f        	call8	8e6560 <strcmp>
  9074a4:	c9a0      	beqz.n	a10, 9074b8 <zf_debug_task+0xf8>
			{
				A_STRCPY(cmd_buffer[cmd_buf_ptr++], cmd_line);
  9074a6:	b127      	addi.n	a7, a2, 1
  9074a8:	022a0a        	addx4	a10, a2, a2
  9074ab:	233264        	l32i	a3, a3, 0x190
  9074ae:	9760      	s32i.n	a7, a6, 0
  9074b0:	05aa0b        	addx8	a10, a10, a5
  9074b3:	db40      	mov.n	a11, a4
  9074b5:	0b3000        	callx8	a3
			}
		}
		if (cmd_buf_ptr >= COMMAND_BUFFER_SIZE)
  9074b8:	12698e        	l32r	a2, 8e1af0 <athos_indirection_table_install+0x57c>
  9074bb:	8320      	l32i.n	a3, a2, 0
  9074bd:	6b3602        	bgei	a3, 6, 9074c3 <zf_debug_task+0x103>
  9074c0:	600148        	j	90760c <zf_debug_task+0x24c>
		{
			cmd_buf_ptr = 0;
  9074c3:	c030      	movi.n	a3, 0
  9074c5:	9320      	s32i.n	a3, a2, 0
			cmd_buf_full = TRUE;
  9074c7:	12698f        	l32r	a2, 8e1b04 <athos_indirection_table_install+0x590>
  9074ca:	c031      	movi.n	a3, 1
  9074cc:	9320      	s32i.n	a3, a2, 0
  9074ce:	60013a        	j	90760c <zf_debug_task+0x24c>
		}
		return 1;
	case '\b' : /* Backspace */
		pressed_time = 0;
  9074d1:	126991        	l32r	a2, 8e1b18 <athos_indirection_table_install+0x5a4>
  9074d4:	c040      	movi.n	a4, 0
  9074d6:	9420      	s32i.n	a4, a2, 0
		if (*i > 0)
  9074d8:	126990        	l32r	a2, 8e1b18 <athos_indirection_table_install+0x5a4>
  9074db:	242100        	l16ui	a4, a2, 0
  9074de:	644140        	beqz	a4, 907622 <zf_debug_task+0x262>
		{
			*i = *i-1;
  9074e1:	b044      	addi.n	a4, a4, -1
  9074e3:	242500        	s16i	a4, a2, 0
			A_PRINTF("\b \b");
  9074e6:	1a69c7        	l32r	a10, 8e1c04 <athos_indirection_table_install+0x690>
  9074e9:	223212        	l32i	a2, a3, 72
  9074ec:	600115        	j	907605 <zf_debug_task+0x245>
  9074ef:	0022bc        	excw
		}
		break;
	case 0 : //None
		break;
	default :
		if ((ch >= ' ') && (ch <= '~'))
  9074f2:	e0          	.byte 0xe0
  9074f3:	020247        	extui	a2, a2, 0, 8
  9074f6:	c53e      	movi.n	a3, 94
  9074f8:	72332d        	bltu	a3, a2, 907529 <zf_debug_task+0x169>
		{
			pressed_time = 0;
  9074fb:	126991        	l32r	a2, 8e1b40 <athos_indirection_table_install+0x5cc>
  9074fe:	c030      	movi.n	a3, 0
  907500:	9320      	s32i.n	a3, a2, 0
			if (*i < DB_MAX_COMMAND_LENGTH-2)
  907502:	136990        	l32r	a3, 8e1b44 <athos_indirection_table_install+0x5d0>
  907505:	c245      	movi.n	a4, 37
  907507:	223100        	l16ui	a2, a3, 0
  90750a:	724b02        	bgeu	a4, a2, 907510 <zf_debug_task+0x150>
  90750d:	600111        	j	907622 <zf_debug_task+0x262>
				{
					//if ((buf <= 'z') && (buf >= 'a'))
					//{
					//    buf -= 'a' - 'A';
					//}
					cmd_line[*i] = ch;
  907510:	1469c4        	l32r	a4, 8e1c20 <athos_indirection_table_install+0x6ac>
					*i = *i + 1;
					A_PRINTF("%c", ch);
  907513:	1a699c        	l32r	a10, 8e1b84 <athos_indirection_table_install+0x610>
				{
					//if ((buf <= 'z') && (buf >= 'a'))
					//{
					//    buf -= 'a' - 'A';
					//}
					cmd_line[*i] = ch;
  907516:	a244      	add.n	a4, a4, a2
					*i = *i + 1;
  907518:	b122      	addi.n	a2, a2, 1
  90751a:	223500        	s16i	a2, a3, 0
					A_PRINTF("%c", ch);
  90751d:	126913        	l32r	a2, 8e196c <athos_indirection_table_install+0x3f8>
				{
					//if ((buf <= 'z') && (buf >= 'a'))
					//{
					//    buf -= 'a' - 'A';
					//}
					cmd_line[*i] = ch;
  907520:	2b4400        	s8i	a11, a4, 0
					*i = *i + 1;
					A_PRINTF("%c", ch);
  907523:	222212        	l32i	a2, a2, 72
  907526:	60000b        	j	907535 <zf_debug_task+0x175>
			}
		}
		else
		{
			ch = 7; /* Beep */
			A_PRINTF("%c", ch);
  907529:	126913        	l32r	a2, 8e1978 <athos_indirection_table_install+0x404>
  90752c:	1a699c        	l32r	a10, 8e1b9c <athos_indirection_table_install+0x628>
  90752f:	222212        	l32i	a2, a2, 72
  907532:	2b0a07        	movi	a11, 7
  907535:	0b2000        	callx8	a2
  907538:	d10f      	retw.n
  90753a:	000012        	srai	a0, a0, 0
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  90753d:	69c4c0        	bnei	a12, 4, 907501 <zf_debug_task+0x141>
  907540:	b1a2      	addi.n	a2, a10, 1
  907542:	c922      	beqz.n	a2, 907558 <zf_debug_task+0x198>


	for (k=0; k<4; k++)
	{
		/* Remove preceeding spaces */
		while (raw_str[i++] == ' '){}
  907544:	9000      	s32i.n	a0, a0, 0
  907546:	b1cc      	addi.n	a12, a12, 1
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  907548:	a8a7      	add.n	a7, a10, a8


	for (k=0; k<4; k++)
	{
		/* Remove preceeding spaces */
		while (raw_str[i++] == ' '){}
  90754a:	692c2b        	bnei	a2, 32, 907579 <zf_debug_task+0x1b9>
  90754d:	63ffeb        	j	90753c <zf_debug_task+0x17c>

		/* Copy command string */
		j = 0;
		while(raw_str[i] && (raw_str[i] != ' '))
		{
			if (k == 0)
  907550:	cdea      	bnez.n	a14, 90756e <zf_debug_task+0x1ae>
			{
				if ((raw_str[i] <= 'z') && (raw_str[i] >= 'a'))
  907552:	22dc9f        	addi	a2, a13, -97
  907555:	020247        	extui	a2, a2, 0, 8
  907558:	723305        	bltu	a3, a2, 907561 <zf_debug_task+0x1a1>
				{
					raw_str[i] -= 'a' - 'A';
  90755b:	2ddce0        	addi	a13, a13, -32
  90755e:	2d9400        	s8i	a13, a9, 0
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  907561:	afb2      	add.n	a2, a11, a15
			{
				if ((raw_str[i] <= 'z') && (raw_str[i] >= 'a'))
				{
					raw_str[i] -= 'a' - 'A';
				}
				cmd_str[k*DB_MAX_COMMAND_LENGTH + j++] = raw_str[i++];
  907563:	269000        	l8ui	a6, a9, 0
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  907566:	b022      	addi.n	a2, a2, -1
			{
				if ((raw_str[i] <= 'z') && (raw_str[i] >= 'a'))
				{
					raw_str[i] -= 'a' - 'A';
				}
				cmd_str[k*DB_MAX_COMMAND_LENGTH + j++] = raw_str[i++];
  907568:	262400        	s8i	a6, a2, 0
  90756b:	600006        	j	907575 <zf_debug_task+0x1b5>
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  90756e:	ab72      	add.n	a2, a7, a11
  907570:	b022      	addi.n	a2, a2, -1
				}
				cmd_str[k*DB_MAX_COMMAND_LENGTH + j++] = raw_str[i++];
			}
			else
			{
				cmd_str[k*DB_MAX_COMMAND_LENGTH + j++] = raw_str[i++];
  907572:	2d2400        	s8i	a13, a2, 0
  907575:	b199      	addi.n	a9, a9, 1
  907577:	b1bb      	addi.n	a11, a11, 1
		while (raw_str[i++] == ' '){}
		i--;

		/* Copy command string */
		j = 0;
		while(raw_str[i] && (raw_str[i] != ' '))
  907579:	2d9000        	l8ui	a13, a9, 0
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  90757c:	059c0c        	sub	a12, a9, a5
		while (raw_str[i++] == ' '){}
		i--;

		/* Copy command string */
		j = 0;
		while(raw_str[i] && (raw_str[i] != ' '))
  90757f:	04d201        	and	a2, a13, a4
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  907582:	b0b6      	addi.n	a6, a11, -1
		while (raw_str[i++] == ' '){}
		i--;

		/* Copy command string */
		j = 0;
		while(raw_str[i] && (raw_str[i] != ' '))
  907584:	652fc8        	bnez	a2, 907550 <zf_debug_task+0x190>
			else
			{
				cmd_str[k*DB_MAX_COMMAND_LENGTH + j++] = raw_str[i++];
			}
		}
		cmd_str[k*DB_MAX_COMMAND_LENGTH + j] = 0;
  907587:	a8a7      	add.n	a7, a10, a8
  907589:	067608        	add	a6, a7, a6
  90758c:	226400        	s8i	a2, a6, 0
  90758f:	288c28        	addi	a8, a8, 40
	int i = 0;
	int j;
	int k;


	for (k=0; k<4; k++)
  907592:	260aa0        	movi	a6, 160
  907595:	2eec01        	addi	a14, a14, 1
  907598:	7689a0        	bne	a8, a6, 90753c <zf_debug_task+0x17c>
				cmd_str[k*DB_MAX_COMMAND_LENGTH + j++] = raw_str[i++];
			}
		}
		cmd_str[k*DB_MAX_COMMAND_LENGTH + j] = 0;
	}
	return (int)A_STRLEN(cmd_str);
  90759b:	136913        	l32r	a3, 8e19e8 <athos_indirection_table_install+0x474>
  90759e:	233266        	l32i	a3, a3, 0x198
  9075a1:	0b3000        	callx8	a3
	if (db_get_cmd_line(ch, raw_cmd, &gvLen) == 0)
	{
		return;
	}

	if (db_formalize_command(raw_cmd, cmd_str))
  9075a4:	64a054        	beqz	a10, 9075fc <zf_debug_task+0x23c>
	{
		gvLen = 0;
  9075a7:	136990        	l32r	a3, 8e1be8 <athos_indirection_table_install+0x674>
  9075aa:	223500        	s16i	a2, a3, 0
		i = 0;

		cmd_not_found = TRUE;
  9075ad:	1269c9        	l32r	a2, 8e1cd4 <athos_indirection_table_install+0x760>
  9075b0:	c031      	movi.n	a3, 1
  9075b2:	9320      	s32i.n	a3, a2, 0
  9075b4:	126995        	l32r	a2, 8e1c08 <athos_indirection_table_install+0x694>
		while(command_table[i].cmd_func)
		{
			if (!strcmp(command_table[i].cmd_str, cmd_str))
  9075b7:	1369c8        	l32r	a3, 8e1cd8 <athos_indirection_table_install+0x764>
  9075ba:	600026        	j	9075e4 <zf_debug_task+0x224>
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  9075bd:	252cf8        	addi	a5, a2, -8
		i = 0;

		cmd_not_found = TRUE;
		while(command_table[i].cmd_func)
		{
			if (!strcmp(command_table[i].cmd_str, cmd_str))
  9075c0:	8a50      	l32i.n	a10, a5, 0
  9075c2:	033b02        	or	a11, a3, a3
  9075c5:	5b7be6        	call8	8e6560 <strcmp>
  9075c8:	bc22      	addi.n	a2, a2, 12
  9075ca:	cda6      	bnez.n	a10, 9075e4 <zf_debug_task+0x224>
			{
				cmd_not_found = FALSE;
  9075cc:	1269c9        	l32r	a2, 8e1cf0 <athos_indirection_table_install+0x77c>
				command_table[i].cmd_func(cmd_str,
  9075cf:	1b69ca        	l32r	a11, 8e1cf8 <athos_indirection_table_install+0x784>
  9075d2:	1c69cb        	l32r	a12, 8e1d00 <athos_indirection_table_install+0x78c>
  9075d5:	1d69cc        	l32r	a13, 8e1d08 <athos_indirection_table_install+0x794>
		cmd_not_found = TRUE;
		while(command_table[i].cmd_func)
		{
			if (!strcmp(command_table[i].cmd_str, cmd_str))
			{
				cmd_not_found = FALSE;
  9075d8:	9a20      	s32i.n	a10, a2, 0
				command_table[i].cmd_func(cmd_str,
  9075da:	033a02        	or	a10, a3, a3
  9075dd:	0b4000        	callx8	a4
  9075e0:	600005        	j	9075e9 <zf_debug_task+0x229>
  9075e3:	008420        	excw
	{
		gvLen = 0;
		i = 0;

		cmd_not_found = TRUE;
		while(command_table[i].cmd_func)
  9075e6:	654fd3        	bnez	a4, 9075bd <zf_debug_task+0x1fd>
							  cmd_str+DB_MAX_COMMAND_LENGTH*3);
				break;
			}
			i++;
		}
		if (cmd_not_found)
  9075e9:	1269c9        	l32r	a2, 8e1d10 <athos_indirection_table_install+0x79c>
  9075ec:	8220      	l32i.n	a2, a2, 0
  9075ee:	c82a      	beqz.n	a2, 9075fc <zf_debug_task+0x23c>
		{
			A_PRINTF("Error, HELP for command list.\n\r");
  9075f0:	126913        	l32r	a2, 8e1a3c <athos_indirection_table_install+0x4c8>
  9075f3:	1a69cd        	l32r	a10, 8e1d28 <athos_indirection_table_install+0x7b4>
  9075f6:	222212        	l32i	a2, a2, 72
  9075f9:	0b2000        	callx8	a2
		}

	}

	A_PRINTF(">");
  9075fc:	126913        	l32r	a2, 8e1a48 <athos_indirection_table_install+0x4d4>
  9075ff:	1a69ce        	l32r	a10, 8e1d38 <athos_indirection_table_install+0x7c4>
  907602:	222212        	l32i	a2, a2, 72
  907605:	0b2000        	callx8	a2
  907608:	d10f      	retw.n
  90760a:	00001a        	sll	a0, a0
  90760d:	69c8c0        	bnei	a12, 8, 9075d1 <zf_debug_task+0x211>
		cmd_line[*i] = 0;
		A_PRINTF("\n\r");
		if (*i != 0)
		{
			//Filter duplicated string in command history
			if (strcmp(cmd_buffer[(cmd_buf_ptr==0)?(COMMAND_BUFFER_SIZE-1):(cmd_buf_ptr-1)], cmd_line) != 0)
  907610:	80dc      	l32i.n	a0, a13, 48
  907612:	80de      	l32i.n	a0, a13, 56
  907614:	8015      	l32i.n	a0, a1, 20
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  907616:	69c424        	bnei	a12, 4, 90763e <db_ascii_to_int+0x1a>
		while (raw_str[i++] == ' '){}
		i--;

		/* Copy command string */
		j = 0;
		while(raw_str[i] && (raw_str[i] != ' '))
  907619:	fa          	.byte 0xfa
  90761a:	dfc1      	excw
		{
			if (k == 0)
			{
				if ((raw_str[i] <= 'z') && (raw_str[i] >= 'a'))
  90761c:	39dfa0        	excw
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  90761f:	63ff19        	j	90753c <zf_debug_task+0x17c>
  907622:	d10f      	retw.n

00907624 <db_ascii_to_int>:
	}
	return 0;
}

int db_ascii_to_int(char *num_str, unsigned long *int_num)
{
  907624:	6c1004        	entry	a1, 32
	int i = 0;

	*int_num = 0;
  907627:	c080      	movi.n	a8, 0
  907629:	9830      	s32i.n	a8, a3, 0
	while (num_str[i])
	{
		if ((num_str[i] >= '0') && (num_str[i] <= '9'))
  90762b:	c099      	movi.n	a9, 9
int db_ascii_to_int(char *num_str, unsigned long *int_num)
{
	int i = 0;

	*int_num = 0;
	while (num_str[i])
  90762d:	60001e        	j	90764f <db_ascii_to_int+0x2b>
	{
		if ((num_str[i] >= '0') && (num_str[i] <= '9'))
  907630:	288cd0        	addi	a8, a8, -48
  907633:	080847        	extui	a8, a8, 0, 8
  907636:	78931f        	bltu	a9, a8, 907659 <db_ascii_to_int+0x35>
		{
			*int_num *= 10;
  907639:	8830      	l32i.n	a8, a3, 0
  90763b:	08880a        	addx4	a8, a8, a8
  90763e:	0f8811        	slli	a8, a8, 1
  907641:	9830      	s32i.n	a8, a3, 0
			*int_num += (num_str[i] - '0');
  907643:	2a2000        	l8ui	a10, a2, 0
  907646:	288cd0        	addi	a8, a8, -48
  907649:	aa88      	add.n	a8, a8, a10
  90764b:	9830      	s32i.n	a8, a3, 0
  90764d:	b122      	addi.n	a2, a2, 1
int db_ascii_to_int(char *num_str, unsigned long *int_num)
{
	int i = 0;

	*int_num = 0;
	while (num_str[i])
  90764f:	282000        	l8ui	a8, a2, 0
  907652:	658fda        	bnez	a8, 907630 <db_ascii_to_int+0xc>
		{
			return -1;
		}
		i++;
	}
	return 0;
  907655:	d280      	mov.n	a2, a8
  907657:	d10f      	retw.n
			*int_num *= 10;
			*int_num += (num_str[i] - '0');
		}
		else
		{
			return -1;
  907659:	c72f      	movi.n	a2, -1
		}
		i++;
	}
	return 0;
}
  90765b:	d10f      	retw.n
  90765d:	000000        	ill

00907660 <db_clock_cmd>:
	A_UART_HWINIT((clk*1000*1000)/ratio, baud);

}

static int db_clock_cmd(char *cmd, char *param1, char *param2, char *param3)
{
  907660:	6c1006        	entry	a1, 48
	uint32_t ratio = 1;
	uint32_t baud = 19200;
	uint32_t clk = 0;
  907663:	c020      	movi.n	a2, 0
    
	if( db_ascii_to_int(param1, &clk) != -1 )
  907665:	033a02        	or	a10, a3, a3
  907668:	db10      	mov.n	a11, a1

static int db_clock_cmd(char *cmd, char *param1, char *param2, char *param3)
{
	uint32_t ratio = 1;
	uint32_t baud = 19200;
	uint32_t clk = 0;
  90766a:	221600        	s32i	a2, a1, 0
    
	if( db_ascii_to_int(param1, &clk) != -1 )
  90766d:	5bffed        	call8	907624 <db_ascii_to_int>
  907670:	68a059        	beqi	a10, -1, 9076cd <db_clock_cmd+0x6d>
	{
		A_PRINTF("changing clock to %d\n", clk);
  907673:	186913        	l32r	a8, 8e1ac0 <athos_indirection_table_install+0x54c>
  907676:	1a69cf        	l32r	a10, 8e1db4 <athos_indirection_table_install+0x840>
  907679:	288212        	l32i	a8, a8, 72
  90767c:	8b10      	l32i.n	a11, a1, 0
  90767e:	0b8000        	callx8	a8
		clk_change(clk, ratio, baud);
  907681:	8810      	l32i.n	a8, a1, 0

static void clk_change(uint32_t clk, uint32_t ratio, uint32_t baud)
{
	uint32_t clk_sel = 0;

	switch(clk){
  907683:	c2ac      	movi.n	a10, 44
		break;
        case 88:
		clk_sel = 1;
		break;
        case 44:
		clk_sel = 2;
  907685:	c092      	movi.n	a9, 2

static void clk_change(uint32_t clk, uint32_t ratio, uint32_t baud)
{
	uint32_t clk_sel = 0;

	switch(clk){
  907687:	7a8122        	beq	a8, a10, 9076ad <db_clock_cmd+0x4d>
  90768a:	78a30e        	bltu	a10, a8, 90769c <db_clock_cmd+0x3c>
        case 22:
		clk_sel = 0;
  90768d:	d920      	mov.n	a9, a2

static void clk_change(uint32_t clk, uint32_t ratio, uint32_t baud)
{
	uint32_t clk_sel = 0;

	switch(clk){
  90768f:	c126      	movi.n	a2, 22
  907691:	728118        	beq	a8, a2, 9076ad <db_clock_cmd+0x4d>
		break;
        case 117:
		clk_sel = 4;
		break;
        case 40:
		clk_sel = 6;            
  907694:	c096      	movi.n	a9, 6

static void clk_change(uint32_t clk, uint32_t ratio, uint32_t baud)
{
	uint32_t clk_sel = 0;

	switch(clk){
  907696:	c228      	movi.n	a2, 40
  907698:	60000c        	j	9076a8 <db_clock_cmd+0x48>
  90769b:	00c528        	mull	a5, a12, a0
        case 22:
		clk_sel = 0;
		break;
        case 88:
		clk_sel = 1;
  90769e:	c091      	movi.n	a9, 1

static void clk_change(uint32_t clk, uint32_t ratio, uint32_t baud)
{
	uint32_t clk_sel = 0;

	switch(clk){
  9076a0:	728109        	beq	a8, a2, 9076ad <db_clock_cmd+0x4d>
		break;
        case 44:
		clk_sel = 2;
		break;
        case 117:
		clk_sel = 4;
  9076a3:	c094      	movi.n	a9, 4

static void clk_change(uint32_t clk, uint32_t ratio, uint32_t baud)
{
	uint32_t clk_sel = 0;

	switch(clk){
  9076a5:	220a75        	movi	a2, 117
  9076a8:	728101        	beq	a8, a2, 9076ad <db_clock_cmd+0x4d>
		break;
        case 40:
		clk_sel = 6;            
		break;
        default:
		clk_sel = 6;
  9076ab:	c096      	movi.n	a9, 6
		break;
	}

	iowrite32(0x50040, (0x300|clk_sel|(ratio>>1)<<12));
  9076ad:	223a00        	movi	a2, 0x300
  9076b0:	029902        	or	a9, a9, a2
  9076b3:	1269d0        	l32r	a2, 8e1df4 <athos_indirection_table_install+0x880>
	A_UART_HWINIT((clk*1000*1000)/ratio, baud);
  9076b6:	1a69d1        	l32r	a10, 8e1dfc <athos_indirection_table_install+0x888>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9076b9:	0c0200        	memw
  9076bc:	9920      	s32i.n	a9, a2, 0
  9076be:	126913        	l32r	a2, 8e1b0c <athos_indirection_table_install+0x598>
  9076c1:	0a8a28        	mull	a10, a8, a10
  9076c4:	22221a        	l32i	a2, a2, 104
  9076c7:	1b69d2        	l32r	a11, 8e1e10 <athos_indirection_table_install+0x89c>
  9076ca:	0b2000        	callx8	a2
	if( db_ascii_to_int(param1, &clk) != -1 )
	{
		A_PRINTF("changing clock to %d\n", clk);
		clk_change(clk, ratio, baud);
	}
}
  9076cd:	d10f      	retw.n
	...

009076d0 <dbg_timer_func>:
	db_incorect_format();
	return -1;
}

LOCAL void dbg_timer_func(A_HANDLE alarm, void *data)
{
  9076d0:	6c1004        	entry	a1, 32
	A_PRINTF("this is a timer alarm function 0x%08x\n\r", xthal_get_ccount());
  9076d3:	126913        	l32r	a2, 8e1b20 <athos_indirection_table_install+0x5ac>
  9076d6:	222212        	l32i	a2, a2, 72
  9076d9:	5b7c9f        	call8	8e6958 <xthal_get_ccount>
  9076dc:	dba0      	mov.n	a11, a10
  9076de:	1a69d3        	l32r	a10, 8e1e2c <athos_indirection_table_install+0x8b8>
  9076e1:	0b2000        	callx8	a2
  9076e4:	d10f      	retw.n
	...

009076e8 <cmnos_dbg_module_install>:

	db_incorect_format();
	return -1;
}
void cmnos_dbg_module_install(struct dbg_api *apis)
{
  9076e8:	6c1004        	entry	a1, 32
	apis->_dbg_init = zf_debug_init;
  9076eb:	1869d4        	l32r	a8, 8e1e3c <athos_indirection_table_install+0x8c8>
  9076ee:	9820      	s32i.n	a8, a2, 0
	apis->_dbg_task = zf_debug_task;
  9076f0:	1869d5        	l32r	a8, 8e1e44 <athos_indirection_table_install+0x8d0>
  9076f3:	9821      	s32i.n	a8, a2, 4
  9076f5:	d10f      	retw.n
	...

009076f8 <_fw_usbfifo_recv_command>:

typedef void (* USBFIFO_recv_command)(VBUF *cmd);
USBFIFO_recv_command m_origUsbfifoRecvCmd = NULL;

void _fw_usbfifo_recv_command(VBUF *buf)
{
  9076f8:	6c1004        	entry	a1, 32
	uint8_t *cmd_data;
	uint32_t tmp;

	cmd_data = (uint8_t *)(buf->desc_list->buf_addr +
  9076fb:	8820      	l32i.n	a8, a2, 0

typedef void (* USBFIFO_recv_command)(VBUF *cmd);
USBFIFO_recv_command m_origUsbfifoRecvCmd = NULL;

void _fw_usbfifo_recv_command(VBUF *buf)
{
  9076fd:	da20      	mov.n	a10, a2
	uint8_t *cmd_data;
	uint32_t tmp;

	cmd_data = (uint8_t *)(buf->desc_list->buf_addr +
  9076ff:	298105        	l16ui	a9, a8, 10
				buf->desc_list->data_offset);
	tmp = *((uint32_t *)cmd_data);
  907702:	8881      	l32i.n	a8, a8, 4
  907704:	a988      	add.n	a8, a8, a9
	if (tmp == 0xFFFFFFFF)
  907706:	8880      	l32i.n	a8, a8, 0
  907708:	698004        	bnei	a8, -1, 907710 <_fw_usbfifo_recv_command+0x18>
		_fw_usb_suspend_reboot();
  90770b:	580cca        	call8	90aa34 <_fw_usb_suspend_reboot>
  90770e:	d10f      	retw.n
	else
		m_origUsbfifoRecvCmd(buf);
  907710:	1869d6        	l32r	a8, 8e1e68 <athos_indirection_table_install+0x8f4>
  907713:	8880      	l32i.n	a8, a8, 0
  907715:	0b8000        	callx8	a8
  907718:	d10f      	retw.n
	...

0090771c <_fw_usbfifo_init>:
}

void _fw_usbfifo_init(USB_FIFO_CONFIG *pConfig)
{
  90771c:	6c1004        	entry	a1, 32
	m_origUsbfifoRecvCmd = pConfig->recv_command;
  90771f:	8921      	l32i.n	a9, a2, 4
  907721:	1869d6        	l32r	a8, 8e1e7c <athos_indirection_table_install+0x908>
  907724:	9980      	s32i.n	a9, a8, 0

	usbFifoConf.get_command_buf = pConfig->get_command_buf;
  907726:	1869d7        	l32r	a8, 8e1e84 <athos_indirection_table_install+0x910>
  907729:	8920      	l32i.n	a9, a2, 0
  90772b:	9980      	s32i.n	a9, a8, 0
	usbFifoConf.recv_command    = _fw_usbfifo_recv_command;
  90772d:	1969d8        	l32r	a9, 8e1e90 <athos_indirection_table_install+0x91c>
  907730:	9981      	s32i.n	a9, a8, 4
	usbFifoConf.get_event_buf   = pConfig->get_event_buf;
  907732:	8922      	l32i.n	a9, a2, 8
	usbFifoConf.send_event_done = pConfig->send_event_done;
  907734:	8223      	l32i.n	a2, a2, 12
{
	m_origUsbfifoRecvCmd = pConfig->recv_command;

	usbFifoConf.get_command_buf = pConfig->get_command_buf;
	usbFifoConf.recv_command    = _fw_usbfifo_recv_command;
	usbFifoConf.get_event_buf   = pConfig->get_event_buf;
  907736:	9982      	s32i.n	a9, a8, 8
	usbFifoConf.send_event_done = pConfig->send_event_done;
  907738:	9283      	s32i.n	a2, a8, 12
  90773a:	d10f      	retw.n

0090773c <cold_reboot>:
}

void cold_reboot(void)
{
  90773c:	6c1004        	entry	a1, 32
	A_PRINTF("Cold reboot initiated.");
  90773f:	126913        	l32r	a2, 8e1b8c <athos_indirection_table_install+0x618>
  907742:	1a69d9        	l32r	a10, 8e1ea8 <athos_indirection_table_install+0x934>
  907745:	282212        	l32i	a8, a2, 72
  907748:	0b8000        	callx8	a8
  90774b:	186917        	l32r	a8, 8e1ba8 <athos_indirection_table_install+0x634>
  90774e:	c090      	movi.n	a9, 0
#if defined(PROJECT_MAGPIE)
	iowrite32(WATCH_DOG_MAGIC_PATTERN_ADDR, 0);
#elif defined(PROJECT_K2)
	iowrite32(MAGPIE_REG_RST_STATUS_ADDR, 0);
#endif /* #if defined(PROJECT_MAGPIE) */
	A_USB_JUMP_BOOT();
  907750:	22222c        	l32i	a2, a2, 176
  907753:	0c0200        	memw
  907756:	298600        	s32i	a9, a8, 0
  907759:	0b2000        	callx8	a2
  90775c:	d10f      	retw.n
	...

00907760 <usb_status_in_patch>:

/*
 * support more than 64 bytes command on ep3
 */
void usb_status_in_patch(void)
{
  907760:	6c1004        	entry	a1, 32
	static VBUF *evntbuf = NULL;
	static volatile uint32_t *regaddr;
	static BOOLEAN cmd_is_new = TRUE;
	BOOLEAN cmd_end = FALSE;

	if (cmd_is_new) {
  907763:	1269da        	l32r	a2, 8e1ecc <athos_indirection_table_install+0x958>
  907766:	282100        	l16ui	a8, a2, 0
  907769:	648048        	beqz	a8, 9077b5 <usb_status_in_patch+0x55>
		evntbuf = usbFifoConf.get_event_buf();
  90776c:	1869d7        	l32r	a8, 8e1ec8 <athos_indirection_table_install+0x954>
  90776f:	8a82      	l32i.n	a10, a8, 8
  907771:	0ba000        	callx8	a10
  907774:	1869db        	l32r	a8, 8e1ee0 <athos_indirection_table_install+0x96c>
  907777:	9a80      	s32i.n	a10, a8, 0
		if (evntbuf != NULL) {
  907779:	c9af      	beqz.n	a10, 90779c <usb_status_in_patch+0x3c>
			regaddr = (uint32_t *)VBUF_GET_DATA_ADDR(evntbuf);
  90777b:	88a0      	l32i.n	a8, a10, 0
  90777d:	298105        	l16ui	a9, a8, 10
  907780:	8881      	l32i.n	a8, a8, 4
  907782:	a989      	add.n	a9, a8, a9
  907784:	1869dc        	l32r	a8, 8e1ef4 <athos_indirection_table_install+0x980>
  907787:	9980      	s32i.n	a9, a8, 0
			buf_len = evntbuf->buf_length;
  907789:	1869dd        	l32r	a8, 8e1f00 <athos_indirection_table_install+0x98c>
  90778c:	29a104        	l16ui	a9, a10, 8
  90778f:	298500        	s16i	a9, a8, 0
		} else {
			mUSB_STATUS_IN_INT_DISABLE();
			return;
		}

		cmd_is_new = FALSE;
  907792:	c080      	movi.n	a8, 0
  907794:	282500        	s16i	a8, a2, 0
  907797:	60001a        	j	9077b5 <usb_status_in_patch+0x55>
  90779a:	000012        	srai	a0, a0, 0

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  90779d:	695a29        	bnei	a5, 12, 9077ca <usb_status_in_patch+0x6a>
		evntbuf = usbFifoConf.get_event_buf();
		if (evntbuf != NULL) {
			regaddr = (uint32_t *)VBUF_GET_DATA_ADDR(evntbuf);
			buf_len = evntbuf->buf_length;
		} else {
			mUSB_STATUS_IN_INT_DISABLE();
  9077a0:	0ac028        	mull	a0, a12, a10
  9077a3:	200008        	l8ui	a0, a0, 8
  9077a6:	084709        	addx2	a7, a4, a8
  9077a9:	8802      	l32i.n	a8, a0, 8
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  9077ab:	0c0200        	memw
  9077ae:	282400        	s8i	a8, a2, 0
  9077b1:	d10f      	retw.n
  9077b3:	00001a        	sll	a0, a0
		}

		cmd_is_new = FALSE;
	}

	if (buf_len > USB_EP3_MAX_PKT_SIZE) {
  9077b6:	69ddc4        	bnei	a13, 64, 90777e <usb_status_in_patch+0x1e>
  9077b9:	9028      	s32i.n	a0, a2, 32
  9077bb:	a100      	add.n	a0, a0, a1
	}
	/* TODO: 64 bytes...
	 * controller supposed will take care of zero-length? */
	else {
		reg_buf_len = buf_len;
		cmd_end = TRUE;
  9077bd:	c021      	movi.n	a2, 1
		}

		cmd_is_new = FALSE;
	}

	if (buf_len > USB_EP3_MAX_PKT_SIZE) {
  9077bf:	789b09        	bgeu	a9, a8, 9077cc <usb_status_in_patch+0x6c>
		reg_buf_len = USB_EP3_MAX_PKT_SIZE;
		buf_len -= USB_EP3_MAX_PKT_SIZE;
  9077c2:	288cc0        	addi	a8, a8, -64
  9077c5:	28a500        	s16i	a8, a10, 0
	uint16_t reg_buf_len;
	static uint16_t buf_len;
	static VBUF *evntbuf = NULL;
	static volatile uint32_t *regaddr;
	static BOOLEAN cmd_is_new = TRUE;
	BOOLEAN cmd_end = FALSE;
  9077c8:	c020      	movi.n	a2, 0

		cmd_is_new = FALSE;
	}

	if (buf_len > USB_EP3_MAX_PKT_SIZE) {
		reg_buf_len = USB_EP3_MAX_PKT_SIZE;
  9077ca:	d890      	mov.n	a8, a9
  9077cc:	1969dc        	l32r	a9, 8e1f3c <athos_indirection_table_install+0x9c8>
		reg_buf_len = buf_len;
		cmd_end = TRUE;
	}

	/* INT use EP3 */
	for (count = 0; count < (reg_buf_len / 4); count++)
  9077cf:	082c14        	srli	a12, a8, 2
  9077d2:	8b90      	l32i.n	a11, a9, 0
  9077d4:	1e695b        	l32r	a14, 8e1d40 <athos_indirection_table_install+0x7cc>
  9077d7:	dab0      	mov.n	a10, a11
  9077d9:	c090      	movi.n	a9, 0
  9077db:	600010        	j	9077ef <usb_status_in_patch+0x8f>
  9077de:	00000c        	sub	a0, a0, a0
	{
		iowrite32_usb(ZM_EP3_DATA_OFFSET, *regaddr);
  9077e1:	02008d        	excw
  9077e4:	d0b1      	excw
		reg_buf_len = buf_len;
		cmd_end = TRUE;
	}

	/* INT use EP3 */
	for (count = 0; count < (reg_buf_len / 4); count++)
  9077e6:	990c      	s32i.n	a9, a0, 48
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9077e8:	02009d        	excw
  9077eb:	e0          	.byte 0xe0
  9077ec:	09094f        	extui	a9, a9, 0, 16
  9077ef:	dda0      	mov.n	a13, a10
  9077f1:	b4aa      	addi.n	a10, a10, 4
  9077f3:	7c99e9        	bne	a9, a12, 9077e0 <usb_status_in_patch+0x80>
  9077f6:	1a69dc        	l32r	a10, 8e1f68 <athos_indirection_table_install+0x9f4>
  9077f9:	0b990a        	addx4	a9, a9, a11
  9077fc:	99a0      	s32i.n	a9, a10, 0
	{
		iowrite32_usb(ZM_EP3_DATA_OFFSET, *regaddr);
		regaddr++;
	}

	remainder = reg_buf_len % 4;
  9077fe:	080841        	extui	a8, a8, 0, 2

	if (remainder) {
  907801:	cb84      	beqz.n	a8, 907839 <usb_status_in_patch+0xd9>
  907803:	19693a        	l32r	a9, 8e1cec <athos_indirection_table_install+0x778>
		switch(remainder) {
  907806:	688207        	beqi	a8, 2, 907811 <usb_status_in_patch+0xb1>
  907809:	698309        	bnei	a8, 3, 907816 <usb_status_in_patch+0xb6>
  90780c:	c087      	movi.n	a8, 7
  90780e:	600006        	j	907818 <usb_status_in_patch+0xb8>
  907811:	c083      	movi.n	a8, 3
  907813:	600001        	j	907818 <usb_status_in_patch+0xb8>
  907816:	c081      	movi.n	a8, 1
  907818:	0c0200        	memw
  90781b:	9890      	s32i.n	a8, a9, 0
		case 1:
			iowrite32_usb(ZM_CBUS_FIFO_SIZE_OFFSET, 0x1);
			break;
		}

		iowrite32_usb(ZM_EP3_DATA_OFFSET, *regaddr);
  90781d:	1869dc        	l32r	a8, 8e1f90 <athos_indirection_table_install+0xa1c>
  907820:	8880      	l32i.n	a8, a8, 0
  907822:	0c0200        	memw
  907825:	8980      	l32i.n	a9, a8, 0
  907827:	18695b        	l32r	a8, 8e1d94 <athos_indirection_table_install+0x820>
  90782a:	0c0200        	memw
  90782d:	9980      	s32i.n	a9, a8, 0
  90782f:	18693a        	l32r	a8, 8e1d18 <athos_indirection_table_install+0x7a4>
  907832:	c09f      	movi.n	a9, 15
  907834:	0c0200        	memw
  907837:	9980      	s32i.n	a9, a8, 0

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  907839:	18695d        	l32r	a8, 8e1db0 <athos_indirection_table_install+0x83c>

		/* Restore CBus FIFO size to word size */
		iowrite32_usb(ZM_CBUS_FIFO_SIZE_OFFSET, 0xF);
	}

	mUSB_EP3_XFER_DONE();
  90783c:	c0a8      	movi.n	a10, 8
  90783e:	298000        	l8ui	a9, a8, 0
  907841:	090947        	extui	a9, a9, 0, 8
  907844:	0a9902        	or	a9, a9, a10
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  907847:	0c0200        	memw
  90784a:	298400        	s8i	a9, a8, 0

	if (evntbuf != NULL && cmd_end) {
  90784d:	1869db        	l32r	a8, 8e1fbc <athos_indirection_table_install+0xa48>
  907850:	8a80      	l32i.n	a10, a8, 0
  907852:	c9a2      	beqz.n	a10, 907868 <usb_status_in_patch+0x108>
  907854:	642010        	beqz	a2, 907868 <usb_status_in_patch+0x108>
		usbFifoConf.send_event_done(evntbuf);
  907857:	1269d7        	l32r	a2, 8e1fb4 <athos_indirection_table_install+0xa40>
  90785a:	222203        	l32i	a2, a2, 12
  90785d:	0b2000        	callx8	a2
		cmd_is_new = TRUE;
  907860:	1269da        	l32r	a2, 8e1fc8 <athos_indirection_table_install+0xa54>
  907863:	c081      	movi.n	a8, 1
  907865:	282500        	s16i	a8, a2, 0
  907868:	d10f      	retw.n
	...

0090786c <usb_reg_out_patch>:

/*
 * support more than 64 bytes command on ep4 
 */
void usb_reg_out_patch(void)
{
  90786c:	6c1004        	entry	a1, 32

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  90786f:	1269de        	l32r	a2, 8e1fe8 <athos_indirection_table_install+0xa74>
	static BOOLEAN cmd_is_new = TRUE;

	/* get the size of this transcation */
	usbfifolen = ioread8_usb(ZM_EP4_BYTE_COUNT_LOW_OFFSET);

	if (usbfifolen > USB_EP4_MAX_PKT_SIZE) {
  907872:	230a40        	movi	a3, 64
  907875:	222000        	l8ui	a2, a2, 0
  907878:	020247        	extui	a2, a2, 0, 8
  90787b:	723b11        	bgeu	a3, a2, 907890 <usb_reg_out_patch+0x24>
		A_PRINTF("EP4 FIFO Bug? Buffer is too big: %x\n", usbfifolen);
  90787e:	136913        	l32r	a3, 8e1ccc <athos_indirection_table_install+0x758>
  907881:	1a69df        	l32r	a10, 8e2000 <athos_indirection_table_install+0xa8c>
  907884:	233212        	l32i	a3, a3, 72
  907887:	022b02        	or	a11, a2, a2
  90788a:	0b3000        	callx8	a3
		cold_reboot();
  90788d:	5bffab        	call8	90773c <cold_reboot>
	}

	/* check is command is new */
	if(cmd_is_new) {
  907890:	1369e0        	l32r	a3, 8e2010 <athos_indirection_table_install+0xa9c>
  907893:	243100        	l16ui	a4, a3, 0
  907896:	cb4a      	beqz.n	a4, 9078d4 <usb_reg_out_patch+0x68>

		buf = usbFifoConf.get_command_buf();
  907898:	1469d7        	l32r	a4, 8e1ff4 <athos_indirection_table_install+0xa80>
  90789b:	8a40      	l32i.n	a10, a4, 0
  90789d:	0ba000        	callx8	a10
  9078a0:	1469e1        	l32r	a4, 8e2024 <athos_indirection_table_install+0xab0>
		cmd_len = 0;
  9078a3:	c080      	movi.n	a8, 0
	}

	/* check is command is new */
	if(cmd_is_new) {

		buf = usbFifoConf.get_command_buf();
  9078a5:	9a40      	s32i.n	a10, a4, 0
		cmd_len = 0;
  9078a7:	1469e2        	l32r	a4, 8e2030 <athos_indirection_table_install+0xabc>
  9078aa:	284500        	s16i	a8, a4, 0

		if(!buf) {
  9078ad:	cda5      	bnez.n	a10, 9078c6 <usb_reg_out_patch+0x5a>
			A_PRINTF("%s: Filed to get new buffer.\n", __func__);
  9078af:	136913        	l32r	a3, 8e1cfc <athos_indirection_table_install+0x788>
  9078b2:	1a69e3        	l32r	a10, 8e2040 <athos_indirection_table_install+0xacc>
  9078b5:	233212        	l32i	a3, a3, 72
  9078b8:	1b69e4        	l32r	a11, 8e2048 <athos_indirection_table_install+0xad4>
  9078bb:	0b3000        	callx8	a3
		usbfifolen = (usbfifolen >> 2) + 1;
	else
		usbfifolen = usbfifolen >> 2;

	/* retrieve the data from fifo */
	for(ii = 0; ii < usbfifolen; ii++) {
  9078be:	c080      	movi.n	a8, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  9078c0:	1369e7        	l32r	a3, 8e205c <athos_indirection_table_install+0xae8>
  9078c3:	6000a7        	j	90796e <usb_reg_out_patch+0x102>
			A_PRINTF("%s: Filed to get new buffer.\n", __func__);
			goto err;
		}

		/* copy free, assignment buffer of the address */
		regaddr = (uint32_t *)buf->desc_list->buf_addr;
  9078c6:	84a0      	l32i.n	a4, a10, 0

		cmd_is_new = FALSE;
  9078c8:	283500        	s16i	a8, a3, 0
			A_PRINTF("%s: Filed to get new buffer.\n", __func__);
			goto err;
		}

		/* copy free, assignment buffer of the address */
		regaddr = (uint32_t *)buf->desc_list->buf_addr;
  9078cb:	294201        	l32i	a9, a4, 4
  9078ce:	1469e5        	l32r	a4, 8e2064 <athos_indirection_table_install+0xaf0>
  9078d1:	294600        	s32i	a9, a4, 0

		cmd_is_new = FALSE;
	}

	/* just in case, suppose should not happen */
	if(!buf)
  9078d4:	1369e1        	l32r	a3, 8e2058 <athos_indirection_table_install+0xae4>
  9078d7:	8a30      	l32i.n	a10, a3, 0
  9078d9:	64afe1        	beqz	a10, 9078be <usb_reg_out_patch+0x52>
	 */
	if(usbfifolen < USB_EP4_MAX_PKT_SIZE)
		cmd_is_last = TRUE;

	/* accumulate the size */
	cmd_len += usbfifolen;
  9078dc:	1369e2        	l32r	a3, 8e2064 <athos_indirection_table_install+0xaf0>

	if (cmd_len > buf->desc_list->buf_size) {
  9078df:	88a0      	l32i.n	a8, a10, 0
	 */
	if(usbfifolen < USB_EP4_MAX_PKT_SIZE)
		cmd_is_last = TRUE;

	/* accumulate the size */
	cmd_len += usbfifolen;
  9078e1:	293100        	l16ui	a9, a3, 0
  9078e4:	a929      	add.n	a9, a2, a9
  9078e6:	09094f        	extui	a9, a9, 0, 16
  9078e9:	293500        	s16i	a9, a3, 0

	if (cmd_len > buf->desc_list->buf_size) {
  9078ec:	238104        	l16ui	a3, a8, 8
  9078ef:	793b0b        	bgeu	a3, a9, 9078fe <usb_reg_out_patch+0x92>
		A_PRINTF("%s: Data length on EP4 FIFO is bigger as "
  9078f2:	136913        	l32r	a3, 8e1d40 <athos_indirection_table_install+0x7cc>
  9078f5:	1a69e6        	l32r	a10, 8e2090 <athos_indirection_table_install+0xb1c>
  9078f8:	233212        	l32i	a3, a3, 72
  9078fb:	63ffb9        	j	9078b8 <usb_reg_out_patch+0x4c>
		goto err;
	}

	/* round it to alignment */
	if(usbfifolen % 4)
		usbfifolen = (usbfifolen >> 2) + 1;
  9078fe:	c031      	movi.n	a3, 1
			 "allocated buffer data! Drop it!\n", __func__);
		goto err;
	}

	/* round it to alignment */
	if(usbfifolen % 4)
  907900:	020441        	extui	a4, a2, 0, 2
		usbfifolen = (usbfifolen >> 2) + 1;
  907903:	c0b0      	movi.n	a11, 0
  907905:	043b39        	movnez	a11, a3, a4
  907908:	1369e5        	l32r	a3, 8e209c <athos_indirection_table_install+0xb28>
	else
		usbfifolen = usbfifolen >> 2;
  90790b:	022c14        	srli	a12, a2, 2
  90790e:	8330      	l32i.n	a3, a3, 0
		goto err;
	}

	/* round it to alignment */
	if(usbfifolen % 4)
		usbfifolen = (usbfifolen >> 2) + 1;
  907910:	abcc      	add.n	a12, a12, a11
  907912:	dd30      	mov.n	a13, a3
	else
		usbfifolen = usbfifolen >> 2;

	/* retrieve the data from fifo */
	for(ii = 0; ii < usbfifolen; ii++) {
  907914:	c0b0      	movi.n	a11, 0
  907916:	1f69e7        	l32r	a15, 8e20b4 <athos_indirection_table_install+0xb40>
  907919:	60000f        	j	90792c <usb_reg_out_patch+0xc0>
  90791c:	000c02        	or	a12, a0, a0
  90791f:	0084f0        	excw
  907922:	b1bb      	addi.n	a11, a11, 1
		/* read fifo data out */
		ep4_data = ioread32_usb(ZM_EP4_DATA_OFFSET);
		*regaddr = ep4_data;
  907924:	0c0200        	memw
  907927:	94e0      	s32i.n	a4, a14, 0
		usbfifolen = (usbfifolen >> 2) + 1;
	else
		usbfifolen = usbfifolen >> 2;

	/* retrieve the data from fifo */
	for(ii = 0; ii < usbfifolen; ii++) {
  907929:	0b0b4f        	extui	a11, a11, 0, 16
  90792c:	ded0      	mov.n	a14, a13
  90792e:	b4dd      	addi.n	a13, a13, 4
  907930:	7cb9e9        	bne	a11, a12, 90791d <usb_reg_out_patch+0xb1>
  907933:	1c69e5        	l32r	a12, 8e20c8 <athos_indirection_table_install+0xb54>
  907936:	03bb0a        	addx4	a11, a11, a3
  907939:	9bc0      	s32i.n	a11, a12, 0
		*regaddr = ep4_data;
		regaddr++;
	}

	/* if this is the last command, callback to HTC */
	if (cmd_is_last) {
  90793b:	c33f      	movi.n	a3, 63
  90793d:	723330        	bltu	a3, a2, 907971 <usb_reg_out_patch+0x105>
		buf->desc_list->next_desc = NULL;
  907940:	c020      	movi.n	a2, 0
  907942:	9280      	s32i.n	a2, a8, 0
		buf->desc_list->data_offset = 0;
  907944:	228505        	s16i	a2, a8, 10
		buf->desc_list->data_size = cmd_len;
		buf->desc_list->control = 0;
  907947:	228507        	s16i	a2, a8, 14

	/* if this is the last command, callback to HTC */
	if (cmd_is_last) {
		buf->desc_list->next_desc = NULL;
		buf->desc_list->data_offset = 0;
		buf->desc_list->data_size = cmd_len;
  90794a:	298506        	s16i	a9, a8, 12
		buf->desc_list->control = 0;
		buf->next_buf = NULL;
  90794d:	92a1      	s32i.n	a2, a10, 4
		buf->buf_length = cmd_len;

		usbFifoConf.recv_command(buf);
  90794f:	1269d7        	l32r	a2, 8e20ac <athos_indirection_table_install+0xb38>
		buf->desc_list->next_desc = NULL;
		buf->desc_list->data_offset = 0;
		buf->desc_list->data_size = cmd_len;
		buf->desc_list->control = 0;
		buf->next_buf = NULL;
		buf->buf_length = cmd_len;
  907952:	29a504        	s16i	a9, a10, 8

		usbFifoConf.recv_command(buf);
  907955:	8221      	l32i.n	a2, a2, 4

		cmd_is_new = TRUE;
  907957:	c031      	movi.n	a3, 1
		buf->desc_list->data_size = cmd_len;
		buf->desc_list->control = 0;
		buf->next_buf = NULL;
		buf->buf_length = cmd_len;

		usbFifoConf.recv_command(buf);
  907959:	0b2000        	callx8	a2

		cmd_is_new = TRUE;
  90795c:	1269e0        	l32r	a2, 8e20dc <athos_indirection_table_install+0xb68>
  90795f:	232500        	s16i	a3, a2, 0
  907962:	d10f      	retw.n
	goto done;
err:
	/* we might get no command buffer here?
	 * but if we return here, the ep4 fifo will be lock out,
	 * so that we still read them out but just drop it? */
	for(ii = 0; ii < usbfifolen; ii++)
  907964:	b188      	addi.n	a8, a8, 1
  907966:	0c0200        	memw
  907969:	8430      	l32i.n	a4, a3, 0
  90796b:	08084f        	extui	a8, a8, 0, 16
  90796e:	7283f2        	bltu	a8, a2, 907964 <usb_reg_out_patch+0xf8>
  907971:	d10f      	retw.n
	...

00907974 <vUSBFIFO_EP6Cfg_FS_patch>:
#define FS_C1_I0_A0_EP6_MAP		\
	 (FS_C1_I0_A0_EP6_FIFO_START | (FS_C1_I0_A0_EP6_FIFO_START << 4) | \
	  (MASK_F0 >> (4*FS_C1_I0_A0_EP6_DIRECTION)))

void vUSBFIFO_EP6Cfg_FS_patch(void)
{
  907974:	6c1004        	entry	a1, 32
#if (FS_C1_I0_A0_EP_NUMBER >= 6)
	int i;

	/* EP0X06 */
	mUsbEPMap(EP6, FS_C1_I0_A0_EP6_MAP);
  907977:	2b0a6f        	movi	a11, 111
  90797a:	2a0a06        	movi	a10, 6
  90797d:	5b73de        	call8	8e48f8 <mUsbEPMap>
	mUsbFIFOMap(FS_C1_I0_A0_EP6_FIFO_START, FS_C1_I0_A0_EP6_FIFO_MAP);
  907980:	2a0a06        	movi	a10, 6
  907983:	0aab02        	or	a11, a10, a10
  907986:	5b73e3        	call8	8e4914 <mUsbFIFOMap>
	mUsbFIFOConfig(FS_C1_I0_A0_EP6_FIFO_START, FS_C1_I0_A0_EP6_FIFO_CONFIG);
  907989:	2b0a86        	movi	a11, 134
  90798c:	c0a6      	movi.n	a10, 6
  90798e:	5b73e9        	call8	8e4934 <mUsbFIFOConfig>

	for(i = FS_C1_I0_A0_EP6_FIFO_START + 1 ;
            i < FS_C1_I0_A0_EP6_FIFO_START + FS_C1_I0_A0_EP6_FIFO_NO ; i ++)
	{
		mUsbFIFOConfig(i, (FS_C1_I0_A0_EP6_FIFO_CONFIG & (~BIT7)) );
  907991:	c0b6      	movi.n	a11, 6
  907993:	c0a7      	movi.n	a10, 7
  907995:	5b73e7        	call8	8e4934 <mUsbFIFOConfig>
	}

	mUsbEPMxPtSzHigh(EP6, FS_C1_I0_A0_EP6_DIRECTION,
  907998:	c0b1      	movi.n	a11, 1
  90799a:	c4c0      	movi.n	a12, 64
  90799c:	c0a6      	movi.n	a10, 6
  90799e:	5b73ed        	call8	8e4954 <mUsbEPMxPtSzHigh>
			 (FS_C1_I0_A0_EP6_MAX_PACKET & 0x7ff));
	mUsbEPMxPtSzLow(EP6, FS_C1_I0_A0_EP6_DIRECTION,
  9079a1:	c0b1      	movi.n	a11, 1
  9079a3:	c4c0      	movi.n	a12, 64
  9079a5:	c0a6      	movi.n	a10, 6
  9079a7:	5b73f5        	call8	8e497c <mUsbEPMxPtSzLow>
			(FS_C1_I0_A0_EP6_MAX_PACKET & 0x7ff));
	mUsbEPinHighBandSet(EP6, FS_C1_I0_A0_EP6_DIRECTION,
  9079aa:	c0b1      	movi.n	a11, 1
  9079ac:	c4c0      	movi.n	a12, 64
  9079ae:	2a0a06        	movi	a10, 6
  9079b1:	5b73fb        	call8	8e49a0 <mUsbEPinHighBandSet>
  9079b4:	d10f      	retw.n
	...

009079b8 <vUsbFIFO_EPxCfg_FS_patch>:
			    FS_C1_I0_A0_EP6_MAX_PACKET);
#endif
}

void vUsbFIFO_EPxCfg_FS_patch(void)
{
  9079b8:	6c1004        	entry	a1, 32
	switch (u8UsbConfigValue)
  9079bb:	1869e8        	l32r	a8, 8e215c <athos_indirection_table_install+0xbe8>
  9079be:	288100        	l16ui	a8, a8, 0
  9079c1:	698113        	bnei	a8, 1, 9079d8 <vUsbFIFO_EPxCfg_FS_patch+0x20>
	{
#if (FS_CONFIGURATION_NUMBER >= 1)
		/* Configuration 0X01 */
        case 0X01:
		switch (u8UsbInterfaceValue)
  9079c4:	1869e9        	l32r	a8, 8e2168 <athos_indirection_table_install+0xbf4>
  9079c7:	288100        	l16ui	a8, a8, 0
  9079ca:	cc8a      	bnez.n	a8, 9079d8 <vUsbFIFO_EPxCfg_FS_patch+0x20>
		{
#if (FS_C1_INTERFACE_NUMBER >= 1)
			/* Interface 0 */
                case 0:
			switch (u8UsbInterfaceAlternateSetting)
  9079cc:	1869ea        	l32r	a8, 8e2174 <athos_indirection_table_install+0xc00>
  9079cf:	288100        	l16ui	a8, a8, 0
  9079d2:	658002        	bnez	a8, 9079d8 <vUsbFIFO_EPxCfg_FS_patch+0x20>
                        case 0:

				/* snapped.... */

				/* patch up this ep6_fs config */
				vUSBFIFO_EP6Cfg_FS_patch();
  9079d5:	5bffe7        	call8	907974 <vUSBFIFO_EP6Cfg_FS_patch>
  9079d8:	d10f      	retw.n
	...

009079dc <bSet_configuration_patch>:
	}
	/* mCHECK_STACK(); */
}

BOOLEAN bSet_configuration_patch(void)
{
  9079dc:	6c1004        	entry	a1, 32
	/* do some defaul configuration */
	bSet_configuration();
  9079df:	5b705d        	call8	8e3b54 <bSet_configuration>

	/* overwrite defaul FIFO configuration for FullSpeed USB */
	if ((mLOW_BYTE(mDEV_REQ_VALUE()) != 0) && !mUsbHighSpeedST())
  9079e2:	1269eb        	l32r	a2, 8e2190 <athos_indirection_table_install+0xc1c>
  9079e5:	222007        	l8ui	a2, a2, 7
  9079e8:	c82a      	beqz.n	a2, 9079f6 <bSet_configuration_patch+0x1a>

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  9079ea:	126935        	l32r	a2, 8e1ec0 <athos_indirection_table_install+0x94c>
  9079ed:	222000        	l8ui	a2, a2, 0
  9079f0:	792f02        	bbsi	a2, 25, 9079f6 <bSet_configuration_patch+0x1a>
			vUsbFIFO_EPxCfg_FS_patch();
  9079f3:	5bfff1        	call8	9079b8 <vUsbFIFO_EPxCfg_FS_patch>

	eUsbCxFinishAction = ACT_DONE;
  9079f6:	1869ec        	l32r	a8, 8e21a8 <athos_indirection_table_install+0xc34>
  9079f9:	c021      	movi.n	a2, 1
  9079fb:	9280      	s32i.n	a2, a8, 0
	return TRUE;
}
  9079fd:	d10f      	retw.n
	...

00907a00 <bStandardCommand_patch>:

extern BOOLEAN bStandardCommand(void);

BOOLEAN bStandardCommand_patch(void)
{
  907a00:	6c1004        	entry	a1, 32
	if (mDEV_REQ_REQ() == USB_SET_CONFIGURATION) {
  907a03:	1869eb        	l32r	a8, 8e21b0 <athos_indirection_table_install+0xc3c>
  907a06:	298102        	l16ui	a9, a8, 4
  907a09:	280a09        	movi	a8, 9
  907a0c:	78992d        	bne	a9, a8, 907a3d <bStandardCommand_patch+0x3d>
		A_USB_SET_CONFIG();
  907a0f:	186913        	l32r	a8, 8e1e5c <athos_indirection_table_install+0x8e8>
  907a12:	2a8226        	l32i	a10, a8, 152
  907a15:	0ba000        	callx8	a10

#if ENABLE_SWAP_DATA_MODE
		/* SWAP FUNCTION should be enabled while DMA engine
		 * is not working, the best place to enable it
		 * is before we trigger the DMA */
		MAGPIE_REG_USB_RX0_SWAP_DATA = 0x1;
  907a18:	186953        	l32r	a8, 8e1f64 <athos_indirection_table_install+0x9f0>
  907a1b:	c0a1      	movi.n	a10, 1
  907a1d:	0c0200        	memw
  907a20:	9a80      	s32i.n	a10, a8, 0
		MAGPIE_REG_USB_TX0_SWAP_DATA = 0x1;
  907a22:	186954        	l32r	a8, 8e1f74 <athos_indirection_table_install+0xa00>
  907a25:	0c0200        	memw
  907a28:	9a80      	s32i.n	a10, a8, 0

#if SYSTEM_MODULE_HP_EP5
		MAGPIE_REG_USB_RX1_SWAP_DATA = 0x1;
  907a2a:	186955        	l32r	a8, 8e1f80 <athos_indirection_table_install+0xa0c>
  907a2d:	0c0200        	memw
  907a30:	9a80      	s32i.n	a10, a8, 0
#endif

#if SYSTEM_MODULE_HP_EP6
		MAGPIE_REG_USB_RX2_SWAP_DATA = 0x1;
  907a32:	186956        	l32r	a8, 8e1f8c <athos_indirection_table_install+0xa18>
  907a35:	0c0200        	memw
  907a38:	9a80      	s32i.n	a10, a8, 0
#endif

#endif /* ENABLE_SWAP_DATA_MODE */
		return TRUE;
  907a3a:	600002        	j	907a40 <bStandardCommand_patch+0x40>
	} else
		return bStandardCommand();
  907a3d:	5b7109        	call8	8e3e64 <bStandardCommand>
}
  907a40:	d2a0      	mov.n	a2, a10
  907a42:	d10f      	retw.n

00907a44 <bGet_descriptor_patch>:
#define EP3_INT_INTERVAL		19
#define EP4_TRANSFER_TYPE_OFFSET	21
#define EP4_INT_INTERVAL		22

BOOLEAN bGet_descriptor_patch(void)
{
  907a44:	6c1004        	entry	a1, 32
	if (mDEV_REQ_VALUE_HIGH() == 1)
  907a47:	1369eb        	l32r	a3, 8e21f4 <athos_indirection_table_install+0xc80>
  907a4a:	223103        	l16ui	a2, a3, 6
  907a4d:	028214        	srli	a2, a2, 8
  907a50:	692120        	bnei	a2, 1, 907a74 <bGet_descriptor_patch+0x30>
	{
		uint8_t *p = (uint8_t *)u8UsbDeviceDescriptor;

		/* Copy Usb Device Descriptor */
		ath_hal_memcpy(UsbDeviceDescriptorPatch, p,
  907a53:	1469ee        	l32r	a4, 8e220c <athos_indirection_table_install+0xc98>
  907a56:	1269ed        	l32r	a2, 8e220c <athos_indirection_table_install+0xc98>
  907a59:	8b40      	l32i.n	a11, a4, 0
  907a5b:	da20      	mov.n	a10, a2
  907a5d:	c1c2      	movi.n	a12, 18
  907a5f:	580034        	call8	907b30 <ath_hal_memcpy>
				sizeof(UsbDeviceDescriptorPatch));

		/* Change bcdDevice. we need it to detect if FW
		 * was uploaded. */
		UsbDeviceDescriptorPatch[BCD_DEVICE_OFFSET] =
  907a62:	c78f      	movi.n	a8, -1
  907a64:	282506        	s16i	a8, a2, 12
			BCD_DEVICE_FW_SIGNATURE;

		pu8DescriptorEX = UsbDeviceDescriptorPatch;
  907a67:	1869ef        	l32r	a8, 8e2224 <athos_indirection_table_install+0xcb0>
  907a6a:	9280      	s32i.n	a2, a8, 0
		u16TxRxCounter = mTABLE_LEN(u8UsbDeviceDescriptor[0]);
  907a6c:	8240      	l32i.n	a2, a4, 0
  907a6e:	242001        	l8ui	a4, a2, 1
  907a71:	600024        	j	907a99 <bGet_descriptor_patch+0x55>
			u16TxRxCounter = mDEV_REQ_LENGTH();

		A_USB_EP0_TX_DATA();

		return TRUE;
	} else if (mDEV_REQ_VALUE_HIGH() == 2) {
  907a74:	69223d        	bnei	a2, 2, 907ab5 <bGet_descriptor_patch+0x71>
		uint8_t *p = (uint8_t *)u8ConfigDescriptorEX;

		/* Copy ConfigDescriptor */
		ath_hal_memcpy(ConfigDescriptorPatch, p,
  907a77:	1269f2        	l32r	a2, 8e2240 <athos_indirection_table_install+0xccc>
  907a7a:	1469f1        	l32r	a4, 8e2240 <athos_indirection_table_install+0xccc>
  907a7d:	2b2200        	l32i	a11, a2, 0
  907a80:	044a02        	or	a10, a4, a4
  907a83:	2c0a3c        	movi	a12, 60
  907a86:	58002a        	call8	907b30 <ath_hal_memcpy>
				sizeof(ConfigDescriptorPatch));

		 /* place holder for EPx patches */

		if (mDEV_REQ_VALUE_LOW() == 0) {
  907a89:	283007        	l8ui	a8, a3, 7
			/* configuration no: 0 */
			pu8DescriptorEX = ConfigDescriptorPatch;
			u16TxRxCounter = ConfigDescriptorPatch[1];
		} else
			return FALSE;
  907a8c:	c020      	movi.n	a2, 0
		ath_hal_memcpy(ConfigDescriptorPatch, p,
				sizeof(ConfigDescriptorPatch));

		 /* place holder for EPx patches */

		if (mDEV_REQ_VALUE_LOW() == 0) {
  907a8e:	728928        	bne	a8, a2, 907aba <bGet_descriptor_patch+0x76>
			/* configuration no: 0 */
			pu8DescriptorEX = ConfigDescriptorPatch;
  907a91:	1269ef        	l32r	a2, 8e2250 <athos_indirection_table_install+0xcdc>
  907a94:	9420      	s32i.n	a4, a2, 0
			u16TxRxCounter = ConfigDescriptorPatch[1];
  907a96:	244101        	l16ui	a4, a4, 2
  907a99:	1269f0        	l32r	a2, 8e225c <athos_indirection_table_install+0xce8>
		} else
			return FALSE;

		if (u16TxRxCounter > mDEV_REQ_LENGTH())
  907a9c:	233105        	l16ui	a3, a3, 10
		 /* place holder for EPx patches */

		if (mDEV_REQ_VALUE_LOW() == 0) {
			/* configuration no: 0 */
			pu8DescriptorEX = ConfigDescriptorPatch;
			u16TxRxCounter = ConfigDescriptorPatch[1];
  907a9f:	242500        	s16i	a4, a2, 0
		} else
			return FALSE;

		if (u16TxRxCounter > mDEV_REQ_LENGTH())
  907aa2:	743b02        	bgeu	a3, a4, 907aa8 <bGet_descriptor_patch+0x64>
			u16TxRxCounter = mDEV_REQ_LENGTH();
  907aa5:	232500        	s16i	a3, a2, 0

		A_USB_EP0_TX_DATA();
  907aa8:	126913        	l32r	a2, 8e1ef4 <athos_indirection_table_install+0x980>
  907aab:	222235        	l32i	a2, a2, 212
  907aae:	0b2000        	callx8	a2
		return TRUE;
  907ab1:	c021      	movi.n	a2, 1
  907ab3:	d10f      	retw.n
	} else
		return bGet_descriptor();
  907ab5:	5b6ff9        	call8	8e3a9c <bGet_descriptor>
  907ab8:	d2a0      	mov.n	a2, a10
}
  907aba:	d10f      	retw.n

00907abc <ath_hal_getuptime>:
#include<ah_internal.h>
#include "ah_osdep.h"

a_uint32_t __ahdecl
ath_hal_getuptime(struct ath_hal *ah)
{
  907abc:	6c1004        	entry	a1, 32
	return MSEC_TO_TICK(msecs);
}
static inline unsigned long
__adf_os_getuptime(void)
{
    return MSEC_TO_TICK(A_MILLISECONDS());;      
  907abf:	186913        	l32r	a8, 8e1f0c <athos_indirection_table_install+0x998>
  907ac2:	2a823e        	l32i	a10, a8, 248
  907ac5:	0ba000        	callx8	a10
	return adf_os_getuptime();
}
  907ac8:	d2a0      	mov.n	a2, a10
  907aca:	d10f      	retw.n

00907acc <_ath_hal_attach_tgt>:

struct ath_hal *
_ath_hal_attach_tgt(a_uint32_t devid, HAL_SOFTC sc,
		    adf_os_device_t dev, a_uint32_t flags, void* s)
{
  907acc:	6c1006        	entry	a1, 48
	HAL_STATUS status;
	struct ath_hal *ah = ath_hal_attach_tgt(devid, sc, dev, flags, &status);
  907acf:	db30      	mov.n	a11, a3
  907ad1:	dc40      	mov.n	a12, a4
  907ad3:	dd50      	mov.n	a13, a5
  907ad5:	de10      	mov.n	a14, a1
  907ad7:	da20      	mov.n	a10, a2
  907ad9:	580c97        	call8	90ad38 <ath_hal_attach_tgt>
	adf_os_print(" ath_hal = %p \n",ah);
  907adc:	186913        	l32r	a8, 8e1f28 <athos_indirection_table_install+0x9b4>
struct ath_hal *
_ath_hal_attach_tgt(a_uint32_t devid, HAL_SOFTC sc,
		    adf_os_device_t dev, a_uint32_t flags, void* s)
{
	HAL_STATUS status;
	struct ath_hal *ah = ath_hal_attach_tgt(devid, sc, dev, flags, &status);
  907adf:	d2a0      	mov.n	a2, a10
	adf_os_print(" ath_hal = %p \n",ah);
  907ae1:	288212        	l32i	a8, a8, 72
  907ae4:	1a69f3        	l32r	a10, 8e22b0 <athos_indirection_table_install+0xd3c>
  907ae7:	db20      	mov.n	a11, a2
  907ae9:	0b8000        	callx8	a8
	*(HAL_STATUS *)s = status;
  907aec:	8810      	l32i.n	a8, a1, 0
  907aee:	9860      	s32i.n	a8, a6, 0
	return ah;
}
  907af0:	d10f      	retw.n
	...

00907af4 <ath_hal_delay>:
/*
 * Delay n microseconds.
 */
void __ahdecl
ath_hal_delay(a_int32_t n)
{
  907af4:	6c1004        	entry	a1, 32
}

static inline void
__adf_os_udelay(int usecs)
{
    A_DELAY_USECS(usecs);
  907af7:	186913        	l32r	a8, 8e1f44 <athos_indirection_table_install+0x9d0>
  907afa:	da20      	mov.n	a10, a2
  907afc:	28823b        	l32i	a8, a8, 236
  907aff:	0b8000        	callx8	a8
  907b02:	d10f      	retw.n

00907b04 <ath_hal_malloc>:
/*
 * Allocate/free memory.
 */
void * __ahdecl
ath_hal_malloc(adf_os_size_t size)
{
  907b04:	6c1004        	entry	a1, 32
  907b07:	146913        	l32r	a4, 8e1f54 <athos_indirection_table_install+0x9e0>
  907b0a:	d320      	mov.n	a3, a2
  907b0c:	224252        	l32i	a2, a4, 0x148
  907b0f:	c0a0      	movi.n	a10, 0
  907b11:	db30      	mov.n	a11, a3
  907b13:	0b2000        	callx8	a2
  907b16:	d2a0      	mov.n	a2, a10
	void *p;

	p = adf_os_mem_alloc(size);
	if (p)
  907b18:	c8a8      	beqz.n	a10, 907b24 <ath_hal_malloc+0x20>
}
/* zero a memory buffer */
static inline void
__adf_os_mem_zero(void *buf, adf_os_size_t size)
{
    A_MEMZERO(buf,size);
  907b1a:	8444      	l32i.n	a4, a4, 16
  907b1c:	c0b0      	movi.n	a11, 0
  907b1e:	033c02        	or	a12, a3, a3
  907b21:	0b4000        	callx8	a4
		adf_os_mem_zero(p, size);

	return p;
}
  907b24:	d10f      	retw.n
	...

00907b28 <ath_hal_free>:

void __ahdecl
ath_hal_free(void* p)
{
  907b28:	6c1004        	entry	a1, 32
  907b2b:	d10f      	retw.n
  907b2d:	000000        	ill

00907b30 <ath_hal_memcpy>:
	adf_os_mem_free(p);
}

void * __ahdecl
ath_hal_memcpy(void *dst, const void *src, adf_os_size_t n)
{
  907b30:	6c1004        	entry	a1, 32
}

/* move a memory buffer */
static inline void 		__adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    A_MEMCPY(dst,src,size);    
  907b33:	186913        	l32r	a8, 8e1f80 <athos_indirection_table_install+0xa0c>
  907b36:	da20      	mov.n	a10, a2
  907b38:	8885      	l32i.n	a8, a8, 20
  907b3a:	db30      	mov.n	a11, a3
  907b3c:	dc40      	mov.n	a12, a4
  907b3e:	0b8000        	callx8	a8
	adf_os_mem_copy(dst, src, n);
	return 0;
}
  907b41:	c020      	movi.n	a2, 0
  907b43:	d10f      	retw.n
  907b45:	000000        	ill

00907b48 <__adf_os_mem_alloc>:

#include "cmnos_api.h"
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
  907b48:	6c1004        	entry	a1, 32
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  907b4b:	186913        	l32r	a8, 8e1f98 <athos_indirection_table_install+0xa24>
  907b4e:	db20      	mov.n	a11, a2
  907b50:	288252        	l32i	a8, a8, 0x148
  907b53:	c0a0      	movi.n	a10, 0
  907b55:	0b8000        	callx8	a8
}
  907b58:	d2a0      	mov.n	a2, a10
  907b5a:	d10f      	retw.n

00907b5c <__adf_os_mem_copy>:
    //free(buf,M_DEVBUF);
}

/* move a memory buffer */
static inline void 		__adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
  907b5c:	6c1004        	entry	a1, 32
    A_MEMCPY(dst,src,size);    
  907b5f:	186913        	l32r	a8, 8e1fac <athos_indirection_table_install+0xa38>
  907b62:	da20      	mov.n	a10, a2
  907b64:	8885      	l32i.n	a8, a8, 20
  907b66:	db30      	mov.n	a11, a3
  907b68:	dc40      	mov.n	a12, a4
  907b6a:	0b8000        	callx8	a8
  907b6d:	d10f      	retw.n
	...

00907b70 <__adf_os_mem_set>:
}

/* set a memory buffer */
static inline void
__adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
  907b70:	6c1004        	entry	a1, 32
	A_MEMSET(buf, b, size);
  907b73:	186913        	l32r	a8, 8e1fc0 <athos_indirection_table_install+0xa4c>
  907b76:	da20      	mov.n	a10, a2
  907b78:	8884      	l32i.n	a8, a8, 16
  907b7a:	db30      	mov.n	a11, a3
  907b7c:	dc40      	mov.n	a12, a4
  907b7e:	0b8000        	callx8	a8
  907b81:	d10f      	retw.n
	...

00907b84 <tgt_HTCRecv_uapsdhandler>:
	ath_tgt_send_beacon(sc, hdr_buf, buf, EndPt);
}

static void tgt_HTCRecv_uapsdhandler(HTC_ENDPOINT_ID EndPt, adf_nbuf_t hdr_buf,
				     adf_nbuf_t buf, void *ServiceCtx)
{
  907b84:	6c1004        	entry	a1, 32
  907b87:	d10f      	retw.n
  907b89:	000000        	ill

00907b8c <dispatch_magpie_sys_cmds>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void dispatch_magpie_sys_cmds(void *pContext, A_UINT16 Command,
				     A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  907b8c:	6c1004        	entry	a1, 32
	adf_os_assert(0);
  907b8f:	186913        	l32r	a8, 8e1fdc <athos_indirection_table_install+0xa68>
  907b92:	1a69f4        	l32r	a10, 8e2364 <athos_indirection_table_install+0xdf0>
  907b95:	288212        	l32i	a8, a8, 72
  907b98:	1b69f5        	l32r	a11, 8e236c <athos_indirection_table_install+0xdf8>
  907b9b:	0b8000        	callx8	a8
  907b9e:	186978        	l32r	a8, 8e2180 <athos_indirection_table_install+0xc0c>
  907ba1:	0c0200        	memw
  907ba4:	8880      	l32i.n	a8, a8, 0
  907ba6:	d10f      	retw.n

00907ba8 <htc_setup_comp>:
/*****************/
/* Init / Deinit */
/*****************/

static void htc_setup_comp(void)
{
  907ba8:	6c1004        	entry	a1, 32
  907bab:	d10f      	retw.n
  907bad:	000000        	ill

00907bb0 <tgt_reg_service>:
	return HTC_SERVICE_SUCCESS;
}

static void tgt_reg_service(struct ath_softc_tgt *sc, HTC_SERVICE *svc,
			    int svcId, HTC_SERVICE_ProcessRecvMsg recvMsg)
{
  907bb0:	6c1004        	entry	a1, 32
	svc->ProcessRecvMsg = recvMsg;
	svc->ProcessSendBufferComplete = tgt_HTCSendCompleteHandler;
  907bb3:	1869f6        	l32r	a8, 8e238c <athos_indirection_table_install+0xe18>
	svc->ProcessConnect = tgt_ServiceConnect;
	svc->MaxSvcMsgSize = 1600;
	svc->TrailerSpcCheckLimit = 0;
	svc->ServiceID = svcId;
	svc->ServiceCtx = sc;
	HTC_RegisterService(sc->tgt_htc_handle, svc);
  907bb6:	8a22      	l32i.n	a10, a2, 8

static void tgt_reg_service(struct ath_softc_tgt *sc, HTC_SERVICE *svc,
			    int svcId, HTC_SERVICE_ProcessRecvMsg recvMsg)
{
	svc->ProcessRecvMsg = recvMsg;
	svc->ProcessSendBufferComplete = tgt_HTCSendCompleteHandler;
  907bb8:	9832      	s32i.n	a8, a3, 8
	svc->ProcessConnect = tgt_ServiceConnect;
  907bba:	1869f7        	l32r	a8, 8e2398 <athos_indirection_table_install+0xe24>
	return HTC_SERVICE_SUCCESS;
}

static void tgt_reg_service(struct ath_softc_tgt *sc, HTC_SERVICE *svc,
			    int svcId, HTC_SERVICE_ProcessRecvMsg recvMsg)
{
  907bbd:	db30      	mov.n	a11, a3
	svc->ProcessRecvMsg = recvMsg;
	svc->ProcessSendBufferComplete = tgt_HTCSendCompleteHandler;
	svc->ProcessConnect = tgt_ServiceConnect;
  907bbf:	9833      	s32i.n	a8, a3, 12
	svc->MaxSvcMsgSize = 1600;
  907bc1:	286a40        	movi	a8, 0x640
  907bc4:	28350a        	s16i	a8, a3, 20
	svc->TrailerSpcCheckLimit = 0;
  907bc7:	c080      	movi.n	a8, 0
  907bc9:	28350b        	s16i	a8, a3, 22
	svc->ServiceID = svcId;
	svc->ServiceCtx = sc;
	HTC_RegisterService(sc->tgt_htc_handle, svc);
  907bcc:	186913        	l32r	a8, 8e2018 <athos_indirection_table_install+0xaa4>
}

static void tgt_reg_service(struct ath_softc_tgt *sc, HTC_SERVICE *svc,
			    int svcId, HTC_SERVICE_ProcessRecvMsg recvMsg)
{
	svc->ProcessRecvMsg = recvMsg;
  907bcf:	9531      	s32i.n	a5, a3, 4
	svc->ProcessConnect = tgt_ServiceConnect;
	svc->MaxSvcMsgSize = 1600;
	svc->TrailerSpcCheckLimit = 0;
	svc->ServiceID = svcId;
	svc->ServiceCtx = sc;
	HTC_RegisterService(sc->tgt_htc_handle, svc);
  907bd1:	288280        	l32i	a8, a8, 0x200
	svc->ProcessRecvMsg = recvMsg;
	svc->ProcessSendBufferComplete = tgt_HTCSendCompleteHandler;
	svc->ProcessConnect = tgt_ServiceConnect;
	svc->MaxSvcMsgSize = 1600;
	svc->TrailerSpcCheckLimit = 0;
	svc->ServiceID = svcId;
  907bd4:	243508        	s16i	a4, a3, 16
	svc->ServiceCtx = sc;
  907bd7:	9236      	s32i.n	a2, a3, 24
	HTC_RegisterService(sc->tgt_htc_handle, svc);
  907bd9:	0b8000        	callx8	a8
  907bdc:	d10f      	retw.n
	...

00907be0 <tgt_HTCRecv_mgmthandler>:
{
}

static void tgt_HTCRecv_mgmthandler(HTC_ENDPOINT_ID EndPt, adf_nbuf_t hdr_buf,
				    adf_nbuf_t buf, void *ServiceCtx)
{
  907be0:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)ServiceCtx;

	ath_tgt_send_mgt(sc,hdr_buf,buf,EndPt);
  907be3:	da50      	mov.n	a10, a5
  907be5:	db30      	mov.n	a11, a3
  907be7:	dc40      	mov.n	a12, a4
  907be9:	dd20      	mov.n	a13, a2
  907beb:	58189a        	call8	90de54 <ath_tgt_send_mgt>
  907bee:	d10f      	retw.n

00907bf0 <ath_tgt_rx_tasklet>:

	return 0;
}

static void ath_tgt_rx_tasklet(TQUEUE_ARG data)
{
  907bf0:	6c1006        	entry	a1, 48
	struct ath_softc_tgt *sc  = (struct ath_softc_tgt *)data;
	struct ath_rx_buf *bf = NULL;
	struct ath_hal *ah = sc->sc_ah;
  907bf3:	232d05        	addmi	a3, a2, 0x500
  907bf6:	853b      	l32i.n	a5, a3, 44
			continue;
		}

		asf_tailq_remove(&sc->sc_rxbuf, bf, bf_list);

		bf->bf_skb = NULL;
  907bf8:	c060      	movi.n	a6, 0
	struct rx_frame_header *rxhdr;
	struct ath_rx_status *rxstats;
	adf_nbuf_t skb = ADF_NBUF_NULL;

	do {
		bf = asf_tailq_first(&sc->sc_rxbuf);
  907bfa:	2322d5        	l32i	a3, a2, 0x354
		if (bf == NULL) {
  907bfd:	64309c        	beqz	a3, 907c9d <ath_tgt_rx_tasklet+0xad>
			break;
		}

		if (!(bf->bf_status & ATH_BUFSTATUS_DONE)) {
  907c00:	843f      	l32i.n	a4, a3, 60
  907c02:	7f4f02        	bbsi	a4, 31, 907c08 <ath_tgt_rx_tasklet+0x18>
  907c05:	600094        	j	907c9d <ath_tgt_rx_tasklet+0xad>
			break;
		}

		skb = bf->bf_skb;
  907c08:	8938      	l32i.n	a9, a3, 32
		if (skb == NULL) {
  907c0a:	649ff2        	beqz	a9, 907c00 <ath_tgt_rx_tasklet+0x10>
			continue;
		}

		asf_tailq_remove(&sc->sc_rxbuf, bf, bf_list);
  907c0d:	8439      	l32i.n	a4, a3, 36
  907c0f:	873a      	l32i.n	a7, a3, 40
  907c11:	c844      	beqz.n	a4, 907c19 <ath_tgt_rx_tasklet+0x29>
  907c13:	974a      	s32i.n	a7, a4, 40
  907c15:	600003        	j	907c1c <ath_tgt_rx_tasklet+0x2c>
  907c18:	002726        	excw
  907c1b:	d687      	excw
  907c1d:	3ada90        	excw
  907c20:	9470      	s32i.n	a4, a7, 0

		bf->bf_skb = NULL;
  907c22:	9638      	s32i.n	a6, a3, 32
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  907c24:	2b0a28        	movi	a11, 40
  907c27:	291600        	s32i	a9, a1, 0
  907c2a:	5bfb3e        	call8	906924 <__adf_nbuf_push_head>
 * @param[in] size    buffer size
 */
static inline void
adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    __adf_os_mem_copy(dst, src, size);
  907c2d:	2b3c40        	addi	a11, a3, 64
  907c30:	2c0a28        	movi	a12, 40
  907c33:	0aa702        	or	a7, a10, a10
  907c36:	5bffc9        	call8	907b5c <__adf_os_mem_copy>
/*
 * Extend a 32 bit TSF to 64 bit, taking wrapping into account.
 */
static u_int64_t ath_extend_tsf(struct ath_softc_tgt *sc, u_int32_t rstamp)
{
	struct ath_hal *ah = sc->sc_ah;
  907c39:	282d05        	addmi	a8, a2, 0x500
  907c3c:	8a8b      	l32i.n	a10, a8, 44
						     sizeof(struct rx_frame_header));
		rxstats = (struct ath_rx_status *)(&rxhdr->rx_stats[0]);
		adf_os_mem_copy(rxstats, &(bf->bf_rx_status),
				sizeof(struct ath_rx_status));

		rxstats->rs_tstamp = ath_extend_tsf(sc, (u_int32_t)rxstats->rs_tstamp);
  907c3e:	8471      	l32i.n	a4, a7, 4
	struct ath_hal *ah = sc->sc_ah;
	u_int64_t tsf;
	u_int32_t tsf_low;
	u_int64_t tsf64;

	tsf = ah->ah_getTsf64(ah);
  907c40:	28a21e        	l32i	a8, a10, 120
  907c43:	0b8000        	callx8	a8
	tsf_low = tsf & 0xffffffff;
	tsf64 = (tsf & ~0xffffffffULL) | rstamp;
  907c46:	d8a0      	mov.n	a8, a10

	if (rstamp > tsf_low && (rstamp - tsf_low > 0x10000000))
  907c48:	8910      	l32i.n	a9, a1, 0
  907c4a:	74bb0a        	bgeu	a11, a4, 907c58 <ath_tgt_rx_tasklet+0x68>
  907c4d:	1c69f8        	l32r	a12, 8e2430 <athos_indirection_table_install+0xebc>
  907c50:	0b4a0c        	sub	a10, a4, a11
  907c53:	7acb01        	bgeu	a12, a10, 907c58 <ath_tgt_rx_tasklet+0x68>
		tsf64 -= 0x100000000ULL;
  907c56:	b088      	addi.n	a8, a8, -1

	if (rstamp < tsf_low && (tsf_low - rstamp > 0x10000000))
  907c58:	7b4b0a        	bgeu	a4, a11, 907c66 <ath_tgt_rx_tasklet+0x76>
  907c5b:	1a69f8        	l32r	a10, 8e243c <athos_indirection_table_install+0xec8>
  907c5e:	04bb0c        	sub	a11, a11, a4
  907c61:	7bab01        	bgeu	a10, a11, 907c66 <ath_tgt_rx_tasklet+0x76>
		tsf64 += 0x100000000ULL;
  907c64:	b188      	addi.n	a8, a8, 1
						     sizeof(struct rx_frame_header));
		rxstats = (struct ath_rx_status *)(&rxhdr->rx_stats[0]);
		adf_os_mem_copy(rxstats, &(bf->bf_rx_status),
				sizeof(struct ath_rx_status));

		rxstats->rs_tstamp = ath_extend_tsf(sc, (u_int32_t)rxstats->rs_tstamp);
  907c66:	9471      	s32i.n	a4, a7, 4

		HTC_SendMsg(sc->tgt_htc_handle, RX_ENDPOINT_ID, skb);
  907c68:	146913        	l32r	a4, 8e20b4 <athos_indirection_table_install+0xb40>
  907c6b:	8a22      	l32i.n	a10, a2, 8
  907c6d:	244284        	l32i	a4, a4, 0x210
						     sizeof(struct rx_frame_header));
		rxstats = (struct ath_rx_status *)(&rxhdr->rx_stats[0]);
		adf_os_mem_copy(rxstats, &(bf->bf_rx_status),
				sizeof(struct ath_rx_status));

		rxstats->rs_tstamp = ath_extend_tsf(sc, (u_int32_t)rxstats->rs_tstamp);
  907c70:	9870      	s32i.n	a8, a7, 0

		HTC_SendMsg(sc->tgt_htc_handle, RX_ENDPOINT_ID, skb);
  907c72:	c0b3      	movi.n	a11, 3
  907c74:	dc90      	mov.n	a12, a9
  907c76:	0b4000        	callx8	a4
		sc->sc_rx_stats.ast_rx_send++;
  907c79:	24227d        	l32i	a4, a2, 0x1f4

		bf->bf_status &= ~ATH_BUFSTATUS_DONE;
  907c7c:	873f      	l32i.n	a7, a3, 60
				sizeof(struct ath_rx_status));

		rxstats->rs_tstamp = ath_extend_tsf(sc, (u_int32_t)rxstats->rs_tstamp);

		HTC_SendMsg(sc->tgt_htc_handle, RX_ENDPOINT_ID, skb);
		sc->sc_rx_stats.ast_rx_send++;
  907c7e:	b144      	addi.n	a4, a4, 1
  907c80:	24267d        	s32i	a4, a2, 0x1f4

		bf->bf_status &= ~ATH_BUFSTATUS_DONE;
  907c83:	c74e      	movi.n	a4, -2
  907c85:	047401        	and	a4, a7, a4
  907c88:	943f      	s32i.n	a4, a3, 60
		asf_tailq_insert_tail(&sc->sc_rxbuf, bf, bf_list);
  907c8a:	2422d6        	l32i	a4, a2, 0x358
  907c8d:	9639      	s32i.n	a6, a3, 36
  907c8f:	943a      	s32i.n	a4, a3, 40
  907c91:	9340      	s32i.n	a3, a4, 0
  907c93:	233c24        	addi	a3, a3, 36
  907c96:	2326d6        	s32i	a3, a2, 0x358
  907c99:	63ff5d        	j	907bfa <ath_tgt_rx_tasklet+0xa>
  907c9c:	002322        	excw

	} while(1);

	sc->sc_imask |= HAL_INT_RX;
  907c9f:	c4c0      	movi.n	a12, 64
  907ca1:	b103      	addi.n	a3, a0, 1
  907ca3:	bb02      	addi.n	a2, a0, 11
  907ca5:	2b26c4        	s32i	a11, a2, 0x310
	ah->ah_setInterrupts(ah, sc->sc_imask);
  907ca8:	225228        	l32i	a2, a5, 160
  907cab:	da50      	mov.n	a10, a5
  907cad:	0b2000        	callx8	a2
  907cb0:	d10f      	retw.n
	...

00907cb4 <ath_descdma_cleanup>:
}

static void ath_descdma_cleanup(struct ath_softc_tgt *sc,
				struct ath_descdma *dd,
				ath_bufhead *head, a_int32_t dir)
{
  907cb4:	6c1006        	entry	a1, 48
	struct ath_buf *bf;
	struct ieee80211_node_target *ni;

	asf_tailq_foreach(bf, head, bf_list) {
  907cb7:	8740      	l32i.n	a7, a4, 0
  907cb9:	60007d        	j	907d3a <ath_descdma_cleanup+0x86>
		if (adf_nbuf_queue_len(&bf->bf_skbhead) != 0) {
  907cbc:	267c14        	addi	a6, a7, 20
 * @return length of the queue
 */
static inline a_uint32_t
adf_nbuf_queue_len(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_len(head);
  907cbf:	da60      	mov.n	a10, a6
  907cc1:	5bfbfc        	call8	906cb4 <__adf_nbuf_queue_len>
  907cc4:	d9a0      	mov.n	a9, a10
  907cc6:	cbac      	beqz.n	a10, 907d06 <ath_descdma_cleanup+0x52>
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  907cc8:	2a2246        	l32i	a10, a2, 0x118
  907ccb:	2b7200        	l32i	a11, a7, 0
  907cce:	055c02        	or	a12, a5, a5
  907cd1:	5bfb68        	call8	906a74 <__adf_nbuf_unmap>
  907cd4:	600021        	j	907cf9 <ath_descdma_cleanup+0x45>
  907cd7:	000018        	src	a0, a0, a0
			adf_nbuf_unmap(sc->sc_dev, bf->bf_dmamap, dir);
			while(adf_nbuf_queue_len(&bf->bf_skbhead) != 0) {
				ath_free_rx_skb(sc,
  907cda:	69138b        	bnei	a1, 3, 907c69 <ath_tgt_rx_tasklet+0x79>
  907cdd:	202982        	l16si	a0, a2, 0x104
  907ce0:	9eda      	s32i.n	a14, a13, 40
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  907ce2:	609911        	j	9115f7 <_etext+0x250a>
  907ce5:	9b10      	s32i.n	a11, a1, 0
  907ce7:	5bfb4f        	call8	906a24 <__adf_nbuf_queue_remove>
  907cea:	8b10      	l32i.n	a11, a1, 0
  907cec:	8911      	l32i.n	a9, a1, 4
  907cee:	0aac02        	or	a12, a10, a10
  907cf1:	0bba02        	or	a10, a11, a11
  907cf4:	c0b3      	movi.n	a11, 3
  907cf6:	0b9000        	callx8	a9
 * @return length of the queue
 */
static inline a_uint32_t
adf_nbuf_queue_len(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_len(head);
  907cf9:	da60      	mov.n	a10, a6
  907cfb:	5bfbee        	call8	906cb4 <__adf_nbuf_queue_len>
	struct ieee80211_node_target *ni;

	asf_tailq_foreach(bf, head, bf_list) {
		if (adf_nbuf_queue_len(&bf->bf_skbhead) != 0) {
			adf_nbuf_unmap(sc->sc_dev, bf->bf_dmamap, dir);
			while(adf_nbuf_queue_len(&bf->bf_skbhead) != 0) {
  907cfe:	65afd7        	bnez	a10, 907cd9 <ath_descdma_cleanup+0x25>
				ath_free_rx_skb(sc,
					adf_nbuf_queue_remove(&bf->bf_skbhead));
			}
			bf->bf_skb = NULL;
  907d01:	9a78      	s32i.n	a10, a7, 32
  907d03:	600025        	j	907d2c <ath_descdma_cleanup+0x78>
		} else if (bf->bf_skb != NULL) {
  907d06:	8678      	l32i.n	a6, a7, 32
  907d08:	ca60      	beqz.n	a6, 907d2c <ath_descdma_cleanup+0x78>
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  907d0a:	2b7200        	l32i	a11, a7, 0
  907d0d:	2a2246        	l32i	a10, a2, 0x118
  907d10:	055c02        	or	a12, a5, a5
  907d13:	291601        	s32i	a9, a1, 4
  907d16:	5bfb57        	call8	906a74 <__adf_nbuf_unmap>
			adf_nbuf_unmap(sc->sc_dev,bf->bf_dmamap, dir);
			ath_free_rx_skb(sc, bf->bf_skb);
  907d19:	186913        	l32r	a8, 8e2168 <athos_indirection_table_install+0xbf4>
  907d1c:	8a20      	l32i.n	a10, a2, 0
  907d1e:	26829e        	l32i	a6, a8, 0x278
  907d21:	8c78      	l32i.n	a12, a7, 32
  907d23:	c0b3      	movi.n	a11, 3
  907d25:	0b6000        	callx8	a6
			bf->bf_skb = NULL;
  907d28:	8911      	l32i.n	a9, a1, 4
  907d2a:	9978      	s32i.n	a9, a7, 32
 * @param[in] dmap
 */
static inline void
adf_nbuf_dmamap_destroy(adf_os_device_t osdev, adf_os_dma_map_t dmap)
{
    __adf_nbuf_dmamap_destroy(osdev, dmap);
  907d2c:	8b70      	l32i.n	a11, a7, 0
  907d2e:	2a2246        	l32i	a10, a2, 0x118
		}

		adf_nbuf_dmamap_destroy(sc->sc_dev, bf->bf_dmamap);

		ni = bf->bf_node;
		bf->bf_node = NULL;
  907d31:	c060      	movi.n	a6, 0
  907d33:	5bfb53        	call8	906a80 <__adf_nbuf_dmamap_destroy>
  907d36:	9674      	s32i.n	a6, a7, 16
				ath_bufhead *head, a_int32_t dir)
{
	struct ath_buf *bf;
	struct ieee80211_node_target *ni;

	asf_tailq_foreach(bf, head, bf_list) {
  907d38:	8779      	l32i.n	a7, a7, 36
  907d3a:	657f7e        	bnez	a7, 907cbc <ath_descdma_cleanup+0x8>
	}

	adf_os_dmamem_free(sc->sc_dev, dd->dd_desc_len,
			   1, dd->dd_desc, dd->dd_desc_dmamap);

	asf_tailq_init(head);
  907d3d:	9740      	s32i.n	a7, a4, 0
  907d3f:	9441      	s32i.n	a4, a4, 4
 * @param[in] size  buffer size
 */
static inline void
adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
    __adf_os_mem_set(buf, b, size);
  907d41:	da30      	mov.n	a10, a3
  907d43:	db70      	mov.n	a11, a7
  907d45:	c1c8      	movi.n	a12, 24
  907d47:	5bff8a        	call8	907b70 <__adf_os_mem_set>
  907d4a:	d10f      	retw.n

00907d4c <__adf_os_init_bh$isra$4>:
									  void 				*arg)
{
	__adf_os_init_defer(work, func, arg);
}

static inline void	__adf_os_init_bh(adf_os_handle_t  hdl,
  907d4c:	6c1004        	entry	a1, 32
									 __adf_os_bh_t		*bh,
									 adf_os_defer_fn_t	func,
									 void				*arg)
{
	//__adf_os_init_defer(bh, func, arg);
	A_TASKLET_INIT_TASK(func, arg, bh);
  907d4f:	186913        	l32r	a8, 8e219c <athos_indirection_table_install+0xc28>
  907d52:	da30      	mov.n	a10, a3
  907d54:	28826a        	l32i	a8, a8, 0x1a8
  907d57:	db40      	mov.n	a11, a4
  907d59:	dc20      	mov.n	a12, a2
  907d5b:	0b8000        	callx8	a8
  907d5e:	d10f      	retw.n

00907d60 <__adf_os_sched_bh$isra$5>:
                                         __adf_os_work_t  * work)
{
    //taskqueue_drain(taskqueue_thread, &work->tsk);
}

static inline void __adf_os_sched_bh(adf_os_handle_t  hdl, 
  907d60:	6c1004        	entry	a1, 32
                                       __adf_os_bh_t  * bh)
{
    A_TASKLET_SCHEDULE(bh);
  907d63:	186913        	l32r	a8, 8e21b0 <athos_indirection_table_install+0xc3c>
  907d66:	da20      	mov.n	a10, a2
  907d68:	28826c        	l32i	a8, a8, 0x1b0
  907d6b:	0b8000        	callx8	a8
  907d6e:	d10f      	retw.n

00907d70 <ath_rxdesc_init>:
				       RX_HEADER_SPACE, align);
	return skb;
}

static a_int32_t ath_rxdesc_init(struct ath_softc_tgt *sc, struct ath_rx_desc *ds)
{
  907d70:	6c1006        	entry	a1, 48
	struct ath_hal *ah = sc->sc_ah;
  907d73:	242d05        	addmi	a4, a2, 0x500
  907d76:	854b      	l32i.n	a5, a4, 44
	struct ath_rx_desc *ds_held;
	a_uint8_t *anbdata;
	a_uint32_t anblen;

	if (!sc->sc_rxdesc_held) {
  907d78:	2422db        	l32i	a4, a2, 0x36c
		sc->sc_rxdesc_held = ds;
  907d7b:	2326db        	s32i	a3, a2, 0x36c
	struct ath_hal *ah = sc->sc_ah;
	struct ath_rx_desc *ds_held;
	a_uint8_t *anbdata;
	a_uint32_t anblen;

	if (!sc->sc_rxdesc_held) {
  907d7e:	cc43      	bnez.n	a4, 907d85 <ath_rxdesc_init+0x15>
  907d80:	60017c        	j	907f00 <ath_rxdesc_init+0x190>
  907d83:	000029        	excw

	ds_held = sc->sc_rxdesc_held;
	sc->sc_rxdesc_held = ds;
	ds = ds_held;

	if (ds->ds_nbuf == ADF_NBUF_NULL) {
  907d86:	403428        	excw
  907d89:	403523        	excw
  907d8c:	403608        	excw
  907d8f:	9910      	s32i.n	a9, a1, 0
  907d91:	008811        	slli	a8, a8, 16
  907d94:	098802        	or	a8, a8, a9
  907d97:	083311        	slli	a3, a3, 8
  907d9a:	083302        	or	a3, a3, a8
  907d9d:	284037        	l8ui	a8, a4, 55
  907da0:	038302        	or	a3, a8, a3
  907da3:	6530b6        	bnez	a3, 907e5d <ath_rxdesc_init+0xed>
static adf_nbuf_t ath_alloc_skb_align(struct ath_softc_tgt *sc,
				      a_uint32_t size, a_uint32_t align)
{
	adf_nbuf_t skb;

	skb = BUF_Pool_alloc_buf_align(sc->pool_handle, POOL_ID_WLAN_RX_BUF,
  907da6:	136913        	l32r	a3, 8e21f4 <athos_indirection_table_install+0xc80>
  907da9:	8a20      	l32i.n	a10, a2, 0
  907dab:	23329d        	l32i	a3, a3, 0x274
  907dae:	2d2196        	l16ui	a13, a2, 0x12c
  907db1:	c3c0      	movi.n	a12, 48
  907db3:	c0b3      	movi.n	a11, 3
  907db5:	0b3000        	callx8	a3
	ds_held = sc->sc_rxdesc_held;
	sc->sc_rxdesc_held = ds;
	ds = ds_held;

	if (ds->ds_nbuf == ADF_NBUF_NULL) {
		ds->ds_nbuf = ath_alloc_skb_align(sc, sc->sc_rxbufsize, sc->sc_cachelsz);
  907db8:	0a8357        	extui	a3, a10, 24, 8
  907dbb:	234434        	s8i	a3, a4, 52
  907dbe:	0a0357        	extui	a3, a10, 16, 8
  907dc1:	234435        	s8i	a3, a4, 53
  907dc4:	0a8347        	extui	a3, a10, 8, 8
  907dc7:	234436        	s8i	a3, a4, 54
  907dca:	2a4437        	s8i	a10, a4, 55
static adf_nbuf_t ath_alloc_skb_align(struct ath_softc_tgt *sc,
				      a_uint32_t size, a_uint32_t align)
{
	adf_nbuf_t skb;

	skb = BUF_Pool_alloc_buf_align(sc->pool_handle, POOL_ID_WLAN_RX_BUF,
  907dcd:	dca0      	mov.n	a12, a10
	sc->sc_rxdesc_held = ds;
	ds = ds_held;

	if (ds->ds_nbuf == ADF_NBUF_NULL) {
		ds->ds_nbuf = ath_alloc_skb_align(sc, sc->sc_rxbufsize, sc->sc_cachelsz);
		if (ds->ds_nbuf == ADF_NBUF_NULL) {
  907dcf:	ccad      	bnez.n	a10, 907de0 <ath_rxdesc_init+0x70>
			sc->sc_rxdesc_held = ds;
			sc->sc_rx_stats.ast_rx_nobuf++;
  907dd1:	23227c        	l32i	a3, a2, 0x1f0
	ds = ds_held;

	if (ds->ds_nbuf == ADF_NBUF_NULL) {
		ds->ds_nbuf = ath_alloc_skb_align(sc, sc->sc_rxbufsize, sc->sc_cachelsz);
		if (ds->ds_nbuf == ADF_NBUF_NULL) {
			sc->sc_rxdesc_held = ds;
  907dd4:	2426db        	s32i	a4, a2, 0x36c
			sc->sc_rx_stats.ast_rx_nobuf++;
  907dd7:	b133      	addi.n	a3, a3, 1
  907dd9:	23267c        	s32i	a3, a2, 0x1f0
			return ENOMEM;
  907ddc:	c72f      	movi.n	a2, -1
  907dde:	d10f      	retw.n
		}
		adf_nbuf_map(sc->sc_dev, ds->ds_dmap, ds->ds_nbuf, ADF_OS_DMA_FROM_DEVICE);
  907de0:	294038        	l8ui	a9, a4, 56
  907de3:	284039        	l8ui	a8, a4, 57
  907de6:	23403a        	l8ui	a3, a4, 58
  907de9:	089910        	slli	a9, a9, 24
  907dec:	008811        	slli	a8, a8, 16
  907def:	098802        	or	a8, a8, a9
  907df2:	2b403b        	l8ui	a11, a4, 59
  907df5:	083311        	slli	a3, a3, 8
  907df8:	083302        	or	a3, a3, a8
adf_nbuf_map(adf_os_device_t        osdev, 
             adf_os_dma_map_t       bmap, 
             adf_nbuf_t             buf, 
             adf_os_dma_dir_t       dir)
{
    return __adf_nbuf_map(osdev, bmap, buf, dir);
  907dfb:	2a2246        	l32i	a10, a2, 0x118
  907dfe:	03bb02        	or	a11, a11, a3
  907e01:	c0d1      	movi.n	a13, 1
  907e03:	5bfb19        	call8	906a68 <__adf_nbuf_map>
		adf_nbuf_dmamap_info(ds->ds_dmap, &ds->ds_dmap_info);
  907e06:	294038        	l8ui	a9, a4, 56
  907e09:	284039        	l8ui	a8, a4, 57
  907e0c:	23403a        	l8ui	a3, a4, 58
  907e0f:	089910        	slli	a9, a9, 24
  907e12:	008811        	slli	a8, a8, 16
  907e15:	098802        	or	a8, a8, a9
  907e18:	2a403b        	l8ui	a10, a4, 59
  907e1b:	083311        	slli	a3, a3, 8
  907e1e:	083302        	or	a3, a3, a8
 * @param[out] sg   map info
 */
static inline void
adf_nbuf_dmamap_info(adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
    __adf_nbuf_dmamap_info(bmap, sg);
  907e21:	03aa02        	or	a10, a10, a3
  907e24:	2b4c3c        	addi	a11, a4, 60
  907e27:	5bfb18        	call8	906a88 <__adf_nbuf_dmamap_info>
		ds->ds_data = ds->ds_dmap_info.dma_segs[0].paddr;
  907e2a:	294040        	l8ui	a9, a4, 64
  907e2d:	234041        	l8ui	a3, a4, 65
  907e30:	284042        	l8ui	a8, a4, 66
  907e33:	089910        	slli	a9, a9, 24
  907e36:	003311        	slli	a3, a3, 16
  907e39:	093302        	or	a3, a3, a9
  907e3c:	088811        	slli	a8, a8, 8
  907e3f:	038802        	or	a8, a8, a3
  907e42:	234043        	l8ui	a3, a4, 67
  907e45:	083802        	or	a8, a3, a8
  907e48:	088357        	extui	a3, a8, 24, 8
  907e4b:	234404        	s8i	a3, a4, 4
  907e4e:	080357        	extui	a3, a8, 16, 8
  907e51:	234405        	s8i	a3, a4, 5
  907e54:	088347        	extui	a3, a8, 8, 8
  907e57:	234406        	s8i	a3, a4, 6
  907e5a:	284407        	s8i	a8, a4, 7
	}

	ds->ds_link = 0;
  907e5d:	c080      	movi.n	a8, 0
  907e5f:	284400        	s8i	a8, a4, 0
  907e62:	284401        	s8i	a8, a4, 1
  907e65:	284402        	s8i	a8, a4, 2
  907e68:	284403        	s8i	a8, a4, 3
	adf_nbuf_peek_header(ds->ds_nbuf, &anbdata, &anblen);
  907e6b:	294034        	l8ui	a9, a4, 52
  907e6e:	284035        	l8ui	a8, a4, 53
  907e71:	234036        	l8ui	a3, a4, 54
  907e74:	089910        	slli	a9, a9, 24
  907e77:	008811        	slli	a8, a8, 16
  907e7a:	098802        	or	a8, a8, a9
  907e7d:	2a4037        	l8ui	a10, a4, 55
  907e80:	083311        	slli	a3, a3, 8
  907e83:	083302        	or	a3, a3, a8
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  907e86:	03aa02        	or	a10, a10, a3
  907e89:	b41b      	addi.n	a11, a1, 4
  907e8b:	dc10      	mov.n	a12, a1
  907e8d:	5bfb7f        	call8	906c8c <__adf_nbuf_peek_header>

	ah->ah_setupRxDesc(ds, adf_nbuf_tailroom(ds->ds_nbuf), 0);
  907e90:	2a4034        	l8ui	a10, a4, 52
  907e93:	294035        	l8ui	a9, a4, 53
  907e96:	284036        	l8ui	a8, a4, 54
  907e99:	08aa10        	slli	a10, a10, 24
  907e9c:	009911        	slli	a9, a9, 16
  907e9f:	0a9902        	or	a9, a9, a10
  907ea2:	088811        	slli	a8, a8, 8
  907ea5:	2a4037        	l8ui	a10, a4, 55
  907ea8:	098802        	or	a8, a8, a9
 * @return amount of tail room 
 */
static inline a_uint32_t
adf_nbuf_tailroom(adf_nbuf_t buf)
{
    return (__adf_nbuf_tailroom(buf));
  907eab:	08aa02        	or	a10, a10, a8
  907eae:	235220        	l32i	a3, a5, 128
  907eb1:	5bfb67        	call8	906c50 <__adf_nbuf_tailroom>
  907eb4:	dba0      	mov.n	a11, a10
  907eb6:	c0c0      	movi.n	a12, 0
  907eb8:	da40      	mov.n	a10, a4
  907eba:	0b3000        	callx8	a3
  907ebd:	2a4048        	l8ui	a10, a4, 72
  907ec0:	294049        	l8ui	a9, a4, 73

	if (sc->sc_rxlink == NULL) {
		ah->ah_setRxDP(ah, ds->ds_daddr);
  907ec3:	08aa10        	slli	a10, a10, 24
  907ec6:	009911        	slli	a9, a9, 16
  907ec9:	0a9a02        	or	a10, a9, a10
  907ecc:	29404a        	l8ui	a9, a4, 74
	ds->ds_link = 0;
	adf_nbuf_peek_header(ds->ds_nbuf, &anbdata, &anblen);

	ah->ah_setupRxDesc(ds, adf_nbuf_tailroom(ds->ds_nbuf), 0);

	if (sc->sc_rxlink == NULL) {
  907ecf:	2822ef        	l32i	a8, a2, 0x3bc
		ah->ah_setRxDP(ah, ds->ds_daddr);
  907ed2:	089911        	slli	a9, a9, 8
  907ed5:	0a9902        	or	a9, a9, a10
	ds->ds_link = 0;
	adf_nbuf_peek_header(ds->ds_nbuf, &anbdata, &anblen);

	ah->ah_setupRxDesc(ds, adf_nbuf_tailroom(ds->ds_nbuf), 0);

	if (sc->sc_rxlink == NULL) {
  907ed8:	cd81      	bnez.n	a8, 907eed <ath_rxdesc_init+0x17d>
		ah->ah_setRxDP(ah, ds->ds_daddr);
  907eda:	2b404b        	l8ui	a11, a4, 75
  907edd:	23521f        	l32i	a3, a5, 124
  907ee0:	da50      	mov.n	a10, a5
  907ee2:	09bb02        	or	a11, a11, a9
  907ee5:	0b3000        	callx8	a3
  907ee8:	600009        	j	907ef5 <ath_rxdesc_init+0x185>
  907eeb:	000023        	excw
	}
	else {
		*sc->sc_rxlink = ds->ds_daddr;
  907eee:	404b09        	excw
  907ef1:	390299        	excw
  907ef4:	8024      	l32i.n	a0, a2, 16
	}
	sc->sc_rxlink = &ds->ds_link;
  907ef6:	26ef22        	s32ri	a6, a14, 136
	ah->ah_enableReceive(ah);
  907ef9:	5225da        	call0	891664 <_bss_end+0x37e754>
  907efc:	500b20        	call0	90ab80 <zfTurnOffPower_patch+0xd0>
  907eff:	00c020        	excw

	return 0;
}
  907f02:	d10f      	retw.n

00907f04 <ath_pll_reset_ones$isra$9>:
	}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &val[0], datalen);
}

static void ath_pll_reset_ones(struct ath_hal *ah)
  907f04:	6c1004        	entry	a1, 32
{
	static uint8_t reset_pll = 0;

	if(reset_pll == 0) {
  907f07:	1969f9        	l32r	a9, 8e26ec <athos_indirection_table_install+0x1178>
  907f0a:	289000        	l8ui	a8, a9, 0
  907f0d:	ce87      	bnez.n	a8, 907f38 <ath_pll_reset_ones$isra$9+0x34>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  907f0f:	1869fa        	l32r	a8, 8e26f8 <athos_indirection_table_install+0x1184>
			 ioread32_mac(0x786c) & (~0x6000000));

		iowrite32(MAGPIE_REG_RST_PWDN_CTRL_ADDR, 0x20);

#elif defined(PROJECT_MAGPIE) && !defined (FPGA)
		iowrite32_mac(0x7890,
  907f12:	1a69fb        	l32r	a10, 8e2700 <athos_indirection_table_install+0x118c>
  907f15:	0c0200        	memw
  907f18:	8b80      	l32i.n	a11, a8, 0
  907f1a:	0aba02        	or	a10, a11, a10
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  907f1d:	0c0200        	memw
  907f20:	9a80      	s32i.n	a10, a8, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  907f22:	0c0200        	memw
  907f25:	8b80      	l32i.n	a11, a8, 0
			 ioread32_mac(0x7890) | 0x1800000);
		iowrite32_mac(0x7890,
  907f27:	1a69fc        	l32r	a10, 8e2718 <athos_indirection_table_install+0x11a4>
  907f2a:	0aba01        	and	a10, a11, a10
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  907f2d:	0c0200        	memw
  907f30:	9a80      	s32i.n	a10, a8, 0
			 ioread32_mac(0x7890) & (~0x1800000));
#endif
		reset_pll = 1;
  907f32:	280a01        	movi	a8, 1
  907f35:	289400        	s8i	a8, a9, 0
  907f38:	d10f      	retw.n
	...

00907f3c <tgt_ServiceConnect>:
				  HTC_ENDPOINT_ID eid,
				  A_UINT8 *pDataIn,
				  a_int32_t LengthIn,
				  A_UINT8 *pDataOut,
				  a_int32_t *pLengthOut)
{
  907f3c:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)pService->ServiceCtx;
  907f3f:	8826      	l32i.n	a8, a2, 24

	switch(pService->ServiceID) {
  907f41:	222108        	l16ui	a2, a2, 16
  907f44:	c098      	movi.n	a9, 8
  907f46:	222dff        	addmi	a2, a2, 0xffffff00
  907f49:	02024f        	extui	a2, a2, 0, 16
  907f4c:	729341        	bltu	a9, a2, 907f91 <tgt_ServiceConnect+0x55>
  907f4f:	1969fd        	l32r	a9, 8e2744 <athos_indirection_table_install+0x11d0>
  907f52:	09220a        	addx4	a2, a2, a9
  907f55:	8220      	l32i.n	a2, a2, 0
  907f57:	0a2000        	jx	a2
  907f5a:	002386        	excw
	case WMI_CONTROL_SVC:
		sc->wmi_command_ep= eid;
  907f5d:	3c6000        	excw
		break;
  907f60:	462386        	excw
	case WMI_BEACON_SVC:
		sc->beacon_ep= eid;
  907f63:	3d6000        	excw
		break;
  907f66:	402386        	excw
	case WMI_CAB_SVC:
		sc->cab_ep= eid;
  907f69:	3e6000        	excw
		break;
  907f6c:	3a2386        	excw
	case WMI_UAPSD_SVC:
		sc->uapsd_ep= eid;
  907f6f:	3f6000        	excw
		break;
  907f72:	342386        	excw
	case WMI_MGMT_SVC:
		sc->mgmt_ep= eid;
  907f75:	406000        	excw
		break;
  907f78:	2e2386        	excw
	case WMI_DATA_VO_SVC:
		sc->data_VO_ep = eid;
  907f7b:	416000        	excw
		break;
  907f7e:	282386        	excw
	case WMI_DATA_VI_SVC:
		sc->data_VI_ep = eid;
  907f81:	426000        	excw
		break;
  907f84:	222386        	excw
	case WMI_DATA_BE_SVC:
		sc->data_BE_ep = eid;
  907f87:	436000        	excw
		break;
  907f8a:	1c2386        	l32r	a12, 8d0da4 <_bss_end+0x3bde94>
	case WMI_DATA_BK_SVC:
		sc->data_BK_ep = eid;
  907f8d:	446000        	excw
		break;
  907f90:	161269        	l32r	a6, 8cc934 <_bss_end+0x3b9a24>
	default:
		adf_os_assert(0);
  907f93:	131a69        	l32r	a3, 8ce938 <_bss_end+0x3bba28>
  907f96:	f4          	.byte 0xf4
  907f97:	222212        	l32i	a2, a2, 72
  907f9a:	1b69fe        	l32r	a11, 8e2794 <athos_indirection_table_install+0x1220>
  907f9d:	0b2000        	callx8	a2
  907fa0:	126978        	l32r	a2, 8e2580 <athos_indirection_table_install+0x100c>
  907fa3:	0c0200        	memw
  907fa6:	8220      	l32i.n	a2, a2, 0
	}

	return HTC_SERVICE_SUCCESS;
}
  907fa8:	c020      	movi.n	a2, 0
  907faa:	d10f      	retw.n

00907fac <ath_reg_read_filter>:

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static a_int32_t ath_reg_read_filter(struct ath_hal *ah, a_int32_t addr)
{
  907fac:	6c1004        	entry	a1, 32
	if ((addr & 0xffffe000) == 0x2000) {
  907faf:	1969ff        	l32r	a9, 8e27ac <athos_indirection_table_install+0x1238>
  907fb2:	186a00        	l32r	a8, 8e27b4 <athos_indirection_table_install+0x1240>
  907fb5:	093901        	and	a9, a3, a9
  907fb8:	789935        	bne	a9, a8, 907ff1 <ath_reg_read_filter+0x45>
		/* SEEPROM registers */
		ioread32_mac(addr);
  907fbb:	186a01        	l32r	a8, 8e27c0 <athos_indirection_table_install+0x124c>
		if (!ath_hal_wait(ah, 0x407c, 0x00030000, 0))
  907fbe:	1b6a02        	l32r	a11, 8e27c8 <athos_indirection_table_install+0x1254>

static a_int32_t ath_reg_read_filter(struct ath_hal *ah, a_int32_t addr)
{
	if ((addr & 0xffffe000) == 0x2000) {
		/* SEEPROM registers */
		ioread32_mac(addr);
  907fc1:	a838      	add.n	a8, a3, a8
		if (!ath_hal_wait(ah, 0x407c, 0x00030000, 0))
  907fc3:	1c6a03        	l32r	a12, 8e27d0 <athos_indirection_table_install+0x125c>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  907fc6:	0c0200        	memw
  907fc9:	8880      	l32i.n	a8, a8, 0
  907fcb:	022a02        	or	a10, a2, a2
  907fce:	2d0a00        	movi	a13, 0
  907fd1:	580b9d        	call8	90ae48 <ath_hal_wait>
  907fd4:	ccac      	bnez.n	a10, 907fe4 <ath_reg_read_filter+0x38>
			adf_os_print("SEEPROM Read fail: 0x%08x\n", addr);
  907fd6:	126913        	l32r	a2, 8e2424 <athos_indirection_table_install+0xeb0>
  907fd9:	1a6a04        	l32r	a10, 8e27ec <athos_indirection_table_install+0x1278>
  907fdc:	222212        	l32i	a2, a2, 72
  907fdf:	db30      	mov.n	a11, a3
  907fe1:	0b2000        	callx8	a2
  907fe4:	126a05        	l32r	a2, 8e27f8 <athos_indirection_table_install+0x1284>
  907fe7:	0c0200        	memw
  907fea:	8220      	l32i.n	a2, a2, 0

		return ioread32_mac(0x407c) & 0x0000ffff;
  907fec:	02024f        	extui	a2, a2, 0, 16
  907fef:	d10f      	retw.n
	} else if (addr > 0xffff)
  907ff1:	126a06        	l32r	a2, 8e280c <athos_indirection_table_install+0x1298>
  907ff4:	732a04        	bge	a2, a3, 907ffc <ath_reg_read_filter+0x50>
  907ff7:	600006        	j	908001 <ath_reg_read_filter+0x55>
  907ffa:	000012        	srai	a0, a0, 0
		/* SoC registers */
		return ioread32(addr);
	else
		/* MAC registers */
		return ioread32_mac(addr);
  907ffd:	6a01a2        	blti	a0, 1, 907fa3 <tgt_ServiceConnect+0x67>
  908000:	330c02        	excw
  908003:	008230        	excw
}
  908006:	d10f      	retw.n

00908008 <tgt_HTCSendCompleteHandler>:
		asf_tailq_insert_tail(&sc->sc_rxdesc, ds_tmp, ds_list);
	}
}

static void tgt_HTCSendCompleteHandler(HTC_ENDPOINT_ID Endpt, adf_nbuf_t buf, void *ServiceCtx)
{
  908008:	6c1006        	entry	a1, 48
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)ServiceCtx;

	if (Endpt == RX_ENDPOINT_ID) {
  90800b:	682302        	beqi	a2, 3, 908011 <tgt_HTCSendCompleteHandler+0x9>
  90800e:	600124        	j	908136 <tgt_HTCSendCompleteHandler+0x12e>
		sc->sc_rx_stats.ast_rx_done++;
  908011:	22427e        	l32i	a2, a4, 0x1f8
}

static inline void
adf_nbuf_split_to_frag(adf_nbuf_t buf, adf_nbuf_queue_t *qhead)
{
    return __adf_nbuf_split_to_frag(buf, qhead);
  908014:	da30      	mov.n	a10, a3
  908016:	b122      	addi.n	a2, a2, 1
  908018:	22467e        	s32i	a2, a4, 0x1f8
  90801b:	db10      	mov.n	a11, a1
  90801d:	5bfad3        	call8	906b6c <__adf_nbuf_split_to_frag>
	struct ath_rx_desc *ds;
	adf_nbuf_t buf_tmp;
	adf_nbuf_queue_t nbuf_head;

	adf_nbuf_split_to_frag(buf, &nbuf_head);
	ds = asf_tailq_first(&sc->sc_rxdesc_idle);
  908020:	2242d7        	l32i	a2, a4, 0x35c

		if (buf_tmp == NULL) {
			break;
		}

		BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, buf_tmp);
  908023:	136913        	l32r	a3, 8e2470 <athos_indirection_table_install+0xefc>
  908026:	600109        	j	908133 <tgt_HTCSendCompleteHandler+0x12b>
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  908029:	da10      	mov.n	a10, a1
  90802b:	5bfa7e        	call8	906a24 <__adf_nbuf_queue_remove>
  90802e:	dca0      	mov.n	a12, a10

	while (ds) {
		struct ath_rx_desc *ds_tmp;
		buf_tmp = adf_nbuf_queue_remove(&nbuf_head);

		if (buf_tmp == NULL) {
  908030:	64a102        	beqz	a10, 908136 <tgt_HTCSendCompleteHandler+0x12e>
			break;
		}

		BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, buf_tmp);
  908033:	28329e        	l32i	a8, a3, 0x278
  908036:	8a40      	l32i.n	a10, a4, 0
  908038:	c0b3      	movi.n	a11, 3
  90803a:	0b8000        	callx8	a8

		ds_tmp = ds;
		ds = asf_tailq_next(ds, ds_list);
  90803d:	29204c        	l8ui	a9, a2, 76
  908040:	28204d        	l8ui	a8, a2, 77
  908043:	25204e        	l8ui	a5, a2, 78
  908046:	089910        	slli	a9, a9, 24
  908049:	008811        	slli	a8, a8, 16
  90804c:	098802        	or	a8, a8, a9
  90804f:	085511        	slli	a5, a5, 8
  908052:	085502        	or	a5, a5, a8
  908055:	28204f        	l8ui	a8, a2, 79

		ath_rxdesc_init(sc, ds_tmp);
  908058:	044a02        	or	a10, a4, a4
  90805b:	022b02        	or	a11, a2, a2
		}

		BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, buf_tmp);

		ds_tmp = ds;
		ds = asf_tailq_next(ds, ds_list);
  90805e:	058502        	or	a5, a8, a5

		ath_rxdesc_init(sc, ds_tmp);
  908061:	5bff43        	call8	907d70 <ath_rxdesc_init>

		asf_tailq_remove(&sc->sc_rxdesc_idle, ds_tmp, ds_list);
  908064:	2a204c        	l8ui	a10, a2, 76
  908067:	29204d        	l8ui	a9, a2, 77
  90806a:	28204e        	l8ui	a8, a2, 78
  90806d:	08aa10        	slli	a10, a10, 24
  908070:	009911        	slli	a9, a9, 16
  908073:	0a9902        	or	a9, a9, a10
  908076:	088811        	slli	a8, a8, 8
  908079:	098802        	or	a8, a8, a9
  90807c:	29204f        	l8ui	a9, a2, 79
  90807f:	2a2051        	l8ui	a10, a2, 81
  908082:	089802        	or	a8, a9, a8
  908085:	292050        	l8ui	a9, a2, 80
  908088:	00aa11        	slli	a10, a10, 16
  90808b:	089910        	slli	a9, a9, 24
  90808e:	09aa02        	or	a10, a10, a9
  908091:	292052        	l8ui	a9, a2, 82
  908094:	089911        	slli	a9, a9, 8
  908097:	0a9902        	or	a9, a9, a10
  90809a:	c98e      	beqz.n	a8, 9080bc <tgt_HTCSendCompleteHandler+0xb4>
  90809c:	2a2053        	l8ui	a10, a2, 83
  90809f:	09a902        	or	a9, a10, a9
  9080a2:	098a57        	extui	a10, a9, 24, 8
  9080a5:	2a8450        	s8i	a10, a8, 80
  9080a8:	090a57        	extui	a10, a9, 16, 8
  9080ab:	2a8451        	s8i	a10, a8, 81
  9080ae:	098a47        	extui	a10, a9, 8, 8
  9080b1:	2a8452        	s8i	a10, a8, 82
  9080b4:	298453        	s8i	a9, a8, 83
  9080b7:	60000a        	j	9080c5 <tgt_HTCSendCompleteHandler+0xbd>
  9080ba:	000028        	mull	a0, a0, a0
  9080bd:	205309        	excw
  9080c0:	8902      	l32i.n	a9, a0, 8
  9080c2:	2946d8        	s32i	a9, a4, 0x360
  9080c5:	2a2050        	l8ui	a10, a2, 80
  9080c8:	292051        	l8ui	a9, a2, 81
  9080cb:	282052        	l8ui	a8, a2, 82
  9080ce:	08aa10        	slli	a10, a10, 24
  9080d1:	009911        	slli	a9, a9, 16
  9080d4:	0a9902        	or	a9, a9, a10
  9080d7:	088811        	slli	a8, a8, 8
  9080da:	098802        	or	a8, a8, a9
  9080dd:	292053        	l8ui	a9, a2, 83
  9080e0:	2b204c        	l8ui	a11, a2, 76
  9080e3:	2a204d        	l8ui	a10, a2, 77
  9080e6:	089802        	or	a8, a9, a8
  9080e9:	29204e        	l8ui	a9, a2, 78
  9080ec:	08bb10        	slli	a11, a11, 24
  9080ef:	00aa11        	slli	a10, a10, 16
  9080f2:	0baa02        	or	a10, a10, a11
  9080f5:	089911        	slli	a9, a9, 8
  9080f8:	0a9902        	or	a9, a9, a10
  9080fb:	2a204f        	l8ui	a10, a2, 79
  9080fe:	09a902        	or	a9, a10, a9
  908101:	9980      	s32i.n	a9, a8, 0
		asf_tailq_insert_tail(&sc->sc_rxdesc, ds_tmp, ds_list);
  908103:	c080      	movi.n	a8, 0
  908105:	28244c        	s8i	a8, a2, 76
  908108:	28244d        	s8i	a8, a2, 77
  90810b:	28244e        	s8i	a8, a2, 78
  90810e:	28244f        	s8i	a8, a2, 79
  908111:	2842da        	l32i	a8, a4, 0x368
  908114:	088957        	extui	a9, a8, 24, 8
  908117:	292450        	s8i	a9, a2, 80
  90811a:	080957        	extui	a9, a8, 16, 8
  90811d:	292451        	s8i	a9, a2, 81
  908120:	088947        	extui	a9, a8, 8, 8
  908123:	292452        	s8i	a9, a2, 82
  908126:	282453        	s8i	a8, a2, 83
  908129:	9280      	s32i.n	a2, a8, 0
  90812b:	222c4c        	addi	a2, a2, 76
  90812e:	2246da        	s32i	a2, a4, 0x368
		}

		BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, buf_tmp);

		ds_tmp = ds;
		ds = asf_tailq_next(ds, ds_list);
  908131:	d250      	mov.n	a2, a5
	adf_nbuf_queue_t nbuf_head;

	adf_nbuf_split_to_frag(buf, &nbuf_head);
	ds = asf_tailq_first(&sc->sc_rxdesc_idle);

	while (ds) {
  908133:	652ef2        	bnez	a2, 908029 <tgt_HTCSendCompleteHandler+0x21>
  908136:	d10f      	retw.n

00908138 <ath_desc_free>:

#undef DS2PHYS
}

static void ath_desc_free(struct ath_softc_tgt *sc)
{
  908138:	6c1004        	entry	a1, 32
	asf_tailq_insert_tail(&sc->sc_txbuf, sc->sc_txbuf_held, bf_list);
  90813b:	2822dc        	l32i	a8, a2, 0x370
  90813e:	2922f1        	l32i	a9, a2, 0x3c4
  908141:	c0d0      	movi.n	a13, 0
  908143:	9d89      	s32i.n	a13, a8, 36
  908145:	998a      	s32i.n	a9, a8, 40
  908147:	9890      	s32i.n	a8, a9, 0
  908149:	2822dc        	l32i	a8, a2, 0x370

	sc->sc_txbuf_held = NULL;
  90814c:	2d26dc        	s32i	a13, a2, 0x370
#undef DS2PHYS
}

static void ath_desc_free(struct ath_softc_tgt *sc)
{
	asf_tailq_insert_tail(&sc->sc_txbuf, sc->sc_txbuf_held, bf_list);
  90814f:	288c24        	addi	a8, a8, 36
  908152:	2826f1        	s32i	a8, a2, 0x3c4

	sc->sc_txbuf_held = NULL;

	if (sc->sc_txdma.dd_desc_len != 0)
  908155:	2822e7        	l32i	a8, a2, 0x39c
  908158:	7d8110        	beq	a8, a13, 90816c <ath_desc_free+0x34>
		ath_descdma_cleanup(sc, &sc->sc_txdma, (ath_bufhead *)&sc->sc_txbuf,
  90815b:	2b3a8c        	movi	a11, 0x38c
  90815e:	2c3ac0        	movi	a12, 0x3c0
  908161:	da20      	mov.n	a10, a2
  908163:	0b2b08        	add	a11, a2, a11
  908166:	0c2c08        	add	a12, a2, a12
  908169:	5bfed2        	call8	907cb4 <ath_descdma_cleanup>
				    ADF_OS_DMA_TO_DEVICE);
	if (sc->sc_rxdma.dd_desc_len != 0)
  90816c:	2822e1        	l32i	a8, a2, 0x384
  90816f:	c88f      	beqz.n	a8, 908182 <ath_desc_free+0x4a>
		ath_descdma_cleanup(sc, &sc->sc_rxdma, (ath_bufhead *)&sc->sc_rxbuf,
  908171:	2b3a74        	movi	a11, 0x374
  908174:	2c3a54        	movi	a12, 0x354
  908177:	da20      	mov.n	a10, a2
  908179:	ab2b      	add.n	a11, a2, a11
  90817b:	ac2c      	add.n	a12, a2, a12
  90817d:	c0d1      	movi.n	a13, 1
  90817f:	5bfecd        	call8	907cb4 <ath_descdma_cleanup>
  908182:	d10f      	retw.n

00908184 <ath_descdma_setup$constprop$22>:

/***********************/
/* Descriptor Handling */
/***********************/

static a_int32_t ath_descdma_setup(struct ath_softc_tgt *sc,
  908184:	6c1006        	entry	a1, 48
  908187:	9210      	s32i.n	a2, a1, 0
	a_int32_t i, bsize, error;
	a_uint8_t *bf_addr;
	a_uint8_t *ds_addr;

	dd->dd_name = name;
	dd->dd_desc_len = descSize * nbuf * ndesc;
  908189:	821c      	l32i.n	a2, a1, 48
adf_os_dmamem_alloc(adf_os_device_t     osdev, 
                    adf_os_size_t       size, 
                    a_bool_t            coherent, 
                    adf_os_dma_map_t   *dmap)
{
    return __adf_os_dmamem_alloc(osdev, size, coherent, dmap);
  90818b:	8810      	l32i.n	a8, a1, 0
  90818d:	062b28        	mull	a11, a2, a6
  908190:	2a8246        	l32i	a10, a8, 0x118
	struct ath_buf *bf;
	a_int32_t i, bsize, error;
	a_uint8_t *bf_addr;
	a_uint8_t *ds_addr;

	dd->dd_name = name;
  908193:	9530      	s32i.n	a5, a3, 0
	dd->dd_desc_len = descSize * nbuf * ndesc;
  908195:	9b34      	s32i.n	a11, a3, 16
  908197:	c0c1      	movi.n	a12, 1
  908199:	b83d      	addi.n	a13, a3, 8

/***********************/
/* Descriptor Handling */
/***********************/

static a_int32_t ath_descdma_setup(struct ath_softc_tgt *sc,
  90819b:	271601        	s32i	a7, a1, 4
  90819e:	580ad5        	call8	90acf4 <__adf_os_dmamem_alloc>
 * @return the (bus) address
 */
static inline adf_os_dma_addr_t
adf_os_dmamem_map2addr(adf_os_dma_map_t dmap)
{
    return(__adf_os_dmamem_map2addr(dmap));
  9081a1:	8532      	l32i.n	a5, a3, 8
	a_uint8_t *ds_addr;

	dd->dd_name = name;
	dd->dd_desc_len = descSize * nbuf * ndesc;

	dd->dd_desc = adf_os_dmamem_alloc(sc->sc_dev,
  9081a3:	9a31      	s32i.n	a10, a3, 4
				  dd->dd_desc_len, 1, &dd->dd_desc_dmamap);
	dd->dd_desc_paddr = adf_os_dmamem_map2addr(dd->dd_desc_dmamap);
  9081a5:	8551      	l32i.n	a5, a5, 4
  9081a7:	9533      	s32i.n	a5, a3, 12
adf_os_dmamem_alloc(adf_os_device_t     osdev, 
                    adf_os_size_t       size, 
                    a_bool_t            coherent, 
                    adf_os_dma_map_t   *dmap)
{
    return __adf_os_dmamem_alloc(osdev, size, coherent, dmap);
  9081a9:	d2a0      	mov.n	a2, a10
	if (dd->dd_desc == NULL) {
  9081ab:	64a05f        	beqz	a10, 90820e <ath_descdma_setup$constprop$22+0x8a>
		error = -ENOMEM;
		goto fail;
	}
	ds = dd->dd_desc;

	bsize = bfSize * nbuf;
  9081ae:	8811      	l32i.n	a8, a1, 4
  9081b0:	068728        	mull	a7, a8, a6
 * @return Buffer pointer or NULL if there's not enough memory.
 */
static inline void *
adf_os_mem_alloc(adf_os_size_t size)
{
    return __adf_os_mem_alloc(size);
  9081b3:	da70      	mov.n	a10, a7
  9081b5:	5bfe64        	call8	907b48 <__adf_os_mem_alloc>
  9081b8:	d5a0      	mov.n	a5, a10
	bf = adf_os_mem_alloc(bsize);
	if (bf == NULL) {
  9081ba:	64a050        	beqz	a10, 90820e <ath_descdma_setup$constprop$22+0x8a>
 * @param[in] size  buffer size
 */
static inline void
adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
    __adf_os_mem_set(buf, b, size);
  9081bd:	dc70      	mov.n	a12, a7
  9081bf:	c0b0      	movi.n	a11, 0
  9081c1:	5bfe6b        	call8	907b70 <__adf_os_mem_set>
	dd->dd_bufptr = bf;

	bf_addr = (a_uint8_t *)bf;
	ds_addr = (a_uint8_t *)ds;

	asf_tailq_init(head);
  9081c4:	c090      	movi.n	a9, 0
	if (bf == NULL) {
		error = -ENOMEM;
		goto fail2;
	}
	adf_os_mem_set(bf, 0, bsize);
	dd->dd_bufptr = bf;
  9081c6:	9535      	s32i.n	a5, a3, 20

	bf_addr = (a_uint8_t *)bf;
	ds_addr = (a_uint8_t *)ds;

	asf_tailq_init(head);
  9081c8:	9940      	s32i.n	a9, a4, 0
  9081ca:	9441      	s32i.n	a4, a4, 4

	for (i = 0; i < nbuf; i++) {
  9081cc:	d790      	mov.n	a7, a9
  9081ce:	600035        	j	908207 <ath_descdma_setup$constprop$22+0x83>
  9081d1:	008810        	slli	a8, a8, 32
 */
static inline a_status_t
adf_nbuf_dmamap_create(adf_os_device_t osdev,
                       adf_os_dma_map_t *dmap)
{
    return (__adf_nbuf_dmamap_create(osdev, dmap));
  9081d4:	db50      	mov.n	a11, a5
  9081d6:	2a8246        	l32i	a10, a8, 0x118
  9081d9:	5bfa1c        	call8	906a4c <__adf_nbuf_dmamap_create>
  9081dc:	dba0      	mov.n	a11, a10
		a_int32_t j;

		if (adf_nbuf_dmamap_create( sc->sc_dev, &bf->bf_dmamap) != A_STATUS_OK) {
  9081de:	ceac      	bnez.n	a10, 90820e <ath_descdma_setup$constprop$22+0x8a>
			goto fail2;
		}

		bf->bf_desc = bf->bf_descarr = bf->bf_lastds = ds;
  9081e0:	925c      	s32i.n	a2, a5, 48
  9081e2:	925e      	s32i.n	a2, a5, 56
  9081e4:	925d      	s32i.n	a2, a5, 52
 * @param[in] head  buf queue head
 */
static inline void
adf_nbuf_queue_init(adf_nbuf_queue_t *head)
{
    __adf_nbuf_queue_init(head);
  9081e6:	2a5c14        	addi	a10, a5, 20
  9081e9:	9b12      	s32i.n	a11, a1, 8
  9081eb:	5bfaae        	call8	906ca4 <__adf_nbuf_queue_init>
			ATH_BUF_SET_DESC_PHY_ADDR_WITH_IDX(bf, j, (ds_addr + (j*descSize)));

		ATH_BUF_SET_DESC_PHY_ADDR(bf, ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, 0));

		adf_nbuf_queue_init(&bf->bf_skbhead);
		asf_tailq_insert_tail(head, bf, bf_list);
  9081ee:	8a41      	l32i.n	a10, a4, 4
  9081f0:	8b12      	l32i.n	a11, a1, 8

		bf_addr += bfSize;
  9081f2:	8811      	l32i.n	a8, a1, 4
			ATH_BUF_SET_DESC_PHY_ADDR_WITH_IDX(bf, j, (ds_addr + (j*descSize)));

		ATH_BUF_SET_DESC_PHY_ADDR(bf, ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, 0));

		adf_nbuf_queue_init(&bf->bf_skbhead);
		asf_tailq_insert_tail(head, bf, bf_list);
  9081f4:	9a5a      	s32i.n	a10, a5, 40
  9081f6:	9b59      	s32i.n	a11, a5, 36
  9081f8:	95a0      	s32i.n	a5, a10, 0
  9081fa:	2a5c24        	addi	a10, a5, 36

		bf_addr += bfSize;
  9081fd:	a855      	add.n	a5, a5, a8
		ds_addr += (ndesc * descSize);
  9081ff:	881c      	l32i.n	a8, a1, 48
			ATH_BUF_SET_DESC_PHY_ADDR_WITH_IDX(bf, j, (ds_addr + (j*descSize)));

		ATH_BUF_SET_DESC_PHY_ADDR(bf, ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, 0));

		adf_nbuf_queue_init(&bf->bf_skbhead);
		asf_tailq_insert_tail(head, bf, bf_list);
  908201:	9a41      	s32i.n	a10, a4, 4

		bf_addr += bfSize;
		ds_addr += (ndesc * descSize);
  908203:	a822      	add.n	a2, a2, a8
	bf_addr = (a_uint8_t *)bf;
	ds_addr = (a_uint8_t *)ds;

	asf_tailq_init(head);

	for (i = 0; i < nbuf; i++) {
  908205:	b177      	addi.n	a7, a7, 1
  908207:	7672c7        	blt	a7, a6, 9081d2 <ath_descdma_setup$constprop$22+0x4e>
		ds_addr += (ndesc * descSize);
		bf = (struct ath_buf *)bf_addr;
		ds = (struct ath_desc *)ds_addr;
	}

	return 0;
  90820a:	c020      	movi.n	a2, 0
  90820c:	d10f      	retw.n
  90820e:	da30      	mov.n	a10, a3
  908210:	c1c8      	movi.n	a12, 24
  908212:	2b0a00        	movi	a11, 0
  908215:	5bfe56        	call8	907b70 <__adf_os_mem_set>
fail2:
	adf_os_dmamem_free(sc->sc_dev, dd->dd_desc_len,
			   1, dd->dd_desc, dd->dd_desc_dmamap);
fail:
	adf_os_mem_set(dd, 0, sizeof(*dd));
	adf_os_assert(0);
  908218:	126913        	l32r	a2, 8e2664 <athos_indirection_table_install+0x10f0>
  90821b:	1b6a07        	l32r	a11, 8e2a38 <athos_indirection_table_install+0x14c4>
  90821e:	222212        	l32i	a2, a2, 72
  908221:	1a69f4        	l32r	a10, 8e29f4 <athos_indirection_table_install+0x1480>
  908224:	0b2000        	callx8	a2
  908227:	126978        	l32r	a2, 8e2808 <athos_indirection_table_install+0x1294>
  90822a:	0c0200        	memw
  90822d:	8220      	l32i.n	a2, a2, 0
	return error;
  90822f:	c021      	movi.n	a2, 1

#undef DS2PHYS
}
  908231:	d10f      	retw.n
	...

00908234 <tgt_HTCRecvMessageHandler>:
}

static void tgt_HTCRecvMessageHandler(HTC_ENDPOINT_ID EndPt,
				      adf_nbuf_t hdr_buf, adf_nbuf_t buf,
				      void *ServiceCtx)
{
  908234:	6c1006        	entry	a1, 48
	a_uint32_t len;
	ath_data_hdr_t *dh;
	struct ath_node_target *an;
	struct ath_atx_tid *tid;

	if (!hdr_buf) {
  908237:	cd32      	bnez.n	a3, 90824d <tgt_HTCRecvMessageHandler+0x19>
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  908239:	da40      	mov.n	a10, a4
  90823b:	b41b      	addi.n	a11, a1, 4
  90823d:	dc10      	mov.n	a12, a1
  90823f:	5bfa93        	call8	906c8c <__adf_nbuf_peek_header>
 *         or NULL if there is not sufficient data to pull.
 */
static inline a_uint8_t *
adf_nbuf_pull_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_pull_head(buf, size);
  908242:	da40      	mov.n	a10, a4
  908244:	c0bc      	movi.n	a11, 12
  908246:	5bf9c2        	call8	906950 <__adf_nbuf_pull_head>
  908249:	600009        	j	908256 <tgt_HTCRecvMessageHandler+0x22>
  90824c:	00da30        	excw
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90824f:	b41b      	addi.n	a11, a1, 4
  908251:	dc10      	mov.n	a12, a1
  908253:	5bfa8e        	call8	906c8c <__adf_nbuf_peek_header>
		adf_nbuf_pull_head(buf, sizeof(ath_data_hdr_t));
	} else {
		adf_nbuf_peek_header(hdr_buf, &data, &len);
	}

	adf_os_assert(len >= sizeof(ath_data_hdr_t));
  908256:	8310      	l32i.n	a3, a1, 0
  908258:	c06b      	movi.n	a6, 11
  90825a:	736316        	bltu	a6, a3, 908274 <tgt_HTCRecvMessageHandler+0x40>
  90825d:	136913        	l32r	a3, 8e26ac <athos_indirection_table_install+0x1138>
  908260:	1a69f4        	l32r	a10, 8e2a30 <athos_indirection_table_install+0x14bc>
  908263:	233212        	l32i	a3, a3, 72
  908266:	1b6a08        	l32r	a11, 8e2a88 <athos_indirection_table_install+0x1514>
  908269:	0b3000        	callx8	a3
  90826c:	136978        	l32r	a3, 8e284c <athos_indirection_table_install+0x12d8>
  90826f:	0c0200        	memw
  908272:	8330      	l32i.n	a3, a3, 0
	dh = (ath_data_hdr_t *)data;
  908274:	8311      	l32i.n	a3, a1, 4
	an = &sc->sc_sta[dh->ni_index];
	tid = ATH_AN_2_TID(an, dh->tidno);

	sc->sc_tx_stats.tx_tgt++;

	bf = ath_tgt_tx_prepare(sc, buf, dh);
  908276:	db40      	mov.n	a11, a4
	}

	adf_os_assert(len >= sizeof(ath_data_hdr_t));
	dh = (ath_data_hdr_t *)data;

	an = &sc->sc_sta[dh->ni_index];
  908278:	283001        	l8ui	a8, a3, 1
	tid = ATH_AN_2_TID(an, dh->tidno);
  90827b:	293003        	l8ui	a9, a3, 3
	}

	adf_os_assert(len >= sizeof(ath_data_hdr_t));
	dh = (ath_data_hdr_t *)data;

	an = &sc->sc_sta[dh->ni_index];
  90827e:	0a8611        	slli	a6, a8, 6
  908281:	a866      	add.n	a6, a6, a8
  908283:	086809        	addx2	a8, a6, a8
  908286:	265a30        	movi	a6, 0x530
  908289:	06880a        	addx4	a8, a8, a6
	tid = ATH_AN_2_TID(an, dh->tidno);
  90828c:	0c9611        	slli	a6, a9, 4
	}

	adf_os_assert(len >= sizeof(ath_data_hdr_t));
	dh = (ath_data_hdr_t *)data;

	an = &sc->sc_sta[dh->ni_index];
  90828f:	a858      	add.n	a8, a5, a8
	tid = ATH_AN_2_TID(an, dh->tidno);
  908291:	09660c        	sub	a6, a6, a9
  908294:	08660a        	addx4	a6, a6, a8

	sc->sc_tx_stats.tx_tgt++;
  908297:	28525b        	l32i	a8, a5, 0x16c

	bf = ath_tgt_tx_prepare(sc, buf, dh);
  90829a:	da50      	mov.n	a10, a5
	dh = (ath_data_hdr_t *)data;

	an = &sc->sc_sta[dh->ni_index];
	tid = ATH_AN_2_TID(an, dh->tidno);

	sc->sc_tx_stats.tx_tgt++;
  90829c:	288c01        	addi	a8, a8, 1
  90829f:	28565b        	s32i	a8, a5, 0x16c

	bf = ath_tgt_tx_prepare(sc, buf, dh);
  9082a2:	033c02        	or	a12, a3, a3
  9082a5:	58162c        	call8	90db58 <ath_tgt_tx_prepare>

	adf_os_assert(len >= sizeof(ath_data_hdr_t));
	dh = (ath_data_hdr_t *)data;

	an = &sc->sc_sta[dh->ni_index];
	tid = ATH_AN_2_TID(an, dh->tidno);
  9082a8:	266c2c        	addi	a6, a6, 44

	sc->sc_tx_stats.tx_tgt++;

	bf = ath_tgt_tx_prepare(sc, buf, dh);
  9082ab:	dba0      	mov.n	a11, a10
	if (!bf) {
  9082ad:	ccaf      	bnez.n	a10, 9082c0 <tgt_HTCRecvMessageHandler+0x8c>
		ath_free_tx_skb(sc->tgt_htc_handle,EndPt,buf);
  9082af:	136913        	l32r	a3, 8e26fc <athos_indirection_table_install+0x1188>
  9082b2:	8a52      	l32i.n	a10, a5, 8
  9082b4:	233282        	l32i	a3, a3, 0x208
  9082b7:	db20      	mov.n	a11, a2
  9082b9:	dc40      	mov.n	a12, a4
  9082bb:	0b3000        	callx8	a3
  9082be:	d10f      	retw.n
		return;
	}

	bf->bf_endpt = EndPt;
  9082c0:	22a623        	s32i	a2, a10, 140
	bf->bf_cookie = dh->cookie;
  9082c3:	22300a        	l8ui	a2, a3, 10
  9082c6:	22a492        	s8i	a2, a10, 146

	if (tid->flag & TID_AGGR_ENABLED)
  9082c9:	226036        	l8ui	a2, a6, 54
		ath_tgt_handle_aggr(sc, bf);
  9082cc:	da50      	mov.n	a10, a5
	}

	bf->bf_endpt = EndPt;
	bf->bf_cookie = dh->cookie;

	if (tid->flag & TID_AGGR_ENABLED)
  9082ce:	7e2707        	bbci	a2, 30, 9082d9 <tgt_HTCRecvMessageHandler+0xa5>
		ath_tgt_handle_aggr(sc, bf);
  9082d1:	581a82        	call8	90ecdc <ath_tgt_handle_aggr>
  9082d4:	d10f      	retw.n
  9082d6:	000000        	ill
	else
		ath_tgt_handle_normal(sc, bf);
  9082d9:	5817e3        	call8	90e268 <ath_tgt_handle_normal>
  9082dc:	d10f      	retw.n
	...

009082e0 <tgt_HTCRecv_cabhandler>:
}

static void tgt_HTCRecv_cabhandler(HTC_ENDPOINT_ID EndPt, adf_nbuf_t hdr_buf,
				   adf_nbuf_t buf, void *ServiceCtx)
{
  9082e0:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)ServiceCtx;
	struct ath_hal *ah = sc->sc_ah;
  9082e3:	285d05        	addmi	a8, a5, 0x500
  9082e6:	8a8b      	l32i.n	a10, a8, 44
	a_uint64_t tsf;
	a_uint32_t tmp;

#ifdef ATH_ENABLE_CABQ
	tsf = ah->ah_getTsf64(ah);
  9082e8:	28a21e        	l32i	a8, a10, 120
  9082eb:	0b8000        	callx8	a8
	tmp = tsf - sc->sc_swba_tsf;
  9082ee:	285d16        	addmi	a8, a5, 0x1600
  9082f1:	888d      	l32i.n	a8, a8, 52

	if ( tmp > ATH_CABQ_HANDLING_THRESHOLD ) {
  9082f3:	196a09        	l32r	a9, 8e2b18 <athos_indirection_table_install+0x15a4>
	a_uint64_t tsf;
	a_uint32_t tmp;

#ifdef ATH_ENABLE_CABQ
	tsf = ah->ah_getTsf64(ah);
	tmp = tsf - sc->sc_swba_tsf;
  9082f6:	08bb0c        	sub	a11, a11, a8

	if ( tmp > ATH_CABQ_HANDLING_THRESHOLD ) {
  9082f9:	7b9b11        	bgeu	a9, a11, 90830e <tgt_HTCRecv_cabhandler+0x2e>
		HTC_ReturnBuffers(sc->tgt_htc_handle, EndPt, buf);
  9082fc:	136913        	l32r	a3, 8e2748 <athos_indirection_table_install+0x11d4>
  9082ff:	8a52      	l32i.n	a10, a5, 8
  908301:	233282        	l32i	a3, a3, 0x208
  908304:	db20      	mov.n	a11, a2
  908306:	044c02        	or	a12, a4, a4
  908309:	0b3000        	callx8	a3
  90830c:	d10f      	retw.n
		return;
	}

	tgt_HTCRecvMessageHandler(EndPt, hdr_buf, buf, ServiceCtx);
  90830e:	da20      	mov.n	a10, a2
  908310:	db30      	mov.n	a11, a3
  908312:	dc40      	mov.n	a12, a4
  908314:	dd50      	mov.n	a13, a5
  908316:	5bffc7        	call8	908234 <tgt_HTCRecvMessageHandler>
  908319:	d10f      	retw.n
	...

0090831c <wmi_event>:

}

void wmi_event(wmi_handle_t handle, WMI_EVENT_ID evt_id,
	       void *buffer, a_int32_t Length)
{
  90831c:	6c1004        	entry	a1, 32
	adf_nbuf_t netbuf = ADF_NBUF_NULL;
	a_uint8_t *pData;

	netbuf = WMI_AllocEvent(handle, WMI_EVT_CLASS_CMD_EVENT,
  90831f:	176913        	l32r	a7, 8e276c <athos_indirection_table_install+0x11f8>
  908322:	da20      	mov.n	a10, a2
  908324:	26728d        	l32i	a6, a7, 0x234
  908327:	c0b0      	movi.n	a11, 0
  908329:	b45c      	addi.n	a12, a5, 4
  90832b:	0b6000        	callx8	a6
  90832e:	d6a0      	mov.n	a6, a10
				sizeof(WMI_CMD_HDR) + Length);

	if (netbuf == ADF_NBUF_NULL) {
  908330:	65a00a        	bnez	a10, 90833e <wmi_event+0x22>
		adf_os_print("Buf null\n");
  908333:	227212        	l32i	a2, a7, 72
  908336:	1a6a0a        	l32r	a10, 8e2b60 <athos_indirection_table_install+0x15ec>
  908339:	0b2000        	callx8	a2
  90833c:	d10f      	retw.n
		return;
	}

	if (buffer != NULL && Length != 0 && Length < WMI_SVC_MAX_BUFFERED_EVENT_SIZE) {
  90833e:	c952      	beqz.n	a5, 908354 <wmi_event+0x38>
  908340:	c940      	beqz.n	a4, 908354 <wmi_event+0x38>
  908342:	270a63        	movi	a7, 99
  908345:	75720b        	blt	a7, a5, 908354 <wmi_event+0x38>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  908348:	db50      	mov.n	a11, a5
  90834a:	5bfa34        	call8	906c1c <__adf_nbuf_put_tail>
 * @param[in] size    buffer size
 */
static inline void
adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    __adf_os_mem_copy(dst, src, size);
  90834d:	db40      	mov.n	a11, a4
  90834f:	dc50      	mov.n	a12, a5
  908351:	5bfe02        	call8	907b5c <__adf_os_mem_copy>
		pData = adf_nbuf_put_tail(netbuf, Length);
		adf_os_mem_copy(pData, buffer, Length);
	}

	WMI_SendEvent(handle, netbuf, evt_id, 0, Length);
  908354:	146913        	l32r	a4, 8e27a0 <athos_indirection_table_install+0x122c>
  908357:	da20      	mov.n	a10, a2
  908359:	24428e        	l32i	a4, a4, 0x238
  90835c:	db60      	mov.n	a11, a6
  90835e:	030c4f        	extui	a12, a3, 0, 16
  908361:	c0d0      	movi.n	a13, 0
  908363:	de50      	mov.n	a14, a5
  908365:	0b4000        	callx8	a4
  908368:	d10f      	retw.n
	...

0090836c <ath_fatal_tasklet>:

	return ADF_OS_IRQ_HANDLED;
}

static void ath_fatal_tasklet(TQUEUE_ARG data )
{
  90836c:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)data;

	wmi_event(sc->tgt_wmi_handle, WMI_FATAL_EVENTID, NULL, 0);
  90836f:	c0c0      	movi.n	a12, 0
  908371:	8a23      	l32i.n	a10, a2, 12
  908373:	1b6a0b        	l32r	a11, 8e2ba0 <athos_indirection_table_install+0x162c>
  908376:	0ccd02        	or	a13, a12, a12
  908379:	5bffe8        	call8	90831c <wmi_event>
  90837c:	d10f      	retw.n
	...

00908380 <ath_bmiss_tasklet>:
}

static void ath_bmiss_tasklet(TQUEUE_ARG data)
{
  908380:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)data;

	wmi_event(sc->tgt_wmi_handle, WMI_BMISS_EVENTID, NULL, 0);
  908383:	c0c0      	movi.n	a12, 0
  908385:	8a23      	l32i.n	a10, a2, 12
  908387:	1b6a0c        	l32r	a11, 8e2bb8 <athos_indirection_table_install+0x1644>
  90838a:	0ccd02        	or	a13, a12, a12
  90838d:	5bffe3        	call8	90831c <wmi_event>
  908390:	d10f      	retw.n
	...

00908394 <ath_intr>:
/**********************/
/* Interrupt Handling */
/**********************/

adf_os_irq_resp_t ath_intr(adf_drv_handle_t hdl)
{
  908394:	6c100c        	entry	a1, 96
  908397:	d320      	mov.n	a3, a2
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)hdl;
	struct ath_hal *ah = sc->sc_ah;
  908399:	222d05        	addmi	a2, a2, 0x500
  90839c:	822b      	l32i.n	a2, a2, 44
  90839e:	9218      	s32i.n	a2, a1, 32
	HAL_INT status;

	if (sc->sc_invalid)
  9083a0:	243249        	l32i	a4, a3, 0x124
  9083a3:	126a0d        	l32r	a2, 8e2bd8 <athos_indirection_table_install+0x1664>
  9083a6:	024401        	and	a4, a4, a2
  9083a9:	644005        	beqz	a4, 9083b2 <ath_intr+0x1e>
		return ADF_OS_IRQ_NONE;
  9083ac:	c020      	movi.n	a2, 0
  9083ae:	d10f      	retw.n
  9083b0:	000085        	excw

	if (!ah->ah_isInterruptPending(ah))
  9083b3:	182252        	l32r	a8, 8d0cfc <_bss_end+0x3bddec>
  9083b6:	26da50        	movi	a6, 0xfffffd50
  9083b9:	0b2000        	callx8	a2
  9083bc:	64afec        	beqz	a10, 9083ac <ath_intr+0x18>
		return ADF_OS_IRQ_NONE;

	ah->ah_getPendingInterrupts(ah, &status);
  9083bf:	225227        	l32i	a2, a5, 156
  9083c2:	8a18      	l32i.n	a10, a1, 32
  9083c4:	2b1c18        	addi	a11, a1, 24
  9083c7:	0b2000        	callx8	a2

	status &= sc->sc_imask;
  9083ca:	8216      	l32i.n	a2, a1, 24
  9083cc:	2532c4        	l32i	a5, a3, 0x310
  9083cf:	025201        	and	a2, a5, a2
  9083d2:	9216      	s32i.n	a2, a1, 24

	if (status & HAL_INT_FATAL) {
  9083d4:	712619        	bbci	a2, 1, 9083f1 <ath_intr+0x5d>
		ah->ah_setInterrupts(ah, 0);
  9083d7:	8918      	l32i.n	a9, a1, 32
  9083d9:	db40      	mov.n	a11, a4
  9083db:	229228        	l32i	a2, a9, 160
  9083de:	099a02        	or	a10, a9, a9
  9083e1:	0b2000        	callx8	a2
 * @param[in] bh    bottom instance
 */
static inline void 
adf_os_sched_bh(adf_os_handle_t hdl, adf_os_bh_t *bh)
{
    __adf_os_sched_bh(hdl, bh);
  9083e4:	2a3a44        	movi	a10, 0x344
  9083e7:	aa3a      	add.n	a10, a3, a10
  9083e9:	5bfe5d        	call8	907d60 <__adf_os_sched_bh$isra$5>

		if (status & HAL_INT_CST)
			sc->sc_int_stats.ast_cst++;
	}

	return ADF_OS_IRQ_HANDLED;
  9083ec:	c021      	movi.n	a2, 1
  9083ee:	d10f      	retw.n
  9083f0:	007f26        	excw

	if (status & HAL_INT_FATAL) {
		ah->ah_setInterrupts(ah, 0);
		ATH_SCHEDULE_TQUEUE(sc->sc_dev, &sc->sc_fataltq);
	} else {
		if (status & HAL_INT_SWBA) {
  9083f3:	478418        	excw
			WMI_SWBA_EVENT swbaEvt;
			struct ath_txq *txq = ATH_TXQ(sc, 8);

			swbaEvt.tsf = ah->ah_getTsf64(ah);
  9083f6:	22421e        	l32i	a2, a4, 120
  9083f9:	da40      	mov.n	a10, a4
  9083fb:	0b2000        	callx8	a2
			swbaEvt.beaconPendingCount = ah->ah_numTxPending(ah, sc->sc_bhalq);
  9083fe:	8518      	l32i.n	a5, a1, 32
	} else {
		if (status & HAL_INT_SWBA) {
			WMI_SWBA_EVENT swbaEvt;
			struct ath_txq *txq = ATH_TXQ(sc, 8);

			swbaEvt.tsf = ah->ah_getTsf64(ah);
  908400:	9a13      	s32i.n	a10, a1, 12
  908402:	9b14      	s32i.n	a11, a1, 16
			swbaEvt.beaconPendingCount = ah->ah_numTxPending(ah, sc->sc_bhalq);
  908404:	243d01        	addmi	a4, a3, 0x100
  908407:	825b      	l32i.n	a2, a5, 44
  908409:	2b401c        	l8ui	a11, a4, 28
  90840c:	da50      	mov.n	a10, a5
  90840e:	0b2000        	callx8	a2
  908411:	2a1414        	s8i	a10, a1, 20
			sc->sc_swba_tsf = ah->ah_getTsf64(ah);
  908414:	22521e        	l32i	a2, a5, 120
  908417:	2a1208        	l32i	a10, a1, 32
  90841a:	0b2000        	callx8	a2
  90841d:	223d16        	addmi	a2, a3, 0x1600
  908420:	9a2c      	s32i.n	a10, a2, 48
  908422:	9b2d      	s32i.n	a11, a2, 52

			wmi_event(sc->tgt_wmi_handle,
  908424:	8a33      	l32i.n	a10, a3, 12
  908426:	1b6a0e        	l32r	a11, 8e2c60 <athos_indirection_table_install+0x16ec>
  908429:	bc1c      	addi.n	a12, a1, 12
  90842b:	c0d9      	movi.n	a13, 9
  90842d:	5bffbb        	call8	90831c <wmi_event>
	ah->ah_stopTxDma(ah, txq->axq_qnum);
}

static void owltgt_txq_drain(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	owltgt_tx_processq(sc, txq, OWL_TXQ_STOPPED);
  908430:	2b4acc        	movi	a11, 0x4cc
  908433:	da30      	mov.n	a10, a3
  908435:	ab3b      	add.n	a11, a3, a11
  908437:	c0c1      	movi.n	a12, 1
  908439:	5819e5        	call8	90ebd0 <owltgt_tx_processq>
				  sizeof(WMI_SWBA_EVENT));

			ath_tx_draintxq(sc, txq);
		}

		if (status & HAL_INT_RXORN)
  90843c:	8216      	l32i.n	a2, a1, 24
  90843e:	7a2707        	bbci	a2, 26, 908449 <ath_intr+0xb5>
			sc->sc_int_stats.ast_rxorn++;
  908441:	24324d        	l32i	a4, a3, 0x134
  908444:	b144      	addi.n	a4, a4, 1
  908446:	24364d        	s32i	a4, a3, 0x134

		if (status & HAL_INT_RXEOL)
  908449:	7b2708        	bbci	a2, 27, 908455 <ath_intr+0xc1>
			sc->sc_int_stats.ast_rxeol++;
  90844c:	24324e        	l32i	a4, a3, 0x138
  90844f:	244c01        	addi	a4, a4, 1
  908452:	24364e        	s32i	a4, a3, 0x138

		if (status & (HAL_INT_RX | HAL_INT_RXEOL | HAL_INT_RXORN)) {
  908455:	c341      	movi.n	a4, 49
  908457:	742802        	bany	a2, a4, 90845d <ath_intr+0xc9>
  90845a:	60062a        	j	908a88 <ath_intr+0x6f4>
			if (status & HAL_INT_RX)
  90845d:	7f2707        	bbci	a2, 31, 908468 <ath_intr+0xd4>
				sc->sc_int_stats.ast_rx++;
  908460:	22324c        	l32i	a2, a3, 0x130
  908463:	b122      	addi.n	a2, a2, 1
  908465:	22364c        	s32i	a2, a3, 0x130
	}
}

static void ath_uapsd_processtriggers(struct ath_softc_tgt *sc)
{
	struct ath_hal *ah = sc->sc_ah;
  908468:	223d05        	addmi	a2, a3, 0x500
  90846b:	862b      	l32i.n	a6, a2, 44

#define	PA2DESC(_sc, _pa)						\
	((struct ath_desc *)((caddr_t)(_sc)->sc_rxdma.dd_desc +		\
			     ((_pa) - (_sc)->sc_rxdma.dd_desc_paddr)))

	tsf = ah->ah_getTsf64(ah);
  90846d:	22621e        	l32i	a2, a6, 120
  908470:	da60      	mov.n	a10, a6
  908472:	0b2000        	callx8	a2
	bf = asf_tailq_first(&sc->sc_rxbuf);

	ds = asf_tailq_first(&sc->sc_rxdesc);
  908475:	2f32d9        	l32i	a15, a3, 0x364
#define	PA2DESC(_sc, _pa)						\
	((struct ath_desc *)((caddr_t)(_sc)->sc_rxdma.dd_desc +		\
			     ((_pa) - (_sc)->sc_rxdma.dd_desc_paddr)))

	tsf = ah->ah_getTsf64(ah);
	bf = asf_tailq_first(&sc->sc_rxbuf);
  908478:	2432d5        	l32i	a4, a3, 0x354

	ds = asf_tailq_first(&sc->sc_rxdesc);
	ds_head = ds;
  90847b:	d8f0      	mov.n	a8, a15
  90847d:	6005d2        	j	908a53 <ath_intr+0x6bf>
  908480:	00196a        	excw

	while(ds) {
		++cnt;

		if (cnt == ath_numrxbufs - 1) {
  908483:	0fb177        	excw
  908486:	8290      	l32i.n	a2, a9, 0
  908488:	b022      	addi.n	a2, a2, -1
  90848a:	727102        	beq	a7, a2, 908490 <ath_intr+0xfc>
  90848d:	600268        	j	9086f9 <ath_intr+0x365>
			adf_os_print("VERY LONG PACKET!!!!!\n");
  908490:	126913        	l32r	a2, 8e28dc <athos_indirection_table_install+0x1368>
  908493:	1a6a10        	l32r	a10, 8e2cd4 <athos_indirection_table_install+0x1760>
  908496:	242212        	l32i	a4, a2, 72
  908499:	981c      	s32i.n	a8, a1, 48
  90849b:	9f1b      	s32i.n	a15, a1, 44
  90849d:	0b4000        	callx8	a4
  9084a0:	881c      	l32i.n	a8, a1, 48
  9084a2:	8f1b      	l32i.n	a15, a1, 44
  9084a4:	60024a        	j	9086f2 <ath_intr+0x35e>
  9084a7:	002680        	excw
			ds_tail = ds;
			ds_tmp = ds_head;
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;
				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
  9084aa:	382580        	excw
  9084ad:	392480        	excw
  9084b0:	3a0866        	excw
  9084b3:	100055        	l32r	a0, 8c8608 <_bss_end+0x3b56f8>
  9084b6:	112b80        	l32r	a1, 8d32b8 <_bss_end+0x3c03a8>
  9084b9:	3b0655        	excw
  9084bc:	020844        	extui	a8, a2, 0, 5
  9084bf:	110544        	l32r	a1, 8c99d0 <_bss_end+0x3b6ac0>
  9084c2:	022a32        	sext	a10, a2, 9
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  9084c5:	4604bb        	excw
  9084c8:	02c0c1        	excw
  9084cb:	981c      	s32i.n	a8, a1, 48
  9084cd:	9f1b      	s32i.n	a15, a1, 44
  9084cf:	5bf969        	call8	906a74 <__adf_nbuf_unmap>
				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  9084d2:	881c      	l32i.n	a8, a1, 48

				if (ds_tmp == NULL) {
  9084d4:	8f1b      	l32i.n	a15, a1, 44
			ds_tmp = ds_head;
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;
				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  9084d6:	26804c        	l8ui	a6, a8, 76
  9084d9:	25804d        	l8ui	a5, a8, 77
  9084dc:	24804e        	l8ui	a4, a8, 78
  9084df:	086610        	slli	a6, a6, 24
  9084e2:	005511        	slli	a5, a5, 16
  9084e5:	065502        	or	a5, a5, a6
  9084e8:	084411        	slli	a4, a4, 8
  9084eb:	054402        	or	a4, a4, a5
  9084ee:	25804f        	l8ui	a5, a8, 79
  9084f1:	045402        	or	a4, a5, a4

				if (ds_tmp == NULL) {
  9084f4:	654021        	bnez	a4, 908519 <ath_intr+0x185>
					adf_os_print("ds_tmp is NULL\n");
  9084f7:	252212        	l32i	a5, a2, 72
  9084fa:	1a6a11        	l32r	a10, 8e2d40 <athos_indirection_table_install+0x17cc>
  9084fd:	0b5000        	callx8	a5
					adf_os_assert(0);
  908500:	1a69f4        	l32r	a10, 8e2cd0 <athos_indirection_table_install+0x175c>
  908503:	252212        	l32i	a5, a2, 72
  908506:	1b6a12        	l32r	a11, 8e2d50 <athos_indirection_table_install+0x17dc>
  908509:	0b5000        	callx8	a5
  90850c:	156978        	l32r	a5, 8e2aec <athos_indirection_table_install+0x1578>
  90850f:	8f1b      	l32i.n	a15, a1, 44
  908511:	0c0200        	memw
  908514:	8550      	l32i.n	a5, a5, 0
  908516:	28120c        	l32i	a8, a1, 48
				}

				BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ds_rmv->ds_nbuf);
  908519:	278034        	l8ui	a7, a8, 52
  90851c:	258035        	l8ui	a5, a8, 53
  90851f:	268036        	l8ui	a6, a8, 54
  908522:	087710        	slli	a7, a7, 24
  908525:	005511        	slli	a5, a5, 16
  908528:	075502        	or	a5, a5, a7
  90852b:	086611        	slli	a6, a6, 8
  90852e:	056602        	or	a6, a6, a5
  908531:	156913        	l32r	a5, 8e2980 <athos_indirection_table_install+0x140c>
  908534:	2c8037        	l8ui	a12, a8, 55
  908537:	25529e        	l32i	a5, a5, 0x278
  90853a:	8a30      	l32i.n	a10, a3, 0
  90853c:	06cc02        	or	a12, a12, a6
  90853f:	9f1b      	s32i.n	a15, a1, 44
  908541:	c0b3      	movi.n	a11, 3
  908543:	981c      	s32i.n	a8, a1, 48
  908545:	0b5000        	callx8	a5
				ds_rmv->ds_nbuf = ADF_NBUF_NULL;
  908548:	881c      	l32i.n	a8, a1, 48
  90854a:	c050      	movi.n	a5, 0
  90854c:	258434        	s8i	a5, a8, 52
  90854f:	258435        	s8i	a5, a8, 53
  908552:	258436        	s8i	a5, a8, 54
  908555:	258437        	s8i	a5, a8, 55

				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  908558:	db80      	mov.n	a11, a8
  90855a:	da30      	mov.n	a10, a3
  90855c:	981c      	s32i.n	a8, a1, 48
  90855e:	5bfe04        	call8	907d70 <ath_rxdesc_init>
  908561:	881c      	l32i.n	a8, a1, 48
  908563:	8f1b      	l32i.n	a15, a1, 44
  908565:	25804c        	l8ui	a5, a8, 76
  908568:	26804d        	l8ui	a6, a8, 77
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  90856b:	085510        	slli	a5, a5, 24
  90856e:	006611        	slli	a6, a6, 16
  908571:	056602        	or	a6, a6, a5
  908574:	25804e        	l8ui	a5, a8, 78
  908577:	278051        	l8ui	a7, a8, 81
  90857a:	085511        	slli	a5, a5, 8
  90857d:	065502        	or	a5, a5, a6
  908580:	26804f        	l8ui	a6, a8, 79
  908583:	007711        	slli	a7, a7, 16
  908586:	056502        	or	a5, a6, a5
  908589:	268050        	l8ui	a6, a8, 80
  90858c:	086610        	slli	a6, a6, 24
  90858f:	067702        	or	a7, a7, a6
  908592:	268052        	l8ui	a6, a8, 82
  908595:	086611        	slli	a6, a6, 8
  908598:	076602        	or	a6, a6, a7
				}

				BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ds_rmv->ds_nbuf);
				ds_rmv->ds_nbuf = ADF_NBUF_NULL;

				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  90859b:	65a099        	bnez	a10, 908638 <ath_intr+0x2a4>
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  90859e:	c95e      	beqz.n	a5, 9085c0 <ath_intr+0x22c>
  9085a0:	278053        	l8ui	a7, a8, 83
  9085a3:	067602        	or	a6, a7, a6
  9085a6:	068757        	extui	a7, a6, 24, 8
  9085a9:	275450        	s8i	a7, a5, 80
  9085ac:	060757        	extui	a7, a6, 16, 8
  9085af:	275451        	s8i	a7, a5, 81
  9085b2:	068747        	extui	a7, a6, 8, 8
  9085b5:	275452        	s8i	a7, a5, 82
  9085b8:	265453        	s8i	a6, a5, 83
  9085bb:	60000a        	j	9085c9 <ath_intr+0x235>
  9085be:	000025        	excw
  9085c1:	8053      	l32i.n	a0, a5, 12
  9085c3:	065602        	or	a6, a5, a6
  9085c6:	2636da        	s32i	a6, a3, 0x368
  9085c9:	278050        	l8ui	a7, a8, 80
  9085cc:	268051        	l8ui	a6, a8, 81
  9085cf:	258052        	l8ui	a5, a8, 82
  9085d2:	087710        	slli	a7, a7, 24
  9085d5:	006611        	slli	a6, a6, 16
  9085d8:	076602        	or	a6, a6, a7
  9085db:	085511        	slli	a5, a5, 8
  9085de:	065502        	or	a5, a5, a6
  9085e1:	268053        	l8ui	a6, a8, 83
  9085e4:	2a804c        	l8ui	a10, a8, 76
  9085e7:	27804d        	l8ui	a7, a8, 77
  9085ea:	056502        	or	a5, a6, a5
  9085ed:	26804e        	l8ui	a6, a8, 78
  9085f0:	08aa10        	slli	a10, a10, 24
  9085f3:	007711        	slli	a7, a7, 16
  9085f6:	0a7702        	or	a7, a7, a10
  9085f9:	086611        	slli	a6, a6, 8
  9085fc:	076602        	or	a6, a6, a7
  9085ff:	27804f        	l8ui	a7, a8, 79
  908602:	067602        	or	a6, a7, a6
  908605:	9650      	s32i.n	a6, a5, 0
					asf_tailq_insert_tail(&sc->sc_rxdesc, ds_rmv, ds_list);
  908607:	c050      	movi.n	a5, 0
  908609:	25844c        	s8i	a5, a8, 76
  90860c:	25844d        	s8i	a5, a8, 77
  90860f:	25844e        	s8i	a5, a8, 78
  908612:	25844f        	s8i	a5, a8, 79
  908615:	2532da        	l32i	a5, a3, 0x368
  908618:	058657        	extui	a6, a5, 24, 8
  90861b:	268450        	s8i	a6, a8, 80
  90861e:	050657        	extui	a6, a5, 16, 8
  908621:	268451        	s8i	a6, a8, 81
  908624:	058647        	extui	a6, a5, 8, 8
  908627:	258453        	s8i	a5, a8, 83
  90862a:	268452        	s8i	a6, a8, 82
  90862d:	9850      	s32i.n	a8, a5, 0
  90862f:	258c4c        	addi	a5, a8, 76
  908632:	2536da        	s32i	a5, a3, 0x368
  908635:	600094        	j	9086cd <ath_intr+0x339>
				}
				else {
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  908638:	c95c      	beqz.n	a5, 908658 <ath_intr+0x2c4>
  90863a:	278053        	l8ui	a7, a8, 83
  90863d:	067602        	or	a6, a7, a6
  908640:	068757        	extui	a7, a6, 24, 8
  908643:	275450        	s8i	a7, a5, 80
  908646:	060757        	extui	a7, a6, 16, 8
  908649:	275451        	s8i	a7, a5, 81
  90864c:	068747        	extui	a7, a6, 8, 8
  90864f:	275452        	s8i	a7, a5, 82
  908652:	265453        	s8i	a6, a5, 83
  908655:	600008        	j	908661 <ath_intr+0x2cd>
  908658:	258053        	l8ui	a5, a8, 83
  90865b:	065602        	or	a6, a5, a6
  90865e:	2636da        	s32i	a6, a3, 0x368
  908661:	278050        	l8ui	a7, a8, 80
  908664:	268051        	l8ui	a6, a8, 81
  908667:	258052        	l8ui	a5, a8, 82
  90866a:	087710        	slli	a7, a7, 24
  90866d:	006611        	slli	a6, a6, 16
  908670:	076602        	or	a6, a6, a7
  908673:	085511        	slli	a5, a5, 8
  908676:	065502        	or	a5, a5, a6
  908679:	268053        	l8ui	a6, a8, 83
  90867c:	2a804c        	l8ui	a10, a8, 76
  90867f:	27804d        	l8ui	a7, a8, 77
  908682:	056502        	or	a5, a6, a5
  908685:	26804e        	l8ui	a6, a8, 78
  908688:	08aa10        	slli	a10, a10, 24
  90868b:	007711        	slli	a7, a7, 16
  90868e:	0a7702        	or	a7, a7, a10
  908691:	086611        	slli	a6, a6, 8
  908694:	076602        	or	a6, a6, a7
  908697:	27804f        	l8ui	a7, a8, 79
  90869a:	067602        	or	a6, a7, a6
  90869d:	9650      	s32i.n	a6, a5, 0
					asf_tailq_insert_tail(&sc->sc_rxdesc_idle, ds_rmv, ds_list);
  90869f:	c050      	movi.n	a5, 0
  9086a1:	25844c        	s8i	a5, a8, 76
  9086a4:	25844d        	s8i	a5, a8, 77
  9086a7:	25844e        	s8i	a5, a8, 78
  9086aa:	25844f        	s8i	a5, a8, 79
  9086ad:	2532d8        	l32i	a5, a3, 0x360
  9086b0:	058657        	extui	a6, a5, 24, 8
  9086b3:	268450        	s8i	a6, a8, 80
  9086b6:	050657        	extui	a6, a5, 16, 8
  9086b9:	268451        	s8i	a6, a8, 81
  9086bc:	058647        	extui	a6, a5, 8, 8
  9086bf:	258453        	s8i	a5, a8, 83
  9086c2:	268452        	s8i	a6, a8, 82
  9086c5:	9850      	s32i.n	a8, a5, 0
  9086c7:	258c4c        	addi	a5, a8, 76
  9086ca:	2536d8        	s32i	a5, a3, 0x360
				}

				if (ds_rmv == ds_tail) {
  9086cd:	7f891f        	bne	a8, a15, 9086f0 <ath_intr+0x35c>
			if (status & HAL_INT_RX)
				sc->sc_int_stats.ast_rx++;

			ath_uapsd_processtriggers(sc);

			sc->sc_imask &= ~HAL_INT_RX;
  9086d0:	2232c4        	l32i	a2, a3, 0x310
			ah->ah_setInterrupts(ah, sc->sc_imask);
  9086d3:	8418      	l32i.n	a4, a1, 32
			if (status & HAL_INT_RX)
				sc->sc_int_stats.ast_rx++;

			ath_uapsd_processtriggers(sc);

			sc->sc_imask &= ~HAL_INT_RX;
  9086d5:	c7be      	movi.n	a11, -2
  9086d7:	02bb01        	and	a11, a11, a2
			ah->ah_setInterrupts(ah, sc->sc_imask);
  9086da:	224228        	l32i	a2, a4, 160
			if (status & HAL_INT_RX)
				sc->sc_int_stats.ast_rx++;

			ath_uapsd_processtriggers(sc);

			sc->sc_imask &= ~HAL_INT_RX;
  9086dd:	2b36c4        	s32i	a11, a3, 0x310
			ah->ah_setInterrupts(ah, sc->sc_imask);
  9086e0:	da40      	mov.n	a10, a4
  9086e2:	0b2000        	callx8	a2
  9086e5:	2a3a14        	movi	a10, 0x314
  9086e8:	aa3a      	add.n	a10, a3, a10
  9086ea:	5bfd9d        	call8	907d60 <__adf_os_sched_bh$isra$5>
  9086ed:	600397        	j	908a88 <ath_intr+0x6f4>
			ds_tmp = ds_head;
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;
				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  9086f0:	d840      	mov.n	a8, a4

		if (cnt == ath_numrxbufs - 1) {
			adf_os_print("VERY LONG PACKET!!!!!\n");
			ds_tail = ds;
			ds_tmp = ds_head;
			while (ds_tmp) {
  9086f2:	658db2        	bnez	a8, 9084a8 <ath_intr+0x114>
  9086f5:	63ffd7        	j	9086d0 <ath_intr+0x33c>
  9086f8:	002af0        	excw
				}
			}
			break;
		}

		if (ds->ds_link == 0) {
  9086fb:	0022f0        	excw
  9086fe:	012ef0        	excw
  908701:	0208aa        	excw
  908704:	100022        	l32r	a0, 8c878c <_bss_end+0x3b587c>
  908707:	110a22        	l32r	a1, 8caf90 <_bss_end+0x3b8080>
  90870a:	0208ee        	excw
  90870d:	1102ee        	l32r	a1, 8c92c8 <_bss_end+0x3b63b8>
  908710:	0222f0        	excw
  908713:	030e2e        	excw
  908716:	0264ef        	excw
  908719:	b582      	addi.n	a2, a8, 5
			break;
		}

		if (bf->bf_status & ATH_BUFSTATUS_DONE) {
  90871b:	4f7f27        	excw
  90871e:	026003        	xor	a0, a6, a2
  908721:	5f2af0        	call12	8d32e4 <_bss_end+0x3c03d4>
			continue;
		}

		retval = ah->ah_procRxDescFast(ah, ds, ds->ds_daddr,
  908724:	4822f0        	excw
  908727:	4908aa        	excw
  90872a:	100022        	l32r	a0, 8c87b4 <_bss_end+0x3b58a4>
  90872d:	110a22        	l32r	a1, 8cafb8 <_bss_end+0x3b80a8>
  908730:	022af0        	excw
  908733:	4a2932        	excw
						PA2DESC(sc, ds->ds_link), &bf->bf_rx_status);
  908736:	e0          	.byte 0xe0
  908737:	2d32de        	l32i	a13, a3, 0x378

		if (bf->bf_status & ATH_BUFSTATUS_DONE) {
			continue;
		}

		retval = ah->ah_procRxDescFast(ah, ds, ds->ds_daddr,
  90873a:	2cf04b        	l8ui	a12, a15, 75
  90873d:	08aa11        	slli	a10, a10, 8
  908740:	02a202        	or	a2, a10, a2
						PA2DESC(sc, ds->ds_link), &bf->bf_rx_status);
  908743:	09dd0c        	sub	a13, a13, a9

		if (bf->bf_status & ATH_BUFSTATUS_DONE) {
			continue;
		}

		retval = ah->ah_procRxDescFast(ah, ds, ds->ds_daddr,
  908746:	296222        	l32i	a9, a6, 136
  908749:	dbf0      	mov.n	a11, a15
  90874b:	02cc02        	or	a12, a12, a2
  90874e:	aedd      	add.n	a13, a13, a14
  908750:	9f1b      	s32i.n	a15, a1, 44
  908752:	066a02        	or	a10, a6, a6
  908755:	2e4c40        	addi	a14, a4, 64
  908758:	981c      	s32i.n	a8, a1, 48
  90875a:	0b9000        	callx8	a9
						PA2DESC(sc, ds->ds_link), &bf->bf_rx_status);
		if (HAL_EINPROGRESS == retval) {
  90875d:	220a0f        	movi	a2, 15
  908760:	2f120b        	l32i	a15, a1, 44
  908763:	72a902        	bne	a10, a2, 908769 <ath_intr+0x3d5>
  908766:	63ff66        	j	9086d0 <ath_intr+0x33c>
			break;
		}

		if (adf_nbuf_len(ds->ds_nbuf) == 0) {
  908769:	2bf034        	l8ui	a11, a15, 52
  90876c:	2af035        	l8ui	a10, a15, 53
  90876f:	22f036        	l8ui	a2, a15, 54
  908772:	08bb10        	slli	a11, a11, 24
  908775:	00aa11        	slli	a10, a10, 16
  908778:	0baa02        	or	a10, a10, a11
  90877b:	082211        	slli	a2, a2, 8
  90877e:	0a2202        	or	a2, a2, a10
  908781:	2af037        	l8ui	a10, a15, 55
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  908784:	02aa02        	or	a10, a10, a2
  908787:	5bf939        	call8	906c6c <__adf_nbuf_len>
  90878a:	881c      	l32i.n	a8, a1, 48
  90878c:	8f1b      	l32i.n	a15, a1, 44
  90878e:	65a027        	bnez	a10, 9087b9 <ath_intr+0x425>
			adf_nbuf_put_tail(ds->ds_nbuf, bf->bf_rx_status.rs_datalen);
  908791:	2bf034        	l8ui	a11, a15, 52
  908794:	2af035        	l8ui	a10, a15, 53
  908797:	22f036        	l8ui	a2, a15, 54
  90879a:	08bb10        	slli	a11, a11, 24
  90879d:	00aa11        	slli	a10, a10, 16
  9087a0:	0baa02        	or	a10, a10, a11
  9087a3:	082211        	slli	a2, a2, 8
  9087a6:	0a2202        	or	a2, a2, a10
  9087a9:	2af037        	l8ui	a10, a15, 55
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  9087ac:	2b4124        	l16ui	a11, a4, 72
  9087af:	02aa02        	or	a10, a10, a2
  9087b2:	5bf91a        	call8	906c1c <__adf_nbuf_put_tail>
  9087b5:	8f1b      	l32i.n	a15, a1, 44
  9087b7:	881c      	l32i.n	a8, a1, 48
		}

		frame_len += bf->bf_rx_status.rs_datalen;
  9087b9:	224124        	l16ui	a2, a4, 72

		if (bf->bf_rx_status.rs_more == 0) {
  9087bc:	2d4056        	l8ui	a13, a4, 86

		if (adf_nbuf_len(ds->ds_nbuf) == 0) {
			adf_nbuf_put_tail(ds->ds_nbuf, bf->bf_rx_status.rs_datalen);
		}

		frame_len += bf->bf_rx_status.rs_datalen;
  9087bf:	a255      	add.n	a5, a5, a2
  9087c1:	05054f        	extui	a5, a5, 0, 16

		if (bf->bf_rx_status.rs_more == 0) {
  9087c4:	65d29c        	bnez	a13, 908a64 <ath_intr+0x6d0>
 * @param[in] head  buf queue head
 */
static inline void
adf_nbuf_queue_init(adf_nbuf_queue_t *head)
{
    __adf_nbuf_queue_init(head);
  9087c7:	da10      	mov.n	a10, a1
  9087c9:	981c      	s32i.n	a8, a1, 48
  9087cb:	9d1a      	s32i.n	a13, a1, 40
  9087cd:	9f1b      	s32i.n	a15, a1, 44
  9087cf:	5bf935        	call8	906ca4 <__adf_nbuf_queue_init>
			adf_nbuf_queue_init(&nbuf_head);

			cnt = 0;

			ds_tail = ds;
			ds = asf_tailq_next(ds, ds_list);
  9087d2:	8f1b      	l32i.n	a15, a1, 44
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;

				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				adf_nbuf_queue_add(&nbuf_head, ds_tmp->ds_nbuf);
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;
  9087d4:	8d1a      	l32i.n	a13, a1, 40
			adf_nbuf_queue_init(&nbuf_head);

			cnt = 0;

			ds_tail = ds;
			ds = asf_tailq_next(ds, ds_list);
  9087d6:	2af04c        	l8ui	a10, a15, 76
  9087d9:	27f04d        	l8ui	a7, a15, 77
  9087dc:	22f04e        	l8ui	a2, a15, 78
  9087df:	08aa10        	slli	a10, a10, 24
  9087e2:	007711        	slli	a7, a7, 16
  9087e5:	0a7702        	or	a7, a7, a10
  9087e8:	082211        	slli	a2, a2, 8
  9087eb:	072202        	or	a2, a2, a7
  9087ee:	27f04f        	l8ui	a7, a15, 79
  9087f1:	881c      	l32i.n	a8, a1, 48
  9087f3:	027202        	or	a2, a7, a2
  9087f6:	9219      	s32i.n	a2, a1, 36
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;

				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				adf_nbuf_queue_add(&nbuf_head, ds_tmp->ds_nbuf);
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;
  9087f8:	d2d0      	mov.n	a2, a13
  9087fa:	60025e        	j	908a5c <ath_intr+0x6c8>
			ds_head = asf_tailq_next(ds_tail, ds_list);

			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;

				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
  9087fd:	2b8038        	l8ui	a11, a8, 56
  908800:	2a8039        	l8ui	a10, a8, 57
  908803:	27803a        	l8ui	a7, a8, 58
  908806:	08bb10        	slli	a11, a11, 24
  908809:	00aa11        	slli	a10, a10, 16
  90880c:	0baa02        	or	a10, a10, a11
  90880f:	087711        	slli	a7, a7, 8
  908812:	2b803b        	l8ui	a11, a8, 59
  908815:	0a7702        	or	a7, a7, a10
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  908818:	2a3246        	l32i	a10, a3, 0x118
  90881b:	07bb02        	or	a11, a11, a7
  90881e:	c0c1      	movi.n	a12, 1
  908820:	2f160b        	s32i	a15, a1, 44
  908823:	28160c        	s32i	a8, a1, 48
  908826:	5bf893        	call8	906a74 <__adf_nbuf_unmap>
				adf_nbuf_queue_add(&nbuf_head, ds_tmp->ds_nbuf);
  908829:	881c      	l32i.n	a8, a1, 48
  90882b:	2b8034        	l8ui	a11, a8, 52
  90882e:	2a8035        	l8ui	a10, a8, 53
  908831:	278036        	l8ui	a7, a8, 54
  908834:	08bb10        	slli	a11, a11, 24
  908837:	00aa11        	slli	a10, a10, 16
  90883a:	0baa02        	or	a10, a10, a11
  90883d:	087711        	slli	a7, a7, 8
  908840:	2b8037        	l8ui	a11, a8, 55
  908843:	0a7702        	or	a7, a7, a10
 * @param[in] buf   buf
 */
static inline void
adf_nbuf_queue_add(adf_nbuf_queue_t *head, adf_nbuf_t buf)
{
    __adf_nbuf_queue_add(head, buf);
  908846:	07bb02        	or	a11, a11, a7
  908849:	da10      	mov.n	a10, a1
  90884b:	5bf86e        	call8	906a04 <__adf_nbuf_queue_add>
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;
  90884e:	881c      	l32i.n	a8, a1, 48

				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  908850:	2b804c        	l8ui	a11, a8, 76
  908853:	2a804d        	l8ui	a10, a8, 77
  908856:	27804e        	l8ui	a7, a8, 78
  908859:	08bb10        	slli	a11, a11, 24
  90885c:	00aa11        	slli	a10, a10, 16
  90885f:	0baa02        	or	a10, a10, a11
  908862:	087711        	slli	a7, a7, 8
  908865:	0a7702        	or	a7, a7, a10
  908868:	2a804f        	l8ui	a10, a8, 79
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;

				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				adf_nbuf_queue_add(&nbuf_head, ds_tmp->ds_nbuf);
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;
  90886b:	228434        	s8i	a2, a8, 52
  90886e:	228435        	s8i	a2, a8, 53
  908871:	228436        	s8i	a2, a8, 54
  908874:	228437        	s8i	a2, a8, 55

				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  908877:	07a702        	or	a7, a10, a7
				if (ds_tmp == NULL) {
  90887a:	8f1b      	l32i.n	a15, a1, 44
  90887c:	65701d        	bnez	a7, 90889d <ath_intr+0x509>
					adf_os_assert(0);
  90887f:	1a6913        	l32r	a10, 8e2ccc <athos_indirection_table_install+0x1758>
  908882:	1b6a12        	l32r	a11, 8e30cc <athos_indirection_table_install+0x1b58>
  908885:	2ca212        	l32i	a12, a10, 72
  908888:	1a69f4        	l32r	a10, 8e3058 <athos_indirection_table_install+0x1ae4>
  90888b:	28160c        	s32i	a8, a1, 48
  90888e:	0bc000        	callx8	a12
  908891:	1a6978        	l32r	a10, 8e2e74 <athos_indirection_table_install+0x1900>
  908894:	8f1b      	l32i.n	a15, a1, 44
  908896:	0c0200        	memw
  908899:	8aa0      	l32i.n	a10, a10, 0
  90889b:	881c      	l32i.n	a8, a1, 48
				}

				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  90889d:	db80      	mov.n	a11, a8
  90889f:	da30      	mov.n	a10, a3
  9088a1:	981c      	s32i.n	a8, a1, 48
  9088a3:	9f1b      	s32i.n	a15, a1, 44
  9088a5:	5bfd32        	call8	907d70 <ath_rxdesc_init>
  9088a8:	881c      	l32i.n	a8, a1, 48
  9088aa:	8f1b      	l32i.n	a15, a1, 44
  9088ac:	2c804c        	l8ui	a12, a8, 76
  9088af:	2b804d        	l8ui	a11, a8, 77
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  9088b2:	08cc10        	slli	a12, a12, 24
  9088b5:	00bb11        	slli	a11, a11, 16
  9088b8:	0cbb02        	or	a11, a11, a12
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
				if (ds_tmp == NULL) {
					adf_os_assert(0);
				}

				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  9088bb:	65a0bd        	bnez	a10, 90897c <ath_intr+0x5e8>
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  9088be:	2a804e        	l8ui	a10, a8, 78
  9088c1:	2c8051        	l8ui	a12, a8, 81
  9088c4:	08aa11        	slli	a10, a10, 8
  9088c7:	0baa02        	or	a10, a10, a11
  9088ca:	2b804f        	l8ui	a11, a8, 79
  9088cd:	00cc11        	slli	a12, a12, 16
  9088d0:	0aba02        	or	a10, a11, a10
  9088d3:	2b8050        	l8ui	a11, a8, 80
  9088d6:	08bb10        	slli	a11, a11, 24
  9088d9:	0bcc02        	or	a12, a12, a11
  9088dc:	2b8052        	l8ui	a11, a8, 82
  9088df:	08bb11        	slli	a11, a11, 8
  9088e2:	0cbb02        	or	a11, a11, a12
  9088e5:	c9ac      	beqz.n	a10, 908905 <ath_intr+0x571>
  9088e7:	2c8053        	l8ui	a12, a8, 83
  9088ea:	0bcb02        	or	a11, a12, a11
  9088ed:	0b8c57        	extui	a12, a11, 24, 8
  9088f0:	2ca450        	s8i	a12, a10, 80
  9088f3:	0b0c57        	extui	a12, a11, 16, 8
  9088f6:	2ca451        	s8i	a12, a10, 81
  9088f9:	0b8c47        	extui	a12, a11, 8, 8
  9088fc:	2ca452        	s8i	a12, a10, 82
  9088ff:	2ba453        	s8i	a11, a10, 83
  908902:	600008        	j	90890e <ath_intr+0x57a>
  908905:	2a8053        	l8ui	a10, a8, 83
  908908:	0bab02        	or	a11, a10, a11
  90890b:	2b36da        	s32i	a11, a3, 0x368
  90890e:	2c8050        	l8ui	a12, a8, 80
  908911:	2b8051        	l8ui	a11, a8, 81
  908914:	2a8052        	l8ui	a10, a8, 82
  908917:	08cc10        	slli	a12, a12, 24
  90891a:	00bb11        	slli	a11, a11, 16
  90891d:	0cbb02        	or	a11, a11, a12
  908920:	08aa11        	slli	a10, a10, 8
  908923:	0baa02        	or	a10, a10, a11
  908926:	2b8053        	l8ui	a11, a8, 83
  908929:	2e804c        	l8ui	a14, a8, 76
  90892c:	2c804d        	l8ui	a12, a8, 77
  90892f:	0aba02        	or	a10, a11, a10
  908932:	2b804e        	l8ui	a11, a8, 78
  908935:	08ee10        	slli	a14, a14, 24
  908938:	00cc11        	slli	a12, a12, 16
  90893b:	0ecc02        	or	a12, a12, a14
  90893e:	08bb11        	slli	a11, a11, 8
  908941:	0cbb02        	or	a11, a11, a12
  908944:	2c804f        	l8ui	a12, a8, 79
  908947:	0bcb02        	or	a11, a12, a11
  90894a:	9ba0      	s32i.n	a11, a10, 0
					asf_tailq_insert_tail(&sc->sc_rxdesc, ds_rmv, ds_list);
  90894c:	22844c        	s8i	a2, a8, 76
  90894f:	22844d        	s8i	a2, a8, 77
  908952:	22844e        	s8i	a2, a8, 78
  908955:	22844f        	s8i	a2, a8, 79
  908958:	2a32da        	l32i	a10, a3, 0x368
  90895b:	0a8b57        	extui	a11, a10, 24, 8
  90895e:	2b8450        	s8i	a11, a8, 80
  908961:	0a0b57        	extui	a11, a10, 16, 8
  908964:	2b8451        	s8i	a11, a8, 81
  908967:	0a8b47        	extui	a11, a10, 8, 8
  90896a:	2a8453        	s8i	a10, a8, 83
  90896d:	2b8452        	s8i	a11, a8, 82
  908970:	98a0      	s32i.n	a8, a10, 0
  908972:	2a8c4c        	addi	a10, a8, 76
  908975:	2a36da        	s32i	a10, a3, 0x368
  908978:	6000bb        	j	908a37 <ath_intr+0x6a3>
  90897b:	002a80        	excw
				}  else {
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  90897e:	4e2c80        	excw
  908981:	5108aa        	call0	94ac2c <_etext+0x3bb3f>
  908984:	110baa        	l32r	a1, 8cb82c <_bss_end+0x3b891c>
  908987:	022b80        	excw
  90898a:	4f00cc        	excw
  90898d:	110aba        	l32r	a1, 8cb478 <_bss_end+0x3b8568>
  908990:	022b80        	excw
  908993:	5008bb        	call0	90ac80 <_HIFusb_start_patch+0xc>
  908996:	100bcc        	l32r	a0, 8cb8c8 <_bss_end+0x3b89b8>
  908999:	022b80        	excw
  90899c:	5208bb        	call0	88ac8c <_bss_end+0x377d7c>
  90899f:	110cbb        	l32r	a1, 8cbc8c <_bss_end+0x3b8d7c>
  9089a2:	02c9ad        	excw
  9089a5:	2c8053        	l8ui	a12, a8, 83
  9089a8:	0bcb02        	or	a11, a12, a11
  9089ab:	0b8c57        	extui	a12, a11, 24, 8
  9089ae:	2ca450        	s8i	a12, a10, 80
  9089b1:	0b0c57        	extui	a12, a11, 16, 8
  9089b4:	2ca451        	s8i	a12, a10, 81
  9089b7:	0b8c47        	extui	a12, a11, 8, 8
  9089ba:	2ca452        	s8i	a12, a10, 82
  9089bd:	2ba453        	s8i	a11, a10, 83
  9089c0:	600009        	j	9089cd <ath_intr+0x639>
  9089c3:	002a80        	excw
  9089c6:	530bab        	call0	8cb874 <_bss_end+0x3b8964>
  9089c9:	022b36        	minu	a11, a2, a2
  9089cc:	da2c      	excw
  9089ce:	8050      	l32i.n	a0, a5, 0
  9089d0:	2b8051        	l8ui	a11, a8, 81
  9089d3:	2a8052        	l8ui	a10, a8, 82
  9089d6:	08cc10        	slli	a12, a12, 24
  9089d9:	00bb11        	slli	a11, a11, 16
  9089dc:	0cbb02        	or	a11, a11, a12
  9089df:	08aa11        	slli	a10, a10, 8
  9089e2:	0baa02        	or	a10, a10, a11
  9089e5:	2b8053        	l8ui	a11, a8, 83
  9089e8:	2e804c        	l8ui	a14, a8, 76
  9089eb:	2c804d        	l8ui	a12, a8, 77
  9089ee:	0aba02        	or	a10, a11, a10
  9089f1:	2b804e        	l8ui	a11, a8, 78
  9089f4:	08ee10        	slli	a14, a14, 24
  9089f7:	00cc11        	slli	a12, a12, 16
  9089fa:	0ecc02        	or	a12, a12, a14
  9089fd:	08bb11        	slli	a11, a11, 8
  908a00:	0cbb02        	or	a11, a11, a12
  908a03:	2c804f        	l8ui	a12, a8, 79
  908a06:	0bcb02        	or	a11, a12, a11
  908a09:	9ba0      	s32i.n	a11, a10, 0
					asf_tailq_insert_tail(&sc->sc_rxdesc_idle, ds_rmv, ds_list);
  908a0b:	22844c        	s8i	a2, a8, 76
  908a0e:	22844d        	s8i	a2, a8, 77
  908a11:	22844e        	s8i	a2, a8, 78
  908a14:	22844f        	s8i	a2, a8, 79
  908a17:	2a32d8        	l32i	a10, a3, 0x360
  908a1a:	0a8b57        	extui	a11, a10, 24, 8
  908a1d:	2b8450        	s8i	a11, a8, 80
  908a20:	0a0b57        	extui	a11, a10, 16, 8
  908a23:	2b8451        	s8i	a11, a8, 81
  908a26:	0a8b47        	extui	a11, a10, 8, 8
  908a29:	2a8453        	s8i	a10, a8, 83
  908a2c:	2b8452        	s8i	a11, a8, 82
  908a2f:	98a0      	s32i.n	a8, a10, 0
  908a31:	2a8c4c        	addi	a10, a8, 76
  908a34:	2a36d8        	s32i	a10, a3, 0x360
				}

				if (ds_rmv == ds_tail) {
  908a37:	7f891f        	bne	a8, a15, 908a5a <ath_intr+0x6c6>
					break;
				}
			}


			bf->bf_rx_status.rs_datalen = frame_len;
  908a3a:	254524        	s16i	a5, a4, 72
}

static inline adf_nbuf_t
adf_nbuf_create_frm_frag(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_create_frm_frag(head);
  908a3d:	da10      	mov.n	a10, a1
  908a3f:	5bf821        	call8	906ac4 <__adf_nbuf_create_frm_frag>
			frame_len = 0;

			bf->bf_skb = adf_nbuf_create_frm_frag(&nbuf_head);

			bf->bf_status |= ATH_BUFSTATUS_DONE;
  908a42:	874f      	l32i.n	a7, a4, 60
  908a44:	c051      	movi.n	a5, 1
  908a46:	057502        	or	a5, a7, a5

			ds_tail = ds;
			ds = asf_tailq_next(ds, ds_list);

			ds_tmp = ds_head;
			ds_head = asf_tailq_next(ds_tail, ds_list);
  908a49:	8819      	l32i.n	a8, a1, 36


			bf->bf_rx_status.rs_datalen = frame_len;
			frame_len = 0;

			bf->bf_skb = adf_nbuf_create_frm_frag(&nbuf_head);
  908a4b:	9a48      	s32i.n	a10, a4, 32

			bf->bf_status |= ATH_BUFSTATUS_DONE;
  908a4d:	954f      	s32i.n	a5, a4, 60

			bf = (struct ath_rx_buf *)asf_tailq_next(bf, bf_list);
  908a4f:	8449      	l32i.n	a4, a4, 36
			adf_nbuf_queue_init(&nbuf_head);

			cnt = 0;

			ds_tail = ds;
			ds = asf_tailq_next(ds, ds_list);
  908a51:	df80      	mov.n	a15, a8
				}
			}


			bf->bf_rx_status.rs_datalen = frame_len;
			frame_len = 0;
  908a53:	c050      	movi.n	a5, 0

		if (bf->bf_rx_status.rs_more == 0) {
			adf_nbuf_queue_t nbuf_head;
			adf_nbuf_queue_init(&nbuf_head);

			cnt = 0;
  908a55:	d750      	mov.n	a7, a5
  908a57:	600027        	j	908a82 <ath_intr+0x6ee>
				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				adf_nbuf_queue_add(&nbuf_head, ds_tmp->ds_nbuf);
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;

				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  908a5a:	d870      	mov.n	a8, a7
			ds = asf_tailq_next(ds, ds_list);

			ds_tmp = ds_head;
			ds_head = asf_tailq_next(ds_tail, ds_list);

			while (ds_tmp) {
  908a5c:	658d9d        	bnez	a8, 9087fd <ath_intr+0x469>
  908a5f:	63ffd7        	j	908a3a <ath_intr+0x6a6>
  908a62:	00002b        	mulsh	a0, a0, a0
			bf->bf_status |= ATH_BUFSTATUS_DONE;

			bf = (struct ath_rx_buf *)asf_tailq_next(bf, bf_list);
		}
		else {
			ds = asf_tailq_next(ds, ds_list);
  908a65:	f0          	.byte 0xf0
  908a66:	4c2af0        	excw
  908a69:	4d22f0        	excw
  908a6c:	4e08bb        	excw
  908a6f:	1000aa        	l32r	a0, 8c8d18 <_bss_end+0x3b5e08>
  908a72:	110baa        	l32r	a1, 8cb91c <_bss_end+0x3b8a0c>
  908a75:	020822        	excw
  908a78:	112ff0        	l32r	a1, 8d4a38 <_bss_end+0x3c1b28>
  908a7b:	4f0a22        	excw
  908a7e:	0202ff        	excw
  908a81:	0265f9        	excw
	bf = asf_tailq_first(&sc->sc_rxbuf);

	ds = asf_tailq_first(&sc->sc_rxdesc);
	ds_head = ds;

	while(ds) {
  908a84:	fb          	.byte 0xfb
  908a85:	63fc47        	j	9086d0 <ath_intr+0x33c>
			ah->ah_setInterrupts(ah, sc->sc_imask);

			ATH_SCHEDULE_TQUEUE(sc->sc_dev, &sc->sc_rxtq);
		}

		if (status & HAL_INT_TXURN) {
  908a88:	8216      	l32i.n	a2, a1, 24
  908a8a:	742712        	bbci	a2, 20, 908aa0 <ath_intr+0x70c>
			sc->sc_int_stats.ast_txurn++;
  908a8d:	22324f        	l32i	a2, a3, 0x13c
			ah->ah_updateTxTrigLevel(ah, AH_TRUE);
  908a90:	8518      	l32i.n	a5, a1, 32

			ATH_SCHEDULE_TQUEUE(sc->sc_dev, &sc->sc_rxtq);
		}

		if (status & HAL_INT_TXURN) {
			sc->sc_int_stats.ast_txurn++;
  908a92:	b122      	addi.n	a2, a2, 1
  908a94:	22364f        	s32i	a2, a3, 0x13c
			ah->ah_updateTxTrigLevel(ah, AH_TRUE);
  908a97:	8257      	l32i.n	a2, a5, 28
  908a99:	da50      	mov.n	a10, a5
  908a9b:	c0b1      	movi.n	a11, 1
  908a9d:	0b2000        	callx8	a2
  908aa0:	2a5a1c        	movi	a10, 0x51c
  908aa3:	aa3a      	add.n	a10, a3, a10
  908aa5:	5bfcae        	call8	907d60 <__adf_os_sched_bh$isra$5>
		}

		ATH_SCHEDULE_TQUEUE(sc->sc_dev, &sc->sc_txtq);

		if (status & HAL_INT_BMISS) {
  908aa8:	8216      	l32i.n	a2, a1, 24
  908aaa:	7d2607        	bbci	a2, 13, 908ab5 <ath_intr+0x721>
  908aad:	2a3a24        	movi	a10, 0x324
  908ab0:	aa3a      	add.n	a10, a3, a10
  908ab2:	5bfcab        	call8	907d60 <__adf_os_sched_bh$isra$5>
			ATH_SCHEDULE_TQUEUE(sc->sc_dev, &sc->sc_bmisstq);
		}

		if (status & HAL_INT_GTT)
  908ab5:	8416      	l32i.n	a4, a1, 24
  908ab7:	724607        	bbci	a4, 2, 908ac2 <ath_intr+0x72e>
			sc->sc_int_stats.ast_txto++;
  908aba:	223250        	l32i	a2, a3, 0x140
  908abd:	b122      	addi.n	a2, a2, 1
  908abf:	223650        	s32i	a2, a3, 0x140

		if (status & HAL_INT_CST)
			sc->sc_int_stats.ast_cst++;
	}

	return ADF_OS_IRQ_HANDLED;
  908ac2:	c021      	movi.n	a2, 1
		}

		if (status & HAL_INT_GTT)
			sc->sc_int_stats.ast_txto++;

		if (status & HAL_INT_CST)
  908ac4:	764608        	bbci	a4, 6, 908ad0 <ath_intr+0x73c>
			sc->sc_int_stats.ast_cst++;
  908ac7:	243251        	l32i	a4, a3, 0x144
  908aca:	024408        	add	a4, a4, a2
  908acd:	243651        	s32i	a4, a3, 0x144
	}

	return ADF_OS_IRQ_HANDLED;
}
  908ad0:	d10f      	retw.n
	...

00908ad4 <wmi_cmd_rsp>:
	WMI_SendEvent(handle, netbuf, evt_id, 0, Length);
}

void wmi_cmd_rsp(void *pContext, WMI_COMMAND_ID cmd_id, A_UINT16 SeqNo,
		 void *buffer, a_int32_t Length)
{
  908ad4:	6c1006        	entry	a1, 48
	adf_nbuf_t netbuf = ADF_NBUF_NULL;
	A_UINT8 *pData;

	netbuf = WMI_AllocEvent(pContext, WMI_EVT_CLASS_CMD_REPLY,
  908ad7:	186913        	l32r	a8, 8e2f24 <athos_indirection_table_install+0x19b0>
  908ada:	da20      	mov.n	a10, a2
  908adc:	27828d        	l32i	a7, a8, 0x234
  908adf:	c0b1      	movi.n	a11, 1
  908ae1:	9810      	s32i.n	a8, a1, 0
  908ae3:	b46c      	addi.n	a12, a6, 4
  908ae5:	0b7000        	callx8	a7
	WMI_SendEvent(handle, netbuf, evt_id, 0, Length);
}

void wmi_cmd_rsp(void *pContext, WMI_COMMAND_ID cmd_id, A_UINT16 SeqNo,
		 void *buffer, a_int32_t Length)
{
  908ae8:	04044f        	extui	a4, a4, 0, 16
	adf_nbuf_t netbuf = ADF_NBUF_NULL;
	A_UINT8 *pData;

	netbuf = WMI_AllocEvent(pContext, WMI_EVT_CLASS_CMD_REPLY,
  908aeb:	d7a0      	mov.n	a7, a10
				sizeof(WMI_CMD_HDR) + Length);

	if (netbuf == ADF_NBUF_NULL) {
  908aed:	8810      	l32i.n	a8, a1, 0
  908aef:	cda5      	bnez.n	a10, 908b08 <wmi_cmd_rsp+0x34>
		adf_os_assert(0);
  908af1:	228212        	l32i	a2, a8, 72
  908af4:	1a69f4        	l32r	a10, 8e32c4 <athos_indirection_table_install+0x1d50>
  908af7:	1b6a13        	l32r	a11, 8e3344 <athos_indirection_table_install+0x1dd0>
  908afa:	0b2000        	callx8	a2
  908afd:	126978        	l32r	a2, 8e30e0 <athos_indirection_table_install+0x1b6c>
  908b00:	0c0200        	memw
  908b03:	8220      	l32i.n	a2, a2, 0
  908b05:	d10f      	retw.n
  908b07:	00c86c        	excw
		return;
	}

	if (Length != 0 && buffer != NULL) {
  908b0a:	c85a      	beqz.n	a5, 908b18 <wmi_cmd_rsp+0x44>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  908b0c:	db60      	mov.n	a11, a6
  908b0e:	5bf843        	call8	906c1c <__adf_nbuf_put_tail>
  908b11:	db50      	mov.n	a11, a5
  908b13:	dc60      	mov.n	a12, a6
  908b15:	5bfc11        	call8	907b5c <__adf_os_mem_copy>
		pData = (A_UINT8 *)adf_nbuf_put_tail(netbuf, Length);
		adf_os_mem_copy(pData, buffer, Length);
	}

	WMI_SendEvent(pContext, netbuf, cmd_id, SeqNo, Length);
  908b18:	156913        	l32r	a5, 8e2f64 <athos_indirection_table_install+0x19f0>
  908b1b:	da20      	mov.n	a10, a2
  908b1d:	25528e        	l32i	a5, a5, 0x238
  908b20:	db70      	mov.n	a11, a7
  908b22:	030c4f        	extui	a12, a3, 0, 16
  908b25:	dd40      	mov.n	a13, a4
  908b27:	de60      	mov.n	a14, a6
  908b29:	0b5000        	callx8	a5
  908b2c:	d10f      	retw.n
	...

00908b30 <ath_hal_reg_rmw_tgt>:
}

static void ath_hal_reg_rmw_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data,
				a_int32_t datalen)
{
  908b30:	6c1006        	entry	a1, 48
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  908b33:	272d05        	addmi	a7, a2, 0x500
  908b36:	887b      	l32i.n	a8, a7, 44
}

static void ath_hal_reg_rmw_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data,
				a_int32_t datalen)
{
  908b38:	03034f        	extui	a3, a3, 0, 16
  908b3b:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  908b3e:	9810      	s32i.n	a8, a1, 0
	struct register_rmw *buf = (struct register_rmw *)data;
	int i;

	for (i = 0; i < datalen;
  908b40:	d750      	mov.n	a7, a5
  908b42:	60003f        	j	908b85 <ath_hal_reg_rmw_tgt+0x55>
	     i += sizeof(struct register_rmw)) {
		a_uint32_t val;
		buf = (struct register_rmw *)(data + i);

		val = ath_reg_read_filter(ah, buf->reg);
  908b45:	8b70      	l32i.n	a11, a7, 0
  908b47:	8a10      	l32i.n	a10, a1, 0
  908b49:	5bfd18        	call8	907fac <ath_reg_read_filter>
		val &= ~buf->clr;
  908b4c:	8972      	l32i.n	a9, a7, 8
  908b4e:	c78f      	movi.n	a8, -1
  908b50:	098903        	xor	a9, a8, a9
		val |= buf->set;
  908b53:	8b71      	l32i.n	a11, a7, 4
	     i += sizeof(struct register_rmw)) {
		a_uint32_t val;
		buf = (struct register_rmw *)(data + i);

		val = ath_reg_read_filter(ah, buf->reg);
		val &= ~buf->clr;
  908b55:	09aa01        	and	a10, a10, a9
		val |= buf->set;
  908b58:	0baa02        	or	a10, a10, a11
		ath_hal_reg_write_filter(ah, buf->reg, val);
  908b5b:	8970      	l32i.n	a9, a7, 0
}

static void ath_hal_reg_write_filter(struct ath_hal *ah,
			a_uint32_t reg, a_uint32_t val)
{
	if(reg > 0xffff) {
  908b5d:	1b6a06        	l32r	a11, 8e3378 <athos_indirection_table_install+0x1e04>
  908b60:	79bb04        	bgeu	a11, a9, 908b68 <ath_hal_reg_rmw_tgt+0x38>
  908b63:	600017        	j	908b7e <ath_hal_reg_rmw_tgt+0x4e>
  908b66:	00001b        	sra	a0, a0
				flg = 1;
			}
		}
#endif
	} else {
		if(reg == 0x7014)
  908b69:	6a147b        	blti	a1, 4, 908be8 <ath_rc_mask_tgt+0x4c>
  908b6c:	990a      	s32i.n	a9, a0, 40
			ath_pll_reset_ones(ah);
  908b6e:	9912      	s32i.n	a9, a1, 8
  908b70:	9a11      	s32i.n	a10, a1, 4
  908b72:	5bfce4        	call8	907f04 <ath_pll_reset_ones$isra$9>
  908b75:	8a11      	l32i.n	a10, a1, 4
  908b77:	8912      	l32i.n	a9, a1, 8

		iowrite32_mac(reg, val);
  908b79:	1b6a01        	l32r	a11, 8e3380 <athos_indirection_table_install+0x1e0c>
  908b7c:	ab99      	add.n	a9, a9, a11
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  908b7e:	0c0200        	memw
  908b81:	9a90      	s32i.n	a10, a9, 0
  908b83:	bc77      	addi.n	a7, a7, 12
	}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_hal_reg_rmw_tgt(void *Context, A_UINT16 Command,
  908b85:	05790c        	sub	a9, a7, a5
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
	struct register_rmw *buf = (struct register_rmw *)data;
	int i;

	for (i = 0; i < datalen;
  908b88:	7692b9        	blt	a9, a6, 908b45 <ath_hal_reg_rmw_tgt+0x15>
		val = ath_reg_read_filter(ah, buf->reg);
		val &= ~buf->clr;
		val |= buf->set;
		ath_hal_reg_write_filter(ah, buf->reg, val);
	}
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908b8b:	c0d0      	movi.n	a13, 0
  908b8d:	8a23      	l32i.n	a10, a2, 12
  908b8f:	db30      	mov.n	a11, a3
  908b91:	dc40      	mov.n	a12, a4
  908b93:	ded0      	mov.n	a14, a13
  908b95:	5bffcf        	call8	908ad4 <wmi_cmd_rsp>
  908b98:	d10f      	retw.n
	...

00908b9c <ath_rc_mask_tgt>:
	adf_os_assert(0);
}

static void ath_rc_mask_tgt(void *Context, A_UINT16 Command,
			    A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  908b9c:	6c1004        	entry	a1, 32
	int idx, band, i;

	idx = wmi_data->vap_index;
	band = wmi_data->band;

	sc->sc_vap[idx].av_rate_mask[band] = adf_os_ntohl(wmi_data->mask);
  908b9f:	2e5002        	l8ui	a14, a5, 2
  908ba2:	2d5003        	l8ui	a13, a5, 3
  908ba5:	285004        	l8ui	a8, a5, 4
  908ba8:	08ee10        	slli	a14, a14, 24
  908bab:	00dd11        	slli	a13, a13, 16
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_rate_mask_cmd *wmi_data = (struct wmi_rc_rate_mask_cmd *)buffer;
	int idx, band, i;

	idx = wmi_data->vap_index;
  908bae:	295000        	l8ui	a9, a5, 0
	band = wmi_data->band;
  908bb1:	2a5001        	l8ui	a10, a5, 1

	sc->sc_vap[idx].av_rate_mask[band] = adf_os_ntohl(wmi_data->mask);
  908bb4:	0edd02        	or	a13, a13, a14
  908bb7:	255005        	l8ui	a5, a5, 5
  908bba:	088811        	slli	a8, a8, 8
  908bbd:	0d8802        	or	a8, a8, a13
  908bc0:	085802        	or	a8, a5, a8
  908bc3:	0c9511        	slli	a5, a9, 4
  908bc6:	a955      	add.n	a5, a5, a9
  908bc8:	aa5e      	add.n	a14, a5, a10
  908bca:	2d5a70        	movi	a13, 0x570
  908bcd:	aded      	add.n	a13, a14, a13
  908bcf:	02dd0a        	addx4	a13, a13, a2
  908bd2:	98d4      	s32i.n	a8, a13, 16
	adf_os_assert(0);
}

static void ath_rc_mask_tgt(void *Context, A_UINT16 Command,
			    A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  908bd4:	030b4f        	extui	a11, a3, 0, 16
  908bd7:	040c4f        	extui	a12, a4, 0, 16
	idx = wmi_data->vap_index;
	band = wmi_data->band;

	sc->sc_vap[idx].av_rate_mask[band] = adf_os_ntohl(wmi_data->mask);

	if (sc->sc_vap[idx].av_rate_mask[band]) {
  908bda:	ca8a      	beqz.n	a8, 908c08 <ath_rc_mask_tgt+0x6c>
  908bdc:	c050      	movi.n	a5, 0
		for (i = 0; i < RATE_TABLE_SIZE; i++) {
			if ((1 << i) & sc->sc_vap[idx].av_rate_mask[band]) {
  908bde:	c0d1      	movi.n	a13, 1
  908be0:	005104        	ssl	a5
  908be3:	00de1a        	sll	a14, a13
  908be6:	78e014        	bnone	a14, a8, 908bfe <ath_rc_mask_tgt+0x62>
				sc->sc_vap[idx].av_minrateidx[band] = i;
  908be9:	0c9811        	slli	a8, a9, 4
  908bec:	a989      	add.n	a9, a8, a9
  908bee:	02990a        	addx4	a9, a9, a2
  908bf1:	186a15        	l32r	a8, 8e3448 <athos_indirection_table_install+0x1ed4>
  908bf4:	aa9a      	add.n	a10, a9, a10
  908bf6:	a8aa      	add.n	a10, a10, a8
  908bf8:	25a408        	s8i	a5, a10, 8
				break;
  908bfb:	600016        	j	908c15 <ath_rc_mask_tgt+0x79>
	band = wmi_data->band;

	sc->sc_vap[idx].av_rate_mask[band] = adf_os_ntohl(wmi_data->mask);

	if (sc->sc_vap[idx].av_rate_mask[band]) {
		for (i = 0; i < RATE_TABLE_SIZE; i++) {
  908bfe:	b155      	addi.n	a5, a5, 1
  908c00:	695cdc        	bnei	a5, 32, 908be0 <ath_rc_mask_tgt+0x44>
  908c03:	60000e        	j	908c15 <ath_rc_mask_tgt+0x79>
  908c06:	000002        	or	a0, a0, a0
				sc->sc_vap[idx].av_minrateidx[band] = i;
				break;
			}
		}
	} else {
		sc->sc_vap[idx].av_minrateidx[band] = 0;
  908c09:	550a19        	call4	94b470 <_etext+0x3c383>
  908c0c:	6a15aa        	blti	a1, 5, 908bba <ath_rc_mask_tgt+0x1e>
  908c0f:	5aa9aa        	call8	8b32b8 <_bss_end+0x3a03a8>
  908c12:	28a408        	s8i	a8, a10, 8
	}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908c15:	c0d0      	movi.n	a13, 0
  908c17:	8a23      	l32i.n	a10, a2, 12
  908c19:	ded0      	mov.n	a14, a13
  908c1b:	5bffae        	call8	908ad4 <wmi_cmd_rsp>
  908c1e:	d10f      	retw.n

00908c20 <ath_rx_stats_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
}

static void ath_rx_stats_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
			     A_UINT8 *data, a_int32_t datalen)
{
  908c20:	6c1006        	entry	a1, 48
		a_uint32_t   ast_rx_done;
	};

	struct fusion_stats stats;

	stats.ast_rx_nobuf = sc->sc_rx_stats.ast_rx_nobuf;
  908c23:	28227c        	l32i	a8, a2, 0x1f0
	stats.ast_rx_send = sc->sc_rx_stats.ast_rx_send;
	stats.ast_rx_done = sc->sc_rx_stats.ast_rx_done;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c26:	8a23      	l32i.n	a10, a2, 12
		a_uint32_t   ast_rx_done;
	};

	struct fusion_stats stats;

	stats.ast_rx_nobuf = sc->sc_rx_stats.ast_rx_nobuf;
  908c28:	9810      	s32i.n	a8, a1, 0
	stats.ast_rx_send = sc->sc_rx_stats.ast_rx_send;
  908c2a:	28227d        	l32i	a8, a2, 0x1f4
	stats.ast_rx_done = sc->sc_rx_stats.ast_rx_done;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c2d:	030b4f        	extui	a11, a3, 0, 16
	};

	struct fusion_stats stats;

	stats.ast_rx_nobuf = sc->sc_rx_stats.ast_rx_nobuf;
	stats.ast_rx_send = sc->sc_rx_stats.ast_rx_send;
  908c30:	9811      	s32i.n	a8, a1, 4
	stats.ast_rx_done = sc->sc_rx_stats.ast_rx_done;
  908c32:	28227e        	l32i	a8, a2, 0x1f8

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c35:	040c4f        	extui	a12, a4, 0, 16
  908c38:	dd10      	mov.n	a13, a1
  908c3a:	c0ec      	movi.n	a14, 12

	struct fusion_stats stats;

	stats.ast_rx_nobuf = sc->sc_rx_stats.ast_rx_nobuf;
	stats.ast_rx_send = sc->sc_rx_stats.ast_rx_send;
	stats.ast_rx_done = sc->sc_rx_stats.ast_rx_done;
  908c3c:	9812      	s32i.n	a8, a1, 8

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c3e:	5bffa5        	call8	908ad4 <wmi_cmd_rsp>
  908c41:	d10f      	retw.n
	...

00908c44 <ath_tx_stats_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
}

static void ath_tx_stats_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
			     A_UINT8 *data, a_int32_t datalen)
{
  908c44:	6c100a        	entry	a1, 80
		a_uint32_t   tx_nobufs;
	};

	struct fusion_stats stats;

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
  908c47:	282252        	l32i	a8, a2, 0x148
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c4a:	8a23      	l32i.n	a10, a2, 12
		a_uint32_t   tx_nobufs;
	};

	struct fusion_stats stats;

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
  908c4c:	9810      	s32i.n	a8, a1, 0
	stats.ast_tx_fifoerr = sc->sc_tx_stats.ast_tx_fifoerr;
  908c4e:	282253        	l32i	a8, a2, 0x14c
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c51:	030b4f        	extui	a11, a3, 0, 16
	};

	struct fusion_stats stats;

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
	stats.ast_tx_fifoerr = sc->sc_tx_stats.ast_tx_fifoerr;
  908c54:	9811      	s32i.n	a8, a1, 4
	stats.ast_tx_filtered = sc->sc_tx_stats.ast_tx_filtered;
  908c56:	282254        	l32i	a8, a2, 0x150
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c59:	040c4f        	extui	a12, a4, 0, 16

	struct fusion_stats stats;

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
	stats.ast_tx_fifoerr = sc->sc_tx_stats.ast_tx_fifoerr;
	stats.ast_tx_filtered = sc->sc_tx_stats.ast_tx_filtered;
  908c5c:	9812      	s32i.n	a8, a1, 8
	stats.ast_tx_timer_exp = sc->sc_tx_stats.ast_tx_timer_exp;
  908c5e:	282255        	l32i	a8, a2, 0x154
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c61:	dd10      	mov.n	a13, a1
	struct fusion_stats stats;

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
	stats.ast_tx_fifoerr = sc->sc_tx_stats.ast_tx_fifoerr;
	stats.ast_tx_filtered = sc->sc_tx_stats.ast_tx_filtered;
	stats.ast_tx_timer_exp = sc->sc_tx_stats.ast_tx_timer_exp;
  908c63:	9813      	s32i.n	a8, a1, 12
	stats.ast_tx_shortretry = sc->sc_tx_stats.ast_tx_shortretry;
  908c65:	282256        	l32i	a8, a2, 0x158
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c68:	c2e4      	movi.n	a14, 36

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
	stats.ast_tx_fifoerr = sc->sc_tx_stats.ast_tx_fifoerr;
	stats.ast_tx_filtered = sc->sc_tx_stats.ast_tx_filtered;
	stats.ast_tx_timer_exp = sc->sc_tx_stats.ast_tx_timer_exp;
	stats.ast_tx_shortretry = sc->sc_tx_stats.ast_tx_shortretry;
  908c6a:	9814      	s32i.n	a8, a1, 16
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
  908c6c:	282257        	l32i	a8, a2, 0x15c
  908c6f:	9815      	s32i.n	a8, a1, 20
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
  908c71:	28225c        	l32i	a8, a2, 0x170
  908c74:	9816      	s32i.n	a8, a1, 24
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
  908c76:	282276        	l32i	a8, a2, 0x1d8
  908c79:	9817      	s32i.n	a8, a1, 28
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;
  908c7b:	282277        	l32i	a8, a2, 0x1dc
  908c7e:	281608        	s32i	a8, a1, 32

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c81:	5bff94        	call8	908ad4 <wmi_cmd_rsp>
  908c84:	d10f      	retw.n
	...

00908c88 <ath_int_stats_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_int_stats_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
			      A_UINT8 *data, a_int32_t datalen)
{
  908c88:	6c1008        	entry	a1, 64
		a_uint32_t ast_cst;
	};

	struct fusion_stats stats;

	stats.ast_rx = sc->sc_int_stats.ast_rx;
  908c8b:	28224c        	l32i	a8, a2, 0x130
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
	stats.ast_txto = sc->sc_int_stats.ast_txto;
	stats.ast_cst = sc->sc_int_stats.ast_cst;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c8e:	8a23      	l32i.n	a10, a2, 12
		a_uint32_t ast_cst;
	};

	struct fusion_stats stats;

	stats.ast_rx = sc->sc_int_stats.ast_rx;
  908c90:	9810      	s32i.n	a8, a1, 0
	stats.ast_rxorn = sc->sc_int_stats.ast_rxorn;
  908c92:	28224d        	l32i	a8, a2, 0x134
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
	stats.ast_txto = sc->sc_int_stats.ast_txto;
	stats.ast_cst = sc->sc_int_stats.ast_cst;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c95:	030b4f        	extui	a11, a3, 0, 16
	};

	struct fusion_stats stats;

	stats.ast_rx = sc->sc_int_stats.ast_rx;
	stats.ast_rxorn = sc->sc_int_stats.ast_rxorn;
  908c98:	9811      	s32i.n	a8, a1, 4
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
  908c9a:	28224e        	l32i	a8, a2, 0x138
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
	stats.ast_txto = sc->sc_int_stats.ast_txto;
	stats.ast_cst = sc->sc_int_stats.ast_cst;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c9d:	040c4f        	extui	a12, a4, 0, 16

	struct fusion_stats stats;

	stats.ast_rx = sc->sc_int_stats.ast_rx;
	stats.ast_rxorn = sc->sc_int_stats.ast_rxorn;
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
  908ca0:	9812      	s32i.n	a8, a1, 8
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
  908ca2:	28224f        	l32i	a8, a2, 0x13c
	stats.ast_txto = sc->sc_int_stats.ast_txto;
	stats.ast_cst = sc->sc_int_stats.ast_cst;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908ca5:	dd10      	mov.n	a13, a1
	struct fusion_stats stats;

	stats.ast_rx = sc->sc_int_stats.ast_rx;
	stats.ast_rxorn = sc->sc_int_stats.ast_rxorn;
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
  908ca7:	9813      	s32i.n	a8, a1, 12
	stats.ast_txto = sc->sc_int_stats.ast_txto;
  908ca9:	282250        	l32i	a8, a2, 0x140
	stats.ast_cst = sc->sc_int_stats.ast_cst;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908cac:	c1e8      	movi.n	a14, 24

	stats.ast_rx = sc->sc_int_stats.ast_rx;
	stats.ast_rxorn = sc->sc_int_stats.ast_rxorn;
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
	stats.ast_txto = sc->sc_int_stats.ast_txto;
  908cae:	9814      	s32i.n	a8, a1, 16
	stats.ast_cst = sc->sc_int_stats.ast_cst;
  908cb0:	282251        	l32i	a8, a2, 0x144
  908cb3:	9815      	s32i.n	a8, a1, 20

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908cb5:	5bff87        	call8	908ad4 <wmi_cmd_rsp>
  908cb8:	d10f      	retw.n
	...

00908cbc <ath_node_update_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_update_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  908cbc:	6c1004        	entry	a1, 32

	node->ni_htcap = adf_os_ntohs(node->ni_htcap);
	node->ni_flags = adf_os_ntohs(node->ni_flags);
	node->ni_maxampdu = adf_os_ntohs(node->ni_maxampdu);

	adf_os_mem_copy(&(sc->sc_sta[node_index].ni), node,
  908cbf:	29500c        	l8ui	a9, a5, 12
  908cc2:	265a30        	movi	a6, 0x530
  908cc5:	0a9711        	slli	a7, a9, 6
  908cc8:	a977      	add.n	a7, a7, a9
  908cca:	097909        	addx2	a9, a7, a9
  908ccd:	0e9711        	slli	a7, a9, 2
  908cd0:	a67a      	add.n	a10, a7, a6
  908cd2:	aa2a      	add.n	a10, a2, a10
  908cd4:	db50      	mov.n	a11, a5
  908cd6:	b8aa      	addi.n	a10, a10, 8
  908cd8:	c1c6      	movi.n	a12, 22
  908cda:	5bfba0        	call8	907b5c <__adf_os_mem_copy>
			NODE_TARGET_SIZE);

	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
  908cdd:	a728      	add.n	a8, a2, a7
	node->ni_maxampdu = adf_os_ntohs(node->ni_maxampdu);

	adf_os_mem_copy(&(sc->sc_sta[node_index].ni), node,
			NODE_TARGET_SIZE);

	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
  908cdf:	a686      	add.n	a6, a8, a6
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
  908ce1:	256015        	l8ui	a5, a6, 21
  908ce4:	275a50        	movi	a7, 0x550
  908ce7:	0c5611        	slli	a6, a5, 4
  908cea:	a565      	add.n	a5, a6, a5
  908cec:	166a16        	l32r	a6, 8e3544 <_HIFusb_start+0xa4>
  908cef:	a787      	add.n	a7, a8, a7
  908cf1:	06550a        	addx4	a5, a5, a6
  908cf4:	a525      	add.n	a5, a2, a5
  908cf6:	b855      	addi.n	a5, a5, 8
  908cf8:	9572      	s32i.n	a5, a7, 8

	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
  908cfa:	255a40        	movi	a5, 0x540
  908cfd:	a588      	add.n	a8, a8, a5
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
	sc->sc_sta[node_index].ni.ni_iv32 = 0;
  908cff:	c0e0      	movi.n	a14, 0
			NODE_TARGET_SIZE);

	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);

	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
  908d01:	c050      	movi.n	a5, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_update_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  908d03:	03034f        	extui	a3, a3, 0, 16
  908d06:	04044f        	extui	a4, a4, 0, 16

	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
	sc->sc_sta[node_index].ni.ni_iv32 = 0;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908d09:	8a23      	l32i.n	a10, a2, 12
			NODE_TARGET_SIZE);

	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);

	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
  908d0b:	258508        	s16i	a5, a8, 16
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
  908d0e:	258509        	s16i	a5, a8, 18
	sc->sc_sta[node_index].ni.ni_iv32 = 0;
  908d11:	9e85      	s32i.n	a14, a8, 20

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908d13:	db30      	mov.n	a11, a3
  908d15:	dc40      	mov.n	a12, a4
  908d17:	dde0      	mov.n	a13, a14
  908d19:	5bff6e        	call8	908ad4 <wmi_cmd_rsp>
  908d1c:	d10f      	retw.n
	...

00908d20 <ath_detach_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_detach_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
				 A_UINT8 *data, a_int32_t datalen)
{
  908d20:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  908d23:	252d05        	addmi	a5, a2, 0x500
  908d26:	855b      	l32i.n	a5, a5, 44

	ath_desc_free(sc);
  908d28:	022a02        	or	a10, a2, a2
  908d2b:	5bfd03        	call8	908138 <ath_desc_free>
	ah->ah_detach(ah);
  908d2e:	8856      	l32i.n	a8, a5, 24
  908d30:	da50      	mov.n	a10, a5
  908d32:	0b8000        	callx8	a8
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_detach_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
				 A_UINT8 *data, a_int32_t datalen)
{
  908d35:	03034f        	extui	a3, a3, 0, 16
  908d38:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ath_desc_free(sc);
	ah->ah_detach(ah);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908d3b:	c0d0      	movi.n	a13, 0
  908d3d:	8a23      	l32i.n	a10, a2, 12
  908d3f:	db30      	mov.n	a11, a3
  908d41:	dc40      	mov.n	a12, a4
  908d43:	ded0      	mov.n	a14, a13
  908d45:	5bff63        	call8	908ad4 <wmi_cmd_rsp>
  908d48:	d10f      	retw.n
	...

00908d4c <ath_enable_aggr_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
}

static void ath_enable_aggr_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
				A_UINT8 *data, a_int32_t datalen)
{
  908d4c:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_aggr_info *aggr = (struct ath_aggr_info *)data;
	a_uint8_t nodeindex = aggr->nodeindex;
  908d4f:	2d5000        	l8ui	a13, a5, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
}

static void ath_enable_aggr_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
				A_UINT8 *data, a_int32_t datalen)
{
  908d52:	03034f        	extui	a3, a3, 0, 16
  908d55:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_aggr_info *aggr = (struct ath_aggr_info *)data;
	a_uint8_t nodeindex = aggr->nodeindex;
	a_uint8_t tidno = aggr->tidno;
  908d58:	285001        	l8ui	a8, a5, 1
	struct ath_node_target *an = NULL ;
	struct ath_atx_tid  *tid = NULL;

	if (nodeindex >= TARGET_NODE_MAX) {
  908d5b:	6fd866        	bgeui	a13, 8, 908dc5 <ath_enable_aggr_tgt+0x79>
		goto done;
	}

	an = &sc->sc_sta[nodeindex];
  908d5e:	0adb11        	slli	a11, a13, 6
  908d61:	adbb      	add.n	a11, a11, a13
  908d63:	295a30        	movi	a9, 0x530
  908d66:	0dbb09        	addx2	a11, a11, a13
  908d69:	09bb0a        	addx4	a11, a11, a9
  908d6c:	ab2b      	add.n	a11, a2, a11
  908d6e:	b8bb      	addi.n	a11, a11, 8
	if (!an->an_valid) {
  908d70:	29bd02        	addmi	a9, a11, 0x200
  908d73:	299004        	l8ui	a9, a9, 4
  908d76:	64904b        	beqz	a9, 908dc5 <ath_enable_aggr_tgt+0x79>
		goto done;
	}

	if (tidno >= WME_NUM_TID) {
  908d79:	6e8813        	bltui	a8, 8, 908d90 <ath_enable_aggr_tgt+0x44>
		adf_os_print("[%s] enable_aggr with invalid tid %d(node = %d)\n",
  908d7c:	156913        	l32r	a5, 8e31c8 <athos_indirection_table_install+0x1c54>
  908d7f:	1b6a18        	l32r	a11, 8e35e0 <_HIFusb_start+0x140>
  908d82:	255212        	l32i	a5, a5, 72
  908d85:	1a6a17        	l32r	a10, 8e35e4 <_HIFusb_start+0x144>
  908d88:	dc80      	mov.n	a12, a8
  908d8a:	0b5000        	callx8	a5
			     __FUNCTION__, tidno, nodeindex);
		goto done;
  908d8d:	600034        	j	908dc5 <ath_enable_aggr_tgt+0x79>
	}

	tid = ATH_AN_2_TID(an, tidno);
  908d90:	0c8c11        	slli	a12, a8, 4
  908d93:	08cc0c        	sub	a12, a12, a8

	if (aggr->aggr_enable) {
  908d96:	255002        	l8ui	a5, a5, 2
		adf_os_print("[%s] enable_aggr with invalid tid %d(node = %d)\n",
			     __FUNCTION__, tidno, nodeindex);
		goto done;
	}

	tid = ATH_AN_2_TID(an, tidno);
  908d99:	0bcc0a        	addx4	a12, a12, a11
  908d9c:	2ccc24        	addi	a12, a12, 36
  908d9f:	c082      	movi.n	a8, 2

	if (aggr->aggr_enable) {
  908da1:	c85b      	beqz.n	a5, 908db0 <ath_enable_aggr_tgt+0x64>
		tid->flag |= TID_AGGR_ENABLED;
  908da3:	25c036        	l8ui	a5, a12, 54
  908da6:	085802        	or	a8, a5, a8
  908da9:	28c436        	s8i	a8, a12, 54
  908dac:	600015        	j	908dc5 <ath_enable_aggr_tgt+0x79>
  908daf:	0025c0        	excw
	} else if ( tid->flag & TID_AGGR_ENABLED ) {
  908db2:	367850        	excw
  908db5:	0ec78d        	excw
		tid->flag &= ~TID_AGGR_ENABLED;
  908db8:	085501        	and	a5, a5, a8
  908dbb:	25c436        	s8i	a5, a12, 54
		ath_tgt_tx_cleanup(sc, an, tid, 1);
  908dbe:	da20      	mov.n	a10, a2
  908dc0:	c0d1      	movi.n	a13, 1
  908dc2:	5817ef        	call8	90ed80 <ath_tgt_tx_cleanup>
	}
done:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908dc5:	c0d0      	movi.n	a13, 0
  908dc7:	8a23      	l32i.n	a10, a2, 12
  908dc9:	db30      	mov.n	a11, a3
  908dcb:	dc40      	mov.n	a12, a4
  908dcd:	ded0      	mov.n	a14, a13
  908dcf:	5bff41        	call8	908ad4 <wmi_cmd_rsp>
  908dd2:	d10f      	retw.n

00908dd4 <ath_ic_update_tgt>:
}

static void ath_ic_update_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
			      A_UINT8 *data, a_int32_t datalen)
{
  908dd4:	6c1004        	entry	a1, 32
  908dd7:	1a6a19        	l32r	a10, 8e363c <_HIFusb_start+0x19c>
  908dda:	db50      	mov.n	a11, a5
  908ddc:	0a2a08        	add	a10, a2, a10
  908ddf:	c0c8      	movi.n	a12, 8
  908de1:	5bfb5e        	call8	907b5c <__adf_os_mem_copy>
	struct ieee80211com_target *ic = (struct ieee80211com_target * )data;
	struct ieee80211com_target *ictgt = &sc->sc_ic ;

	adf_os_mem_copy(ictgt, ic, sizeof(struct  ieee80211com_target));

	ictgt->ic_ampdu_limit         = adf_os_ntohl(ic->ic_ampdu_limit);
  908de4:	8850      	l32i.n	a8, a5, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_ic_update_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
			      A_UINT8 *data, a_int32_t datalen)
{
  908de6:	03034f        	extui	a3, a3, 0, 16
  908de9:	04044f        	extui	a4, a4, 0, 16
	struct ieee80211com_target *ic = (struct ieee80211com_target * )data;
	struct ieee80211com_target *ictgt = &sc->sc_ic ;

	adf_os_mem_copy(ictgt, ic, sizeof(struct  ieee80211com_target));

	ictgt->ic_ampdu_limit         = adf_os_ntohl(ic->ic_ampdu_limit);
  908dec:	252d16        	addmi	a5, a2, 0x1600

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908def:	c0d0      	movi.n	a13, 0
  908df1:	8a23      	l32i.n	a10, a2, 12
	struct ieee80211com_target *ic = (struct ieee80211com_target * )data;
	struct ieee80211com_target *ictgt = &sc->sc_ic ;

	adf_os_mem_copy(ictgt, ic, sizeof(struct  ieee80211com_target));

	ictgt->ic_ampdu_limit         = adf_os_ntohl(ic->ic_ampdu_limit);
  908df3:	9858      	s32i.n	a8, a5, 32

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908df5:	db30      	mov.n	a11, a3
  908df7:	dc40      	mov.n	a12, a4
  908df9:	ded0      	mov.n	a14, a13
  908dfb:	5bff36        	call8	908ad4 <wmi_cmd_rsp>
  908dfe:	d10f      	retw.n

00908e00 <handle_rc_rate_update_cmd>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void handle_rc_rate_update_cmd(void *Context, A_UINT16 Command,
				      A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  908e00:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_rate_update_cmd *wmi_data = (struct wmi_rc_rate_update_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);

	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  908e03:	285000        	l8ui	a8, a5, 0
				      A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_rate_update_cmd *wmi_data = (struct wmi_rc_rate_update_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908e06:	2a5004        	l8ui	a10, a5, 4

	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  908e09:	0a8b11        	slli	a11, a8, 6
  908e0c:	a8bb      	add.n	a11, a11, a8
  908e0e:	08bb09        	addx2	a11, a11, a8
  908e11:	295a30        	movi	a9, 0x530
				      A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_rate_update_cmd *wmi_data = (struct wmi_rc_rate_update_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908e14:	285005        	l8ui	a8, a5, 5

	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  908e17:	09bb0a        	addx4	a11, a11, a9
				      A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_rate_update_cmd *wmi_data = (struct wmi_rc_rate_update_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908e1a:	295006        	l8ui	a9, a5, 6
  908e1d:	08aa10        	slli	a10, a10, 24
  908e20:	008811        	slli	a8, a8, 16
  908e23:	0a8802        	or	a8, a8, a10
  908e26:	2d5007        	l8ui	a13, a5, 7
  908e29:	089911        	slli	a9, a9, 8
  908e2c:	089902        	or	a9, a9, a8

	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  908e2f:	2c5001        	l8ui	a12, a5, 1
  908e32:	ab2b      	add.n	a11, a2, a11
  908e34:	09dd02        	or	a13, a13, a9
  908e37:	b85e      	addi.n	a14, a5, 8
  908e39:	da20      	mov.n	a10, a2
  908e3b:	2bbc08        	addi	a11, a11, 8
  908e3e:	581002        	call8	90ce48 <ath_rate_node_update>
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void handle_rc_rate_update_cmd(void *Context, A_UINT16 Command,
				      A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  908e41:	03034f        	extui	a3, a3, 0, 16
  908e44:	04044f        	extui	a4, a4, 0, 16
	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
			     wmi_data->isNew,
			     capflag,
			     &wmi_data->rs);

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908e47:	c0d0      	movi.n	a13, 0
  908e49:	8a23      	l32i.n	a10, a2, 12
  908e4b:	db30      	mov.n	a11, a3
  908e4d:	dc40      	mov.n	a12, a4
  908e4f:	ded0      	mov.n	a14, a13
  908e51:	5bff20        	call8	908ad4 <wmi_cmd_rsp>
  908e54:	d10f      	retw.n
	...

00908e58 <handle_rc_state_change_cmd>:
}

static void handle_rc_state_change_cmd(void *Context, A_UINT16 Command,
				       A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)

{
  908e58:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_state_change_cmd *wmi_data = (struct wmi_rc_state_change_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);

	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
  908e5b:	285000        	l8ui	a8, a5, 0
  908e5e:	196a16        	l32r	a9, 8e36b8 <_HIFusb_start+0x218>
  908e61:	0c8b11        	slli	a11, a8, 4

{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_state_change_cmd *wmi_data = (struct wmi_rc_state_change_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908e64:	2a5004        	l8ui	a10, a5, 4

	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
  908e67:	a8bb      	add.n	a11, a11, a8

{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_state_change_cmd *wmi_data = (struct wmi_rc_state_change_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908e69:	285005        	l8ui	a8, a5, 5

	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
  908e6c:	09bb0a        	addx4	a11, a11, a9

{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_state_change_cmd *wmi_data = (struct wmi_rc_state_change_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908e6f:	295006        	l8ui	a9, a5, 6
  908e72:	08aa10        	slli	a10, a10, 24
  908e75:	008811        	slli	a8, a8, 16
  908e78:	0a8802        	or	a8, a8, a10
  908e7b:	2d5007        	l8ui	a13, a5, 7
  908e7e:	089911        	slli	a9, a9, 8
  908e81:	089902        	or	a9, a9, a8

	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
  908e84:	2c5001        	l8ui	a12, a5, 1
  908e87:	ab2b      	add.n	a11, a2, a11
  908e89:	09dd02        	or	a13, a13, a9
  908e8c:	b85e      	addi.n	a14, a5, 8
  908e8e:	da20      	mov.n	a10, a2
  908e90:	b8bb      	addi.n	a11, a11, 8
  908e92:	580ff2        	call8	90ce5c <ath_rate_newstate>
}

static void handle_rc_state_change_cmd(void *Context, A_UINT16 Command,
				       A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)

{
  908e95:	03034f        	extui	a3, a3, 0, 16
  908e98:	04044f        	extui	a4, a4, 0, 16
	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
			  wmi_data->vap_state,
			  capflag,
			  &wmi_data->rs);

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908e9b:	c0d0      	movi.n	a13, 0
  908e9d:	8a23      	l32i.n	a10, a2, 12
  908e9f:	db30      	mov.n	a11, a3
  908ea1:	dc40      	mov.n	a12, a4
  908ea3:	ded0      	mov.n	a14, a13
  908ea5:	5bff0b        	call8	908ad4 <wmi_cmd_rsp>
  908ea8:	d10f      	retw.n
	...

00908eac <ath_hal_reg_write_tgt>:
	}
}

static void ath_hal_reg_write_tgt(void *Context, A_UINT16 Command,
				  A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  908eac:	6c1006        	entry	a1, 48
  908eaf:	030b4f        	extui	a11, a3, 0, 16
  908eb2:	040c4f        	extui	a12, a4, 0, 16
	struct registerWrite {
		a_uint32_t reg;
		a_uint32_t val;
	}*t;

	for (i = 0; i < datalen; i += sizeof(struct registerWrite)) {
  908eb5:	d750      	mov.n	a7, a5
  908eb7:	60002a        	j	908ee5 <ath_hal_reg_write_tgt+0x39>
		t = (struct registerWrite *)(data+i);

		ath_hal_reg_write_filter(ah, t->reg, t->val);
  908eba:	8370      	l32i.n	a3, a7, 0
}

static void ath_hal_reg_write_filter(struct ath_hal *ah,
			a_uint32_t reg, a_uint32_t val)
{
	if(reg > 0xffff) {
  908ebc:	186a06        	l32r	a8, 8e36d4 <_HIFusb_start+0x234>
	}*t;

	for (i = 0; i < datalen; i += sizeof(struct registerWrite)) {
		t = (struct registerWrite *)(data+i);

		ath_hal_reg_write_filter(ah, t->reg, t->val);
  908ebf:	8471      	l32i.n	a4, a7, 4
}

static void ath_hal_reg_write_filter(struct ath_hal *ah,
			a_uint32_t reg, a_uint32_t val)
{
	if(reg > 0xffff) {
  908ec1:	738b03        	bgeu	a8, a3, 908ec8 <ath_hal_reg_write_tgt+0x1c>
  908ec4:	600016        	j	908ede <ath_hal_reg_write_tgt+0x32>
  908ec7:	00186a        	excw
				flg = 1;
			}
		}
#endif
	} else {
		if(reg == 0x7014)
  908eca:	147839        	l32r	a4, 8e6fb0 <memset+0x168>
  908ecd:	0a9b10        	slli	a11, a9, 22
			ath_pll_reset_ones(ah);
  908ed0:	9c11      	s32i.n	a12, a1, 4
  908ed2:	5bfc0c        	call8	907f04 <ath_pll_reset_ones$isra$9>
  908ed5:	8c11      	l32i.n	a12, a1, 4
  908ed7:	8b10      	l32i.n	a11, a1, 0

		iowrite32_mac(reg, val);
  908ed9:	186a01        	l32r	a8, 8e36e0 <_HIFusb_start+0x240>
  908edc:	a833      	add.n	a3, a3, a8
  908ede:	0c0200        	memw
  908ee1:	9430      	s32i.n	a4, a3, 0
  908ee3:	b877      	addi.n	a7, a7, 8
	}
}

static void ath_hal_reg_write_tgt(void *Context, A_UINT16 Command,
  908ee5:	05730c        	sub	a3, a7, a5
	struct registerWrite {
		a_uint32_t reg;
		a_uint32_t val;
	}*t;

	for (i = 0; i < datalen; i += sizeof(struct registerWrite)) {
  908ee8:	7632ce        	blt	a3, a6, 908eba <ath_hal_reg_write_tgt+0xe>
		t = (struct registerWrite *)(data+i);

		ath_hal_reg_write_filter(ah, t->reg, t->val);
	}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908eeb:	c0d0      	movi.n	a13, 0
  908eed:	8a23      	l32i.n	a10, a2, 12
  908eef:	ded0      	mov.n	a14, a13
  908ef1:	5bfef8        	call8	908ad4 <wmi_cmd_rsp>
  908ef4:	d10f      	retw.n
	...

00908ef8 <ath_hal_reg_read_tgt>:
		return ioread32_mac(addr);
}

static void ath_hal_reg_read_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  908ef8:	6c1016        	entry	a1, 176
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  908efb:	272d05        	addmi	a7, a2, 0x500
  908efe:	887b      	l32i.n	a8, a7, 44
		return ioread32_mac(addr);
}

static void ath_hal_reg_read_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  908f00:	03034f        	extui	a3, a3, 0, 16
  908f03:	04044f        	extui	a4, a4, 0, 16
	struct ath_hal *ah = sc->sc_ah;
	a_uint32_t addr;
	a_uint32_t val[32];
	int i;

	for (i = 0; i < datalen; i += sizeof(a_int32_t)) {
  908f06:	c070      	movi.n	a7, 0
  908f08:	600019        	j	908f25 <ath_hal_reg_read_tgt+0x2d>
  908f0b:	00a759        	extui	a7, a0, 26, 10
		addr = *(a_uint32_t *)(data + i);
		addr = adf_os_ntohl(addr);

		val[i/sizeof(a_int32_t)] =
			adf_os_ntohl(ath_reg_read_filter(ah, addr));
  908f0e:	8b90      	l32i.n	a11, a9, 0
  908f10:	da80      	mov.n	a10, a8
  908f12:	281620        	s32i	a8, a1, 128
  908f15:	5bfc25        	call8	907fac <ath_reg_read_filter>

	for (i = 0; i < datalen; i += sizeof(a_int32_t)) {
		addr = *(a_uint32_t *)(data + i);
		addr = adf_os_ntohl(addr);

		val[i/sizeof(a_int32_t)] =
  908f18:	072914        	srli	a9, a7, 2
  908f1b:	01990a        	addx4	a9, a9, a1
	else
		/* MAC registers */
		return ioread32_mac(addr);
}

static void ath_hal_reg_read_tgt(void *Context, A_UINT16 Command,
  908f1e:	281220        	l32i	a8, a1, 128

	for (i = 0; i < datalen; i += sizeof(a_int32_t)) {
		addr = *(a_uint32_t *)(data + i);
		addr = adf_os_ntohl(addr);

		val[i/sizeof(a_int32_t)] =
  908f21:	9a90      	s32i.n	a10, a9, 0
	else
		/* MAC registers */
		return ioread32_mac(addr);
}

static void ath_hal_reg_read_tgt(void *Context, A_UINT16 Command,
  908f23:	b477      	addi.n	a7, a7, 4
	struct ath_hal *ah = sc->sc_ah;
	a_uint32_t addr;
	a_uint32_t val[32];
	int i;

	for (i = 0; i < datalen; i += sizeof(a_int32_t)) {
  908f25:	7672e3        	blt	a7, a6, 908f0c <ath_hal_reg_read_tgt+0x14>

		val[i/sizeof(a_int32_t)] =
			adf_os_ntohl(ath_reg_read_filter(ah, addr));
	}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &val[0], datalen);
  908f28:	8a23      	l32i.n	a10, a2, 12
  908f2a:	db30      	mov.n	a11, a3
  908f2c:	dc40      	mov.n	a12, a4
  908f2e:	dd10      	mov.n	a13, a1
  908f30:	de60      	mov.n	a14, a6
  908f32:	5bfee8        	call8	908ad4 <wmi_cmd_rsp>
  908f35:	d10f      	retw.n
	...

00908f38 <ath_vap_create_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_create_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
			       A_UINT8 *data, a_int32_t datalen)
{
  908f38:	6c1004        	entry	a1, 32
	vap->iv_rtsthreshold    = adf_os_ntohs(vap->iv_rtsthreshold);
	vap->iv_opmode          = adf_os_ntohl(vap->iv_opmode);

	vap_index = vap->iv_vapindex;

	adf_os_assert(sc->sc_vap[vap_index].av_valid == 0);
  908f3b:	265000        	l8ui	a6, a5, 0
  908f3e:	196a15        	l32r	a9, 8e3794 <_HIFusb_isr_handler+0xb0>
  908f41:	0c6811        	slli	a8, a6, 4
  908f44:	a688      	add.n	a8, a8, a6
  908f46:	02880a        	addx4	a8, a8, a2
  908f49:	a988      	add.n	a8, a8, a9
  908f4b:	28800a        	l8ui	a8, a8, 10
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_create_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
			       A_UINT8 *data, a_int32_t datalen)
{
  908f4e:	03034f        	extui	a3, a3, 0, 16
  908f51:	04044f        	extui	a4, a4, 0, 16
	vap->iv_rtsthreshold    = adf_os_ntohs(vap->iv_rtsthreshold);
	vap->iv_opmode          = adf_os_ntohl(vap->iv_opmode);

	vap_index = vap->iv_vapindex;

	adf_os_assert(sc->sc_vap[vap_index].av_valid == 0);
  908f54:	c985      	beqz.n	a8, 908f6d <ath_vap_create_tgt+0x35>
  908f56:	186913        	l32r	a8, 8e33a4 <athos_indirection_table_install+0x1e30>
  908f59:	1a69f4        	l32r	a10, 8e372c <_HIFusb_isr_handler+0x48>
  908f5c:	288212        	l32i	a8, a8, 72
  908f5f:	1b6a1a        	l32r	a11, 8e37c8 <_HIFusb_isr_handler+0xe4>
  908f62:	0b8000        	callx8	a8
  908f65:	186978        	l32r	a8, 8e3548 <_HIFusb_start+0xa8>
  908f68:	0c0200        	memw
  908f6b:	8880      	l32i.n	a8, a8, 0

	adf_os_mem_copy(&(sc->sc_vap[vap_index].av_vap), vap,
  908f6d:	0c6811        	slli	a8, a6, 4
  908f70:	a686      	add.n	a6, a8, a6
  908f72:	1a6a16        	l32r	a10, 8e37cc <_HIFusb_isr_handler+0xe8>
  908f75:	0e6611        	slli	a6, a6, 2
  908f78:	aa6a      	add.n	a10, a6, a10
  908f7a:	aa2a      	add.n	a10, a2, a10
  908f7c:	db50      	mov.n	a11, a5
  908f7e:	b8aa      	addi.n	a10, a10, 8
  908f80:	c0cc      	movi.n	a12, 12
  908f82:	5bfaf6        	call8	907b5c <__adf_os_mem_copy>
			VAP_TARGET_SIZE);

	sc->sc_vap[vap_index].av_bcbuf = asf_tailq_first(&(sc->sc_bbuf));
  908f85:	282d16        	addmi	a8, a2, 0x1600
  908f88:	156a1b        	l32r	a5, 8e37f4 <HIFusb_DescTraceDump+0xc>
  908f8b:	a626      	add.n	a6, a2, a6
  908f8d:	888a      	l32i.n	a8, a8, 40
  908f8f:	a565      	add.n	a5, a6, a5
  908f91:	9853      	s32i.n	a8, a5, 12
	sc->sc_vap[vap_index].av_valid = 1;
  908f93:	156a15        	l32r	a5, 8e37e8 <HIFusb_DescTraceDump>

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908f96:	c0d0      	movi.n	a13, 0

	adf_os_mem_copy(&(sc->sc_vap[vap_index].av_vap), vap,
			VAP_TARGET_SIZE);

	sc->sc_vap[vap_index].av_bcbuf = asf_tailq_first(&(sc->sc_bbuf));
	sc->sc_vap[vap_index].av_valid = 1;
  908f98:	a566      	add.n	a6, a6, a5
  908f9a:	c051      	movi.n	a5, 1
  908f9c:	25640a        	s8i	a5, a6, 10

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908f9f:	8a23      	l32i.n	a10, a2, 12
  908fa1:	db30      	mov.n	a11, a3
  908fa3:	dc40      	mov.n	a12, a4
  908fa5:	ded0      	mov.n	a14, a13
  908fa7:	5bfecb        	call8	908ad4 <wmi_cmd_rsp>
  908faa:	d10f      	retw.n

00908fac <ath_vap_delete_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
			       A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  908fac:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint8_t vap_index;

	vap_index = *(a_uint8_t *)data;
  908faf:	295000        	l8ui	a9, a5, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
			       A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  908fb2:	030b4f        	extui	a11, a3, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint8_t vap_index;

	vap_index = *(a_uint8_t *)data;

	sc->sc_vap[vap_index].av_valid = 0;
  908fb5:	0c9811        	slli	a8, a9, 4
  908fb8:	a988      	add.n	a8, a8, a9
  908fba:	136a15        	l32r	a3, 8e3810 <HIFusb_DescTraceDump+0x28>
  908fbd:	02880a        	addx4	a8, a8, a2
  908fc0:	a383      	add.n	a3, a8, a3
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
			       A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  908fc2:	040c4f        	extui	a12, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint8_t vap_index;

	vap_index = *(a_uint8_t *)data;

	sc->sc_vap[vap_index].av_valid = 0;
  908fc5:	c040      	movi.n	a4, 0
  908fc7:	24340a        	s8i	a4, a3, 10
	sc->sc_vap[vap_index].av_bcbuf = NULL;
  908fca:	136a1b        	l32r	a3, 8e3838 <HIFusb_DescTraceDump+0x50>

static void ath_node_vdelete_tgt(struct ath_softc_tgt *sc, a_uint8_t vap_index)
{
	a_int32_t i;

	for (i = 0; i < TARGET_NODE_MAX; i++) {
  908fcd:	1d6a1c        	l32r	a13, 8e3840 <HIFusb_DescTraceDump+0x58>
	a_uint8_t vap_index;

	vap_index = *(a_uint8_t *)data;

	sc->sc_vap[vap_index].av_valid = 0;
	sc->sc_vap[vap_index].av_bcbuf = NULL;
  908fd0:	a383      	add.n	a3, a8, a3
  908fd2:	c080      	movi.n	a8, 0
  908fd4:	9833      	s32i.n	a8, a3, 12
		ath_hal_reg_write_filter(ah, buf->reg, val);
	}
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
  908fd6:	2f5a45        	movi	a15, 0x545
  908fd9:	237a3c        	movi	a3, 0x73c
{
	a_int32_t i;

	for (i = 0; i < TARGET_NODE_MAX; i++) {
		if(sc->sc_sta[i].ni.ni_vapindex == vap_index)
			sc->sc_sta[i].an_valid = 0;
  908fdc:	d480      	mov.n	a4, a8
  908fde:	2e2a0c        	movi	a14, 0x20c
		ath_hal_reg_write_filter(ah, buf->reg, val);
	}
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
  908fe1:	a82a      	add.n	a10, a2, a8
  908fe3:	afa5      	add.n	a5, a10, a15
static void ath_node_vdelete_tgt(struct ath_softc_tgt *sc, a_uint8_t vap_index)
{
	a_int32_t i;

	for (i = 0; i < TARGET_NODE_MAX; i++) {
		if(sc->sc_sta[i].ni.ni_vapindex == vap_index)
  908fe5:	255000        	l8ui	a5, a5, 0
  908fe8:	795904        	bne	a5, a9, 908ff0 <ath_vap_delete_tgt+0x44>
		ath_hal_reg_write_filter(ah, buf->reg, val);
	}
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
  908feb:	a3aa      	add.n	a10, a10, a3
{
	a_int32_t i;

	for (i = 0; i < TARGET_NODE_MAX; i++) {
		if(sc->sc_sta[i].ni.ni_vapindex == vap_index)
			sc->sc_sta[i].an_valid = 0;
  908fed:	24a400        	s8i	a4, a10, 0
  908ff0:	ae88      	add.n	a8, a8, a14

static void ath_node_vdelete_tgt(struct ath_softc_tgt *sc, a_uint8_t vap_index)
{
	a_int32_t i;

	for (i = 0; i < TARGET_NODE_MAX; i++) {
  908ff2:	7d89eb        	bne	a8, a13, 908fe1 <ath_vap_delete_tgt+0x35>
	vap_index = *(a_uint8_t *)data;

	sc->sc_vap[vap_index].av_valid = 0;
	sc->sc_vap[vap_index].av_bcbuf = NULL;
	ath_node_vdelete_tgt(sc, vap_index);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908ff5:	c0d0      	movi.n	a13, 0
  908ff7:	8a23      	l32i.n	a10, a2, 12
  908ff9:	ded0      	mov.n	a14, a13
  908ffb:	5bfeb6        	call8	908ad4 <wmi_cmd_rsp>
  908ffe:	d10f      	retw.n

00909000 <ath_node_cleanup_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_cleanup_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909000:	6c1004        	entry	a1, 32
	a_uint8_t node_index;
	a_uint8_t *nodedata;

	nodedata = (a_uint8_t *)data;
	node_index = *nodedata;
	sc->sc_sta[node_index].an_valid = 0;
  909003:	285000        	l8ui	a8, a5, 0

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909006:	c0d0      	movi.n	a13, 0
	a_uint8_t node_index;
	a_uint8_t *nodedata;

	nodedata = (a_uint8_t *)data;
	node_index = *nodedata;
	sc->sc_sta[node_index].an_valid = 0;
  909008:	0a8911        	slli	a9, a8, 6
  90900b:	a899      	add.n	a9, a9, a8
  90900d:	089809        	addx2	a8, a9, a8
  909010:	02880a        	addx4	a8, a8, a2
  909013:	297a30        	movi	a9, 0x730
  909016:	a988      	add.n	a8, a8, a9
  909018:	c090      	movi.n	a9, 0
  90901a:	29840c        	s8i	a9, a8, 12

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90901d:	8a23      	l32i.n	a10, a2, 12
  90901f:	030b4f        	extui	a11, a3, 0, 16
  909022:	040c4f        	extui	a12, a4, 0, 16
  909025:	ded0      	mov.n	a14, a13
  909027:	5bfeab        	call8	908ad4 <wmi_cmd_rsp>
  90902a:	d10f      	retw.n

0090902c <ath_node_create_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_create_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  90902c:	6c1004        	entry	a1, 32
	a_uint8_t vap_index;
	a_uint8_t node_index;

	node = (struct ieee80211_node_target *)data;

	node_index = node->ni_nodeindex;
  90902f:	26500c        	l8ui	a6, a5, 12
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_create_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909032:	db50      	mov.n	a11, a5

	node->ni_htcap = adf_os_ntohs(node->ni_htcap);
	node->ni_flags = adf_os_ntohs(node->ni_flags);
	node->ni_maxampdu = adf_os_ntohs(node->ni_maxampdu);

	adf_os_mem_copy(&(sc->sc_sta[node_index].ni), node,
  909034:	0a6511        	slli	a5, a6, 6
  909037:	a655      	add.n	a5, a5, a6
  909039:	065509        	addx2	a5, a5, a6
  90903c:	0e5511        	slli	a5, a5, 2
  90903f:	275a30        	movi	a7, 0x530
  909042:	a75a      	add.n	a10, a5, a7
  909044:	aa2a      	add.n	a10, a2, a10
  909046:	b8aa      	addi.n	a10, a10, 8
			NODE_TARGET_SIZE);

    	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
  909048:	a525      	add.n	a5, a2, a5
  90904a:	2c0a16        	movi	a12, 22
  90904d:	5bfac3        	call8	907b5c <__adf_os_mem_copy>
  909050:	a757      	add.n	a7, a5, a7
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
  909052:	287015        	l8ui	a8, a7, 21
  909055:	295a50        	movi	a9, 0x550
  909058:	a955      	add.n	a5, a5, a9
  90905a:	0c8911        	slli	a9, a8, 4
  90905d:	a899      	add.n	a9, a9, a8
  90905f:	186a16        	l32r	a8, 8e38b8 <HIFusb_DescTraceDump+0xd0>
  909062:	0e9911        	slli	a9, a9, 2
  909065:	a89a      	add.n	a10, a9, a8
  909067:	aa2a      	add.n	a10, a2, a10
  909069:	b8aa      	addi.n	a10, a10, 8
  90906b:	9a52      	s32i.n	a10, a5, 8
	if(sc->sc_sta[node_index].ni.ni_is_vapnode == 1)
  90906d:	257016        	l8ui	a5, a7, 22
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_create_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909070:	03034f        	extui	a3, a3, 0, 16
  909073:	04044f        	extui	a4, a4, 0, 16
	adf_os_mem_copy(&(sc->sc_sta[node_index].ni), node,
			NODE_TARGET_SIZE);

    	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
	if(sc->sc_sta[node_index].ni.ni_is_vapnode == 1)
  909076:	695106        	bnei	a5, 1, 909080 <ath_node_create_tgt+0x54>
		sc->sc_vap[vap_index].av_vap.iv_nodeindex = node_index;
  909079:	a929      	add.n	a9, a2, a9
  90907b:	a898      	add.n	a8, a9, a8
  90907d:	268415        	s8i	a6, a8, 21

	sc->sc_sta[node_index].an_valid = 1;
  909080:	0a6511        	slli	a5, a6, 6
  909083:	a655      	add.n	a5, a5, a6
  909085:	065609        	addx2	a6, a5, a6
  909088:	0e6611        	slli	a6, a6, 2
  90908b:	a625      	add.n	a5, a2, a6
  90908d:	277a30        	movi	a7, 0x730
  909090:	a757      	add.n	a7, a5, a7
  909092:	c081      	movi.n	a8, 1
  909094:	28740c        	s8i	a8, a7, 12
	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
	sc->sc_sta[node_index].ni.ni_iv32 = 0;

	owl_tgt_node_init(&sc->sc_sta[node_index]);
  909097:	2a5a30        	movi	a10, 0x530
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
	if(sc->sc_sta[node_index].ni.ni_is_vapnode == 1)
		sc->sc_vap[vap_index].av_vap.iv_nodeindex = node_index;

	sc->sc_sta[node_index].an_valid = 1;
	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
  90909a:	285a40        	movi	a8, 0x540
  90909d:	a858      	add.n	a8, a5, a8
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
	sc->sc_sta[node_index].ni.ni_iv32 = 0;

	owl_tgt_node_init(&sc->sc_sta[node_index]);
  90909f:	aa66      	add.n	a6, a6, a10
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
	if(sc->sc_sta[node_index].ni.ni_is_vapnode == 1)
		sc->sc_vap[vap_index].av_vap.iv_nodeindex = node_index;

	sc->sc_sta[node_index].an_valid = 1;
	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
  9090a1:	c050      	movi.n	a5, 0
  9090a3:	258508        	s16i	a5, a8, 16
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
  9090a6:	258509        	s16i	a5, a8, 18
	sc->sc_sta[node_index].ni.ni_iv32 = 0;

	owl_tgt_node_init(&sc->sc_sta[node_index]);
  9090a9:	a62a      	add.n	a10, a2, a6
		sc->sc_vap[vap_index].av_vap.iv_nodeindex = node_index;

	sc->sc_sta[node_index].an_valid = 1;
	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
	sc->sc_sta[node_index].ni.ni_iv32 = 0;
  9090ab:	c050      	movi.n	a5, 0
  9090ad:	9585      	s32i.n	a5, a8, 20

	owl_tgt_node_init(&sc->sc_sta[node_index]);
  9090af:	b8aa      	addi.n	a10, a10, 8
  9090b1:	5811d3        	call8	90d800 <owl_tgt_node_init>

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9090b4:	8a23      	l32i.n	a10, a2, 12
  9090b6:	db30      	mov.n	a11, a3
  9090b8:	dc40      	mov.n	a12, a4
  9090ba:	dd50      	mov.n	a13, a5
  9090bc:	de50      	mov.n	a14, a5
  9090be:	5bfe85        	call8	908ad4 <wmi_cmd_rsp>
  9090c1:	d10f      	retw.n
	...

009090c4 <ath_setcurmode_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_setcurmode_tgt(void *Context, A_UINT16 Command,
			       A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9090c4:	6c1004        	entry	a1, 32
	a_uint16_t mode;

	mode= *((a_uint16_t *)data);
	mode = adf_os_ntohs(mode);

	ath_setcurmode(sc, mode);
  9090c7:	265100        	l16ui	a6, a5, 0
 * @param[in] size  buffer size
 */
static inline void
adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
    __adf_os_mem_set(buf, b, size);
  9090ca:	2a2a08        	movi	a10, 0x208
  9090cd:	0a2a08        	add	a10, a2, a10
  9090d0:	2b0aff        	movi	a11, 255
  9090d3:	2c1a00        	movi	a12, 0x100
	const HAL_RATE_TABLE *rt;
	a_int32_t i;

	adf_os_mem_set(sc->sc_rixmap, 0xff, sizeof(sc->sc_rixmap));

	rt = sc->sc_rates[mode];
  9090d6:	02650a        	addx4	a5, a6, a2
  9090d9:	5bfaa5        	call8	907b70 <__adf_os_mem_set>
  9090dc:	25527f        	l32i	a5, a5, 0x1fc
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_setcurmode_tgt(void *Context, A_UINT16 Command,
			       A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9090df:	03034f        	extui	a3, a3, 0, 16
  9090e2:	04044f        	extui	a4, a4, 0, 16
	a_int32_t i;

	adf_os_mem_set(sc->sc_rixmap, 0xff, sizeof(sc->sc_rixmap));

	rt = sc->sc_rates[mode];
	adf_os_assert(rt != NULL);
  9090e5:	cd55      	bnez.n	a5, 9090fe <ath_setcurmode_tgt+0x3a>
  9090e7:	186913        	l32r	a8, 8e3534 <_HIFusb_start+0x94>
  9090ea:	1a69f4        	l32r	a10, 8e38bc <HIFusb_DescTraceDump+0xd4>
  9090ed:	288212        	l32i	a8, a8, 72
  9090f0:	1b6a1d        	l32r	a11, 8e3964 <HIFusb_DescTraceDump+0x17c>
  9090f3:	0b8000        	callx8	a8
  9090f6:	186978        	l32r	a8, 8e36d8 <_HIFusb_start+0x238>
  9090f9:	0c0200        	memw
  9090fc:	8880      	l32i.n	a8, a8, 0
  9090fe:	d950      	mov.n	a9, a5
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_setcurmode_tgt(void *Context, A_UINT16 Command,
			       A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909100:	c080      	movi.n	a8, 0
  909102:	60000c        	j	909112 <ath_setcurmode_tgt+0x4e>

	rt = sc->sc_rates[mode];
	adf_os_assert(rt != NULL);

	for (i = 0; i < rt->rateCount; i++) {
		sc->sc_rixmap[rt->info[i].rateCode] = i;
  909105:	2a9020        	l8ui	a10, a9, 32
  909108:	aa2a      	add.n	a10, a2, a10
  90910a:	2aad02        	addmi	a10, a10, 0x200
  90910d:	28a408        	s8i	a8, a10, 8
	adf_os_mem_set(sc->sc_rixmap, 0xff, sizeof(sc->sc_rixmap));

	rt = sc->sc_rates[mode];
	adf_os_assert(rt != NULL);

	for (i = 0; i < rt->rateCount; i++) {
  909110:	b188      	addi.n	a8, a8, 1
  909112:	8a50      	l32i.n	a10, a5, 0
  909114:	299c14        	addi	a9, a9, 20
  909117:	7a82ea        	blt	a8, a10, 909105 <ath_setcurmode_tgt+0x41>
		sc->sc_rixmap[rt->info[i].rateCode] = i;
	}

	sc->sc_currates = rt;
	sc->sc_curmode = mode;
	sc->sc_protrix = ((mode == IEEE80211_MODE_11NG) ? 3 : 0);
  90911a:	c0e0      	movi.n	a14, 0

	for (i = 0; i < rt->rateCount; i++) {
		sc->sc_rixmap[rt->info[i].rateCode] = i;
	}

	sc->sc_currates = rt;
  90911c:	252681        	s32i	a5, a2, 0x204
	sc->sc_curmode = mode;
  90911f:	2626c2        	s32i	a6, a2, 0x308
	sc->sc_protrix = ((mode == IEEE80211_MODE_11NG) ? 3 : 0);
  909122:	c053      	movi.n	a5, 3
  909124:	b066      	addi.n	a6, a6, -1
  909126:	06e539        	movnez	a5, a14, a6
	mode= *((a_uint16_t *)data);
	mode = adf_os_ntohs(mode);

	ath_setcurmode(sc, mode);

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909129:	8a23      	l32i.n	a10, a2, 12
		sc->sc_rixmap[rt->info[i].rateCode] = i;
	}

	sc->sc_currates = rt;
	sc->sc_curmode = mode;
	sc->sc_protrix = ((mode == IEEE80211_MODE_11NG) ? 3 : 0);
  90912b:	262d03        	addmi	a6, a2, 0x300
  90912e:	25640c        	s8i	a5, a6, 12
	mode= *((a_uint16_t *)data);
	mode = adf_os_ntohs(mode);

	ath_setcurmode(sc, mode);

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909131:	db30      	mov.n	a11, a3
  909133:	dc40      	mov.n	a12, a4
  909135:	dde0      	mov.n	a13, a14
  909137:	5bfe67        	call8	908ad4 <wmi_cmd_rsp>
  90913a:	d10f      	retw.n

0090913c <ath_flushrecv_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo,NULL, 0);
}

static void ath_flushrecv_tgt(void *Context, A_UINT16 Command,
			      A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  90913c:	6c1004        	entry	a1, 32
  90913f:	03034f        	extui	a3, a3, 0, 16
  909142:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_rx_buf *bf;

	asf_tailq_foreach(bf, &sc->sc_rxbuf, bf_list)
  909145:	2522d5        	l32i	a5, a2, 0x354
  909148:	60002e        	j	90917a <ath_flushrecv_tgt+0x3e>
  90914b:	000000        	ill
		if (bf->bf_skb != NULL) {
  90914e:	8658      	l32i.n	a6, a5, 32
  909150:	ca64      	beqz.n	a6, 909178 <ath_flushrecv_tgt+0x3c>
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  909152:	8b50      	l32i.n	a11, a5, 0
  909154:	2a2246        	l32i	a10, a2, 0x118
  909157:	c0c1      	movi.n	a12, 1
  909159:	5bf646        	call8	906a74 <__adf_nbuf_unmap>
			adf_nbuf_unmap(sc->sc_dev, bf->bf_dmamap,
				       ADF_OS_DMA_FROM_DEVICE);
			ath_free_rx_skb(sc, adf_nbuf_queue_remove(&bf->bf_skbhead));
  90915c:	186913        	l32r	a8, 8e35a8 <_HIFusb_start+0x108>
  90915f:	8720      	l32i.n	a7, a2, 0
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  909161:	2a5c14        	addi	a10, a5, 20
  909164:	26829e        	l32i	a6, a8, 0x278
  909167:	5bf62f        	call8	906a24 <__adf_nbuf_queue_remove>
  90916a:	dca0      	mov.n	a12, a10
  90916c:	2b0a03        	movi	a11, 3
  90916f:	da70      	mov.n	a10, a7
  909171:	0b6000        	callx8	a6
			bf->bf_skb = NULL;
  909174:	c060      	movi.n	a6, 0
  909176:	9658      	s32i.n	a6, a5, 32
			      A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_rx_buf *bf;

	asf_tailq_foreach(bf, &sc->sc_rxbuf, bf_list)
  909178:	8559      	l32i.n	a5, a5, 36
  90917a:	655fd0        	bnez	a5, 90914e <ath_flushrecv_tgt+0x12>
				       ADF_OS_DMA_FROM_DEVICE);
			ath_free_rx_skb(sc, adf_nbuf_queue_remove(&bf->bf_skbhead));
			bf->bf_skb = NULL;
		}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90917d:	8a23      	l32i.n	a10, a2, 12
  90917f:	db30      	mov.n	a11, a3
  909181:	dc40      	mov.n	a12, a4
  909183:	dd50      	mov.n	a13, a5
  909185:	de50      	mov.n	a14, a5
  909187:	5bfe53        	call8	908ad4 <wmi_cmd_rsp>
  90918a:	d10f      	retw.n

0090918c <ath_stoprecv_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_stoprecv_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  90918c:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  90918f:	252d05        	addmi	a5, a2, 0x500
  909192:	855b      	l32i.n	a5, a5, 44
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_stoprecv_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909194:	03034f        	extui	a3, a3, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_stopPcuReceive(ah);
  909197:	285224        	l32i	a8, a5, 144
  90919a:	055a02        	or	a10, a5, a5
  90919d:	0b8000        	callx8	a8
	ah->ah_setRxFilter(ah, 0);
  9091a0:	8859      	l32i.n	a8, a5, 36
  9091a2:	da50      	mov.n	a10, a5
  9091a4:	c0b0      	movi.n	a11, 0
  9091a6:	0b8000        	callx8	a8
	ah->ah_stopDmaReceive(ah);
  9091a9:	285223        	l32i	a8, a5, 140
  9091ac:	da50      	mov.n	a10, a5
  9091ae:	0b8000        	callx8	a8

	sc->sc_rxlink = NULL;
  9091b1:	c0e0      	movi.n	a14, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_stoprecv_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9091b3:	04044f        	extui	a4, a4, 0, 16
	ah->ah_stopPcuReceive(ah);
	ah->ah_setRxFilter(ah, 0);
	ah->ah_stopDmaReceive(ah);

	sc->sc_rxlink = NULL;
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9091b6:	8a23      	l32i.n	a10, a2, 12

	ah->ah_stopPcuReceive(ah);
	ah->ah_setRxFilter(ah, 0);
	ah->ah_stopDmaReceive(ah);

	sc->sc_rxlink = NULL;
  9091b8:	2e26ef        	s32i	a14, a2, 0x3bc
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9091bb:	db30      	mov.n	a11, a3
  9091bd:	dc40      	mov.n	a12, a4
  9091bf:	dde0      	mov.n	a13, a14
  9091c1:	5bfe44        	call8	908ad4 <wmi_cmd_rsp>
  9091c4:	d10f      	retw.n
	...

009091c8 <ath_startrecv_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_startrecv_tgt(void *Context, A_UINT16 Command,
			      A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9091c8:	6c1004        	entry	a1, 32
#undef PA2DESC
}

static a_int32_t ath_startrecv(struct ath_softc_tgt *sc)
{
	struct ath_hal *ah = sc->sc_ah;
  9091cb:	252d05        	addmi	a5, a2, 0x500
  9091ce:	865b      	l32i.n	a6, a5, 44
	struct ath_rx_desc *ds;

	sc->sc_rxbufsize = 1024+512+128;
  9091d0:	256a80        	movi	a5, 0x680
  9091d3:	25264a        	s32i	a5, a2, 0x128
	sc->sc_rxlink = NULL;
  9091d6:	c050      	movi.n	a5, 0
  9091d8:	2526ef        	s32i	a5, a2, 0x3bc

	sc->sc_rxdesc_held = NULL;
  9091db:	2526db        	s32i	a5, a2, 0x36c
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_startrecv_tgt(void *Context, A_UINT16 Command,
			      A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9091de:	03034f        	extui	a3, a3, 0, 16
  9091e1:	04044f        	extui	a4, a4, 0, 16
	sc->sc_rxbufsize = 1024+512+128;
	sc->sc_rxlink = NULL;

	sc->sc_rxdesc_held = NULL;

	asf_tailq_foreach(ds, &sc->sc_rxdesc, ds_list) {
  9091e4:	2522d9        	l32i	a5, a2, 0x364
  9091e7:	600027        	j	909212 <ath_startrecv_tgt+0x4a>
		a_int32_t error = ath_rxdesc_init(sc, ds);
  9091ea:	da20      	mov.n	a10, a2
  9091ec:	db50      	mov.n	a11, a5
  9091ee:	5bfae0        	call8	907d70 <ath_rxdesc_init>
		if (error != 0) {
  9091f1:	65a049        	bnez	a10, 90923e <ath_startrecv_tgt+0x76>
	sc->sc_rxbufsize = 1024+512+128;
	sc->sc_rxlink = NULL;

	sc->sc_rxdesc_held = NULL;

	asf_tailq_foreach(ds, &sc->sc_rxdesc, ds_list) {
  9091f4:	2a504c        	l8ui	a10, a5, 76
  9091f7:	29504d        	l8ui	a9, a5, 77
  9091fa:	28504e        	l8ui	a8, a5, 78
  9091fd:	08aa10        	slli	a10, a10, 24
  909200:	009911        	slli	a9, a9, 16
  909203:	0a9902        	or	a9, a9, a10
  909206:	088811        	slli	a8, a8, 8
  909209:	25504f        	l8ui	a5, a5, 79
  90920c:	098802        	or	a8, a8, a9
  90920f:	085502        	or	a5, a5, a8
  909212:	655fd4        	bnez	a5, 9091ea <ath_startrecv_tgt+0x22>
			return error;
		}
	}

	ds = asf_tailq_first(&sc->sc_rxdesc);
	ah->ah_setRxDP(ah, ds->ds_daddr);
  909215:	2522d9        	l32i	a5, a2, 0x364
  909218:	2a5048        	l8ui	a10, a5, 72
  90921b:	295049        	l8ui	a9, a5, 73
  90921e:	28504a        	l8ui	a8, a5, 74
  909221:	08aa10        	slli	a10, a10, 24
  909224:	009911        	slli	a9, a9, 16
  909227:	0a9902        	or	a9, a9, a10
  90922a:	2b504b        	l8ui	a11, a5, 75
  90922d:	088811        	slli	a8, a8, 8
  909230:	098802        	or	a8, a8, a9
  909233:	25621f        	l32i	a5, a6, 124
  909236:	da60      	mov.n	a10, a6
  909238:	08bb02        	or	a11, a11, a8
  90923b:	0b5000        	callx8	a5
{

	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;

	ath_startrecv(sc);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90923e:	c0d0      	movi.n	a13, 0
  909240:	8a23      	l32i.n	a10, a2, 12
  909242:	db30      	mov.n	a11, a3
  909244:	dc40      	mov.n	a12, a4
  909246:	0dde02        	or	a14, a13, a13
  909249:	5bfe22        	call8	908ad4 <wmi_cmd_rsp>
  90924c:	d10f      	retw.n
	...

00909250 <ath_draintxq_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_draintxq_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909250:	6c1004        	entry	a1, 32
	owltgt_txq_drain(sc, txq);
}

static void ath_draintxq(struct ath_softc_tgt *sc, HAL_BOOL drain_softq)
{
	struct ath_hal *ah = sc->sc_ah;
  909253:	262d05        	addmi	a6, a2, 0x500
	a_uint16_t i;
	struct ath_txq *txq = NULL;
	struct ath_atx_tid *tid = NULL;

	ath_tx_status_clear(sc);
  909256:	da20      	mov.n	a10, a2
	sc->sc_tx_draining = 1;
  909258:	252d01        	addmi	a5, a2, 0x100
	owltgt_txq_drain(sc, txq);
}

static void ath_draintxq(struct ath_softc_tgt *sc, HAL_BOOL drain_softq)
{
	struct ath_hal *ah = sc->sc_ah;
  90925b:	27620b        	l32i	a7, a6, 44
	a_uint16_t i;
	struct ath_txq *txq = NULL;
	struct ath_atx_tid *tid = NULL;

	ath_tx_status_clear(sc);
  90925e:	581179        	call8	90d844 <ath_tx_status_clear>
	sc->sc_tx_draining = 1;
  909261:	295024        	l8ui	a9, a5, 36
  909264:	c480      	movi.n	a8, 64
  909266:	089802        	or	a8, a9, a8
  909269:	285424        	s8i	a8, a5, 36

	ah->ah_stopTxDma(ah, sc->sc_bhalq);
  90926c:	2b501c        	l8ui	a11, a5, 28
  90926f:	28720d        	l32i	a8, a7, 52
  909272:	077a02        	or	a10, a7, a7
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_draintxq_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909275:	03034f        	extui	a3, a3, 0, 16
  909278:	04044f        	extui	a4, a4, 0, 16
	struct ath_atx_tid *tid = NULL;

	ath_tx_status_clear(sc);
	sc->sc_tx_draining = 1;

	ah->ah_stopTxDma(ah, sc->sc_bhalq);
  90927b:	0b8000        	callx8	a8
  90927e:	c050      	movi.n	a5, 0

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i))
  909280:	272d03        	addmi	a7, a2, 0x300
  909283:	2770c8        	l8ui	a7, a7, 200
  909286:	005004        	ssr	a5
  909289:	07071b        	sra	a7, a7
  90928c:	7f7710        	bbci	a7, 31, 9092a0 <ath_draintxq_tgt+0x50>
			ath_tx_stopdma(sc, ATH_TXQ(sc, i));
  90928f:	285c1e        	addi	a8, a5, 30
/* TX */
/******/

static void ath_tx_stopdma(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	struct ath_hal *ah = sc->sc_ah;
  909292:	8a6b      	l32i.n	a10, a6, 44

	ah->ah_stopTxDma(ah, sc->sc_bhalq);

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i))
			ath_tx_stopdma(sc, ATH_TXQ(sc, i));
  909294:	0b8811        	slli	a8, a8, 5

static void ath_tx_stopdma(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_stopTxDma(ah, txq->axq_qnum);
  909297:	a828      	add.n	a8, a2, a8
  909299:	87ad      	l32i.n	a7, a10, 52
  90929b:	8b83      	l32i.n	a11, a8, 12
  90929d:	0b7000        	callx8	a7
  9092a0:	b155      	addi.n	a5, a5, 1
	ath_tx_status_clear(sc);
	sc->sc_tx_draining = 1;

	ah->ah_stopTxDma(ah, sc->sc_bhalq);

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
  9092a2:	6959da        	bnei	a5, 10, 909280 <ath_draintxq_tgt+0x30>
  9092a5:	c050      	movi.n	a5, 0
			txq = ATH_TXQ(sc,i);
			while (!asf_tailq_empty(&txq->axq_tidq)){
				TAILQ_DEQ(&txq->axq_tidq, tid, tid_qelem);
				if(tid == NULL)
					break;
				tid->sched = AH_FALSE;
  9092a7:	d650      	mov.n	a6, a5
	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i))
			ath_tx_stopdma(sc, ATH_TXQ(sc, i));

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i)) {
  9092a9:	272d03        	addmi	a7, a2, 0x300
  9092ac:	2770c8        	l8ui	a7, a7, 200
  9092af:	005004        	ssr	a5
  9092b2:	07071b        	sra	a7, a7
  9092b5:	7f7f08        	bbsi	a7, 31, 9092c1 <ath_draintxq_tgt+0x71>
  9092b8:	b155      	addi.n	a5, a5, 1

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i))
			ath_tx_stopdma(sc, ATH_TXQ(sc, i));

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
  9092ba:	6959eb        	bnei	a5, 10, 9092a9 <ath_draintxq_tgt+0x59>
  9092bd:	600039        	j	9092fa <ath_draintxq_tgt+0xaa>
  9092c0:	00275c        	extui	a7, a0, 18, 13
		if (ATH_TXQ_SETUP(sc, i)) {
			owltgt_tx_processq(sc, ATH_TXQ(sc,i), OWL_TXQ_STOPPED);
  9092c3:	1e0b77        	l32r	a14, 8cc0a0 <_bss_end+0x3b9190>
  9092c6:	11a727        	l32r	a1, 8f2f64 <memset+0xc11c>
  9092c9:	bc77      	addi.n	a7, a7, 12
  9092cb:	da20      	mov.n	a10, a2
  9092cd:	db70      	mov.n	a11, a7
  9092cf:	c0c1      	movi.n	a12, 1
  9092d1:	58163f        	call8	90ebd0 <owltgt_tx_processq>
  9092d4:	60001a        	j	9092f2 <ath_draintxq_tgt+0xa2>
  9092d7:	0089b9        	excw

			txq = ATH_TXQ(sc,i);
			while (!asf_tailq_empty(&txq->axq_tidq)){
				TAILQ_DEQ(&txq->axq_tidq, tid, tid_qelem);
  9092da:	8aba      	l32i.n	a10, a11, 40
  9092dc:	c894      	beqz.n	a9, 9092e4 <ath_draintxq_tgt+0x94>
  9092de:	9a9a      	s32i.n	a10, a9, 40
  9092e0:	600002        	j	9092e6 <ath_draintxq_tgt+0x96>
  9092e3:	009a77        	excw
  9092e6:	8aba      	l32i.n	a10, a11, 40
  9092e8:	99a0      	s32i.n	a9, a10, 0
				if(tid == NULL)
					break;
				tid->sched = AH_FALSE;
  9092ea:	26b435        	s8i	a6, a11, 53
				ath_tgt_tid_drain(sc,tid);
  9092ed:	da20      	mov.n	a10, a2
  9092ef:	58120e        	call8	90db28 <ath_tgt_tid_drain>
	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i)) {
			owltgt_tx_processq(sc, ATH_TXQ(sc,i), OWL_TXQ_STOPPED);

			txq = ATH_TXQ(sc,i);
			while (!asf_tailq_empty(&txq->axq_tidq)){
  9092f2:	8b76      	l32i.n	a11, a7, 24
  9092f4:	65bfe0        	bnez	a11, 9092d8 <ath_draintxq_tgt+0x88>
  9092f7:	63ffbd        	j	9092b8 <ath_draintxq_tgt+0x68>
				tid->sched = AH_FALSE;
				ath_tgt_tid_drain(sc,tid);
			}
		}

	sc->sc_tx_draining = 0;
  9092fa:	252d01        	addmi	a5, a2, 0x100
  9092fd:	275024        	l8ui	a7, a5, 36
  909300:	26fabf        	movi	a6, -65
  909303:	067601        	and	a6, a7, a6
  909306:	265424        	s8i	a6, a5, 36
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	HAL_BOOL b = (HAL_BOOL) *(a_int32_t *)data;

	ath_draintxq(Context, b);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909309:	c0d0      	movi.n	a13, 0
  90930b:	8a23      	l32i.n	a10, a2, 12
  90930d:	db30      	mov.n	a11, a3
  90930f:	dc40      	mov.n	a12, a4
  909311:	ded0      	mov.n	a14, a13
  909313:	5bfdf0        	call8	908ad4 <wmi_cmd_rsp>
  909316:	d10f      	retw.n

00909318 <ath_tx_draintxq_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_tx_draintxq_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
				A_UINT8 *data, a_int32_t datalen)
{
  909318:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint32_t q = *(a_uint32_t *)data;
	struct ath_txq *txq = NULL;

	q = adf_os_ntohl(q);
	txq = ATH_TXQ(sc, q);
  90931b:	8b50      	l32i.n	a11, a5, 0
	ah->ah_stopTxDma(ah, txq->axq_qnum);
}

static void owltgt_txq_drain(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	owltgt_tx_processq(sc, txq, OWL_TXQ_STOPPED);
  90931d:	da20      	mov.n	a10, a2
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint32_t q = *(a_uint32_t *)data;
	struct ath_txq *txq = NULL;

	q = adf_os_ntohl(q);
	txq = ATH_TXQ(sc, q);
  90931f:	2bbc1e        	addi	a11, a11, 30
  909322:	0bbb11        	slli	a11, a11, 5
  909325:	ab2b      	add.n	a11, a2, a11
	ah->ah_stopTxDma(ah, txq->axq_qnum);
}

static void owltgt_txq_drain(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	owltgt_tx_processq(sc, txq, OWL_TXQ_STOPPED);
  909327:	2bbc0c        	addi	a11, a11, 12
  90932a:	2c0a01        	movi	a12, 1
  90932d:	581628        	call8	90ebd0 <owltgt_tx_processq>
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_tx_draintxq_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
				A_UINT8 *data, a_int32_t datalen)
{
  909330:	03034f        	extui	a3, a3, 0, 16
  909333:	04044f        	extui	a4, a4, 0, 16

	q = adf_os_ntohl(q);
	txq = ATH_TXQ(sc, q);

	ath_tx_draintxq(sc, txq);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909336:	c0d0      	movi.n	a13, 0
  909338:	8a23      	l32i.n	a10, a2, 12
  90933a:	db30      	mov.n	a11, a3
  90933c:	dc40      	mov.n	a12, a4
  90933e:	0dde02        	or	a14, a13, a13
  909341:	5bfde4        	call8	908ad4 <wmi_cmd_rsp>
  909344:	d10f      	retw.n
	...

00909348 <ath_aborttx_dma_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_aborttx_dma_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909348:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  90934b:	282d05        	addmi	a8, a2, 0x500
  90934e:	8a8b      	l32i.n	a10, a8, 44
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_aborttx_dma_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909350:	03034f        	extui	a3, a3, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_abortTxDma(sc->sc_ah);
  909353:	28a20e        	l32i	a8, a10, 56
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_aborttx_dma_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909356:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_abortTxDma(sc->sc_ah);
  909359:	0b8000        	callx8	a8
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90935c:	c0d0      	movi.n	a13, 0
  90935e:	8a23      	l32i.n	a10, a2, 12
  909360:	db30      	mov.n	a11, a3
  909362:	dc40      	mov.n	a12, a4
  909364:	ded0      	mov.n	a14, a13
  909366:	5bfddb        	call8	908ad4 <wmi_cmd_rsp>
  909369:	d10f      	retw.n
	...

0090936c <ath_stop_tx_dma_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_stop_tx_dma_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  90936c:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  90936f:	292d05        	addmi	a9, a2, 0x500
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_stop_tx_dma_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909372:	03034f        	extui	a3, a3, 0, 16
  909375:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  909378:	8a9b      	l32i.n	a10, a9, 44
	a_uint32_t q;

	if (data)
  90937a:	c850      	beqz.n	a5, 90937e <ath_stop_tx_dma_tgt+0x12>
		q = *(a_uint32_t *)data;
  90937c:	8b50      	l32i.n	a11, a5, 0

	q = adf_os_ntohl(q);
	ah->ah_stopTxDma(ah, q);
  90937e:	85ad      	l32i.n	a5, a10, 52
  909380:	0b5000        	callx8	a5
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909383:	c0d0      	movi.n	a13, 0
  909385:	8a23      	l32i.n	a10, a2, 12
  909387:	db30      	mov.n	a11, a3
  909389:	dc40      	mov.n	a12, a4
  90938b:	ded0      	mov.n	a14, a13
  90938d:	5bfdd1        	call8	908ad4 <wmi_cmd_rsp>
  909390:	d10f      	retw.n
	...

00909394 <ath_aborttxq_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_aborttxq_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909394:	6c1004        	entry	a1, 32
  909397:	03034f        	extui	a3, a3, 0, 16
  90939a:	04044f        	extui	a4, a4, 0, 16
  90939d:	250a00        	movi	a5, 0

	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint16_t i;

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++) {
		if (ATH_TXQ_SETUP(sc, i))
  9093a0:	282d03        	addmi	a8, a2, 0x300
  9093a3:	2880c8        	l8ui	a8, a8, 200
  9093a6:	005004        	ssr	a5
  9093a9:	08081b        	sra	a8, a8
  9093ac:	7f8710        	bbci	a8, 31, 9093c0 <ath_aborttxq_tgt+0x2c>
			ath_tx_draintxq(sc, ATH_TXQ(sc,i));
  9093af:	2b5c1e        	addi	a11, a5, 30
  9093b2:	0bbb11        	slli	a11, a11, 5
  9093b5:	ab2b      	add.n	a11, a2, a11
	ah->ah_stopTxDma(ah, txq->axq_qnum);
}

static void owltgt_txq_drain(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	owltgt_tx_processq(sc, txq, OWL_TXQ_STOPPED);
  9093b7:	da20      	mov.n	a10, a2
  9093b9:	bcbb      	addi.n	a11, a11, 12
  9093bb:	c0c1      	movi.n	a12, 1
  9093bd:	581604        	call8	90ebd0 <owltgt_tx_processq>
  9093c0:	b155      	addi.n	a5, a5, 1
{

	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint16_t i;

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++) {
  9093c2:	6959da        	bnei	a5, 10, 9093a0 <ath_aborttxq_tgt+0xc>
		if (ATH_TXQ_SETUP(sc, i))
			ath_tx_draintxq(sc, ATH_TXQ(sc,i));
	}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9093c5:	c0d0      	movi.n	a13, 0
  9093c7:	8a23      	l32i.n	a10, a2, 12
  9093c9:	db30      	mov.n	a11, a3
  9093cb:	dc40      	mov.n	a12, a4
  9093cd:	ded0      	mov.n	a14, a13
  9093cf:	5bfdc1        	call8	908ad4 <wmi_cmd_rsp>
  9093d2:	d10f      	retw.n

009093d4 <ath_init_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo,NULL, 0);
}

static void ath_init_tgt(void *Context, A_UINT16 Command,
			 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9093d4:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  9093d7:	252d05        	addmi	a5, a2, 0x500
  9093da:	855b      	l32i.n	a5, a5, 44

	sc->sc_imask = HAL_INT_RX | HAL_INT_TX
		| HAL_INT_RXEOL | HAL_INT_RXORN
		| HAL_INT_FATAL | HAL_INT_GLOBAL;

	sc->sc_imask |= HAL_INT_GTT;
  9093dc:	186a1e        	l32r	a8, 8e3c54 <bSet_configuration+0x100>

	if (ath_hal_getcapability(ah, HAL_CAP_HT))
  9093df:	055a02        	or	a10, a5, a5

	sc->sc_imask = HAL_INT_RX | HAL_INT_TX
		| HAL_INT_RXEOL | HAL_INT_RXORN
		| HAL_INT_FATAL | HAL_INT_GLOBAL;

	sc->sc_imask |= HAL_INT_GTT;
  9093e2:	2826c4        	s32i	a8, a2, 0x310

	if (ath_hal_getcapability(ah, HAL_CAP_HT))
  9093e5:	c0b5      	movi.n	a11, 5
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo,NULL, 0);
}

static void ath_init_tgt(void *Context, A_UINT16 Command,
			 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9093e7:	03034f        	extui	a3, a3, 0, 16
  9093ea:	04044f        	extui	a4, a4, 0, 16
		| HAL_INT_RXEOL | HAL_INT_RXORN
		| HAL_INT_FATAL | HAL_INT_GLOBAL;

	sc->sc_imask |= HAL_INT_GTT;

	if (ath_hal_getcapability(ah, HAL_CAP_HT))
  9093ed:	580656        	call8	90ad48 <ath_hal_getcapability>
  9093f0:	c8aa      	beqz.n	a10, 9093fe <ath_init_tgt+0x2a>
		sc->sc_imask |= HAL_INT_CST;
  9093f2:	2922c4        	l32i	a9, a2, 0x310
  9093f5:	186a1f        	l32r	a8, 8e3c74 <bSet_configuration+0x120>
  9093f8:	089802        	or	a8, a9, a8
  9093fb:	2826c4        	s32i	a8, a2, 0x310
#include <adf_os_irq_pvt.h>

static inline int
adf_os_setup_intr(adf_os_device_t  osdev, adf_os_drv_intr fn)
{
    return __adf_os_setup_intr(osdev, fn);
  9093fe:	2a2246        	l32i	a10, a2, 0x118
  909401:	1b6a20        	l32r	a11, 8e3c84 <bSet_configuration+0x130>
  909404:	580646        	call8	90ad20 <__adf_os_setup_intr>

	adf_os_setup_intr(sc->sc_dev, ath_intr);
	ah->ah_setInterrupts(ah, sc->sc_imask);
  909407:	2b22c4        	l32i	a11, a2, 0x310
  90940a:	285228        	l32i	a8, a5, 160
  90940d:	da50      	mov.n	a10, a5
  90940f:	0b8000        	callx8	a8

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909412:	c0d0      	movi.n	a13, 0
  909414:	8a23      	l32i.n	a10, a2, 12
  909416:	db30      	mov.n	a11, a3
  909418:	dc40      	mov.n	a12, a4
  90941a:	0dde02        	or	a14, a13, a13
  90941d:	5bfdad        	call8	908ad4 <wmi_cmd_rsp>
  909420:	d10f      	retw.n
	...

00909424 <ath_enable_intr_tgt>:
/* WMI Commands */
/****************/

static void ath_enable_intr_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909424:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  909427:	292d05        	addmi	a9, a2, 0x500
/* WMI Commands */
/****************/

static void ath_enable_intr_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  90942a:	03034f        	extui	a3, a3, 0, 16
  90942d:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  909430:	8a9b      	l32i.n	a10, a9, 44
	a_uint32_t intr;

	if (data)
  909432:	645002        	beqz	a5, 909438 <ath_enable_intr_tgt+0x14>
		intr = (*(a_uint32_t *)data);
  909435:	285200        	l32i	a8, a5, 0

	intr = adf_os_ntohl(intr);

	if (intr & HAL_INT_SWBA) {
  909438:	196951        	l32r	a9, 8e397c <HIFusb_DescTraceDump+0x194>
  90943b:	2522c4        	l32i	a5, a2, 0x310
  90943e:	798006        	bnone	a8, a9, 909448 <ath_enable_intr_tgt+0x24>
		sc->sc_imask |= HAL_INT_SWBA;
  909441:	095502        	or	a5, a5, a9
  909444:	600006        	j	90944e <ath_enable_intr_tgt+0x2a>
  909447:	00196a        	excw
	} else {
		sc->sc_imask &= ~HAL_INT_SWBA;
  90944a:	210955        	l16si	a1, a0, 170
  90944d:	012526        	excw
  909450:	c415      	movi.n	a1, 69
	}

	if (intr & HAL_INT_BMISS) {
  909452:	6a2275        	blti	a2, 2, 9094cb <handle_echo_command+0xb>
  909455:	8008      	l32i.n	a0, a0, 32
		sc->sc_imask |= HAL_INT_BMISS;
  909457:	2822c4        	l32i	a8, a2, 0x310
  90945a:	058502        	or	a5, a8, a5
  90945d:	2526c4        	s32i	a5, a2, 0x310
	}

	ah->ah_setInterrupts(ah, sc->sc_imask);
  909460:	2b22c4        	l32i	a11, a2, 0x310
  909463:	25a228        	l32i	a5, a10, 160
  909466:	0b5000        	callx8	a5
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo,NULL, 0);
  909469:	c0d0      	movi.n	a13, 0
  90946b:	8a23      	l32i.n	a10, a2, 12
  90946d:	db30      	mov.n	a11, a3
  90946f:	dc40      	mov.n	a12, a4
  909471:	ded0      	mov.n	a14, a13
  909473:	5bfd98        	call8	908ad4 <wmi_cmd_rsp>
  909476:	d10f      	retw.n

00909478 <ath_disable_intr_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_disable_intr_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909478:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  90947b:	282d05        	addmi	a8, a2, 0x500
  90947e:	8a8b      	l32i.n	a10, a8, 44

	ah->ah_setInterrupts(ah, 0);
  909480:	2b0a00        	movi	a11, 0
  909483:	28a228        	l32i	a8, a10, 160
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_disable_intr_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909486:	03034f        	extui	a3, a3, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_setInterrupts(ah, 0);
  909489:	0b8000        	callx8	a8
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_disable_intr_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  90948c:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_setInterrupts(ah, 0);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo,NULL, 0);
  90948f:	c0d0      	movi.n	a13, 0
  909491:	8a23      	l32i.n	a10, a2, 12
  909493:	db30      	mov.n	a11, a3
  909495:	dc40      	mov.n	a12, a4
  909497:	ded0      	mov.n	a14, a13
  909499:	5bfd8e        	call8	908ad4 <wmi_cmd_rsp>
  90949c:	d10f      	retw.n
	...

009094a0 <ath_get_tgt_version>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
}

static void ath_get_tgt_version(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
				A_UINT8 *data, a_int32_t datalen)
{
  9094a0:	6c1006        	entry	a1, 48
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_fw_version ver;

	ver.major = ATH_VERSION_MAJOR;
  9094a3:	c081      	movi.n	a8, 1
	ver.minor = ATH_VERSION_MINOR;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
  9094a5:	8a23      	l32i.n	a10, a2, 12
				A_UINT8 *data, a_int32_t datalen)
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_fw_version ver;

	ver.major = ATH_VERSION_MAJOR;
  9094a7:	281500        	s16i	a8, a1, 0
	ver.minor = ATH_VERSION_MINOR;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
  9094aa:	030b4f        	extui	a11, a3, 0, 16
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_fw_version ver;

	ver.major = ATH_VERSION_MAJOR;
	ver.minor = ATH_VERSION_MINOR;
  9094ad:	c084      	movi.n	a8, 4

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
  9094af:	040c4f        	extui	a12, a4, 0, 16
  9094b2:	dd10      	mov.n	a13, a1
  9094b4:	c0e4      	movi.n	a14, 4
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_fw_version ver;

	ver.major = ATH_VERSION_MAJOR;
	ver.minor = ATH_VERSION_MINOR;
  9094b6:	281501        	s16i	a8, a1, 2

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
  9094b9:	5bfd86        	call8	908ad4 <wmi_cmd_rsp>
  9094bc:	d10f      	retw.n
	...

009094c0 <handle_echo_command>:
	adf_os_mem_free(sc);
}

static void handle_echo_command(void *pContext, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  9094c0:	6c1004        	entry	a1, 32
	wmi_cmd_rsp(pContext, WMI_ECHO_CMDID, SeqNo, buffer, Length);
  9094c3:	da20      	mov.n	a10, a2
  9094c5:	c0b1      	movi.n	a11, 1
  9094c7:	040c4f        	extui	a12, a4, 0, 16
  9094ca:	dd50      	mov.n	a13, a5
  9094cc:	de60      	mov.n	a14, a6
  9094ce:	5bfd81        	call8	908ad4 <wmi_cmd_rsp>
  9094d1:	d10f      	retw.n
	...

009094d4 <ath_get_minrateidx>:
			sc->sc_sta[i].an_valid = 0;
	}
}

a_uint8_t ath_get_minrateidx(struct ath_softc_tgt *sc, struct ath_vap_target *avp)
{
  9094d4:	6c1004        	entry	a1, 32
	if (sc->sc_curmode == IEEE80211_MODE_11NG)
  9094d7:	2822c2        	l32i	a8, a2, 0x308
  9094da:	698104        	bnei	a8, 1, 9094e2 <ath_get_minrateidx+0xe>
		return avp->av_minrateidx[0];
  9094dd:	223040        	l8ui	a2, a3, 64
  9094e0:	d10f      	retw.n
	else if (sc->sc_curmode == IEEE80211_MODE_11NA)
		return avp->av_minrateidx[1];

	return 0;
  9094e2:	c020      	movi.n	a2, 0

a_uint8_t ath_get_minrateidx(struct ath_softc_tgt *sc, struct ath_vap_target *avp)
{
	if (sc->sc_curmode == IEEE80211_MODE_11NG)
		return avp->av_minrateidx[0];
	else if (sc->sc_curmode == IEEE80211_MODE_11NA)
  9094e4:	728902        	bne	a8, a2, 9094ea <ath_get_minrateidx+0x16>
		return avp->av_minrateidx[1];
  9094e7:	223041        	l8ui	a2, a3, 65

	return 0;
}
  9094ea:	d10f      	retw.n

009094ec <tgt_HTCRecv_beaconhandler>:
#undef N
}

static void tgt_HTCRecv_beaconhandler(HTC_ENDPOINT_ID EndPt, adf_nbuf_t hdr_buf,
				      adf_nbuf_t buf, void *ServiceCtx)
{
  9094ec:	6c101c        	entry	a1, 224
}

static void ath_tgt_send_beacon(struct ath_softc_tgt *sc, adf_nbuf_t bc_hdr,
				adf_nbuf_t nbuf, HTC_ENDPOINT_ID EndPt)
{
	struct ath_hal *ah = sc->sc_ah;
  9094ef:	265d05        	addmi	a6, a5, 0x500
  9094f2:	866b      	l32i.n	a6, a6, 44
	ath_beacon_hdr_t *bhdr;
	struct ieee80211vap_target  *vap;
	a_uint32_t anblen;
	struct ieee80211_frame *wh;

	if (!bc_hdr) {
  9094f4:	cd35      	bnez.n	a3, 90950d <tgt_HTCRecv_beaconhandler+0x21>
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  9094f6:	231c20        	addi	a3, a1, 32
  9094f9:	da40      	mov.n	a10, a4
  9094fb:	2b3c74        	addi	a11, a3, 116
  9094fe:	2c3c70        	addi	a12, a3, 112
  909501:	5bf5e2        	call8	906c8c <__adf_nbuf_peek_header>
		adf_nbuf_peek_header(nbuf, &anbdata, &anblen);
		bhdr = (ath_beacon_hdr_t *)anbdata;
  909504:	271225        	l32i	a7, a1, 148
  909507:	600011        	j	90951c <tgt_HTCRecv_beaconhandler+0x30>
  90950a:	000000        	ill
	} else {
		adf_os_print("found bc_hdr! 0x%x\n", bc_hdr);
  90950d:	186913        	l32r	a8, 8e395c <HIFusb_DescTraceDump+0x174>
  909510:	1a6a23        	l32r	a10, 8e3d9c <bSet_configuration+0x248>
  909513:	288212        	l32i	a8, a8, 72
  909516:	033b02        	or	a11, a3, a3
  909519:	0b8000        	callx8	a8
	}

	vap_index = bhdr->vap_index;
  90951c:	277000        	l8ui	a7, a7, 0
	adf_os_assert(vap_index < TARGET_VAP_MAX);
  90951f:	6e7216        	bltui	a7, 2, 909539 <tgt_HTCRecv_beaconhandler+0x4d>
  909522:	136913        	l32r	a3, 8e3970 <HIFusb_DescTraceDump+0x188>
  909525:	1a69f4        	l32r	a10, 8e3cf8 <bSet_configuration+0x1a4>
  909528:	233212        	l32i	a3, a3, 72
  90952b:	1b6a24        	l32r	a11, 8e3dbc <bSet_configuration+0x268>
  90952e:	0b3000        	callx8	a3
  909531:	136978        	l32r	a3, 8e3b14 <bGet_descriptor+0x78>
  909534:	0c0200        	memw
  909537:	8330      	l32i.n	a3, a3, 0
 *         or NULL if there is not sufficient data to pull.
 */
static inline a_uint8_t *
adf_nbuf_pull_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_pull_head(buf, size);
  909539:	da40      	mov.n	a10, a4
  90953b:	c0b4      	movi.n	a11, 4
  90953d:	5bf504        	call8	906950 <__adf_nbuf_pull_head>
	vap = &sc->sc_vap[vap_index].av_vap;

	wh = (struct ieee80211_frame *)adf_nbuf_pull_head(nbuf,
						  sizeof(ath_beacon_hdr_t));

	bf = sc->sc_vap[vap_index].av_bcbuf;
  909540:	0c7311        	slli	a3, a7, 4
  909543:	a733      	add.n	a3, a3, a7
  909545:	186a1b        	l32r	a8, 8e3db4 <bSet_configuration+0x260>
  909548:	05330a        	addx4	a3, a3, a5
  90954b:	a833      	add.n	a3, a3, a8
  90954d:	8333      	l32i.n	a3, a3, 12
	adf_os_assert(bf);
  90954f:	cd35      	bnez.n	a3, 909568 <tgt_HTCRecv_beaconhandler+0x7c>
  909551:	186913        	l32r	a8, 8e39a0 <HIFusb_DescTraceDump+0x1b8>
  909554:	1a69f4        	l32r	a10, 8e3d24 <bSet_configuration+0x1d0>
  909557:	288212        	l32i	a8, a8, 72
  90955a:	1b6a24        	l32r	a11, 8e3dec <bSet_configuration+0x298>
  90955d:	0b8000        	callx8	a8
  909560:	186978        	l32r	a8, 8e3b40 <bGet_descriptor+0xa4>
  909563:	0c0200        	memw
  909566:	8880      	l32i.n	a8, a8, 0
	bf->bf_endpt = EndPt;
  909568:	223623        	s32i	a2, a3, 140

	if (bf->bf_skb) {
  90956b:	8238      	l32i.n	a2, a3, 32
  90956d:	c92f      	beqz.n	a2, 909590 <tgt_HTCRecv_beaconhandler+0xa4>
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  90956f:	2a5246        	l32i	a10, a5, 0x118
  909572:	8b30      	l32i.n	a11, a3, 0
  909574:	c0c0      	movi.n	a12, 0
  909576:	5bf53f        	call8	906a74 <__adf_nbuf_unmap>
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  909579:	8a38      	l32i.n	a10, a3, 32
  90957b:	c0b4      	movi.n	a11, 4
  90957d:	5bf4e9        	call8	906924 <__adf_nbuf_push_head>
		adf_nbuf_unmap(sc->sc_dev, bf->bf_dmamap, ADF_OS_DMA_TO_DEVICE);
		adf_nbuf_push_head(bf->bf_skb, sizeof(ath_beacon_hdr_t));
		ath_free_tx_skb(sc->tgt_htc_handle, bf->bf_endpt, bf->bf_skb);
  909580:	126913        	l32r	a2, 8e39cc <HIFusb_DescTraceDump+0x1e4>
  909583:	8a52      	l32i.n	a10, a5, 8
  909585:	222282        	l32i	a2, a2, 0x208
  909588:	2b3223        	l32i	a11, a3, 140
  90958b:	8c38      	l32i.n	a12, a3, 32
  90958d:	0b2000        	callx8	a2
adf_nbuf_map(adf_os_device_t        osdev, 
             adf_os_dma_map_t       bmap, 
             adf_nbuf_t             buf, 
             adf_os_dma_dir_t       dir)
{
    return __adf_nbuf_map(osdev, bmap, buf, dir);
  909590:	8b30      	l32i.n	a11, a3, 0
  909592:	2a5246        	l32i	a10, a5, 0x118
  909595:	c0d0      	movi.n	a13, 0
  909597:	dc40      	mov.n	a12, a4
	}

	bf->bf_skb = nbuf;
  909599:	9438      	s32i.n	a4, a3, 32
  90959b:	5bf533        	call8	906a68 <__adf_nbuf_map>
 * @param[out] sg   map info
 */
static inline void
adf_nbuf_dmamap_info(adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
    __adf_nbuf_dmamap_info(bmap, sg);
  90959e:	8a30      	l32i.n	a10, a3, 0
  9095a0:	b43b      	addi.n	a11, a3, 4
static void ath_beacon_setup(struct ath_softc_tgt *sc,
			     struct ath_tx_buf *bf,
			     struct ath_vap_target *avp)
{
	adf_nbuf_t skb = bf->bf_skb;
	struct ath_hal *ah = sc->sc_ah;
  9095a2:	225d05        	addmi	a2, a5, 0x500
  9095a5:	5bf538        	call8	906a88 <__adf_nbuf_dmamap_info>
  9095a8:	822b      	l32i.n	a2, a2, 44
	struct ath_tx_desc *ds;
	a_int32_t flags;
	const HAL_RATE_TABLE *rt;
	a_uint8_t rix, rate;
	HAL_11N_RATE_SERIES series[4] = {{ 0 }};
  9095aa:	2c0a70        	movi	a12, 112
  9095ad:	2a1c20        	addi	a10, a1, 32
  9095b0:	c0b0      	movi.n	a11, 0
 */
static void ath_beacon_setup(struct ath_softc_tgt *sc,
			     struct ath_tx_buf *bf,
			     struct ath_vap_target *avp)
{
	adf_nbuf_t skb = bf->bf_skb;
  9095b2:	8438      	l32i.n	a4, a3, 32
	struct ath_hal *ah = sc->sc_ah;
  9095b4:	22162d        	s32i	a2, a1, 180
	struct ath_tx_desc *ds;
	a_int32_t flags;
	const HAL_RATE_TABLE *rt;
	a_uint8_t rix, rate;
	HAL_11N_RATE_SERIES series[4] = {{ 0 }};
  9095b7:	5b7624        	call8	8e6e48 <memset>

	flags = HAL_TXDESC_NOACK;

	ds = bf->bf_desc;
  9095ba:	883c      	l32i.n	a8, a3, 48
	ds->ds_link = 0;
  9095bc:	c090      	movi.n	a9, 0
  9095be:	c0a0      	movi.n	a10, 0
  9095c0:	298400        	s8i	a9, a8, 0
  9095c3:	2a8401        	s8i	a10, a8, 1
  9095c6:	2a8402        	s8i	a10, a8, 2
  9095c9:	2a8403        	s8i	a10, a8, 3
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;
  9095cc:	2a3008        	l8ui	a10, a3, 8
	bf->bf_skb = nbuf;

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, nbuf, ADF_OS_DMA_TO_DEVICE);
	adf_nbuf_dmamap_info(bf->bf_dmamap,&bf->bf_dmamap_info);

	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
  9095cf:	0c7b11        	slli	a11, a7, 4

	flags = HAL_TXDESC_NOACK;

	ds = bf->bf_desc;
	ds->ds_link = 0;
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;
  9095d2:	2a8404        	s8i	a10, a8, 4
  9095d5:	2a3009        	l8ui	a10, a3, 9
	bf->bf_skb = nbuf;

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, nbuf, ADF_OS_DMA_TO_DEVICE);
	adf_nbuf_dmamap_info(bf->bf_dmamap,&bf->bf_dmamap_info);

	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
  9095d8:	a7bb      	add.n	a11, a11, a7

	flags = HAL_TXDESC_NOACK;

	ds = bf->bf_desc;
	ds->ds_link = 0;
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;
  9095da:	2a8405        	s8i	a10, a8, 5
  9095dd:	2a300a        	l8ui	a10, a3, 10
  9095e0:	2a8406        	s8i	a10, a8, 6
  9095e3:	2a300b        	l8ui	a10, a3, 11
  9095e6:	2a8407        	s8i	a10, a8, 7
	bf->bf_skb = nbuf;

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, nbuf, ADF_OS_DMA_TO_DEVICE);
	adf_nbuf_dmamap_info(bf->bf_dmamap,&bf->bf_dmamap_info);

	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
  9095e9:	1a6a16        	l32r	a10, 8e3e44 <bSet_configuration+0x2f0>

	ds = bf->bf_desc;
	ds->ds_link = 0;
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;

	rix = ath_get_minrateidx(sc, avp);
  9095ec:	28162b        	s32i	a8, a1, 172
	bf->bf_skb = nbuf;

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, nbuf, ADF_OS_DMA_TO_DEVICE);
	adf_nbuf_dmamap_info(bf->bf_dmamap,&bf->bf_dmamap_info);

	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
  9095ef:	0abb0a        	addx4	a11, a11, a10
  9095f2:	0b5b08        	add	a11, a5, a11

	ds = bf->bf_desc;
	ds->ds_link = 0;
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;

	rix = ath_get_minrateidx(sc, avp);
  9095f5:	b8bb      	addi.n	a11, a11, 8
  9095f7:	055a02        	or	a10, a5, a5
  9095fa:	29162c        	s32i	a9, a1, 176
  9095fd:	5bffb5        	call8	9094d4 <ath_get_minrateidx>
	rt  = sc->sc_currates;
	rate = rt->info[rix].rateCode;
  909600:	275281        	l32i	a7, a5, 0x204
  909603:	0aaa0a        	addx4	a10, a10, a10
  909606:	07a70a        	addx4	a7, a10, a7
  909609:	227034        	l8ui	a2, a7, 52
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  90960c:	da40      	mov.n	a10, a4
  90960e:	221628        	s32i	a2, a1, 160

	ah->ah_setupTxDesc(ds
  909611:	22122d        	l32i	a2, a1, 180
  909614:	c071      	movi.n	a7, 1
  909616:	222217        	l32i	a2, a2, 92
  909619:	5bf594        	call8	906c6c <__adf_nbuf_len>
  90961c:	29122c        	l32i	a9, a1, 176
  90961f:	28122b        	l32i	a8, a1, 172
  909622:	b4ab      	addi.n	a11, a10, 4
  909624:	2a0aff        	movi	a10, 255
  909627:	9a11      	s32i.n	a10, a1, 4
  909629:	2f1228        	l32i	a15, a1, 160
  90962c:	c0a2      	movi.n	a10, 2
  90962e:	9913      	s32i.n	a9, a1, 12
  909630:	9914      	s32i.n	a9, a1, 16
  909632:	9a12      	s32i.n	a10, a1, 8
  909634:	c1c8      	movi.n	a12, 24
  909636:	da80      	mov.n	a10, a8
  909638:	c0d3      	movi.n	a13, 3
  90963a:	c3ef      	movi.n	a14, 63
  90963c:	9710      	s32i.n	a7, a1, 0
  90963e:	0b2000        	callx8	a2
			    , HAL_TXKEYIX_INVALID
			    , flags
			    , 0
			    , 0);

	ah->ah_fillTxDesc(ds
  909641:	22122d        	l32i	a2, a1, 180
  909644:	044a02        	or	a10, a4, a4
  909647:	2f2218        	l32i	a15, a2, 96
  90964a:	2f162a        	s32i	a15, a1, 168
  90964d:	5bf587        	call8	906c6c <__adf_nbuf_len>
  909650:	28122b        	l32i	a8, a1, 172
			   , asf_roundup(adf_nbuf_len(skb), 4)
  909653:	b3aa      	addi.n	a10, a10, 3
			    , HAL_TXKEYIX_INVALID
			    , flags
			    , 0
			    , 0);

	ah->ah_fillTxDesc(ds
  909655:	2f122a        	l32i	a15, a1, 168
			   , asf_roundup(adf_nbuf_len(skb), 4)
  909658:	0a2b14        	srli	a11, a10, 2
			    , HAL_TXKEYIX_INVALID
			    , flags
			    , 0
			    , 0);

	ah->ah_fillTxDesc(ds
  90965b:	dc70      	mov.n	a12, a7
  90965d:	dd70      	mov.n	a13, a7
  90965f:	de80      	mov.n	a14, a8
  909661:	da80      	mov.n	a10, a8
  909663:	0ebb11        	slli	a11, a11, 2
  909666:	0bf000        	callx8	a15
			   , AH_TRUE
			   , AH_TRUE
			   , ds);

	series[0].Tries = 1;
	series[0].Rate = rate;
  909669:	241228        	l32i	a4, a1, 160
	series[0].ChSel = sc->sc_ic.ic_tx_chainmask;
	series[0].RateFlags = 0;
  90966c:	29122c        	l32i	a9, a1, 176
			   , AH_TRUE
			   , AH_TRUE
			   , ds);

	series[0].Tries = 1;
	series[0].Rate = rate;
  90966f:	9419      	s32i.n	a4, a1, 36
	series[0].ChSel = sc->sc_ic.ic_tx_chainmask;
  909671:	245d16        	addmi	a4, a5, 0x1600
  909674:	244026        	l8ui	a4, a4, 38
	series[0].RateFlags = 0;
	ah->ah_set11nRateScenario(ds, 0, 0, series, 4, 0);
  909677:	28122b        	l32i	a8, a1, 172
			   , AH_TRUE
			   , ds);

	series[0].Tries = 1;
	series[0].Rate = rate;
	series[0].ChSel = sc->sc_ic.ic_tx_chainmask;
  90967a:	941b      	s32i.n	a4, a1, 44
	series[0].RateFlags = 0;
	ah->ah_set11nRateScenario(ds, 0, 0, series, 4, 0);
  90967c:	24122d        	l32i	a4, a1, 180
  90967f:	da80      	mov.n	a10, a8
  909681:	224210        	l32i	a2, a4, 64
  909684:	db90      	mov.n	a11, a9
  909686:	dc90      	mov.n	a12, a9
			   , ds);

	series[0].Tries = 1;
	series[0].Rate = rate;
	series[0].ChSel = sc->sc_ic.ic_tx_chainmask;
	series[0].RateFlags = 0;
  909688:	991c      	s32i.n	a9, a1, 48
	ah->ah_set11nRateScenario(ds, 0, 0, series, 4, 0);
  90968a:	2d1c20        	addi	a13, a1, 32
  90968d:	2e0a04        	movi	a14, 4
  909690:	df90      	mov.n	a15, a9
			   , asf_roundup(adf_nbuf_len(skb), 4)
			   , AH_TRUE
			   , AH_TRUE
			   , ds);

	series[0].Tries = 1;
  909692:	271608        	s32i	a7, a1, 32
	series[0].Rate = rate;
	series[0].ChSel = sc->sc_ic.ic_tx_chainmask;
	series[0].RateFlags = 0;
	ah->ah_set11nRateScenario(ds, 0, 0, series, 4, 0);
  909695:	0b2000        	callx8	a2

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, nbuf, ADF_OS_DMA_TO_DEVICE);
	adf_nbuf_dmamap_info(bf->bf_dmamap,&bf->bf_dmamap_info);

	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
	ah->ah_stopTxDma(ah, sc->sc_bhalq);
  909698:	255d01        	addmi	a5, a5, 0x100
  90969b:	826d      	l32i.n	a2, a6, 52
  90969d:	2b501c        	l8ui	a11, a5, 28
  9096a0:	da60      	mov.n	a10, a6
  9096a2:	0b2000        	callx8	a2
	ah->ah_setTxDP(ah, sc->sc_bhalq, ATH_BUF_GET_DESC_PHY_ADDR(bf));
  9096a5:	2b501c        	l8ui	a11, a5, 28
  9096a8:	826a      	l32i.n	a2, a6, 40
  9096aa:	8c3c      	l32i.n	a12, a3, 48
  9096ac:	da60      	mov.n	a10, a6
  9096ae:	0b2000        	callx8	a2
	ah->ah_startTxDma(ah, sc->sc_bhalq);
  9096b1:	2b501c        	l8ui	a11, a5, 28
  9096b4:	826c      	l32i.n	a2, a6, 48
  9096b6:	066a02        	or	a10, a6, a6
  9096b9:	0b2000        	callx8	a2
  9096bc:	d10f      	retw.n
	...

009096c0 <ath_tgt_attach>:
	/* Start HTC messages exchange */
	HTC_Ready(sc->tgt_htc_handle);
}

a_int32_t ath_tgt_attach(a_uint32_t devid, struct ath_softc_tgt *sc, adf_os_device_t osdev)
{
  9096c0:	6c100e        	entry	a1, 112
 * @return int
 */
static inline int 
__adf_os_pci_config_read8(adf_os_device_t osdev, int offset, a_uint8_t *val)
{
    (*val) = wlan_pci_config_read(offset, 1);
  9096c3:	2b0a01        	movi	a11, 1
  9096c6:	2a0a0c        	movi	a10, 12
  9096c9:	580130        	call8	909b8c <wlan_pci_config_read>
  9096cc:	0a0a47        	extui	a10, a10, 0, 8
	a_uint8_t csz;

	adf_os_pci_config_read8(osdev, ATH_PCI_CACHE_LINE_SIZE, &csz);

	if (csz == 0)
		csz = 16;
  9096cf:	c160      	movi.n	a6, 16
  9096d1:	0a6a38        	moveqz	a10, a6, a10
	sc->sc_cachelsz = csz << 2;
  9096d4:	0ea511        	slli	a5, a10, 2
 */
static inline void 
adf_os_init_bh(adf_os_handle_t  hdl, adf_os_bh_t  *bh,
               adf_os_defer_fn_t  func,void  *arg)
{
    __adf_os_init_bh(hdl, bh, func, arg);
  9096d7:	1b6a25        	l32r	a11, 8e3f6c <bStandardCommand+0x108>
  9096da:	2a3a14        	movi	a10, 0x314

	sc->sc_dev = osdev;
  9096dd:	243646        	s32i	a4, a3, 0x118
	sc->sc_hdl = osdev;
  9096e0:	243645        	s32i	a4, a3, 0x114
  9096e3:	aa3a      	add.n	a10, a3, a10
  9096e5:	dc30      	mov.n	a12, a3

	adf_os_pci_config_read8(osdev, ATH_PCI_CACHE_LINE_SIZE, &csz);

	if (csz == 0)
		csz = 16;
	sc->sc_cachelsz = csz << 2;
  9096e7:	253596        	s16i	a5, a3, 0x12c
  9096ea:	5bf998        	call8	907d4c <__adf_os_init_bh$isra$4>
  9096ed:	1b6a26        	l32r	a11, 8e3f88 <bStandardCommand+0x124>
  9096f0:	2a5a1c        	movi	a10, 0x51c
  9096f3:	0a3a08        	add	a10, a3, a10
  9096f6:	033c02        	or	a12, a3, a3
  9096f9:	5bf994        	call8	907d4c <__adf_os_init_bh$isra$4>
  9096fc:	1b6a27        	l32r	a11, 8e3f98 <bStandardCommand+0x134>
  9096ff:	2a3a24        	movi	a10, 0x324
  909702:	aa3a      	add.n	a10, a3, a10
  909704:	dc30      	mov.n	a12, a3
  909706:	5bf991        	call8	907d4c <__adf_os_init_bh$isra$4>
  909709:	1b6a28        	l32r	a11, 8e3fac <bStandardCommand+0x148>
  90970c:	2a3a44        	movi	a10, 0x344
  90970f:	0a3a08        	add	a10, a3, a10
  909712:	033c02        	or	a12, a3, a3
  909715:	5bf98d        	call8	907d4c <__adf_os_init_bh$isra$4>
	ATH_INIT_TQUEUE(sc->sc_dev, &sc->sc_txtq, owl_tgt_tx_tasklet, sc);
	ATH_INIT_TQUEUE(sc->sc_dev, &sc->sc_bmisstq, ath_bmiss_tasklet, sc);
	ATH_INIT_TQUEUE(sc->sc_dev, &sc->sc_fataltq, ath_fatal_tasklet, sc);

	flags |= AH_USE_EEPROM;
	ah = _ath_hal_attach_tgt(devid, sc, sc->sc_dev, flags, &status);
  909718:	2c3246        	l32i	a12, a3, 0x118
  90971b:	da20      	mov.n	a10, a2
  90971d:	033b02        	or	a11, a3, a3
  909720:	c0d1      	movi.n	a13, 1
  909722:	2e1c34        	addi	a14, a1, 52
  909725:	5bf8e9        	call8	907acc <_ath_hal_attach_tgt>
  909728:	0aa402        	or	a4, a10, a10
	if (ah == NULL) {
  90972b:	64a3d7        	beqz	a10, 909b06 <ath_tgt_attach+0x446>
	HTC_CONFIG htc_conf;
	WMI_SVC_CONFIG wmiConfig;
	WMI_DISPATCH_TABLE *Magpie_Sys_Commands_Tbl;

	/* Init dynamic buf pool */
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);
  90972e:	126913        	l32r	a2, 8e3b7c <bSet_configuration+0x28>
	ah = _ath_hal_attach_tgt(devid, sc, sc->sc_dev, flags, &status);
	if (ah == NULL) {
		error = ENXIO;
		goto bad;
	}
	sc->sc_ah = ah;
  909731:	273d05        	addmi	a7, a3, 0x500
	HTC_CONFIG htc_conf;
	WMI_SVC_CONFIG wmiConfig;
	WMI_DISPATCH_TABLE *Magpie_Sys_Commands_Tbl;

	/* Init dynamic buf pool */
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);
  909734:	252299        	l32i	a5, a2, 0x264
	ah = _ath_hal_attach_tgt(devid, sc, sc->sc_dev, flags, &status);
	if (ah == NULL) {
		error = ENXIO;
		goto bad;
	}
	sc->sc_ah = ah;
  909737:	2a760b        	s32i	a10, a7, 44
	HTC_CONFIG htc_conf;
	WMI_SVC_CONFIG wmiConfig;
	WMI_DISPATCH_TABLE *Magpie_Sys_Commands_Tbl;

	/* Init dynamic buf pool */
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);
  90973a:	2a3245        	l32i	a10, a3, 0x114
  90973d:	0b5000        	callx8	a5

	/* Init target-side HIF */
	sc->tgt_hif_handle = HIF_init(0);
  909740:	252270        	l32i	a5, a2, 0x1c0
	HTC_CONFIG htc_conf;
	WMI_SVC_CONFIG wmiConfig;
	WMI_DISPATCH_TABLE *Magpie_Sys_Commands_Tbl;

	/* Init dynamic buf pool */
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);
  909743:	2a3600        	s32i	a10, a3, 0

	/* Init target-side HIF */
	sc->tgt_hif_handle = HIF_init(0);
  909746:	2a0a00        	movi	a10, 0
  909749:	0b5000        	callx8	a5

	/* Init target-side HTC */
	htc_conf.HIFHandle = sc->tgt_hif_handle;
	htc_conf.CreditSize = 320;
  90974c:	251a40        	movi	a5, 0x140
  90974f:	9514      	s32i.n	a5, a1, 16
	htc_conf.CreditNumber = ATH_TXBUF;
  909751:	c25d      	movi.n	a5, 45
  909753:	9515      	s32i.n	a5, a1, 20
	htc_conf.OSHandle = sc->sc_hdl;
  909755:	253245        	l32i	a5, a3, 0x114

	/* Init dynamic buf pool */
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);

	/* Init target-side HIF */
	sc->tgt_hif_handle = HIF_init(0);
  909758:	9a31      	s32i.n	a10, a3, 4

	/* Init target-side HTC */
	htc_conf.HIFHandle = sc->tgt_hif_handle;
	htc_conf.CreditSize = 320;
	htc_conf.CreditNumber = ATH_TXBUF;
	htc_conf.OSHandle = sc->sc_hdl;
  90975a:	9516      	s32i.n	a5, a1, 24
	htc_conf.PoolHandle = sc->pool_handle;
  90975c:	8530      	l32i.n	a5, a3, 0

	/* Init target-side HIF */
	sc->tgt_hif_handle = HIF_init(0);

	/* Init target-side HTC */
	htc_conf.HIFHandle = sc->tgt_hif_handle;
  90975e:	9a17      	s32i.n	a10, a1, 28
	htc_conf.CreditSize = 320;
	htc_conf.CreditNumber = ATH_TXBUF;
	htc_conf.OSHandle = sc->sc_hdl;
	htc_conf.PoolHandle = sc->pool_handle;
  909760:	9518      	s32i.n	a5, a1, 32
	sc->tgt_htc_handle = HTC_init(htc_setup_comp, &htc_conf);
  909762:	1a6a29        	l32r	a10, 8e4008 <bStandardCommand+0x1a4>
  909765:	25227e        	l32i	a5, a2, 0x1f8
  909768:	a61b      	add.n	a11, a1, a6
  90976a:	0b5000        	callx8	a5
#if defined(PROJECT_MAGPIE)
	init_htc_handle = sc->tgt_htc_handle;
  90976d:	156967        	l32r	a5, 8e3d0c <bSet_configuration+0x1b8>
#endif

	tgt_reg_service(sc, &sc->htc_beacon_service, WMI_BEACON_SVC, tgt_HTCRecv_beaconhandler);
  909770:	1d6a2a        	l32r	a13, 8e4018 <bStandardCommand+0x1b4>
	htc_conf.CreditNumber = ATH_TXBUF;
	htc_conf.OSHandle = sc->sc_hdl;
	htc_conf.PoolHandle = sc->pool_handle;
	sc->tgt_htc_handle = HTC_init(htc_setup_comp, &htc_conf);
#if defined(PROJECT_MAGPIE)
	init_htc_handle = sc->tgt_htc_handle;
  909773:	9a50      	s32i.n	a10, a5, 0
#endif

	tgt_reg_service(sc, &sc->htc_beacon_service, WMI_BEACON_SVC, tgt_HTCRecv_beaconhandler);
  909775:	a63b      	add.n	a11, a3, a6
	htc_conf.HIFHandle = sc->tgt_hif_handle;
	htc_conf.CreditSize = 320;
	htc_conf.CreditNumber = ATH_TXBUF;
	htc_conf.OSHandle = sc->sc_hdl;
	htc_conf.PoolHandle = sc->pool_handle;
	sc->tgt_htc_handle = HTC_init(htc_setup_comp, &htc_conf);
  909777:	9a32      	s32i.n	a10, a3, 8
#if defined(PROJECT_MAGPIE)
	init_htc_handle = sc->tgt_htc_handle;
#endif

	tgt_reg_service(sc, &sc->htc_beacon_service, WMI_BEACON_SVC, tgt_HTCRecv_beaconhandler);
  909779:	2c1a01        	movi	a12, 0x101
  90977c:	da30      	mov.n	a10, a3
  90977e:	5bf90c        	call8	907bb0 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_cab_service, WMI_CAB_SVC, tgt_HTCRecv_cabhandler);
  909781:	1d6a2b        	l32r	a13, 8e4030 <bStandardCommand+0x1cc>
  909784:	033a02        	or	a10, a3, a3
  909787:	2b3c2c        	addi	a11, a3, 44
  90978a:	2c1a02        	movi	a12, 0x102
  90978d:	5bf908        	call8	907bb0 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_uapsd_service, WMI_UAPSD_SVC, tgt_HTCRecv_uapsdhandler);
  909790:	1d6a2c        	l32r	a13, 8e4040 <bStandardCommand+0x1dc>
  909793:	da30      	mov.n	a10, a3
  909795:	2b3c48        	addi	a11, a3, 72
  909798:	2c1a03        	movi	a12, 0x103
  90979b:	5bf905        	call8	907bb0 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_mgmt_service, WMI_MGMT_SVC, tgt_HTCRecv_mgmthandler);
  90979e:	1d6a2d        	l32r	a13, 8e4054 <bStandardCommand+0x1f0>
  9097a1:	033a02        	or	a10, a3, a3
  9097a4:	2b3c64        	addi	a11, a3, 100
  9097a7:	2c1a04        	movi	a12, 0x104
  9097aa:	5bf901        	call8	907bb0 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_data_BE_service, WMI_DATA_BE_SVC, tgt_HTCRecvMessageHandler);
  9097ad:	156a2e        	l32r	a5, 8e4068 <bStandardCommand+0x204>
  9097b0:	2b0ab8        	movi	a11, 184
  9097b3:	dd50      	mov.n	a13, a5
  9097b5:	da30      	mov.n	a10, a3
  9097b7:	0b3b08        	add	a11, a3, a11
  9097ba:	2c1a07        	movi	a12, 0x107
  9097bd:	5bf8fc        	call8	907bb0 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_data_BK_service, WMI_DATA_BK_SVC, tgt_HTCRecvMessageHandler);
  9097c0:	2b0ad4        	movi	a11, 212
  9097c3:	dd50      	mov.n	a13, a5
  9097c5:	da30      	mov.n	a10, a3
  9097c7:	0b3b08        	add	a11, a3, a11
  9097ca:	2c1a08        	movi	a12, 0x108
  9097cd:	5bf8f8        	call8	907bb0 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_data_VI_service, WMI_DATA_VI_SVC, tgt_HTCRecvMessageHandler);
  9097d0:	2b0a9c        	movi	a11, 156
  9097d3:	dd50      	mov.n	a13, a5
  9097d5:	da30      	mov.n	a10, a3
  9097d7:	0b3b08        	add	a11, a3, a11
  9097da:	2c1a06        	movi	a12, 0x106
  9097dd:	5bf8f4        	call8	907bb0 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_data_VO_service, WMI_DATA_VO_SVC, tgt_HTCRecvMessageHandler);
  9097e0:	2b0a80        	movi	a11, 128
  9097e3:	dd50      	mov.n	a13, a5
  9097e5:	ab3b      	add.n	a11, a3, a11
  9097e7:	2c1a05        	movi	a12, 0x105
  9097ea:	033a02        	or	a10, a3, a3
  9097ed:	5bf8f0        	call8	907bb0 <tgt_reg_service>
 * @return Buffer pointer or NULL if there's not enough memory.
 */
static inline void *
adf_os_mem_alloc(adf_os_size_t size)
{
    return __adf_os_mem_alloc(size);
  9097f0:	da60      	mov.n	a10, a6
  9097f2:	5bf8d5        	call8	907b48 <__adf_os_mem_alloc>
}
/* zero a memory buffer */
static inline void
__adf_os_mem_zero(void *buf, adf_os_size_t size)
{
    A_MEMZERO(buf,size);
  9097f5:	8824      	l32i.n	a8, a2, 16
  9097f7:	dc60      	mov.n	a12, a6
  9097f9:	c0b0      	movi.n	a11, 0
  9097fb:	d5a0      	mov.n	a5, a10
  9097fd:	0b8000        	callx8	a8

	/* Init target-side WMI */
	Magpie_Sys_Commands_Tbl = (WMI_DISPATCH_TABLE *)adf_os_mem_alloc(sizeof(WMI_DISPATCH_TABLE));
	adf_os_mem_zero(Magpie_Sys_Commands_Tbl, sizeof(WMI_DISPATCH_TABLE));
	Magpie_Sys_Commands_Tbl->NumberOfEntries = WMI_DISPATCH_ENTRY_COUNT(Magpie_Sys_DispatchEntries);
  909800:	c280      	movi.n	a8, 32
  909802:	9852      	s32i.n	a8, a5, 8
	Magpie_Sys_Commands_Tbl->pTable = Magpie_Sys_DispatchEntries;
  909804:	186a2f        	l32r	a8, 8e40c0 <bStandardCommand+0x25c>
  909807:	dc60      	mov.n	a12, a6
  909809:	9853      	s32i.n	a8, a5, 12
  90980b:	8824      	l32i.n	a8, a2, 16
  90980d:	c0b0      	movi.n	a11, 0
  90980f:	2a1c24        	addi	a10, a1, 36
  909812:	0b8000        	callx8	a8

	adf_os_mem_zero(&wmiConfig, sizeof(WMI_SVC_CONFIG));
	wmiConfig.HtcHandle = sc->tgt_htc_handle;
  909815:	8632      	l32i.n	a6, a3, 8
	wmiConfig.PoolHandle = sc->pool_handle;
	wmiConfig.MaxCmdReplyEvts = ATH_WMI_MAX_CMD_REPLY;
	wmiConfig.MaxEventEvts = ATH_WMI_MAX_EVENTS;

	sc->tgt_wmi_handle = WMI_Init(&wmiConfig);
  909817:	2a1c24        	addi	a10, a1, 36
	adf_os_mem_zero(Magpie_Sys_Commands_Tbl, sizeof(WMI_DISPATCH_TABLE));
	Magpie_Sys_Commands_Tbl->NumberOfEntries = WMI_DISPATCH_ENTRY_COUNT(Magpie_Sys_DispatchEntries);
	Magpie_Sys_Commands_Tbl->pTable = Magpie_Sys_DispatchEntries;

	adf_os_mem_zero(&wmiConfig, sizeof(WMI_SVC_CONFIG));
	wmiConfig.HtcHandle = sc->tgt_htc_handle;
  90981a:	9619      	s32i.n	a6, a1, 36
	wmiConfig.PoolHandle = sc->pool_handle;
  90981c:	8630      	l32i.n	a6, a3, 0
  90981e:	961a      	s32i.n	a6, a1, 40
	wmiConfig.MaxCmdReplyEvts = ATH_WMI_MAX_CMD_REPLY;
  909820:	c062      	movi.n	a6, 2
  909822:	961b      	s32i.n	a6, a1, 44
	wmiConfig.MaxEventEvts = ATH_WMI_MAX_EVENTS;
  909824:	c068      	movi.n	a6, 8
  909826:	961c      	s32i.n	a6, a1, 48

	sc->tgt_wmi_handle = WMI_Init(&wmiConfig);
  909828:	26228b        	l32i	a6, a2, 0x22c
  90982b:	0b6000        	callx8	a6
  90982e:	9a33      	s32i.n	a10, a3, 12
	Magpie_Sys_Commands_Tbl->pContext = sc;
	WMI_RegisterDispatchTable(sc->tgt_wmi_handle, Magpie_Sys_Commands_Tbl);
  909830:	26228c        	l32i	a6, a2, 0x230
  909833:	db50      	mov.n	a11, a5
	wmiConfig.PoolHandle = sc->pool_handle;
	wmiConfig.MaxCmdReplyEvts = ATH_WMI_MAX_CMD_REPLY;
	wmiConfig.MaxEventEvts = ATH_WMI_MAX_EVENTS;

	sc->tgt_wmi_handle = WMI_Init(&wmiConfig);
	Magpie_Sys_Commands_Tbl->pContext = sc;
  909835:	9351      	s32i.n	a3, a5, 4
	WMI_RegisterDispatchTable(sc->tgt_wmi_handle, Magpie_Sys_Commands_Tbl);
  909837:	0b6000        	callx8	a6

	HTC_NotifyTargetInserted(sc->tgt_htc_handle);

	/* Start HTC messages exchange */
	HTC_Ready(sc->tgt_htc_handle);
  90983a:	8a32      	l32i.n	a10, a3, 8
  90983c:	222281        	l32i	a2, a2, 0x204
	}
	sc->sc_ah = ah;

	tgt_hif_htc_wmi_init(sc);

	sc->sc_bhalq = HAL_NUM_TX_QUEUES - 1;
  90983f:	c059      	movi.n	a5, 9
	WMI_RegisterDispatchTable(sc->tgt_wmi_handle, Magpie_Sys_Commands_Tbl);

	HTC_NotifyTargetInserted(sc->tgt_htc_handle);

	/* Start HTC messages exchange */
	HTC_Ready(sc->tgt_htc_handle);
  909841:	0b2000        	callx8	a2
	return tsf64;
}

static a_int32_t ath_rate_setup(struct ath_softc_tgt *sc, a_uint32_t mode)
{
	struct ath_hal *ah = sc->sc_ah;
  909844:	8a7b      	l32i.n	a10, a7, 44
	}
	sc->sc_ah = ah;

	tgt_hif_htc_wmi_init(sc);

	sc->sc_bhalq = HAL_NUM_TX_QUEUES - 1;
  909846:	223d01        	addmi	a2, a3, 0x100
  909849:	25241c        	s8i	a5, a2, 28
	struct ath_hal *ah = sc->sc_ah;
	const HAL_RATE_TABLE *rt;

	switch (mode) {
	case IEEE80211_MODE_11NA:
		sc->sc_rates[mode] = ah->ah_getRateTable(ah, HAL_MODE_11NA);
  90984c:	82a5      	l32i.n	a2, a10, 20
  90984e:	1b6a30        	l32r	a11, 8e4110 <bStandardCommand+0x2ac>
  909851:	0b2000        	callx8	a2
  909854:	2a367f        	s32i	a10, a3, 0x1fc
	return tsf64;
}

static a_int32_t ath_rate_setup(struct ath_softc_tgt *sc, a_uint32_t mode)
{
	struct ath_hal *ah = sc->sc_ah;
  909857:	8a7b      	l32i.n	a10, a7, 44
	switch (mode) {
	case IEEE80211_MODE_11NA:
		sc->sc_rates[mode] = ah->ah_getRateTable(ah, HAL_MODE_11NA);
		break;
	case IEEE80211_MODE_11NG:
		sc->sc_rates[mode] = ah->ah_getRateTable(ah, HAL_MODE_11NG);
  909859:	1b6a31        	l32r	a11, 8e4120 <bStandardCommand+0x2bc>
  90985c:	82a5      	l32i.n	a2, a10, 20
  90985e:	0b2000        	callx8	a2
  909861:	2a3680        	s32i	a10, a3, 0x200
	sc->sc_bhalq = HAL_NUM_TX_QUEUES - 1;

	ath_rate_setup(sc, IEEE80211_MODE_11NA);
	ath_rate_setup(sc, IEEE80211_MODE_11NG);

	sc->sc_rc = ath_rate_attach(sc);
  909864:	da30      	mov.n	a10, a3
  909866:	580d4e        	call8	90cda0 <ath_rate_attach>
  909869:	2a3648        	s32i	a10, a3, 0x120
	if (sc->sc_rc == NULL) {
  90986c:	64a296        	beqz	a10, 909b06 <ath_tgt_attach+0x446>

	/* Start HTC messages exchange */
	HTC_Ready(sc->tgt_htc_handle);
}

a_int32_t ath_tgt_attach(a_uint32_t devid, struct ath_softc_tgt *sc, adf_os_device_t osdev)
  90986f:	156a1c        	l32r	a5, 8e40e0 <bStandardCommand+0x27c>
  909872:	d230      	mov.n	a2, a3
  909874:	a535      	add.n	a5, a3, a5
  909876:	277a40        	movi	a7, 0x740
		error = EIO;
		goto bad2;
	}

	for (i=0; i < TARGET_NODE_MAX; i++) {
		sc->sc_sta[i].an_rcnode = adf_os_mem_alloc(sc->sc_rc->arc_space);
  909879:	263248        	l32i	a6, a3, 0x120
  90987c:	2a6200        	l32i	a10, a6, 0

	/* Start HTC messages exchange */
	HTC_Ready(sc->tgt_htc_handle);
}

a_int32_t ath_tgt_attach(a_uint32_t devid, struct ath_softc_tgt *sc, adf_os_device_t osdev)
  90987f:	a726      	add.n	a6, a2, a7
  909881:	5bf8b1        	call8	907b48 <__adf_os_mem_alloc>
		error = EIO;
		goto bad2;
	}

	for (i=0; i < TARGET_NODE_MAX; i++) {
		sc->sc_sta[i].an_rcnode = adf_os_mem_alloc(sc->sc_rc->arc_space);
  909884:	9a60      	s32i.n	a10, a6, 0
  909886:	262a0c        	movi	a6, 0x20c
  909889:	a622      	add.n	a2, a2, a6
	if (sc->sc_rc == NULL) {
		error = EIO;
		goto bad2;
	}

	for (i=0; i < TARGET_NODE_MAX; i++) {
  90988b:	7529ea        	bne	a2, a5, 909879 <ath_tgt_attach+0x1b9>
	((_dd)->dd_desc_paddr + ((caddr_t)(_ds) - (caddr_t)(_dd)->dd_desc))

	a_int32_t error;
	struct ath_tx_buf *bf;

	if(ath_numrxbufs == -1)
  90988e:	126a0f        	l32r	a2, 8e40cc <bStandardCommand+0x268>
  909891:	8520      	l32i.n	a5, a2, 0
  909893:	695005        	bnei	a5, -1, 90989c <ath_tgt_attach+0x1dc>
		ath_numrxbufs = ATH_RXBUF;
  909896:	250a14        	movi	a5, 20
  909899:	252600        	s32i	a5, a2, 0

	if (ath_numrxdescs == -1)
  90989c:	126a32        	l32r	a2, 8e4164 <bStandardCommand+0x300>
  90989f:	8520      	l32i.n	a5, a2, 0
  9098a1:	695003        	bnei	a5, -1, 9098a8 <ath_tgt_attach+0x1e8>
		ath_numrxdescs = ATH_RXDESC;
  9098a4:	c154      	movi.n	a5, 20
  9098a6:	9520      	s32i.n	a5, a2, 0

	error = ath_descdma_setup(sc, &sc->sc_rxdma, (ath_bufhead *)&sc->sc_rxbuf,
  9098a8:	176a32        	l32r	a7, 8e4170 <bStandardCommand+0x30c>
  9098ab:	c524      	movi.n	a2, 84
  9098ad:	263a74        	movi	a6, 0x374
  9098b0:	253a54        	movi	a5, 0x354
  9098b3:	9210      	s32i.n	a2, a1, 0
  9098b5:	a636      	add.n	a6, a3, a6
  9098b7:	a535      	add.n	a5, a3, a5
  9098b9:	1d6a33        	l32r	a13, 8e4188 <bStandardCommand+0x324>
  9098bc:	8e70      	l32i.n	a14, a7, 0
  9098be:	da30      	mov.n	a10, a3
  9098c0:	066b02        	or	a11, a6, a6
  9098c3:	055c02        	or	a12, a5, a5
  9098c6:	2f0a68        	movi	a15, 104
  9098c9:	5bfa2e        	call8	908184 <ath_descdma_setup$constprop$22>
				  "rx", ath_numrxdescs, 1,
				  sizeof(struct ath_rx_buf),
				  sizeof(struct ath_rx_desc));
	if (error != 0)
  9098cc:	65a236        	bnez	a10, 909b06 <ath_tgt_attach+0x446>
	a_uint32_t i;
	struct ath_descdma *dd = &sc->sc_rxdma;
	struct ath_rx_desc *ds = (struct ath_rx_desc *)dd->dd_desc;
	struct ath_rx_desc *ds_prev = NULL;

	asf_tailq_init(&sc->sc_rxdesc);
  9098cf:	283a64        	movi	a8, 0x364
  9098d2:	a838      	add.n	a8, a3, a8
  9098d4:	2836da        	s32i	a8, a3, 0x368
	asf_tailq_init(&sc->sc_rxdesc_idle);
  9098d7:	283a5c        	movi	a8, 0x35c
  9098da:	a838      	add.n	a8, a3, a8
  9098dc:	2836d8        	s32i	a8, a3, 0x360
	if (error != 0)
		return error;

	a_uint32_t i;
	struct ath_descdma *dd = &sc->sc_rxdma;
	struct ath_rx_desc *ds = (struct ath_rx_desc *)dd->dd_desc;
  9098df:	2232de        	l32i	a2, a3, 0x378
	struct ath_rx_desc *ds_prev = NULL;

	asf_tailq_init(&sc->sc_rxdesc);
  9098e2:	2a36d9        	s32i	a10, a3, 0x364
	asf_tailq_init(&sc->sc_rxdesc_idle);
  9098e5:	2a36d7        	s32i	a10, a3, 0x35c
		return error;

	a_uint32_t i;
	struct ath_descdma *dd = &sc->sc_rxdma;
	struct ath_rx_desc *ds = (struct ath_rx_desc *)dd->dd_desc;
	struct ath_rx_desc *ds_prev = NULL;
  9098e8:	d8a0      	mov.n	a8, a10

	asf_tailq_init(&sc->sc_rxdesc);
	asf_tailq_init(&sc->sc_rxdesc_idle);

	for (i = 0; i < ath_numrxdescs; i++, ds++) {
  9098ea:	dca0      	mov.n	a12, a10
  9098ec:	6000d9        	j	9099c9 <ath_tgt_attach+0x309>
  9098ef:	00002b        	mulsh	a0, a0, a0

		if (ds->ds_nbuf != ADF_NBUF_NULL) {
  9098f2:	20342a        	s8i	a0, a3, 42
  9098f5:	203529        	s16i	a0, a3, 82
  9098f8:	203608        	s32i	a0, a3, 32
  9098fb:	bb10      	addi.n	a0, a1, 11
  9098fd:	00aa11        	slli	a10, a10, 16
  909900:	0baa02        	or	a10, a10, a11
  909903:	089911        	slli	a9, a9, 8
  909906:	0a9902        	or	a9, a9, a10
  909909:	2a2037        	l8ui	a10, a2, 55
  90990c:	09a902        	or	a9, a10, a9
  90990f:	64900e        	beqz	a9, 909921 <ath_tgt_attach+0x261>
			ds->ds_nbuf = ADF_NBUF_NULL;
  909912:	290a00        	movi	a9, 0
  909915:	292434        	s8i	a9, a2, 52
  909918:	292435        	s8i	a9, a2, 53
  90991b:	292436        	s8i	a9, a2, 54
  90991e:	292437        	s8i	a9, a2, 55
 */
static inline a_status_t
adf_nbuf_dmamap_create(adf_os_device_t osdev,
                       adf_os_dma_map_t *dmap)
{
    return (__adf_nbuf_dmamap_create(osdev, dmap));
  909921:	2a3246        	l32i	a10, a3, 0x118
  909924:	2b2c38        	addi	a11, a2, 56
  909927:	281611        	s32i	a8, a1, 68
  90992a:	2c1610        	s32i	a12, a1, 64
  90992d:	5bf447        	call8	906a4c <__adf_nbuf_dmamap_create>
		}

		if (adf_nbuf_dmamap_create(sc->sc_dev, &ds->ds_dmap) != A_STATUS_OK) {
  909930:	281211        	l32i	a8, a1, 68
  909933:	2c1210        	l32i	a12, a1, 64
  909936:	64a01c        	beqz	a10, 909956 <ath_tgt_attach+0x296>
			adf_os_assert(0);
  909939:	196913        	l32r	a9, 8e3d88 <bSet_configuration+0x234>
  90993c:	1a69f4        	l32r	a10, 8e410c <bStandardCommand+0x2a8>
  90993f:	299212        	l32i	a9, a9, 72
  909942:	1b6a34        	l32r	a11, 8e4214 <bStandardCommand+0x3b0>
  909945:	0b9000        	callx8	a9
  909948:	196978        	l32r	a9, 8e3f28 <bStandardCommand+0xc4>
  90994b:	2c1210        	l32i	a12, a1, 64
  90994e:	0c0200        	memw
  909951:	8990      	l32i.n	a9, a9, 0
  909953:	281211        	l32i	a8, a1, 68
		}

		ds->ds_daddr = DS2PHYS(&sc->sc_rxdma, ds);
  909956:	2932de        	l32i	a9, a3, 0x378
  909959:	2a32e0        	l32i	a10, a3, 0x380
  90995c:	09290c        	sub	a9, a2, a9
  90995f:	aa99      	add.n	a9, a9, a10
  909961:	098d57        	extui	a13, a9, 24, 8
  909964:	090b57        	extui	a11, a9, 16, 8
  909967:	098a47        	extui	a10, a9, 8, 8
  90996a:	090947        	extui	a9, a9, 0, 8
  90996d:	2d2448        	s8i	a13, a2, 72
  909970:	2b2449        	s8i	a11, a2, 73
  909973:	2a244a        	s8i	a10, a2, 74
  909976:	29244b        	s8i	a9, a2, 75

		if (ds_prev) {
  909979:	64800b        	beqz	a8, 909988 <ath_tgt_attach+0x2c8>
			ds_prev->ds_link = ds->ds_daddr;
  90997c:	2d8400        	s8i	a13, a8, 0
  90997f:	2b8401        	s8i	a11, a8, 1
  909982:	2a8402        	s8i	a10, a8, 2
  909985:	298403        	s8i	a9, a8, 3
		}

		ds->ds_link = 0;
  909988:	c080      	movi.n	a8, 0
  90998a:	282400        	s8i	a8, a2, 0
  90998d:	282401        	s8i	a8, a2, 1
  909990:	282402        	s8i	a8, a2, 2
  909993:	282403        	s8i	a8, a2, 3
		ds_prev = ds;

		asf_tailq_insert_tail(&sc->sc_rxdesc, ds, ds_list);
  909996:	28244c        	s8i	a8, a2, 76
  909999:	28244d        	s8i	a8, a2, 77
  90999c:	28244e        	s8i	a8, a2, 78
  90999f:	28244f        	s8i	a8, a2, 79
  9099a2:	2832da        	l32i	a8, a3, 0x368
	struct ath_rx_desc *ds_prev = NULL;

	asf_tailq_init(&sc->sc_rxdesc);
	asf_tailq_init(&sc->sc_rxdesc_idle);

	for (i = 0; i < ath_numrxdescs; i++, ds++) {
  9099a5:	b1cc      	addi.n	a12, a12, 1
		}

		ds->ds_link = 0;
		ds_prev = ds;

		asf_tailq_insert_tail(&sc->sc_rxdesc, ds, ds_list);
  9099a7:	088957        	extui	a9, a8, 24, 8
  9099aa:	292450        	s8i	a9, a2, 80
  9099ad:	080957        	extui	a9, a8, 16, 8
  9099b0:	292451        	s8i	a9, a2, 81
  9099b3:	088947        	extui	a9, a8, 8, 8
  9099b6:	282453        	s8i	a8, a2, 83
  9099b9:	292452        	s8i	a9, a2, 82
  9099bc:	9280      	s32i.n	a2, a8, 0
  9099be:	282c4c        	addi	a8, a2, 76
  9099c1:	2836da        	s32i	a8, a3, 0x368
	struct ath_rx_desc *ds_prev = NULL;

	asf_tailq_init(&sc->sc_rxdesc);
	asf_tailq_init(&sc->sc_rxdesc_idle);

	for (i = 0; i < ath_numrxdescs; i++, ds++) {
  9099c4:	d820      	mov.n	a8, a2
  9099c6:	222c54        	addi	a2, a2, 84
  9099c9:	8970      	l32i.n	a9, a7, 0
  9099cb:	79cb02        	bgeu	a12, a9, 9099d1 <ath_tgt_attach+0x311>
  9099ce:	63ff1f        	j	9098f1 <ath_tgt_attach+0x231>
		ds_prev = ds;

		asf_tailq_insert_tail(&sc->sc_rxdesc, ds, ds_list);
	}

	error = ath_descdma_setup(sc, &sc->sc_txdma, (ath_bufhead *)&sc->sc_txbuf,
  9099d1:	273a8c        	movi	a7, 0x38c
  9099d4:	223ac0        	movi	a2, 0x3c0
  9099d7:	290a88        	movi	a9, 136
  9099da:	a737      	add.n	a7, a3, a7
  9099dc:	a232      	add.n	a2, a3, a2
  9099de:	1d6a35        	l32r	a13, 8e42b4 <bStandardCommand+0x450>
  9099e1:	9910      	s32i.n	a9, a1, 0
  9099e3:	da30      	mov.n	a10, a3
  9099e5:	db70      	mov.n	a11, a7
  9099e7:	dc20      	mov.n	a12, a2
  9099e9:	c2ee      	movi.n	a14, 46
  9099eb:	2f0a94        	movi	a15, 148
  9099ee:	291610        	s32i	a9, a1, 64
  9099f1:	5bf9e4        	call8	908184 <ath_descdma_setup$constprop$22>
  9099f4:	d8a0      	mov.n	a8, a10
				  "tx", ATH_TXBUF + 1, ATH_TXDESC,
				  sizeof(struct ath_tx_buf),
				  sizeof(struct ath_tx_desc));
	if (error != 0) {
  9099f6:	291210        	l32i	a9, a1, 64
  9099f9:	c8a4      	beqz.n	a10, 909a01 <ath_tgt_attach+0x341>
  9099fb:	60002e        	j	909a2d <ath_tgt_attach+0x36d>
  9099fe:	000000        	ill
		ath_descdma_cleanup(sc, &sc->sc_rxdma, (ath_bufhead *)&sc->sc_rxbuf,
				    ADF_OS_DMA_FROM_DEVICE);
		return error;
	}

	error = ath_descdma_setup(sc, &sc->sc_bdma, (ath_bufhead *)&sc->sc_bbuf,
  909a01:	1c6a36        	l32r	a12, 8e42dc <bStandardCommand+0x478>
  909a04:	2b3aa4        	movi	a11, 0x3a4
  909a07:	1d6a37        	l32r	a13, 8e42e4 <bStandardCommand+0x480>
  909a0a:	9910      	s32i.n	a9, a1, 0
  909a0c:	da30      	mov.n	a10, a3
  909a0e:	ab3b      	add.n	a11, a3, a11
  909a10:	ac3c      	add.n	a12, a3, a12
  909a12:	c0e1      	movi.n	a14, 1
  909a14:	2f0a94        	movi	a15, 148
  909a17:	281611        	s32i	a8, a1, 68
  909a1a:	5bf9da        	call8	908184 <ath_descdma_setup$constprop$22>
				  "beacon", ATH_BCBUF, 1,
				  sizeof(struct ath_tx_buf),
				  sizeof(struct ath_tx_desc));
	if (error != 0) {
  909a1d:	281211        	l32i	a8, a1, 68
  909a20:	c9a8      	beqz.n	a10, 909a3c <ath_tgt_attach+0x37c>
		ath_descdma_cleanup(sc, &sc->sc_txdma, (ath_bufhead *)&sc->sc_txbuf,
  909a22:	da30      	mov.n	a10, a3
  909a24:	db70      	mov.n	a11, a7
  909a26:	dc20      	mov.n	a12, a2
  909a28:	dd80      	mov.n	a13, a8
  909a2a:	5bf8a2        	call8	907cb4 <ath_descdma_cleanup>
				    ADF_OS_DMA_TO_DEVICE);
		ath_descdma_cleanup(sc, &sc->sc_rxdma, (ath_bufhead *)&sc->sc_rxbuf,
  909a2d:	da30      	mov.n	a10, a3
  909a2f:	db60      	mov.n	a11, a6
  909a31:	dc50      	mov.n	a12, a5
  909a33:	c0d1      	movi.n	a13, 1
  909a35:	5bf89f        	call8	907cb4 <ath_descdma_cleanup>
  909a38:	6000ca        	j	909b06 <ath_tgt_attach+0x446>
  909a3b:	002232        	sext	a2, a2, 7
				    ADF_OS_DMA_FROM_DEVICE);
		return error;
	}

	bf = asf_tailq_first(&sc->sc_txbuf);
  909a3e:	f0          	.byte 0xf0
	bf->bf_isaggr = bf->bf_isretried = bf->bf_retries = 0;
  909a3f:	c65f      	movi.n	a5, -17
  909a41:	262087        	l8ui	a6, a2, 135
  909a44:	2a2486        	s8i	a10, a2, 134
  909a47:	056501        	and	a5, a6, a5
  909a4a:	26fadf        	movi	a6, -33
  909a4d:	065501        	and	a5, a5, a6
  909a50:	252487        	s8i	a5, a2, 135
	asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  909a53:	8529      	l32i.n	a5, a2, 36
  909a55:	862a      	l32i.n	a6, a2, 40
  909a57:	c856      	beqz.n	a5, 909a61 <ath_tgt_attach+0x3a1>
  909a59:	965a      	s32i.n	a6, a5, 40
  909a5b:	600005        	j	909a64 <ath_tgt_attach+0x3a4>
  909a5e:	000000        	ill
  909a61:	2636f1        	s32i	a6, a3, 0x3c4
  909a64:	862a      	l32i.n	a6, a2, 40
	error = ath_desc_alloc(sc);
	if (error != 0) {
		goto bad;
	}

	BUF_Pool_create_pool(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ath_numrxdescs, 1664);
  909a66:	c0b3      	movi.n	a11, 3
		return error;
	}

	bf = asf_tailq_first(&sc->sc_txbuf);
	bf->bf_isaggr = bf->bf_isretried = bf->bf_retries = 0;
	asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  909a68:	9560      	s32i.n	a5, a6, 0

	sc->sc_txbuf_held = bf;
  909a6a:	2236dc        	s32i	a2, a3, 0x370
	error = ath_desc_alloc(sc);
	if (error != 0) {
		goto bad;
	}

	BUF_Pool_create_pool(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ath_numrxdescs, 1664);
  909a6d:	156a32        	l32r	a5, 8e4338 <bStandardCommand+0x4d4>
  909a70:	126913        	l32r	a2, 8e3ebc <bStandardCommand+0x58>
  909a73:	2a3200        	l32i	a10, a3, 0
  909a76:	22229b        	l32i	a2, a2, 0x26c
  909a79:	2c5200        	l32i	a12, a5, 0
  909a7c:	2d6a80        	movi	a13, 0x680
  909a7f:	0b2000        	callx8	a2
static void ath_tgt_txq_setup(struct ath_softc_tgt *sc)
{
	a_int32_t qnum;
	struct ath_txq *txq;

	sc->sc_txqsetup=0;
  909a82:	c050      	movi.n	a5, 0
  909a84:	223d03        	addmi	a2, a3, 0x300
  909a87:	2524c8        	s8i	a5, a2, 200

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
  909a8a:	c050      	movi.n	a5, 0
		txq= &sc->sc_txq[qnum];
		txq->axq_qnum = qnum;
		txq->axq_link = NULL;
  909a8c:	d750      	mov.n	a7, a5
		asf_tailq_init(&txq->axq_q);
		txq->axq_depth = 0;
		txq->axq_linkbuf = NULL;
		asf_tailq_init(&txq->axq_tidq);
		sc->sc_txqsetup |= 1<<qnum;
  909a8e:	2a0a01        	movi	a10, 1
	struct ath_txq *txq;

	sc->sc_txqsetup=0;

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
		txq= &sc->sc_txq[qnum];
  909a91:	285c1e        	addi	a8, a5, 30
  909a94:	0b8811        	slli	a8, a8, 5
  909a97:	a838      	add.n	a8, a3, a8
		txq->axq_qnum = qnum;
		txq->axq_link = NULL;
		asf_tailq_init(&txq->axq_q);
  909a99:	298c14        	addi	a9, a8, 20

	sc->sc_txqsetup=0;

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
		txq= &sc->sc_txq[qnum];
		txq->axq_qnum = qnum;
  909a9c:	9583      	s32i.n	a5, a8, 12
		txq->axq_link = NULL;
		asf_tailq_init(&txq->axq_q);
  909a9e:	9986      	s32i.n	a9, a8, 24
	struct ath_txq *txq;

	sc->sc_txqsetup=0;

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
		txq= &sc->sc_txq[qnum];
  909aa0:	bc86      	addi.n	a6, a8, 12
		txq->axq_qnum = qnum;
		txq->axq_link = NULL;
  909aa2:	9784      	s32i.n	a7, a8, 16
		asf_tailq_init(&txq->axq_q);
  909aa4:	9785      	s32i.n	a7, a8, 20
		txq->axq_depth = 0;
  909aa6:	9787      	s32i.n	a7, a8, 28
		txq->axq_linkbuf = NULL;
  909aa8:	9788      	s32i.n	a7, a8, 32
		asf_tailq_init(&txq->axq_tidq);
  909aaa:	9789      	s32i.n	a7, a8, 36
  909aac:	288c24        	addi	a8, a8, 36
  909aaf:	9867      	s32i.n	a8, a6, 28
		sc->sc_txqsetup |= 1<<qnum;
  909ab1:	263d03        	addmi	a6, a3, 0x300
  909ab4:	2860c8        	l8ui	a8, a6, 200
  909ab7:	005104        	ssl	a5
  909aba:	00a91a        	sll	a9, a10
  909abd:	089802        	or	a8, a9, a8
  909ac0:	2864c8        	s8i	a8, a6, 200
	a_int32_t qnum;
	struct ath_txq *txq;

	sc->sc_txqsetup=0;

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
  909ac3:	b155      	addi.n	a5, a5, 1
		txq= &sc->sc_txq[qnum];
		txq->axq_qnum = qnum;
		txq->axq_link = NULL;
  909ac5:	c020      	movi.n	a2, 0
	a_int32_t qnum;
	struct ath_txq *txq;

	sc->sc_txqsetup=0;

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
  909ac7:	6959c6        	bnei	a5, 10, 909a91 <ath_tgt_attach+0x3d1>
		txq->axq_linkbuf = NULL;
		asf_tailq_init(&txq->axq_tidq);
		sc->sc_txqsetup |= 1<<qnum;
	}

	sc->sc_uapsdq  = &sc->sc_txq[UAPSDQ_NUM];
  909aca:	264aec        	movi	a6, 0x4ec
  909acd:	253d05        	addmi	a5, a3, 0x500
  909ad0:	a636      	add.n	a6, a3, a6
  909ad2:	965d      	s32i.n	a6, a5, 52
	sc->sc_cabq    = &sc->sc_txq[CABQ_NUM];
  909ad4:	264acc        	movi	a6, 0x4cc
  909ad7:	a636      	add.n	a6, a3, a6
  909ad9:	965c      	s32i.n	a6, a5, 48

	sc->sc_ac2q[WME_AC_BE]  = &sc->sc_txq[0];
  909adb:	263acc        	movi	a6, 0x3cc
  909ade:	a636      	add.n	a6, a3, a6
  909ae0:	9653      	s32i.n	a6, a5, 12
	sc->sc_ac2q[WME_AC_BK]  = &sc->sc_txq[1];
  909ae2:	263aec        	movi	a6, 0x3ec
  909ae5:	a636      	add.n	a6, a3, a6
  909ae7:	9654      	s32i.n	a6, a5, 16
	sc->sc_ac2q[WME_AC_VI]  = &sc->sc_txq[2];
  909ae9:	264a0c        	movi	a6, 0x40c
  909aec:	a636      	add.n	a6, a3, a6
  909aee:	9655      	s32i.n	a6, a5, 20
	sc->sc_ac2q[WME_AC_VO]  = &sc->sc_txq[3];
  909af0:	264a2c        	movi	a6, 0x42c
  909af3:	a636      	add.n	a6, a3, a6
	}

	BUF_Pool_create_pool(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ath_numrxdescs, 1664);

	ath_tgt_txq_setup(sc);
	sc->sc_imask =0;
  909af5:	2236c4        	s32i	a2, a3, 0x310
	ah->ah_setInterrupts(ah, 0);
  909af8:	234228        	l32i	a3, a4, 160
	sc->sc_cabq    = &sc->sc_txq[CABQ_NUM];

	sc->sc_ac2q[WME_AC_BE]  = &sc->sc_txq[0];
	sc->sc_ac2q[WME_AC_BK]  = &sc->sc_txq[1];
	sc->sc_ac2q[WME_AC_VI]  = &sc->sc_txq[2];
	sc->sc_ac2q[WME_AC_VO]  = &sc->sc_txq[3];
  909afb:	9656      	s32i.n	a6, a5, 24

	BUF_Pool_create_pool(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ath_numrxdescs, 1664);

	ath_tgt_txq_setup(sc);
	sc->sc_imask =0;
	ah->ah_setInterrupts(ah, 0);
  909afd:	da40      	mov.n	a10, a4
  909aff:	db20      	mov.n	a11, a2
  909b01:	0b3000        	callx8	a3
  909b04:	d10f      	retw.n

	return 0;
bad:
bad2:
	ath_desc_free(sc);
  909b06:	da30      	mov.n	a10, a3
  909b08:	5bf98b        	call8	908138 <ath_desc_free>
	if (ah)
  909b0b:	c845      	beqz.n	a4, 909b14 <ath_tgt_attach+0x454>
		ah->ah_detach(ah);
  909b0d:	8246      	l32i.n	a2, a4, 24
  909b0f:	da40      	mov.n	a10, a4
  909b11:	0b2000        	callx8	a2
}
  909b14:	d10f      	retw.n
	...

00909b18 <ath_detach>:
	HIF_shutdown(sc->tgt_hif_handle);
	BUF_Pool_shutdown(sc->pool_handle);
}

a_int32_t ath_detach(struct ath_softc_tgt *sc)
{
  909b18:	6c1004        	entry	a1, 32

static void tgt_hif_htc_wmi_shutdown(struct ath_softc_tgt *sc)
{
	HTC_NotifyTargetDetached(sc->tgt_htc_handle);

	WMI_Shutdown(sc->tgt_wmi_handle);
  909b1b:	136913        	l32r	a3, 8e3f68 <bStandardCommand+0x104>
  909b1e:	8a23      	l32i.n	a10, a2, 12
  909b20:	283292        	l32i	a8, a3, 0x248
  909b23:	0b8000        	callx8	a8
	HTC_Shutdown(sc->tgt_htc_handle);
  909b26:	8a22      	l32i.n	a10, a2, 8
  909b28:	28327f        	l32i	a8, a3, 0x1fc
  909b2b:	0b8000        	callx8	a8
	HIF_shutdown(sc->tgt_hif_handle);
  909b2e:	8a21      	l32i.n	a10, a2, 4
  909b30:	283271        	l32i	a8, a3, 0x1c4
  909b33:	0b8000        	callx8	a8
	BUF_Pool_shutdown(sc->pool_handle);
  909b36:	8a20      	l32i.n	a10, a2, 0
  909b38:	23329a        	l32i	a3, a3, 0x268
  909b3b:	0b3000        	callx8	a3
}

a_int32_t ath_detach(struct ath_softc_tgt *sc)
{
	tgt_hif_htc_wmi_shutdown(sc);
}
  909b3e:	d10f      	retw.n

00909b40 <wlan_pci_module_init>:
adf_drv_info_t* g_wlan_drv = NULL;
adf_drv_handle_t g_wlan_drv_handle = NULL;
adf_os_drv_intr g_wlan_intr = NULL;

void wlan_pci_module_init(void)
{
  909b40:	6c1004        	entry	a1, 32
	if (g_pci_init_func != NULL) {
  909b43:	186a38        	l32r	a8, 8e4424 <bStandardCommand+0x5c0>
  909b46:	8a80      	l32i.n	a10, a8, 0
  909b48:	c8a1      	beqz.n	a10, 909b4d <wlan_pci_module_init+0xd>
		g_pci_init_func();
  909b4a:	0ba000        	callx8	a10
  909b4d:	d10f      	retw.n
	...

00909b50 <wlan_pci_register_drv>:
	}
}

void wlan_pci_register_drv(adf_drv_info_t *drv)
{
  909b50:	6c1004        	entry	a1, 32
	g_wlan_drv = drv;
  909b53:	186a39        	l32r	a8, 8e4438 <bStandardCommand+0x5d4>
  909b56:	9280      	s32i.n	a2, a8, 0
  909b58:	d10f      	retw.n
	...

00909b5c <wlan_pci_config_write>:
mem_fail:
	return;        
}

int wlan_pci_config_write(int offset, a_uint32_t val, int width)
{
  909b5c:	6c1006        	entry	a1, 48
#if MAGPIE_ENABLE_PCIE == 1    
	unsigned long addr = ( PCI_CONFIG_BASE_ADDR + offset ) & 0xfffffffc;
  909b5f:	1a6a3a        	l32r	a10, 8e4448 <bStandardCommand+0x5e4>
  909b62:	c78c      	movi.n	a8, -4
  909b64:	aa2a      	add.n	a10, a2, a10
  909b66:	08aa01        	and	a10, a10, a8
	A_UINT8 *ptr = (A_UINT8 *)addr;   
	A_UINT8 *valptr = (A_UINT8 *)&val; 
	int idx = offset & 0x3;
  909b69:	020241        	extui	a2, a2, 0, 2
mem_fail:
	return;        
}

int wlan_pci_config_write(int offset, a_uint32_t val, int width)
{
  909b6c:	9310      	s32i.n	a3, a1, 0
	return;
mem_fail:
	return;        
}

int wlan_pci_config_write(int offset, a_uint32_t val, int width)
  909b6e:	b319      	addi.n	a9, a1, 3
	A_UINT8 *ptr = (A_UINT8 *)addr;   
	A_UINT8 *valptr = (A_UINT8 *)&val; 
	int idx = offset & 0x3;
	int i;
    
	for (i = 0; i < width; i++) {
  909b70:	c080      	movi.n	a8, 0
	return;
mem_fail:
	return;        
}

int wlan_pci_config_write(int offset, a_uint32_t val, int width)
  909b72:	a2a2      	add.n	a2, a10, a2
	A_UINT8 *ptr = (A_UINT8 *)addr;   
	A_UINT8 *valptr = (A_UINT8 *)&val; 
	int idx = offset & 0x3;
	int i;
    
	for (i = 0; i < width; i++) {
  909b74:	60000c        	j	909b84 <wlan_pci_config_write+0x28>
  909b77:	002b90        	l32e	a0, a2, -20
		ptr[idx + i] = valptr[3-i];
  909b7a:	00a82a        	muluh	a8, a10, a0
  909b7d:	2ba400        	s8i	a11, a10, 0
	A_UINT8 *ptr = (A_UINT8 *)addr;   
	A_UINT8 *valptr = (A_UINT8 *)&val; 
	int idx = offset & 0x3;
	int i;
    
	for (i = 0; i < width; i++) {
  909b80:	b188      	addi.n	a8, a8, 1
  909b82:	b099      	addi.n	a9, a9, -1
  909b84:	7482f0        	blt	a8, a4, 909b78 <wlan_pci_config_write+0x1c>
		ptr[idx + i] = valptr[3-i];
	}            
#endif
    
	return 0;    
}
  909b87:	c020      	movi.n	a2, 0
  909b89:	d10f      	retw.n
	...

00909b8c <wlan_pci_config_read>:

int wlan_pci_config_read(int offset, int width)
{
  909b8c:	6c1006        	entry	a1, 48
#if MAGPIE_ENABLE_PCIE == 0    
	return 0;    
#else
	unsigned long addr = ( PCI_CONFIG_BASE_ADDR + offset ) & 0xfffffffc;
  909b8f:	186a3a        	l32r	a8, 8e4478 <bStandardCommand+0x614>
  909b92:	c79c      	movi.n	a9, -4
  909b94:	a828      	add.n	a8, a2, a8
  909b96:	098801        	and	a8, a8, a9
	unsigned long value = *((unsigned long *)addr);
  909b99:	8880      	l32i.n	a8, a8, 0
	A_UINT8 *ptr = (A_UINT8 *)&value;   
	int idx = offset & 0x3;
  909b9b:	020941        	extui	a9, a2, 0, 2
{
#if MAGPIE_ENABLE_PCIE == 0    
	return 0;    
#else
	unsigned long addr = ( PCI_CONFIG_BASE_ADDR + offset ) & 0xfffffffc;
	unsigned long value = *((unsigned long *)addr);
  909b9e:	9810      	s32i.n	a8, a1, 0
#endif
    
	return 0;    
}

int wlan_pci_config_read(int offset, int width)
  909ba0:	09190c        	sub	a9, a1, a9
	A_UINT8 *ptr = (A_UINT8 *)&value;   
	int idx = offset & 0x3;
	int result = 0;
	int i;
    
	for (i = 0; i < width; i++) {
  909ba3:	c080      	movi.n	a8, 0
#endif
    
	return 0;    
}

int wlan_pci_config_read(int offset, int width)
  909ba5:	b399      	addi.n	a9, a9, 3
#else
	unsigned long addr = ( PCI_CONFIG_BASE_ADDR + offset ) & 0xfffffffc;
	unsigned long value = *((unsigned long *)addr);
	A_UINT8 *ptr = (A_UINT8 *)&value;   
	int idx = offset & 0x3;
	int result = 0;
  909ba7:	d280      	mov.n	a2, a8
	int i;
    
	for (i = 0; i < width; i++) {
  909ba9:	600012        	j	909bbf <wlan_pci_config_read+0x33>
		result |= (ptr[ 3 - (idx + i)] << (8*i));
  909bac:	2b9000        	l8ui	a11, a9, 0
#endif
    
	return 0;    
}

int wlan_pci_config_read(int offset, int width)
  909baf:	0d8a11        	slli	a10, a8, 3
	int idx = offset & 0x3;
	int result = 0;
	int i;
    
	for (i = 0; i < width; i++) {
		result |= (ptr[ 3 - (idx + i)] << (8*i));
  909bb2:	00a104        	ssl	a10
  909bb5:	00ba1a        	sll	a10, a11
  909bb8:	0a2202        	or	a2, a2, a10
	A_UINT8 *ptr = (A_UINT8 *)&value;   
	int idx = offset & 0x3;
	int result = 0;
	int i;
    
	for (i = 0; i < width; i++) {
  909bbb:	b188      	addi.n	a8, a8, 1
  909bbd:	b099      	addi.n	a9, a9, -1
  909bbf:	7382e9        	blt	a8, a3, 909bac <wlan_pci_config_read+0x20>
		result |= (ptr[ 3 - (idx + i)] << (8*i));
	}            
    
	return result;    
#endif    
}
  909bc2:	d10f      	retw.n

00909bc4 <wlan_pci_probe>:

#define ATHEROS_VENDOR_ID 0x168c
#define AR5416_DEVID_PCIE 0x24 	

void wlan_pci_probe(void)
{
  909bc4:	6c100a        	entry	a1, 80
	__adf_softc_t           *sc;
	adf_os_resource_t       drv_res = {0};
  909bc7:	c0b0      	movi.n	a11, 0
  909bc9:	2c0a18        	movi	a12, 24
  909bcc:	011a02        	or	a10, a1, a1
  909bcf:	5b749e        	call8	8e6e48 <memset>
	adf_os_attach_data_t    drv_data = {{0}};   
  909bd2:	c1c0      	movi.n	a12, 16
  909bd4:	2b0a00        	movi	a11, 0
  909bd7:	2a1c18        	addi	a10, a1, 24
  909bda:	5b749b        	call8	8e6e48 <memset>
	int vendor_id;
	int device_id;

	A_PRINTF("<wlan_pci_probe>: Attaching the driver\n");
  909bdd:	126913        	l32r	a2, 8e402c <bStandardCommand+0x1c8>
  909be0:	1a6a3b        	l32r	a10, 8e44cc <bStandardCommand+0x668>
  909be3:	232212        	l32i	a3, a2, 72
  909be6:	0b3000        	callx8	a3

#if MAGPIE_ENABLE_PCIE == 0
	vendor_id = ATHEROS_VENDOR_ID;
	device_id = AR5416_DEVID_PCIE;
#else    
	vendor_id = wlan_pci_config_read(0, 2);
  909be9:	c0b2      	movi.n	a11, 2
  909beb:	c0a0      	movi.n	a10, 0
  909bed:	5bffe7        	call8	909b8c <wlan_pci_config_read>
  909bf0:	d3a0      	mov.n	a3, a10
	device_id = wlan_pci_config_read(2, 2);
  909bf2:	c0a2      	movi.n	a10, 2
  909bf4:	dba0      	mov.n	a11, a10
  909bf6:	5bffe5        	call8	909b8c <wlan_pci_config_read>
  909bf9:	0aac02        	or	a12, a10, a10
#endif    
	A_PRINTF("<wlan_pci_probe>: Vendor id 0x%x Dev id 0x%x\n", vendor_id, device_id);    
  909bfc:	282212        	l32i	a8, a2, 72
  909bff:	1a6a3c        	l32r	a10, 8e44f0 <bStandardCommand+0x68c>
  909c02:	033b02        	or	a11, a3, a3
  909c05:	0b8000        	callx8	a8
    
	if (vendor_id != ATHEROS_VENDOR_ID) {
  909c08:	186a3d        	l32r	a8, 8e44fc <bStandardCommand+0x698>
  909c0b:	783109        	beq	a3, a8, 909c18 <wlan_pci_probe+0x54>
		A_PRINTF("<wlan_pci_probe>: Atheros card not found\n"); 
  909c0e:	222212        	l32i	a2, a2, 72
  909c11:	1a6a3e        	l32r	a10, 8e450c <bStandardCommand+0x6a8>
  909c14:	600012        	j	909c2a <wlan_pci_probe+0x66>
  909c17:	002822        	excw
	}
            
	/**
	 * Allocate the sc & zero down
	 */
	sc = A_ALLOCRAM(sizeof(__adf_softc_t));
  909c1a:	52c0a0        	call0	8b9e9c <_bss_end+0x3a6f8c>
  909c1d:	c0b4      	movi.n	a11, 4
  909c1f:	0b8000        	callx8	a8
	if (!sc) {
  909c22:	ccaa      	bnez.n	a10, 909c30 <wlan_pci_probe+0x6c>
		A_PRINTF("Cannot malloc softc\n");
  909c24:	222212        	l32i	a2, a2, 72
  909c27:	1a6a3f        	l32r	a10, 8e4524 <bStandardCommand+0x6c0>
  909c2a:	0b2000        	callx8	a2
  909c2d:	d10f      	retw.n
  909c2f:	00c224        	excw
		goto mem_fail;
	}
    
#define AR5416_DEVID_PCIE 0x24 		

	drv_data.pci.device    = AR5416_DEVID_PCIE;
  909c32:	9217      	s32i.n	a2, a1, 28
    
	drv_res.start  = (a_uint32_t) 0;
	drv_res.end    = 0;
	drv_res.type   = ADF_OS_RESOURCE_TYPE_MEM;
        
	g_wlan_drv_handle = g_wlan_drv->drv_attach(&drv_res, 1, &drv_data, NULL);
  909c34:	126a39        	l32r	a2, 8e4518 <bStandardCommand+0x6b4>
    
#define AR5416_DEVID_PCIE 0x24 		

	drv_data.pci.device    = AR5416_DEVID_PCIE;
	drv_data.pci.vendor    = 0x168c;
	drv_data.pci.subvendor = 0;
  909c37:	c0d0      	movi.n	a13, 0
    
	drv_res.start  = (a_uint32_t) 0;
	drv_res.end    = 0;
	drv_res.type   = ADF_OS_RESOURCE_TYPE_MEM;
        
	g_wlan_drv_handle = g_wlan_drv->drv_attach(&drv_res, 1, &drv_data, NULL);
  909c39:	8220      	l32i.n	a2, a2, 0
	drv_data.pci.device    = AR5416_DEVID_PCIE;
	drv_data.pci.vendor    = 0x168c;
	drv_data.pci.subvendor = 0;
	drv_data.pci.subdevice = 0;
    
	drv_res.start  = (a_uint32_t) 0;
  909c3b:	186a40        	l32r	a8, 8e453c <bStandardCommand+0x6d8>
  909c3e:	196a40        	l32r	a9, 8e4540 <bStandardCommand+0x6dc>
	}
    
#define AR5416_DEVID_PCIE 0x24 		

	drv_data.pci.device    = AR5416_DEVID_PCIE;
	drv_data.pci.vendor    = 0x168c;
  909c41:	9316      	s32i.n	a3, a1, 24
	drv_data.pci.subvendor = 0;
  909c43:	9d18      	s32i.n	a13, a1, 32
	drv_data.pci.subdevice = 0;
  909c45:	9d19      	s32i.n	a13, a1, 36
    
	drv_res.start  = (a_uint32_t) 0;
	drv_res.end    = 0;
	drv_res.type   = ADF_OS_RESOURCE_TYPE_MEM;
        
	g_wlan_drv_handle = g_wlan_drv->drv_attach(&drv_res, 1, &drv_data, NULL);
  909c47:	8220      	l32i.n	a2, a2, 0
	drv_data.pci.device    = AR5416_DEVID_PCIE;
	drv_data.pci.vendor    = 0x168c;
	drv_data.pci.subvendor = 0;
	drv_data.pci.subdevice = 0;
    
	drv_res.start  = (a_uint32_t) 0;
  909c49:	9810      	s32i.n	a8, a1, 0
  909c4b:	9911      	s32i.n	a9, a1, 4
	drv_res.end    = 0;
  909c4d:	9812      	s32i.n	a8, a1, 8
  909c4f:	9913      	s32i.n	a9, a1, 12
	drv_res.type   = ADF_OS_RESOURCE_TYPE_MEM;
  909c51:	9d14      	s32i.n	a13, a1, 16
        
	g_wlan_drv_handle = g_wlan_drv->drv_attach(&drv_res, 1, &drv_data, NULL);
  909c53:	da10      	mov.n	a10, a1
  909c55:	c0b1      	movi.n	a11, 1
  909c57:	2c1c18        	addi	a12, a1, 24
  909c5a:	0b2000        	callx8	a2
  909c5d:	126a41        	l32r	a2, 8e4564 <bStandardCommand+0x700>
  909c60:	9a20      	s32i.n	a10, a2, 0
  909c62:	d10f      	retw.n

00909c64 <wlan_pci_isr>:
	return result;    
#endif    
}

void wlan_pci_isr()
{
  909c64:	6c1004        	entry	a1, 32
	if (g_wlan_intr != NULL && g_wlan_drv_handle != NULL) {
  909c67:	186a42        	l32r	a8, 8e4570 <bStandardCommand+0x70c>
  909c6a:	8880      	l32i.n	a8, a8, 0
  909c6c:	c888      	beqz.n	a8, 909c78 <wlan_pci_isr+0x14>
  909c6e:	196a41        	l32r	a9, 8e4574 <bStandardCommand+0x710>
  909c71:	8a90      	l32i.n	a10, a9, 0
  909c73:	c8a1      	beqz.n	a10, 909c78 <wlan_pci_isr+0x14>
		g_wlan_intr(g_wlan_drv_handle);
  909c75:	0b8000        	callx8	a8
  909c78:	d10f      	retw.n
	...

00909c7c <_HTC_Shutdown>:
    
	return pHTC;
}

LOCAL void _HTC_Shutdown(htc_handle_t htcHandle)
{
  909c7c:	6c1004        	entry	a1, 32
  909c7f:	d10f      	retw.n
  909c81:	000000        	ill

00909c84 <_HTC_RegisterService>:
    
	adf_os_mem_free(pHTC);
}

LOCAL void _HTC_RegisterService(htc_handle_t htcHandle, HTC_SERVICE *pService)
{
  909c84:	6c1004        	entry	a1, 32
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)htcHandle;
    
        /* add it to the list */
	pService->pNext = pHTC->pServiceList;
  909c87:	282290        	l32i	a8, a2, 0x240
  909c8a:	9830      	s32i.n	a8, a3, 0
	pHTC->pServiceList = pService;
  909c8c:	232690        	s32i	a3, a2, 0x240
  909c8f:	d10f      	retw.n
  909c91:	000000        	ill

00909c94 <_HTC_GetReservedHeadroom>:
void _HTC_ResumeRecv(HTC_ENDPOINT_ID EndpointID)
{
}

int _HTC_GetReservedHeadroom(htc_handle_t htcHandle)
{
  909c94:	6c1004        	entry	a1, 32
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)htcHandle;  
    
	return HTC_HDR_LENGTH + HIF_get_reserved_headroom(pHTC->hifHandle);
  909c97:	186913        	l32r	a8, 8e40e4 <bStandardCommand+0x280>
  909c9a:	2a229a        	l32i	a10, a2, 0x268
  909c9d:	28827a        	l32i	a8, a8, 0x1e8
  909ca0:	0b8000        	callx8	a8
}
  909ca3:	b8a2      	addi.n	a2, a10, 8
  909ca5:	d10f      	retw.n
	...

00909ca8 <HTCSendDoneHandler>:
		HTCCheckAndSendCreditReport(pHTC, HTC_ANY_ENDPOINT_MASK,NULL,ENDPOINT_MAX);
	}  
}

LOCAL void HTCSendDoneHandler(adf_nbuf_t buf, void *context)
{
  909ca8:	6c1004        	entry	a1, 32
 * @return data pointer to typecast into your priv structure
 */
static inline a_uint8_t *
adf_nbuf_get_priv(adf_nbuf_t buf)
{
    return (__adf_nbuf_get_priv(buf));
  909cab:	022a02        	or	a10, a2, a2
  909cae:	5bf34d        	call8	9069e4 <__adf_nbuf_get_priv>
	A_UINT8 current_eid;
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)context;
	HTC_BUF_CONTEXT *ctx;
      
	ctx = (HTC_BUF_CONTEXT *)adf_nbuf_get_priv(buf);
	current_eid = ctx->end_point;
  909cb1:	24a000        	l8ui	a4, a10, 0
 *         or NULL if there is not sufficient data to pull.
 */
static inline a_uint8_t *
adf_nbuf_pull_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_pull_head(buf, size);
  909cb4:	c0b8      	movi.n	a11, 8
  909cb6:	022a02        	or	a10, a2, a2
  909cb9:	5bf325        	call8	906950 <__adf_nbuf_pull_head>
	/* Walk through the buffers and fixup the ones we used for HTC headers.
	 * The buffer list may contain more than one string of HTC buffers comprising of an
	 * HTC message so we need to check every buffer */            
	adf_nbuf_pull_head(buf, HTC_HDR_LENGTH);
                   
	pHTC->Endpoints[current_eid].pService->
  909cbc:	044809        	addx2	a8, a4, a4
  909cbf:	03830b        	addx8	a3, a8, a3
  909cc2:	8832      	l32i.n	a8, a3, 8
		ProcessSendBufferComplete(current_eid, 
  909cc4:	da40      	mov.n	a10, a4
  909cc6:	8982      	l32i.n	a9, a8, 8
  909cc8:	8c86      	l32i.n	a12, a8, 24
  909cca:	022b02        	or	a11, a2, a2
  909ccd:	0b9000        	callx8	a9
  909cd0:	d10f      	retw.n
	...

00909cd4 <HTC_AssembleBuffers>:
	if ((pEndpoint)->ConnectionFlags & HTC_CONNECT_FLAGS_REDUCE_CREDIT_DRIBBLE) { \
		AdjustCreditThreshold((pEndpoint));			\
	}    

LOCAL void HTC_AssembleBuffers(HTC_CONTEXT *pHTC, int Count, int Size)
{
  909cd4:	6c1004        	entry	a1, 32
	BUF_Pool_create_pool(pHTC->PoolHandle, POOL_ID_HTC_CONTROL, Count, Size);       
  909cd7:	186913        	l32r	a8, 8e4124 <bStandardCommand+0x2c0>
  909cda:	2a229b        	l32i	a10, a2, 0x26c
  909cdd:	28829b        	l32i	a8, a8, 0x26c
  909ce0:	c0b0      	movi.n	a11, 0
  909ce2:	dc30      	mov.n	a12, a3
  909ce4:	dd40      	mov.n	a13, a4
  909ce6:	0b8000        	callx8	a8
  909ce9:	d10f      	retw.n
	...

00909cec <_HTC_Init>:
}

LOCAL htc_handle_t _HTC_Init(HTC_SETUP_COMPLETE_CB SetupComplete,
                             HTC_CONFIG *pConfig)
{
  909cec:	6c1006        	entry	a1, 48
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  909cef:	146913        	l32r	a4, 8e413c <bStandardCommand+0x2d8>
  909cf2:	022502        	or	a5, a2, a2
  909cf5:	224252        	l32i	a2, a4, 0x148
  909cf8:	2b2a74        	movi	a11, 0x274
  909cfb:	c0a0      	movi.n	a10, 0
  909cfd:	0b2000        	callx8	a2
}
/* zero a memory buffer */
static inline void
__adf_os_mem_zero(void *buf, adf_os_size_t size)
{
    A_MEMZERO(buf,size);
  909d00:	8844      	l32i.n	a8, a4, 16
  909d02:	2c2a74        	movi	a12, 0x274
  909d05:	c0b0      	movi.n	a11, 0
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  909d07:	d2a0      	mov.n	a2, a10
}
/* zero a memory buffer */
static inline void
__adf_os_mem_zero(void *buf, adf_os_size_t size)
{
    A_MEMZERO(buf,size);
  909d09:	0b8000        	callx8	a8
    
        pHTC = (HTC_CONTEXT *)adf_os_mem_alloc(sizeof(HTC_CONTEXT));
    
	adf_os_mem_zero(pHTC, sizeof(HTC_CONTEXT));

	pHTC->OSHandle = pConfig->OSHandle;
  909d0c:	8832      	l32i.n	a8, a3, 8
	pHTC->PoolHandle = pConfig->PoolHandle;
	pHTC->hifHandle = pConfig->HIFHandle;
  909d0e:	8a33      	l32i.n	a10, a3, 12
    
        pHTC = (HTC_CONTEXT *)adf_os_mem_alloc(sizeof(HTC_CONTEXT));
    
	adf_os_mem_zero(pHTC, sizeof(HTC_CONTEXT));

	pHTC->OSHandle = pConfig->OSHandle;
  909d10:	9820      	s32i.n	a8, a2, 0
	pHTC->PoolHandle = pConfig->PoolHandle;
  909d12:	8834      	l32i.n	a8, a3, 16
	hifCBConfig.send_buf_done = A_INDIR(htc._HTC_SendDoneHandler);
	hifCBConfig.recv_buf = A_INDIR(htc._HTC_MsgRecvHandler);
	hifCBConfig.context = pHTC;
    
	/* initialize hardware layer */
	HIF_register_callback(pConfig->HIFHandle, &hifCBConfig);
  909d14:	db10      	mov.n	a11, a1
        pHTC = (HTC_CONTEXT *)adf_os_mem_alloc(sizeof(HTC_CONTEXT));
    
	adf_os_mem_zero(pHTC, sizeof(HTC_CONTEXT));

	pHTC->OSHandle = pConfig->OSHandle;
	pHTC->PoolHandle = pConfig->PoolHandle;
  909d16:	28269b        	s32i	a8, a2, 0x26c
	pHTC->hifHandle = pConfig->HIFHandle;
                        
	hifCBConfig.send_buf_done = A_INDIR(htc._HTC_SendDoneHandler);
  909d19:	284287        	l32i	a8, a4, 0x21c
    
	adf_os_mem_zero(pHTC, sizeof(HTC_CONTEXT));

	pHTC->OSHandle = pConfig->OSHandle;
	pHTC->PoolHandle = pConfig->PoolHandle;
	pHTC->hifHandle = pConfig->HIFHandle;
  909d1c:	2a269a        	s32i	a10, a2, 0x268
                        
	hifCBConfig.send_buf_done = A_INDIR(htc._HTC_SendDoneHandler);
  909d1f:	9810      	s32i.n	a8, a1, 0
	hifCBConfig.recv_buf = A_INDIR(htc._HTC_MsgRecvHandler);
  909d21:	284286        	l32i	a8, a4, 0x218
	hifCBConfig.context = pHTC;
  909d24:	9212      	s32i.n	a2, a1, 8
	pHTC->OSHandle = pConfig->OSHandle;
	pHTC->PoolHandle = pConfig->PoolHandle;
	pHTC->hifHandle = pConfig->HIFHandle;
                        
	hifCBConfig.send_buf_done = A_INDIR(htc._HTC_SendDoneHandler);
	hifCBConfig.recv_buf = A_INDIR(htc._HTC_MsgRecvHandler);
  909d26:	9811      	s32i.n	a8, a1, 4
	hifCBConfig.context = pHTC;
    
	/* initialize hardware layer */
	HIF_register_callback(pConfig->HIFHandle, &hifCBConfig);
  909d28:	284272        	l32i	a8, a4, 0x1c8
  909d2b:	0b8000        	callx8	a8
        /* see if the host wants us to override the number of ctrl buffers */
	pHTC->NumBuffersForCreditRpts = 0;
    
	if (0 == pHTC->NumBuffersForCreditRpts) {
		/* nothing to override, simply set default */
		pHTC->NumBuffersForCreditRpts = HTC_DEFAULT_NUM_CTRL_BUFFERS; 
  909d2e:	c086      	movi.n	a8, 6
  909d30:	282696        	s32i	a8, a2, 0x258
	}    
    
	pHTC->MaxEpPendingCreditRpts = 0;
    
	if (0 == pHTC->MaxEpPendingCreditRpts) {
		pHTC->MaxEpPendingCreditRpts = HTC_DEFAULT_MAX_EP_PENDING_CREDIT_REPORTS;    
  909d33:	c083      	movi.n	a8, 3
  909d35:	282699        	s32i	a8, a2, 0x264
	}
	/* calculate the total allocation size based on the number of credit report buffers */
	pHTC->CtrlBufferAllocSize = MIN_CREDIT_BUFFER_ALLOC_SIZE * pHTC->NumBuffersForCreditRpts;
  909d38:	280ad8        	movi	a8, 216
  909d3b:	282697        	s32i	a8, a2, 0x25c
	/* we need at least enough buffer space for 1 ctrl message */
	pHTC->CtrlBufferAllocSize = A_MAX(pHTC->CtrlBufferAllocSize,MAX_HTC_SETUP_MSG_SIZE);
    
	/* save the size of each buffer/credit we will receive */
	pHTC->RecvBufferSize = pConfig->CreditSize; //RecvBufferSize;
  909d3e:	8830      	l32i.n	a8, a3, 0
	pHTC->TotalCredits = pConfig->CreditNumber;
  909d40:	8331      	l32i.n	a3, a3, 4
	pHTC->CtrlBufferAllocSize = MIN_CREDIT_BUFFER_ALLOC_SIZE * pHTC->NumBuffersForCreditRpts;
	/* we need at least enough buffer space for 1 ctrl message */
	pHTC->CtrlBufferAllocSize = A_MAX(pHTC->CtrlBufferAllocSize,MAX_HTC_SETUP_MSG_SIZE);
    
	/* save the size of each buffer/credit we will receive */
	pHTC->RecvBufferSize = pConfig->CreditSize; //RecvBufferSize;
  909d42:	282691        	s32i	a8, a2, 0x244
	pHTC->TotalCredits = pConfig->CreditNumber;
  909d45:	232694        	s32i	a3, a2, 0x250
	pHTC->TotalCreditsAssigned = 0;
  909d48:	c030      	movi.n	a3, 0
  909d4a:	232695        	s32i	a3, a2, 0x254
     
	/* setup the pseudo service that handles HTC control messages */
	pHTC->HTCControlService.ProcessRecvMsg = A_INDIR(htc._HTC_ControlSvcProcessMsg);
  909d4d:	234288        	l32i	a3, a4, 0x220
	pHTC->HTCControlService.ProcessSendBufferComplete = A_INDIR(htc._HTC_ControlSvcProcessSendComplete);
	pHTC->HTCControlService.TrailerSpcCheckLimit = HTC_CTRL_BUFFER_CHECK_SIZE;
  909d50:	c18c      	movi.n	a8, 28
	pHTC->RecvBufferSize = pConfig->CreditSize; //RecvBufferSize;
	pHTC->TotalCredits = pConfig->CreditNumber;
	pHTC->TotalCreditsAssigned = 0;
     
	/* setup the pseudo service that handles HTC control messages */
	pHTC->HTCControlService.ProcessRecvMsg = A_INDIR(htc._HTC_ControlSvcProcessMsg);
  909d52:	23268a        	s32i	a3, a2, 0x228
	pHTC->HTCControlService.ProcessSendBufferComplete = A_INDIR(htc._HTC_ControlSvcProcessSendComplete);
  909d55:	234289        	l32i	a3, a4, 0x224
	pHTC->HTCControlService.MaxSvcMsgSize = MAX_HTC_SETUP_MSG_SIZE;
	pHTC->HTCControlService.ServiceCtx = pHTC;
    
	/* automatically register this pseudo service to endpoint 1 */
	pHTC->Endpoints[ENDPOINT0].pService = &pHTC->HTCControlService;
	HIF_get_default_pipe(pHTC->hifHandle, &pHTC->Endpoints[ENDPOINT0].UpLinkPipeID, 
  909d58:	2a229a        	l32i	a10, a2, 0x268
	pHTC->TotalCredits = pConfig->CreditNumber;
	pHTC->TotalCreditsAssigned = 0;
     
	/* setup the pseudo service that handles HTC control messages */
	pHTC->HTCControlService.ProcessRecvMsg = A_INDIR(htc._HTC_ControlSvcProcessMsg);
	pHTC->HTCControlService.ProcessSendBufferComplete = A_INDIR(htc._HTC_ControlSvcProcessSendComplete);
  909d5b:	23268b        	s32i	a3, a2, 0x22c
	pHTC->HTCControlService.TrailerSpcCheckLimit = HTC_CTRL_BUFFER_CHECK_SIZE;
  909d5e:	232d02        	addmi	a3, a2, 0x200
  909d61:	28351d        	s16i	a8, a3, 58
	pHTC->HTCControlService.MaxSvcMsgSize = MAX_HTC_SETUP_MSG_SIZE;
  909d64:	c480      	movi.n	a8, 64
  909d66:	28351c        	s16i	a8, a3, 56
	pHTC->HTCControlService.ServiceCtx = pHTC;
    
	/* automatically register this pseudo service to endpoint 1 */
	pHTC->Endpoints[ENDPOINT0].pService = &pHTC->HTCControlService;
  909d69:	232a24        	movi	a3, 0x224
  909d6c:	032308        	add	a3, a2, a3
  909d6f:	9322      	s32i.n	a3, a2, 8
	HIF_get_default_pipe(pHTC->hifHandle, &pHTC->Endpoints[ENDPOINT0].UpLinkPipeID, 
  909d71:	23427c        	l32i	a3, a4, 0x1f0
  909d74:	2b2c19        	addi	a11, a2, 25
  909d77:	2c2c18        	addi	a12, a2, 24
	/* setup the pseudo service that handles HTC control messages */
	pHTC->HTCControlService.ProcessRecvMsg = A_INDIR(htc._HTC_ControlSvcProcessMsg);
	pHTC->HTCControlService.ProcessSendBufferComplete = A_INDIR(htc._HTC_ControlSvcProcessSendComplete);
	pHTC->HTCControlService.TrailerSpcCheckLimit = HTC_CTRL_BUFFER_CHECK_SIZE;
	pHTC->HTCControlService.MaxSvcMsgSize = MAX_HTC_SETUP_MSG_SIZE;
	pHTC->HTCControlService.ServiceCtx = pHTC;
  909d7a:	22268f        	s32i	a2, a2, 0x23c
    
	/* automatically register this pseudo service to endpoint 1 */
	pHTC->Endpoints[ENDPOINT0].pService = &pHTC->HTCControlService;
	HIF_get_default_pipe(pHTC->hifHandle, &pHTC->Endpoints[ENDPOINT0].UpLinkPipeID, 
  909d7d:	0b3000        	callx8	a3
			     &pHTC->Endpoints[ENDPOINT0].DownLinkPipeID);
    
	/* Initialize control pipe so we could receive the HTC control packets */
	// @TODO: msg size!
	HIF_config_pipe(pHTC->hifHandle, pHTC->Endpoints[ENDPOINT0].UpLinkPipeID, 1);    
  909d80:	2a229a        	l32i	a10, a2, 0x268
  909d83:	234275        	l32i	a3, a4, 0x1d4
  909d86:	2b2019        	l8ui	a11, a2, 25
  909d89:	c0c1      	movi.n	a12, 1
  909d8b:	0b3000        	callx8	a3
    
	/* set the first free endpoint */
	pHTC->CurrentEpIndex = ENDPOINT1;
  909d8e:	c031      	movi.n	a3, 1
  909d90:	232688        	s32i	a3, a2, 0x220
	pHTC->SetupCompleteCb = SetupComplete;
    
        /* setup buffers for just the setup phase, we only need 1 buffer to handle
	 * setup */
	HTC_AssembleBuffers(pHTC, 4, MAX_HTC_SETUP_MSG_SIZE);
  909d93:	da20      	mov.n	a10, a2
	// @TODO: msg size!
	HIF_config_pipe(pHTC->hifHandle, pHTC->Endpoints[ENDPOINT0].UpLinkPipeID, 1);    
    
	/* set the first free endpoint */
	pHTC->CurrentEpIndex = ENDPOINT1;
	pHTC->SetupCompleteCb = SetupComplete;
  909d95:	252693        	s32i	a5, a2, 0x24c
    
        /* setup buffers for just the setup phase, we only need 1 buffer to handle
	 * setup */
	HTC_AssembleBuffers(pHTC, 4, MAX_HTC_SETUP_MSG_SIZE);
  909d98:	c0b4      	movi.n	a11, 4
  909d9a:	2c0a40        	movi	a12, 64
  909d9d:	5bffcd        	call8	909cd4 <HTC_AssembleBuffers>
   
	/* start hardware layer so that we can queue buffers */
	HIF_start(pHTC->hifHandle);
  909da0:	2a229a        	l32i	a10, a2, 0x268
  909da3:	234274        	l32i	a3, a4, 0x1d0
  909da6:	0b3000        	callx8	a3
    
	return pHTC;
}
  909da9:	d10f      	retw.n
	...

00909dac <_HTC_PauseRecv>:
	pHTCHdr->PayloadLen = adf_os_htons(totsz);  
	HIF_send_buffer(pHTC->hifHandle, pHTC->Endpoints[EndpointID].DownLinkPipeID, pBuffers);       
}

void _HTC_PauseRecv(HTC_ENDPOINT_ID EndpointID)
{
  909dac:	6c1004        	entry	a1, 32
  909daf:	d10f      	retw.n
  909db1:	000000        	ill

00909db4 <_HTC_ResumeRecv>:
}

void _HTC_ResumeRecv(HTC_ENDPOINT_ID EndpointID)
{
  909db4:	6c1004        	entry	a1, 32
  909db7:	d10f      	retw.n
  909db9:	000000        	ill

00909dbc <htc_module_install>:
    
	return HTC_HDR_LENGTH + HIF_get_reserved_headroom(pHTC->hifHandle);
}

void htc_module_install(struct htc_apis *pAPIs)
{   
  909dbc:	6c1004        	entry	a1, 32
	pAPIs->_HTC_Init = _HTC_Init;
  909dbf:	186a43        	l32r	a8, 8e46cc <bStandardCommand+0x868>
  909dc2:	9820      	s32i.n	a8, a2, 0
	pAPIs->_HTC_ReturnBuffers = _HTC_ReturnBuffers;
  909dc4:	186a44        	l32r	a8, 8e46d4 <bStandardCommand+0x870>
  909dc7:	9824      	s32i.n	a8, a2, 16
	pAPIs->_HTC_ReturnBuffersList = _HTC_ReturnBuffersList;
  909dc9:	186a45        	l32r	a8, 8e46e0 <bStandardCommand+0x87c>
  909dcc:	9825      	s32i.n	a8, a2, 20
	pAPIs->_HTC_Ready = _HTC_Ready;
  909dce:	186a46        	l32r	a8, 8e46e8 <bStandardCommand+0x884>
  909dd1:	9823      	s32i.n	a8, a2, 12
	pAPIs->_HTC_RegisterService = _HTC_RegisterService;
  909dd3:	186a47        	l32r	a8, 8e46f0 <bStandardCommand+0x88c>
  909dd6:	9822      	s32i.n	a8, a2, 8
	pAPIs->_HTC_SendMsg = _HTC_SendMsg;   
  909dd8:	186a48        	l32r	a8, 8e46f8 <bStandardCommand+0x894>
  909ddb:	9826      	s32i.n	a8, a2, 24
	pAPIs->_HTC_Shutdown = _HTC_Shutdown;
  909ddd:	186a49        	l32r	a8, 8e4704 <bStandardCommand+0x8a0>
  909de0:	9821      	s32i.n	a8, a2, 4
	pAPIs->_HTC_GetReservedHeadroom = _HTC_GetReservedHeadroom;
  909de2:	186a4a        	l32r	a8, 8e470c <bStandardCommand+0x8a8>
  909de5:	9827      	s32i.n	a8, a2, 28
	pAPIs->_HTC_MsgRecvHandler = HTCMsgRecvHandler;
  909de7:	186a4b        	l32r	a8, 8e4714 <bStandardCommand+0x8b0>
  909dea:	9828      	s32i.n	a8, a2, 32
	pAPIs->_HTC_SendDoneHandler = HTCSendDoneHandler;
  909dec:	186a4c        	l32r	a8, 8e471c <bStandardCommand+0x8b8>
  909def:	9829      	s32i.n	a8, a2, 36
	pAPIs->_HTC_ControlSvcProcessMsg = HTCControlSvcProcessMsg;
  909df1:	186a4d        	l32r	a8, 8e4728 <bStandardCommand+0x8c4>
  909df4:	982a      	s32i.n	a8, a2, 40
	pAPIs->_HTC_ControlSvcProcessSendComplete = HTCControlSvcProcessSendComplete;
  909df6:	186a4e        	l32r	a8, 8e4730 <bStandardCommand+0x8cc>
  909df9:	982b      	s32i.n	a8, a2, 44
  909dfb:	d10f      	retw.n
  909dfd:	000000        	ill

00909e00 <HTCFreeMsgBuffer>:
}

/* free message to the free list */
LOCAL void HTCFreeMsgBuffer(HTC_CONTEXT *pHTC, adf_nbuf_t buf) 
{
  909e00:	6c1004        	entry	a1, 32
	BUF_Pool_free_buf(pHTC->PoolHandle, POOL_ID_HTC_CONTROL, buf);      
  909e03:	186913        	l32r	a8, 8e4250 <bStandardCommand+0x3ec>
  909e06:	2a229b        	l32i	a10, a2, 0x26c
  909e09:	28829e        	l32i	a8, a8, 0x278
  909e0c:	c0b0      	movi.n	a11, 0
  909e0e:	033c02        	or	a12, a3, a3
  909e11:	0b8000        	callx8	a8
  909e14:	d10f      	retw.n
	...

00909e18 <HTCAllocMsgBuffer>:
}

/* HTC control message allocator (also used for empty frames to send trailer options) */
LOCAL adf_nbuf_t HTCAllocMsgBuffer(HTC_CONTEXT *pHTC)
{
  909e18:	6c1004        	entry	a1, 32
	return BUF_Pool_alloc_buf(pHTC->PoolHandle,
  909e1b:	186913        	l32r	a8, 8e4268 <bStandardCommand+0x404>
  909e1e:	24229b        	l32i	a4, a2, 0x26c
  909e21:	23829c        	l32i	a3, a8, 0x270
  909e24:	288285        	l32i	a8, a8, 0x214
  909e27:	da20      	mov.n	a10, a2
  909e29:	0b8000        	callx8	a8
  909e2c:	dca0      	mov.n	a12, a10
  909e2e:	c0b0      	movi.n	a11, 0
  909e30:	da40      	mov.n	a10, a4
  909e32:	0b3000        	callx8	a3
				  POOL_ID_HTC_CONTROL,
				  HTC_GetReservedHeadroom(pHTC));   
}
  909e35:	d2a0      	mov.n	a2, a10
  909e37:	d10f      	retw.n
  909e39:	000000        	ill

00909e3c <_HTC_Ready>:
	pService->pNext = pHTC->pServiceList;
	pHTC->pServiceList = pService;
}

LOCAL void _HTC_Ready(htc_handle_t htcHandle)
{
  909e3c:	6c1004        	entry	a1, 32
	adf_nbuf_t pBuffer;
	HTC_READY_MSG *pReady;
	a_uint8_t *addr;
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)htcHandle;
    
	pBuffer = HTCAllocMsgBuffer(pHTC);
  909e3f:	022a02        	or	a10, a2, a2
  909e42:	5bfff5        	call8	909e18 <HTCAllocMsgBuffer>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  909e45:	c0b8      	movi.n	a11, 8
  909e47:	d4a0      	mov.n	a4, a10
  909e49:	5bf374        	call8	906c1c <__adf_nbuf_put_tail>
	/* an optimization... the header length is chosen to
	 * be aligned on a 16 bit bounday, the fields in the message are designed to
	 * be aligned */
	addr = adf_nbuf_put_tail(pBuffer, sizeof(HTC_READY_MSG));       
	pReady = (HTC_READY_MSG *)addr;     
	A_MEMZERO(pReady,sizeof(HTC_READY_MSG));  
  909e4c:	156913        	l32r	a5, 8e4298 <bStandardCommand+0x434>
  909e4f:	c0b0      	movi.n	a11, 0
  909e51:	8854      	l32i.n	a8, a5, 16
  909e53:	c0c8      	movi.n	a12, 8
  909e55:	d3a0      	mov.n	a3, a10
  909e57:	0b8000        	callx8	a8
	pReady->MessageID = adf_os_htons(HTC_MSG_READY_ID);
  909e5a:	c0b0      	movi.n	a11, 0
  909e5c:	c081      	movi.n	a8, 1
  909e5e:	2b3400        	s8i	a11, a3, 0
  909e61:	283401        	s8i	a8, a3, 1
	pReady->CreditSize = adf_os_htons((A_UINT16)pHTC->RecvBufferSize);
  909e64:	282291        	l32i	a8, a2, 0x244
	pReady->CreditCount = adf_os_htons((A_UINT16)pHTC->TotalCredits);
	pReady->MaxEndpoints = ENDPOINT_MAX;
       
	/* send out the message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer);
  909e67:	da20      	mov.n	a10, a2
	 * be aligned */
	addr = adf_nbuf_put_tail(pBuffer, sizeof(HTC_READY_MSG));       
	pReady = (HTC_READY_MSG *)addr;     
	A_MEMZERO(pReady,sizeof(HTC_READY_MSG));  
	pReady->MessageID = adf_os_htons(HTC_MSG_READY_ID);
	pReady->CreditSize = adf_os_htons((A_UINT16)pHTC->RecvBufferSize);
  909e69:	08084f        	extui	a8, a8, 0, 16
  909e6c:	088914        	srli	a9, a8, 8
  909e6f:	293404        	s8i	a9, a3, 4
  909e72:	283405        	s8i	a8, a3, 5
	pReady->CreditCount = adf_os_htons((A_UINT16)pHTC->TotalCredits);
  909e75:	282294        	l32i	a8, a2, 0x250
	pReady->MaxEndpoints = ENDPOINT_MAX;
       
	/* send out the message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer);
  909e78:	dc40      	mov.n	a12, a4
	addr = adf_nbuf_put_tail(pBuffer, sizeof(HTC_READY_MSG));       
	pReady = (HTC_READY_MSG *)addr;     
	A_MEMZERO(pReady,sizeof(HTC_READY_MSG));  
	pReady->MessageID = adf_os_htons(HTC_MSG_READY_ID);
	pReady->CreditSize = adf_os_htons((A_UINT16)pHTC->RecvBufferSize);
	pReady->CreditCount = adf_os_htons((A_UINT16)pHTC->TotalCredits);
  909e7a:	08084f        	extui	a8, a8, 0, 16
  909e7d:	088914        	srli	a9, a8, 8
  909e80:	283403        	s8i	a8, a3, 3
	pReady->MaxEndpoints = ENDPOINT_MAX;
  909e83:	c186      	movi.n	a8, 22
	addr = adf_nbuf_put_tail(pBuffer, sizeof(HTC_READY_MSG));       
	pReady = (HTC_READY_MSG *)addr;     
	A_MEMZERO(pReady,sizeof(HTC_READY_MSG));  
	pReady->MessageID = adf_os_htons(HTC_MSG_READY_ID);
	pReady->CreditSize = adf_os_htons((A_UINT16)pHTC->RecvBufferSize);
	pReady->CreditCount = adf_os_htons((A_UINT16)pHTC->TotalCredits);
  909e85:	293402        	s8i	a9, a3, 2
	pReady->MaxEndpoints = ENDPOINT_MAX;
  909e88:	283406        	s8i	a8, a3, 6
       
	/* send out the message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer);
  909e8b:	235284        	l32i	a3, a5, 0x210
  909e8e:	0b3000        	callx8	a3
  909e91:	d10f      	retw.n
	...

00909e94 <HTCCheckAndSendCreditReport>:
				  HTC_GetReservedHeadroom(pHTC));   
}

LOCAL void HTCCheckAndSendCreditReport(HTC_CONTEXT *pHTC, A_UINT32 EpMask,
				       HTC_ENDPOINT *pEndpoint, HTC_ENDPOINT_ID Eid)
{
  909e94:	6c1004        	entry	a1, 32
	adf_nbuf_t pCredBuffer;
	HTC_BUF_CONTEXT *ctx;    
        
	do {
		/* check if host needs credits */
		if (!(pHTC->EpHostNeedsCreditMap & EpMask)) {
  909e97:	282285        	l32i	a8, a2, 0x214
  909e9a:	78305a        	bnone	a3, a8, 909ef8 <HTCCheckAndSendCreditReport+0x64>
			/* host does not need any credits for this set */
			break;    
		}
		/* check if any are pending */
		if (!(pHTC->EpCreditPendingMap & EpMask)) {
  909e9d:	282286        	l32i	a8, a2, 0x218
  909ea0:	783054        	bnone	a3, a8, 909ef8 <HTCCheckAndSendCreditReport+0x64>
			/* nothing to send up */
			break;    
		}  
		/* was an endpoint specified? */
		if (pEndpoint != NULL) {
  909ea3:	c945      	beqz.n	a4, 909ebc <HTCCheckAndSendCreditReport+0x28>
			/* see if a threshold is in effect for this endpoint */
			if (pEndpoint->CreditReturnThreshhold != 0) {
  909ea5:	234904        	l16si	a3, a4, 8
  909ea8:	c834      	beqz.n	a3, 909eb0 <HTCCheckAndSendCreditReport+0x1c>
				if (pEndpoint->CreditsToReturn < pEndpoint->CreditReturnThreshhold) {
  909eaa:	284900        	l16si	a8, a4, 0
  909ead:	738247        	blt	a8, a3, 909ef8 <HTCCheckAndSendCreditReport+0x64>
					 * back to the host */
					break;
				}
			}
         
			if (pEndpoint->PendingCreditReports >= pHTC->MaxEpPendingCreditRpts) {
  909eb0:	8844      	l32i.n	a8, a4, 16
  909eb2:	232299        	l32i	a3, a2, 0x264
  909eb5:	738203        	blt	a8, a3, 909ebc <HTCCheckAndSendCreditReport+0x28>
  909eb8:	600009        	j	909ec5 <HTCCheckAndSendCreditReport+0x31>
  909ebb:	00da20        	excw
		}
        
		/* if we get here we have some credits to send up */
                        
		/* allocate a message buffer for the trailer */
		pCredBuffer = HTCAllocMsgBuffer(pHTC);
  909ebe:	5bffd6        	call8	909e18 <HTCAllocMsgBuffer>
  909ec1:	d3a0      	mov.n	a3, a10
		if (NULL == pCredBuffer) {
  909ec3:	ccae      	bnez.n	a10, 909ed5 <HTCCheckAndSendCreditReport+0x41>
			/* no buffers left to send an empty message with trailers, host will just
			 * have to wait until we get our endpoint 0 messages back.. */
			/* mark that we need to send an update as soon as we can get a buffer back */
			pHTC->StateFlags |= HTC_SEND_CREDIT_UPDATE_SOON;
  909ec5:	242292        	l32i	a4, a2, 0x248
  909ec8:	c032      	movi.n	a3, 2
  909eca:	034302        	or	a3, a4, a3
  909ecd:	232692        	s32i	a3, a2, 0x248
  909ed0:	d10f      	retw.n
  909ed2:	000000        	ill
 * @return data pointer to typecast into your priv structure
 */
static inline a_uint8_t *
adf_nbuf_get_priv(adf_nbuf_t buf)
{
    return (__adf_nbuf_get_priv(buf));
  909ed5:	5bf2c3        	call8	9069e4 <__adf_nbuf_get_priv>
			break;    
		}
        
		ctx = (HTC_BUF_CONTEXT *)adf_nbuf_get_priv(pCredBuffer);
		if (pEndpoint != NULL) {
  909ed8:	c84d      	beqz.n	a4, 909ee9 <HTCCheckAndSendCreditReport+0x55>
			/* keep track of pending reports */
			pEndpoint->PendingCreditReports++; 
  909eda:	8844      	l32i.n	a8, a4, 16
  909edc:	b188      	addi.n	a8, a8, 1
  909ede:	9844      	s32i.n	a8, a4, 16
			/* save the endpoint in order to decrement the count when the send completes */
			ctx->htc_flags = Eid | HTC_FLAGS_CREDIT_RPT;
  909ee0:	240a20        	movi	a4, 32
  909ee3:	045502        	or	a5, a5, a4
  909ee6:	25a401        	s8i	a5, a10, 1
		}   
            
		/* this is an empty message, the HTC_SendMsg will tack on a trailer in the remaining
		 * space, NOTE: no need to flush the cache, the header and trailers are assembled
		 * using uncached addresses */
		HTC_SendMsg(pHTC, ENDPOINT0, pCredBuffer);    
  909ee9:	146913        	l32r	a4, 8e4338 <bStandardCommand+0x4d4>
  909eec:	da20      	mov.n	a10, a2
  909eee:	244284        	l32i	a4, a4, 0x210
  909ef1:	c0b0      	movi.n	a11, 0
  909ef3:	dc30      	mov.n	a12, a3
  909ef5:	0b4000        	callx8	a4
  909ef8:	d10f      	retw.n
	...

00909efc <HTCControlSvcProcessSendComplete>:
}

/* callback when endpoint 0 send buffers are completed */
LOCAL void HTCControlSvcProcessSendComplete(HTC_ENDPOINT_ID EndpointID,
					    adf_nbuf_t pBuffers, void *arg)
{
  909efc:	6c1004        	entry	a1, 32
  909eff:	da30      	mov.n	a10, a3
  909f01:	5bf2b8        	call8	9069e4 <__adf_nbuf_get_priv>
	HTC_ENDPOINT_ID creditRptEndpoint;
    
	ctx = (HTC_BUF_CONTEXT *)adf_nbuf_get_priv(pBuffers);       
    
	/* put them back into the pool */
	if ( ctx->htc_flags & HTC_FLAGS_CREDIT_RPT ) {   
  909f04:	28a001        	l8ui	a8, a10, 1
  909f07:	7a870e        	bbci	a8, 26, 909f19 <HTCControlSvcProcessSendComplete+0x1d>
		/* extract the endpoint number that requested this credit report */ 
		creditRptEndpoint = ctx->htc_flags & HTC_FLAGS_CRPT_EP_MASK;    
  909f0a:	080844        	extui	a8, a8, 0, 5
		pHTC->Endpoints[creditRptEndpoint].PendingCreditReports--;  
  909f0d:	088809        	addx2	a8, a8, a8
  909f10:	04880b        	addx8	a8, a8, a4
  909f13:	8985      	l32i.n	a9, a8, 20
  909f15:	b099      	addi.n	a9, a9, -1
  909f17:	9985      	s32i.n	a9, a8, 20
	}
    
	HTCFreeMsgBuffer(pHTC, pBuffers);
  909f19:	db30      	mov.n	a11, a3
  909f1b:	da40      	mov.n	a10, a4
  909f1d:	5bffb8        	call8	909e00 <HTCFreeMsgBuffer>
   
	if (pHTC->StateFlags & HTC_SEND_CREDIT_UPDATE_SOON) {
  909f20:	234292        	l32i	a3, a4, 0x248
  909f23:	7e3712        	bbci	a3, 30, 909f39 <HTCControlSvcProcessSendComplete+0x3d>
		/* this flag is set when the host could not send a credit report
		 * because we ran out of HTC control buffers */
		pHTC->StateFlags &= ~HTC_SEND_CREDIT_UPDATE_SOON;
  909f26:	c78d      	movi.n	a8, -3
  909f28:	083301        	and	a3, a3, a8
  909f2b:	234692        	s32i	a3, a4, 0x248
		/* send out a report if anything is pending */
		HTCCheckAndSendCreditReport(pHTC, HTC_ANY_ENDPOINT_MASK,NULL,ENDPOINT_MAX);
  909f2e:	da40      	mov.n	a10, a4
  909f30:	c7bf      	movi.n	a11, -1
  909f32:	c0c0      	movi.n	a12, 0
  909f34:	c1d6      	movi.n	a13, 22
  909f36:	5bffd7        	call8	909e94 <HTCCheckAndSendCreditReport>
  909f39:	d10f      	retw.n
	...

00909f3c <ReturnBuffers>:
	/* now we need to wait for service connection requests */
}

LOCAL void ReturnBuffers(htc_handle_t htcHandle, HTC_ENDPOINT_ID EndpointID,
			 adf_nbuf_t pBuffers, A_BOOL sendCreditFlag)
{   
  909f3c:	6c1004        	entry	a1, 32
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  909f3f:	044a02        	or	a10, a4, a4
  909f42:	2b0a08        	movi	a11, 8
  909f45:	5bf277        	call8	906924 <__adf_nbuf_push_head>
    
	/* supply some head-room again */
	adf_nbuf_push_head(pBuffers, HTC_HDR_LENGTH);
              
	/* enqueue all buffers to the single mailbox */
	HIF_return_recv_buf(pHTC->hifHandle, pHTC->Endpoints[EndpointID].UpLinkPipeID, pBuffers);    
  909f48:	186913        	l32r	a8, 8e4394 <bStandardCommand+0x530>
  909f4b:	033609        	addx2	a6, a3, a3
  909f4e:	02660b        	addx8	a6, a6, a2
  909f51:	288277        	l32i	a8, a8, 0x1dc
  909f54:	2a229a        	l32i	a10, a2, 0x268
  909f57:	2b6019        	l8ui	a11, a6, 25
  909f5a:	044c02        	or	a12, a4, a4
  909f5d:	0b8000        	callx8	a8
     
	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {       
  909f60:	242292        	l32i	a4, a2, 0x248
  909f63:	7f472d        	bbci	a4, 31, 909f94 <ReturnBuffers+0x58>
		A_UINT32    epCreditMask = (1 << EndpointID);
		/* we are running normally */
		/* update pending credit counts with the number of buffers that were added */
		pHTC->Endpoints[EndpointID].CreditsToReturn += (A_INT16)nbufs;
  909f66:	246102        	l16ui	a4, a6, 4
              
	/* enqueue all buffers to the single mailbox */
	HIF_return_recv_buf(pHTC->hifHandle, pHTC->Endpoints[EndpointID].UpLinkPipeID, pBuffers);    
     
	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {       
		A_UINT32    epCreditMask = (1 << EndpointID);
  909f69:	c0b1      	movi.n	a11, 1
		/* we are running normally */
		/* update pending credit counts with the number of buffers that were added */
		pHTC->Endpoints[EndpointID].CreditsToReturn += (A_INT16)nbufs;
  909f6b:	b144      	addi.n	a4, a4, 1
  909f6d:	246502        	s16i	a4, a6, 4
		pHTC->Endpoints[EndpointID].CreditsConsumed -= (A_INT16)nbufs;  
  909f70:	246107        	l16ui	a4, a6, 14
              
	/* enqueue all buffers to the single mailbox */
	HIF_return_recv_buf(pHTC->hifHandle, pHTC->Endpoints[EndpointID].UpLinkPipeID, pBuffers);    
     
	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {       
		A_UINT32    epCreditMask = (1 << EndpointID);
  909f73:	003104        	ssl	a3
  909f76:	00bb1a        	sll	a11, a11
		/* we are running normally */
		/* update pending credit counts with the number of buffers that were added */
		pHTC->Endpoints[EndpointID].CreditsToReturn += (A_INT16)nbufs;
		pHTC->Endpoints[EndpointID].CreditsConsumed -= (A_INT16)nbufs;  
  909f79:	b044      	addi.n	a4, a4, -1
  909f7b:	246507        	s16i	a4, a6, 14
		/* update bit map that this endpoint has non-zero credits */
		pHTC->EpCreditPendingMap |= epCreditMask; 
  909f7e:	242286        	l32i	a4, a2, 0x218
  909f81:	0b4402        	or	a4, a4, a11
  909f84:	242686        	s32i	a4, a2, 0x218

		if (sendCreditFlag) {
  909f87:	c951      	beqz.n	a5, 909f9c <ReturnBuffers+0x60>
			HTCCheckAndSendCreditReport(pHTC, epCreditMask,&pHTC->Endpoints[EndpointID],EndpointID);
  909f89:	da20      	mov.n	a10, a2
  909f8b:	b46c      	addi.n	a12, a6, 4
  909f8d:	dd30      	mov.n	a13, a3
  909f8f:	5bffc1        	call8	909e94 <HTCCheckAndSendCreditReport>
  909f92:	d10f      	retw.n
	} else {
		/* we have not started yet so all return operations are simply adding buffers
		 * to the interface at startup, so we can keep track of how many total 
		 * credits we get */
		/* update global count that will be returned to the host */
		pHTC->TotalCredits += nbufs;
  909f94:	232294        	l32i	a3, a2, 0x250
  909f97:	b133      	addi.n	a3, a3, 1
  909f99:	232694        	s32i	a3, a2, 0x250
  909f9c:	d10f      	retw.n
	...

00909fa0 <_HTC_ReturnBuffers>:
	HTCCheckAndSendCreditReport(pHTC, (1 << EndpointID),&pHTC->Endpoints[EndpointID],EndpointID);
}

LOCAL void _HTC_ReturnBuffers(htc_handle_t htcHandle, HTC_ENDPOINT_ID EndpointID,
			      adf_nbuf_t pBuffers)
{
  909fa0:	6c1004        	entry	a1, 32
	ReturnBuffers(htcHandle, EndpointID, pBuffers, TRUE);
  909fa3:	da20      	mov.n	a10, a2
  909fa5:	db30      	mov.n	a11, a3
  909fa7:	dc40      	mov.n	a12, a4
  909fa9:	c0d1      	movi.n	a13, 1
  909fab:	5bffe4        	call8	909f3c <ReturnBuffers>
  909fae:	d10f      	retw.n

00909fb0 <_HTC_ReturnBuffersList>:
}

LOCAL void _HTC_ReturnBuffersList(htc_handle_t htcHandle,
				  HTC_ENDPOINT_ID EndpointID,
				  adf_nbuf_queue_t bufHead)
{
  909fb0:	6c1006        	entry	a1, 48
 * @return first buffer in queue
 */
static inline adf_nbuf_t 
adf_nbuf_queue_first(adf_nbuf_queue_t *head)
{
    return (__adf_nbuf_queue_first(head));
  909fb3:	da10      	mov.n	a10, a1
  909fb5:	9410      	s32i.n	a4, a1, 0
  909fb7:	9511      	s32i.n	a5, a1, 4
  909fb9:	9612      	s32i.n	a6, a1, 8
  909fbb:	5bf340        	call8	906cbc <__adf_nbuf_queue_first>
  909fbe:	d4a0      	mov.n	a4, a10
	adf_nbuf_t netbuf, tmpNbuf;

	/* retrieve each nbuf in the queue */
	netbuf = adf_nbuf_queue_first(&bufHead);

	while (netbuf) {
  909fc0:	600014        	j	909fd8 <_HTC_ReturnBuffersList+0x28>
  909fc3:	00da40        	extui	a10, a0, 13, 1
 * @return next buffer/packet
 */
static inline adf_nbuf_t
adf_nbuf_queue_next(adf_nbuf_t buf)
{
    return (__adf_nbuf_queue_next(buf));
  909fc6:	5bf33f        	call8	906cc4 <__adf_nbuf_queue_next>
  909fc9:	d5a0      	mov.n	a5, a10

		tmpNbuf = netbuf;
		netbuf = adf_nbuf_queue_next(netbuf);

		ReturnBuffers(htcHandle, EndpointID, tmpNbuf, FALSE);
  909fcb:	dc40      	mov.n	a12, a4
  909fcd:	da20      	mov.n	a10, a2
  909fcf:	db30      	mov.n	a11, a3
  909fd1:	c0d0      	movi.n	a13, 0
  909fd3:	5bffda        	call8	909f3c <ReturnBuffers>
	netbuf = adf_nbuf_queue_first(&bufHead);

	while (netbuf) {

		tmpNbuf = netbuf;
		netbuf = adf_nbuf_queue_next(netbuf);
  909fd6:	d450      	mov.n	a4, a5
	adf_nbuf_t netbuf, tmpNbuf;

	/* retrieve each nbuf in the queue */
	netbuf = adf_nbuf_queue_first(&bufHead);

	while (netbuf) {
  909fd8:	654fe8        	bnez	a4, 909fc4 <_HTC_ReturnBuffersList+0x14>
		netbuf = adf_nbuf_queue_next(netbuf);

		ReturnBuffers(htcHandle, EndpointID, tmpNbuf, FALSE);
	}

	HTCCheckAndSendCreditReport(pHTC, (1 << EndpointID),&pHTC->Endpoints[EndpointID],EndpointID);
  909fdb:	033c09        	addx2	a12, a3, a3
  909fde:	02cc0b        	addx8	a12, a12, a2
  909fe1:	c0b1      	movi.n	a11, 1
  909fe3:	da20      	mov.n	a10, a2
  909fe5:	003104        	ssl	a3
  909fe8:	00bb1a        	sll	a11, a11
  909feb:	b4cc      	addi.n	a12, a12, 4
  909fed:	dd30      	mov.n	a13, a3
  909fef:	5bffa9        	call8	909e94 <HTCCheckAndSendCreditReport>
  909ff2:	d10f      	retw.n

00909ff4 <HTCProcessConnectMsg>:
	} while (FALSE);      
}
        
/* called in response to the arrival of a service connection message */
LOCAL void HTCProcessConnectMsg(HTC_CONTEXT *pHTC, HTC_CONNECT_SERVICE_MSG *pMsg)
{
  909ff4:	6c1008        	entry	a1, 64
	HTC_SERVICE *pService = pHTC->pServiceList;
	A_UINT8 connectStatus = HTC_SERVICE_NOT_FOUND;
	adf_nbuf_t pBuffer;
	HTC_CONNECT_SERVICE_RESPONSE_MSG *pRspMsg;
	int metaDataOutLen = 0;
  909ff7:	c060      	movi.n	a6, 0
  909ff9:	9610      	s32i.n	a6, a1, 0
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
    
	pBuffer = HTCAllocMsgBuffer(pHTC);
  909ffb:	da20      	mov.n	a10, a2
	HTC_SERVICE *pService = pHTC->pServiceList;
	A_UINT8 connectStatus = HTC_SERVICE_NOT_FOUND;
	adf_nbuf_t pBuffer;
	HTC_CONNECT_SERVICE_RESPONSE_MSG *pRspMsg;
	int metaDataOutLen = 0;
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
  909ffd:	243003        	l8ui	a4, a3, 3
  90a000:	273002        	l8ui	a7, a3, 2
}
        
/* called in response to the arrival of a service connection message */
LOCAL void HTCProcessConnectMsg(HTC_CONTEXT *pHTC, HTC_CONNECT_SERVICE_MSG *pMsg)
{
	HTC_SERVICE *pService = pHTC->pServiceList;
  90a003:	252290        	l32i	a5, a2, 0x240
	adf_nbuf_t pBuffer;
	HTC_CONNECT_SERVICE_RESPONSE_MSG *pRspMsg;
	int metaDataOutLen = 0;
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
    
	pBuffer = HTCAllocMsgBuffer(pHTC);
  90a006:	5bff84        	call8	909e18 <HTCAllocMsgBuffer>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  90a009:	c0ba      	movi.n	a11, 10
  90a00b:	9a14      	s32i.n	a10, a1, 16
  90a00d:	5bf303        	call8	906c1c <__adf_nbuf_put_tail>
	/* note : this will be aligned */
	pRspMsg = (HTC_CONNECT_SERVICE_RESPONSE_MSG *)
                adf_nbuf_put_tail(pBuffer, sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
                                 
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
  90a010:	196913        	l32r	a9, 8e445c <bStandardCommand+0x5f8>
	HTC_SERVICE *pService = pHTC->pServiceList;
	A_UINT8 connectStatus = HTC_SERVICE_NOT_FOUND;
	adf_nbuf_t pBuffer;
	HTC_CONNECT_SERVICE_RESPONSE_MSG *pRspMsg;
	int metaDataOutLen = 0;
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
  90a013:	087711        	slli	a7, a7, 8
	pBuffer = HTCAllocMsgBuffer(pHTC);
	/* note : this will be aligned */
	pRspMsg = (HTC_CONNECT_SERVICE_RESPONSE_MSG *)
                adf_nbuf_put_tail(pBuffer, sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
                                 
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
  90a016:	8994      	l32i.n	a9, a9, 16
  90a018:	db60      	mov.n	a11, a6
  90a01a:	c0ca      	movi.n	a12, 10
	HTC_SERVICE *pService = pHTC->pServiceList;
	A_UINT8 connectStatus = HTC_SERVICE_NOT_FOUND;
	adf_nbuf_t pBuffer;
	HTC_CONNECT_SERVICE_RESPONSE_MSG *pRspMsg;
	int metaDataOutLen = 0;
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
  90a01c:	074702        	or	a7, a4, a7
  90a01f:	d4a0      	mov.n	a4, a10
	pBuffer = HTCAllocMsgBuffer(pHTC);
	/* note : this will be aligned */
	pRspMsg = (HTC_CONNECT_SERVICE_RESPONSE_MSG *)
                adf_nbuf_put_tail(pBuffer, sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
                                 
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
  90a021:	0b9000        	callx8	a9
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONNECT_SERVICE_RESPONSE_ID);
  90a024:	c083      	movi.n	a8, 3
  90a026:	284401        	s8i	a8, a4, 1
	/* reflect the service ID for this connect attempt */
	pRspMsg->ServiceID = adf_os_htons(serviceId);
  90a029:	078814        	srli	a8, a7, 8
  90a02c:	284402        	s8i	a8, a4, 2
	/* note : this will be aligned */
	pRspMsg = (HTC_CONNECT_SERVICE_RESPONSE_MSG *)
                adf_nbuf_put_tail(pBuffer, sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
                                 
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONNECT_SERVICE_RESPONSE_ID);
  90a02f:	264400        	s8i	a6, a4, 0
	/* reflect the service ID for this connect attempt */
	pRspMsg->ServiceID = adf_os_htons(serviceId);
  90a032:	274403        	s8i	a7, a4, 3

	while (pService) {
        
		if (pHTC->CurrentEpIndex >= ENDPOINT_MAX) {
  90a035:	c185      	movi.n	a8, 21
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONNECT_SERVICE_RESPONSE_ID);
	/* reflect the service ID for this connect attempt */
	pRspMsg->ServiceID = adf_os_htons(serviceId);

	while (pService) {
  90a037:	600079        	j	90a0b4 <HTCProcessConnectMsg+0xc0>
  90a03a:	00002b        	mulsh	a0, a0, a0
        
		if (pHTC->CurrentEpIndex >= ENDPOINT_MAX) {
  90a03d:	22887b        	excw
  90a040:	827b      	l32i.n	a2, a7, 44
			/* no more endpoints */
			connectStatus = HTC_SERVICE_NO_RESOURCES;
			break;    
		}

		if (serviceId == pService->ServiceID) {
  90a042:	295108        	l16ui	a9, a5, 16
  90a045:	779969        	bne	a9, a7, 90a0b2 <HTCProcessConnectMsg+0xbe>
			A_UINT8 *pMetaDataOut;
            
			/* outgoing meta data resides in the space after the response message */
			pMetaDataOut = ((A_UINT8 *)pRspMsg) + sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG);
            
			if (pMsg->ServiceMetaLength != 0) {
  90a048:	2d3008        	l8ui	a13, a3, 8
				/* the meta data follows the connect service message */
				pMetaDataIN = ((A_UINT8 *)pMsg) + sizeof(HTC_CONNECT_SERVICE_MSG);
  90a04b:	ba37      	addi.n	a7, a3, 10
  90a04d:	c0c0      	movi.n	a12, 0
  90a04f:	0d7c39        	movnez	a12, a7, a13
			}

			/* call the connect callback with the endpoint to use and pointers to meta data */
			connectStatus = pService->ProcessConnect(pService,
  90a052:	8753      	l32i.n	a7, a5, 12
  90a054:	da50      	mov.n	a10, a5
  90a056:	ba4e      	addi.n	a14, a4, 10
  90a058:	df10      	mov.n	a15, a1
  90a05a:	0b7000        	callx8	a7
  90a05d:	d8a0      	mov.n	a8, a10
								 pMsg->ServiceMetaLength,
								 pMetaDataOut,
								 &metaDataOutLen);
            
			/* check if the service accepted this connection request */
			if (HTC_SERVICE_SUCCESS == connectStatus) {
  90a05f:	65a05d        	bnez	a10, 90a0c0 <HTCProcessConnectMsg+0xcc>
				/* set the length of the response meta data going back to the host */
				pRspMsg->ServiceMetaLength = (A_UINT8)metaDataOutLen;
  90a062:	8710      	l32i.n	a7, a1, 0
  90a064:	274408        	s8i	a7, a4, 8
				/* set the endpoint ID the host will now communicate over */
				pRspMsg->EndpointID = pHTC->CurrentEpIndex;
  90a067:	272288        	l32i	a7, a2, 0x220
  90a06a:	274405        	s8i	a7, a4, 5
				/* return the maximum message size for this service */
				pRspMsg->MaxMsgSize = adf_os_htons((A_UINT16)pService->MaxSvcMsgSize);
  90a06d:	275014        	l8ui	a7, a5, 20
  90a070:	274406        	s8i	a7, a4, 6
  90a073:	275015        	l8ui	a7, a5, 21
  90a076:	274407        	s8i	a7, a4, 7
				/* assign this endpoint to this service, this will be used in routing messages */
				pHTC->Endpoints[pHTC->CurrentEpIndex].pService = pService;
  90a079:	272288        	l32i	a7, a2, 0x220
  90a07c:	077909        	addx2	a9, a7, a7
  90a07f:	02990b        	addx8	a9, a9, a2
  90a082:	9592      	s32i.n	a5, a9, 8
				/* set connection flags */
				pHTC->Endpoints[pHTC->CurrentEpIndex].ConnectionFlags = pMsg->ConnectionFlags;
  90a084:	2a3004        	l8ui	a10, a3, 4
  90a087:	2b3005        	l8ui	a11, a3, 5
  90a08a:	08aa11        	slli	a10, a10, 8
  90a08d:	0aba02        	or	a10, a11, a10
  90a090:	2a9508        	s16i	a10, a9, 16
                
				pHTC->Endpoints[pHTC->CurrentEpIndex].DownLinkPipeID = pMsg->DownLinkPipeID;
  90a093:	2a3006        	l8ui	a10, a3, 6
				pHTC->Endpoints[pHTC->CurrentEpIndex].UpLinkPipeID = pMsg->UpLinkPipeID;
                
				/* mark that we are now connected */
				pService->ServiceFlags |= HTC_SERVICE_FLAGS_CONNECTED;
				/* bump up our index, this EP is now in use */
				pHTC->CurrentEpIndex++;   
  90a096:	b177      	addi.n	a7, a7, 1
				/* assign this endpoint to this service, this will be used in routing messages */
				pHTC->Endpoints[pHTC->CurrentEpIndex].pService = pService;
				/* set connection flags */
				pHTC->Endpoints[pHTC->CurrentEpIndex].ConnectionFlags = pMsg->ConnectionFlags;
                
				pHTC->Endpoints[pHTC->CurrentEpIndex].DownLinkPipeID = pMsg->DownLinkPipeID;
  90a098:	2a9418        	s8i	a10, a9, 24
				pHTC->Endpoints[pHTC->CurrentEpIndex].UpLinkPipeID = pMsg->UpLinkPipeID;
  90a09b:	233007        	l8ui	a3, a3, 7
  90a09e:	239419        	s8i	a3, a9, 25
                
				/* mark that we are now connected */
				pService->ServiceFlags |= HTC_SERVICE_FLAGS_CONNECTED;
  90a0a1:	295109        	l16ui	a9, a5, 18
  90a0a4:	c031      	movi.n	a3, 1
  90a0a6:	039302        	or	a3, a9, a3
  90a0a9:	235509        	s16i	a3, a5, 18
				/* bump up our index, this EP is now in use */
				pHTC->CurrentEpIndex++;   
  90a0ac:	272688        	s32i	a7, a2, 0x220
  90a0af:	60000d        	j	90a0c0 <HTCProcessConnectMsg+0xcc>
			}

			break;
		}       
        
		pService = pService->pNext;   
  90a0b2:	8550      	l32i.n	a5, a5, 0
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONNECT_SERVICE_RESPONSE_ID);
	/* reflect the service ID for this connect attempt */
	pRspMsg->ServiceID = adf_os_htons(serviceId);

	while (pService) {
  90a0b4:	655f84        	bnez	a5, 90a03c <HTCProcessConnectMsg+0x48>
        
/* called in response to the arrival of a service connection message */
LOCAL void HTCProcessConnectMsg(HTC_CONTEXT *pHTC, HTC_CONNECT_SERVICE_MSG *pMsg)
{
	HTC_SERVICE *pService = pHTC->pServiceList;
	A_UINT8 connectStatus = HTC_SERVICE_NOT_FOUND;
  90a0b7:	c081      	movi.n	a8, 1
  90a0b9:	600003        	j	90a0c0 <HTCProcessConnectMsg+0xcc>
  90a0bc:	0000c0        	excw

	while (pService) {
        
		if (pHTC->CurrentEpIndex >= ENDPOINT_MAX) {
			/* no more endpoints */
			connectStatus = HTC_SERVICE_NO_RESOURCES;
  90a0bf:	8313      	l32i.n	a3, a1, 12
	}
                   
	pRspMsg->Status = connectStatus;    
    
	/* send out the response message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer); 
  90a0c1:	691328        	bnei	a1, 3, 90a0ed <HTCProcessConfigPipeMsg+0x19>
		}       
        
		pService = pService->pNext;   
	}
                   
	pRspMsg->Status = connectStatus;    
  90a0c4:	440423        	excw
    
	/* send out the response message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer); 
  90a0c7:	32848c        	excw
  90a0ca:	14da20        	l32r	a4, 90094c <memset+0x19b04>
  90a0cd:	c0b0      	movi.n	a11, 0
  90a0cf:	0b3000        	callx8	a3
  90a0d2:	d10f      	retw.n

0090a0d4 <HTCProcessConfigPipeMsg>:
}

LOCAL void HTCProcessConfigPipeMsg(HTC_CONTEXT *pHTC, HTC_CONFIG_PIPE_MSG *pMsg)
{
  90a0d4:	6c1004        	entry	a1, 32
	adf_nbuf_t pBuffer;
	HTC_CONFIG_PIPE_RESPONSE_MSG *pRspMsg;
        
	pBuffer = HTCAllocMsgBuffer(pHTC);
  90a0d7:	022a02        	or	a10, a2, a2
  90a0da:	5bff4f        	call8	909e18 <HTCAllocMsgBuffer>
  90a0dd:	c0b4      	movi.n	a11, 4
  90a0df:	d6a0      	mov.n	a6, a10
  90a0e1:	5bf2ce        	call8	906c1c <__adf_nbuf_put_tail>
       
	/* note : this will be aligned */
	pRspMsg = (HTC_CONFIG_PIPE_RESPONSE_MSG *)
                adf_nbuf_put_tail(pBuffer, sizeof(HTC_CONFIG_PIPE_RESPONSE_MSG));    
              
	A_MEMZERO(pRspMsg,sizeof(HTC_CONFIG_PIPE_RESPONSE_MSG));
  90a0e4:	156913        	l32r	a5, 8e4530 <bStandardCommand+0x6cc>
  90a0e7:	c0b0      	movi.n	a11, 0
  90a0e9:	8754      	l32i.n	a7, a5, 16
  90a0eb:	c0c4      	movi.n	a12, 4
  90a0ed:	d4a0      	mov.n	a4, a10
  90a0ef:	0b7000        	callx8	a7
    
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONFIG_PIPE_RESPONSE_ID);
  90a0f2:	c086      	movi.n	a8, 6
  90a0f4:	c070      	movi.n	a7, 0
  90a0f6:	274400        	s8i	a7, a4, 0
  90a0f9:	284401        	s8i	a8, a4, 1
	/* reflect the service ID for this connect attempt */
	pRspMsg->PipeID = pMsg->PipeID;
  90a0fc:	283002        	l8ui	a8, a3, 2
  90a0ff:	284402        	s8i	a8, a4, 2

	if ( HIF_is_pipe_supported(pHTC->hifHandle, pMsg->PipeID) ) {
  90a102:	285278        	l32i	a8, a5, 0x1e0
  90a105:	2a229a        	l32i	a10, a2, 0x268
  90a108:	2b3002        	l8ui	a11, a3, 2
  90a10b:	0b8000        	callx8	a8
  90a10e:	c9a2      	beqz.n	a10, 90a124 <HTCProcessConfigPipeMsg+0x50>
		pRspMsg->Status = 0;            
  90a110:	274403        	s8i	a7, a4, 3
	} else {
		pRspMsg->Status = 1; 
		goto config_done;
	}

	if ( (pHTC->TotalCreditsAssigned + pMsg->CreditCount) <= pHTC->TotalCredits ) {
  90a113:	283003        	l8ui	a8, a3, 3
  90a116:	272295        	l32i	a7, a2, 0x254
  90a119:	a787      	add.n	a7, a8, a7
  90a11b:	282294        	l32i	a8, a2, 0x250
  90a11e:	77821e        	blt	a8, a7, 90a140 <HTCProcessConfigPipeMsg+0x6c>
  90a121:	600005        	j	90a12a <HTCProcessConfigPipeMsg+0x56>
	pRspMsg->PipeID = pMsg->PipeID;

	if ( HIF_is_pipe_supported(pHTC->hifHandle, pMsg->PipeID) ) {
		pRspMsg->Status = 0;            
	} else {
		pRspMsg->Status = 1; 
  90a124:	c031      	movi.n	a3, 1
  90a126:	600018        	j	90a142 <HTCProcessConfigPipeMsg+0x6e>
  90a129:	002726        	excw
		goto config_done;
	}

	if ( (pHTC->TotalCreditsAssigned + pMsg->CreditCount) <= pHTC->TotalCredits ) {
		pHTC->TotalCreditsAssigned += pMsg->CreditCount;
  90a12c:	9524      	s32i.n	a5, a2, 16
	} else {
		pRspMsg->Status = 2;
		goto config_done;
	}
    
	HIF_config_pipe(pHTC->hifHandle, pMsg->PipeID, pMsg->CreditCount);
  90a12e:	52752a        	call0	8a75d8 <_bss_end+0x3946c8>
  90a131:	229a2b        	movi	a2, 0xfffff92b
  90a134:	30022c        	excw
  90a137:	30030b        	excw
  90a13a:	400060        	excw
  90a13d:	000500        	syscall
	}

	if ( (pHTC->TotalCreditsAssigned + pMsg->CreditCount) <= pHTC->TotalCredits ) {
		pHTC->TotalCreditsAssigned += pMsg->CreditCount;
	} else {
		pRspMsg->Status = 2;
  90a140:	c032      	movi.n	a3, 2
  90a142:	234403        	s8i	a3, a4, 3
    
	HIF_config_pipe(pHTC->hifHandle, pMsg->PipeID, pMsg->CreditCount);
    
config_done:      
	/* send out the response message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer);             
  90a145:	136913        	l32r	a3, 8e4594 <bStandardCommand+0x730>
  90a148:	da20      	mov.n	a10, a2
  90a14a:	233284        	l32i	a3, a3, 0x210
  90a14d:	c0b0      	movi.n	a11, 0
  90a14f:	dc60      	mov.n	a12, a6
  90a151:	0b3000        	callx8	a3
  90a154:	d10f      	retw.n
	...

0090a158 <HTCControlSvcProcessMsg>:
}

/* process an incomming control message from the host */
LOCAL void HTCControlSvcProcessMsg(HTC_ENDPOINT_ID EndpointID, adf_nbuf_t hdr_buf,
				   adf_nbuf_t pBuffers, void *arg)
{  
  90a158:	6c1006        	entry	a1, 48
	a_uint8_t *anbdata;
	a_uint32_t anblen;
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)arg;
	HTC_UNKNOWN_MSG  *pMsg;
	
	adf_os_assert(hdr_buf == ADF_NBUF_NULL);
  90a15b:	c935      	beqz.n	a3, 90a174 <HTCControlSvcProcessMsg+0x1c>
  90a15d:	136913        	l32r	a3, 8e45ac <bStandardCommand+0x748>
  90a160:	1a6a4f        	l32r	a10, 8e4a9c <mUsbEPinHighBandSet+0xfc>
  90a163:	233212        	l32i	a3, a3, 72
  90a166:	1b6a50        	l32r	a11, 8e4aa8 <mUsbEPinHighBandSet+0x108>
  90a169:	0b3000        	callx8	a3
  90a16c:	136978        	l32r	a3, 8e474c <bStandardCommand+0x8e8>
  90a16f:	0c0200        	memw
  90a172:	8330      	l32i.n	a3, a3, 0
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90a174:	b41b      	addi.n	a11, a1, 4
  90a176:	da40      	mov.n	a10, a4
  90a178:	dc10      	mov.n	a12, a1
  90a17a:	5bf2c4        	call8	906c8c <__adf_nbuf_peek_header>

	/* we assume buffers are aligned such that we can access the message
	 * parameters directly*/
	adf_nbuf_peek_header(pBuffers, &anbdata, &anblen);
	pMsg = (HTC_UNKNOWN_MSG *)anbdata;
  90a17d:	8b11      	l32i.n	a11, a1, 4
    
	/* we cannot handle fragmented messages across buffers */
    
	switch ( adf_os_ntohs(pMsg->MessageID) ) {        
  90a17f:	28b000        	l8ui	a8, a11, 0
  90a182:	23b001        	l8ui	a3, a11, 1
  90a185:	088811        	slli	a8, a8, 8
  90a188:	083802        	or	a8, a3, a8
		break;            
        case HTC_MSG_SETUP_COMPLETE_ID:
                /* the host has indicated that it has completed all
		   setup tasks and we can now let the services take over to
		   run the rest of the application */
		setupComplete = TRUE;  
  90a18b:	c031      	movi.n	a3, 1
	adf_nbuf_peek_header(pBuffers, &anbdata, &anblen);
	pMsg = (HTC_UNKNOWN_MSG *)anbdata;
    
	/* we cannot handle fragmented messages across buffers */
    
	switch ( adf_os_ntohs(pMsg->MessageID) ) {        
  90a18d:	688417        	beqi	a8, 4, 90a1a8 <HTCControlSvcProcessMsg+0x50>
  90a190:	68850d        	beqi	a8, 5, 90a1a1 <HTCControlSvcProcessMsg+0x49>
  90a193:	688202        	beqi	a8, 2, 90a199 <HTCControlSvcProcessMsg+0x41>
  90a196:	60000c        	j	90a1a6 <HTCControlSvcProcessMsg+0x4e>
        case HTC_MSG_CONNECT_SERVICE_ID:
		HTCProcessConnectMsg(pHTC, (HTC_CONNECT_SERVICE_MSG *)pMsg); 
  90a199:	da50      	mov.n	a10, a5
  90a19b:	5bff96        	call8	909ff4 <HTCProcessConnectMsg>
  90a19e:	600004        	j	90a1a6 <HTCControlSvcProcessMsg+0x4e>
		break;
        case HTC_MSG_CONFIG_PIPE_ID:
		HTCProcessConfigPipeMsg(pHTC, (HTC_CONFIG_PIPE_MSG *)pMsg); 
  90a1a1:	da50      	mov.n	a10, a5
  90a1a3:	5bffcc        	call8	90a0d4 <HTCProcessConfigPipeMsg>

/* process an incomming control message from the host */
LOCAL void HTCControlSvcProcessMsg(HTC_ENDPOINT_ID EndpointID, adf_nbuf_t hdr_buf,
				   adf_nbuf_t pBuffers, void *arg)
{  
	A_BOOL setupComplete = FALSE;
  90a1a6:	c030      	movi.n	a3, 0
		break;
        default:
		;
	}  
        
	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {
  90a1a8:	285292        	l32i	a8, a5, 0x248
  90a1ab:	166913        	l32r	a6, 8e45f8 <bStandardCommand+0x794>
  90a1ae:	7f8710        	bbci	a8, 31, 90a1c2 <HTCControlSvcProcessMsg+0x6a>
		/* recycle buffer only if we are fully running */
		HTC_ReturnBuffers(pHTC, ENDPOINT0,pBuffers);
  90a1b1:	226282        	l32i	a2, a6, 0x208
  90a1b4:	da50      	mov.n	a10, a5
  90a1b6:	c0b0      	movi.n	a11, 0
  90a1b8:	dc40      	mov.n	a12, a4
  90a1ba:	0b2000        	callx8	a2
  90a1bd:	60001c        	j	90a1dd <HTCControlSvcProcessMsg+0x85>
  90a1c0:	0000c0        	excw
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  90a1c3:	b8da      	addi.n	a10, a13, 8
  90a1c5:	400222        	excw
	} else {
		/* supply some head-room again */
		adf_nbuf_push_head(pBuffers, HTC_HDR_LENGTH);
            
		/* otherwise return the packet back to mbox */
		HIF_return_recv_buf(pHTC->hifHandle, pHTC->Endpoints[EndpointID].UpLinkPipeID, pBuffers);        
  90a1c8:	095bf1        	excw
  90a1cb:	d605      	excw
  90a1cd:	220b26        	l32ai	a2, a0, 152
  90a1d0:	62772a        	j	8f18fe <memset+0xaab6>
  90a1d3:	529a2b        	call0	8b0a80 <_bss_end+0x39db70>
  90a1d6:	2019dc        	l16si	a0, a1, 0x1b8
  90a1d9:	400b60        	excw
  90a1dc:	00c931        	excw
	}

	if (setupComplete) {        
		/* mark that setup has completed */
		pHTC->StateFlags |= HTC_STATE_SETUP_COMPLETE; 
  90a1df:	235292        	l32i	a3, a5, 0x248
  90a1e2:	c021      	movi.n	a2, 1
  90a1e4:	023202        	or	a2, a3, a2
  90a1e7:	225692        	s32i	a2, a5, 0x248
		if (pHTC->SetupCompleteCb != NULL) {
  90a1ea:	225293        	l32i	a2, a5, 0x24c
  90a1ed:	c821      	beqz.n	a2, 90a1f2 <HTCControlSvcProcessMsg+0x9a>
			pHTC->SetupCompleteCb();
  90a1ef:	0b2000        	callx8	a2
  90a1f2:	d10f      	retw.n

0090a1f4 <AdjustCreditThreshold>:
					  buf, 
					  pHTC->Endpoints[current_eid].pService->ServiceCtx);
}

LOCAL void AdjustCreditThreshold(HTC_ENDPOINT  *pEndpoint)
{
  90a1f4:	6c1004        	entry	a1, 32
	A_INT16 creditsOutstanding = pEndpoint->CreditsToReturn + pEndpoint->CreditsConsumed;
  90a1f7:	292105        	l16ui	a9, a2, 10
  90a1fa:	282100        	l16ui	a8, a2, 0
  90a1fd:	a898      	add.n	a8, a9, a8
        /* set the new threshold based on the number of credits that have been consumed
         * and which have not been returned by the app.
         * Note: it is okay for this threshold to be zero which indicates no threshold 
         * is in use */    
	switch (pEndpoint->ConnectionFlags & HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_MASK) {
  90a1ff:	292106        	l16ui	a9, a2, 12
					  pHTC->Endpoints[current_eid].pService->ServiceCtx);
}

LOCAL void AdjustCreditThreshold(HTC_ENDPOINT  *pEndpoint)
{
	A_INT16 creditsOutstanding = pEndpoint->CreditsToReturn + pEndpoint->CreditsConsumed;
  90a202:	088832        	sext	a8, a8, 15
        /* set the new threshold based on the number of credits that have been consumed
         * and which have not been returned by the app.
         * Note: it is okay for this threshold to be zero which indicates no threshold 
         * is in use */    
	switch (pEndpoint->ConnectionFlags & HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_MASK) {
  90a205:	090941        	extui	a9, a9, 0, 2
  90a208:	689108        	beqi	a9, 1, 90a214 <AdjustCreditThreshold+0x20>
  90a20b:	c89e      	beqz.n	a9, 90a21d <AdjustCreditThreshold+0x29>
  90a20d:	69920f        	bnei	a9, 2, 90a220 <AdjustCreditThreshold+0x2c>
  90a210:	600006        	j	90a21a <AdjustCreditThreshold+0x26>
  90a213:	000818        	src	a8, a0, a0
        case HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_ONE_FOURTH :
		creditsOutstanding >>= 2;
		break;                    
        case HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_ONE_HALF :
		creditsOutstanding >>= 1;
  90a216:	126000        	l32r	a2, 8e2218 <athos_indirection_table_install+0xca4>
		break;
  90a219:	050888        	excw
        case HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_THREE_FOURTHS :  
		creditsOutstanding = (creditsOutstanding * 3) >> 2;                  
  90a21c:	090828        	mull	a8, a0, a9
  90a21f:	122825        	l32r	a2, 8d42b4 <_bss_end+0x3c13a4>
		break;
		/* default case is unity */    
	}
    
	pEndpoint->CreditReturnThreshhold = creditsOutstanding;
  90a222:	04d10f        	subx8	a1, a13, a4
  90a225:	000000        	ill

0090a228 <_HTC_SendMsg>:
	ReturnBuffers(htcHandle, EndpointID, pBuffers, TRUE);
}
 
LOCAL void _HTC_SendMsg(htc_handle_t htcHandle, HTC_ENDPOINT_ID EndpointID,
			adf_nbuf_t pBuffers)
{
  90a228:	6c1008        	entry	a1, 64
 * @return data pointer to typecast into your priv structure
 */
static inline a_uint8_t *
adf_nbuf_get_priv(adf_nbuf_t buf)
{
    return (__adf_nbuf_get_priv(buf));
  90a22b:	044a02        	or	a10, a4, a4
  90a22e:	5bf1ed        	call8	9069e4 <__adf_nbuf_get_priv>
  90a231:	d6a0      	mov.n	a6, a10
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  90a233:	da40      	mov.n	a10, a4
  90a235:	5bf28d        	call8	906c6c <__adf_nbuf_len>
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  90a238:	c0b8      	movi.n	a11, 8
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  90a23a:	d7a0      	mov.n	a7, a10
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  90a23c:	da40      	mov.n	a10, a4
  90a23e:	5bf1b9        	call8	906924 <__adf_nbuf_push_head>
	 * Note: in HTCSendDoneHandler(), we undo this so that the caller get's it's buffer
	 * back untainted */   
	pHTCHdr = (HTC_FRAME_HDR *)adf_nbuf_push_head(pBuffers, HTC_HDR_LENGTH);
    
	/* flag that this is the header buffer that was modified */
	ctx->htc_flags |= HTC_FLAGS_BUF_HDR;   
  90a241:	296001        	l8ui	a9, a6, 1
  90a244:	c480      	movi.n	a8, 64
  90a246:	089802        	or	a8, a9, a8
  90a249:	286401        	s8i	a8, a6, 1
	/* mark where this buffer came from */
	ctx->end_point = EndpointID;      
  90a24c:	030847        	extui	a8, a3, 0, 8
  90a24f:	286400        	s8i	a8, a6, 0
	/* the header start is ALWAYS aligned since we DMA it directly */

        /* set some fields, the rest of them will be filled below when we check for
	 * trailer space */
	pHTCHdr->Flags = 0;
  90a252:	c060      	movi.n	a6, 0
  90a254:	26a401        	s8i	a6, a10, 1
	pHTCHdr->EndpointID = EndpointID;    
  90a257:	28a400        	s8i	a8, a10, 0
		HTC_RECORD_HDR    *pRecHdr;
		int               pipeMaxLen;
		A_UINT32          roomForPipeMaxLen;
                          
		/* figure out how much room the last buffer can spare */
		pipeMaxLen = HIF_get_max_msg_len(pHTC->hifHandle,
  90a25a:	166913        	l32r	a6, 8e46a8 <bStandardCommand+0x844>
  90a25d:	033809        	addx2	a8, a3, a3
  90a260:	02880b        	addx8	a8, a8, a2
  90a263:	2b8018        	l8ui	a11, a8, 24
  90a266:	266279        	l32i	a6, a6, 0x1e4
  90a269:	d5a0      	mov.n	a5, a10
  90a26b:	2a229a        	l32i	a10, a2, 0x268
  90a26e:	0b6000        	callx8	a6
  90a271:	d6a0      	mov.n	a6, a10
 * @return amount of head room
 */
static inline a_uint32_t
adf_nbuf_headroom(adf_nbuf_t buf)
{
    return (__adf_nbuf_headroom(buf));
  90a273:	da40      	mov.n	a10, a4
  90a275:	5bf273        	call8	906c44 <__adf_nbuf_headroom>
						 pHTC->Endpoints[EndpointID].DownLinkPipeID);
		roomForPipeMaxLen = pipeMaxLen - adf_nbuf_headroom(pBuffers) - adf_nbuf_len(pBuffers);
  90a278:	0a660c        	sub	a6, a6, a10
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  90a27b:	da40      	mov.n	a10, a4
  90a27d:	5bf27b        	call8	906c6c <__adf_nbuf_len>
  90a280:	0a660c        	sub	a6, a6, a10
 * @return amount of tail room 
 */
static inline a_uint32_t
adf_nbuf_tailroom(adf_nbuf_t buf)
{
    return (__adf_nbuf_tailroom(buf));
  90a283:	da40      	mov.n	a10, a4
  90a285:	5bf272        	call8	906c50 <__adf_nbuf_tailroom>
		if ( roomForPipeMaxLen < 0 ) {
			roomForPipeMaxLen = 0;
		}
                        
		room = adf_os_min( adf_nbuf_tailroom(pBuffers), roomForPipeMaxLen);
  90a288:	dd60      	mov.n	a13, a6
  90a28a:	76ab06        	bgeu	a10, a6, 90a294 <_HTC_SendMsg+0x6c>
  90a28d:	da40      	mov.n	a10, a4
  90a28f:	5bf270        	call8	906c50 <__adf_nbuf_tailroom>
  90a292:	dda0      	mov.n	a13, a10
		if (room < (int)(sizeof(HTC_CREDIT_REPORT) + sizeof(HTC_RECORD_HDR))) {
  90a294:	6bd402        	bgei	a13, 4, 90a29a <_HTC_SendMsg+0x72>
  90a297:	6000bd        	j	90a358 <_HTC_SendMsg+0x130>
		/* note, a record header only has 8 bit fields, so this is safe.
		 * we need an uncached pointer here too */            
		totalReportBytes = 0;
        
		/* get a copy */        
		creditsPendingMap = pHTC->EpCreditPendingMap;   
  90a29a:	262286        	l32i	a6, a2, 0x218
                           
		/* test pending map to see if we can send a report , if any
		 * credits are available, we might as well send them on the 
		 * unused space in the buffer */
		if (creditsPendingMap) { 
  90a29d:	6460b7        	beqz	a6, 90a358 <_HTC_SendMsg+0x130>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  90a2a0:	da40      	mov.n	a10, a4
  90a2a2:	c0b2      	movi.n	a11, 2
  90a2a4:	9d15      	s32i.n	a13, a1, 20
  90a2a6:	5bf25d        	call8	906c1c <__adf_nbuf_put_tail>
			pRecHdr = (HTC_RECORD_HDR *)adf_nbuf_put_tail(pBuffers,
							      sizeof(HTC_RECORD_HDR));
            
			/* set the ID, the length will be updated with the number of credit reports we
			 * can fit (see below) */
			pRecHdr->RecordID = HTC_RECORD_CREDITS;
  90a2a9:	c081      	movi.n	a8, 1
  90a2ab:	28a400        	s8i	a8, a10, 0
			pRecHdr->Length = 0;
  90a2ae:	c080      	movi.n	a8, 0
  90a2b0:	28a401        	s8i	a8, a10, 1
			/* the credit report follows the record header */         
			totalReportBytes += sizeof(HTC_RECORD_HDR);
			room -= sizeof(HTC_RECORD_HDR);
  90a2b3:	8d15      	l32i.n	a13, a1, 20
  90a2b5:	dea0      	mov.n	a14, a10
  90a2b7:	2ddcfe        	addi	a13, a13, -2
  90a2ba:	dc20      	mov.n	a12, a2
			/* set the ID, the length will be updated with the number of credit reports we
			 * can fit (see below) */
			pRecHdr->RecordID = HTC_RECORD_CREDITS;
			pRecHdr->Length = 0;
			/* the credit report follows the record header */         
			totalReportBytes += sizeof(HTC_RECORD_HDR);
  90a2bc:	c092      	movi.n	a9, 2
			room -= sizeof(HTC_RECORD_HDR);
            
			/* walkthrough pending credits map and build the records */
			for (i = 0; 
  90a2be:	c080      	movi.n	a8, 0
  90a2c0:	600077        	j	90a33b <_HTC_SendMsg+0x113>
  90a2c3:	00c0a1        	excw
			     (creditsPendingMap != 0) && (room >= (int)sizeof(HTC_CREDIT_REPORT)); 
			     i++) {                
				compareMask = (1 << i);
  90a2c6:	008104        	ssl	a8
  90a2c9:	00af1a        	sll	a15, a10
				if (compareMask & creditsPendingMap) {
  90a2cc:	76f066        	bnone	a15, a6, 90a336 <_HTC_SendMsg+0x10e>
  90a2cf:	c0b2      	movi.n	a11, 2
  90a2d1:	da40      	mov.n	a10, a4
  90a2d3:	9811      	s32i.n	a8, a1, 4
  90a2d5:	9912      	s32i.n	a9, a1, 8
  90a2d7:	9c14      	s32i.n	a12, a1, 16
  90a2d9:	9d15      	s32i.n	a13, a1, 20
  90a2db:	9e13      	s32i.n	a14, a1, 12
  90a2dd:	9f10      	s32i.n	a15, a1, 0
  90a2df:	5bf24f        	call8	906c1c <__adf_nbuf_put_tail>
									    sizeof(HTC_CREDIT_REPORT));
                                    
					/* clear pending mask, we are going to return all these credits */
					creditsPendingMap &= ~(compareMask);
					/* add this record */
					pCreditRpt->EndpointID = i;
  90a2e2:	8811      	l32i.n	a8, a1, 4
                        
					pCreditRpt = (HTC_CREDIT_REPORT *)adf_nbuf_put_tail(pBuffers,
									    sizeof(HTC_CREDIT_REPORT));
                                    
					/* clear pending mask, we are going to return all these credits */
					creditsPendingMap &= ~(compareMask);
  90a2e4:	8f10      	l32i.n	a15, a1, 0
					/* add this record */
					pCreditRpt->EndpointID = i;
  90a2e6:	28a400        	s8i	a8, a10, 0
					pCreditRpt->Credits = (A_UINT8)pHTC->Endpoints[i].CreditsToReturn;
  90a2e9:	8c14      	l32i.n	a12, a1, 16
                        
					pCreditRpt = (HTC_CREDIT_REPORT *)adf_nbuf_put_tail(pBuffers,
									    sizeof(HTC_CREDIT_REPORT));
                                    
					/* clear pending mask, we are going to return all these credits */
					creditsPendingMap &= ~(compareMask);
  90a2eb:	c7bf      	movi.n	a11, -1
  90a2ed:	0fbf03        	xor	a15, a11, a15
					/* add this record */
					pCreditRpt->EndpointID = i;
					pCreditRpt->Credits = (A_UINT8)pHTC->Endpoints[i].CreditsToReturn;
  90a2f0:	2bc102        	l16ui	a11, a12, 4
                        
					pCreditRpt = (HTC_CREDIT_REPORT *)adf_nbuf_put_tail(pBuffers,
									    sizeof(HTC_CREDIT_REPORT));
                                    
					/* clear pending mask, we are going to return all these credits */
					creditsPendingMap &= ~(compareMask);
  90a2f3:	0f6601        	and	a6, a6, a15
					/* add this record */
					pCreditRpt->EndpointID = i;
					pCreditRpt->Credits = (A_UINT8)pHTC->Endpoints[i].CreditsToReturn;
  90a2f6:	2ba401        	s8i	a11, a10, 1
					/* remove pending credits, we always send deltas */
					pHTC->Endpoints[i].CreditsToReturn = 0; 
  90a2f9:	c0a0      	movi.n	a10, 0
  90a2fb:	2ac502        	s16i	a10, a12, 4
					/* adjust new threshold for this endpoint if needed */
					CHECK_AND_ADJUST_CREDIT_THRESHOLD(&pHTC->Endpoints[i]);
  90a2fe:	2ac108        	l16ui	a10, a12, 16
  90a301:	8912      	l32i.n	a9, a1, 8
  90a303:	8d15      	l32i.n	a13, a1, 20
  90a305:	8e13      	l32i.n	a14, a1, 12
  90a307:	7da71a        	bbci	a10, 29, 90a325 <_HTC_SendMsg+0xfd>
  90a30a:	088a09        	addx2	a10, a8, a8
  90a30d:	02aa0b        	addx8	a10, a10, a2
  90a310:	b4aa      	addi.n	a10, a10, 4
  90a312:	9811      	s32i.n	a8, a1, 4
  90a314:	2c1604        	s32i	a12, a1, 16
  90a317:	5bffb7        	call8	90a1f4 <AdjustCreditThreshold>
  90a31a:	8e13      	l32i.n	a14, a1, 12
  90a31c:	8d15      	l32i.n	a13, a1, 20
  90a31e:	8c14      	l32i.n	a12, a1, 16
  90a320:	8912      	l32i.n	a9, a1, 8
  90a322:	281201        	l32i	a8, a1, 4
					/* update this record length */
					pRecHdr->Length += sizeof(HTC_CREDIT_REPORT);
  90a325:	2ae001        	l8ui	a10, a14, 1
					room -= sizeof(HTC_CREDIT_REPORT);
  90a328:	2ddcfe        	addi	a13, a13, -2
					/* remove pending credits, we always send deltas */
					pHTC->Endpoints[i].CreditsToReturn = 0; 
					/* adjust new threshold for this endpoint if needed */
					CHECK_AND_ADJUST_CREDIT_THRESHOLD(&pHTC->Endpoints[i]);
					/* update this record length */
					pRecHdr->Length += sizeof(HTC_CREDIT_REPORT);
  90a32b:	b2aa      	addi.n	a10, a10, 2
  90a32d:	2ae401        	s8i	a10, a14, 1
					room -= sizeof(HTC_CREDIT_REPORT);
					totalReportBytes += sizeof(HTC_CREDIT_REPORT);
  90a330:	299c02        	addi	a9, a9, 2

					if ( room < sizeof(HTC_CREDIT_REPORT) ) {
  90a333:	6ed20a        	bltui	a13, 2, 90a341 <_HTC_SendMsg+0x119>
			room -= sizeof(HTC_RECORD_HDR);
            
			/* walkthrough pending credits map and build the records */
			for (i = 0; 
			     (creditsPendingMap != 0) && (room >= (int)sizeof(HTC_CREDIT_REPORT)); 
			     i++) {                
  90a336:	b188      	addi.n	a8, a8, 1
  90a338:	2ccc18        	addi	a12, a12, 24
			totalReportBytes += sizeof(HTC_RECORD_HDR);
			room -= sizeof(HTC_RECORD_HDR);
            
			/* walkthrough pending credits map and build the records */
			for (i = 0; 
			     (creditsPendingMap != 0) && (room >= (int)sizeof(HTC_CREDIT_REPORT)); 
  90a33b:	6ad202        	blti	a13, 2, 90a341 <_HTC_SendMsg+0x119>
			/* the credit report follows the record header */         
			totalReportBytes += sizeof(HTC_RECORD_HDR);
			room -= sizeof(HTC_RECORD_HDR);
            
			/* walkthrough pending credits map and build the records */
			for (i = 0; 
  90a33e:	656f82        	bnez	a6, 90a2c4 <_HTC_SendMsg+0x9c>
					}
				}
			}
            
			/* update new pending credits map */       
			pHTC->EpCreditPendingMap = creditsPendingMap;
  90a341:	262686        	s32i	a6, a2, 0x218
		}
        
		if (totalReportBytes <= 0) {
  90a344:	6a9110        	blti	a9, 1, 90a358 <_HTC_SendMsg+0x130>
		 */
        
		/* set header option bytes */ 
		pHTCHdr->ControlBytes[0] = totalReportBytes;
		/* HTC frame contains a trailer */
		pHTCHdr->Flags |= HTC_FLAGS_RECV_TRAILER;
  90a347:	285001        	l8ui	a8, a5, 1
  90a34a:	c062      	movi.n	a6, 2
  90a34c:	068602        	or	a6, a8, a6
		 * The trailer can have at most 1 credit record with up to 32  reports in the record.
		 * The trailer can have at most 1 lookahead record with only 1 lookahead report in the record.
		 */
        
		/* set header option bytes */ 
		pHTCHdr->ControlBytes[0] = totalReportBytes;
  90a34f:	295404        	s8i	a9, a5, 4
		/* HTC frame contains a trailer */
		pHTCHdr->Flags |= HTC_FLAGS_RECV_TRAILER;
  90a352:	265401        	s8i	a6, a5, 1
		/* increment total size by the reports we added */
		totsz += totalReportBytes;
  90a355:	097708        	add	a7, a7, a9
          
	if (totsz == 0) {
	}
    
	/* set length for message (this includes any reports that were added above) */
	pHTCHdr->PayloadLen = adf_os_htons(totsz);  
  90a358:	07074f        	extui	a7, a7, 0, 16
  90a35b:	078614        	srli	a6, a7, 8
  90a35e:	265402        	s8i	a6, a5, 2
  90a361:	275403        	s8i	a7, a5, 3
	HIF_send_buffer(pHTC->hifHandle, pHTC->Endpoints[EndpointID].DownLinkPipeID, pBuffers);       
  90a364:	033309        	addx2	a3, a3, a3
  90a367:	156913        	l32r	a5, 8e47b4 <bStandardCommand+0x950>
  90a36a:	02330b        	addx8	a3, a3, a2
  90a36d:	255276        	l32i	a5, a5, 0x1d8
  90a370:	2a229a        	l32i	a10, a2, 0x268
  90a373:	2b3018        	l8ui	a11, a3, 24
  90a376:	044c02        	or	a12, a4, a4
  90a379:	0b5000        	callx8	a5
  90a37c:	d10f      	retw.n
	...

0090a380 <HTCMsgRecvHandler>:

}
            
/* callback from the mailbox hardware layer when a full message arrives */
LOCAL void HTCMsgRecvHandler(adf_nbuf_t hdr_buf, adf_nbuf_t buffer, void *context)
{
  90a380:	6c1008        	entry	a1, 64
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)context;
	adf_nbuf_t tmp_nbuf;
                
	if (hdr_buf == ADF_NBUF_NULL) {
		/* HTC hdr is not in the hdr_buf */
		tmp_nbuf = buffer;
  90a383:	d530      	mov.n	a5, a3
  90a385:	022539        	movnez	a5, a2, a2
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90a388:	da50      	mov.n	a10, a5
  90a38a:	b41b      	addi.n	a11, a1, 4
  90a38c:	dc10      	mov.n	a12, a1
  90a38e:	5bf23f        	call8	906c8c <__adf_nbuf_peek_header>
	else {
		tmp_nbuf = hdr_buf;
	}
                
	adf_nbuf_peek_header(tmp_nbuf, &anbdata, &anblen);        
	pHTCHdr = (HTC_FRAME_HDR *)anbdata; 
  90a391:	8911      	l32i.n	a9, a1, 4
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)context;
	adf_nbuf_t tmp_nbuf;
                
	if (hdr_buf == ADF_NBUF_NULL) {
		/* HTC hdr is not in the hdr_buf */
		tmp_nbuf = buffer;
  90a393:	d750      	mov.n	a7, a5
	eid = pHTCHdr->EndpointID; 
    
	pEndpoint = &pHTC->Endpoints[eid];
	eidMask = 1 << eid;

	if (pHTCHdr->Flags & HTC_FLAGS_CREDIT_REDISTRIBUTION) {
  90a395:	259001        	l8ui	a5, a9, 1
	adf_nbuf_peek_header(tmp_nbuf, &anbdata, &anblen);        
	pHTCHdr = (HTC_FRAME_HDR *)anbdata; 
      
	totsz = adf_os_ntohs(pHTCHdr->PayloadLen); 
    
	eid = pHTCHdr->EndpointID; 
  90a398:	269000        	l8ui	a6, a9, 0
    
	pEndpoint = &pHTC->Endpoints[eid];
	eidMask = 1 << eid;

	if (pHTCHdr->Flags & HTC_FLAGS_CREDIT_REDISTRIBUTION) {
  90a39b:	7d5f76        	bbsi	a5, 29, 90a415 <HTCMsgRecvHandler+0x95>
      
	totsz = adf_os_ntohs(pHTCHdr->PayloadLen); 
    
	eid = pHTCHdr->EndpointID; 
    
	pEndpoint = &pHTC->Endpoints[eid];
  90a39e:	066509        	addx2	a5, a6, a6
		 * Byte 0 */
		RedistributeCredit(tmp_nbuf, pHTCHdr->ControlBytes[0]);
		return;
	}

	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {
  90a3a1:	284292        	l32i	a8, a4, 0x248
      
	totsz = adf_os_ntohs(pHTCHdr->PayloadLen); 
    
	eid = pHTCHdr->EndpointID; 
    
	pEndpoint = &pHTC->Endpoints[eid];
  90a3a4:	04550b        	addx8	a5, a5, a4
  90a3a7:	b455      	addi.n	a5, a5, 4
		 * Byte 0 */
		RedistributeCredit(tmp_nbuf, pHTCHdr->ControlBytes[0]);
		return;
	}

	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {
  90a3a9:	7f8707        	bbci	a8, 31, 90a3b4 <HTCMsgRecvHandler+0x34>
		/* after setup we keep track of credit consumption to allow us to
		 * adjust thresholds to reduce credit dribbling */  
		pEndpoint->CreditsConsumed ++;
  90a3ac:	285105        	l16ui	a8, a5, 10
  90a3af:	b188      	addi.n	a8, a8, 1
  90a3b1:	285505        	s16i	a8, a5, 10
	/* from the design document, we put the endpoint into a "host-needs-credit" state
	 * when we receive a frame with the NEED_CREDIT_UPDATE flag set .
	 * if the host received credits through an opportunistic path, then it can
	 * issue a another frame with this bit cleared, this signals the target to clear
	 * the "host-needs-credit" state */    
	if (pHTCHdr->Flags & HTC_FLAGS_NEED_CREDIT_UPDATE) {
  90a3b4:	299001        	l8ui	a9, a9, 1
	totsz = adf_os_ntohs(pHTCHdr->PayloadLen); 
    
	eid = pHTCHdr->EndpointID; 
    
	pEndpoint = &pHTC->Endpoints[eid];
	eidMask = 1 << eid;
  90a3b7:	c081      	movi.n	a8, 1
	/* from the design document, we put the endpoint into a "host-needs-credit" state
	 * when we receive a frame with the NEED_CREDIT_UPDATE flag set .
	 * if the host received credits through an opportunistic path, then it can
	 * issue a another frame with this bit cleared, this signals the target to clear
	 * the "host-needs-credit" state */    
	if (pHTCHdr->Flags & HTC_FLAGS_NEED_CREDIT_UPDATE) {
  90a3b9:	090940        	extui	a9, a9, 0, 1
	totsz = adf_os_ntohs(pHTCHdr->PayloadLen); 
    
	eid = pHTCHdr->EndpointID; 
    
	pEndpoint = &pHTC->Endpoints[eid];
	eidMask = 1 << eid;
  90a3bc:	006104        	ssl	a6
  90a3bf:	00881a        	sll	a8, a8
  90a3c2:	2a4285        	l32i	a10, a4, 0x214
	/* from the design document, we put the endpoint into a "host-needs-credit" state
	 * when we receive a frame with the NEED_CREDIT_UPDATE flag set .
	 * if the host received credits through an opportunistic path, then it can
	 * issue a another frame with this bit cleared, this signals the target to clear
	 * the "host-needs-credit" state */    
	if (pHTCHdr->Flags & HTC_FLAGS_NEED_CREDIT_UPDATE) {
  90a3c5:	c997      	beqz.n	a9, 90a3e0 <HTCMsgRecvHandler+0x60>
		/* the host is running low (or is out) of credits on this
		 * endpoint, update mask */
		pHTC->EpHostNeedsCreditMap |= eidMask; 
  90a3c7:	08aa02        	or	a10, a10, a8
		/* check and set new threshold since host has reached a low credit situation */
		CHECK_AND_ADJUST_CREDIT_THRESHOLD(pEndpoint);                          
  90a3ca:	295106        	l16ui	a9, a5, 12
	 * issue a another frame with this bit cleared, this signals the target to clear
	 * the "host-needs-credit" state */    
	if (pHTCHdr->Flags & HTC_FLAGS_NEED_CREDIT_UPDATE) {
		/* the host is running low (or is out) of credits on this
		 * endpoint, update mask */
		pHTC->EpHostNeedsCreditMap |= eidMask; 
  90a3cd:	2a4685        	s32i	a10, a4, 0x214
		/* check and set new threshold since host has reached a low credit situation */
		CHECK_AND_ADJUST_CREDIT_THRESHOLD(pEndpoint);                          
  90a3d0:	7d971a        	bbci	a9, 29, 90a3ee <HTCMsgRecvHandler+0x6e>
  90a3d3:	da50      	mov.n	a10, a5
  90a3d5:	9814      	s32i.n	a8, a1, 16
  90a3d7:	5bff87        	call8	90a1f4 <AdjustCreditThreshold>
  90a3da:	8814      	l32i.n	a8, a1, 16
  90a3dc:	60000e        	j	90a3ee <HTCMsgRecvHandler+0x6e>
  90a3df:	00c7bf        	excw
	} else {
		/* clear the flag */
		pHTC->EpHostNeedsCreditMap &= ~(eidMask);       
  90a3e2:	08bb03        	xor	a11, a11, a8
  90a3e5:	0baa01        	and	a10, a10, a11
  90a3e8:	2a4685        	s32i	a10, a4, 0x214
		pEndpoint->CreditReturnThreshhold = 0; 
  90a3eb:	295504        	s16i	a9, a5, 8
 *         or NULL if there is not sufficient data to pull.
 */
static inline a_uint8_t *
adf_nbuf_pull_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_pull_head(buf, size);
  90a3ee:	da70      	mov.n	a10, a7
  90a3f0:	c0b8      	movi.n	a11, 8
  90a3f2:	281604        	s32i	a8, a1, 16
  90a3f5:	5bf156        	call8	906950 <__adf_nbuf_pull_head>
	 *        as the result of parsing this message.  In either case, if there are
	 *        pending credits and the host needs them, a credit report will be sent either through 
	 *        the response message trailer or a NULL message through HTC_ReturnBuffers().
	 */       
        
	pEndpoint->pService->ProcessRecvMsg(eid, hdr_buf, buffer, pEndpoint->pService->ServiceCtx);
  90a3f8:	8751      	l32i.n	a7, a5, 4
  90a3fa:	da60      	mov.n	a10, a6
  90a3fc:	8d76      	l32i.n	a13, a7, 24
  90a3fe:	8971      	l32i.n	a9, a7, 4
  90a400:	db20      	mov.n	a11, a2
  90a402:	033c02        	or	a12, a3, a3
  90a405:	0b9000        	callx8	a9

	/* Calls to HTC_ReturnBuffers drives the endpoint credit reporting state machine. 
	 * We do not want to delay credits for too long in the event that the application is 
	 * holding onto buffers for excessive periods of time.  This gives us "some" better
	 * opportunities to send up credits. */
	HTCCheckAndSendCreditReport(pHTC, eidMask, pEndpoint, eid); 
  90a408:	8814      	l32i.n	a8, a1, 16
  90a40a:	da40      	mov.n	a10, a4
  90a40c:	db80      	mov.n	a11, a8
  90a40e:	dc50      	mov.n	a12, a5
  90a410:	dd60      	mov.n	a13, a6
  90a412:	5bfea0        	call8	909e94 <HTCCheckAndSendCreditReport>
  90a415:	d10f      	retw.n
	...

0090a418 <RedistributeCredit>:
	pEndpoint->CreditReturnThreshhold = creditsOutstanding;
    
}

LOCAL void RedistributeCredit(adf_nbuf_t buf, int toPipeId)
{
  90a418:	6c1004        	entry	a1, 32
  90a41b:	d10f      	retw.n
  90a41d:	000000        	ill

0090a420 <WMIServiceConnect>:
                                 HTC_ENDPOINT_ID eid, 
                                 A_UINT8 *pDataIn, 
                                 int LengthIn,
                                 A_UINT8 *pDataOut,
                                 int *pLengthOut)
{
  90a420:	6c1004        	entry	a1, 32
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)pService->ServiceCtx;
    
        /* save the eid to use */
	pWMI->ControlEp = eid;
  90a423:	8826      	l32i.n	a8, a2, 24
  90a425:	938a      	s32i.n	a3, a8, 40
	return HTC_SERVICE_SUCCESS;
}
  90a427:	c020      	movi.n	a2, 0
  90a429:	d10f      	retw.n
	...

0090a42c <_WMI_GetPendingEventsCount>:
    
	return pWMI;
}

static int _WMI_GetPendingEventsCount(wmi_handle_t handle)
{
  90a42c:	6c1004        	entry	a1, 32
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
	return pWMI->PendingEvents;
}
  90a42f:	8222      	l32i.n	a2, a2, 8
  90a431:	d10f      	retw.n
	...

0090a434 <_WMI_GetControlEp>:

static int  _WMI_GetControlEp(wmi_handle_t handle)
{
  90a434:	6c1004        	entry	a1, 32
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
	return pWMI->ControlEp;
}
  90a437:	822a      	l32i.n	a2, a2, 40
  90a439:	d10f      	retw.n
	...

0090a43c <_WMI_RegisterDispatchTable>:

static void _WMI_RegisterDispatchTable(wmi_handle_t handle,
				       WMI_DISPATCH_TABLE *pDispatchTable)
{
  90a43c:	6c1004        	entry	a1, 32
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
    
	if (NULL == pWMI->pDispatchHead) {
  90a43f:	882b      	l32i.n	a8, a2, 44
  90a441:	cc83      	bnez.n	a8, 90a448 <_WMI_RegisterDispatchTable+0xc>
		pWMI->pDispatchHead = pDispatchTable;
  90a443:	932b      	s32i.n	a3, a2, 44
  90a445:	600003        	j	90a44c <_WMI_RegisterDispatchTable+0x10>
		pWMI->pDispatchTail = pDispatchTable;        
	} else {
		/* link to the tail */
		pWMI->pDispatchTail->pNext = pDispatchTable;
  90a448:	882c      	l32i.n	a8, a2, 48
  90a44a:	9380      	s32i.n	a3, a8, 0
		pWMI->pDispatchTail = pDispatchTable;        
  90a44c:	932c      	s32i.n	a3, a2, 48
  90a44e:	d10f      	retw.n

0090a450 <_WMI_Shutdown>:
	
	HTC_SendMsg(pWMI->HtcHandle, pWMI->ControlEp, pEvt);    
}

static void _WMI_Shutdown(wmi_handle_t handle)
{
  90a450:	6c1004        	entry	a1, 32
  90a453:	d10f      	retw.n
  90a455:	000000        	ill

0090a458 <WMIRecvMessageHandler>:

#include "wmi_internal.h"

static void WMIRecvMessageHandler(HTC_ENDPOINT_ID EndPt, adf_nbuf_t hdr_buf,
				  adf_nbuf_t pHTCBuf, void *arg)
{
  90a458:	6c1006        	entry	a1, 48
	int length;
	a_uint8_t *anbdata;
	a_uint32_t anblen;
	WMI_CMD_HDR *cmdHdr;
            
	adf_os_assert(hdr_buf == ADF_NBUF_NULL);
  90a45b:	643016        	beqz	a3, 90a475 <WMIRecvMessageHandler+0x1d>
  90a45e:	136913        	l32r	a3, 8e48ac <bStandardCommand+0xa48>
  90a461:	1a6a51        	l32r	a10, 8e4da8 <mUsbEPinHighBandSet+0x408>
  90a464:	233212        	l32i	a3, a3, 72
  90a467:	1b6a52        	l32r	a11, 8e4db0 <mUsbEPinHighBandSet+0x410>
  90a46a:	0b3000        	callx8	a3
  90a46d:	136978        	l32r	a3, 8e4a50 <mUsbEPinHighBandSet+0xb0>
  90a470:	0c0200        	memw
  90a473:	8330      	l32i.n	a3, a3, 0
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  90a475:	da40      	mov.n	a10, a4
  90a477:	5bf1fd        	call8	906c6c <__adf_nbuf_len>
  90a47a:	d3a0      	mov.n	a3, a10

	do {
		length = adf_nbuf_len(pHTCBuf);
		if (length < sizeof(WMI_CMD_HDR)) {
  90a47c:	6ea465        	bltui	a10, 4, 90a4e5 <WMIRecvMessageHandler+0x8d>
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90a47f:	b41b      	addi.n	a11, a1, 4
  90a481:	dc10      	mov.n	a12, a1
  90a483:	da40      	mov.n	a10, a4
  90a485:	5bf201        	call8	906c8c <__adf_nbuf_peek_header>
		adf_nbuf_peek_header(pHTCBuf, &anbdata, &anblen);
        
		pCurrentTable = pWMI->pDispatchHead;
		length = length - sizeof(WMI_CMD_HDR);
        
		cmdHdr = (WMI_CMD_HDR *)anbdata;
  90a488:	8d11      	l32i.n	a13, a1, 4
		}

		adf_nbuf_peek_header(pHTCBuf, &anbdata, &anblen);
        
		pCurrentTable = pWMI->pDispatchHead;
		length = length - sizeof(WMI_CMD_HDR);
  90a48a:	2e3cfc        	addi	a14, a3, -4
        
		cmdHdr = (WMI_CMD_HDR *)anbdata;
		cmd = adf_os_ntohs(cmdHdr->commandId);
  90a48d:	2bd000        	l8ui	a11, a13, 0
  90a490:	23d001        	l8ui	a3, a13, 1
		seq = adf_os_ntohs(cmdHdr->seqNo);
  90a493:	2cd002        	l8ui	a12, a13, 2
        
		pCurrentTable = pWMI->pDispatchHead;
		length = length - sizeof(WMI_CMD_HDR);
        
		cmdHdr = (WMI_CMD_HDR *)anbdata;
		cmd = adf_os_ntohs(cmdHdr->commandId);
  90a496:	08bb11        	slli	a11, a11, 8
  90a499:	0b3b02        	or	a11, a3, a11
		seq = adf_os_ntohs(cmdHdr->seqNo);
  90a49c:	23d003        	l8ui	a3, a13, 3
  90a49f:	08cc11        	slli	a12, a12, 8
			break;    
		}

		adf_nbuf_peek_header(pHTCBuf, &anbdata, &anblen);
        
		pCurrentTable = pWMI->pDispatchHead;
  90a4a2:	885b      	l32i.n	a8, a5, 44
		length = length - sizeof(WMI_CMD_HDR);
        
		cmdHdr = (WMI_CMD_HDR *)anbdata;
		cmd = adf_os_ntohs(cmdHdr->commandId);
		seq = adf_os_ntohs(cmdHdr->seqNo);
  90a4a4:	0c3c02        	or	a12, a3, a12
        
		pCmdBuffer = anbdata + sizeof(WMI_CMD_HDR); 
  90a4a7:	b4dd      	addi.n	a13, a13, 4
		pCmdHandler = NULL;
        
		while (pCurrentTable != NULL) {
  90a4a9:	600035        	j	90a4e2 <WMIRecvMessageHandler+0x8a>
            
			pContext = pCurrentTable->pContext;
  90a4ac:	8a81      	l32i.n	a10, a8, 4
			pCurrentEntry = pCurrentTable->pTable;
  90a4ae:	8983      	l32i.n	a9, a8, 12
        
			/* scan table entries */
			for (i = 0; i < pCurrentTable->NumberOfEntries; i++, pCurrentEntry++) {
  90a4b0:	8382      	l32i.n	a3, a8, 8
  90a4b2:	c0f0      	movi.n	a15, 0
  90a4b4:	600018        	j	90a4d0 <WMIRecvMessageHandler+0x78>
  90a4b7:	002691        	excw
				if (pCurrentEntry->CmdID == cmd) {
  90a4ba:	027b69        	excw
  90a4bd:	0d2391        	excw
					/* found a match */
					pCmdHandler = pCurrentEntry->pCmdHandler;
        
					/* optionally check length */
					if ((pCurrentEntry->CheckLength != 0) &&
  90a4c0:	038f90        	l32e	a3, a8, -4
  90a4c3:	c931      	beqz.n	a3, 90a4d8 <WMIRecvMessageHandler+0x80>
  90a4c5:	73e217        	blt	a14, a3, 90a4e0 <WMIRecvMessageHandler+0x88>
  90a4c8:	60000c        	j	90a4d8 <WMIRecvMessageHandler+0x80>
  90a4cb:	00b1ff        	excw
            
			pContext = pCurrentTable->pContext;
			pCurrentEntry = pCurrentTable->pTable;
        
			/* scan table entries */
			for (i = 0; i < pCurrentTable->NumberOfEntries; i++, pCurrentEntry++) {
  90a4ce:	b899      	addi.n	a9, a9, 8
  90a4d0:	73f2e4        	blt	a15, a3, 90a4b8 <WMIRecvMessageHandler+0x60>
  90a4d3:	600009        	j	90a4e0 <WMIRecvMessageHandler+0x88>
  90a4d6:	0000c8        	excw
					/* end search */                
					break;    
				}                        
			} 
            
			if (pCmdHandler != NULL) {
  90a4d9:	f4          	.byte 0xf4
		}
            
		/* if we get here, we have a command handler to dispatch */
                
		/* call dispatch function */
		pCmdHandler(pContext, cmd, seq, pCmdBuffer, length);
  90a4da:	0bf000        	callx8	a15
  90a4dd:	600004        	j	90a4e5 <WMIRecvMessageHandler+0x8d>
				/* found a handler */
				break;
			}
                
			/* scan next table */
			pCurrentTable = pCurrentTable->pNext;
  90a4e0:	8880      	l32i.n	a8, a8, 0
		seq = adf_os_ntohs(cmdHdr->seqNo);
        
		pCmdBuffer = anbdata + sizeof(WMI_CMD_HDR); 
		pCmdHandler = NULL;
        
		while (pCurrentTable != NULL) {
  90a4e2:	658fc6        	bnez	a8, 90a4ac <WMIRecvMessageHandler+0x54>
        /* Invalidate the buffer (including HTC header). Note : we only need to invalidate up to the portion
	 * that was used (cache invalidate will also round up to the nearest cache line).  
	 * The rest of the buffer should still be coherent.
	 * */

	HTC_ReturnBuffers(pWMI->HtcHandle, EndPt, pHTCBuf);         
  90a4e5:	136913        	l32r	a3, 8e4934 <mUsbFIFOConfig>
  90a4e8:	8a50      	l32i.n	a10, a5, 0
  90a4ea:	233282        	l32i	a3, a3, 0x208
  90a4ed:	db20      	mov.n	a11, a2
  90a4ef:	dc40      	mov.n	a12, a4
  90a4f1:	0b3000        	callx8	a3
  90a4f4:	d10f      	retw.n
	...

0090a4f8 <_WMI_SendCompleteHandler>:
}

/* send completion handler when any HTC buffers are returned */
static void _WMI_SendCompleteHandler(HTC_ENDPOINT_ID Endpt, adf_nbuf_t pHTCBuf, void *arg)
{
  90a4f8:	6c1004        	entry	a1, 32
 * @return data pointer to typecast into your priv structure
 */
static inline a_uint8_t *
adf_nbuf_get_priv(adf_nbuf_t buf)
{
    return (__adf_nbuf_get_priv(buf));
  90a4fb:	da30      	mov.n	a10, a3
  90a4fd:	5bf139        	call8	9069e4 <__adf_nbuf_get_priv>
		poolId = POOL_ID_WMI_SVC_EVENT;
	} else {
		poolId = POOL_ID_WMI_SVC_CMD_REPLY;
	}
        
	BUF_Pool_free_buf(pWMI->PoolHandle, poolId, pHTCBuf);
  90a500:	186913        	l32r	a8, 8e494c <mUsbFIFOConfig+0x18>
	WMI_BUF_CONTEXT *ctx;
	BUF_POOL_ID poolId;
    
	ctx = (WMI_BUF_CONTEXT *)adf_nbuf_get_priv(pHTCBuf);
        
	if ( ctx->EventClass == WMI_EVT_CLASS_CMD_EVENT ) {
  90a503:	8ca1      	l32i.n	a12, a10, 4
		poolId = POOL_ID_WMI_SVC_EVENT;
	} else {
		poolId = POOL_ID_WMI_SVC_CMD_REPLY;
	}
        
	BUF_Pool_free_buf(pWMI->PoolHandle, poolId, pHTCBuf);
  90a505:	c092      	movi.n	a9, 2
  90a507:	28829e        	l32i	a8, a8, 0x278
  90a50a:	8a41      	l32i.n	a10, a4, 4
  90a50c:	c0b1      	movi.n	a11, 1
  90a50e:	0c9b38        	moveqz	a11, a9, a12
  90a511:	dc30      	mov.n	a12, a3
  90a513:	0b8000        	callx8	a8
  90a516:	d10f      	retw.n

0090a518 <_WMI_AllocEvent>:
	}
}

static adf_nbuf_t _WMI_AllocEvent(wmi_handle_t handle, WMI_EVT_CLASS EventClass,
				  int Length)
{     
  90a518:	6c1004        	entry	a1, 32
		poolId = POOL_ID_WMI_SVC_EVENT;
	} else {
		poolId = POOL_ID_WMI_SVC_CMD_REPLY;
	}
    
	buf = BUF_Pool_alloc_buf(pWMI->PoolHandle, 
  90a51b:	186913        	l32r	a8, 8e4968 <mUsbEPMxPtSzHigh+0x14>
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
	adf_nbuf_t buf;
	WMI_BUF_CONTEXT *ctx;
    
	if ( EventClass == WMI_EVT_CLASS_CMD_EVENT ) {
		poolId = POOL_ID_WMI_SVC_EVENT;
  90a51e:	c051      	movi.n	a5, 1
  90a520:	c042      	movi.n	a4, 2
  90a522:	035439        	movnez	a4, a5, a3
	} else {
		poolId = POOL_ID_WMI_SVC_CMD_REPLY;
	}
    
	buf = BUF_Pool_alloc_buf(pWMI->PoolHandle, 
  90a525:	8a20      	l32i.n	a10, a2, 0
  90a527:	25829c        	l32i	a5, a8, 0x270
  90a52a:	288285        	l32i	a8, a8, 0x214
  90a52d:	8621      	l32i.n	a6, a2, 4
  90a52f:	0b8000        	callx8	a8
  90a532:	b4ac      	addi.n	a12, a10, 4
  90a534:	044b02        	or	a11, a4, a4
  90a537:	066a02        	or	a10, a6, a6
  90a53a:	0b5000        	callx8	a5
  90a53d:	d2a0      	mov.n	a2, a10
				 poolId, 
				 sizeof(WMI_CMD_HDR) + HTC_GetReservedHeadroom(pWMI->HtcHandle));
     
	if ( buf != NULL ) {
  90a53f:	c8a3      	beqz.n	a10, 90a546 <_WMI_AllocEvent+0x2e>
  90a541:	5bf128        	call8	9069e4 <__adf_nbuf_get_priv>
		ctx = (WMI_BUF_CONTEXT *)adf_nbuf_get_priv(buf);
		ctx->EventClass = EventClass;
  90a544:	93a1      	s32i.n	a3, a10, 4
	}
	return buf;
}
  90a546:	d10f      	retw.n

0090a548 <_WMI_SendEvent>:

static void _WMI_SendEvent(wmi_handle_t handle, adf_nbuf_t pEvt, 
                           A_UINT16 EventId, A_UINT16 SeqNo, int Length)
{
  90a548:	6c1004        	entry	a1, 32
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  90a54b:	033a02        	or	a10, a3, a3
  90a54e:	2b0a04        	movi	a11, 4
  90a551:	5bf0f4        	call8	906924 <__adf_nbuf_push_head>
  90a554:	04044f        	extui	a4, a4, 0, 16
  90a557:	05054f        	extui	a5, a5, 0, 16
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
	A_UINT8 *pBuffer;
        
	pBuffer = adf_nbuf_push_head(pEvt, sizeof(WMI_CMD_HDR));
	A_SET_UINT16_FIELD(pBuffer, WMI_CMD_HDR, commandId, adf_os_htons(EventId));        
  90a55a:	24a401        	s8i	a4, a10, 1
  90a55d:	048814        	srli	a8, a4, 8
	A_SET_UINT16_FIELD(pBuffer, WMI_CMD_HDR, seqNo, adf_os_htons(SeqNo));
  90a560:	058414        	srli	a4, a5, 8
  90a563:	24a402        	s8i	a4, a10, 2
	
	HTC_SendMsg(pWMI->HtcHandle, pWMI->ControlEp, pEvt);    
  90a566:	146913        	l32r	a4, 8e49b4 <mUsbEPinHighBandSet+0x14>
{
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
	A_UINT8 *pBuffer;
        
	pBuffer = adf_nbuf_push_head(pEvt, sizeof(WMI_CMD_HDR));
	A_SET_UINT16_FIELD(pBuffer, WMI_CMD_HDR, commandId, adf_os_htons(EventId));        
  90a569:	28a400        	s8i	a8, a10, 0
	A_SET_UINT16_FIELD(pBuffer, WMI_CMD_HDR, seqNo, adf_os_htons(SeqNo));
  90a56c:	25a403        	s8i	a5, a10, 3
	
	HTC_SendMsg(pWMI->HtcHandle, pWMI->ControlEp, pEvt);    
  90a56f:	244284        	l32i	a4, a4, 0x210
  90a572:	8a20      	l32i.n	a10, a2, 0
  90a574:	8b2a      	l32i.n	a11, a2, 40
  90a576:	033c02        	or	a12, a3, a3
  90a579:	0b4000        	callx8	a4
  90a57c:	d10f      	retw.n
	...

0090a580 <_WMI_Init>:
}

/**************  public APIS ********************************************/
    
static wmi_handle_t _WMI_Init(WMI_SVC_CONFIG *pWmiConfig)
{
  90a580:	6c1004        	entry	a1, 32
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  90a583:	136913        	l32r	a3, 8e49d0 <mUsbEPinHighBandSet+0x30>
  90a586:	d420      	mov.n	a4, a2
  90a588:	223252        	l32i	a2, a3, 0x148
  90a58b:	c0a0      	movi.n	a10, 0
  90a58d:	c3b8      	movi.n	a11, 56
  90a58f:	0b2000        	callx8	a2
  90a592:	d2a0      	mov.n	a2, a10
	WMI_SVC_CONTEXT *pWMI = NULL;
	int eventSize = WMI_SVC_MAX_BUFFERED_EVENT_SIZE + sizeof(WMI_CMD_HDR) + HTC_HDR_SZ;
    
	pWMI = (WMI_SVC_CONTEXT *)adf_os_mem_alloc(sizeof(WMI_SVC_CONTEXT));
	if (pWMI == NULL) {
  90a594:	64a055        	beqz	a10, 90a5ed <_WMI_Init+0x6d>
		return NULL;    
	}
        
	pWMI->pDispatchHead = NULL;
  90a597:	c080      	movi.n	a8, 0
  90a599:	98ab      	s32i.n	a8, a10, 44
	pWMI->PoolHandle = pWmiConfig->PoolHandle;
	pWMI->HtcHandle = pWmiConfig->HtcHandle;    
  90a59b:	8840      	l32i.n	a8, a4, 0
	if (pWMI == NULL) {
		return NULL;    
	}
        
	pWMI->pDispatchHead = NULL;
	pWMI->PoolHandle = pWmiConfig->PoolHandle;
  90a59d:	8a41      	l32i.n	a10, a4, 4
	pWMI->HtcHandle = pWmiConfig->HtcHandle;    
                                         
	BUF_Pool_create_pool(pWmiConfig->PoolHandle, POOL_ID_WMI_SVC_CMD_REPLY, 
  90a59f:	8c42      	l32i.n	a12, a4, 8
		return NULL;    
	}
        
	pWMI->pDispatchHead = NULL;
	pWMI->PoolHandle = pWmiConfig->PoolHandle;
	pWMI->HtcHandle = pWmiConfig->HtcHandle;    
  90a5a1:	9820      	s32i.n	a8, a2, 0
                                         
	BUF_Pool_create_pool(pWmiConfig->PoolHandle, POOL_ID_WMI_SVC_CMD_REPLY, 
  90a5a3:	28329b        	l32i	a8, a3, 0x26c
	if (pWMI == NULL) {
		return NULL;    
	}
        
	pWMI->pDispatchHead = NULL;
	pWMI->PoolHandle = pWmiConfig->PoolHandle;
  90a5a6:	9a21      	s32i.n	a10, a2, 4
	pWMI->HtcHandle = pWmiConfig->HtcHandle;    
                                         
	BUF_Pool_create_pool(pWmiConfig->PoolHandle, POOL_ID_WMI_SVC_CMD_REPLY, 
  90a5a8:	2b0a01        	movi	a11, 1
  90a5ab:	2d0a70        	movi	a13, 112
  90a5ae:	0b8000        	callx8	a8
			     pWmiConfig->MaxCmdReplyEvts, eventSize);
        
	BUF_Pool_create_pool(pWmiConfig->PoolHandle, POOL_ID_WMI_SVC_EVENT, 
  90a5b1:	28329b        	l32i	a8, a3, 0x26c
  90a5b4:	8a41      	l32i.n	a10, a4, 4
  90a5b6:	8c43      	l32i.n	a12, a4, 12
  90a5b8:	c0b2      	movi.n	a11, 2
  90a5ba:	2d0a70        	movi	a13, 112
  90a5bd:	0b8000        	callx8	a8
            
	/* NOTE: since RAM allocation is zero-initialized, there is nothing to do for the 
	 * direct event pool */
     
        /* register the WMI control service */
	pWMI->WMIControlService.ProcessRecvMsg = A_INDIR(wmi_svc_api._WMI_RecvMessageHandler);
  90a5c0:	283293        	l32i	a8, a3, 0x24c
         * in size.  Any WMI event that supplies a data buffer must insure that the space in the buffer
         * is at least this size. */
	pWMI->WMIControlService.TrailerSpcCheckLimit = WMI_SVC_MAX_BUFFERED_EVENT_SIZE; 
	pWMI->WMIControlService.ServiceID = WMI_CONTROL_SVC;
	pWMI->WMIControlService.ServiceCtx = pWMI;
	HTC_RegisterService(pWmiConfig->HtcHandle, &pWMI->WMIControlService);
  90a5c3:	8a40      	l32i.n	a10, a4, 0
            
	/* NOTE: since RAM allocation is zero-initialized, there is nothing to do for the 
	 * direct event pool */
     
        /* register the WMI control service */
	pWMI->WMIControlService.ProcessRecvMsg = A_INDIR(wmi_svc_api._WMI_RecvMessageHandler);
  90a5c5:	9824      	s32i.n	a8, a2, 16
	pWMI->WMIControlService.ProcessSendBufferComplete = A_INDIR(wmi_svc_api._WMI_SendCompleteHandler);
  90a5c7:	283290        	l32i	a8, a3, 0x240
         * in size.  Any WMI event that supplies a data buffer must insure that the space in the buffer
         * is at least this size. */
	pWMI->WMIControlService.TrailerSpcCheckLimit = WMI_SVC_MAX_BUFFERED_EVENT_SIZE; 
	pWMI->WMIControlService.ServiceID = WMI_CONTROL_SVC;
	pWMI->WMIControlService.ServiceCtx = pWMI;
	HTC_RegisterService(pWmiConfig->HtcHandle, &pWMI->WMIControlService);
  90a5ca:	bc2b      	addi.n	a11, a2, 12
	/* NOTE: since RAM allocation is zero-initialized, there is nothing to do for the 
	 * direct event pool */
     
        /* register the WMI control service */
	pWMI->WMIControlService.ProcessRecvMsg = A_INDIR(wmi_svc_api._WMI_RecvMessageHandler);
	pWMI->WMIControlService.ProcessSendBufferComplete = A_INDIR(wmi_svc_api._WMI_SendCompleteHandler);
  90a5cc:	9825      	s32i.n	a8, a2, 20
	pWMI->WMIControlService.ProcessConnect = A_INDIR(wmi_svc_api._WMI_ServiceConnect);
  90a5ce:	283294        	l32i	a8, a3, 0x250
         * in size.  Any WMI event that supplies a data buffer must insure that the space in the buffer
         * is at least this size. */
	pWMI->WMIControlService.TrailerSpcCheckLimit = WMI_SVC_MAX_BUFFERED_EVENT_SIZE; 
	pWMI->WMIControlService.ServiceID = WMI_CONTROL_SVC;
	pWMI->WMIControlService.ServiceCtx = pWMI;
	HTC_RegisterService(pWmiConfig->HtcHandle, &pWMI->WMIControlService);
  90a5d1:	233280        	l32i	a3, a3, 0x200
	 * direct event pool */
     
        /* register the WMI control service */
	pWMI->WMIControlService.ProcessRecvMsg = A_INDIR(wmi_svc_api._WMI_RecvMessageHandler);
	pWMI->WMIControlService.ProcessSendBufferComplete = A_INDIR(wmi_svc_api._WMI_SendCompleteHandler);
	pWMI->WMIControlService.ProcessConnect = A_INDIR(wmi_svc_api._WMI_ServiceConnect);
  90a5d4:	9826      	s32i.n	a8, a2, 24
	pWMI->WMIControlService.MaxSvcMsgSize = WMI_SVC_MSG_SIZE + sizeof(WMI_CMD_HDR);
  90a5d6:	286a04        	movi	a8, 0x604
  90a5d9:	282510        	s16i	a8, a2, 32
        /* all buffers that are sent through the control endpoint are at least WMI_SVC_MAX_BUFFERED_EVENT_SIZE 
         * in size.  Any WMI event that supplies a data buffer must insure that the space in the buffer
         * is at least this size. */
	pWMI->WMIControlService.TrailerSpcCheckLimit = WMI_SVC_MAX_BUFFERED_EVENT_SIZE; 
  90a5dc:	280a64        	movi	a8, 100
  90a5df:	282511        	s16i	a8, a2, 34
	pWMI->WMIControlService.ServiceID = WMI_CONTROL_SVC;
  90a5e2:	281a00        	movi	a8, 0x100
  90a5e5:	28250e        	s16i	a8, a2, 28
	pWMI->WMIControlService.ServiceCtx = pWMI;
  90a5e8:	9229      	s32i.n	a2, a2, 36
	HTC_RegisterService(pWmiConfig->HtcHandle, &pWMI->WMIControlService);
  90a5ea:	0b3000        	callx8	a3
    
	return pWMI;
}
  90a5ed:	d10f      	retw.n
	...

0090a5f0 <WMI_service_module_install>:

	adf_os_mem_free(pWMI);
}

void WMI_service_module_install(WMI_SVC_APIS *pTbl)
{
  90a5f0:	6c1004        	entry	a1, 32
	pTbl->_WMI_Init                     = _WMI_Init;
  90a5f3:	186a53        	l32r	a8, 8e4f40 <mUsbEPinHighBandSet+0x5a0>
  90a5f6:	9820      	s32i.n	a8, a2, 0
	pTbl->_WMI_RegisterDispatchTable    = _WMI_RegisterDispatchTable;
  90a5f8:	186a54        	l32r	a8, 8e4f48 <mUsbEPinHighBandSet+0x5a8>
  90a5fb:	9821      	s32i.n	a8, a2, 4
	pTbl->_WMI_AllocEvent               = _WMI_AllocEvent;
  90a5fd:	186a55        	l32r	a8, 8e4f54 <mUsbEPinHighBandSet+0x5b4>
  90a600:	9822      	s32i.n	a8, a2, 8
	pTbl->_WMI_SendEvent                = _WMI_SendEvent;
  90a602:	186a56        	l32r	a8, 8e4f5c <mUsbEPinHighBandSet+0x5bc>
  90a605:	9823      	s32i.n	a8, a2, 12
	pTbl->_WMI_SendCompleteHandler      = _WMI_SendCompleteHandler;
  90a607:	186a57        	l32r	a8, 8e4f64 <vbuf_module_install+0x4>
  90a60a:	9825      	s32i.n	a8, a2, 20
	pTbl->_WMI_GetPendingEventsCount    = _WMI_GetPendingEventsCount;
  90a60c:	186a58        	l32r	a8, 8e4f6c <vbuf_module_install+0xc>
  90a60f:	9824      	s32i.n	a8, a2, 16
	pTbl->_WMI_GetControlEp             = _WMI_GetControlEp;
  90a611:	186a59        	l32r	a8, 8e4f78 <vbuf_module_install+0x18>
  90a614:	9826      	s32i.n	a8, a2, 24
	pTbl->_WMI_Shutdown                 = _WMI_Shutdown;
  90a616:	186a5a        	l32r	a8, 8e4f80 <vbuf_module_install+0x20>
  90a619:	9827      	s32i.n	a8, a2, 28
	pTbl->_WMI_RecvMessageHandler       = WMIRecvMessageHandler;
  90a61b:	186a5b        	l32r	a8, 8e4f88 <vbuf_module_install+0x28>
  90a61e:	9828      	s32i.n	a8, a2, 32
	pTbl->_WMI_ServiceConnect           = WMIServiceConnect;
  90a620:	186a5c        	l32r	a8, 8e4f90 <vbuf_module_install+0x30>
  90a623:	9829      	s32i.n	a8, a2, 36
  90a625:	d10f      	retw.n
	...

0090a628 <io32_rmw>:
	iowrite8(addr, val);
}

static inline void io32_rmw(volatile uint32_t addr,
			    const uint32_t set, const uint32_t clr)
{
  90a628:	6c1006        	entry	a1, 48
  90a62b:	0c0200        	memw
  90a62e:	9210      	s32i.n	a2, a1, 0
	uint32_t val;

	val = ioread32(addr);
  90a630:	0c0200        	memw
  90a633:	8810      	l32i.n	a8, a1, 0
	val &= ~clr;
  90a635:	c79f      	movi.n	a9, -1
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90a637:	0c0200        	memw
  90a63a:	8880      	l32i.n	a8, a8, 0
			    const uint32_t set, const uint32_t clr)
{
	uint32_t val;

	val = ioread32(addr);
	val &= ~clr;
  90a63c:	049403        	xor	a4, a9, a4
  90a63f:	084801        	and	a8, a4, a8
	val |= set;
	iowrite32(addr, val);
  90a642:	0c0200        	memw
  90a645:	8a10      	l32i.n	a10, a1, 0
{
	uint32_t val;

	val = ioread32(addr);
	val &= ~clr;
	val |= set;
  90a647:	038302        	or	a3, a8, a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90a64a:	0c0200        	memw
  90a64d:	93a0      	s32i.n	a3, a10, 0
  90a64f:	d10f      	retw.n
  90a651:	000000        	ill

0090a654 <_fw_restore_dma_fifo>:
	/* deassert eth_pll bypass mode and trigger update bit */
	io32_clr(MAGPIE_REG_ETH_PLL_BYPASS_ADDR, BIT4 | BIT0);
}

static void _fw_restore_dma_fifo(void)
{
  90a654:	6c1004        	entry	a1, 32
	io32_clr(0x5601C, BIT18);
  90a657:	1a6a5d        	l32r	a10, 8e4fcc <vbuf_module_install+0x6c>
  90a65a:	1c6a22        	l32r	a12, 8e4ee4 <mUsbEPinHighBandSet+0x544>
  90a65d:	c0b0      	movi.n	a11, 0
  90a65f:	5bfff2        	call8	90a628 <io32_rmw>
    
	/* reset pcie_rc shift */
	io32_clr(0x50010, BIT10 | BIT8 | BIT7);
  90a662:	126941        	l32r	a2, 8e4b68 <mUsbEPinHighBandSet+0x1c8>
  90a665:	2b0a00        	movi	a11, 0
  90a668:	022a02        	or	a10, a2, a2
  90a66b:	2c5a80        	movi	a12, 0x580
  90a66e:	5bffee        	call8	90a628 <io32_rmw>
	A_DELAY_USECS(1);
  90a671:	136913        	l32r	a3, 8e4ac0 <mUsbEPinHighBandSet+0x120>
  90a674:	c0a1      	movi.n	a10, 1
  90a676:	28323b        	l32i	a8, a3, 236
  90a679:	0b8000        	callx8	a8
	io32_set(0x50010, BIT10 | BIT8 | BIT7);
  90a67c:	da20      	mov.n	a10, a2
  90a67e:	2b5a80        	movi	a11, 0x580
  90a681:	c0c0      	movi.n	a12, 0
  90a683:	5bffe9        	call8	90a628 <io32_rmw>

	/* reset pci_rc phy */
	io32_set(MAGPIE_REG_RST_RESET_ADDR,
  90a686:	da20      	mov.n	a10, a2
  90a688:	2b5ac0        	movi	a11, 0x5c0
  90a68b:	c0c0      	movi.n	a12, 0
  90a68d:	5bffe6        	call8	90a628 <io32_rmw>
		 PCI_RC_PHY_SHIFT_RESET_BIT
		 | PCI_RC_PLL_RESET_BIT | PCI_RC_PHY_RESET_BIT
		 | PCI_RC_RESET_BIT);
	A_DELAY_USECS(20);
  90a690:	22323b        	l32i	a2, a3, 236
  90a693:	c1a4      	movi.n	a10, 20
  90a695:	0b2000        	callx8	a2

	// enable dma swap function
	MAGPIE_REG_USB_RX0_SWAP_DATA = 0x1;
  90a698:	126953        	l32r	a2, 8e4be4 <mUsbEPinHighBandSet+0x244>
  90a69b:	c081      	movi.n	a8, 1
  90a69d:	0c0200        	memw
  90a6a0:	9820      	s32i.n	a8, a2, 0
	MAGPIE_REG_USB_TX0_SWAP_DATA = 0x1;
  90a6a2:	126954        	l32r	a2, 8e4bf4 <mUsbEPinHighBandSet+0x254>
  90a6a5:	0c0200        	memw
  90a6a8:	9820      	s32i.n	a8, a2, 0
	MAGPIE_REG_USB_RX1_SWAP_DATA = 0x1;
  90a6aa:	126955        	l32r	a2, 8e4c00 <mUsbEPinHighBandSet+0x260>
  90a6ad:	0c0200        	memw
  90a6b0:	9820      	s32i.n	a8, a2, 0
	MAGPIE_REG_USB_RX2_SWAP_DATA = 0x1;
  90a6b2:	126956        	l32r	a2, 8e4c0c <mUsbEPinHighBandSet+0x26c>
  90a6b5:	0c0200        	memw
  90a6b8:	9820      	s32i.n	a8, a2, 0
  90a6ba:	d10f      	retw.n

0090a6bc <_fw_reset_dma_fifo>:
	A_PRINTF("0x4088  0x%x ......\n", ioread32(0x10ff4088));
	_fw_reset_dma_fifo();
}

static void _fw_reset_dma_fifo()
{
  90a6bc:	6c1012        	entry	a1, 144
  90a6bf:	126a5e        	l32r	a2, 8e5038 <vdesc_module_install+0x28>
{
	uint8_t val;

	val = ioread8(addr);
	val &= ~clr;
	val |= set;
  90a6c2:	c130      	movi.n	a3, 16

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  90a6c4:	242000        	l8ui	a4, a2, 0
	io8_set(0x100ae, 0x10);
	io8_set(0x100af, 0x10);
	A_PRINTF("_fw_reset_dma_fifo\n");
  90a6c7:	1a6a60        	l32r	a10, 8e5048 <vdesc_module_install+0x38>
  90a6ca:	040447        	extui	a4, a4, 0, 8
{
	uint8_t val;

	val = ioread8(addr);
	val &= ~clr;
	val |= set;
  90a6cd:	034402        	or	a4, a4, a3
  90a6d0:	040447        	extui	a4, a4, 0, 8
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  90a6d3:	0c0200        	memw
  90a6d6:	242400        	s8i	a4, a2, 0
  90a6d9:	126a5f        	l32r	a2, 8e5058 <vdesc_module_install+0x48>

	// disable ep3 int enable, so that resume back won't send wdt magic pattern out!!!
	mUSB_STATUS_IN_INT_DISABLE();
  90a6dc:	250ac0        	movi	a5, 192

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  90a6df:	242000        	l8ui	a4, a2, 0
  90a6e2:	040447        	extui	a4, a4, 0, 8
{
	uint8_t val;

	val = ioread8(addr);
	val &= ~clr;
	val |= set;
  90a6e5:	034302        	or	a3, a4, a3
  90a6e8:	030347        	extui	a3, a3, 0, 8
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  90a6eb:	0c0200        	memw
  90a6ee:	232400        	s8i	a3, a2, 0

static void _fw_reset_dma_fifo()
{
	io8_set(0x100ae, 0x10);
	io8_set(0x100af, 0x10);
	A_PRINTF("_fw_reset_dma_fifo\n");
  90a6f1:	126913        	l32r	a2, 8e4b40 <mUsbEPinHighBandSet+0x1a0>
  90a6f4:	232212        	l32i	a3, a2, 72
  90a6f7:	0b3000        	callx8	a3

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  90a6fa:	13695a        	l32r	a3, 8e4c64 <mUsbEPinHighBandSet+0x2c4>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90a6fd:	166a61        	l32r	a6, 8e5084 <vdesc_module_install+0x74>

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  90a700:	243000        	l8ui	a4, a3, 0
	mUSB_STATUS_IN_INT_DISABLE();

	/* update magic pattern to indicate this is a suspend */
	iowrite32(WATCH_DOG_MAGIC_PATTERN_ADDR, SUS_MAGIC_PATTERN);

	A_PRINTF("org 0x4048  0x%x ......\n", ioread32(0x10ff4048));
  90a703:	1a6a62        	l32r	a10, 8e508c <vdesc_module_install+0x7c>
  90a706:	040447        	extui	a4, a4, 0, 8
	io8_set(0x100ae, 0x10);
	io8_set(0x100af, 0x10);
	A_PRINTF("_fw_reset_dma_fifo\n");

	// disable ep3 int enable, so that resume back won't send wdt magic pattern out!!!
	mUSB_STATUS_IN_INT_DISABLE();
  90a709:	054402        	or	a4, a4, a5
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  90a70c:	0c0200        	memw
  90a70f:	243400        	s8i	a4, a3, 0
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90a712:	14691c        	l32r	a4, 8e4b84 <mUsbEPinHighBandSet+0x1e4>
  90a715:	136917        	l32r	a3, 8e4b74 <mUsbEPinHighBandSet+0x1d4>
  90a718:	0c0200        	memw
  90a71b:	9430      	s32i.n	a4, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90a71d:	0c0200        	memw
  90a720:	8b60      	l32i.n	a11, a6, 0

	/* update magic pattern to indicate this is a suspend */
	iowrite32(WATCH_DOG_MAGIC_PATTERN_ADDR, SUS_MAGIC_PATTERN);

	A_PRINTF("org 0x4048  0x%x ......\n", ioread32(0x10ff4048));
  90a722:	232212        	l32i	a3, a2, 72
  90a725:	0b3000        	callx8	a3
  90a728:	156a63        	l32r	a5, 8e50b4 <vdesc_module_install+0xa4>
	A_PRINTF("org 0x404C  0x%x ......\n", ioread32(0x10ff404C));
  90a72b:	232212        	l32i	a3, a2, 72
  90a72e:	0c0200        	memw
  90a731:	8b50      	l32i.n	a11, a5, 0
  90a733:	1a6a64        	l32r	a10, 8e50c4 <vdesc_module_install+0xb4>
  90a736:	0b3000        	callx8	a3
  90a739:	146a65        	l32r	a4, 8e50d0 <vdesc_module_install+0xc0>
	A_PRINTF("org 0x4088  0x%x ......\n", ioread32(0x10ff4088));
  90a73c:	232212        	l32i	a3, a2, 72
  90a73f:	0c0200        	memw
  90a742:	8b40      	l32i.n	a11, a4, 0
  90a744:	1a6a66        	l32r	a10, 8e50dc <vdesc_module_install+0xcc>
  90a747:	0b3000        	callx8	a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90a74a:	136a67        	l32r	a3, 8e50e8 <vdesc_module_install+0xd8>

	/* 1010.1010.1010.0110.1010 for UB94 */
	iowrite32(0x10ff4088, 0xaaa6a);
	iowrite32(0x10ff404C, 0x0);

	A_DELAY_USECS(1000);
  90a74d:	28223b        	l32i	a8, a2, 236
  90a750:	0c0200        	memw
  90a753:	234600        	s32i	a3, a4, 0
  90a756:	230a00        	movi	a3, 0
  90a759:	0c0200        	memw
  90a75c:	235600        	s32i	a3, a5, 0
  90a75f:	2a3ae8        	movi	a10, 0x3e8
  90a762:	0b8000        	callx8	a8
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90a765:	0c0200        	memw
  90a768:	2b6200        	l32i	a11, a6, 0
	A_PRINTF("0x4048  0x%x ......\n", ioread32(0x10ff4048));
  90a76b:	1a6a68        	l32r	a10, 8e510c <vdesc_module_install+0xfc>
  90a76e:	262212        	l32i	a6, a2, 72
  90a771:	0b6000        	callx8	a6
  90a774:	0c0200        	memw
  90a777:	8b50      	l32i.n	a11, a5, 0
	A_PRINTF("0x404C  0x%x ......\n", ioread32(0x10ff404C));
  90a779:	1a6a69        	l32r	a10, 8e5120 <vdesc_module_install+0x110>
  90a77c:	252212        	l32i	a5, a2, 72
  90a77f:	0b5000        	callx8	a5
  90a782:	0c0200        	memw
  90a785:	8b40      	l32i.n	a11, a4, 0
	A_PRINTF("0x4088  0x%x ......\n", ioread32(0x10ff4088));
  90a787:	1a6a6a        	l32r	a10, 8e5130 <vdesc_module_install+0x120>
  90a78a:	242212        	l32i	a4, a2, 72
  90a78d:	0b4000        	callx8	a4
	volatile uint32_t default_data[9];
	uint32_t i=0;

	if(1)
	{
		A_PRINTF("turn_off_merlin_ep_start ......\n");
  90a790:	1a6a6b        	l32r	a10, 8e513c <vdesc_module_install+0x12c>
  90a793:	242212        	l32i	a4, a2, 72
  90a796:	0b4000        	callx8	a4
		A_DELAY_USECS(measure_time);
  90a799:	24223b        	l32i	a4, a2, 236
  90a79c:	da30      	mov.n	a10, a3
  90a79e:	0b4000        	callx8	a4
		default_data[0] = 0x9248fd00;
  90a7a1:	146a6c        	l32r	a4, 8e5154 <vdesc_module_install+0x144>
  90a7a4:	0c0200        	memw
  90a7a7:	241612        	s32i	a4, a1, 72
		default_data[1] = 0x24924924;
  90a7aa:	146a6d        	l32r	a4, 8e5160 <vdesc_module_install+0x150>
  90a7ad:	0c0200        	memw
  90a7b0:	241613        	s32i	a4, a1, 76
		default_data[2] = 0xa8000019;
  90a7b3:	146a6e        	l32r	a4, 8e516c <vdesc_module_install+0x15c>
  90a7b6:	0c0200        	memw
  90a7b9:	241614        	s32i	a4, a1, 80
		default_data[3] = 0x17160820;
  90a7bc:	146a6f        	l32r	a4, 8e5178 <vdesc_module_install+0x168>
  90a7bf:	0c0200        	memw
  90a7c2:	241615        	s32i	a4, a1, 84
		default_data[4] = 0x25980560;
  90a7c5:	146a70        	l32r	a4, 8e5188 <vdesc_module_install+0x178>
  90a7c8:	0c0200        	memw
  90a7cb:	241616        	s32i	a4, a1, 88
		default_data[5] = 0xc1c00000;
  90a7ce:	146a71        	l32r	a4, 8e5194 <vdesc_module_install+0x184>
  90a7d1:	0c0200        	memw
  90a7d4:	241617        	s32i	a4, a1, 92
		default_data[6] = 0x1aaabe40;
  90a7d7:	146a72        	l32r	a4, 8e51a0 <vdesc_module_install+0x190>
  90a7da:	0c0200        	memw
  90a7dd:	241618        	s32i	a4, a1, 96
		default_data[7] = 0xbe105554;
  90a7e0:	146a73        	l32r	a4, 8e51ac <vdesc_module_install+0x19c>
  90a7e3:	0c0200        	memw
  90a7e6:	241619        	s32i	a4, a1, 100
		default_data[8] = 0x00043007;
  90a7e9:	146a74        	l32r	a4, 8e51bc <vdesc_module_install+0x1ac>
  90a7ec:	0c0200        	memw
  90a7ef:	24161a        	s32i	a4, a1, 104
        
		for(i=0; i<9; i++)
		{
			A_DELAY_USECS(10);
  90a7f2:	24223b        	l32i	a4, a2, 236
  90a7f5:	c0aa      	movi.n	a10, 10
  90a7f7:	0b4000        	callx8	a4
        
			iowrite32(0x10ff4040, default_data[i]);
  90a7fa:	01340a        	addx4	a4, a3, a1
  90a7fd:	0c0200        	memw
  90a800:	254212        	l32i	a5, a4, 72
  90a803:	146a75        	l32r	a4, 8e51d8 <vdesc_module_install+0x1c8>
		default_data[5] = 0xc1c00000;
		default_data[6] = 0x1aaabe40;
		default_data[7] = 0xbe105554;
		default_data[8] = 0x00043007;
        
		for(i=0; i<9; i++)
  90a806:	b133      	addi.n	a3, a3, 1
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90a808:	0c0200        	memw
  90a80b:	254600        	s32i	a5, a4, 0
  90a80e:	240a09        	movi	a4, 9
  90a811:	7439dd        	bne	a3, a4, 90a7f2 <_fw_reset_dma_fifo+0x136>
		{
			A_DELAY_USECS(10);
        
			iowrite32(0x10ff4040, default_data[i]);
		}
		A_DELAY_USECS(10);
  90a814:	23223b        	l32i	a3, a2, 236
  90a817:	2a0a0a        	movi	a10, 10
  90a81a:	0b3000        	callx8	a3
  90a81d:	136a76        	l32r	a3, 8e51f8 <vdesc_module_install+0x1e8>
  90a820:	c041      	movi.n	a4, 1
  90a822:	0c0200        	memw
  90a825:	9430      	s32i.n	a4, a3, 0
		iowrite32(0x10ff4044, BIT0);
		A_PRINTF("turn_off_merlin_ep_end ......\n");
  90a827:	1a6a77        	l32r	a10, 8e5204 <vdesc_module_install+0x1f4>
  90a82a:	232212        	l32i	a3, a2, 72
  90a82d:	0b3000        	callx8	a3
	A_PRINTF("0x4088  0x%x ......\n", ioread32(0x10ff4088));
         
	// turn off merlin
	turn_off_merlin();
	// pcie ep
	A_PRINTF("turn_off_magpie_ep_start ......\n");
  90a830:	1a6a78        	l32r	a10, 8e5210 <vdesc_module_install+0x200>
  90a833:	232212        	l32i	a3, a2, 72
  90a836:	0b3000        	callx8	a3
	A_DELAY_USECS(measure_time);
  90a839:	22223b        	l32i	a2, a2, 236
  90a83c:	c0a0      	movi.n	a10, 0
  90a83e:	0b2000        	callx8	a2
	io32_set(0x40040, BIT0 | BIT1);
  90a841:	1a6a79        	l32r	a10, 8e5228 <vdesc_module_install+0x218>
  90a844:	c0b3      	movi.n	a11, 3
  90a846:	2c0a00        	movi	a12, 0
  90a849:	5bff77        	call8	90a628 <io32_rmw>
{

	volatile uint32_t default_data[9];
	uint32_t i=0;

	default_data[0] = 0x9248fd00;
  90a84c:	126a6c        	l32r	a2, 8e51fc <vdesc_module_install+0x1ec>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90a84f:	146a7a        	l32r	a4, 8e5238 <vdesc_module_install+0x228>
  90a852:	0c0200        	memw
  90a855:	9219      	s32i.n	a2, a1, 36
	default_data[1] = 0x24924924;
  90a857:	126a6d        	l32r	a2, 8e520c <vdesc_module_install+0x1fc>
	default_data[5] = 0xc1c00000;
	default_data[6] = 0x1aaabe40;
	default_data[7] = 0xbe105554;
	default_data[8] = 0x00043007;

	for(i=0; i<9; i++)
  90a85a:	c030      	movi.n	a3, 0

	volatile uint32_t default_data[9];
	uint32_t i=0;

	default_data[0] = 0x9248fd00;
	default_data[1] = 0x24924924;
  90a85c:	0c0200        	memw
  90a85f:	921a      	s32i.n	a2, a1, 40
	default_data[2] = 0xa8000019;
  90a861:	126a6e        	l32r	a2, 8e521c <vdesc_module_install+0x20c>
  90a864:	0c0200        	memw
  90a867:	921b      	s32i.n	a2, a1, 44
	default_data[3] = 0x17160820;
  90a869:	126a6f        	l32r	a2, 8e5228 <vdesc_module_install+0x218>
  90a86c:	0c0200        	memw
  90a86f:	921c      	s32i.n	a2, a1, 48
	default_data[4] = 0x25980560;
  90a871:	126a70        	l32r	a2, 8e5234 <vdesc_module_install+0x224>
  90a874:	0c0200        	memw
  90a877:	921d      	s32i.n	a2, a1, 52
	default_data[5] = 0xc1c00000;
  90a879:	126a71        	l32r	a2, 8e5240 <vdesc_module_install+0x230>
  90a87c:	0c0200        	memw
  90a87f:	22160e        	s32i	a2, a1, 56
	default_data[6] = 0x1aaabe40;
  90a882:	126a72        	l32r	a2, 8e524c <vdesc_module_install+0x23c>
  90a885:	0c0200        	memw
  90a888:	22160f        	s32i	a2, a1, 60
	default_data[7] = 0xbe105554;
  90a88b:	126a73        	l32r	a2, 8e5258 <vdesc_module_install+0x248>
  90a88e:	0c0200        	memw
  90a891:	221610        	s32i	a2, a1, 64
	default_data[8] = 0x00043007;
  90a894:	126a74        	l32r	a2, 8e5264 <vdesc_module_install+0x254>
  90a897:	0c0200        	memw
  90a89a:	221611        	s32i	a2, a1, 68
  90a89d:	0c0200        	memw
  90a8a0:	8240      	l32i.n	a2, a4, 0
	{
		// check for the done bit to be set 

		while (1)
		{
			if (ioread32(0x40028) & BIT31)
  90a8a2:	672ff7        	bgez	a2, 90a89d <_fw_reset_dma_fifo+0x1e1>
				break;
		}
        
		A_DELAY_USECS(1);
  90a8a5:	126913        	l32r	a2, 8e4cf4 <mUsbEPinHighBandSet+0x354>
  90a8a8:	c0a1      	movi.n	a10, 1
  90a8aa:	25223b        	l32i	a5, a2, 236
  90a8ad:	0b5000        	callx8	a5
    
		iowrite32(0x40024, default_data[i]);
  90a8b0:	01350a        	addx4	a5, a3, a1
  90a8b3:	0c0200        	memw
  90a8b6:	8659      	l32i.n	a6, a5, 36
  90a8b8:	156a7b        	l32r	a5, 8e52a4 <vdesc_module_install+0x294>
	default_data[5] = 0xc1c00000;
	default_data[6] = 0x1aaabe40;
	default_data[7] = 0xbe105554;
	default_data[8] = 0x00043007;

	for(i=0; i<9; i++)
  90a8bb:	b133      	addi.n	a3, a3, 1
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90a8bd:	0c0200        	memw
  90a8c0:	9650      	s32i.n	a6, a5, 0
  90a8c2:	c059      	movi.n	a5, 9
  90a8c4:	7539d5        	bne	a3, a5, 90a89d <_fw_reset_dma_fifo+0x1e1>
	// pcie ep
	A_PRINTF("turn_off_magpie_ep_start ......\n");
	A_DELAY_USECS(measure_time);
	io32_set(0x40040, BIT0 | BIT1);
	turn_off_phy();
	io32_clr(0x40040, BIT0 | BIT1);
  90a8c7:	136a79        	l32r	a3, 8e52ac <vdesc_module_install+0x29c>
  90a8ca:	c051      	movi.n	a5, 1
  90a8cc:	c0b0      	movi.n	a11, 0
  90a8ce:	2c0a03        	movi	a12, 3
  90a8d1:	033a02        	or	a10, a3, a3
  90a8d4:	0c0200        	memw
  90a8d7:	9540      	s32i.n	a5, a4, 0
  90a8d9:	5bff53        	call8	90a628 <io32_rmw>
	A_PRINTF("turn_off_magpie_ep_end ......\n");
  90a8dc:	1a6a7c        	l32r	a10, 8e52cc <vdesc_module_install+0x2bc>
  90a8df:	262212        	l32i	a6, a2, 72
  90a8e2:	0b6000        	callx8	a6

	// pcie rc 
	A_PRINTF("turn_off_magpie_rc_start ......\n");
  90a8e5:	1a6a7d        	l32r	a10, 8e52dc <vdesc_module_install+0x2cc>
  90a8e8:	262212        	l32i	a6, a2, 72
  90a8eb:	0b6000        	callx8	a6
	A_DELAY_USECS(measure_time);
  90a8ee:	26223b        	l32i	a6, a2, 236
  90a8f1:	c0a0      	movi.n	a10, 0
  90a8f3:	0b6000        	callx8	a6
	io32_clr(0x40040, BIT0);
  90a8f6:	da30      	mov.n	a10, a3
  90a8f8:	2b0a00        	movi	a11, 0
  90a8fb:	055c02        	or	a12, a5, a5
  90a8fe:	5bff4a        	call8	90a628 <io32_rmw>
{
    
	volatile uint32_t default_data[9];
	uint32_t i=0;
    
	A_PRINTF("turn_off_phy_rc\n");
  90a901:	1a6a7e        	l32r	a10, 8e52fc <vdesc_module_install+0x2ec>
  90a904:	222212        	l32i	a2, a2, 72
	default_data[5] = 0xc1c00000;
	default_data[6] = 0x1aaabe40;
	default_data[7] = 0xbe105554;
	default_data[8] = 0x00043007;
        
	for(i=0; i<9; i++)
  90a907:	230a00        	movi	a3, 0
{
    
	volatile uint32_t default_data[9];
	uint32_t i=0;
    
	A_PRINTF("turn_off_phy_rc\n");
  90a90a:	0b2000        	callx8	a2
    
	default_data[0] = 0x9248fd00;
  90a90d:	126a6c        	l32r	a2, 8e52c0 <vdesc_module_install+0x2b0>
  90a910:	0c0200        	memw
  90a913:	9210      	s32i.n	a2, a1, 0
	default_data[1] = 0x24924924;
  90a915:	126a6d        	l32r	a2, 8e52cc <vdesc_module_install+0x2bc>
  90a918:	0c0200        	memw
  90a91b:	9211      	s32i.n	a2, a1, 4
	default_data[2] = 0xa8000019;
  90a91d:	126a6e        	l32r	a2, 8e52d8 <vdesc_module_install+0x2c8>
  90a920:	0c0200        	memw
  90a923:	9212      	s32i.n	a2, a1, 8
	default_data[3] = 0x13160820;//PwdClk1MHz=0
  90a925:	126a7f        	l32r	a2, 8e5324 <vdesc_module_install+0x314>
  90a928:	0c0200        	memw
  90a92b:	9213      	s32i.n	a2, a1, 12
	default_data[4] = 0x25980560;
  90a92d:	126a70        	l32r	a2, 8e52f0 <vdesc_module_install+0x2e0>
  90a930:	0c0200        	memw
  90a933:	9214      	s32i.n	a2, a1, 16
	default_data[5] = 0xc1c00000;
  90a935:	126a71        	l32r	a2, 8e52fc <vdesc_module_install+0x2ec>
  90a938:	0c0200        	memw
  90a93b:	9215      	s32i.n	a2, a1, 20
	default_data[6] = 0x1aaabe40;
  90a93d:	126a72        	l32r	a2, 8e5308 <vdesc_module_install+0x2f8>
  90a940:	0c0200        	memw
  90a943:	9216      	s32i.n	a2, a1, 24
	default_data[7] = 0xbe105554;
  90a945:	126a73        	l32r	a2, 8e5314 <vdesc_module_install+0x304>
  90a948:	0c0200        	memw
  90a94b:	9217      	s32i.n	a2, a1, 28
	default_data[8] = 0x00043007;
  90a94d:	126a74        	l32r	a2, 8e5320 <vdesc_module_install+0x310>
  90a950:	0c0200        	memw
  90a953:	9218      	s32i.n	a2, a1, 32
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90a955:	0c0200        	memw
  90a958:	8240      	l32i.n	a2, a4, 0
	{
		// check for the done bit to be set 
     
		while (1)
		{
			if (ioread32(0x40028) & BIT31)
  90a95a:	672ff7        	bgez	a2, 90a955 <_fw_reset_dma_fifo+0x299>
				break;
		}

		A_DELAY_USECS(1);
  90a95d:	126913        	l32r	a2, 8e4dac <mUsbEPinHighBandSet+0x40c>
  90a960:	2a0a01        	movi	a10, 1
  90a963:	25223b        	l32i	a5, a2, 236
  90a966:	0b5000        	callx8	a5

		iowrite32(0x40024, default_data[i]);
  90a969:	01350a        	addx4	a5, a3, a1
  90a96c:	0c0200        	memw
  90a96f:	8650      	l32i.n	a6, a5, 0
  90a971:	156a7b        	l32r	a5, 8e5360 <vdesc_module_install+0x350>
	default_data[5] = 0xc1c00000;
	default_data[6] = 0x1aaabe40;
	default_data[7] = 0xbe105554;
	default_data[8] = 0x00043007;
        
	for(i=0; i<9; i++)
  90a974:	b133      	addi.n	a3, a3, 1
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90a976:	0c0200        	memw
  90a979:	9650      	s32i.n	a6, a5, 0
  90a97b:	c059      	movi.n	a5, 9
  90a97d:	7539d4        	bne	a3, a5, 90a955 <_fw_reset_dma_fifo+0x299>
	// pcie rc 
	A_PRINTF("turn_off_magpie_rc_start ......\n");
	A_DELAY_USECS(measure_time);
	io32_clr(0x40040, BIT0);
	turn_off_phy_rc();
	A_PRINTF("turn_off_magpie_rc_end ......down\n");
  90a980:	232212        	l32i	a3, a2, 72
  90a983:	c061      	movi.n	a6, 1
  90a985:	1a6a80        	l32r	a10, 8e5388 <vdesc_module_install+0x378>
  90a988:	0c0200        	memw
  90a98b:	9640      	s32i.n	a6, a4, 0
  90a98d:	0b3000        	callx8	a3
	A_DELAY_USECS(measure_time);
  90a990:	23223b        	l32i	a3, a2, 236
  90a993:	c0a0      	movi.n	a10, 0
  90a995:	0b3000        	callx8	a3
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90a998:	136a81        	l32r	a3, 8e539c <vdesc_module_install+0x38c>

	A_PRINTF("0x4001C  %p ......\n", ioread32(0x4001c));
  90a99b:	1a6a82        	l32r	a10, 8e53a4 <vdesc_module_install+0x394>
  90a99e:	0c0200        	memw
  90a9a1:	8b30      	l32i.n	a11, a3, 0
  90a9a3:	232212        	l32i	a3, a2, 72
  90a9a6:	0b3000        	callx8	a3
  90a9a9:	136a79        	l32r	a3, 8e5390 <vdesc_module_install+0x380>
	A_PRINTF("0x40040  %p ......\n", ioread32(0x40040));
  90a9ac:	1a6a83        	l32r	a10, 8e53b8 <vdesc_module_install+0x3a8>
  90a9af:	0c0200        	memw
  90a9b2:	8b30      	l32i.n	a11, a3, 0
  90a9b4:	232212        	l32i	a3, a2, 72
  90a9b7:	0b3000        	callx8	a3
  90a9ba:	136a5d        	l32r	a3, 8e5330 <vdesc_module_install+0x320>
    
	/* turn off pcie_pll - power down (bit16) */
	A_PRINTF(" before pwd PCIE PLL CFG:0x5601C: 0x%08x\n",
  90a9bd:	242212        	l32i	a4, a2, 72
  90a9c0:	0c0200        	memw
  90a9c3:	2b3200        	l32i	a11, a3, 0
  90a9c6:	1a6a84        	l32r	a10, 8e53d8 <vdesc_module_install+0x3c8>
  90a9c9:	0b4000        	callx8	a4
		 ioread32(0x5601C));
	io32_set(0x5601C, BIT18);
  90a9cc:	1b6a22        	l32r	a11, 8e5254 <vdesc_module_install+0x244>
  90a9cf:	033a02        	or	a10, a3, a3
  90a9d2:	2c0a00        	movi	a12, 0
  90a9d5:	5bff14        	call8	90a628 <io32_rmw>
  90a9d8:	0c0200        	memw
  90a9db:	8b30      	l32i.n	a11, a3, 0
	A_PRINTF(" after pwd PCIE PLL CFG:0x5601C:  0x%08x\n",
  90a9dd:	1a6a85        	l32r	a10, 8e53f4 <vdesc_module_install+0x3e4>
  90a9e0:	232212        	l32i	a3, a2, 72
  90a9e3:	0b3000        	callx8	a3
		 ioread32(0x5601C));

	/* set everything to reset state?, requested by Oligo */
	io32_set(0x50010, BIT13 | BIT12
  90a9e6:	146941        	l32r	a4, 8e4eec <mUsbEPinHighBandSet+0x54c>
  90a9e9:	1b6a86        	l32r	a11, 8e5404 <vdesc_module_install+0x3f4>
  90a9ec:	2c0a00        	movi	a12, 0
  90a9ef:	da40      	mov.n	a10, a4
  90a9f1:	5bff0d        	call8	90a628 <io32_rmw>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90a9f4:	156a87        	l32r	a5, 8e5410 <vdesc_module_install+0x400>
  90a9f7:	230a00        	movi	a3, 0
  90a9fa:	0c0200        	memw
  90a9fd:	9350      	s32i.n	a3, a5, 0
		 | BIT11 | BIT9 | BIT7 | BIT6);

	iowrite32(0x5C000, 0);

	A_DELAY_USECS(10);
  90a9ff:	25223b        	l32i	a5, a2, 236
  90aa02:	2a0a0a        	movi	a10, 10
  90aa05:	0b5000        	callx8	a5
  90aa08:	156950        	l32r	a5, 8e4f48 <mUsbEPinHighBandSet+0x5a8>

	/* reset usb DMA controller */
	iowrite32_usb(ZM_SOC_USB_DMA_RESET_OFFSET, 0x0);

	io32_set(0x50010, BIT4);
  90aa0b:	c1b0      	movi.n	a11, 16
  90aa0d:	dc30      	mov.n	a12, a3
  90aa0f:	da40      	mov.n	a10, a4
  90aa11:	0c0200        	memw
  90aa14:	9350      	s32i.n	a3, a5, 0
  90aa16:	5bff04        	call8	90a628 <io32_rmw>
	A_DELAY_USECS(5);
  90aa19:	22223b        	l32i	a2, a2, 236
  90aa1c:	c0a5      	movi.n	a10, 5
  90aa1e:	0b2000        	callx8	a2
	io32_clr(0x50010, BIT4);
  90aa21:	da40      	mov.n	a10, a4
  90aa23:	033b02        	or	a11, a3, a3
  90aa26:	2c0a10        	movi	a12, 16
  90aa29:	5bfeff        	call8	90a628 <io32_rmw>
  90aa2c:	0c0200        	memw
  90aa2f:	9650      	s32i.n	a6, a5, 0
  90aa31:	d10f      	retw.n
	...

0090aa34 <_fw_usb_suspend_reboot>:

BOOLEAN bEepromExist = TRUE;
BOOLEAN bJumptoFlash = FALSE;

void _fw_usb_suspend_reboot()
{
  90aa34:	6c1004        	entry	a1, 32
	/* reset usb/wlan dma */
	_fw_reset_dma_fifo();
  90aa37:	5bff21        	call8	90a6bc <_fw_reset_dma_fifo>

	/* restore gpio setting and usb/wlan dma state */
	_fw_restore_dma_fifo();
  90aa3a:	5bff06        	call8	90a654 <_fw_restore_dma_fifo>
  90aa3d:	126948        	l32r	a2, 8e4f60 <vbuf_module_install>
  90aa40:	c181      	movi.n	a8, 17
  90aa42:	0c0200        	memw
  90aa45:	282600        	s32i	a8, a2, 0

	/* set clock to bypass mode - 40Mhz from XTAL */
	iowrite32(MAGPIE_REG_CPU_PLL_BYPASS_ADDR, BIT0 | BIT4);

	A_DELAY_USECS(100); /* wait for stable */
  90aa48:	126913        	l32r	a2, 8e4e94 <mUsbEPinHighBandSet+0x4f4>
  90aa4b:	2a0a64        	movi	a10, 100
  90aa4e:	28223b        	l32i	a8, a2, 236
  90aa51:	0b8000        	callx8	a8
  90aa54:	196951        	l32r	a9, 8e4f98 <vbuf_module_install+0x38>
  90aa57:	186949        	l32r	a8, 8e4f7c <vbuf_module_install+0x1c>

	iowrite32(MAGPIE_REG_CPU_PLL_ADDR, BIT16);

	A_DELAY_USECS(100); /* wait for stable */
  90aa5a:	2a0a64        	movi	a10, 100
  90aa5d:	0c0200        	memw
  90aa60:	9980      	s32i.n	a9, a8, 0
  90aa62:	28223b        	l32i	a8, a2, 236
  90aa65:	0b8000        	callx8	a8
	A_UART_HWINIT((40*1000*1000), 19200);
  90aa68:	28221a        	l32i	a8, a2, 104
  90aa6b:	1a6914        	l32r	a10, 8e4ebc <mUsbEPinHighBandSet+0x51c>
  90aa6e:	1b69d2        	l32r	a11, 8e51b8 <vdesc_module_install+0x1a8>
  90aa71:	0b8000        	callx8	a8

	A_CLOCK_INIT(40);
  90aa74:	282238        	l32i	a8, a2, 224
  90aa77:	c2a8      	movi.n	a10, 40
  90aa79:	0b8000        	callx8	a8

	if (!bEepromExist) { /* jump to flash boot (eeprom data in flash) */
  90aa7c:	186916        	l32r	a8, 8e4ed4 <mUsbEPinHighBandSet+0x534>
  90aa7f:	288100        	l16ui	a8, a8, 0
  90aa82:	cd86      	bnez.n	a8, 90aa9c <_fw_usb_suspend_reboot+0x68>
		bJumptoFlash = TRUE;
  90aa84:	186915        	l32r	a8, 8e4ed8 <mUsbEPinHighBandSet+0x538>
  90aa87:	c091      	movi.n	a9, 1
		A_PRINTF("Jump to Flash BOOT\n");
  90aa89:	222212        	l32i	a2, a2, 72
  90aa8c:	1a6a88        	l32r	a10, 8e54ac <vdesc_module_install+0x49c>
	A_UART_HWINIT((40*1000*1000), 19200);

	A_CLOCK_INIT(40);

	if (!bEepromExist) { /* jump to flash boot (eeprom data in flash) */
		bJumptoFlash = TRUE;
  90aa8f:	298500        	s16i	a9, a8, 0
		A_PRINTF("Jump to Flash BOOT\n");
  90aa92:	0b2000        	callx8	a2
		app_start();
  90aa95:	5bed5a        	call8	906000 <app_start>
  90aa98:	d10f      	retw.n
  90aa9a:	000028        	mull	a0, a0, a0
	} else {
		A_PRINTF("receive the suspend command...\n");
  90aa9d:	22121a        	l32i	a2, a1, 104
  90aaa0:	6a890b        	blti	a8, 10, 90aaaf <_fw_usb_suspend_reboot+0x7b>
  90aaa3:	8000      	l32i.n	a0, a0, 0
		/* reboot..... */
		A_USB_JUMP_BOOT();
  90aaa5:	22222c        	l32i	a2, a2, 176
  90aaa8:	0b2000        	callx8	a2
  90aaab:	d10f      	retw.n
  90aaad:	000000        	ill

0090aab0 <zfTurnOffPower_patch>:
 *
 * . set suspend counter to non-zero value
 * . 
 */
void zfTurnOffPower_patch(void)
{
  90aab0:	6c1004        	entry	a1, 32
	A_PRINTF("+++ goto suspend ......\n");
  90aab3:	126913        	l32r	a2, 8e4f00 <mUsbEPinHighBandSet+0x560>
  90aab6:	1a6a8a        	l32r	a10, 8e54e0 <vdesc_module_install+0x4d0>
  90aab9:	232212        	l32i	a3, a2, 72
  90aabc:	c151      	movi.n	a5, 17
  90aabe:	0b3000        	callx8	a3

	/* setting the go suspend here, power down right away */
	io32_set(0x10000, BIT3);
  90aac1:	136951        	l32r	a3, 8e5008 <vbuf_module_install+0xa8>
  90aac4:	c0c0      	movi.n	a12, 0
  90aac6:	c0b8      	movi.n	a11, 8
  90aac8:	da30      	mov.n	a10, a3
  90aaca:	5bfed7        	call8	90a628 <io32_rmw>

	A_DELAY_USECS(100);
  90aacd:	24223b        	l32i	a4, a2, 236
  90aad0:	2a0a64        	movi	a10, 100
  90aad3:	0b4000        	callx8	a4
  90aad6:	146948        	l32r	a4, 8e4ff8 <vbuf_module_install+0x98>
	 *  5. set SUSPEND_ENABLE
	 */

	iowrite32(MAGPIE_REG_CPU_PLL_BYPASS_ADDR, BIT0 | BIT4);

	A_DELAY_USECS(100); // wait for stable
  90aad9:	2a0a64        	movi	a10, 100
  90aadc:	0c0200        	memw
  90aadf:	254600        	s32i	a5, a4, 0
  90aae2:	24223b        	l32i	a4, a2, 236
  90aae5:	0b4000        	callx8	a4
  90aae8:	146949        	l32r	a4, 8e500c <vbuf_module_install+0xac>

	iowrite32(MAGPIE_REG_CPU_PLL_ADDR, BIT16);

	A_DELAY_USECS(100); // wait for stable
  90aaeb:	2a0a64        	movi	a10, 100
  90aaee:	0c0200        	memw
  90aaf1:	9340      	s32i.n	a3, a4, 0
  90aaf3:	24223b        	l32i	a4, a2, 236
  90aaf6:	0b4000        	callx8	a4

	A_UART_HWINIT((40*1000*1000), 19200);
  90aaf9:	1b69d2        	l32r	a11, 8e5244 <vdesc_module_install+0x234>
  90aafc:	24221a        	l32i	a4, a2, 104
  90aaff:	1a6914        	l32r	a10, 8e4f50 <mUsbEPinHighBandSet+0x5b0>
  90ab02:	0b4000        	callx8	a4
	A_CLOCK_INIT(40);
  90ab05:	242238        	l32i	a4, a2, 224
  90ab08:	c2a8      	movi.n	a10, 40
  90ab0a:	0b4000        	callx8	a4

	io32_set(MAGPIE_REG_ETH_PLL_ADDR, BIT16);
  90ab0d:	176a8b        	l32r	a7, 8e553c <vdesc_module_install+0x52c>
  90ab10:	db30      	mov.n	a11, a3
  90ab12:	da70      	mov.n	a10, a7
  90ab14:	c0c0      	movi.n	a12, 0
  90ab16:	5bfec4        	call8	90a628 <io32_rmw>

	io32_set(MAGPIE_REG_ETH_PLL_BYPASS_ADDR, BIT4 | BIT0);
  90ab19:	166a8c        	l32r	a6, 8e554c <vdesc_module_install+0x53c>
  90ab1c:	db50      	mov.n	a11, a5
  90ab1e:	da60      	mov.n	a10, a6
  90ab20:	c0c0      	movi.n	a12, 0
  90ab22:	5bfec1        	call8	90a628 <io32_rmw>

	io32_set(MAGPIE_REG_SUSPEND_ENABLE_ADDR, 0x10 << 8);
  90ab25:	146a8d        	l32r	a4, 8e555c <vdesc_module_install+0x54c>
  90ab28:	1b6a8e        	l32r	a11, 8e5560 <vdesc_module_install+0x550>
  90ab2b:	044a02        	or	a10, a4, a4
  90ab2e:	2c0a00        	movi	a12, 0
  90ab31:	5bfebd        	call8	90a628 <io32_rmw>

	// TURN OFF ETH PLL
	_fw_power_off();

	//32clk wait for External ETH PLL stable
	A_DELAY_USECS(100);
  90ab34:	22223b        	l32i	a2, a2, 236
  90ab37:	2a0a64        	movi	a10, 100
  90ab3a:	0b2000        	callx8	a2
  90ab3d:	186a90        	l32r	a8, 8e5580 <vdesc_module_install+0x570>
  90ab40:	126a8f        	l32r	a2, 8e557c <vdesc_module_install+0x56c>
    
	iowrite32(0x52000, 0x70303); /* read back 0x703f7 */
	iowrite32(0x52008, 0x0e91c); /* read back 0x1e948 */
    
	io32_set(MAGPIE_REG_SUSPEND_ENABLE_ADDR, BIT0);
  90ab43:	da40      	mov.n	a10, a4
  90ab45:	0c0200        	memw
  90ab48:	9820      	s32i.n	a8, a2, 0
  90ab4a:	186a92        	l32r	a8, 8e5594 <vdesc_module_install+0x584>
  90ab4d:	126a91        	l32r	a2, 8e5594 <vdesc_module_install+0x584>
  90ab50:	c0b1      	movi.n	a11, 1
  90ab52:	0c0200        	memw
  90ab55:	9820      	s32i.n	a8, a2, 0
  90ab57:	c0c0      	movi.n	a12, 0
  90ab59:	5bfeb3        	call8	90a628 <io32_rmw>
     *  3. turn on ETH PLL
     *  4. disable ETH PLL bypass and update
     *  5. turn on pcie pll
     */    

	io32_clr(MAGPIE_REG_ETH_PLL_ADDR, BIT16);
  90ab5c:	da70      	mov.n	a10, a7
  90ab5e:	dc30      	mov.n	a12, a3
  90ab60:	c0b0      	movi.n	a11, 0
  90ab62:	5bfeb1        	call8	90a628 <io32_rmw>

	/* deassert eth_pll bypass mode and trigger update bit */
	io32_clr(MAGPIE_REG_ETH_PLL_BYPASS_ADDR, BIT4 | BIT0);
  90ab65:	066a02        	or	a10, a6, a6
  90ab68:	055c02        	or	a12, a5, a5
  90ab6b:	2b0a00        	movi	a11, 0
  90ab6e:	5bfeae        	call8	90a628 <io32_rmw>
	io32_set(MAGPIE_REG_SUSPEND_ENABLE_ADDR, BIT0);

	// wake up, and turn on cpu, eth, pcie and usb pll 
	_fw_power_on();
	// restore gpio and other settings
	_fw_restore_dma_fifo();
  90ab71:	5bfeb8        	call8	90a654 <_fw_restore_dma_fifo>

	/* clear suspend */
	io32_clr(MAGPIE_REG_SUSPEND_ENABLE_ADDR, BIT0);
  90ab74:	da40      	mov.n	a10, a4
  90ab76:	c0b0      	movi.n	a11, 0
  90ab78:	c0c1      	movi.n	a12, 1
  90ab7a:	5bfeab        	call8	90a628 <io32_rmw>
	io32_clr(0x52028, BIT8 | BIT12 | BIT16);
  90ab7d:	1a6a93        	l32r	a10, 8e55cc <vdesc_module_install+0x5bc>
  90ab80:	1c6a94        	l32r	a12, 8e55d0 <vdesc_module_install+0x5c0>
  90ab83:	c0b0      	movi.n	a11, 0
  90ab85:	5bfea8        	call8	90a628 <io32_rmw>
  90ab88:	d10f      	retw.n
	...

0090ab8c <zfResetUSBFIFO_patch>:
 * . turn off pcie pll
 * . reset all pcie/gmac related registers
 * . reset usb dma
 */
void zfResetUSBFIFO_patch(void)
{
  90ab8c:	6c1004        	entry	a1, 32
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90ab8f:	126a95        	l32r	a2, 8e55e4 <vdesc_module_install+0x5d4>
	A_PRINTF("0x9808  0x%x ......\n", ioread32(0x10ff9808));
  90ab92:	1a6a96        	l32r	a10, 8e55ec <vdesc_module_install+0x5dc>
  90ab95:	0c0200        	memw
  90ab98:	2b2200        	l32i	a11, a2, 0
  90ab9b:	126913        	l32r	a2, 8e4fe8 <vbuf_module_install+0x88>
  90ab9e:	232212        	l32i	a3, a2, 72
  90aba1:	0b3000        	callx8	a3
  90aba4:	1469fa        	l32r	a4, 8e538c <vdesc_module_install+0x37c>
	A_PRINTF("0x7890  0x%x ......\n", ioread32(0x10ff7890));
  90aba7:	136a97        	l32r	a3, 8e5604 <vdesc_module_install+0x5f4>
  90abaa:	282212        	l32i	a8, a2, 72
  90abad:	0c0200        	memw
  90abb0:	2b4200        	l32i	a11, a4, 0
  90abb3:	da30      	mov.n	a10, a3
  90abb5:	0b8000        	callx8	a8
  90abb8:	0c0200        	memw
  90abbb:	8b40      	l32i.n	a11, a4, 0
	A_PRINTF("0x7890  0x%x ......\n", ioread32(0x10ff7890));
  90abbd:	242212        	l32i	a4, a2, 72
  90abc0:	da30      	mov.n	a10, a3
  90abc2:	0b4000        	callx8	a4
  90abc5:	136a65        	l32r	a3, 8e555c <vdesc_module_install+0x54c>
	A_PRINTF("0x4088  0x%x ......\n", ioread32(0x10ff4088));
  90abc8:	222212        	l32i	a2, a2, 72
  90abcb:	0c0200        	memw
  90abce:	8b30      	l32i.n	a11, a3, 0
  90abd0:	1a6a6a        	l32r	a10, 8e5578 <vdesc_module_install+0x568>
  90abd3:	0b2000        	callx8	a2
	_fw_reset_dma_fifo();
  90abd6:	5bfeb9        	call8	90a6bc <_fw_reset_dma_fifo>
  90abd9:	d10f      	retw.n
	...

0090abdc <cmnos_clock_init_patch>:
extern a_uint32_t cticks;

// clock change 
//
void cmnos_clock_init_patch(a_uint32_t refclk)
{
  90abdc:	6c1004        	entry	a1, 32
    ref_clk = refclk;
  90abdf:	186a98        	l32r	a8, 8e5640 <vdesc_module_install+0x630>
  90abe2:	9280      	s32i.n	a2, a8, 0
  90abe4:	d10f      	retw.n
	...

0090abe8 <cmnos_refclk_speed_get_patch>:
}

// retrieve current clock setting
a_uint32_t cmnos_refclk_speed_get_patch(void)
{
  90abe8:	6c1004        	entry	a1, 32
    return ref_clk;
}
  90abeb:	186a98        	l32r	a8, 8e564c <vdesc_module_install+0x63c>
  90abee:	8280      	l32i.n	a2, a8, 0
  90abf0:	d10f      	retw.n
	...

0090abf4 <cmnos_delay_us_patch>:


// software emulate delay function
void cmnos_delay_us_patch(int us)
{
  90abf4:	6c1004        	entry	a1, 32
    a_uint32_t start_time = NOW();
  90abf7:	5b6f58        	call8	8e6958 <xthal_get_ccount>
    unsigned int num_ticks = us*ref_clk; // system_freq == number of ticks per 1us
  90abfa:	186a98        	l32r	a8, 8e565c <vdesc_module_install+0x64c>


// software emulate delay function
void cmnos_delay_us_patch(int us)
{
    a_uint32_t start_time = NOW();
  90abfd:	d3a0      	mov.n	a3, a10
    unsigned int num_ticks = us*ref_clk; // system_freq == number of ticks per 1us
  90abff:	288200        	l32i	a8, a8, 0
  90ac02:	082228        	mull	a2, a2, a8
    
    while ( (NOW() - start_time) < num_ticks) {
  90ac05:	5b6f54        	call8	8e6958 <xthal_get_ccount>
  90ac08:	03aa0c        	sub	a10, a10, a3
  90ac0b:	72a3f6        	bltu	a10, a2, 90ac05 <cmnos_delay_us_patch+0x11>
        /* busy spin */
        ;
    }
}
  90ac0e:	d10f      	retw.n

0090ac10 <cmnos_tick_patch>:


// software emulate microsecond ticks
void cmnos_tick_patch(void)
{
  90ac10:	6c1004        	entry	a1, 32
    static a_uint32_t last_tick = 0;
    a_uint32_t current_tick = NOW();
  90ac13:	5b6f51        	call8	8e6958 <xthal_get_ccount>
    a_uint32_t delta_tick;

    delta_tick = (A_UINT32 ) (current_tick - last_tick)/(ref_clk<<10);
  90ac16:	186a98        	l32r	a8, 8e5678 <vdesc_module_install+0x668>
  90ac19:	126a99        	l32r	a2, 8e5680 <vdesc_module_install+0x670>

// software emulate microsecond ticks
void cmnos_tick_patch(void)
{
    static a_uint32_t last_tick = 0;
    a_uint32_t current_tick = NOW();
  90ac1c:	d3a0      	mov.n	a3, a10
    a_uint32_t delta_tick;

    delta_tick = (A_UINT32 ) (current_tick - last_tick)/(ref_clk<<10);
  90ac1e:	8b80      	l32i.n	a11, a8, 0
  90ac20:	2a2200        	l32i	a10, a2, 0
  90ac23:	06bb11        	slli	a11, a11, 10
  90ac26:	0a3a0c        	sub	a10, a3, a10
  90ac29:	5b6f88        	call8	8e6a4c <__udivsi3>

    if( delta_tick > 0 )
  90ac2c:	c8a0      	beqz.n	a10, 90ac30 <cmnos_tick_patch+0x20>
        last_tick = current_tick;
  90ac2e:	9320      	s32i.n	a3, a2, 0

    cticks += delta_tick;
  90ac30:	126a9a        	l32r	a2, 8e5698 <vdesc_module_install+0x688>
  90ac33:	8320      	l32i.n	a3, a2, 0
  90ac35:	a3aa      	add.n	a10, a10, a3
  90ac37:	9a20      	s32i.n	a10, a2, 0
  90ac39:	d10f      	retw.n
	...

0090ac3c <cmnos_milliseconds_patch>:
}

// get current sysmem up time in milliseconds based
a_uint32_t cmnos_milliseconds_patch(void)
{
  90ac3c:	6c1004        	entry	a1, 32
    cmnos_tick_patch();
  90ac3f:	5bfff4        	call8	90ac10 <cmnos_tick_patch>
    
    return (cticks);
}
  90ac42:	186a9a        	l32r	a8, 8e56ac <vdesc_module_install+0x69c>
  90ac45:	8280      	l32i.n	a2, a8, 0
  90ac47:	d10f      	retw.n
  90ac49:	000000        	ill

0090ac4c <_HIFusb_get_max_msg_len_patch>:

/*
 * -- support more than 64 bytes command on ep4 -- 
 */
int _HIFusb_get_max_msg_len_patch(hif_handle_t handle, int pipe)
{
  90ac4c:	6c1004        	entry	a1, 32
  90ac4f:	233cfd        	addi	a3, a3, -3
    switch(pipe) {
  90ac52:	222a00        	movi	a2, 0x200
  90ac55:	6e3202        	bltui	a3, 2, 90ac5b <_HIFusb_get_max_msg_len_patch+0xf>
  90ac58:	226a40        	movi	a2, 0x640
            return 512;
            
        default:
            return 1600;
    }
}
  90ac5b:	d10f      	retw.n
  90ac5d:	000000        	ill

0090ac60 <_HIFusb_isr_handler_patch>:

/*
 * -- move the usb_task to here --
 */
void _HIFusb_isr_handler_patch(hif_handle_t h)
{
  90ac60:	6c1004        	entry	a1, 32
    A_USB_FW_TASK();
  90ac63:	186913        	l32r	a8, 8e50b0 <vdesc_module_install+0xa0>
  90ac66:	28821e        	l32i	a8, a8, 120
  90ac69:	0b8000        	callx8	a8

    _HIFusb_isr_handler();
  90ac6c:	5b629d        	call8	8e36e4 <_HIFusb_isr_handler>
  90ac6f:	d10f      	retw.n
  90ac71:	000000        	ill

0090ac74 <_HIFusb_start_patch>:
 * - update DMA_START bit4 to 1
 * - update DESC_START_ADDR
 * - update DMA_START bit 0
 */
void _HIFusb_start_patch(hif_handle_t handle) 
{
  90ac74:	6c1004        	entry	a1, 32
    MAGPIE_REG_USB_TX0_DMA_START = 0x0;
  90ac77:	1c6a9b        	l32r	a12, 8e56e4 <vdesc_module_install+0x6d4>
  90ac7a:	c080      	movi.n	a8, 0
    MAGPIE_REG_USB_RX0_DMA_START = 0x0;
  90ac7c:	1b6a9c        	l32r	a11, 8e56ec <vdesc_module_install+0x6dc>
 * - update DESC_START_ADDR
 * - update DMA_START bit 0
 */
void _HIFusb_start_patch(hif_handle_t handle) 
{
    MAGPIE_REG_USB_TX0_DMA_START = 0x0;
  90ac7f:	0c0200        	memw
  90ac82:	98c0      	s32i.n	a8, a12, 0
    MAGPIE_REG_USB_RX0_DMA_START = 0x0;
    MAGPIE_REG_USB_RX1_DMA_START = 0x0;
  90ac84:	1a6a9d        	l32r	a10, 8e56f8 <vdesc_module_install+0x6e8>
 * - update DMA_START bit 0
 */
void _HIFusb_start_patch(hif_handle_t handle) 
{
    MAGPIE_REG_USB_TX0_DMA_START = 0x0;
    MAGPIE_REG_USB_RX0_DMA_START = 0x0;
  90ac87:	0c0200        	memw
  90ac8a:	98b0      	s32i.n	a8, a11, 0
    MAGPIE_REG_USB_RX1_DMA_START = 0x0;
    MAGPIE_REG_USB_RX2_DMA_START = 0x0;
  90ac8c:	196a9e        	l32r	a9, 8e5704 <vdesc_module_install+0x6f4>
 */
void _HIFusb_start_patch(hif_handle_t handle) 
{
    MAGPIE_REG_USB_TX0_DMA_START = 0x0;
    MAGPIE_REG_USB_RX0_DMA_START = 0x0;
    MAGPIE_REG_USB_RX1_DMA_START = 0x0;
  90ac8f:	0c0200        	memw
  90ac92:	98a0      	s32i.n	a8, a10, 0
    MAGPIE_REG_USB_RX2_DMA_START = 0x0;
  90ac94:	0c0200        	memw
  90ac97:	9890      	s32i.n	a8, a9, 0
    
    while( 1 )
    {
        if(!MAGPIE_REG_USB_TX0_DMA_START &&
  90ac99:	0c0200        	memw
  90ac9c:	88c0      	l32i.n	a8, a12, 0
  90ac9e:	658ff7        	bnez	a8, 90ac99 <_HIFusb_start_patch+0x25>
	   !MAGPIE_REG_USB_RX0_DMA_START &&
  90aca1:	0c0200        	memw
  90aca4:	88b0      	l32i.n	a8, a11, 0
    MAGPIE_REG_USB_RX1_DMA_START = 0x0;
    MAGPIE_REG_USB_RX2_DMA_START = 0x0;
    
    while( 1 )
    {
        if(!MAGPIE_REG_USB_TX0_DMA_START &&
  90aca6:	658fef        	bnez	a8, 90ac99 <_HIFusb_start_patch+0x25>
	   !MAGPIE_REG_USB_RX0_DMA_START &&
	   !MAGPIE_REG_USB_RX1_DMA_START &&
  90aca9:	0c0200        	memw
  90acac:	88a0      	l32i.n	a8, a10, 0
    MAGPIE_REG_USB_RX2_DMA_START = 0x0;
    
    while( 1 )
    {
        if(!MAGPIE_REG_USB_TX0_DMA_START &&
	   !MAGPIE_REG_USB_RX0_DMA_START &&
  90acae:	658fe7        	bnez	a8, 90ac99 <_HIFusb_start_patch+0x25>
	   !MAGPIE_REG_USB_RX1_DMA_START &&
	   !MAGPIE_REG_USB_RX2_DMA_START )
  90acb1:	0c0200        	memw
  90acb4:	8890      	l32i.n	a8, a9, 0
    
    while( 1 )
    {
        if(!MAGPIE_REG_USB_TX0_DMA_START &&
	   !MAGPIE_REG_USB_RX0_DMA_START &&
	   !MAGPIE_REG_USB_RX1_DMA_START &&
  90acb6:	658fdf        	bnez	a8, 90ac99 <_HIFusb_start_patch+0x25>
	   !MAGPIE_REG_USB_RX2_DMA_START )
        {
            MAGPIE_REG_USB_TX0_DMA_START = MAGPIE_REG_USB_TX0_DMA_START|BIT4; 
  90acb9:	0c0200        	memw
  90acbc:	8dc0      	l32i.n	a13, a12, 0
  90acbe:	c180      	movi.n	a8, 16
  90acc0:	08dd02        	or	a13, a13, a8
  90acc3:	0c0200        	memw
  90acc6:	9dc0      	s32i.n	a13, a12, 0
            MAGPIE_REG_USB_RX0_DMA_START = MAGPIE_REG_USB_RX0_DMA_START|BIT4;
  90acc8:	0c0200        	memw
  90accb:	8cb0      	l32i.n	a12, a11, 0
  90accd:	08cc02        	or	a12, a12, a8
  90acd0:	0c0200        	memw
  90acd3:	9cb0      	s32i.n	a12, a11, 0
            MAGPIE_REG_USB_RX1_DMA_START = MAGPIE_REG_USB_RX1_DMA_START|BIT4;
  90acd5:	0c0200        	memw
  90acd8:	8ba0      	l32i.n	a11, a10, 0
  90acda:	08bb02        	or	a11, a11, a8
  90acdd:	0c0200        	memw
  90ace0:	9ba0      	s32i.n	a11, a10, 0
            MAGPIE_REG_USB_RX2_DMA_START = MAGPIE_REG_USB_RX2_DMA_START|BIT4;
  90ace2:	0c0200        	memw
  90ace5:	8a90      	l32i.n	a10, a9, 0
  90ace7:	08a802        	or	a8, a10, a8
  90acea:	0c0200        	memw
  90aced:	9890      	s32i.n	a8, a9, 0
            break;
        }
    }
    _HIFusb_start();
  90acef:	5b61ec        	call8	8e34a0 <_HIFusb_start>
  90acf2:	d10f      	retw.n

0090acf4 <__adf_os_dmamem_alloc>:
 * @return void* (Virtual address)
 */
inline void*
__adf_os_dmamem_alloc(__adf_os_device_t osdev, adf_os_size_t size, 
                      a_bool_t coherent, __adf_os_dma_map_t *dmap)
{    
  90acf4:	6c1004        	entry	a1, 32
    (*dmap) = A_ALLOCRAM(sizeof(struct __adf_dma_map));
  90acf7:	146913        	l32r	a4, 8e5144 <vdesc_module_install+0x134>
  90acfa:	c0a0      	movi.n	a10, 0
  90acfc:	224252        	l32i	a2, a4, 0x148
  90acff:	c0bc      	movi.n	a11, 12
  90ad01:	0b2000        	callx8	a2
  90ad04:	9a50      	s32i.n	a10, a5, 0
  90ad06:	d2a0      	mov.n	a2, a10
    
	if((*dmap) == NULL){
  90ad08:	c9a1      	beqz.n	a10, 90ad1d <__adf_os_dmamem_alloc+0x29>
		goto fail_malloc;
	}
	    
    (*dmap)->ds_addr = A_ALLOCRAM(size);
  90ad0a:	244252        	l32i	a4, a4, 0x148
  90ad0d:	c0a0      	movi.n	a10, 0
  90ad0f:	db30      	mov.n	a11, a3
  90ad11:	0b4000        	callx8	a4
  90ad14:	9a21      	s32i.n	a10, a2, 4
    (*dmap)->ds_len = size;
  90ad16:	8250      	l32i.n	a2, a5, 0
  90ad18:	232504        	s16i	a3, a2, 8
    
    return (*dmap)->ds_addr;
  90ad1b:	8221      	l32i.n	a2, a2, 4
    
fail_malloc: 
    return NULL;            
}
  90ad1d:	d10f      	retw.n
	...

0090ad20 <__adf_os_setup_intr>:
 * @return int
 */

int
__adf_os_setup_intr(__adf_os_device_t  osdev, adf_os_drv_intr fn)
{
  90ad20:	6c1004        	entry	a1, 32
    g_wlan_intr = fn;
  90ad23:	186a42        	l32r	a8, 8e562c <vdesc_module_install+0x61c>
    
    return 0;    
}
  90ad26:	c020      	movi.n	a2, 0
 */

int
__adf_os_setup_intr(__adf_os_device_t  osdev, adf_os_drv_intr fn)
{
    g_wlan_intr = fn;
  90ad28:	9380      	s32i.n	a3, a8, 0
    
    return 0;    
}
  90ad2a:	d10f      	retw.n

0090ad2c <__adf_os_free_intr>:
 * @param[in] dev
 * @param[in] sc
 */
void
__adf_os_free_intr(__adf_os_device_t osdev)
{
  90ad2c:	6c1004        	entry	a1, 32
    g_wlan_intr = NULL;  
  90ad2f:	186a42        	l32r	a8, 8e5638 <vdesc_module_install+0x628>
  90ad32:	c090      	movi.n	a9, 0
  90ad34:	9980      	s32i.n	a9, a8, 0
  90ad36:	d10f      	retw.n

0090ad38 <ath_hal_attach_tgt>:

struct ath_hal*
ath_hal_attach_tgt(a_uint32_t devid,HAL_SOFTC sc,
		   adf_os_device_t dev,
		   a_uint32_t flags, HAL_STATUS *error)
{
  90ad38:	6c1004        	entry	a1, 32
	struct ath_hal *ah = AH_NULL;

	ah = ar5416Attach(sc, dev, error);
  90ad3b:	da30      	mov.n	a10, a3
  90ad3d:	db40      	mov.n	a11, a4
  90ad3f:	dc60      	mov.n	a12, a6
  90ad41:	5804ef        	call8	90c100 <ar5416Attach>

	return ah;
}
  90ad44:	d2a0      	mov.n	a2, a10
  90ad46:	d10f      	retw.n

0090ad48 <ath_hal_getcapability>:

HAL_STATUS
ath_hal_getcapability(struct ath_hal *ah, HAL_CAPABILITY_TYPE type)
{
  90ad48:	6c1004        	entry	a1, 32
	const HAL_CAPABILITIES *pCap = &AH_PRIVATE(ah)->ah_caps;
	switch (type) {
  90ad4b:	68310d        	beqi	a3, 1, 90ad5c <ath_hal_getcapability+0x14>
  90ad4e:	c93e      	beqz.n	a3, 90ad70 <ath_hal_getcapability+0x28>
	case HAL_CAP_BSSIDMASK:
		return pCap->halBssIdMaskSupport ? HAL_OK : HAL_ENOTSUPP;
	case HAL_CAP_VEOL:
		return pCap->halVEOLSupport ? HAL_OK : HAL_ENOTSUPP;
	default:
		return HAL_EINVAL;
  90ad50:	233cfe        	addi	a3, a3, -2
  90ad53:	c08d      	movi.n	a8, 13
  90ad55:	c02c      	movi.n	a2, 12
  90ad57:	038238        	moveqz	a2, a8, a3
  90ad5a:	d10f      	retw.n
	const HAL_CAPABILITIES *pCap = &AH_PRIVATE(ah)->ah_caps;
	switch (type) {
	case HAL_CAP_TSF_ADJUST:
		return HAL_ENOTSUPP;
	case HAL_CAP_BSSIDMASK:
		return pCap->halBssIdMaskSupport ? HAL_OK : HAL_ENOTSUPP;
  90ad5c:	28222b        	l32i	a8, a2, 172
  90ad5f:	126a31        	l32r	a2, 8e5624 <vdesc_module_install+0x614>
  90ad62:	c03d      	movi.n	a3, 13
  90ad64:	028801        	and	a8, a8, a2
  90ad67:	c020      	movi.n	a2, 0
  90ad69:	083238        	moveqz	a2, a3, a8
  90ad6c:	d10f      	retw.n
  90ad6e:	000028        	mull	a0, a0, a0
	case HAL_CAP_VEOL:
		return pCap->halVEOLSupport ? HAL_OK : HAL_ENOTSUPP;
  90ad71:	222b12        	l32ai	a2, a2, 72
  90ad74:	6a3002        	blti	a3, -1, 90ad7a <ath_hal_getcapability+0x32>
  90ad77:	8201      	l32i.n	a2, a0, 4
  90ad79:	c08d      	movi.n	a8, 13
  90ad7b:	028338        	moveqz	a3, a8, a2
  90ad7e:	d230      	mov.n	a2, a3
	default:
		return HAL_EINVAL;
	}
}
  90ad80:	d10f      	retw.n
	...

0090ad84 <ath_hal_computetxtime>:

a_uint16_t
ath_hal_computetxtime(struct ath_hal *ah,
		      const HAL_RATE_TABLE *rates, a_uint32_t frameLen, a_uint16_t rateix,
		      HAL_BOOL shortPreamble)
{
  90ad84:	6c1004        	entry	a1, 32
  90ad87:	05054f        	extui	a5, a5, 0, 16
	a_uint32_t bitsPerSymbol, numBits, numSymbols, phyTime, txTime;
	a_uint32_t kbps;

	kbps = rates->info[rateix].rateKbps;
  90ad8a:	05550a        	addx4	a5, a5, a5
  90ad8d:	03530a        	addx4	a3, a5, a3
  90ad90:	8b3c      	l32i.n	a11, a3, 48

	/*
	 * index can be invalid duting dynamic Turbo transitions.
	 */
	if(kbps == 0) return 0;
  90ad92:	c020      	movi.n	a2, 0
  90ad94:	72b159        	beq	a11, a2, 90adf1 <ath_hal_computetxtime+0x6d>
	switch (rates->info[rateix].phy) {
  90ad97:	253c20        	addi	a5, a3, 32
  90ad9a:	285009        	l8ui	a8, a5, 9
  90ad9d:	728105        	beq	a8, a2, 90ada6 <ath_hal_computetxtime+0x22>
  90ada0:	69824a        	bnei	a8, 2, 90adee <ath_hal_computetxtime+0x6a>
  90ada3:	60002c        	j	90add3 <ath_hal_computetxtime+0x4f>

	case IEEE80211_T_CCK:
		phyTime = CCK_PREAMBLE_BITS + CCK_PLCP_BITS;
		if (shortPreamble && rates->info[rateix].shortPreamble)
  90ada6:	cc67      	bnez.n	a6, 90adb1 <ath_hal_computetxtime+0x2d>
	 */
	if(kbps == 0) return 0;
	switch (rates->info[rateix].phy) {

	case IEEE80211_T_CCK:
		phyTime = CCK_PREAMBLE_BITS + CCK_PLCP_BITS;
  90ada8:	220ac0        	movi	a2, 192
  90adab:	60000b        	j	90adba <ath_hal_computetxtime+0x36>
  90adae:	000000        	ill
		if (shortPreamble && rates->info[rateix].shortPreamble)
  90adb1:	225015        	l8ui	a2, a5, 21
  90adb4:	642ff0        	beqz	a2, 90ada8 <ath_hal_computetxtime+0x24>
			phyTime >>= 1;
  90adb7:	220a60        	movi	a2, 96
		numBits = frameLen << 3;
  90adba:	0d4511        	slli	a5, a4, 3
		txTime = phyTime + ((numBits * 1000)/kbps);
  90adbd:	084411        	slli	a4, a4, 8
  90adc0:	05440c        	sub	a4, a4, a5
  90adc3:	054a0a        	addx4	a10, a4, a5
  90adc6:	0daa11        	slli	a10, a10, 3
  90adc9:	5b6f20        	call8	8e6a4c <__udivsi3>
  90adcc:	baaa      	addi.n	a10, a10, 10
		/* TODO: make sure the same value of txTime can use in all device */
		if (ath_hal_getcapability(ah, HAL_CAP_HT) != HAL_OK)
			txTime = txTime + CCK_SIFS_TIME;
  90adce:	a2a2      	add.n	a2, a10, a2
  90add0:	60001a        	j	90adee <ath_hal_computetxtime+0x6a>
		break;
	case IEEE80211_T_OFDM:
		/* full rate channel */
		bitsPerSymbol   = (kbps * OFDM_SYMBOL_TIME) / 1000;
  90add3:	126a9f        	l32r	a2, 8e5850 <vdesc_module_install+0x840>
  90add6:	0ebb11        	slli	a11, a11, 2
  90add9:	02bb2a        	muluh	a11, a11, a2
  90addc:	0b6b14        	srli	a11, a11, 6
		HALASSERT(bitsPerSymbol != 0);

		numBits = OFDM_PLCP_BITS + (frameLen << 3);
		numSymbols = asf_howmany(numBits, bitsPerSymbol);
  90addf:	2abc15        	addi	a10, a11, 21
  90ade2:	0a4a0b        	addx8	a10, a4, a10
  90ade5:	5b6f19        	call8	8e6a4c <__udivsi3>
		txTime = OFDM_PREAMBLE_TIME + (numSymbols * OFDM_SYMBOL_TIME);
  90ade8:	0eaa11        	slli	a10, a10, 2
		/* TODO: make sure the same value of txTime can use in all device */
		if (ath_hal_getcapability(ah, HAL_CAP_HT) != HAL_OK)
			txTime = txTime + OFDM_SIFS_TIME;
  90adeb:	22ac24        	addi	a2, a10, 36
		break;
	default:
		txTime = 0;
		break;
	}
	return txTime;
  90adee:	02024f        	extui	a2, a2, 0, 16
}
  90adf1:	d10f      	retw.n
	...

0090adf4 <ath_hal_get_curmode>:
#undef OFDM_SYMBOL_TIME

#ifdef MAGPIE_MERLIN
a_uint32_t 
ath_hal_get_curmode(struct ath_hal *ah, HAL_CHANNEL_INTERNAL *chan)
{
  90adf4:	6c1004        	entry	a1, 32
	if (!chan)
		return HAL_MODE_11NG;
  90adf7:	126a31        	l32r	a2, 8e56bc <vdesc_module_install+0x6ac>

#ifdef MAGPIE_MERLIN
a_uint32_t 
ath_hal_get_curmode(struct ath_hal *ah, HAL_CHANNEL_INTERNAL *chan)
{
	if (!chan)
  90adfa:	643046        	beqz	a3, 90ae44 <ath_hal_get_curmode+0x50>
		return HAL_MODE_11NG;

	if (IS_CHAN_NA(chan))
  90adfd:	8831      	l32i.n	a8, a3, 4
  90adff:	19693a        	l32r	a9, 8e52e8 <vdesc_module_install+0x2d8>
		return HAL_MODE_11NA; 
  90ae02:	126a30        	l32r	a2, 8e56c4 <vdesc_module_install+0x6b4>
ath_hal_get_curmode(struct ath_hal *ah, HAL_CHANNEL_INTERNAL *chan)
{
	if (!chan)
		return HAL_MODE_11NG;

	if (IS_CHAN_NA(chan))
  90ae05:	098301        	and	a3, a8, a9
  90ae08:	793138        	beq	a3, a9, 90ae44 <ath_hal_get_curmode+0x50>
		return HAL_MODE_11NA; 

	if (IS_CHAN_A(chan))
  90ae0b:	221a40        	movi	a2, 0x140
  90ae0e:	028301        	and	a3, a8, a2
  90ae11:	72312d        	beq	a3, a2, 90ae42 <ath_hal_get_curmode+0x4e>
		return HAL_MODE_11A;

	if (IS_CHAN_NG(chan))
  90ae14:	196aa0        	l32r	a9, 8e5894 <vdesc_module_install+0x884>
#ifdef MAGPIE_MERLIN
a_uint32_t 
ath_hal_get_curmode(struct ath_hal *ah, HAL_CHANNEL_INTERNAL *chan)
{
	if (!chan)
		return HAL_MODE_11NG;
  90ae17:	126a31        	l32r	a2, 8e56dc <vdesc_module_install+0x6cc>
		return HAL_MODE_11NA; 

	if (IS_CHAN_A(chan))
		return HAL_MODE_11A;

	if (IS_CHAN_NG(chan))
  90ae1a:	098301        	and	a3, a8, a9
  90ae1d:	793123        	beq	a3, a9, 90ae44 <ath_hal_get_curmode+0x50>
		return HAL_MODE_11NG;

	if (IS_CHAN_G(chan))
  90ae20:	290ad0        	movi	a9, 208
  90ae23:	098901        	and	a9, a8, a9
  90ae26:	230ac0        	movi	a3, 192
		return HAL_MODE_11G;
  90ae29:	c028      	movi.n	a2, 8
		return HAL_MODE_11A;

	if (IS_CHAN_NG(chan))
		return HAL_MODE_11NG;

	if (IS_CHAN_G(chan))
  90ae2b:	739115        	beq	a9, a3, 90ae44 <ath_hal_get_curmode+0x50>
		return HAL_MODE_11G;

	if (IS_CHAN_B(chan))
  90ae2e:	290aa0        	movi	a9, 160
  90ae31:	098801        	and	a8, a8, a9
		return HAL_MODE_11B;
  90ae34:	136a31        	l32r	a3, 8e56f8 <vdesc_module_install+0x6e8>
  90ae37:	09890c        	sub	a9, a8, a9
  90ae3a:	c024      	movi.n	a2, 4
  90ae3c:	093239        	movnez	a2, a3, a9
  90ae3f:	d10f      	retw.n
  90ae41:	00c021        	excw

	HALASSERT(0);
	return HAL_MODE_11NG;
}
  90ae44:	d10f      	retw.n
	...

0090ae48 <ath_hal_wait>:

#endif

HAL_BOOL
ath_hal_wait(struct ath_hal *ah, a_uint32_t reg, a_uint32_t mask, a_uint32_t val)
{
  90ae48:	6c1004        	entry	a1, 32
				return AH_TRUE;
			OS_DELAY(10);
		}
	} else {
		for (i = 0; i < AH_TIMEOUT_11G; i++) {
			if ((ioread32_mac(reg) & mask) == val)
  90ae4b:	186a01        	l32r	a8, 8e5650 <vdesc_module_install+0x640>

#endif

HAL_BOOL
ath_hal_wait(struct ath_hal *ah, a_uint32_t reg, a_uint32_t mask, a_uint32_t val)
{
  90ae4e:	223ae8        	movi	a2, 0x3e8
				return AH_TRUE;
			OS_DELAY(10);
		}
	} else {
		for (i = 0; i < AH_TIMEOUT_11G; i++) {
			if ((ioread32_mac(reg) & mask) == val)
  90ae51:	083308        	add	a3, a3, a8
  90ae54:	0c0200        	memw
  90ae57:	8830      	l32i.n	a8, a3, 0
  90ae59:	084801        	and	a8, a4, a8
  90ae5c:	75810d        	beq	a8, a5, 90ae6d <ath_hal_wait+0x25>
				return AH_TRUE;
			OS_DELAY(10);
  90ae5f:	2a0a0a        	movi	a10, 10
  90ae62:	222cff        	addi	a2, a2, -1
  90ae65:	5bf323        	call8	907af4 <ath_hal_delay>
			if ((ioread32_mac(reg) & mask) == val)
				return AH_TRUE;
			OS_DELAY(10);
		}
	} else {
		for (i = 0; i < AH_TIMEOUT_11G; i++) {
  90ae68:	652fe8        	bnez	a2, 90ae54 <ath_hal_wait+0xc>
  90ae6b:	d10f      	retw.n
			if ((ioread32_mac(reg) & mask) == val)
				return AH_TRUE;
  90ae6d:	c021      	movi.n	a2, 1
	}
	return AH_FALSE;

#undef AH_TIMEOUT_11N
#undef AH_TIMEOUT_11G
}
  90ae6f:	d10f      	retw.n
  90ae71:	000000        	ill

0090ae74 <ar5416IsInterruptPending>:
/**********************/
/* Interrupt Handling */
/**********************/

HAL_BOOL ar5416IsInterruptPending(struct ath_hal *ah)
{
  90ae74:	6c1004        	entry	a1, 32
  90ae77:	126aa1        	l32r	a2, 8e58fc <vdesc_module_install+0x8ec>
  90ae7a:	0c0200        	memw
  90ae7d:	8820      	l32i.n	a8, a2, 0
		ioread32_mac(AR_INTR_ASYNC_CAUSE);
	/*
	 * Some platforms trigger our ISR before applying power to
	 * the card, so make sure.
	 */
	return ((host_isr != AR_INTR_SPURIOUS) && (host_isr & AR_INTR_MAC_IRQ));
  90ae7f:	c020      	movi.n	a2, 0
  90ae81:	081940        	extui	a9, a8, 1, 1
  90ae84:	b188      	addi.n	a8, a8, 1
  90ae86:	089239        	movnez	a2, a9, a8
}
  90ae89:	d10f      	retw.n
	...

0090ae8c <ar5416SetInterrupts>:
	return AH_TRUE;
}

HAL_INT
ar5416SetInterrupts(struct ath_hal *ah, HAL_INT ints)
{
  90ae8c:	6c1004        	entry	a1, 32
  90ae8f:	d920      	mov.n	a9, a2
	struct ath_hal_5416 *ahp = AH5416(ah);
	a_uint32_t omask = ahp->ah_maskReg;
  90ae91:	222236        	l32i	a2, a2, 216
	a_uint32_t mask;

	if (omask & HAL_INT_GLOBAL) {
  90ae94:	672011        	bgez	a2, 90aea9 <ar5416SetInterrupts+0x1d>
  90ae97:	186aa2        	l32r	a8, 8e5920 <vdesc_module_install+0x910>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90ae9a:	2a0a00        	movi	a10, 0
  90ae9d:	0c0200        	memw
  90aea0:	2a8600        	s32i	a10, a8, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90aea3:	0c0200        	memw
  90aea6:	288200        	l32i	a8, a8, 0
		iowrite32_mac(AR_IER, AR_IER_DISABLE);
		(void) ioread32_mac(AR_IER);
	}

	mask = ints & HAL_INT_COMMON;
  90aea9:	186aa3        	l32r	a8, 8e5938 <vdesc_module_install+0x928>
  90aeac:	083801        	and	a8, a3, a8
	if (ints & HAL_INT_TX) {
  90aeaf:	793705        	bbci	a3, 25, 90aeb8 <ar5416SetInterrupts+0x2c>
#else
		mask |= AR_IMR_TXOK;
		mask |= AR_IMR_TXDESC;
#endif
		mask |= AR_IMR_TXERR;
		mask |= AR_IMR_TXEOL;
  90aeb2:	2a5ac0        	movi	a10, 0x5c0
  90aeb5:	0a8802        	or	a8, a8, a10
	}
	if (ints & HAL_INT_RX) {
  90aeb8:	7f3704        	bbci	a3, 31, 90aec0 <ar5416SetInterrupts+0x34>
		mask |= AR_IMR_RXERR;
#ifdef AR5416_INT_MITIGATION
		mask |=  AR_IMR_RXMINTR | AR_IMR_RXINTM;
#else
		mask |= AR_IMR_RXOK | AR_IMR_RXDESC;
  90aebb:	c0a7      	movi.n	a10, 7
  90aebd:	0a8802        	or	a8, a8, a10
#endif
	}

	if (ints & (HAL_INT_GTT | HAL_INT_CST)) {
  90aec0:	1a6aa4        	l32r	a10, 8e5950 <vdesc_module_install+0x940>
  90aec3:	7a3005        	bnone	a3, a10, 90aecc <ar5416SetInterrupts+0x40>
		mask |= AR_IMR_BCNMISC;
  90aec6:	1a6aa5        	l32r	a10, 8e595c <vdesc_module_install+0x94c>
  90aec9:	0a8802        	or	a8, a8, a10
  90aecc:	1a6aa6        	l32r	a10, 8e5964 <vdesc_module_install+0x954>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90aecf:	0c0200        	memw
  90aed2:	98a0      	s32i.n	a8, a10, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90aed4:	0c0200        	memw
  90aed7:	88a0      	l32i.n	a8, a10, 0
	}

	iowrite32_mac(AR_IMR, mask);
	(void) ioread32_mac(AR_IMR);
	ahp->ah_maskReg = ints;
  90aed9:	239636        	s32i	a3, a9, 216

	/* Re-enable interrupts if they were enabled before. */
	if (ints & HAL_INT_GLOBAL) {
  90aedc:	673010        	bgez	a3, 90aef0 <ar5416SetInterrupts+0x64>
  90aedf:	136aa2        	l32r	a3, 8e5968 <vdesc_module_install+0x958>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90aee2:	c081      	movi.n	a8, 1
  90aee4:	0c0200        	memw
  90aee7:	283600        	s32i	a8, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90aeea:	0c0200        	memw
  90aeed:	233200        	l32i	a3, a3, 0
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90aef0:	186aa7        	l32r	a8, 8e598c <vdesc_module_install+0x97c>
  90aef3:	c032      	movi.n	a3, 2
  90aef5:	0c0200        	memw
  90aef8:	9380      	s32i.n	a3, a8, 0
  90aefa:	186aa8        	l32r	a8, 8e599c <vdesc_module_install+0x98c>
  90aefd:	0c0200        	memw
  90af00:	9380      	s32i.n	a3, a8, 0
  90af02:	186aaa        	l32r	a8, 8e59ac <vdesc_module_install+0x99c>
  90af05:	136aa9        	l32r	a3, 8e59ac <vdesc_module_install+0x99c>
  90af08:	0c0200        	memw
  90af0b:	9830      	s32i.n	a8, a3, 0
	iowrite32_mac(AR_INTR_ASYNC_ENABLE, AR_INTR_MAC_IRQ);
	iowrite32_mac(AR_INTR_ASYNC_MASK, AR_INTR_MAC_IRQ);
	iowrite32_mac(AR_INTR_SYNC_ENABLE, AR_INTR_SYNC_ALL);

	return omask;
}
  90af0d:	d10f      	retw.n
	...

0090af10 <ar5416GetTsf64>:
/****************/
/* TSF Handling */
/****************/

u_int64_t ar5416GetTsf64(struct ath_hal *ah)
{
  90af10:	6c1004        	entry	a1, 32
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90af13:	126aab        	l32r	a2, 8e59c0 <vdesc_module_install+0x9b0>
  90af16:	136aac        	l32r	a3, 8e59c8 <vdesc_module_install+0x9b8>
  90af19:	0c0200        	memw
  90af1c:	8220      	l32i.n	a2, a2, 0
  90af1e:	0c0200        	memw
  90af21:	8330      	l32i.n	a3, a3, 0

	tsf = ioread32_mac(AR_TSF_U32);
	tsf = (tsf << 32) | ioread32_mac(AR_TSF_L32);

        return tsf;
}
  90af23:	d10f      	retw.n
  90af25:	000000        	ill

0090af28 <ar5416SetRxDP>:

/******/
/* RX */
/******/
void ar5416SetRxDP(struct ath_hal *ah, a_uint32_t rxdp)
{
  90af28:	6c1004        	entry	a1, 32
  90af2b:	186aad        	l32r	a8, 8e59e0 <vdesc_module_install+0x9d0>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90af2e:	0c0200        	memw
  90af31:	9380      	s32i.n	a3, a8, 0
  90af33:	d10f      	retw.n
  90af35:	000000        	ill

0090af38 <ar5416EnableReceive>:
			     & ~AR_RXCFG_ZLFDMA);
	}
}

void ar5416EnableReceive(struct ath_hal *ah)
{
  90af38:	6c1004        	entry	a1, 32
  90af3b:	186aae        	l32r	a8, 8e59f4 <vdesc_module_install+0x9e4>
  90af3e:	c094      	movi.n	a9, 4
  90af40:	0c0200        	memw
  90af43:	9980      	s32i.n	a9, a8, 0
  90af45:	d10f      	retw.n
	...

0090af48 <ar5416StopPcuReceive>:
	iowrite32_mac(AR_CR, AR_CR_RXE);
}

void ar5416StopPcuReceive(struct ath_hal *ah)
{
  90af48:	6c1004        	entry	a1, 32
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90af4b:	186aaf        	l32r	a8, 8e5a08 <vdesc_module_install+0x9f8>
	OS_REG_SET_BIT(ah, AR_DIAG_SW, AR_DIAG_RX_DIS);
  90af4e:	c290      	movi.n	a9, 32
  90af50:	0c0200        	memw
  90af53:	8a80      	l32i.n	a10, a8, 0
  90af55:	09a902        	or	a9, a10, a9
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90af58:	0c0200        	memw
  90af5b:	9980      	s32i.n	a9, a8, 0
  90af5d:	d10f      	retw.n
	...

0090af60 <ar5416SetupRxDesc_20>:
}

HAL_BOOL ar5416SetupRxDesc_20(struct ath_rx_desc *ds,
			      a_uint32_t size, a_uint32_t flags)
{
  90af60:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	HALASSERT((size &~ AR_BufLen) == 0);

	ads->ds_ctl1 = size & AR_BufLen;
  90af63:	03084b        	extui	a8, a3, 0, 12
	if (flags & HAL_RXDESC_INTREQ)
  90af66:	7a4f16        	bbsi	a4, 26, 90af80 <ar5416SetupRxDesc_20+0x20>
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	HALASSERT((size &~ AR_BufLen) == 0);

	ads->ds_ctl1 = size & AR_BufLen;
  90af69:	088957        	extui	a9, a8, 24, 8
  90af6c:	29240c        	s8i	a9, a2, 12
  90af6f:	088814        	srli	a8, a8, 8
  90af72:	c090      	movi.n	a9, 0
  90af74:	29240d        	s8i	a9, a2, 13
  90af77:	28240e        	s8i	a8, a2, 14
  90af7a:	23240f        	s8i	a3, a2, 15
  90af7d:	60001a        	j	90af9b <ar5416SetupRxDesc_20+0x3b>
	if (flags & HAL_RXDESC_INTREQ)
		ads->ds_ctl1 |= AR_RxIntrReq;
  90af80:	136a00        	l32r	a3, 8e5780 <vdesc_module_install+0x770>
  90af83:	038802        	or	a8, a8, a3
  90af86:	088357        	extui	a3, a8, 24, 8
  90af89:	23240c        	s8i	a3, a2, 12
  90af8c:	080357        	extui	a3, a8, 16, 8
  90af8f:	23240d        	s8i	a3, a2, 13
  90af92:	088347        	extui	a3, a8, 8, 8
  90af95:	23240e        	s8i	a3, a2, 14
  90af98:	28240f        	s8i	a8, a2, 15

	/* this should be enough */
	ads->ds_rxstatus8 &= ~AR_RxDone;
  90af9b:	292030        	l8ui	a9, a2, 48
  90af9e:	232031        	l8ui	a3, a2, 49
  90afa1:	282032        	l8ui	a8, a2, 50
  90afa4:	089910        	slli	a9, a9, 24
  90afa7:	003311        	slli	a3, a3, 16
  90afaa:	093302        	or	a3, a3, a9
  90afad:	088811        	slli	a8, a8, 8
  90afb0:	038802        	or	a8, a8, a3
  90afb3:	232033        	l8ui	a3, a2, 51
  90afb6:	083802        	or	a8, a3, a8
  90afb9:	c73e      	movi.n	a3, -2
  90afbb:	038801        	and	a8, a8, a3
  90afbe:	088357        	extui	a3, a8, 24, 8
  90afc1:	232430        	s8i	a3, a2, 48
  90afc4:	080357        	extui	a3, a8, 16, 8
  90afc7:	232431        	s8i	a3, a2, 49
  90afca:	088347        	extui	a3, a8, 8, 8
  90afcd:	232432        	s8i	a3, a2, 50
  90afd0:	282433        	s8i	a8, a2, 51

	return AH_TRUE;
}
  90afd3:	c021      	movi.n	a2, 1
  90afd5:	d10f      	retw.n
	...

0090afd8 <ar5416ProcRxDescFast_20>:

HAL_STATUS ar5416ProcRxDescFast_20(struct ath_hal *ah, struct ath_rx_desc *ds,
				   a_uint32_t pa, struct ath_desc *nds,
				   struct ath_rx_status *rx_stats)
{
  90afd8:	6c1004        	entry	a1, 32
	struct ar5416_desc ads;
	struct ar5416_desc *adsp = AR5416DESC(ds);
	struct ar5416_desc *ands = AR5416DESC(nds);

	if ((adsp->ds_rxstatus8 & AR_RxDone) == 0)
  90afdb:	293030        	l8ui	a9, a3, 48
  90afde:	223031        	l8ui	a2, a3, 49
  90afe1:	283032        	l8ui	a8, a3, 50
  90afe4:	089910        	slli	a9, a9, 24
  90afe7:	002211        	slli	a2, a2, 16
  90afea:	092202        	or	a2, a2, a9
  90afed:	088811        	slli	a8, a8, 8
  90aff0:	028802        	or	a8, a8, a2
  90aff3:	223033        	l8ui	a2, a3, 51
  90aff6:	082802        	or	a8, a2, a8
		return HAL_EINPROGRESS;
  90aff9:	c02f      	movi.n	a2, 15
{
	struct ar5416_desc ads;
	struct ar5416_desc *adsp = AR5416DESC(ds);
	struct ar5416_desc *ands = AR5416DESC(nds);

	if ((adsp->ds_rxstatus8 & AR_RxDone) == 0)
  90affb:	7f8f02        	bbsi	a8, 31, 90b001 <ar5416ProcRxDescFast_20+0x29>
  90affe:	6001be        	j	90b1c0 <ar5416ProcRxDescFast_20+0x1e8>
	/*
	 * Given the use of a self-linked tail be very sure that the hw is
	 * done with this descriptor; the hw may have done this descriptor
	 * once and picked it up again...make sure the hw has moved on.
	 */
	if ((ands->ds_rxstatus8 & AR_RxDone) == 0
  90b001:	255033        	l8ui	a5, a5, 51
  90b004:	7f5f0d        	bbsi	a5, 31, 90b015 <ar5416ProcRxDescFast_20+0x3d>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90b007:	156aad        	l32r	a5, 8e5abc <vdesc_module_install+0xaac>
  90b00a:	0c0200        	memw
  90b00d:	8550      	l32i.n	a5, a5, 0
	    && ioread32_mac(AR_RXDP) == pa)
  90b00f:	745902        	bne	a5, a4, 90b015 <ar5416ProcRxDescFast_20+0x3d>
  90b012:	6001aa        	j	90b1c0 <ar5416ProcRxDescFast_20+0x1e8>
	 * Next we fill in all values in a caller passed stack variable.
	 * This reduces the number of uncached accesses.
	 * Do this copy here, after the check so that when the checks fail, we
	 * dont end up copying the entire stats uselessly.
	 */
	ads.u.rx = adsp->u.rx;
  90b015:	243010        	l8ui	a4, a3, 16
  90b018:	223011        	l8ui	a2, a3, 17
  90b01b:	2a3012        	l8ui	a10, a3, 18
  90b01e:	084410        	slli	a4, a4, 24
  90b021:	002211        	slli	a2, a2, 16
  90b024:	042202        	or	a2, a2, a4
  90b027:	08aa11        	slli	a10, a10, 8
  90b02a:	02aa02        	or	a10, a10, a2
  90b02d:	223013        	l8ui	a2, a3, 19
  90b030:	243014        	l8ui	a4, a3, 20
  90b033:	0a2a02        	or	a10, a2, a10
  90b036:	223015        	l8ui	a2, a3, 21
  90b039:	2b3016        	l8ui	a11, a3, 22
  90b03c:	084410        	slli	a4, a4, 24
  90b03f:	002211        	slli	a2, a2, 16
  90b042:	042202        	or	a2, a2, a4
  90b045:	08bb11        	slli	a11, a11, 8
  90b048:	02bb02        	or	a11, a11, a2
  90b04b:	223017        	l8ui	a2, a3, 23
  90b04e:	243018        	l8ui	a4, a3, 24
  90b051:	0b2b02        	or	a11, a2, a11
  90b054:	223019        	l8ui	a2, a3, 25
  90b057:	2c301a        	l8ui	a12, a3, 26
  90b05a:	084410        	slli	a4, a4, 24
  90b05d:	002211        	slli	a2, a2, 16
  90b060:	042202        	or	a2, a2, a4
  90b063:	08cc11        	slli	a12, a12, 8
  90b066:	02cc02        	or	a12, a12, a2
  90b069:	22301b        	l8ui	a2, a3, 27
  90b06c:	25301c        	l8ui	a5, a3, 28
  90b06f:	24301d        	l8ui	a4, a3, 29
  90b072:	0c2c02        	or	a12, a2, a12
  90b075:	22301e        	l8ui	a2, a3, 30
  90b078:	085510        	slli	a5, a5, 24
  90b07b:	004411        	slli	a4, a4, 16
  90b07e:	054402        	or	a4, a4, a5
  90b081:	082211        	slli	a2, a2, 8
  90b084:	042202        	or	a2, a2, a4
  90b087:	24301f        	l8ui	a4, a3, 31
  90b08a:	253020        	l8ui	a5, a3, 32
  90b08d:	024202        	or	a2, a4, a2
  90b090:	243021        	l8ui	a4, a3, 33
  90b093:	293022        	l8ui	a9, a3, 34
  90b096:	085510        	slli	a5, a5, 24
  90b099:	004411        	slli	a4, a4, 16
  90b09c:	054402        	or	a4, a4, a5
  90b09f:	089911        	slli	a9, a9, 8
  90b0a2:	049902        	or	a9, a9, a4
  90b0a5:	243023        	l8ui	a4, a3, 35
  90b0a8:	2d3024        	l8ui	a13, a3, 36
  90b0ab:	253025        	l8ui	a5, a3, 37
  90b0ae:	094902        	or	a9, a4, a9
  90b0b1:	243026        	l8ui	a4, a3, 38
  90b0b4:	08dd10        	slli	a13, a13, 24
  90b0b7:	005511        	slli	a5, a5, 16
  90b0ba:	0d5502        	or	a5, a5, a13
  90b0bd:	084411        	slli	a4, a4, 8
  90b0c0:	054402        	or	a4, a4, a5
  90b0c3:	253027        	l8ui	a5, a3, 39
  90b0c6:	2e3028        	l8ui	a14, a3, 40
  90b0c9:	2d3029        	l8ui	a13, a3, 41
  90b0cc:	045402        	or	a4, a5, a4
  90b0cf:	25302a        	l8ui	a5, a3, 42
  90b0d2:	08ee10        	slli	a14, a14, 24
  90b0d5:	00dd11        	slli	a13, a13, 16
  90b0d8:	23302b        	l8ui	a3, a3, 43
  90b0db:	0edd02        	or	a13, a13, a14
  90b0de:	085511        	slli	a5, a5, 8
  90b0e1:	0d5502        	or	a5, a5, a13
  90b0e4:	053502        	or	a5, a3, a5

	rx_stats->rs_status = 0;
  90b0e7:	c030      	movi.n	a3, 0
  90b0e9:	23640a        	s8i	a3, a6, 10
	rx_stats->rs_flags = 0;
  90b0ec:	23641a        	s8i	a3, a6, 26

	rx_stats->rs_datalen = ads.ds_rxstatus1 & AR_DataLen;
  90b0ef:	0b034b        	extui	a3, a11, 0, 12
  90b0f2:	236504        	s16i	a3, a6, 8
	rx_stats->rs_tstamp =  ads.AR_RcvTimestamp;
  90b0f5:	c030      	movi.n	a3, 0
  90b0f7:	9360      	s32i.n	a3, a6, 0
  90b0f9:	9c61      	s32i.n	a12, a6, 4

	/* XXX what about KeyCacheMiss? */
	rx_stats->rs_rssi_combined = 
		MS(ads.ds_rxstatus4, AR_RxRSSICombined);
  90b0fb:	098357        	extui	a3, a9, 24, 8

	rx_stats->rs_datalen = ads.ds_rxstatus1 & AR_DataLen;
	rx_stats->rs_tstamp =  ads.AR_RcvTimestamp;

	/* XXX what about KeyCacheMiss? */
	rx_stats->rs_rssi_combined = 
  90b0fe:	23640c        	s8i	a3, a6, 12
		MS(ads.ds_rxstatus4, AR_RxRSSICombined);
	rx_stats->rs_rssi_ctl0 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt00);
	rx_stats->rs_rssi_ctl1 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt01);
  90b101:	0a8347        	extui	a3, a10, 8, 8
  90b104:	23640e        	s8i	a3, a6, 14
	rx_stats->rs_rssi_ctl2 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt02);
  90b107:	0a0357        	extui	a3, a10, 16, 8
  90b10a:	23640f        	s8i	a3, a6, 15
	rx_stats->rs_rssi_ext0 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt10);
	rx_stats->rs_rssi_ext1 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt11);
  90b10d:	098347        	extui	a3, a9, 8, 8
  90b110:	236411        	s8i	a3, a6, 17
	rx_stats->rs_rssi_ext2 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt12);
  90b113:	090357        	extui	a3, a9, 16, 8
  90b116:	236412        	s8i	a3, a6, 18
	rx_stats->rs_tstamp =  ads.AR_RcvTimestamp;

	/* XXX what about KeyCacheMiss? */
	rx_stats->rs_rssi_combined = 
		MS(ads.ds_rxstatus4, AR_RxRSSICombined);
	rx_stats->rs_rssi_ctl0 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt00);
  90b119:	2a640d        	s8i	a10, a6, 13
	rx_stats->rs_rssi_ctl1 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt01);
	rx_stats->rs_rssi_ctl2 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt02);
	rx_stats->rs_rssi_ext0 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt10);
  90b11c:	296410        	s8i	a9, a6, 16
	rx_stats->rs_rssi_ext1 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt11);
	rx_stats->rs_rssi_ext2 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt12);
	if (ads.ds_rxstatus8 & AR_RxKeyIdxValid)
		rx_stats->rs_keyix = MS(ads.ds_rxstatus8, AR_KeyIdx);
  90b11f:	089346        	extui	a3, a8, 9, 7
	rx_stats->rs_rssi_ctl1 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt01);
	rx_stats->rs_rssi_ctl2 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt02);
	rx_stats->rs_rssi_ext0 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt10);
	rx_stats->rs_rssi_ext1 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt11);
	rx_stats->rs_rssi_ext2 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt12);
	if (ads.ds_rxstatus8 & AR_RxKeyIdxValid)
  90b122:	778f02        	bbsi	a8, 23, 90b128 <ar5416ProcRxDescFast_20+0x150>
		rx_stats->rs_keyix = MS(ads.ds_rxstatus8, AR_KeyIdx);
	else
		rx_stats->rs_keyix = HAL_RXKEYIX_INVALID;
  90b125:	23faff        	movi	a3, -1
  90b128:	236413        	s8i	a3, a6, 19
	/* NB: caller expected to do rate table mapping */
	rx_stats->rs_rate = RXSTATUS_RATE(ah, (&ads));
	rx_stats->rs_more = (ads.ds_rxstatus1 & AR_RxMore) ? 1 : 0;

	rx_stats->rs_isaggr = (ads.ds_rxstatus8 & AR_RxAggr) ? 1 : 0;
  90b12b:	081350        	extui	a3, a8, 17, 1
  90b12e:	236417        	s8i	a3, a6, 23
	rx_stats->rs_moreaggr = (ads.ds_rxstatus8 & AR_RxMoreAggr) ? 1 : 0;
  90b131:	080350        	extui	a3, a8, 16, 1
	if (ads.ds_rxstatus8 & AR_RxKeyIdxValid)
		rx_stats->rs_keyix = MS(ads.ds_rxstatus8, AR_KeyIdx);
	else
		rx_stats->rs_keyix = HAL_RXKEYIX_INVALID;
	/* NB: caller expected to do rate table mapping */
	rx_stats->rs_rate = RXSTATUS_RATE(ah, (&ads));
  90b134:	0a8a57        	extui	a10, a10, 24, 8
	rx_stats->rs_more = (ads.ds_rxstatus1 & AR_RxMore) ? 1 : 0;
  90b137:	0bcb40        	extui	a11, a11, 12, 1

	rx_stats->rs_isaggr = (ads.ds_rxstatus8 & AR_RxAggr) ? 1 : 0;
	rx_stats->rs_moreaggr = (ads.ds_rxstatus8 & AR_RxMoreAggr) ? 1 : 0;
  90b13a:	236418        	s8i	a3, a6, 24
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_GI) ? HAL_RX_GI : 0;
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_2040) ? HAL_RX_2040 : 0;
  90b13d:	c032      	movi.n	a3, 2
	if (ads.ds_rxstatus8 & AR_RxKeyIdxValid)
		rx_stats->rs_keyix = MS(ads.ds_rxstatus8, AR_KeyIdx);
	else
		rx_stats->rs_keyix = HAL_RXKEYIX_INVALID;
	/* NB: caller expected to do rate table mapping */
	rx_stats->rs_rate = RXSTATUS_RATE(ah, (&ads));
  90b13f:	2a6414        	s8i	a10, a6, 20
	rx_stats->rs_more = (ads.ds_rxstatus1 & AR_RxMore) ? 1 : 0;
  90b142:	2b6416        	s8i	a11, a6, 22

	rx_stats->rs_isaggr = (ads.ds_rxstatus8 & AR_RxAggr) ? 1 : 0;
	rx_stats->rs_moreaggr = (ads.ds_rxstatus8 & AR_RxMoreAggr) ? 1 : 0;
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_GI) ? HAL_RX_GI : 0;
  90b145:	020a40        	extui	a10, a2, 0, 1
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_2040) ? HAL_RX_2040 : 0;
  90b148:	c0b0      	movi.n	a11, 0
  90b14a:	032201        	and	a2, a2, a3
  90b14d:	c038      	movi.n	a3, 8
	rx_stats->rs_rate = RXSTATUS_RATE(ah, (&ads));
	rx_stats->rs_more = (ads.ds_rxstatus1 & AR_RxMore) ? 1 : 0;

	rx_stats->rs_isaggr = (ads.ds_rxstatus8 & AR_RxAggr) ? 1 : 0;
	rx_stats->rs_moreaggr = (ads.ds_rxstatus8 & AR_RxMoreAggr) ? 1 : 0;
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_GI) ? HAL_RX_GI : 0;
  90b14f:	0eaa11        	slli	a10, a10, 2
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_2040) ? HAL_RX_2040 : 0;
  90b152:	02b338        	moveqz	a3, a11, a2
  90b155:	0a3302        	or	a3, a3, a10

	if (ads.ds_rxstatus8 & AR_PreDelimCRCErr)
  90b158:	798f02        	bbsi	a8, 25, 90b15e <ar5416ProcRxDescFast_20+0x186>
  90b15b:	600004        	j	90b163 <ar5416ProcRxDescFast_20+0x18b>
		rx_stats->rs_flags |= HAL_RX_DELIM_CRC_PRE;
  90b15e:	c120      	movi.n	a2, 16
  90b160:	023302        	or	a3, a3, a2
  90b163:	23641a        	s8i	a3, a6, 26
	if (ads.ds_rxstatus8 & AR_PostDelimCRCErr)
  90b166:	7d860a        	bbci	a8, 13, 90b174 <ar5416ProcRxDescFast_20+0x19c>
		rx_stats->rs_flags |= HAL_RX_DELIM_CRC_POST;
  90b169:	23601a        	l8ui	a3, a6, 26
  90b16c:	c220      	movi.n	a2, 32
  90b16e:	023202        	or	a2, a3, a2
  90b171:	22641a        	s8i	a2, a6, 26
	if (ads.ds_rxstatus8 & AR_DecryptBusyErr)
  90b174:	71860a        	bbci	a8, 1, 90b182 <ar5416ProcRxDescFast_20+0x1aa>
		rx_stats->rs_flags |= HAL_RX_DECRYPT_BUSY;
  90b177:	23601a        	l8ui	a3, a6, 26
  90b17a:	c420      	movi.n	a2, 64
  90b17c:	023202        	or	a2, a3, a2
  90b17f:	22641a        	s8i	a2, a6, 26

	if ((ads.ds_rxstatus8 & AR_RxFrameOK) == 0) {
  90b182:	c032      	movi.n	a3, 2
  90b184:	73882f        	bany	a8, a3, 90b1b7 <ar5416ProcRxDescFast_20+0x1df>
		 * when a CRC error is detected, but these are specious.
		 * Consequently we filter them out here so we don't
		 * confuse and/or complicate drivers.
		 */
		if (ads.ds_rxstatus8 & AR_CRCErr)
			rx_stats->rs_status |= HAL_RXERR_CRC;
  90b187:	c021      	movi.n	a2, 1
		 * indicates however that you can also get Michael errors
		 * when a CRC error is detected, but these are specious.
		 * Consequently we filter them out here so we don't
		 * confuse and/or complicate drivers.
		 */
		if (ads.ds_rxstatus8 & AR_CRCErr)
  90b189:	7d8f27        	bbsi	a8, 29, 90b1b4 <ar5416ProcRxDescFast_20+0x1dc>
			rx_stats->rs_status |= HAL_RXERR_CRC;
		else if (ads.ds_rxstatus8 & AR_PHYErr) {
  90b18c:	c120      	movi.n	a2, 16
  90b18e:	728012        	bnone	a8, a2, 90b1a4 <ar5416ProcRxDescFast_20+0x1cc>
			a_uint32_t phyerr;

			rx_stats->rs_status |= HAL_RXERR_PHY;
			phyerr = MS(ads.ds_rxstatus8, AR_PHYErrCode);
  90b191:	126ab0        	l32r	a2, 8e5c54 <vdesc_module_install+0xc44>
		if (ads.ds_rxstatus8 & AR_CRCErr)
			rx_stats->rs_status |= HAL_RXERR_CRC;
		else if (ads.ds_rxstatus8 & AR_PHYErr) {
			a_uint32_t phyerr;

			rx_stats->rs_status |= HAL_RXERR_PHY;
  90b194:	23640a        	s8i	a3, a6, 10
			phyerr = MS(ads.ds_rxstatus8, AR_PHYErrCode);
  90b197:	028801        	and	a8, a8, a2
  90b19a:	088814        	srli	a8, a8, 8
			rx_stats->rs_phyerr = phyerr;
  90b19d:	28640b        	s8i	a8, a6, 11
  90b1a0:	600013        	j	90b1b7 <ar5416ProcRxDescFast_20+0x1df>
  90b1a3:	00c038        	moveqz	a0, a12, a0
		} else if (ads.ds_rxstatus8 & AR_DecryptCRCErr)
  90b1a6:	738007        	bnone	a8, a3, 90b1b1 <ar5416ProcRxDescFast_20+0x1d9>
			rx_stats->rs_status |= HAL_RXERR_DECRYPT;
  90b1a9:	23640a        	s8i	a3, a6, 10
  90b1ac:	600007        	j	90b1b7 <ar5416ProcRxDescFast_20+0x1df>
  90b1af:	00007a        	excw
		else if (ads.ds_rxstatus8 & AR_MichaelErr)
  90b1b2:	8702      	l32i.n	a7, a0, 8
			rx_stats->rs_status |= HAL_RXERR_MIC;
  90b1b4:	22640a        	s8i	a2, a6, 10
	}
	rx_stats->evm0=ads.AR_RxEVM0;
  90b1b7:	9967      	s32i.n	a9, a6, 28
	rx_stats->evm1=ads.AR_RxEVM1;
  90b1b9:	9468      	s32i.n	a4, a6, 32
	rx_stats->evm2=ads.AR_RxEVM2;
  90b1bb:	9569      	s32i.n	a5, a6, 36

	return HAL_OK;
  90b1bd:	220a00        	movi	a2, 0
}
  90b1c0:	d10f      	retw.n
	...

0090b1c4 <ar5416UpdateTxTrigLevel>:
/******/
/* TX */
/******/

HAL_BOOL ar5416UpdateTxTrigLevel(struct ath_hal *ah, HAL_BOOL bIncTrigLevel)
{
  90b1c4:	6c1004        	entry	a1, 32
        HAL_INT omask;

        /*
         * Disable interrupts while futzing with the fifo level.
         */
        omask = ar5416SetInterrupts(ah, ahp->ah_maskReg &~ HAL_INT_GLOBAL);
  90b1c7:	146ab1        	l32r	a4, 8e5c8c <vdesc_module_install+0xc7c>
  90b1ca:	2b2236        	l32i	a11, a2, 216
  90b1cd:	da20      	mov.n	a10, a2
  90b1cf:	04bb01        	and	a11, a11, a4
  90b1d2:	5bff2e        	call8	90ae8c <ar5416SetInterrupts>
  90b1d5:	146ab2        	l32r	a4, 8e5ca0 <vdesc_module_install+0xc90>
  90b1d8:	dba0      	mov.n	a11, a10
  90b1da:	0c0200        	memw
  90b1dd:	8840      	l32i.n	a8, a4, 0

	txcfg = ioread32_mac(AR_TXCFG);
        curLevel = MS(txcfg, AR_FTRIG);
  90b1df:	084445        	extui	a4, a8, 4, 6
        newLevel = curLevel;

        if (bIncTrigLevel)  {
  90b1e2:	c83a      	beqz.n	a3, 90b1f0 <ar5416UpdateTxTrigLevel+0x2c>
		if (curLevel < MAX_TX_FIFO_THRESHOLD)
  90b1e4:	c39f      	movi.n	a9, 63
  90b1e6:	d340      	mov.n	a3, a4
  90b1e8:	794128        	beq	a4, a9, 90b214 <ar5416UpdateTxTrigLevel+0x50>
			newLevel ++;
  90b1eb:	b143      	addi.n	a3, a4, 1
  90b1ed:	600006        	j	90b1f7 <ar5416UpdateTxTrigLevel+0x33>
        } else if (curLevel > MIN_TX_FIFO_THRESHOLD)
  90b1f0:	d340      	mov.n	a3, a4
  90b1f2:	6e421e        	bltui	a4, 2, 90b214 <ar5416UpdateTxTrigLevel+0x50>
                newLevel--;
  90b1f5:	b043      	addi.n	a3, a4, -1
        if (newLevel != curLevel)
  90b1f7:	743119        	beq	a3, a4, 90b214 <ar5416UpdateTxTrigLevel+0x50>
		iowrite32_mac(AR_TXCFG,
  90b1fa:	0c3a11        	slli	a10, a3, 4
  90b1fd:	293af0        	movi	a9, 0x3f0
  90b200:	09a901        	and	a9, a10, a9
  90b203:	2aca0f        	movi	a10, 0xfffffc0f
  90b206:	0a8801        	and	a8, a8, a10
  90b209:	089802        	or	a8, a9, a8
  90b20c:	196ab2        	l32r	a9, 8e5cd4 <vdesc_module_install+0xcc4>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90b20f:	0c0200        	memw
  90b212:	9890      	s32i.n	a8, a9, 0
			     (txcfg & ~AR_FTRIG) | SM(newLevel, AR_FTRIG));

        /* re-enable chip interrupts */
        ar5416SetInterrupts(ah, omask);
  90b214:	da20      	mov.n	a10, a2
  90b216:	5bff1d        	call8	90ae8c <ar5416SetInterrupts>

        return (newLevel != curLevel);
  90b219:	04340c        	sub	a4, a3, a4
  90b21c:	c081      	movi.n	a8, 1
  90b21e:	c020      	movi.n	a2, 0
  90b220:	048239        	movnez	a2, a8, a4
}
  90b223:	d10f      	retw.n
  90b225:	000000        	ill

0090b228 <ar5416SetTxDP>:

HAL_BOOL ar5416SetTxDP(struct ath_hal *ah, a_uint32_t q, a_uint32_t txdp)
{
  90b228:	6c1004        	entry	a1, 32
         * Make sure that TXE is deasserted before setting the TXDP.  If TXE
         * is still asserted, setting TXDP will have no effect.
         */
	HALASSERT((ioread32_mac(AR_Q_TXE) & (1 << q)) == 0);

	iowrite32_mac(AR_QTXDP(q), txdp);
  90b22b:	186ab3        	l32r	a8, 8e5cf8 <vdesc_module_install+0xce8>

        return AH_TRUE;
}
  90b22e:	c021      	movi.n	a2, 1
         * Make sure that TXE is deasserted before setting the TXDP.  If TXE
         * is still asserted, setting TXDP will have no effect.
         */
	HALASSERT((ioread32_mac(AR_Q_TXE) & (1 << q)) == 0);

	iowrite32_mac(AR_QTXDP(q), txdp);
  90b230:	08330a        	addx4	a3, a3, a8
  90b233:	0c0200        	memw
  90b236:	9430      	s32i.n	a4, a3, 0

        return AH_TRUE;
}
  90b238:	d10f      	retw.n
	...

0090b23c <ar5416StartTxDma>:

HAL_BOOL ar5416StartTxDma(struct ath_hal *ah, a_uint32_t q)
{
  90b23c:	6c1004        	entry	a1, 32
        HALASSERT(AH5416(ah)->ah_txq[q].tqi_type != HAL_TX_QUEUE_INACTIVE);

        /* Check to be sure we're not enabling a q that has its TXD bit set. */
	HALASSERT((ioread32_mac(AR_Q_TXD) & (1 << q)) == 0);

	iowrite32_mac(AR_Q_TXE, 1 << q);
  90b23f:	c021      	movi.n	a2, 1
  90b241:	186ab4        	l32r	a8, 8e5d14 <vdesc_module_install+0xd04>
  90b244:	003104        	ssl	a3
  90b247:	00231a        	sll	a3, a2
  90b24a:	0c0200        	memw
  90b24d:	9380      	s32i.n	a3, a8, 0

        return AH_TRUE;
}
  90b24f:	d10f      	retw.n
  90b251:	000000        	ill

0090b254 <ar5416NumTxPending>:

a_uint32_t ar5416NumTxPending(struct ath_hal *ah, a_uint32_t q)
{
  90b254:	6c1004        	entry	a1, 32
        a_uint32_t npend;

        HALASSERT(q < AH_PRIVATE(ah)->ah_caps.halTotalQueues);
        HALASSERT(AH5416(ah)->ah_txq[q].tqi_type != HAL_TX_QUEUE_INACTIVE);

	npend = ioread32_mac(AR_QSTS(q))
  90b257:	126ab5        	l32r	a2, 8e5d2c <vdesc_module_install+0xd1c>
  90b25a:	02320a        	addx4	a2, a3, a2
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90b25d:	0c0200        	memw
  90b260:	8220      	l32i.n	a2, a2, 0
  90b262:	020241        	extui	a2, a2, 0, 2
		& AR_Q_STS_PEND_FR_CNT;
        if (npend == 0) {
  90b265:	cd24      	bnez.n	a2, 90b27d <ar5416NumTxPending+0x29>
  90b267:	186ab4        	l32r	a8, 8e5d38 <vdesc_module_install+0xd28>
  90b26a:	0c0200        	memw
  90b26d:	8980      	l32i.n	a9, a8, 0
                /*
                 * Pending frame count (PFC) can momentarily go to zero
                 * while TXE remains asserted.  In other words a PFC of
                 * zero is not sufficient to say that the queue has stopped.
                 */
		if (ioread32_mac(AR_Q_TXE) & (1 << q))
  90b26f:	c081      	movi.n	a8, 1
  90b271:	003104        	ssl	a3
  90b274:	00831a        	sll	a3, a8
  90b277:	093301        	and	a3, a3, a9
  90b27a:	038239        	movnez	a2, a8, a3
			iowrite32_mac(AR_Q_RDYTIMESHDN, 1 << q);
                }
        }
#endif
        return npend;
}
  90b27d:	d10f      	retw.n
	...

0090b280 <ar5416SetupTxDesc_20>:
			      a_uint32_t txRate0, a_uint32_t txTries0,
			      a_uint32_t keyIx,
			      a_uint32_t flags,
			      a_uint32_t rtsctsRate,
			      a_uint32_t rtsctsDuration)
{
  90b280:	6c1004        	entry	a1, 32
  90b283:	d820      	mov.n	a8, a2

        struct ar5416_desc *ads = AR5416DESC(ds);

        (void) hdrLen;

        ads->ds_txstatus9 &= ~AR_TxDone;
  90b285:	2b205c        	l8ui	a11, a2, 92
  90b288:	22205d        	l8ui	a2, a2, 93
  90b28b:	2a805e        	l8ui	a10, a8, 94
  90b28e:	08bb10        	slli	a11, a11, 24
  90b291:	002211        	slli	a2, a2, 16
  90b294:	0b2202        	or	a2, a2, a11
  90b297:	08aa11        	slli	a10, a10, 8
  90b29a:	02aa02        	or	a10, a10, a2
  90b29d:	22805f        	l8ui	a2, a8, 95
			      a_uint32_t txRate0, a_uint32_t txTries0,
			      a_uint32_t keyIx,
			      a_uint32_t flags,
			      a_uint32_t rtsctsRate,
			      a_uint32_t rtsctsDuration)
{
  90b2a0:	891a      	l32i.n	a9, a1, 40

        struct ar5416_desc *ads = AR5416DESC(ds);

        (void) hdrLen;

        ads->ds_txstatus9 &= ~AR_TxDone;
  90b2a2:	0a2a02        	or	a10, a2, a10
  90b2a5:	c72e      	movi.n	a2, -2
  90b2a7:	02aa01        	and	a10, a10, a2
  90b2aa:	0a8257        	extui	a2, a10, 24, 8
  90b2ad:	22845c        	s8i	a2, a8, 92
  90b2b0:	0a0257        	extui	a2, a10, 16, 8
  90b2b3:	22845d        	s8i	a2, a8, 93
  90b2b6:	0a8247        	extui	a2, a10, 8, 8
  90b2b9:	22845e        	s8i	a2, a8, 94

        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
		| (txPower << AR_XmitPower_S)
  90b2bc:	c32f      	movi.n	a2, 63
  90b2be:	026636        	minu	a6, a6, a2
        HALASSERT((flags & RTSCTS) != RTSCTS);

        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  90b2c1:	03034b        	extui	a3, a3, 0, 12
		| (txPower << AR_XmitPower_S)
  90b2c4:	006211        	slli	a2, a6, 16
  90b2c7:	032202        	or	a2, a2, a3
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  90b2ca:	c2b0      	movi.n	a11, 32
  90b2cc:	136aa5        	l32r	a3, 8e5d60 <vdesc_module_install+0xd50>

        struct ar5416_desc *ads = AR5416DESC(ds);

        (void) hdrLen;

        ads->ds_txstatus9 &= ~AR_TxDone;
  90b2cf:	2a845f        	s8i	a10, a8, 95
        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  90b2d2:	0b9b01        	and	a11, a9, a11
  90b2d5:	c0a0      	movi.n	a10, 0
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  90b2d7:	1e6ab6        	l32r	a14, 8e5db0 <vdesc_module_install+0xda0>
        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  90b2da:	0ba338        	moveqz	a3, a10, a11
  90b2dd:	032b02        	or	a11, a2, a3
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  90b2e0:	090340        	extui	a3, a9, 0, 1
  90b2e3:	d2a0      	mov.n	a2, a10
  90b2e5:	03e239        	movnez	a2, a14, a3
  90b2e8:	02bb02        	or	a11, a11, a2
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);
  90b2eb:	136ab7        	l32r	a3, 8e5dc8 <vdesc_module_install+0xdb8>
  90b2ee:	c120      	movi.n	a2, 16
  90b2f0:	029c01        	and	a12, a9, a2
  90b2f3:	0ca338        	moveqz	a3, a10, a12
  90b2f6:	03bb02        	or	a11, a11, a3
        HALASSERT((flags & RTSCTS) != RTSCTS);

        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  90b2f9:	0b8357        	extui	a3, a11, 24, 8
  90b2fc:	238408        	s8i	a3, a8, 8
  90b2ff:	0b0357        	extui	a3, a11, 16, 8
  90b302:	238409        	s8i	a3, a8, 9
  90b305:	0b8347        	extui	a3, a11, 8, 8
  90b308:	23840a        	s8i	a3, a8, 10
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);

        ads->ds_ctl1 = (type << AR_FrameType_S)
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
  90b30b:	c032      	movi.n	a3, 2
  90b30d:	039c01        	and	a12, a9, a3
  90b310:	0cae38        	moveqz	a14, a10, a12
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);

        ads->ds_ctl1 = (type << AR_FrameType_S)
  90b313:	0c5510        	slli	a5, a5, 20
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
  90b316:	05ec02        	or	a12, a14, a5
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);

        ads->ds_ctl1 = (type << AR_FrameType_S)
  90b319:	0c8457        	extui	a4, a12, 24, 8
  90b31c:	24840c        	s8i	a4, a8, 12
  90b31f:	0c0457        	extui	a4, a12, 16, 8
  90b322:	24840d        	s8i	a4, a8, 13
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
        ads->ds_ctl2 = SM(txTries0, AR_XmitDataTries0);
  90b325:	8e18      	l32i.n	a14, a1, 32
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);

        ads->ds_ctl1 = (type << AR_FrameType_S)
  90b327:	0c8447        	extui	a4, a12, 8, 8
  90b32a:	24840e        	s8i	a4, a8, 14
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
        ads->ds_ctl2 = SM(txTries0, AR_XmitDataTries0);
  90b32d:	146ab9        	l32r	a4, 8e5e14 <vdesc_module_install+0xe04>
  90b330:	002104        	ssl	a2
  90b333:	00ee1a        	sll	a14, a14
  90b336:	04ee01        	and	a14, a14, a4
  90b339:	0e8457        	extui	a4, a14, 24, 8
  90b33c:	248410        	s8i	a4, a8, 16
  90b33f:	0e0457        	extui	a4, a14, 16, 8
  90b342:	248411        	s8i	a4, a8, 17
        ads->ds_ctl3 = (txRate0 << AR_XmitRate0_S);
  90b345:	078457        	extui	a4, a7, 24, 8
  90b348:	248414        	s8i	a4, a8, 20
  90b34b:	070457        	extui	a4, a7, 16, 8
  90b34e:	248415        	s8i	a4, a8, 21
  90b351:	078447        	extui	a4, a7, 8, 8
        HALASSERT((flags & RTSCTS) != RTSCTS);

        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  90b354:	2b840b        	s8i	a11, a8, 11
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);

        ads->ds_ctl1 = (type << AR_FrameType_S)
  90b357:	2c840f        	s8i	a12, a8, 15
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
        ads->ds_ctl2 = SM(txTries0, AR_XmitDataTries0);
  90b35a:	2a8412        	s8i	a10, a8, 18
  90b35d:	2a8413        	s8i	a10, a8, 19
        ads->ds_ctl3 = (txRate0 << AR_XmitRate0_S);
  90b360:	248416        	s8i	a4, a8, 22
  90b363:	278417        	s8i	a7, a8, 23

        ads->ds_ctl7 = SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel0) 
  90b366:	2a8424        	s8i	a10, a8, 36
			      a_uint32_t txRate0, a_uint32_t txTries0,
			      a_uint32_t keyIx,
			      a_uint32_t flags,
			      a_uint32_t rtsctsRate,
			      a_uint32_t rtsctsDuration)
{
  90b369:	8f19      	l32i.n	a15, a1, 36
  90b36b:	2d120b        	l32i	a13, a1, 44
        ads->ds_ctl1 = (type << AR_FrameType_S)
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
        ads->ds_ctl2 = SM(txTries0, AR_XmitDataTries0);
        ads->ds_ctl3 = (txRate0 << AR_XmitRate0_S);

        ads->ds_ctl7 = SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel0) 
  90b36e:	238425        	s8i	a3, a8, 37
  90b371:	228426        	s8i	a2, a8, 38
  90b374:	22fa84        	movi	a2, -124
  90b377:	228427        	s8i	a2, a8, 39
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel1)
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel2) 
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel3);

        if (keyIx != HAL_TXKEYIX_INVALID) {
  90b37a:	220aff        	movi	a2, 255
  90b37d:	72f13b        	beq	a15, a2, 90b3bc <ar5416SetupTxDesc_20+0x13c>
                /* XXX validate key index */
                ads->ds_ctl1 |= SM(keyIx, AR_DestIdx);
  90b380:	126aba        	l32r	a2, 8e5e68 <vdesc_module_install+0xe58>
  90b383:	03ff11        	slli	a15, a15, 13
  90b386:	02ff01        	and	a15, a15, a2
  90b389:	0fcc02        	or	a12, a12, a15
  90b38c:	0c8257        	extui	a2, a12, 24, 8
  90b38f:	22840c        	s8i	a2, a8, 12
  90b392:	0c0257        	extui	a2, a12, 16, 8
  90b395:	22840d        	s8i	a2, a8, 13
  90b398:	0c8247        	extui	a2, a12, 8, 8
  90b39b:	22840e        	s8i	a2, a8, 14
                ads->ds_ctl0 |= AR_DestIdxValid;
  90b39e:	126abb        	l32r	a2, 8e5e8c <vdesc_module_install+0xe7c>
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel2) 
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel3);

        if (keyIx != HAL_TXKEYIX_INVALID) {
                /* XXX validate key index */
                ads->ds_ctl1 |= SM(keyIx, AR_DestIdx);
  90b3a1:	2c840f        	s8i	a12, a8, 15
                ads->ds_ctl0 |= AR_DestIdxValid;
  90b3a4:	02bb02        	or	a11, a11, a2
  90b3a7:	0b8257        	extui	a2, a11, 24, 8
  90b3aa:	228408        	s8i	a2, a8, 8
  90b3ad:	0b0257        	extui	a2, a11, 16, 8
  90b3b0:	228409        	s8i	a2, a8, 9
  90b3b3:	0b8247        	extui	a2, a11, 8, 8
  90b3b6:	22840a        	s8i	a2, a8, 10
  90b3b9:	2b840b        	s8i	a11, a8, 11
        }

        if (flags & RTSCTS) {
  90b3bc:	c03c      	movi.n	a3, 12
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
        }
        return AH_TRUE;
  90b3be:	c021      	movi.n	a2, 1
                /* XXX validate key index */
                ads->ds_ctl1 |= SM(keyIx, AR_DestIdx);
                ads->ds_ctl0 |= AR_DestIdxValid;
        }

        if (flags & RTSCTS) {
  90b3c0:	739802        	bany	a9, a3, 90b3c6 <ar5416SetupTxDesc_20+0x146>
  90b3c3:	60009d        	j	90b464 <ar5416SetupTxDesc_20+0x1e4>
                if (!isValidTxRate(rtsctsRate)) {
  90b3c6:	1a6abc        	l32r	a10, 8e5eb8 <vdesc_module_install+0xea8>
  90b3c9:	00d004        	ssr	a13
  90b3cc:	0a0a1b        	sra	a10, a10
  90b3cf:	02aa01        	and	a10, a10, a2
  90b3d2:	64a08c        	beqz	a10, 90b462 <ar5416SetupTxDesc_20+0x1e2>
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b3d5:	2a8008        	l8ui	a10, a8, 8
  90b3d8:	2b8009        	l8ui	a11, a8, 9
  90b3db:	23800a        	l8ui	a3, a8, 10
  90b3de:	08aa10        	slli	a10, a10, 24
  90b3e1:	00bb11        	slli	a11, a11, 16
  90b3e4:	0abb02        	or	a11, a11, a10
  90b3e7:	083311        	slli	a3, a3, 8
  90b3ea:	2a800b        	l8ui	a10, a8, 11
  90b3ed:	0b3302        	or	a3, a3, a11
  90b3f0:	03a302        	or	a3, a10, a3
  90b3f3:	1c6a0d        	l32r	a12, 8e5c28 <vdesc_module_install+0xc18>
  90b3f6:	c0a8      	movi.n	a10, 8
  90b3f8:	0a9a01        	and	a10, a9, a10
  90b3fb:	c0b0      	movi.n	a11, 0
  90b3fd:	0abc38        	moveqz	a12, a11, a10
  90b400:	dac0      	mov.n	a10, a12
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
  90b402:	c0c4      	movi.n	a12, 4
  90b404:	0c9901        	and	a9, a9, a12
  90b407:	1c6ab8        	l32r	a12, 8e5ee8 <vdesc_module_install+0xed8>
  90b40a:	03aa02        	or	a10, a10, a3
  90b40d:	09cb39        	movnez	a11, a12, a9
        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b410:	0baa02        	or	a10, a10, a11
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b413:	891c      	l32i.n	a9, a1, 48
        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b415:	0a8357        	extui	a3, a10, 24, 8
  90b418:	238408        	s8i	a3, a8, 8
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b41b:	09094e        	extui	a9, a9, 0, 15
        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b41e:	0a0357        	extui	a3, a10, 16, 8
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b421:	0e9902        	or	a9, a9, a14
        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b424:	238409        	s8i	a3, a8, 9
  90b427:	0a8347        	extui	a3, a10, 8, 8
  90b42a:	23840a        	s8i	a3, a8, 10
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b42d:	098357        	extui	a3, a9, 24, 8
  90b430:	238410        	s8i	a3, a8, 16
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
  90b433:	0cdd10        	slli	a13, a13, 20
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b436:	090357        	extui	a3, a9, 16, 8
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
  90b439:	07d702        	or	a7, a13, a7
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b43c:	238411        	s8i	a3, a8, 17
  90b43f:	098346        	extui	a3, a9, 8, 7
  90b442:	238412        	s8i	a3, a8, 18
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
  90b445:	078357        	extui	a3, a7, 24, 8
  90b448:	238414        	s8i	a3, a8, 20
  90b44b:	070357        	extui	a3, a7, 16, 8
  90b44e:	238415        	s8i	a3, a8, 21
  90b451:	078347        	extui	a3, a7, 8, 8
        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b454:	2a840b        	s8i	a10, a8, 11
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b457:	298413        	s8i	a9, a8, 19
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
  90b45a:	238416        	s8i	a3, a8, 22
  90b45d:	278417        	s8i	a7, a8, 23
  90b460:	d10f      	retw.n
                ads->ds_ctl0 |= AR_DestIdxValid;
        }

        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
  90b462:	d2a0      	mov.n	a2, a10
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
        }
        return AH_TRUE;

#undef RTSCTS
}
  90b464:	d10f      	retw.n
	...

0090b468 <ar5416FillTxDesc_20>:

HAL_BOOL ar5416FillTxDesc_20(struct ath_tx_desc *ds,
			     a_uint32_t segLen, HAL_BOOL firstSeg, HAL_BOOL lastSeg,
			     const struct ath_tx_desc *ds0)
{
  90b468:	6c1004        	entry	a1, 32
        struct ar5416_desc *ads = AR5416DESC(ds);

        HALASSERT((segLen &~ AR_BufLen) == 0);

        if (firstSeg) {
  90b46b:	644045        	beqz	a4, 90b4b4 <ar5416FillTxDesc_20+0x4c>
                /*
                 * First descriptor, don't clobber xmit control data
                 * setup by ar5416SetupTxDesc.
                 */
                ads->ds_ctl1 |= segLen | (lastSeg ? 0 : AR_TxMore);
  90b46e:	28200c        	l8ui	a8, a2, 12
  90b471:	24200d        	l8ui	a4, a2, 13
  90b474:	26200e        	l8ui	a6, a2, 14
  90b477:	088810        	slli	a8, a8, 24
  90b47a:	004411        	slli	a4, a4, 16
  90b47d:	084402        	or	a4, a4, a8
  90b480:	086611        	slli	a6, a6, 8
  90b483:	046602        	or	a6, a6, a4
  90b486:	24200f        	l8ui	a4, a2, 15
  90b489:	186a8e        	l32r	a8, 8e5ec4 <vdesc_module_install+0xeb4>
  90b48c:	064602        	or	a6, a4, a6
  90b48f:	c040      	movi.n	a4, 0
  90b491:	058438        	moveqz	a4, a8, a5
  90b494:	063302        	or	a3, a3, a6
  90b497:	043302        	or	a3, a3, a4
  90b49a:	038457        	extui	a4, a3, 24, 8
  90b49d:	24240c        	s8i	a4, a2, 12
  90b4a0:	030457        	extui	a4, a3, 16, 8
  90b4a3:	24240d        	s8i	a4, a2, 13
  90b4a6:	038447        	extui	a4, a3, 8, 8
  90b4a9:	24240e        	s8i	a4, a2, 14
  90b4ac:	23240f        	s8i	a3, a2, 15
  90b4af:	6000cd        	j	90b580 <ar5416FillTxDesc_20+0x118>
  90b4b2:	000064        	excw
        } else if (lastSeg) {
  90b4b5:	508924        	call0	92d948 <_etext+0x1e85b>
                /*
                 * Last descriptor in a multi-descriptor frame,
                 * copy the multi-rate transmit parameters from
                 * the first frame for processing on completion.
                 */
                ads->ds_ctl0 = 0;
  90b4b8:	240824        	excw
  90b4bb:	240924        	l16si	a4, a0, 72
  90b4be:	240a24        	movi	a4, 36
  90b4c1:	240b03        	l32ai	a4, a0, 12
                ads->ds_ctl1 = segLen;
  90b4c4:	8457      	l32i.n	a4, a5, 28
  90b4c6:	24240c        	s8i	a4, a2, 12
  90b4c9:	030457        	extui	a4, a3, 16, 8
  90b4cc:	24240d        	s8i	a4, a2, 13
  90b4cf:	038447        	extui	a4, a3, 8, 8
  90b4d2:	24240e        	s8i	a4, a2, 14
  90b4d5:	23240f        	s8i	a3, a2, 15
                ads->ds_ctl2 = AR5416DESC_CONST(ds0)->ds_ctl2;
  90b4d8:	256010        	l8ui	a5, a6, 16
  90b4db:	246011        	l8ui	a4, a6, 17
  90b4de:	236012        	l8ui	a3, a6, 18
  90b4e1:	085510        	slli	a5, a5, 24
  90b4e4:	004411        	slli	a4, a4, 16
  90b4e7:	054402        	or	a4, a4, a5
  90b4ea:	083311        	slli	a3, a3, 8
  90b4ed:	043302        	or	a3, a3, a4
  90b4f0:	246013        	l8ui	a4, a6, 19
  90b4f3:	034302        	or	a3, a4, a3
  90b4f6:	038457        	extui	a4, a3, 24, 8
  90b4f9:	242410        	s8i	a4, a2, 16
  90b4fc:	030457        	extui	a4, a3, 16, 8
  90b4ff:	242411        	s8i	a4, a2, 17
  90b502:	038447        	extui	a4, a3, 8, 8
  90b505:	242412        	s8i	a4, a2, 18
  90b508:	232413        	s8i	a3, a2, 19
                ads->ds_ctl3 = AR5416DESC_CONST(ds0)->ds_ctl3;
  90b50b:	256014        	l8ui	a5, a6, 20
  90b50e:	246015        	l8ui	a4, a6, 21
  90b511:	236016        	l8ui	a3, a6, 22
  90b514:	085510        	slli	a5, a5, 24
  90b517:	004411        	slli	a4, a4, 16
  90b51a:	054402        	or	a4, a4, a5
  90b51d:	083311        	slli	a3, a3, 8
  90b520:	043302        	or	a3, a3, a4
  90b523:	246017        	l8ui	a4, a6, 23
  90b526:	034302        	or	a3, a4, a3
  90b529:	038457        	extui	a4, a3, 24, 8
  90b52c:	242414        	s8i	a4, a2, 20
  90b52f:	030457        	extui	a4, a3, 16, 8
  90b532:	242415        	s8i	a4, a2, 21
  90b535:	038447        	extui	a4, a3, 8, 8
  90b538:	242416        	s8i	a4, a2, 22
  90b53b:	232417        	s8i	a3, a2, 23
  90b53e:	60003e        	j	90b580 <ar5416FillTxDesc_20+0x118>
        } else {
                /*
                 * Intermediate descriptor in a multi-descriptor frame.
                 */
                ads->ds_ctl0 = 0;
                ads->ds_ctl1 = segLen | AR_TxMore;
  90b541:	146a8e        	l32r	a4, 8e5f7c <vdesc_module_install+0xf6c>
                ads->ds_ctl3 = AR5416DESC_CONST(ds0)->ds_ctl3;
        } else {
                /*
                 * Intermediate descriptor in a multi-descriptor frame.
                 */
                ads->ds_ctl0 = 0;
  90b544:	252408        	s8i	a5, a2, 8
                ads->ds_ctl1 = segLen | AR_TxMore;
  90b547:	043302        	or	a3, a3, a4
  90b54a:	038457        	extui	a4, a3, 24, 8
  90b54d:	24240c        	s8i	a4, a2, 12
  90b550:	030457        	extui	a4, a3, 16, 8
  90b553:	24240d        	s8i	a4, a2, 13
  90b556:	038447        	extui	a4, a3, 8, 8
                ads->ds_ctl3 = AR5416DESC_CONST(ds0)->ds_ctl3;
        } else {
                /*
                 * Intermediate descriptor in a multi-descriptor frame.
                 */
                ads->ds_ctl0 = 0;
  90b559:	252409        	s8i	a5, a2, 9
  90b55c:	25240a        	s8i	a5, a2, 10
  90b55f:	25240b        	s8i	a5, a2, 11
                ads->ds_ctl1 = segLen | AR_TxMore;
  90b562:	24240e        	s8i	a4, a2, 14
  90b565:	23240f        	s8i	a3, a2, 15
                ads->ds_ctl2 = 0;
  90b568:	252410        	s8i	a5, a2, 16
  90b56b:	252411        	s8i	a5, a2, 17
  90b56e:	252412        	s8i	a5, a2, 18
  90b571:	252413        	s8i	a5, a2, 19
                ads->ds_ctl3 = 0;
  90b574:	252414        	s8i	a5, a2, 20
  90b577:	252415        	s8i	a5, a2, 21
  90b57a:	252416        	s8i	a5, a2, 22
  90b57d:	252417        	s8i	a5, a2, 23
        }
        ads->ds_txstatus0 = ads->ds_txstatus1 = 0;
  90b580:	c050      	movi.n	a5, 0
  90b582:	25243c        	s8i	a5, a2, 60
  90b585:	25243d        	s8i	a5, a2, 61
  90b588:	25243e        	s8i	a5, a2, 62
  90b58b:	25243f        	s8i	a5, a2, 63
  90b58e:	252438        	s8i	a5, a2, 56
  90b591:	252439        	s8i	a5, a2, 57
  90b594:	25243a        	s8i	a5, a2, 58
  90b597:	25243b        	s8i	a5, a2, 59

        return AH_TRUE;
}
  90b59a:	c021      	movi.n	a2, 1
  90b59c:	d10f      	retw.n
	...

0090b5a0 <ar5416FillKeyTxDesc_20>:

HAL_BOOL ar5416FillKeyTxDesc_20(struct ath_tx_desc *ds,
				HAL_KEY_TYPE keyType)
{
  90b5a0:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl6 = SM(keyType, AR_EncrType);
  90b5a3:	186abd        	l32r	a8, 8e6098 <vdesc_module_install+0x1088>
  90b5a6:	063310        	slli	a3, a3, 26
  90b5a9:	083801        	and	a8, a3, a8
  90b5ac:	088857        	extui	a8, a8, 24, 8
  90b5af:	282420        	s8i	a8, a2, 32
  90b5b2:	c080      	movi.n	a8, 0
  90b5b4:	282421        	s8i	a8, a2, 33
  90b5b7:	282422        	s8i	a8, a2, 34
  90b5ba:	282423        	s8i	a8, a2, 35
	return AH_TRUE;
}
  90b5bd:	c021      	movi.n	a2, 1
  90b5bf:	d10f      	retw.n
  90b5c1:	000000        	ill

0090b5c4 <ar5416Set11nTxDesc_20>:

void ar5416Set11nTxDesc_20(struct ath_tx_desc *ds,
			   a_uint32_t pktLen, HAL_PKT_TYPE type, a_uint32_t txPower,
			   a_uint32_t keyIx, HAL_KEY_TYPE keyType,
			   a_uint32_t flags)
{
  90b5c4:	6c1004        	entry	a1, 32
  90b5c7:	8818      	l32i.n	a8, a1, 32
  90b5c9:	c39f      	movi.n	a9, 63

	if (txPower > 63)
                txPower = 63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
		| (flags & HAL_TXDESC_VMF ? AR_VirtMoreFrag : 0)
  90b5cb:	2b1a00        	movi	a11, 0x100
  90b5ce:	1a6a8e        	l32r	a10, 8e6008 <vdesc_module_install+0xff8>
  90b5d1:	095536        	minu	a5, a5, a9
  90b5d4:	0b8b01        	and	a11, a8, a11
  90b5d7:	c090      	movi.n	a9, 0
  90b5d9:	0b9a38        	moveqz	a10, a9, a11
  90b5dc:	dba0      	mov.n	a11, a10
		| SM(txPower, AR_XmitPower)
  90b5de:	1a6abf        	l32r	a10, 8e60dc <vdesc_module_install+0x10cc>
  90b5e1:	005511        	slli	a5, a5, 16
  90b5e4:	0a5501        	and	a5, a5, a10
        HALASSERT(isValidKeyType(keyType));

	if (txPower > 63)
                txPower = 63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  90b5e7:	03034b        	extui	a3, a3, 0, 12
		| (flags & HAL_TXDESC_VMF ? AR_VirtMoreFrag : 0)
  90b5ea:	035502        	or	a5, a5, a3
		| SM(txPower, AR_XmitPower)
  90b5ed:	0b5502        	or	a5, a5, a11
		| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0)
  90b5f0:	c0a4      	movi.n	a10, 4
  90b5f2:	1b6ab8        	l32r	a11, 8e60d4 <vdesc_module_install+0x10c4>
  90b5f5:	0a8a01        	and	a10, a8, a10
  90b5f8:	0a9b38        	moveqz	a11, a9, a10
  90b5fb:	0b5a02        	or	a10, a5, a11
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  90b5fe:	c250      	movi.n	a5, 32
  90b600:	1b6aa5        	l32r	a11, 8e6094 <vdesc_module_install+0x1084>
  90b603:	058501        	and	a5, a8, a5
  90b606:	059b38        	moveqz	a11, a9, a5
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  90b609:	156ab6        	l32r	a5, 8e60e4 <vdesc_module_install+0x10d4>

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
		| (flags & HAL_TXDESC_VMF ? AR_VirtMoreFrag : 0)
		| SM(txPower, AR_XmitPower)
		| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  90b60c:	0baa02        	or	a10, a10, a11
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  90b60f:	080b40        	extui	a11, a8, 0, 1
  90b612:	0b9538        	moveqz	a5, a9, a11
  90b615:	05aa02        	or	a10, a10, a5
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0)
  90b618:	1b6ab7        	l32r	a11, 8e60f4 <vdesc_module_install+0x10e4>
  90b61b:	c150      	movi.n	a5, 16
  90b61d:	058501        	and	a5, a8, a5
  90b620:	059b38        	moveqz	a11, a9, a5
  90b623:	0baa02        	or	a10, a10, a11
		| (keyIx != HAL_TXKEYIX_INVALID ? AR_DestIdxValid : 0)
  90b626:	156abb        	l32r	a5, 8e6114 <vdesc_module_install+0x1104>
  90b629:	2b0aff        	movi	a11, 255
  90b62c:	0b6c0c        	sub	a12, a6, a11
  90b62f:	0c9538        	moveqz	a5, a9, a12
  90b632:	05aa02        	or	a10, a10, a5
		| (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0);
  90b635:	1c6a0d        	l32r	a12, 8e5e6c <vdesc_module_install+0xe5c>
  90b638:	c058      	movi.n	a5, 8
  90b63a:	058501        	and	a5, a8, a5
  90b63d:	059c38        	moveqz	a12, a9, a5
  90b640:	0caa02        	or	a10, a10, a12
        HALASSERT(isValidKeyType(keyType));

	if (txPower > 63)
                txPower = 63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  90b643:	0a8557        	extui	a5, a10, 24, 8
  90b646:	252408        	s8i	a5, a2, 8
  90b649:	0a0557        	extui	a5, a10, 16, 8
  90b64c:	252409        	s8i	a5, a2, 9
  90b64f:	0a8547        	extui	a5, a10, 8, 8
  90b652:	25240a        	s8i	a5, a2, 10
  90b655:	2a240b        	s8i	a10, a2, 11
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0)
		| (keyIx != HAL_TXKEYIX_INVALID ? AR_DestIdxValid : 0)
		| (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0);

        ads->ds_ctl1 = (keyIx != HAL_TXKEYIX_INVALID ? SM(keyIx, AR_DestIdx) : 0)
  90b658:	7b6108        	beq	a6, a11, 90b664 <ar5416Set11nTxDesc_20+0xa0>
  90b65b:	156aba        	l32r	a5, 8e6144 <vdesc_module_install+0x1134>
  90b65e:	036911        	slli	a9, a6, 13
  90b661:	059901        	and	a9, a9, a5
		| SM(type, AR_FrameType)
  90b664:	1569a2        	l32r	a5, 8e5cec <vdesc_module_install+0xcdc>
  90b667:	0c4410        	slli	a4, a4, 20
  90b66a:	054401        	and	a4, a4, a5
  90b66d:	049902        	or	a9, a9, a4
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0)
  90b670:	c052      	movi.n	a5, 2
  90b672:	146ab6        	l32r	a4, 8e614c <vdesc_module_install+0x113c>
  90b675:	c0a0      	movi.n	a10, 0
  90b677:	058501        	and	a5, a8, a5
  90b67a:	05a438        	moveqz	a4, a10, a5
  90b67d:	049902        	or	a9, a9, a4
		| (flags & HAL_TXDESC_EXT_ONLY ? AR_ExtOnly : 0)
  90b680:	c450      	movi.n	a5, 64
  90b682:	146abe        	l32r	a4, 8e617c <vdesc_module_install+0x116c>
  90b685:	058501        	and	a5, a8, a5
  90b688:	05a438        	moveqz	a4, a10, a5
  90b68b:	049902        	or	a9, a9, a4
  90b68e:	d540      	mov.n	a5, a4
		| (flags & HAL_TXDESC_EXT_AND_CTL ? AR_ExtAndCtl : 0);
  90b690:	240a80        	movi	a4, 128
  90b693:	048801        	and	a8, a8, a4
  90b696:	1469f8        	l32r	a4, 8e5e78 <vdesc_module_install+0xe68>

        ads->ds_ctl6 = SM(keyType, AR_EncrType);
  90b699:	067710        	slli	a7, a7, 26

        ads->ds_ctl1 = (keyIx != HAL_TXKEYIX_INVALID ? SM(keyIx, AR_DestIdx) : 0)
		| SM(type, AR_FrameType)
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0)
		| (flags & HAL_TXDESC_EXT_ONLY ? AR_ExtOnly : 0)
		| (flags & HAL_TXDESC_EXT_AND_CTL ? AR_ExtAndCtl : 0);
  90b69c:	08a438        	moveqz	a4, a10, a8
  90b69f:	049802        	or	a8, a9, a4
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0)
		| (keyIx != HAL_TXKEYIX_INVALID ? AR_DestIdxValid : 0)
		| (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0);

        ads->ds_ctl1 = (keyIx != HAL_TXKEYIX_INVALID ? SM(keyIx, AR_DestIdx) : 0)
  90b6a2:	088457        	extui	a4, a8, 24, 8
  90b6a5:	24240c        	s8i	a4, a2, 12
  90b6a8:	080457        	extui	a4, a8, 16, 8
  90b6ab:	24240d        	s8i	a4, a2, 13
  90b6ae:	088447        	extui	a4, a8, 8, 8
  90b6b1:	24240e        	s8i	a4, a2, 14
		| SM(type, AR_FrameType)
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0)
		| (flags & HAL_TXDESC_EXT_ONLY ? AR_ExtOnly : 0)
		| (flags & HAL_TXDESC_EXT_AND_CTL ? AR_ExtAndCtl : 0);

        ads->ds_ctl6 = SM(keyType, AR_EncrType);
  90b6b4:	146abd        	l32r	a4, 8e61a8 <vdesc_module_install+0x1198>
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0)
		| (keyIx != HAL_TXKEYIX_INVALID ? AR_DestIdxValid : 0)
		| (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0);

        ads->ds_ctl1 = (keyIx != HAL_TXKEYIX_INVALID ? SM(keyIx, AR_DestIdx) : 0)
  90b6b7:	28240f        	s8i	a8, a2, 15
		| SM(type, AR_FrameType)
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0)
		| (flags & HAL_TXDESC_EXT_ONLY ? AR_ExtOnly : 0)
		| (flags & HAL_TXDESC_EXT_AND_CTL ? AR_ExtAndCtl : 0);

        ads->ds_ctl6 = SM(keyType, AR_EncrType);
  90b6ba:	047701        	and	a7, a7, a4
  90b6bd:	078757        	extui	a7, a7, 24, 8
  90b6c0:	272420        	s8i	a7, a2, 32
  90b6c3:	d4a0      	mov.n	a4, a10
  90b6c5:	2a2421        	s8i	a10, a2, 33
  90b6c8:	2a2422        	s8i	a10, a2, 34
  90b6cb:	2a2423        	s8i	a10, a2, 35
  90b6ce:	d10f      	retw.n

0090b6d0 <ar5416Set11nRateScenario_20>:

void ar5416Set11nRateScenario_20(struct ath_tx_desc *ds,
				 a_uint32_t durUpdateEn, a_uint32_t rtsctsRate,
				 HAL_11N_RATE_SERIES series[], a_uint32_t nseries,
				 a_uint32_t flags)
{
  90b6d0:	6c1008        	entry	a1, 64
	(void)nseries;

	/*
	* Rate control settings override
	*/
	ds_ctl0 = ads->ds_ctl0;
  90b6d3:	282008        	l8ui	a8, a2, 8
  90b6d6:	262009        	l8ui	a6, a2, 9

void ar5416Set11nRateScenario_20(struct ath_tx_desc *ds,
				 a_uint32_t durUpdateEn, a_uint32_t rtsctsRate,
				 HAL_11N_RATE_SERIES series[], a_uint32_t nseries,
				 a_uint32_t flags)
{
  90b6d9:	9414      	s32i.n	a4, a1, 16
	(void)nseries;

	/*
	* Rate control settings override
	*/
	ds_ctl0 = ads->ds_ctl0;
  90b6db:	24200a        	l8ui	a4, a2, 10
  90b6de:	088810        	slli	a8, a8, 24
  90b6e1:	006611        	slli	a6, a6, 16
  90b6e4:	086602        	or	a6, a6, a8
  90b6e7:	084411        	slli	a4, a4, 8
  90b6ea:	064402        	or	a4, a4, a6
  90b6ed:	26200b        	l8ui	a6, a2, 11
  90b6f0:	046402        	or	a4, a6, a4

	if (flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA)) {
  90b6f3:	c06c      	movi.n	a6, 12
  90b6f5:	76701f        	bnone	a7, a6, 90b718 <ar5416Set11nRateScenario_20+0x48>
		if (flags & HAL_TXDESC_RTSENA) {
  90b6f8:	7d770c        	bbci	a7, 29, 90b708 <ar5416Set11nRateScenario_20+0x38>
			ds_ctl0 &= ~AR_CTSEnable;
  90b6fb:	166ab1        	l32r	a6, 8e61c0 <vdesc_module_install+0x11b0>
  90b6fe:	064401        	and	a4, a4, a6
			ds_ctl0 |= AR_RTSEnable;
  90b701:	166ab8        	l32r	a6, 8e61e4 <vdesc_module_install+0x11d4>
  90b704:	600009        	j	90b711 <ar5416Set11nRateScenario_20+0x41>
  90b707:	00166a        	excw
		} else {
			ds_ctl0 &= ~AR_RTSEnable;
  90b70a:	c106      	movi.n	a0, 22
  90b70c:	440116        	excw
			ds_ctl0 |= AR_CTSEnable;
  90b70f:	6a0d06        	blti	a0, 64, 90b719 <ar5416Set11nRateScenario_20+0x49>
  90b712:	440260        	excw
  90b715:	000600        	rsil	a0, 0
		}
	} else {
		/* this line is only difference between merlin and k2
		 * Current one is for merlin */
		ds_ctl0 = (ds_ctl0 & ~(AR_RTSEnable | AR_CTSEnable));
  90b718:	166ac2        	l32r	a6, 8e6220 <vdesc_module_install+0x1210>
  90b71b:	064401        	and	a4, a4, a6
	}

	ads->ds_ctl0 = ds_ctl0;
  90b71e:	048657        	extui	a6, a4, 24, 8
  90b721:	262408        	s8i	a6, a2, 8
  90b724:	040657        	extui	a6, a4, 16, 8
  90b727:	262409        	s8i	a6, a2, 9
  90b72a:	048647        	extui	a6, a4, 8, 8
  90b72d:	26240a        	s8i	a6, a2, 10
  90b730:	24240b        	s8i	a4, a2, 11

	ads->ds_ctl2 = set11nTries(series, 0)
  90b733:	8650      	l32i.n	a6, a5, 0
  90b735:	176ab9        	l32r	a7, 8e621c <vdesc_module_install+0x120c>
				   | set11nTries(series, 1)
  90b738:	8457      	l32i.n	a4, a5, 28
		ds_ctl0 = (ds_ctl0 & ~(AR_RTSEnable | AR_CTSEnable));
	}

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
  90b73a:	006611        	slli	a6, a6, 16
  90b73d:	076601        	and	a6, a6, a7
				   | set11nTries(series, 1)
  90b740:	1769a2        	l32r	a7, 8e5dc8 <vdesc_module_install+0xdb8>
  90b743:	0c4410        	slli	a4, a4, 20
  90b746:	074401        	and	a4, a4, a7
  90b749:	046402        	or	a4, a6, a4
				   | set11nTries(series, 2)
				   | set11nTries(series, 3)
  90b74c:	265215        	l32i	a6, a5, 84

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
  90b74f:	176ac3        	l32r	a7, 8e625c <vdesc_module_install+0x124c>
				   | set11nTries(series, 3)
  90b752:	046610        	slli	a6, a6, 28

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
  90b755:	064402        	or	a4, a4, a6
  90b758:	865e      	l32i.n	a6, a5, 56
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);
  90b75a:	c080      	movi.n	a8, 0

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
  90b75c:	086610        	slli	a6, a6, 24
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);
  90b75f:	1c6a30        	l32r	a12, 8e6020 <vdesc_module_install+0x1010>

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
  90b762:	076601        	and	a6, a6, a7
				   | set11nTries(series, 3)
  90b765:	064402        	or	a4, a4, a6
				   | (durUpdateEn ? AR_DurUpdateEn : 0);
  90b768:	d680      	mov.n	a6, a8
  90b76a:	03c639        	movnez	a6, a12, a3
  90b76d:	064302        	or	a3, a4, a6
		ds_ctl0 = (ds_ctl0 & ~(AR_RTSEnable | AR_CTSEnable));
	}

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
  90b770:	038457        	extui	a4, a3, 24, 8
  90b773:	242410        	s8i	a4, a2, 16
  90b776:	030457        	extui	a4, a3, 16, 8
  90b779:	242411        	s8i	a4, a2, 17
  90b77c:	038447        	extui	a4, a3, 8, 8
  90b77f:	242412        	s8i	a4, a2, 18
  90b782:	232413        	s8i	a3, a2, 19
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);
  90b785:	235216        	l32i	a3, a5, 88
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
  90b788:	245007        	l8ui	a4, a5, 7
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);
  90b78b:	083310        	slli	a3, a3, 24
				   | set11nTries(series, 2)
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
  90b78e:	043302        	or	a3, a3, a4
  90b791:	8458      	l32i.n	a4, a5, 32
				   | set11nRate(series, 2)
  90b793:	166ac4        	l32r	a6, 8e62a4 <vdesc_module_install+0x1294>
				   | set11nTries(series, 2)
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
  90b796:	084411        	slli	a4, a4, 8
  90b799:	04044f        	extui	a4, a4, 0, 16
				   | set11nRate(series, 2)
  90b79c:	043302        	or	a3, a3, a4
  90b79f:	845f      	l32i.n	a4, a5, 60
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);
  90b7a1:	176ac5        	l32r	a7, 8e62b8 <vdesc_module_install+0x12a8>
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
  90b7a4:	004411        	slli	a4, a4, 16
  90b7a7:	064401        	and	a4, a4, a6
				   | set11nRate(series, 3);
  90b7aa:	043302        	or	a3, a3, a4
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
  90b7ad:	038457        	extui	a4, a3, 24, 8
  90b7b0:	242414        	s8i	a4, a2, 20
  90b7b3:	030457        	extui	a4, a3, 16, 8
  90b7b6:	242415        	s8i	a4, a2, 21
  90b7b9:	038447        	extui	a4, a3, 8, 8
  90b7bc:	242416        	s8i	a4, a2, 22
  90b7bf:	232417        	s8i	a3, a2, 23
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);
  90b7c2:	8359      	l32i.n	a3, a5, 36
	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  90b7c4:	8e54      	l32i.n	a14, a5, 16
  90b7c6:	8a52      	l32i.n	a10, a5, 8
				   | set11nPktDurRTSCTS(series, 1);
  90b7c8:	845b      	l32i.n	a4, a5, 44
  90b7ca:	003311        	slli	a3, a3, 16
	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  90b7cd:	0e0940        	extui	a9, a14, 0, 1
  90b7d0:	0a0a4e        	extui	a10, a10, 0, 15
  90b7d3:	db80      	mov.n	a11, a8
				   | set11nPktDurRTSCTS(series, 1);
  90b7d5:	073301        	and	a3, a3, a7
  90b7d8:	1f6a0d        	l32r	a15, 8e600c <vdesc_module_install+0xffc>
	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  90b7db:	09cb39        	movnez	a11, a12, a9
				   | set11nPktDurRTSCTS(series, 1);
  90b7de:	040640        	extui	a6, a4, 0, 1
	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  90b7e1:	0a3302        	or	a3, a3, a10
				   | set11nPktDurRTSCTS(series, 1);
  90b7e4:	068f38        	moveqz	a15, a8, a6
  90b7e7:	0b3302        	or	a3, a3, a11
  90b7ea:	0f3302        	or	a3, a3, a15
	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  90b7ed:	038657        	extui	a6, a3, 24, 8
  90b7f0:	262418        	s8i	a6, a2, 24
  90b7f3:	030657        	extui	a6, a3, 16, 8
  90b7f6:	262419        	s8i	a6, a2, 25
  90b7f9:	038647        	extui	a6, a3, 8, 8
  90b7fc:	26241a        	s8i	a6, a2, 26
  90b7ff:	23241b        	s8i	a3, a2, 27
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b802:	235212        	l32i	a3, a5, 72
  90b805:	d680      	mov.n	a6, a8
  90b807:	030b40        	extui	a11, a3, 0, 1
  90b80a:	0bc639        	movnez	a6, a12, a11
  90b80d:	db60      	mov.n	a11, a6
				   | set11nPktDurRTSCTS(series, 3);
  90b80f:	265217        	l32i	a6, a5, 92
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b812:	2d5210        	l32i	a13, a5, 64
				   | set11nPktDurRTSCTS(series, 3);
  90b815:	2a5219        	l32i	a10, a5, 100
  90b818:	006611        	slli	a6, a6, 16
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b81b:	0d0d4e        	extui	a13, a13, 0, 15
				   | set11nPktDurRTSCTS(series, 3);
  90b81e:	076601        	and	a6, a6, a7
  90b821:	1f6a0d        	l32r	a15, 8e6058 <vdesc_module_install+0x1048>
  90b824:	0a0940        	extui	a9, a10, 0, 1
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b827:	0d6602        	or	a6, a6, a13
				   | set11nPktDurRTSCTS(series, 3);
  90b82a:	098f38        	moveqz	a15, a8, a9
  90b82d:	0b6602        	or	a6, a6, a11
  90b830:	0f6602        	or	a6, a6, a15
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b833:	068757        	extui	a7, a6, 24, 8
  90b836:	27241c        	s8i	a7, a2, 28
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  90b839:	c0d2      	movi.n	a13, 2
  90b83b:	c0b4      	movi.n	a11, 4
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b83d:	060757        	extui	a7, a6, 16, 8
  90b840:	27241d        	s8i	a7, a2, 29
  90b843:	26241f        	s8i	a6, a2, 31
  90b846:	068747        	extui	a7, a6, 8, 8
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  90b849:	d9d0      	mov.n	a9, a13
  90b84b:	0be601        	and	a6, a14, a11
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b84e:	27241e        	s8i	a7, a2, 30
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  90b851:	068938        	moveqz	a9, a8, a6
  90b854:	0e1740        	extui	a7, a14, 1, 1
  90b857:	079602        	or	a6, a9, a7
  90b85a:	c098      	movi.n	a9, 8
  90b85c:	1769f8        	l32r	a7, 8e603c <vdesc_module_install+0x102c>
  90b85f:	09ee01        	and	a14, a14, a9
  90b862:	0e8738        	moveqz	a7, a8, a14
  90b865:	076602        	or	a6, a6, a7
  90b868:	8753      	l32i.n	a7, a5, 12
  90b86a:	9612      	s32i.n	a6, a1, 8
  90b86c:	00d104        	ssl	a13
  90b86f:	00771a        	sll	a7, a7
  90b872:	c16c      	movi.n	a6, 28
  90b874:	067601        	and	a6, a7, a6
  90b877:	9613      	s32i.n	a6, a1, 12
				   | set11nRateFlags(series, 1)
  90b879:	c2f0      	movi.n	a15, 32
  90b87b:	0d4601        	and	a6, a4, a13
  90b87e:	068f38        	moveqz	a15, a8, a6
  90b881:	c4e0      	movi.n	a14, 64
  90b883:	0b4601        	and	a6, a4, a11
  90b886:	068e38        	moveqz	a14, a8, a6
  90b889:	875a      	l32i.n	a7, a5, 40
  90b88b:	166ab7        	l32r	a6, 8e6368 <_xtos_set_exception_handler+0x20>
  90b88e:	094401        	and	a4, a4, a9
  90b891:	048638        	moveqz	a6, a8, a4
  90b894:	097711        	slli	a7, a7, 7
  90b897:	243a80        	movi	a4, 0x380
  90b89a:	9e10      	s32i.n	a14, a1, 0
  90b89c:	047701        	and	a7, a7, a4
				   | set11nRateFlags(series, 2)
  90b89f:	2e4a00        	movi	a14, 0x400
  90b8a2:	0d3401        	and	a4, a3, a13
  90b8a5:	048e38        	moveqz	a14, a8, a4
  90b8a8:	146ac0        	l32r	a4, 8e63a8 <_xtos_set_exception_handler+0x60>

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
  90b8ab:	9611      	s32i.n	a6, a1, 4
				   | set11nRateFlags(series, 2)
  90b8ad:	0b3601        	and	a6, a3, a11
  90b8b0:	068438        	moveqz	a4, a8, a6
  90b8b3:	166abb        	l32r	a6, 8e63a0 <_xtos_set_exception_handler+0x58>
  90b8b6:	093301        	and	a3, a3, a9
  90b8b9:	038638        	moveqz	a6, a8, a3
  90b8bc:	d360      	mov.n	a3, a6
  90b8be:	265211        	l32i	a6, a5, 68
  90b8c1:	9415      	s32i.n	a4, a1, 20
  90b8c3:	146ac6        	l32r	a4, 8e63dc <_xtos_set_exception_handler+0x94>
  90b8c6:	046611        	slli	a6, a6, 12
  90b8c9:	046601        	and	a6, a6, a4
				   | set11nRateFlags(series, 3)
  90b8cc:	146a0d        	l32r	a4, 8e6100 <vdesc_module_install+0x10f0>
  90b8cf:	09a901        	and	a9, a10, a9
  90b8d2:	098438        	moveqz	a4, a8, a9
  90b8d5:	d940      	mov.n	a9, a4
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  90b8d7:	8413      	l32i.n	a4, a1, 12
				   | set11nRateFlags(series, 1)
				   | set11nRateFlags(series, 2)
				   | set11nRateFlags(series, 3)
  90b8d9:	0dad01        	and	a13, a10, a13
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  90b8dc:	047702        	or	a7, a7, a4
				   | set11nRateFlags(series, 1)
  90b8df:	067602        	or	a6, a7, a6
				   | set11nRateFlags(series, 2)
				   | set11nRateFlags(series, 3)
  90b8e2:	275218        	l32i	a7, a5, 96
  90b8e5:	156ac7        	l32r	a5, 8e6404 <_xtos_set_exception_handler+0xbc>
  90b8e8:	0f7710        	slli	a7, a7, 17
  90b8eb:	0d8c38        	moveqz	a12, a8, a13
				   | SM(rtsctsRate, AR_RTSCTSRate);
  90b8ee:	8414      	l32i.n	a4, a1, 16
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
				   | set11nRateFlags(series, 2)
				   | set11nRateFlags(series, 3)
  90b8f0:	1d6951        	l32r	a13, 8e5e34 <vdesc_module_install+0xe24>
  90b8f3:	057501        	and	a5, a7, a5
  90b8f6:	0bab01        	and	a11, a10, a11

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
  90b8f9:	056602        	or	a6, a6, a5
				   | set11nRateFlags(series, 2)
				   | set11nRateFlags(series, 3)
				   | SM(rtsctsRate, AR_RTSCTSRate);
  90b8fc:	156ac8        	l32r	a5, 8e641c <_xtos_set_exception_handler+0xd4>
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
				   | set11nRateFlags(series, 2)
				   | set11nRateFlags(series, 3)
  90b8ff:	0b8d38        	moveqz	a13, a8, a11
				   | SM(rtsctsRate, AR_RTSCTSRate);
  90b902:	0c4810        	slli	a8, a4, 20
  90b905:	058801        	and	a8, a8, a5

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
  90b908:	8512      	l32i.n	a5, a1, 8
  90b90a:	086602        	or	a6, a6, a8
  90b90d:	056602        	or	a6, a6, a5
				   | set11nRateFlags(series, 2)
  90b910:	0f6f02        	or	a15, a6, a15
  90b913:	8610      	l32i.n	a6, a1, 0
  90b915:	8411      	l32i.n	a4, a1, 4
  90b917:	06ff02        	or	a15, a15, a6
  90b91a:	04ff02        	or	a15, a15, a4
				   | set11nRateFlags(series, 3)
  90b91d:	8515      	l32i.n	a5, a1, 20
	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
				   | set11nRateFlags(series, 2)
  90b91f:	0efe02        	or	a14, a15, a14
				   | set11nRateFlags(series, 3)
  90b922:	05e402        	or	a4, a14, a5
  90b925:	034302        	or	a3, a4, a3
  90b928:	0c3c02        	or	a12, a3, a12
  90b92b:	0dcb02        	or	a11, a12, a13
				   | SM(rtsctsRate, AR_RTSCTSRate);
  90b92e:	09b902        	or	a9, a11, a9
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  90b931:	098357        	extui	a3, a9, 24, 8
  90b934:	232424        	s8i	a3, a2, 36
  90b937:	090357        	extui	a3, a9, 16, 8
  90b93a:	232425        	s8i	a3, a2, 37
  90b93d:	098347        	extui	a3, a9, 8, 8
  90b940:	232426        	s8i	a3, a2, 38
  90b943:	292427        	s8i	a9, a2, 39
  90b946:	d10f      	retw.n

0090b948 <ar5416Set11nAggrFirst_20>:
				   | SM(rtsctsRate, AR_RTSCTSRate);
}

void ar5416Set11nAggrFirst_20(struct ath_tx_desc *ds, a_uint32_t aggrLen,
			      a_uint32_t numDelims)
{
  90b948:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90b94b:	2a200c        	l8ui	a10, a2, 12
  90b94e:	29200d        	l8ui	a9, a2, 13
  90b951:	28200e        	l8ui	a8, a2, 14
  90b954:	08aa10        	slli	a10, a10, 24
  90b957:	009911        	slli	a9, a9, 16
  90b95a:	0a9902        	or	a9, a9, a10
  90b95d:	088811        	slli	a8, a8, 8
  90b960:	098802        	or	a8, a8, a9
  90b963:	29200f        	l8ui	a9, a2, 15

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  90b966:	2a2020        	l8ui	a10, a2, 32
void ar5416Set11nAggrFirst_20(struct ath_tx_desc *ds, a_uint32_t aggrLen,
			      a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90b969:	089802        	or	a8, a9, a8
  90b96c:	196ac9        	l32r	a9, 8e6490 <_xtos_set_exception_handler+0x148>

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  90b96f:	08aa10        	slli	a10, a10, 24
void ar5416Set11nAggrFirst_20(struct ath_tx_desc *ds, a_uint32_t aggrLen,
			      a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90b972:	098802        	or	a8, a8, a9
  90b975:	088957        	extui	a9, a8, 24, 8
  90b978:	29240c        	s8i	a9, a2, 12
  90b97b:	080957        	extui	a9, a8, 16, 8
  90b97e:	29240d        	s8i	a9, a2, 13
  90b981:	28240f        	s8i	a8, a2, 15
  90b984:	088947        	extui	a9, a8, 8, 8

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  90b987:	282021        	l8ui	a8, a2, 33
void ar5416Set11nAggrFirst_20(struct ath_tx_desc *ds, a_uint32_t aggrLen,
			      a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90b98a:	29240e        	s8i	a9, a2, 14

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  90b98d:	292022        	l8ui	a9, a2, 34
  90b990:	008811        	slli	a8, a8, 16
  90b993:	0a8802        	or	a8, a8, a10
  90b996:	089911        	slli	a9, a9, 8
  90b999:	089902        	or	a9, a9, a8
  90b99c:	282023        	l8ui	a8, a2, 35
	ads->ds_ctl6 |= SM(aggrLen, AR_AggrLen) |
  90b99f:	03034f        	extui	a3, a3, 0, 16
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  90b9a2:	098902        	or	a9, a8, a9
  90b9a5:	186aca        	l32r	a8, 8e64d0 <_xtos_set_exception_handler+0x188>
	ads->ds_ctl6 |= SM(aggrLen, AR_AggrLen) |
		SM(numDelims, AR_PadDelim);
  90b9a8:	0e4410        	slli	a4, a4, 18
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  90b9ab:	089901        	and	a9, a9, a8
	ads->ds_ctl6 |= SM(aggrLen, AR_AggrLen) |
  90b9ae:	093902        	or	a9, a3, a9
		SM(numDelims, AR_PadDelim);
  90b9b1:	136acb        	l32r	a3, 8e64e0 <_xtos_set_exception_handler+0x198>
  90b9b4:	034801        	and	a8, a4, a3
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
	ads->ds_ctl6 |= SM(aggrLen, AR_AggrLen) |
  90b9b7:	089802        	or	a8, a9, a8
  90b9ba:	088357        	extui	a3, a8, 24, 8
  90b9bd:	232420        	s8i	a3, a2, 32
  90b9c0:	080357        	extui	a3, a8, 16, 8
  90b9c3:	232421        	s8i	a3, a2, 33
  90b9c6:	088347        	extui	a3, a8, 8, 8
  90b9c9:	232422        	s8i	a3, a2, 34
  90b9cc:	282423        	s8i	a8, a2, 35
  90b9cf:	d10f      	retw.n
  90b9d1:	000000        	ill

0090b9d4 <ar5416Set11nAggrMiddle_20>:
		SM(numDelims, AR_PadDelim);
}

void ar5416Set11nAggrMiddle_20(struct ath_tx_desc *ds, a_uint32_t numDelims)
{
  90b9d4:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);
	a_uint32_t ctl6;

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90b9d7:	2a200c        	l8ui	a10, a2, 12
  90b9da:	29200d        	l8ui	a9, a2, 13
  90b9dd:	28200e        	l8ui	a8, a2, 14
  90b9e0:	08aa10        	slli	a10, a10, 24
  90b9e3:	009911        	slli	a9, a9, 16
  90b9e6:	0a9902        	or	a9, a9, a10
  90b9e9:	088811        	slli	a8, a8, 8
  90b9ec:	098802        	or	a8, a8, a9
  90b9ef:	29200f        	l8ui	a9, a2, 15

	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
  90b9f2:	2a2020        	l8ui	a10, a2, 32
void ar5416Set11nAggrMiddle_20(struct ath_tx_desc *ds, a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);
	a_uint32_t ctl6;

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90b9f5:	089802        	or	a8, a9, a8
  90b9f8:	196ac9        	l32r	a9, 8e651c <_xtos_set_exception_handler+0x1d4>

	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
  90b9fb:	08aa10        	slli	a10, a10, 24
void ar5416Set11nAggrMiddle_20(struct ath_tx_desc *ds, a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);
	a_uint32_t ctl6;

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90b9fe:	098802        	or	a8, a8, a9
  90ba01:	088957        	extui	a9, a8, 24, 8
  90ba04:	29240c        	s8i	a9, a2, 12
  90ba07:	080957        	extui	a9, a8, 16, 8
  90ba0a:	29240d        	s8i	a9, a2, 13
  90ba0d:	28240f        	s8i	a8, a2, 15
  90ba10:	088947        	extui	a9, a8, 8, 8

	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
  90ba13:	282021        	l8ui	a8, a2, 33
void ar5416Set11nAggrMiddle_20(struct ath_tx_desc *ds, a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);
	a_uint32_t ctl6;

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90ba16:	29240e        	s8i	a9, a2, 14

	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
  90ba19:	292022        	l8ui	a9, a2, 34
  90ba1c:	008811        	slli	a8, a8, 16
  90ba1f:	0a8802        	or	a8, a8, a10
  90ba22:	089911        	slli	a9, a9, 8
  90ba25:	089902        	or	a9, a9, a8
  90ba28:	282023        	l8ui	a8, a2, 35
	ctl6 &= ~AR_PadDelim;
  90ba2b:	1a6acc        	l32r	a10, 8e655c <_xtos_set_exception_handler+0x214>

	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
  90ba2e:	098902        	or	a9, a8, a9
	ctl6 &= ~AR_PadDelim;
	ctl6 |= SM(numDelims, AR_PadDelim);
  90ba31:	186acb        	l32r	a8, 8e6560 <strcmp>
  90ba34:	0e3310        	slli	a3, a3, 18
	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
	ctl6 &= ~AR_PadDelim;
  90ba37:	0a9901        	and	a9, a9, a10
	ctl6 |= SM(numDelims, AR_PadDelim);
  90ba3a:	083801        	and	a8, a3, a8
  90ba3d:	098802        	or	a8, a8, a9
	ads->ds_ctl6 = ctl6;
  90ba40:	088957        	extui	a9, a8, 24, 8
  90ba43:	292420        	s8i	a9, a2, 32
  90ba46:	080957        	extui	a9, a8, 16, 8
  90ba49:	292421        	s8i	a9, a2, 33
  90ba4c:	088947        	extui	a9, a8, 8, 8
  90ba4f:	292422        	s8i	a9, a2, 34
  90ba52:	282423        	s8i	a8, a2, 35
  90ba55:	d10f      	retw.n
	...

0090ba58 <ar5416Set11nAggrLast_20>:
}

void ar5416Set11nAggrLast_20(struct ath_tx_desc *ds)
{
  90ba58:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= AR_IsAggr;
  90ba5b:	2a200c        	l8ui	a10, a2, 12
  90ba5e:	29200d        	l8ui	a9, a2, 13
  90ba61:	28200e        	l8ui	a8, a2, 14
  90ba64:	08aa10        	slli	a10, a10, 24
  90ba67:	009911        	slli	a9, a9, 16
  90ba6a:	0a9902        	or	a9, a9, a10
  90ba6d:	088811        	slli	a8, a8, 8
  90ba70:	098802        	or	a8, a8, a9
  90ba73:	29200f        	l8ui	a9, a2, 15
	ads->ds_ctl1 &= ~AR_MoreAggr;
	ads->ds_ctl6 &= ~AR_PadDelim;
  90ba76:	2a2020        	l8ui	a10, a2, 32

void ar5416Set11nAggrLast_20(struct ath_tx_desc *ds)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= AR_IsAggr;
  90ba79:	089802        	or	a8, a9, a8
	ads->ds_ctl1 &= ~AR_MoreAggr;
  90ba7c:	196acd        	l32r	a9, 8e65b0 <strcmp+0x50>
	ads->ds_ctl6 &= ~AR_PadDelim;
  90ba7f:	08aa10        	slli	a10, a10, 24
void ar5416Set11nAggrLast_20(struct ath_tx_desc *ds)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= AR_IsAggr;
	ads->ds_ctl1 &= ~AR_MoreAggr;
  90ba82:	098801        	and	a8, a8, a9
  90ba85:	196abb        	l32r	a9, 8e6574 <strcmp+0x14>
  90ba88:	098802        	or	a8, a8, a9
  90ba8b:	088957        	extui	a9, a8, 24, 8
  90ba8e:	29240c        	s8i	a9, a2, 12
  90ba91:	080957        	extui	a9, a8, 16, 8
  90ba94:	29240d        	s8i	a9, a2, 13
  90ba97:	28240f        	s8i	a8, a2, 15
  90ba9a:	088947        	extui	a9, a8, 8, 8
	ads->ds_ctl6 &= ~AR_PadDelim;
  90ba9d:	282021        	l8ui	a8, a2, 33
void ar5416Set11nAggrLast_20(struct ath_tx_desc *ds)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= AR_IsAggr;
	ads->ds_ctl1 &= ~AR_MoreAggr;
  90baa0:	29240e        	s8i	a9, a2, 14
	ads->ds_ctl6 &= ~AR_PadDelim;
  90baa3:	292022        	l8ui	a9, a2, 34
  90baa6:	008811        	slli	a8, a8, 16
  90baa9:	0a8802        	or	a8, a8, a10
  90baac:	089911        	slli	a9, a9, 8
  90baaf:	089902        	or	a9, a9, a8
  90bab2:	282023        	l8ui	a8, a2, 35
  90bab5:	098902        	or	a9, a8, a9
  90bab8:	186acc        	l32r	a8, 8e65e8 <strcmp+0x88>
  90babb:	292423        	s8i	a9, a2, 35
  90babe:	089801        	and	a8, a9, a8
  90bac1:	088a57        	extui	a10, a8, 24, 8
  90bac4:	2a2420        	s8i	a10, a2, 32
  90bac7:	080a57        	extui	a10, a8, 16, 8
  90baca:	088847        	extui	a8, a8, 8, 8
  90bacd:	2a2421        	s8i	a10, a2, 33
  90bad0:	282422        	s8i	a8, a2, 34
  90bad3:	d10f      	retw.n
  90bad5:	000000        	ill

0090bad8 <ar5416Clr11nAggr_20>:
}

void ar5416Clr11nAggr_20(struct ath_tx_desc *ds)
{
  90bad8:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 &= (~AR_IsAggr & ~AR_MoreAggr);
  90badb:	2a200c        	l8ui	a10, a2, 12
  90bade:	28200d        	l8ui	a8, a2, 13
  90bae1:	29200e        	l8ui	a9, a2, 14
  90bae4:	08aa10        	slli	a10, a10, 24
  90bae7:	008811        	slli	a8, a8, 16
  90baea:	0a8802        	or	a8, a8, a10
  90baed:	089911        	slli	a9, a9, 8
  90baf0:	089902        	or	a9, a9, a8
  90baf3:	28200f        	l8ui	a8, a2, 15
  90baf6:	098902        	or	a9, a8, a9
  90baf9:	186ace        	l32r	a8, 8e6634 <strcmp+0xd4>
  90bafc:	29240f        	s8i	a9, a2, 15
  90baff:	089801        	and	a8, a9, a8
  90bb02:	088a57        	extui	a10, a8, 24, 8
  90bb05:	2a240c        	s8i	a10, a2, 12
  90bb08:	080a57        	extui	a10, a8, 16, 8
  90bb0b:	088847        	extui	a8, a8, 8, 8
  90bb0e:	2a240d        	s8i	a10, a2, 13
  90bb11:	28240e        	s8i	a8, a2, 14
  90bb14:	d10f      	retw.n
	...

0090bb18 <ar5416Set11nBurstDuration_20>:
}

void ar5416Set11nBurstDuration_20(struct ath_tx_desc *ds,
				  a_uint32_t burstDuration)
{
  90bb18:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl2 &= ~AR_BurstDur;
  90bb1b:	2a2010        	l8ui	a10, a2, 16
  90bb1e:	292011        	l8ui	a9, a2, 17
  90bb21:	282012        	l8ui	a8, a2, 18
  90bb24:	08aa10        	slli	a10, a10, 24
  90bb27:	009911        	slli	a9, a9, 16
  90bb2a:	0a9902        	or	a9, a9, a10
  90bb2d:	088811        	slli	a8, a8, 8
  90bb30:	098802        	or	a8, a8, a9
  90bb33:	292013        	l8ui	a9, a2, 19
	ads->ds_ctl2 |= SM(burstDuration, AR_BurstDur);
  90bb36:	03034e        	extui	a3, a3, 0, 15
void ar5416Set11nBurstDuration_20(struct ath_tx_desc *ds,
				  a_uint32_t burstDuration)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl2 &= ~AR_BurstDur;
  90bb39:	089802        	or	a8, a9, a8
  90bb3c:	196acf        	l32r	a9, 8e6678 <strcmp+0x118>
  90bb3f:	098801        	and	a8, a8, a9
	ads->ds_ctl2 |= SM(burstDuration, AR_BurstDur);
  90bb42:	083802        	or	a8, a3, a8
  90bb45:	088957        	extui	a9, a8, 24, 8
  90bb48:	292410        	s8i	a9, a2, 16
  90bb4b:	080957        	extui	a9, a8, 16, 8
  90bb4e:	292411        	s8i	a9, a2, 17
  90bb51:	088947        	extui	a9, a8, 8, 8
  90bb54:	292412        	s8i	a9, a2, 18
  90bb57:	282413        	s8i	a8, a2, 19
  90bb5a:	d10f      	retw.n

0090bb5c <ar5416Set11nVirtualMoreFrag_20>:
}

void ar5416Set11nVirtualMoreFrag_20(struct ath_tx_desc *ds,
				    a_uint32_t vmf)
{
  90bb5c:	6c1004        	entry	a1, 32
  90bb5f:	282008        	l8ui	a8, a2, 8
  90bb62:	292009        	l8ui	a9, a2, 9
	struct ar5416_desc *ads = AR5416DESC(ds);

	if (vmf) {
		ads->ds_ctl0 |= AR_VirtMoreFrag;
  90bb65:	088810        	slli	a8, a8, 24
  90bb68:	009911        	slli	a9, a9, 16
void ar5416Set11nVirtualMoreFrag_20(struct ath_tx_desc *ds,
				    a_uint32_t vmf)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	if (vmf) {
  90bb6b:	ca3d      	beqz.n	a3, 90bb9c <ar5416Set11nVirtualMoreFrag_20+0x40>
		ads->ds_ctl0 |= AR_VirtMoreFrag;
  90bb6d:	089902        	or	a9, a9, a8
  90bb70:	28200a        	l8ui	a8, a2, 10
  90bb73:	1a6a8e        	l32r	a10, 8e65ac <strcmp+0x4c>
  90bb76:	088811        	slli	a8, a8, 8
  90bb79:	098802        	or	a8, a8, a9
  90bb7c:	29200b        	l8ui	a9, a2, 11
  90bb7f:	089802        	or	a8, a9, a8
  90bb82:	0a8802        	or	a8, a8, a10
  90bb85:	088957        	extui	a9, a8, 24, 8
  90bb88:	292408        	s8i	a9, a2, 8
  90bb8b:	080957        	extui	a9, a8, 16, 8
  90bb8e:	292409        	s8i	a9, a2, 9
  90bb91:	088947        	extui	a9, a8, 8, 8
  90bb94:	29240a        	s8i	a9, a2, 10
  90bb97:	28240b        	s8i	a8, a2, 11
  90bb9a:	d10f      	retw.n
	} else {
		ads->ds_ctl0 &= ~AR_VirtMoreFrag;
  90bb9c:	089802        	or	a8, a9, a8
  90bb9f:	29200a        	l8ui	a9, a2, 10
  90bba2:	089911        	slli	a9, a9, 8
  90bba5:	089902        	or	a9, a9, a8
  90bba8:	28200b        	l8ui	a8, a2, 11
  90bbab:	098902        	or	a9, a8, a9
  90bbae:	186ad0        	l32r	a8, 8e66f0 <strcmp+0x190>
  90bbb1:	29240b        	s8i	a9, a2, 11
  90bbb4:	089801        	and	a8, a9, a8
  90bbb7:	088a57        	extui	a10, a8, 24, 8
  90bbba:	2a2408        	s8i	a10, a2, 8
  90bbbd:	080a57        	extui	a10, a8, 16, 8
  90bbc0:	088847        	extui	a8, a8, 8, 8
  90bbc3:	2a2409        	s8i	a10, a2, 9
  90bbc6:	28240a        	s8i	a8, a2, 10
  90bbc9:	d10f      	retw.n
	...

0090bbcc <ar5416StopTxDma>:

	return AH_TRUE;
}

HAL_BOOL ar5416StopTxDma(struct ath_hal*ah, a_uint32_t q)
{
  90bbcc:	6c1004        	entry	a1, 32
  90bbcf:	146ad1        	l32r	a4, 8e6714 <strcmp+0x1b4>
	
        HALASSERT(q < AH_PRIVATE(ah)->ah_caps.halTotalQueues);

        HALASSERT(AH5416(ah)->ah_txq[q].tqi_type != HAL_TX_QUEUE_INACTIVE);

	iowrite32_mac(AR_Q_TXD, 1 << q);
  90bbd2:	c081      	movi.n	a8, 1
  90bbd4:	003104        	ssl	a3
  90bbd7:	00881a        	sll	a8, a8
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bbda:	0c0200        	memw
  90bbdd:	9840      	s32i.n	a8, a4, 0
        for (i = 1000; i != 0; i--) {
  90bbdf:	243ae8        	movi	a4, 0x3e8
                if (ar5416NumTxPending(ah, q) == 0)
  90bbe2:	da20      	mov.n	a10, a2
  90bbe4:	033b02        	or	a11, a3, a3
  90bbe7:	5bfd9b        	call8	90b254 <ar5416NumTxPending>
  90bbea:	c8aa      	beqz.n	a10, 90bbf8 <ar5416StopTxDma+0x2c>
                        break;
                OS_DELAY(100);        /* XXX get actual value */
  90bbec:	2a0a64        	movi	a10, 100
        HALASSERT(q < AH_PRIVATE(ah)->ah_caps.halTotalQueues);

        HALASSERT(AH5416(ah)->ah_txq[q].tqi_type != HAL_TX_QUEUE_INACTIVE);

	iowrite32_mac(AR_Q_TXD, 1 << q);
        for (i = 1000; i != 0; i--) {
  90bbef:	244cff        	addi	a4, a4, -1
                if (ar5416NumTxPending(ah, q) == 0)
                        break;
                OS_DELAY(100);        /* XXX get actual value */
  90bbf2:	5befc0        	call8	907af4 <ath_hal_delay>
        HALASSERT(q < AH_PRIVATE(ah)->ah_caps.halTotalQueues);

        HALASSERT(AH5416(ah)->ah_txq[q].tqi_type != HAL_TX_QUEUE_INACTIVE);

	iowrite32_mac(AR_Q_TXD, 1 << q);
        for (i = 1000; i != 0; i--) {
  90bbf5:	654fe9        	bnez	a4, 90bbe2 <ar5416StopTxDma+0x16>
  90bbf8:	126ad1        	l32r	a2, 8e673c <strcmp+0x1dc>
  90bbfb:	c030      	movi.n	a3, 0
  90bbfd:	0c0200        	memw
  90bc00:	9320      	s32i.n	a3, a2, 0
                        break;
                OS_DELAY(100);        /* XXX get actual value */
        }

	iowrite32_mac(AR_Q_TXD, 0);
        return (i != 0);
  90bc02:	c021      	movi.n	a2, 1
  90bc04:	043238        	moveqz	a2, a3, a4
}
  90bc07:	d10f      	retw.n
  90bc09:	000000        	ill

0090bc0c <ar5416AbortTxDma>:
#endif
        return npend;
}

HAL_BOOL ar5416AbortTxDma(struct ath_hal *ah)
{
  90bc0c:	6c1004        	entry	a1, 32
  90bc0f:	136ad1        	l32r	a3, 8e6754 <strcmp+0x1f4>
  90bc12:	243aff        	movi	a4, 0x3ff
  90bc15:	0c0200        	memw
  90bc18:	9430      	s32i.n	a4, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90bc1a:	136ad2        	l32r	a3, 8e6764 <strcmp+0x204>
	iowrite32_mac(AR_Q_TXD, AR_Q_TXD_M);

	/*
	 * set tx abort bits
	 */
	OS_REG_SET_BIT(ah, AR_PCU_MISC, (AR_PCU_FORCE_QUIET_COLL | AR_PCU_CLEAR_VMF));
  90bc1d:	146ad3        	l32r	a4, 8e676c <strcmp+0x20c>
  90bc20:	0c0200        	memw
  90bc23:	8830      	l32i.n	a8, a3, 0
  90bc25:	048402        	or	a4, a8, a4
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bc28:	0c0200        	memw
  90bc2b:	9430      	s32i.n	a4, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90bc2d:	136aaf        	l32r	a3, 8e66ec <strcmp+0x18c>
	OS_REG_SET_BIT(ah, AR_DIAG_SW, AR_DIAG_FORCE_CH_IDLE_HIGH);
  90bc30:	146ab8        	l32r	a4, 8e6710 <strcmp+0x1b0>
  90bc33:	0c0200        	memw
  90bc36:	8830      	l32i.n	a8, a3, 0
  90bc38:	048402        	or	a4, a8, a4
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bc3b:	0c0200        	memw
  90bc3e:	9430      	s32i.n	a4, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90bc40:	136ad4        	l32r	a3, 8e6790 <strcmp+0x230>
	OS_REG_SET_BIT(ah, AR_D_GBL_IFS_MISC, AR_D_GBL_IFS_MISC_IGNORE_BACKOFF);
  90bc43:	1469f8        	l32r	a4, 8e6424 <_xtos_set_exception_handler+0xdc>
  90bc46:	0c0200        	memw
  90bc49:	8830      	l32i.n	a8, a3, 0
  90bc4b:	048402        	or	a4, a8, a4
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bc4e:	0c0200        	memw
  90bc51:	9430      	s32i.n	a4, a3, 0

	/*
	 * wait on all tx queues
	 */
	for (q = 0; q < AR_NUM_QCU; q++) {
  90bc53:	c030      	movi.n	a3, 0
  90bc55:	60001b        	j	90bc74 <ar5416AbortTxDma+0x68>
  90bc58:	00da20        	excw
		for (i = 0; i < AR5416_ABORT_LOOPS; i++) {
			if (!ar5416NumTxPending(ah, q))
  90bc5b:	db30      	mov.n	a11, a3
  90bc5d:	5bfd7d        	call8	90b254 <ar5416NumTxPending>
  90bc60:	64a05c        	beqz	a10, 90bcc0 <ar5416AbortTxDma+0xb4>
				break;

			OS_DELAY(AR5416_ABORT_WAIT);
  90bc63:	2a0a05        	movi	a10, 5
  90bc66:	244cff        	addi	a4, a4, -1
  90bc69:	5befa2        	call8	907af4 <ath_hal_delay>

	/*
	 * wait on all tx queues
	 */
	for (q = 0; q < AR_NUM_QCU; q++) {
		for (i = 0; i < AR5416_ABORT_LOOPS; i++) {
  90bc6c:	654fe9        	bnez	a4, 90bc59 <ar5416AbortTxDma+0x4d>
				break;

			OS_DELAY(AR5416_ABORT_WAIT);
		}
		if (i == AR5416_ABORT_LOOPS) {
			return AH_FALSE;
  90bc6f:	d240      	mov.n	a2, a4
  90bc71:	d10f      	retw.n
  90bc73:	00243a        	movltz	a4, a2, a0
#endif
        return npend;
}

HAL_BOOL ar5416AbortTxDma(struct ath_hal *ah)
{
  90bc76:	e8          	.byte 0xe8
  90bc77:	63ffde        	j	90bc59 <ar5416AbortTxDma+0x4d>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90bc7a:	126ad2        	l32r	a2, 8e67c4 <strcmp+0x264>
	}

	/*
	 * clear tx abort bits
	 */
	OS_REG_CLR_BIT(ah, AR_PCU_MISC, (AR_PCU_FORCE_QUIET_COLL | AR_PCU_CLEAR_VMF));
  90bc7d:	136ad5        	l32r	a3, 8e67d4 <strcmp+0x274>
  90bc80:	0c0200        	memw
  90bc83:	8420      	l32i.n	a4, a2, 0
  90bc85:	034301        	and	a3, a4, a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bc88:	0c0200        	memw
  90bc8b:	9320      	s32i.n	a3, a2, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90bc8d:	126aaf        	l32r	a2, 8e674c <strcmp+0x1ec>
	OS_REG_CLR_BIT(ah, AR_DIAG_SW, AR_DIAG_FORCE_CH_IDLE_HIGH);
  90bc90:	136ac1        	l32r	a3, 8e6794 <strcmp+0x234>
  90bc93:	0c0200        	memw
  90bc96:	8420      	l32i.n	a4, a2, 0
  90bc98:	034301        	and	a3, a4, a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bc9b:	0c0200        	memw
  90bc9e:	9320      	s32i.n	a3, a2, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90bca0:	126ad4        	l32r	a2, 8e67f0 <strcmp+0x290>
	OS_REG_CLR_BIT(ah, AR_D_GBL_IFS_MISC, AR_D_GBL_IFS_MISC_IGNORE_BACKOFF);
  90bca3:	136ad6        	l32r	a3, 8e67fc <strcmp+0x29c>
  90bca6:	0c0200        	memw
  90bca9:	8420      	l32i.n	a4, a2, 0
  90bcab:	034301        	and	a3, a4, a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bcae:	0c0200        	memw
  90bcb1:	9320      	s32i.n	a3, a2, 0
  90bcb3:	126ad1        	l32r	a2, 8e67f8 <strcmp+0x298>
  90bcb6:	0c0200        	memw
  90bcb9:	9a20      	s32i.n	a10, a2, 0
	/*
	 * clear txd
	 */
	iowrite32_mac(AR_Q_TXD, 0);

	return AH_TRUE;
  90bcbb:	c021      	movi.n	a2, 1
  90bcbd:	d10f      	retw.n
  90bcbf:	00b133        	excw
	OS_REG_SET_BIT(ah, AR_D_GBL_IFS_MISC, AR_D_GBL_IFS_MISC_IGNORE_BACKOFF);

	/*
	 * wait on all tx queues
	 */
	for (q = 0; q < AR_NUM_QCU; q++) {
  90bcc2:	6939ae        	bnei	a3, 10, 90bc74 <ar5416AbortTxDma+0x68>
  90bcc5:	63ffb1        	j	90bc7a <ar5416AbortTxDma+0x6e>

0090bcc8 <ar5416StopDmaReceive>:
	iowrite32_mac(AR_RXDP, rxdp);
	HALASSERT(ioread32_mac(AR_RXDP) == rxdp);
}

HAL_BOOL ar5416StopDmaReceive(struct ath_hal *ah)
{
  90bcc8:	6c1004        	entry	a1, 32
  90bccb:	186aae        	l32r	a8, 8e6784 <strcmp+0x224>
  90bcce:	c290      	movi.n	a9, 32
  90bcd0:	0c0200        	memw
  90bcd3:	9980      	s32i.n	a9, a8, 0
	iowrite32_mac(AR_CR, AR_CR_RXD); /* Set receive disable bit */
	if (!ath_hal_wait(ah, AR_CR, AR_CR_RXE, 0)) {
  90bcd5:	da20      	mov.n	a10, a2
  90bcd7:	c0b8      	movi.n	a11, 8
  90bcd9:	c0c4      	movi.n	a12, 4
  90bcdb:	c0d0      	movi.n	a13, 0
  90bcdd:	5bfc5a        	call8	90ae48 <ath_hal_wait>
  90bce0:	c081      	movi.n	a8, 1
  90bce2:	c020      	movi.n	a2, 0
  90bce4:	0a8239        	movnez	a2, a8, a10
		return AH_FALSE;
	} else {
		return AH_TRUE;
	}
}
  90bce7:	d10f      	retw.n
  90bce9:	000000        	ill

0090bcec <ar5416Detach>:
		.ah_setInterrupts        = ar5416SetInterrupts,
	},
};

void ar5416Detach(struct ath_hal *ah)
{
  90bcec:	6c1004        	entry	a1, 32
	HALASSERT(ah != AH_NULL);
	ath_hal_free(ah);
  90bcef:	da20      	mov.n	a10, a2
  90bcf1:	5bef8d        	call8	907b28 <ath_hal_free>
  90bcf4:	d10f      	retw.n
	...

0090bcf8 <ar5416GetPendingInterrupts>:
	 */
	return ((host_isr != AR_INTR_SPURIOUS) && (host_isr & AR_INTR_MAC_IRQ));
}

HAL_BOOL ar5416GetPendingInterrupts(struct ath_hal *ah, HAL_INT *masked)
{
  90bcf8:	6c1004        	entry	a1, 32
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90bcfb:	186aa1        	l32r	a8, 8e6780 <strcmp+0x220>
  90bcfe:	0c0200        	memw
  90bd01:	8980      	l32i.n	a9, a8, 0
#ifndef AR9100
	HAL_BOOL fatal_int = AH_FALSE;
	a_uint32_t sync_cause;

	if (ioread32_mac(AR_INTR_ASYNC_CAUSE)
			& AR_INTR_MAC_IRQ) {
  90bd03:	c082      	movi.n	a8, 2
  90bd05:	089801        	and	a8, a9, a8
	a_uint32_t isr;
#ifndef AR9100
	HAL_BOOL fatal_int = AH_FALSE;
	a_uint32_t sync_cause;

	if (ioread32_mac(AR_INTR_ASYNC_CAUSE)
  90bd08:	c980      	beqz.n	a8, 90bd1c <ar5416GetPendingInterrupts+0x24>
  90bd0a:	186ad7        	l32r	a8, 8e6868 <strcmp+0x308>
  90bd0d:	0c0200        	memw
  90bd10:	8880      	l32i.n	a8, a8, 0
			& AR_INTR_MAC_IRQ) {
		if ((ioread32_mac(AR_RTC_STATUS)
				& AR_RTC_STATUS_M) != AR_RTC_STATUS_ON) {
  90bd12:	080843        	extui	a8, a8, 0, 4
	HAL_BOOL fatal_int = AH_FALSE;
	a_uint32_t sync_cause;

	if (ioread32_mac(AR_INTR_ASYNC_CAUSE)
			& AR_INTR_MAC_IRQ) {
		if ((ioread32_mac(AR_RTC_STATUS)
  90bd15:	68820b        	beqi	a8, 2, 90bd24 <ar5416GetPendingInterrupts+0x2c>
  90bd18:	600013        	j	90bd2f <ar5416GetPendingInterrupts+0x37>
  90bd1b:	009830        	excw
			*masked = 0;
			return AH_FALSE;
		}
	} else {
		*masked = 0;
		return AH_FALSE;
  90bd1e:	d280      	mov.n	a2, a8
  90bd20:	d10f      	retw.n
  90bd22:	000018        	src	a0, a0, a0
  90bd25:	6ad80c        	blti	a13, 8, 90bd35 <ar5416GetPendingInterrupts+0x3d>
  90bd28:	020088        	excw
  90bd2b:	8069      	l32i.n	a0, a6, 36
	}
#endif
	isr = ioread32_mac(AR_ISR_RAC);
	if (isr == 0xffffffff) {
  90bd2d:	8005      	l32i.n	a0, a0, 20
		*masked = 0;
  90bd2f:	c020      	movi.n	a2, 0
  90bd31:	9230      	s32i.n	a2, a3, 0
  90bd33:	d10f      	retw.n
		return AH_FALSE;
	}

	*masked = isr & HAL_INT_COMMON;
  90bd35:	1a6aa3        	l32r	a10, 8e67c4 <strcmp+0x264>
	if (isr & (AR_ISR_TXMINTR | AR_ISR_TXINTM)) {
		*masked |= HAL_INT_TX;
	}
#endif

	if (isr & AR_ISR_BCNMISC) {
  90bd38:	1b6aa5        	l32r	a11, 8e67cc <strcmp+0x26c>
	if (isr == 0xffffffff) {
		*masked = 0;
		return AH_FALSE;
	}

	*masked = isr & HAL_INT_COMMON;
  90bd3b:	0a8a01        	and	a10, a8, a10
  90bd3e:	2a3600        	s32i	a10, a3, 0
	if (isr & (AR_ISR_TXMINTR | AR_ISR_TXINTM)) {
		*masked |= HAL_INT_TX;
	}
#endif

	if (isr & AR_ISR_BCNMISC) {
  90bd41:	7b8021        	bnone	a8, a11, 90bd66 <ar5416GetPendingInterrupts+0x6e>
  90bd44:	196ad9        	l32r	a9, 8e68a8 <strcmp+0x348>
  90bd47:	0c0200        	memw
  90bd4a:	8990      	l32i.n	a9, a9, 0
		a_uint32_t s2_s;

		s2_s = ioread32_mac(AR_ISR_S2_S);

		if (s2_s & AR_ISR_S2_GTT) {
  90bd4c:	7b9008        	bnone	a9, a11, 90bd58 <ar5416GetPendingInterrupts+0x60>
			*masked |= HAL_INT_GTT;
  90bd4f:	1b6ab7        	l32r	a11, 8e682c <strcmp+0x2cc>
  90bd52:	0baa02        	or	a10, a10, a11
  90bd55:	2a3600        	s32i	a10, a3, 0
		}

		if (s2_s & AR_ISR_S2_CST) {
  90bd58:	79960a        	bbci	a9, 9, 90bd66 <ar5416GetPendingInterrupts+0x6e>
			*masked |= HAL_INT_CST;
  90bd5b:	8a30      	l32i.n	a10, a3, 0
  90bd5d:	196a1f        	l32r	a9, 8e65dc <strcmp+0x7c>
  90bd60:	09a902        	or	a9, a10, a9
  90bd63:	293600        	s32i	a9, a3, 0
		}
	}

	if (isr & (AR_ISR_RXOK | AR_ISR_RXERR))
  90bd66:	c095      	movi.n	a9, 5
  90bd68:	798009        	bnone	a8, a9, 90bd75 <ar5416GetPendingInterrupts+0x7d>
		*masked |= HAL_INT_RX;
  90bd6b:	8a30      	l32i.n	a10, a3, 0
  90bd6d:	c091      	movi.n	a9, 1
  90bd6f:	09a902        	or	a9, a10, a9
  90bd72:	293600        	s32i	a9, a3, 0
	if (isr & (AR_ISR_TXOK | AR_ISR_TXDESC | AR_ISR_TXERR | AR_ISR_TXEOL)) {
  90bd75:	295ac0        	movi	a9, 0x5c0
  90bd78:	79803c        	bnone	a8, a9, 90bdb8 <ar5416GetPendingInterrupts+0xc0>
		struct ath_hal_5416 *ahp = AH5416(ah);
		a_uint32_t           s0_s, s1_s;

		*masked |= HAL_INT_TX;
  90bd7b:	8930      	l32i.n	a9, a3, 0
  90bd7d:	c480      	movi.n	a8, 64
  90bd7f:	089802        	or	a8, a9, a8
  90bd82:	9830      	s32i.n	a8, a3, 0
  90bd84:	136ada        	l32r	a3, 8e68ec <strcmp+0x38c>
  90bd87:	0c0200        	memw
  90bd8a:	8930      	l32i.n	a9, a3, 0
  90bd8c:	136adb        	l32r	a3, 8e68f8 <strcmp+0x398>
  90bd8f:	0c0200        	memw
  90bd92:	8830      	l32i.n	a8, a3, 0
		s0_s = ioread32_mac(AR_ISR_S0_S);
		s1_s = ioread32_mac(AR_ISR_S1_S);
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXOK);
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXDESC);
  90bd94:	232239        	l32i	a3, a2, 228
		ahp->ah_intrTxqs |= MS(s1_s, AR_ISR_S1_QCU_TXERR);
  90bd97:	098a02        	or	a10, a8, a9
		a_uint32_t           s0_s, s1_s;

		*masked |= HAL_INT_TX;
		s0_s = ioread32_mac(AR_ISR_S0_S);
		s1_s = ioread32_mac(AR_ISR_S1_S);
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXOK);
  90bd9a:	0a0a49        	extui	a10, a10, 0, 10
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXDESC);
  90bd9d:	03aa02        	or	a10, a10, a3
  90bda0:	136adc        	l32r	a3, 8e6910 <strcmp+0x3b0>
  90bda3:	039901        	and	a9, a9, a3
		ahp->ah_intrTxqs |= MS(s1_s, AR_ISR_S1_QCU_TXERR);
		ahp->ah_intrTxqs |= MS(s1_s, AR_ISR_S1_QCU_TXEOL);
  90bda6:	038801        	and	a8, a8, a3

		*masked |= HAL_INT_TX;
		s0_s = ioread32_mac(AR_ISR_S0_S);
		s1_s = ioread32_mac(AR_ISR_S1_S);
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXOK);
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXDESC);
  90bda9:	09095f        	extui	a9, a9, 16, 16
		ahp->ah_intrTxqs |= MS(s1_s, AR_ISR_S1_QCU_TXERR);
  90bdac:	09a902        	or	a9, a10, a9
		ahp->ah_intrTxqs |= MS(s1_s, AR_ISR_S1_QCU_TXEOL);
  90bdaf:	08085f        	extui	a8, a8, 16, 16
  90bdb2:	089302        	or	a3, a9, a8
  90bdb5:	232639        	s32i	a3, a2, 228
  90bdb8:	136add        	l32r	a3, 8e692c <strcmp+0x3cc>
	if (AH_TRUE == fatal_int) {
		iowrite32_mac(AR_INTR_SYNC_CAUSE_CLR, sync_cause);
		(void) ioread32_mac(AR_INTR_SYNC_CAUSE_CLR);
	}
#endif
	return AH_TRUE;
  90bdbb:	c021      	movi.n	a2, 1
  90bdbd:	0c0200        	memw
  90bdc0:	8830      	l32i.n	a8, a3, 0

#ifndef AR9100
	sync_cause = ioread32_mac(AR_INTR_SYNC_CAUSE);
	fatal_int = ((sync_cause != AR_INTR_SPURIOUS) &&
		     (sync_cause & (AR_INTR_SYNC_HOST1_FATAL
		      | AR_INTR_SYNC_HOST1_PERR))) ? AH_TRUE : AH_FALSE;
  90bdc2:	68800f        	beqi	a8, -1, 90bdd5 <ar5416GetPendingInterrupts+0xdd>
  90bdc5:	290a60        	movi	a9, 96
  90bdc8:	798009        	bnone	a8, a9, 90bdd5 <ar5416GetPendingInterrupts+0xdd>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bdcb:	0c0200        	memw
  90bdce:	9830      	s32i.n	a8, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90bdd0:	0c0200        	memw
  90bdd3:	8330      	l32i.n	a3, a3, 0
		iowrite32_mac(AR_INTR_SYNC_CAUSE_CLR, sync_cause);
		(void) ioread32_mac(AR_INTR_SYNC_CAUSE_CLR);
	}
#endif
	return AH_TRUE;
}
  90bdd5:	d10f      	retw.n
	...

0090bdd8 <ar5416SetRxFilter>:
		return AH_TRUE;
	}
}

void ar5416SetRxFilter(struct ath_hal *ah, a_uint32_t bits)
{
  90bdd8:	6c1004        	entry	a1, 32
	a_uint32_t phybits;
    
	iowrite32_mac(AR_RX_FILTER, (bits & 0xff) | AR_RX_COMPR_BAR);
  90bddb:	284a00        	movi	a8, 0x400
  90bdde:	030947        	extui	a9, a3, 0, 8
  90bde1:	089902        	or	a9, a9, a8
	phybits = 0;
	if (bits & HAL_RX_FILTER_PHYRADAR)
  90bde4:	1a6a00        	l32r	a10, 8e65e4 <strcmp+0x84>
  90bde7:	186ade        	l32r	a8, 8e6960 <xthal_get_ccount+0x8>
  90bdea:	0a3a01        	and	a10, a3, a10
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bded:	0c0200        	memw
  90bdf0:	9980      	s32i.n	a9, a8, 0
		phybits |= AR_PHY_ERR_RADAR;
  90bdf2:	280a20        	movi	a8, 32
  90bdf5:	290a00        	movi	a9, 0
  90bdf8:	0a9838        	moveqz	a8, a9, a10
	if (bits & HAL_RX_FILTER_PHYERR)
  90bdfb:	773705        	bbci	a3, 23, 90be04 <ar5416SetRxFilter+0x2c>
		phybits |= AR_PHY_ERR_OFDM_TIMING | AR_PHY_ERR_CCK_TIMING;
  90bdfe:	136adf        	l32r	a3, 8e697c <xthal_get_ccount+0x24>
  90be01:	038802        	or	a8, a8, a3
  90be04:	136ae0        	l32r	a3, 8e6984 <xthal_get_intenable+0x4>
  90be07:	196ae1        	l32r	a9, 8e698c <xthal_get_intenable+0xc>
  90be0a:	0c0200        	memw
  90be0d:	9830      	s32i.n	a8, a3, 0
	iowrite32_mac(AR_PHY_ERR, phybits);
	if (phybits) {
  90be0f:	c88d      	beqz.n	a8, 90be20 <ar5416SetRxFilter+0x48>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90be11:	0c0200        	memw
  90be14:	8890      	l32i.n	a8, a9, 0
		iowrite32_mac(AR_RXCFG,
  90be16:	c130      	movi.n	a3, 16
  90be18:	038302        	or	a3, a8, a3
  90be1b:	60000b        	j	90be2a <ar5416SetRxFilter+0x52>
  90be1e:	00000c        	sub	a0, a0, a0
  90be21:	020088        	excw
  90be24:	90c6      	s32i.n	a0, a12, 24
			     ioread32_mac(AR_RXCFG)
			     | AR_RXCFG_ZLFDMA);
	} else {
		iowrite32_mac(AR_RXCFG,
  90be26:	3f0383        	excw
  90be29:	010c02        	or	a12, a0, a1
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90be2c:	009390        	l32e	a0, a9, -52
  90be2f:	d10f      	retw.n
  90be31:	000000        	ill

0090be34 <ar5416ProcTxDesc_20>:
	ads->ds_ctl6 = SM(keyType, AR_EncrType);
	return AH_TRUE;
}

HAL_STATUS ar5416ProcTxDesc_20(struct ath_hal *ah, struct ath_tx_desc *gds)
{
  90be34:	6c1004        	entry	a1, 32
        struct ar5416_desc *ads = AR5416DESC(gds);
        struct ath_tx_desc *ds = (struct ath_tx_desc *)gds;
        
        if ((ads->ds_txstatus9 & AR_TxDone) == 0)
  90be37:	2a305c        	l8ui	a10, a3, 92
  90be3a:	28305d        	l8ui	a8, a3, 93
  90be3d:	29305e        	l8ui	a9, a3, 94
  90be40:	08aa10        	slli	a10, a10, 24
  90be43:	008811        	slli	a8, a8, 16
  90be46:	0a8802        	or	a8, a8, a10
  90be49:	089911        	slli	a9, a9, 8
  90be4c:	089902        	or	a9, a9, a8
  90be4f:	28305f        	l8ui	a8, a3, 95
  90be52:	098902        	or	a9, a8, a9
                return HAL_EINPROGRESS;
  90be55:	c08f      	movi.n	a8, 15
HAL_STATUS ar5416ProcTxDesc_20(struct ath_hal *ah, struct ath_tx_desc *gds)
{
        struct ar5416_desc *ads = AR5416DESC(gds);
        struct ath_tx_desc *ds = (struct ath_tx_desc *)gds;
        
        if ((ads->ds_txstatus9 & AR_TxDone) == 0)
  90be57:	7f9f02        	bbsi	a9, 31, 90be5d <ar5416ProcTxDesc_20+0x29>
  90be5a:	60029b        	j	90c0f9 <ar5416ProcTxDesc_20+0x2c5>
                return HAL_EINPROGRESS;

        ads->ds_txstatus9 &= ~AR_TxDone;
  90be5d:	c78e      	movi.n	a8, -2
  90be5f:	089801        	and	a8, a9, a8
  90be62:	088b57        	extui	a11, a8, 24, 8
  90be65:	2b345c        	s8i	a11, a3, 92
  90be68:	080b57        	extui	a11, a8, 16, 8
  90be6b:	2b345d        	s8i	a11, a3, 93
  90be6e:	28345f        	s8i	a8, a3, 95
  90be71:	088b47        	extui	a11, a8, 8, 8

        /* Update software copies of the HW status */
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
  90be74:	09184b        	extui	a8, a9, 1, 12
        struct ath_tx_desc *ds = (struct ath_tx_desc *)gds;
        
        if ((ads->ds_txstatus9 & AR_TxDone) == 0)
                return HAL_EINPROGRESS;

        ads->ds_txstatus9 &= ~AR_TxDone;
  90be77:	2b345e        	s8i	a11, a3, 94

        /* Update software copies of the HW status */
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
  90be7a:	088b14        	srli	a11, a8, 8
  90be7d:	2b3464        	s8i	a11, a3, 100
        ds->ds_txstat.ts_tstamp = ads->AR_SendTimestamp;
  90be80:	2c3040        	l8ui	a12, a3, 64
  90be83:	2b3041        	l8ui	a11, a3, 65
                return HAL_EINPROGRESS;

        ads->ds_txstatus9 &= ~AR_TxDone;

        /* Update software copies of the HW status */
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
  90be86:	283465        	s8i	a8, a3, 101
        ds->ds_txstat.ts_tstamp = ads->AR_SendTimestamp;
  90be89:	283042        	l8ui	a8, a3, 66
  90be8c:	08cc10        	slli	a12, a12, 24
  90be8f:	00bb11        	slli	a11, a11, 16
  90be92:	0cbb02        	or	a11, a11, a12
  90be95:	088811        	slli	a8, a8, 8
  90be98:	0b8802        	or	a8, a8, a11
  90be9b:	2b3043        	l8ui	a11, a3, 67
        struct ath_tx_desc *ds = (struct ath_tx_desc *)gds;
        
        if ((ads->ds_txstatus9 & AR_TxDone) == 0)
                return HAL_EINPROGRESS;

        ads->ds_txstatus9 &= ~AR_TxDone;
  90be9e:	c0a0      	movi.n	a10, 0

        /* Update software copies of the HW status */
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
        ds->ds_txstat.ts_tstamp = ads->AR_SendTimestamp;
  90bea0:	08b802        	or	a8, a11, a8
  90bea3:	088b57        	extui	a11, a8, 24, 8
  90bea6:	2b3460        	s8i	a11, a3, 96
  90bea9:	080b57        	extui	a11, a8, 16, 8
  90beac:	2b3461        	s8i	a11, a3, 97
  90beaf:	088b47        	extui	a11, a8, 8, 8
  90beb2:	2b3462        	s8i	a11, a3, 98
        ds->ds_txstat.ts_status = 0;
  90beb5:	2a3466        	s8i	a10, a3, 102
        ds->ds_txstat.ts_flags  = 0;
  90beb8:	2a3467        	s8i	a10, a3, 103

        if (ads->ds_txstatus1 & AR_ExcessiveRetries)
  90bebb:	2b303c        	l8ui	a11, a3, 60
  90bebe:	2a303d        	l8ui	a10, a3, 61

        ads->ds_txstatus9 &= ~AR_TxDone;

        /* Update software copies of the HW status */
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
        ds->ds_txstat.ts_tstamp = ads->AR_SendTimestamp;
  90bec1:	283463        	s8i	a8, a3, 99
        ds->ds_txstat.ts_status = 0;
        ds->ds_txstat.ts_flags  = 0;

        if (ads->ds_txstatus1 & AR_ExcessiveRetries)
  90bec4:	28303e        	l8ui	a8, a3, 62
  90bec7:	08bb10        	slli	a11, a11, 24
  90beca:	00aa11        	slli	a10, a10, 16
  90becd:	0baa02        	or	a10, a10, a11
  90bed0:	088811        	slli	a8, a8, 8
  90bed3:	0a8802        	or	a8, a8, a10
  90bed6:	2a303f        	l8ui	a10, a3, 63
  90bed9:	08a802        	or	a8, a10, a8
  90bedc:	7e8704        	bbci	a8, 30, 90bee4 <ar5416ProcTxDesc_20+0xb0>
                ds->ds_txstat.ts_status |= HAL_TXERR_XRETRY;
  90bedf:	c0a1      	movi.n	a10, 1
  90bee1:	2a3466        	s8i	a10, a3, 102
        if (ads->ds_txstatus1 & AR_Filtered)
  90bee4:	7c870a        	bbci	a8, 28, 90bef2 <ar5416ProcTxDesc_20+0xbe>
                ds->ds_txstat.ts_status |= HAL_TXERR_FILT;
  90bee7:	2b3066        	l8ui	a11, a3, 102
  90beea:	c0a2      	movi.n	a10, 2
  90beec:	0aba02        	or	a10, a11, a10
  90beef:	2a3466        	s8i	a10, a3, 102
        if (ads->ds_txstatus1 & AR_FIFOUnderrun)
  90bef2:	c0a4      	movi.n	a10, 4
  90bef4:	7a8008        	bnone	a8, a10, 90bf00 <ar5416ProcTxDesc_20+0xcc>
                ds->ds_txstat.ts_status |= HAL_TXERR_FIFO;
  90bef7:	2b3066        	l8ui	a11, a3, 102
  90befa:	0aba02        	or	a10, a11, a10
  90befd:	2a3466        	s8i	a10, a3, 102
        if (ads->ds_txstatus9 & AR_TxOpExceeded)
  90bf00:	7e960a        	bbci	a9, 14, 90bf0e <ar5416ProcTxDesc_20+0xda>
		ds->ds_txstat.ts_status |= HAL_TXERR_XTXOP;
  90bf03:	2a3066        	l8ui	a10, a3, 102
  90bf06:	c098      	movi.n	a9, 8
  90bf08:	09a902        	or	a9, a10, a9
  90bf0b:	293466        	s8i	a9, a3, 102
        if (ads->ds_txstatus1 & AR_TxTimerExpired)
  90bf0e:	7c860a        	bbci	a8, 12, 90bf1c <ar5416ProcTxDesc_20+0xe8>
		ds->ds_txstat.ts_status |= HAL_TXERR_TIMER_EXPIRED;
  90bf11:	2a3066        	l8ui	a10, a3, 102
  90bf14:	c190      	movi.n	a9, 16
  90bf16:	09a902        	or	a9, a10, a9
  90bf19:	293466        	s8i	a9, a3, 102

        if (ads->ds_txstatus1 & AR_DescCfgErr)
  90bf1c:	7d8604        	bbci	a8, 13, 90bf24 <ar5416ProcTxDesc_20+0xf0>
		ds->ds_txstat.ts_flags |= HAL_TX_DESC_CFG_ERR;
  90bf1f:	c094      	movi.n	a9, 4
  90bf21:	293467        	s8i	a9, a3, 103
        if (ads->ds_txstatus1 & AR_TxDataUnderrun) {
  90bf24:	7e8611        	bbci	a8, 14, 90bf39 <ar5416ProcTxDesc_20+0x105>
		ds->ds_txstat.ts_flags |= HAL_TX_DATA_UNDERRUN;
  90bf27:	293067        	l8ui	a9, a3, 103
  90bf2a:	c088      	movi.n	a8, 8
  90bf2c:	089802        	or	a8, a9, a8
  90bf2f:	283467        	s8i	a8, a3, 103
		ar5416UpdateTxTrigLevel(ah, AH_TRUE);
  90bf32:	da20      	mov.n	a10, a2
  90bf34:	c0b1      	movi.n	a11, 1
  90bf36:	5bfca3        	call8	90b1c4 <ar5416UpdateTxTrigLevel>
	}
        if (ads->ds_txstatus1 & AR_TxDelimUnderrun) {
  90bf39:	28303d        	l8ui	a8, a3, 61
  90bf3c:	7f8711        	bbci	a8, 31, 90bf51 <ar5416ProcTxDesc_20+0x11d>
		ds->ds_txstat.ts_flags |= HAL_TX_DELIM_UNDERRUN;
  90bf3f:	293067        	l8ui	a9, a3, 103
  90bf42:	c180      	movi.n	a8, 16
  90bf44:	089802        	or	a8, a9, a8
  90bf47:	283467        	s8i	a8, a3, 103
		ar5416UpdateTxTrigLevel(ah, AH_TRUE);
  90bf4a:	da20      	mov.n	a10, a2
  90bf4c:	c0b1      	movi.n	a11, 1
  90bf4e:	5bfc9d        	call8	90b1c4 <ar5416UpdateTxTrigLevel>
	}
        if (ads->ds_txstatus0 & AR_TxBaStatus) {
  90bf51:	283038        	l8ui	a8, a3, 56
  90bf54:	223039        	l8ui	a2, a3, 57
  90bf57:	29303a        	l8ui	a9, a3, 58
  90bf5a:	088810        	slli	a8, a8, 24
  90bf5d:	002211        	slli	a2, a2, 16
  90bf60:	082202        	or	a2, a2, a8
  90bf63:	089911        	slli	a9, a9, 8
  90bf66:	029902        	or	a9, a9, a2
  90bf69:	22303b        	l8ui	a2, a3, 59
  90bf6c:	092902        	or	a9, a2, a9
  90bf6f:	719671        	bbci	a9, 1, 90bfe4 <ar5416ProcTxDesc_20+0x1b0>
		ds->ds_txstat.ts_flags |= HAL_TX_BA;
  90bf72:	283067        	l8ui	a8, a3, 103
  90bf75:	220a01        	movi	a2, 1
  90bf78:	028202        	or	a2, a8, a2
  90bf7b:	223467        	s8i	a2, a3, 103
		ds->ds_txstat.ba_low = ads->AR_BaBitmapLow;
  90bf7e:	2a3044        	l8ui	a10, a3, 68
  90bf81:	223045        	l8ui	a2, a3, 69
  90bf84:	283046        	l8ui	a8, a3, 70
  90bf87:	08aa10        	slli	a10, a10, 24
  90bf8a:	002211        	slli	a2, a2, 16
  90bf8d:	0a2202        	or	a2, a2, a10
  90bf90:	088811        	slli	a8, a8, 8
  90bf93:	028802        	or	a8, a8, a2
  90bf96:	223047        	l8ui	a2, a3, 71
		ds->ds_txstat.ba_high = ads->AR_BaBitmapHigh;
  90bf99:	2a3048        	l8ui	a10, a3, 72
		ds->ds_txstat.ts_flags |= HAL_TX_DELIM_UNDERRUN;
		ar5416UpdateTxTrigLevel(ah, AH_TRUE);
	}
        if (ads->ds_txstatus0 & AR_TxBaStatus) {
		ds->ds_txstat.ts_flags |= HAL_TX_BA;
		ds->ds_txstat.ba_low = ads->AR_BaBitmapLow;
  90bf9c:	082802        	or	a8, a2, a8
  90bf9f:	088257        	extui	a2, a8, 24, 8
  90bfa2:	223474        	s8i	a2, a3, 116
  90bfa5:	080257        	extui	a2, a8, 16, 8
  90bfa8:	223475        	s8i	a2, a3, 117
  90bfab:	088247        	extui	a2, a8, 8, 8
  90bfae:	223476        	s8i	a2, a3, 118
		ds->ds_txstat.ba_high = ads->AR_BaBitmapHigh;
  90bfb1:	223049        	l8ui	a2, a3, 73
		ds->ds_txstat.ts_flags |= HAL_TX_DELIM_UNDERRUN;
		ar5416UpdateTxTrigLevel(ah, AH_TRUE);
	}
        if (ads->ds_txstatus0 & AR_TxBaStatus) {
		ds->ds_txstat.ts_flags |= HAL_TX_BA;
		ds->ds_txstat.ba_low = ads->AR_BaBitmapLow;
  90bfb4:	283477        	s8i	a8, a3, 119
		ds->ds_txstat.ba_high = ads->AR_BaBitmapHigh;
  90bfb7:	28304a        	l8ui	a8, a3, 74
  90bfba:	08aa10        	slli	a10, a10, 24
  90bfbd:	002211        	slli	a2, a2, 16
  90bfc0:	0a2202        	or	a2, a2, a10
  90bfc3:	088811        	slli	a8, a8, 8
  90bfc6:	028802        	or	a8, a8, a2
  90bfc9:	22304b        	l8ui	a2, a3, 75
  90bfcc:	082802        	or	a8, a2, a8
  90bfcf:	088257        	extui	a2, a8, 24, 8
  90bfd2:	223478        	s8i	a2, a3, 120
  90bfd5:	080257        	extui	a2, a8, 16, 8
  90bfd8:	223479        	s8i	a2, a3, 121
  90bfdb:	088247        	extui	a2, a8, 8, 8
  90bfde:	22347a        	s8i	a2, a3, 122
  90bfe1:	28347b        	s8i	a8, a3, 123

        /*
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
  90bfe4:	28305c        	l8ui	a8, a3, 92
  90bfe7:	22305d        	l8ui	a2, a3, 93
  90bfea:	088810        	slli	a8, a8, 24
  90bfed:	002211        	slli	a2, a2, 16
  90bff0:	082202        	or	a2, a2, a8
  90bff3:	186ae2        	l32r	a8, 8e6b7c <memcpy+0x18>
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90bff6:	2a304c        	l8ui	a10, a3, 76

        /*
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
  90bff9:	082201        	and	a2, a2, a8
  90bffc:	02525a        	extui	a2, a2, 21, 11
  90bfff:	223468        	s8i	a2, a3, 104
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90c002:	22304d        	l8ui	a2, a3, 77
  90c005:	08aa10        	slli	a10, a10, 24
  90c008:	28304e        	l8ui	a8, a3, 78
  90c00b:	002211        	slli	a2, a2, 16
  90c00e:	0a2202        	or	a2, a2, a10
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
  90c011:	098a47        	extui	a10, a9, 8, 8
  90c014:	2a346b        	s8i	a10, a3, 107
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90c017:	088811        	slli	a8, a8, 8
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
  90c01a:	1a6ac4        	l32r	a10, 8e6b2c <__udivsi3+0xe0>
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90c01d:	028802        	or	a8, a8, a2
  90c020:	22304f        	l8ui	a2, a3, 79
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
  90c023:	29346a        	s8i	a9, a3, 106
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
  90c026:	0a9901        	and	a9, a9, a10
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90c029:	082802        	or	a8, a2, a8
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
  90c02c:	09095f        	extui	a9, a9, 16, 16
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90c02f:	088257        	extui	a2, a8, 24, 8
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
  90c032:	29346c        	s8i	a9, a3, 108
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
  90c035:	088947        	extui	a9, a8, 8, 8
        /*
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
        ds->ds_txstat.ts_rssi_combined = 
  90c038:	223469        	s8i	a2, a3, 105
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
  90c03b:	29346e        	s8i	a9, a3, 110
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
  90c03e:	22347c        	s8i	a2, a3, 124
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
  90c041:	080957        	extui	a9, a8, 16, 8
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
  90c044:	088247        	extui	a2, a8, 8, 8
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
  90c047:	29346f        	s8i	a9, a3, 111
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
  90c04a:	29347d        	s8i	a9, a3, 125
  90c04d:	22347e        	s8i	a2, a3, 126
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  90c050:	293050        	l8ui	a9, a3, 80
  90c053:	223051        	l8ui	a2, a3, 81
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
  90c056:	28346d        	s8i	a8, a3, 109
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
  90c059:	28347f        	s8i	a8, a3, 127
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  90c05c:	283052        	l8ui	a8, a3, 82
  90c05f:	089910        	slli	a9, a9, 24
  90c062:	002211        	slli	a2, a2, 16
  90c065:	092202        	or	a2, a2, a9
  90c068:	088811        	slli	a8, a8, 8
  90c06b:	028802        	or	a8, a8, a2
  90c06e:	223053        	l8ui	a2, a3, 83
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
  90c071:	293054        	l8ui	a9, a3, 84
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  90c074:	082802        	or	a8, a2, a8
  90c077:	088257        	extui	a2, a8, 24, 8
  90c07a:	223480        	s8i	a2, a3, 128
  90c07d:	080257        	extui	a2, a8, 16, 8
  90c080:	223481        	s8i	a2, a3, 129
  90c083:	088247        	extui	a2, a8, 8, 8
  90c086:	223482        	s8i	a2, a3, 130
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
  90c089:	223055        	l8ui	a2, a3, 85
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  90c08c:	283483        	s8i	a8, a3, 131
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
  90c08f:	283056        	l8ui	a8, a3, 86
  90c092:	089910        	slli	a9, a9, 24
  90c095:	002211        	slli	a2, a2, 16
  90c098:	092202        	or	a2, a2, a9
  90c09b:	088811        	slli	a8, a8, 8
  90c09e:	028802        	or	a8, a8, a2
  90c0a1:	223057        	l8ui	a2, a3, 87
  90c0a4:	082802        	or	a8, a2, a8
  90c0a7:	088257        	extui	a2, a8, 24, 8
  90c0aa:	223484        	s8i	a2, a3, 132
  90c0ad:	080257        	extui	a2, a8, 16, 8
  90c0b0:	223485        	s8i	a2, a3, 133
  90c0b3:	088247        	extui	a2, a8, 8, 8
  90c0b6:	223486        	s8i	a2, a3, 134
        ds->ds_txstat.ts_shortretry = MS(ads->ds_txstatus1, AR_RTSFailCnt);
  90c0b9:	29303c        	l8ui	a9, a3, 60
  90c0bc:	22303d        	l8ui	a2, a3, 61
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
  90c0bf:	283487        	s8i	a8, a3, 135
        ds->ds_txstat.ts_shortretry = MS(ads->ds_txstatus1, AR_RTSFailCnt);
  90c0c2:	28303e        	l8ui	a8, a3, 62
  90c0c5:	089910        	slli	a9, a9, 24
  90c0c8:	002211        	slli	a2, a2, 16
  90c0cb:	092202        	or	a2, a2, a9
  90c0ce:	088811        	slli	a8, a8, 8
  90c0d1:	028802        	or	a8, a8, a2
  90c0d4:	22303f        	l8ui	a2, a3, 63
  90c0d7:	082802        	or	a8, a2, a8
  90c0da:	084243        	extui	a2, a8, 4, 4
  90c0dd:	223470        	s8i	a2, a3, 112
        ds->ds_txstat.ts_longretry = MS(ads->ds_txstatus1, AR_DataFailCnt);
  90c0e0:	088243        	extui	a2, a8, 8, 4
  90c0e3:	223471        	s8i	a2, a3, 113
        ds->ds_txstat.ts_virtcol = MS(ads->ds_txstatus1, AR_VirtRetryCnt);
  90c0e6:	126ae3        	l32r	a2, 8e6c74 <memcpy+0x110>
  90c0e9:	028801        	and	a8, a8, a2
  90c0ec:	08c814        	srli	a8, a8, 12
        ds->ds_txstat.ts_antenna = 0;		/* ignored for owl */
  90c0ef:	c020      	movi.n	a2, 0
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
        ds->ds_txstat.ts_shortretry = MS(ads->ds_txstatus1, AR_RTSFailCnt);
        ds->ds_txstat.ts_longretry = MS(ads->ds_txstatus1, AR_DataFailCnt);
        ds->ds_txstat.ts_virtcol = MS(ads->ds_txstatus1, AR_VirtRetryCnt);
  90c0f1:	283472        	s8i	a8, a3, 114
        ds->ds_txstat.ts_antenna = 0;		/* ignored for owl */
  90c0f4:	223473        	s8i	a2, a3, 115
  90c0f7:	c080      	movi.n	a8, 0

        return HAL_OK;
}
  90c0f9:	d280      	mov.n	a2, a8
  90c0fb:	d10f      	retw.n
  90c0fd:	000000        	ill

0090c100 <ar5416Attach>:
	ath_hal_free(ah);
}

struct ath_hal *
ar5416Attach(HAL_SOFTC sc, adf_os_device_t dev, HAL_STATUS *status)
{
  90c100:	6c1004        	entry	a1, 32
	struct ath_hal_5416 *ahp;
	struct ath_hal *ah;

	ahp = ath_hal_malloc(sizeof (struct ath_hal_5416));
  90c103:	2a1a44        	movi	a10, 0x144
  90c106:	5bee7f        	call8	907b04 <ath_hal_malloc>
	ath_hal_free(ah);
}

struct ath_hal *
ar5416Attach(HAL_SOFTC sc, adf_os_device_t dev, HAL_STATUS *status)
{
  90c109:	d520      	mov.n	a5, a2
	struct ath_hal_5416 *ahp;
	struct ath_hal *ah;

	ahp = ath_hal_malloc(sizeof (struct ath_hal_5416));
  90c10b:	d2a0      	mov.n	a2, a10
	if (ahp == AH_NULL) {
  90c10d:	cca4      	bnez.n	a10, 90c115 <ar5416Attach+0x15>
		*status = HAL_ENOMEM;
  90c10f:	c032      	movi.n	a3, 2
  90c111:	9340      	s32i.n	a3, a4, 0
		return AH_NULL;
  90c113:	d10f      	retw.n
	}
	ah = &ahp->ah_priv.h;

	OS_MEMCPY(&ahp->ah_priv, &ar5416hal_10, sizeof(struct ath_hal_private));
  90c115:	1b6ae4        	l32r	a11, 8e6ca8 <memcpy+0x144>
  90c118:	2c0ad4        	movi	a12, 212
  90c11b:	5bee85        	call8	907b30 <ath_hal_memcpy>

	ah->ah_dev = dev;
  90c11e:	9322      	s32i.n	a3, a2, 8
	ah->ah_sc = sc;

	ah->ah_set11nTxDesc        = ar5416Set11nTxDesc_20;
  90c120:	136ae5        	l32r	a3, 8e6cb4 <memcpy+0x150>
	ah = &ahp->ah_priv.h;

	OS_MEMCPY(&ahp->ah_priv, &ar5416hal_10, sizeof(struct ath_hal_private));

	ah->ah_dev = dev;
	ah->ah_sc = sc;
  90c123:	9521      	s32i.n	a5, a2, 4

	ah->ah_set11nTxDesc        = ar5416Set11nTxDesc_20;
  90c125:	932f      	s32i.n	a3, a2, 60
	ah->ah_set11nRateScenario  = ar5416Set11nRateScenario_20;
  90c127:	136ae6        	l32r	a3, 8e6cc0 <memcpy+0x15c>
  90c12a:	232610        	s32i	a3, a2, 64
	ah->ah_set11nAggrFirst     = ar5416Set11nAggrFirst_20;
  90c12d:	136ae7        	l32r	a3, 8e6ccc <memcpy+0x168>
  90c130:	232611        	s32i	a3, a2, 68
	ah->ah_set11nAggrMiddle    = ar5416Set11nAggrMiddle_20;
  90c133:	136ae8        	l32r	a3, 8e6cd4 <memcpy+0x170>
  90c136:	232612        	s32i	a3, a2, 72
	ah->ah_set11nAggrLast      = ar5416Set11nAggrLast_20;
  90c139:	136ae9        	l32r	a3, 8e6ce0 <memcpy+0x17c>
  90c13c:	232613        	s32i	a3, a2, 76
	ah->ah_clr11nAggr          = ar5416Clr11nAggr_20;
  90c13f:	136aea        	l32r	a3, 8e6ce8 <memcpy+0x184>
  90c142:	232614        	s32i	a3, a2, 80
	ah->ah_set11nBurstDuration = ar5416Set11nBurstDuration_20;
  90c145:	136aeb        	l32r	a3, 8e6cf4 <memcpy+0x190>
  90c148:	232615        	s32i	a3, a2, 84
	ah->ah_setupRxDesc         = ar5416SetupRxDesc_20;
  90c14b:	136aec        	l32r	a3, 8e6cfc <memcpy+0x198>
  90c14e:	232620        	s32i	a3, a2, 128
	ah->ah_procRxDescFast      = ar5416ProcRxDescFast_20;
  90c151:	136aed        	l32r	a3, 8e6d08 <memcpy+0x1a4>
  90c154:	232622        	s32i	a3, a2, 136
	ah->ah_setupTxDesc         = ar5416SetupTxDesc_20;
  90c157:	136aee        	l32r	a3, 8e6d10 <memcpy+0x1ac>
  90c15a:	232617        	s32i	a3, a2, 92
	ah->ah_fillTxDesc          = ar5416FillTxDesc_20;
  90c15d:	136aef        	l32r	a3, 8e6d1c <memcpy+0x1b8>
  90c160:	232618        	s32i	a3, a2, 96
	ah->ah_fillKeyTxDesc       = ar5416FillKeyTxDesc_20;
  90c163:	136af0        	l32r	a3, 8e6d24 <memcpy+0x1c0>
  90c166:	232619        	s32i	a3, a2, 100
	ah->ah_procTxDesc          = ar5416ProcTxDesc_20;
  90c169:	136af1        	l32r	a3, 8e6d30 <memcpy+0x1cc>
  90c16c:	23261a        	s32i	a3, a2, 104
	ah->ah_set11nVirtualMoreFrag = ar5416Set11nVirtualMoreFrag_20;
  90c16f:	136af2        	l32r	a3, 8e6d38 <memcpy+0x1d4>
  90c172:	232616        	s32i	a3, a2, 88

	return ah;
}
  90c175:	d10f      	retw.n
	...

0090c178 <ar5416GetRateTable>:
#undef  HT
#undef  HT_HGI

const HAL_RATE_TABLE *
ar5416GetRateTable(struct ath_hal *ah, a_uint32_t mode)
{
  90c178:	6c1004        	entry	a1, 32
		break;
	case HAL_MODE_11B:
		rt = &ar5416_11b_table;
		break;
	case HAL_MODE_11G:
		rt =  &ar5416_11g_table;
  90c17b:	126af7        	l32r	a2, 8e6d58 <memcpy+0x1f4>

const HAL_RATE_TABLE *
ar5416GetRateTable(struct ath_hal *ah, a_uint32_t mode)
{
	HAL_RATE_TABLE *rt;
	switch (mode) {
  90c17e:	683826        	beqi	a3, 8, 90c1a8 <ar5416GetRateTable+0x30>
  90c181:	c028      	movi.n	a2, 8
  90c183:	73230d        	bltu	a2, a3, 90c194 <ar5416GetRateTable+0x1c>
	case HAL_MODE_11A:
		rt = &ar5416_11a_table;
  90c186:	126af4        	l32r	a2, 8e6d58 <memcpy+0x1f4>

const HAL_RATE_TABLE *
ar5416GetRateTable(struct ath_hal *ah, a_uint32_t mode)
{
	HAL_RATE_TABLE *rt;
	switch (mode) {
  90c189:	68311b        	beqi	a3, 1, 90c1a8 <ar5416GetRateTable+0x30>
	case HAL_MODE_11A:
		rt = &ar5416_11a_table;
		break;
	case HAL_MODE_11B:
		rt = &ar5416_11b_table;
  90c18c:	126af3        	l32r	a2, 8e6d58 <memcpy+0x1f4>

const HAL_RATE_TABLE *
ar5416GetRateTable(struct ath_hal *ah, a_uint32_t mode)
{
	HAL_RATE_TABLE *rt;
	switch (mode) {
  90c18f:	693413        	bnei	a3, 4, 90c1a6 <ar5416GetRateTable+0x2e>
  90c192:	d10f      	retw.n
  90c194:	186a31        	l32r	a8, 8e6a58 <__udivsi3+0xc>
		break;
	case HAL_MODE_11G:
		rt =  &ar5416_11g_table;
		break;
	case HAL_MODE_11NG:
		rt = &ar5416_11ng_table;
  90c197:	126af6        	l32r	a2, 8e6d70 <memcpy+0x20c>

const HAL_RATE_TABLE *
ar5416GetRateTable(struct ath_hal *ah, a_uint32_t mode)
{
	HAL_RATE_TABLE *rt;
	switch (mode) {
  90c19a:	78310a        	beq	a3, a8, 90c1a8 <ar5416GetRateTable+0x30>
  90c19d:	186a30        	l32r	a8, 8e6a60 <__udivsi3+0x14>
		break;
	case HAL_MODE_11NG:
		rt = &ar5416_11ng_table;
		break;
	case HAL_MODE_11NA:
		rt = &ar5416_11na_table;
  90c1a0:	126af5        	l32r	a2, 8e6d74 <memcpy+0x210>

const HAL_RATE_TABLE *
ar5416GetRateTable(struct ath_hal *ah, a_uint32_t mode)
{
	HAL_RATE_TABLE *rt;
	switch (mode) {
  90c1a3:	783101        	beq	a3, a8, 90c1a8 <ar5416GetRateTable+0x30>
		break;
	case HAL_MODE_11NA:
		rt = &ar5416_11na_table;
		break;
	default:
		return AH_NULL;
  90c1a6:	c020      	movi.n	a2, 0
	}

	return rt;
}
  90c1a8:	d10f      	retw.n
	...

0090c1ac <rcRateSetseries>:
static void
rcRateSetseries(const RATE_TABLE_11N *pRateTable ,
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
  90c1ac:	6c1004        	entry	a1, 32
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
  90c1af:	c0b0      	movi.n	a11, 0
  90c1b1:	c190      	movi.n	a9, 16
  90c1b3:	06b938        	moveqz	a9, a11, a6
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
  90c1b6:	05560a        	addx4	a6, a5, a5
  90c1b9:	056609        	addx2	a6, a6, a5
  90c1bc:	02660a        	addx4	a6, a6, a2
rcRateSetseries(const RATE_TABLE_11N *pRateTable ,
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
	series->tries = tries;
  90c1bf:	243401        	s8i	a4, a3, 1
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
  90c1c2:	286010        	l8ui	a8, a6, 16
  90c1c5:	c76d      	movi.n	a6, -3
  90c1c7:	068601        	and	a6, a8, a6
static void
rcRateSetseries(const RATE_TABLE_11N *pRateTable ,
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
  90c1ca:	2a0a01        	movi	a10, 1
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
  90c1cd:	68650b        	beqi	a6, 5, 90c1dc <rcRateSetseries+0x30>
  90c1d0:	260a09        	movi	a6, 9
  90c1d3:	768105        	beq	a8, a6, 90c1dc <rcRateSetseries+0x30>
  90c1d6:	268cf5        	addi	a6, a8, -11
  90c1d9:	06ba39        	movnez	a10, a11, a6
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
  90c1dc:	09a602        	or	a6, a10, a9
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
		(WLAN_RC_PHY_40(pRateTable->info[rix].phy) ? ATH_RC_CW40_FLAG : 0) | 
  90c1df:	298cfa        	addi	a9, a8, -6
  90c1e2:	090947        	extui	a9, a9, 0, 8
  90c1e5:	6e9219        	bltui	a9, 2, 90c202 <rcRateSetseries+0x56>
  90c1e8:	c0a0      	movi.n	a10, 0
  90c1ea:	2b8cf6        	addi	a11, a8, -10
  90c1ed:	c091      	movi.n	a9, 1
  90c1ef:	0b9a38        	moveqz	a10, a9, a11
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
  90c1f2:	ccac      	bnez.n	a10, 90c202 <rcRateSetseries+0x56>
  90c1f4:	c092      	movi.n	a9, 2
  90c1f6:	2b8cf5        	addi	a11, a8, -11
  90c1f9:	0ba939        	movnez	a9, a10, a11
  90c1fc:	600004        	j	90c204 <rcRateSetseries+0x58>
  90c1ff:	000000        	ill
  90c202:	c092      	movi.n	a9, 2
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
		(WLAN_RC_PHY_40(pRateTable->info[rix].phy) ? ATH_RC_CW40_FLAG : 0) | 
		(WLAN_RC_PHY_SGI(pRateTable->info[rix].phy) ? ATH_RC_HT40_SGI_FLAG : 0);
  90c204:	288cf8        	addi	a8, a8, -8
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
  90c207:	080847        	extui	a8, a8, 0, 8
  90c20a:	096902        	or	a9, a6, a9
  90c20d:	c0b0      	movi.n	a11, 0
  90c20f:	6f8402        	bgeui	a8, 4, 90c215 <rcRateSetseries+0x69>
  90c212:	2b0a04        	movi	a11, 4
  90c215:	0b9902        	or	a9, a9, a11
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
		(WLAN_RC_PHY_40(pRateTable->info[rix].phy) ? ATH_RC_CW40_FLAG : 0) | 
		(WLAN_RC_PHY_SGI(pRateTable->info[rix].phy) ? ATH_RC_HT40_SGI_FLAG : 0);
#ifdef MAGPIE_MERLIN
	if (stbc) {
  90c218:	8618      	l32i.n	a6, a1, 32
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
  90c21a:	293403        	s8i	a9, a3, 3
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
		(WLAN_RC_PHY_40(pRateTable->info[rix].phy) ? ATH_RC_CW40_FLAG : 0) | 
		(WLAN_RC_PHY_SGI(pRateTable->info[rix].phy) ? ATH_RC_HT40_SGI_FLAG : 0);
#ifdef MAGPIE_MERLIN
	if (stbc) {
  90c21d:	c96b      	beqz.n	a6, 90c23c <rcRateSetseries+0x90>
		/* For now, only single stream STBC is supported */
		if (pRateTable->info[rix].rateCode >= 0x80 && 
  90c21f:	05560a        	addx4	a6, a5, a5
  90c222:	056609        	addx2	a6, a6, a5
  90c225:	02660a        	addx4	a6, a6, a2
  90c228:	26601c        	l8ui	a6, a6, 28
  90c22b:	266c80        	addi	a6, a6, -128
  90c22e:	060647        	extui	a6, a6, 0, 8
  90c231:	6f6807        	bgeui	a6, 8, 90c23c <rcRateSetseries+0x90>
		    pRateTable->info[rix].rateCode <= 0x87)
		{
			series->flags |= ATH_RC_TX_STBC_FLAG;
  90c234:	c260      	movi.n	a6, 32
  90c236:	069902        	or	a9, a9, a6
  90c239:	293403        	s8i	a9, a3, 3
		}
	}
#endif
	series->rix = pRateTable->info[rix].baseIndex;
  90c23c:	05560a        	addx4	a6, a5, a5
  90c23f:	056509        	addx2	a5, a6, a5
  90c242:	02550a        	addx4	a5, a5, a2
  90c245:	225022        	l8ui	a2, a5, 34
  90c248:	223400        	s8i	a2, a3, 0
	series->max4msframelen = pRateTable->info[rix].max4msframelen;
  90c24b:	825a      	l32i.n	a2, a5, 40
  90c24d:	9231      	s32i.n	a2, a3, 4
	series->txrateKbps = pRateTable->info[rix].rateKbps;
  90c24f:	8255      	l32i.n	a2, a5, 20
  90c251:	9232      	s32i.n	a2, a3, 8

	/* If the hardware is capable of multiple transmit chains (chainmask is 3, 5 or 7), 
	 * then choose the number of transmit chains dynamically based on entries in the rate table.
	 */
#ifndef ATH_ENABLE_WLAN_FOR_K2
	if(chainmask == 7)
  90c253:	697705        	bnei	a7, 7, 90c25c <rcRateSetseries+0xb0>
		series->tx_chainmask = pRateTable->info[rix].txChainMask_3ch;
  90c256:	225027        	l8ui	a2, a5, 39
  90c259:	60000a        	j	90c267 <rcRateSetseries+0xbb>
	else if(chainmask == 1) 
  90c25c:	697104        	bnei	a7, 1, 90c264 <rcRateSetseries+0xb8>
		series->tx_chainmask = 1;
  90c25f:	273402        	s8i	a7, a3, 2
  90c262:	d10f      	retw.n
	else 
		series->tx_chainmask = pRateTable->info[rix].txChainMask_2ch;  /*Chainmask is 3 or 5*/
  90c264:	225026        	l8ui	a2, a5, 38
  90c267:	223402        	s8i	a2, a3, 2
  90c26a:	d10f      	retw.n

0090c26c <rcIsValidPhyRate>:

/* Return true only for single stream */

static A_BOOL
rcIsValidPhyRate(A_UINT32 phy, A_UINT32 capflag, A_BOOL ignoreCW)
{
  90c26c:	6c1004        	entry	a1, 32
  90c26f:	d820      	mov.n	a8, a2
	if (WLAN_RC_PHY_HT(phy) && !(capflag & WLAN_RC_HT_FLAG)) {
  90c271:	6e2404        	bltui	a2, 4, 90c279 <rcIsValidPhyRate+0xd>
		return FALSE;
  90c274:	c020      	movi.n	a2, 0
/* Return true only for single stream */

static A_BOOL
rcIsValidPhyRate(A_UINT32 phy, A_UINT32 capflag, A_BOOL ignoreCW)
{
	if (WLAN_RC_PHY_HT(phy) && !(capflag & WLAN_RC_HT_FLAG)) {
  90c276:	7c3764        	bbci	a3, 28, 90c2de <rcIsValidPhyRate+0x72>
		return FALSE;
	}

	if (WLAN_RC_PHY_DS(phy) && !(capflag & WLAN_RC_DS_FLAG))  {
  90c279:	c72d      	movi.n	a2, -3
  90c27b:	028201        	and	a2, a8, a2
  90c27e:	682504        	beqi	a2, 5, 90c286 <rcIsValidPhyRate+0x1a>
  90c281:	c099      	movi.n	a9, 9
  90c283:	792904        	bne	a2, a9, 90c28b <rcIsValidPhyRate+0x1f>

static A_BOOL
rcIsValidPhyRate(A_UINT32 phy, A_UINT32 capflag, A_BOOL ignoreCW)
{
	if (WLAN_RC_PHY_HT(phy) && !(capflag & WLAN_RC_HT_FLAG)) {
		return FALSE;
  90c286:	c020      	movi.n	a2, 0
	}

	if (WLAN_RC_PHY_DS(phy) && !(capflag & WLAN_RC_DS_FLAG))  {
  90c288:	7f3752        	bbci	a3, 31, 90c2de <rcIsValidPhyRate+0x72>
		return FALSE;
	}
	if (WLAN_RC_PHY_SGI(phy) && !(capflag & WLAN_RC_HT40_SGI_FLAG)) {
  90c28b:	228cf8        	addi	a2, a8, -8
  90c28e:	6f2404        	bgeui	a2, 4, 90c296 <rcIsValidPhyRate+0x2a>

static A_BOOL
rcIsValidPhyRate(A_UINT32 phy, A_UINT32 capflag, A_BOOL ignoreCW)
{
	if (WLAN_RC_PHY_HT(phy) && !(capflag & WLAN_RC_HT_FLAG)) {
		return FALSE;
  90c291:	c020      	movi.n	a2, 0
	}

	if (WLAN_RC_PHY_DS(phy) && !(capflag & WLAN_RC_DS_FLAG))  {
		return FALSE;
	}
	if (WLAN_RC_PHY_SGI(phy) && !(capflag & WLAN_RC_HT40_SGI_FLAG)) {
  90c293:	7d3747        	bbci	a3, 29, 90c2de <rcIsValidPhyRate+0x72>
		return FALSE;
	}

	if (!ignoreCW && WLAN_RC_PHY_HT(phy)) {
  90c296:	c020      	movi.n	a2, 0
  90c298:	c0a1      	movi.n	a10, 1
  90c29a:	d520      	mov.n	a5, a2
  90c29c:	04a538        	moveqz	a5, a10, a4
  90c29f:	d450      	mov.n	a4, a5
  90c2a1:	725135        	beq	a5, a2, 90c2da <rcIsValidPhyRate+0x6e>
  90c2a4:	6e8432        	bltui	a8, 4, 90c2da <rcIsValidPhyRate+0x6e>
		if (WLAN_RC_PHY_40(phy) && !(capflag & WLAN_RC_40_FLAG)) {
  90c2a7:	298cfa        	addi	a9, a8, -6
  90c2aa:	6e920c        	bltui	a9, 2, 90c2ba <rcIsValidPhyRate+0x4e>
  90c2ad:	2b8cf6        	addi	a11, a8, -10
  90c2b0:	0ba238        	moveqz	a2, a10, a11
  90c2b3:	cc23      	bnez.n	a2, 90c2ba <rcIsValidPhyRate+0x4e>
  90c2b5:	c02b      	movi.n	a2, 11
  90c2b7:	728904        	bne	a8, a2, 90c2bf <rcIsValidPhyRate+0x53>
			return FALSE;
  90c2ba:	c020      	movi.n	a2, 0
	if (WLAN_RC_PHY_SGI(phy) && !(capflag & WLAN_RC_HT40_SGI_FLAG)) {
		return FALSE;
	}

	if (!ignoreCW && WLAN_RC_PHY_HT(phy)) {
		if (WLAN_RC_PHY_40(phy) && !(capflag & WLAN_RC_40_FLAG)) {
  90c2bc:	7e371e        	bbci	a3, 30, 90c2de <rcIsValidPhyRate+0x72>
		if (!WLAN_RC_PHY_40(phy) && (capflag & WLAN_RC_40_FLAG)) {
			return FALSE;
		}
	}
    
	return TRUE;
  90c2bf:	c021      	movi.n	a2, 1
	if (!ignoreCW && WLAN_RC_PHY_HT(phy)) {
		if (WLAN_RC_PHY_40(phy) && !(capflag & WLAN_RC_40_FLAG)) {
			return FALSE;
		}

		if (!WLAN_RC_PHY_40(phy) && (capflag & WLAN_RC_40_FLAG)) {
  90c2c1:	6e9219        	bltui	a9, 2, 90c2de <rcIsValidPhyRate+0x72>
  90c2c4:	688916        	beqi	a8, 10, 90c2de <rcIsValidPhyRate+0x72>
  90c2c7:	c09b      	movi.n	a9, 11
  90c2c9:	798111        	beq	a8, a9, 90c2de <rcIsValidPhyRate+0x72>
  90c2cc:	002004        	ssr	a2
  90c2cf:	030319        	srl	a3, a3
  90c2d2:	023203        	xor	a2, a3, a2
  90c2d5:	020240        	extui	a2, a2, 0, 1
  90c2d8:	d10f      	retw.n
			return FALSE;
		}
	}
    
	return TRUE;
  90c2da:	c021      	movi.n	a2, 1
  90c2dc:	d10f      	retw.n
}
  90c2de:	d10f      	retw.n

0090c2e0 <rcUpdate_ht$isra$4>:
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  90c2e0:	6c1006        	entry	a1, 48
  90c2e3:	2c1119        	l16ui	a12, a1, 50
  90c2e6:	07094f        	extui	a9, a7, 0, 16
            A_BOOL Xretries, int retries, A_UINT8 curTxAnt, 
            A_UINT16 nFrames, A_UINT16 nBad)
{
	TX_RATE_CTRL *pRc;
	A_UINT32 nowMsec = A_MS_TICKGET();
  90c2e9:	c0a0      	movi.n	a10, 0
  90c2eb:	9912      	s32i.n	a9, a1, 8
  90c2ed:	9510      	s32i.n	a5, a1, 0
  90c2ef:	9c13      	s32i.n	a12, a1, 12
  90c2f1:	5bedf2        	call8	907abc <ath_hal_getuptime>
	A_UINT8 lastPer;
	int rate,count;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c2f4:	252248        	l32i	a5, a2, 0x120
  90c2f7:	2222c2        	l32i	a2, a2, 0x308
{
	TX_RATE_CTRL *pRc;
	A_UINT32 nowMsec = A_MS_TICKGET();
	A_UINT8 lastPer;
	int rate,count;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
  90c2fa:	233282        	l32i	a3, a3, 0x208
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c2fd:	05220a        	addx4	a2, a2, a5
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
            A_BOOL Xretries, int retries, A_UINT8 curTxAnt, 
            A_UINT16 nFrames, A_UINT16 nBad)
{
	TX_RATE_CTRL *pRc;
	A_UINT32 nowMsec = A_MS_TICKGET();
  90c300:	d8a0      	mov.n	a8, a10
	A_UINT8 lastPer;
	int rate,count;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c302:	8521      	l32i.n	a5, a2, 4
		100 * 7 / 8,    // 87.5
		100 * 8 / 9,    // 88.8
		100 * 9 / 10    // 90
	};

	if (!pSib)
  90c304:	8912      	l32i.n	a9, a1, 8
  90c306:	8b10      	l32i.n	a11, a1, 0
  90c308:	8c13      	l32i.n	a12, a1, 12
  90c30a:	6431ce        	beqz	a3, 90c4dc <rcUpdate_ht$isra$4+0x1fc>
	pRc = (TX_RATE_CTRL *)(pSib);

	ASSERT(retries >= 0 && retries < MAX_TX_RETRIES);
	ASSERT(txRate >= 0);
    
	if (txRate < 0) {
  90c30d:	6641cb        	bltz	a4, 90c4dc <rcUpdate_ht$isra$4+0x1fc>
		return;
	}

	lastPer = pRc->state[txRate].per;
  90c310:	a437      	add.n	a7, a3, a4
  90c312:	227000        	l8ui	a2, a7, 0

	if (Xretries) {
  90c315:	cbb0      	beqz.n	a11, 90c349 <rcUpdate_ht$isra$4+0x69>
		/* Update the PER. */
		if (Xretries == 1) {
  90c317:	69b111        	bnei	a11, 1, 90c32c <rcUpdate_ht$isra$4+0x4c>
			pRc->state[txRate].per += 30;
  90c31a:	292c1e        	addi	a9, a2, 30
  90c31d:	090947        	extui	a9, a9, 0, 8
			if (pRc->state[txRate].per > 100) {
  90c320:	260a64        	movi	a6, 100
  90c323:	79630d        	bltu	a6, a9, 90c334 <rcUpdate_ht$isra$4+0x54>
	lastPer = pRc->state[txRate].per;

	if (Xretries) {
		/* Update the PER. */
		if (Xretries == 1) {
			pRc->state[txRate].per += 30;
  90c326:	297400        	s8i	a9, a7, 0
  90c329:	60000a        	j	90c337 <rcUpdate_ht$isra$4+0x57>
			if (retries >= count) {
				retries = count - 1;
			}

			/* new_PER = 7/8*old_PER + 1/8*(currentPER) */
			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90c32c:	bc29      	addi.n	a9, a2, 12
  90c32e:	023614        	srli	a6, a2, 3
  90c331:	06960c        	sub	a6, a9, a6
  90c334:	267400        	s8i	a6, a7, 0
						   (pRc->state[txRate].per / 8) + ((100) / 8));
		}

		/* Xretries == 1 or 2 */

		if (pRc->probeRate == txRate)
  90c337:	26302f        	l8ui	a6, a3, 47
  90c33a:	746102        	beq	a6, a4, 90c340 <rcUpdate_ht$isra$4+0x60>
  90c33d:	6000c3        	j	90c404 <rcUpdate_ht$isra$4+0x124>
			pRc->probeRate = 0;
  90c340:	c060      	movi.n	a6, 0
  90c342:	26342f        	s8i	a6, a3, 47
  90c345:	6000bb        	j	90c404 <rcUpdate_ht$isra$4+0x124>
  90c348:	00c0a9        	excw
  90c34b:	0a6634        	min	a6, a6, a10
		count = sizeof(nRetry2PerLookup) / sizeof(nRetry2PerLookup[0]);
		if (retries >= count) {
			retries = count - 1;
		}

		if (nBad) {
  90c34e:	64c03f        	beqz	a12, 90c391 <rcUpdate_ht$isra$4+0xb1>
			 * that part is 100 * nBad / nFrames, and it contributes
			 * 100 * nBad / (nFrames * (retries+1)) to the above
			 * PER.  The expression below is a simplified version
			 * of the sum of these two terms.
			 */
			if (nFrames > 0)
  90c351:	649053        	beqz	a9, 90c3a8 <rcUpdate_ht$isra$4+0xc8>
				pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
  90c354:	096a28        	mull	a10, a6, a9
  90c357:	b16b      	addi.n	a11, a6, 1
  90c359:	acaa      	add.n	a10, a10, a12
  90c35b:	0aaa0a        	addx4	a10, a10, a10
  90c35e:	0b9b28        	mull	a11, a9, a11
			 * 100 * nBad / (nFrames * (retries+1)) to the above
			 * PER.  The expression below is a simplified version
			 * of the sum of these two terms.
			 */
			if (nFrames > 0)
				pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90c361:	023d14        	srli	a13, a2, 3
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
  90c364:	0aaa0a        	addx4	a10, a10, a10
			 * 100 * nBad / (nFrames * (retries+1)) to the above
			 * PER.  The expression below is a simplified version
			 * of the sum of these two terms.
			 */
			if (nFrames > 0)
				pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90c367:	0d2d0c        	sub	a13, a2, a13
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
  90c36a:	0eaa11        	slli	a10, a10, 2
  90c36d:	9810      	s32i.n	a8, a1, 0
  90c36f:	9912      	s32i.n	a9, a1, 8
  90c371:	9c13      	s32i.n	a12, a1, 12
  90c373:	9d11      	s32i.n	a13, a1, 4
  90c375:	5b6988        	call8	8e6998 <__divsi3>
  90c378:	b7ab      	addi.n	a11, a10, 7
			 * 100 * nBad / (nFrames * (retries+1)) to the above
			 * PER.  The expression below is a simplified version
			 * of the sum of these two terms.
			 */
			if (nFrames > 0)
				pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90c37a:	8d11      	l32i.n	a13, a1, 4
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
  90c37c:	0aba3a        	movltz	a10, a11, a10
  90c37f:	0a3a12        	srai	a10, a10, 3
			 * 100 * nBad / (nFrames * (retries+1)) to the above
			 * PER.  The expression below is a simplified version
			 * of the sum of these two terms.
			 */
			if (nFrames > 0)
				pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90c382:	aadd      	add.n	a13, a13, a10
  90c384:	2d7400        	s8i	a13, a7, 0
  90c387:	8810      	l32i.n	a8, a1, 0
  90c389:	8912      	l32i.n	a9, a1, 8
  90c38b:	8c13      	l32i.n	a12, a1, 12
  90c38d:	600017        	j	90c3a8 <rcUpdate_ht$isra$4+0xc8>
  90c390:	001a6a        	excw
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
		} else {
			/* new_PER = 7/8*old_PER + 1/8*(currentPER) */

			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
				   (pRc->state[txRate].per / 8) + (nRetry2PerLookup[retries] / 8));
  90c393:	f8          	.byte 0xf8
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
		} else {
			/* new_PER = 7/8*old_PER + 1/8*(currentPER) */

			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90c394:	023b14        	srli	a11, a2, 3
				   (pRc->state[txRate].per / 8) + (nRetry2PerLookup[retries] / 8));
  90c397:	0a6a0a        	addx4	a10, a6, a10
  90c39a:	8aa0      	l32i.n	a10, a10, 0
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
		} else {
			/* new_PER = 7/8*old_PER + 1/8*(currentPER) */

			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90c39c:	0b2b0c        	sub	a11, a2, a11
				   (pRc->state[txRate].per / 8) + (nRetry2PerLookup[retries] / 8));
  90c39f:	0a3a14        	srli	a10, a10, 3
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
		} else {
			/* new_PER = 7/8*old_PER + 1/8*(currentPER) */

			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90c3a2:	0aba08        	add	a10, a11, a10
  90c3a5:	2a7400        	s8i	a10, a7, 0
		/*
		 * If we got at most one retry then increase the max rate if
		 * this was a probe.  Otherwise, ignore the probe.
		 */

		if (pRc->probeRate && pRc->probeRate == txRate) {
  90c3a8:	27302f        	l8ui	a7, a3, 47
  90c3ab:	cb79      	beqz.n	a7, 90c3e8 <rcUpdate_ht$isra$4+0x108>
  90c3ad:	747937        	bne	a7, a4, 90c3e8 <rcUpdate_ht$isra$4+0x108>
			if (retries > 0 || 2 * nBad > nFrames) {
  90c3b0:	6b6105        	bgei	a6, 1, 90c3b9 <rcUpdate_ht$isra$4+0xd9>
  90c3b3:	0fcc11        	slli	a12, a12, 1
  90c3b6:	7c9a07        	bge	a9, a12, 90c3c1 <rcUpdate_ht$isra$4+0xe1>
				 * any retries means the probe failed.  Also,
				 * if the attempt worked, but more than half
				 * the subframes were bad then also consider
				 * the probe a failure.
				 */
				pRc->probeRate = 0;
  90c3b9:	c070      	movi.n	a7, 0
  90c3bb:	27342f        	s8i	a7, a3, 47
  90c3be:	600026        	j	90c3e8 <rcUpdate_ht$isra$4+0x108>
			} else {
				pRc->rateMaxPhy = pRc->probeRate;
  90c3c1:	24346d        	s8i	a4, a3, 109

				if (pRc->state[pRc->probeRate].per > 30) {
  90c3c4:	a436      	add.n	a6, a3, a4
  90c3c6:	276000        	l8ui	a7, a6, 0
  90c3c9:	c19e      	movi.n	a9, 30
  90c3cb:	779b05        	bgeu	a9, a7, 90c3d4 <rcUpdate_ht$isra$4+0xf4>
					pRc->state[pRc->probeRate].per = 20;
  90c3ce:	270a14        	movi	a7, 20
  90c3d1:	276400        	s8i	a7, a6, 0
				}

				pRc->probeRate = 0;
  90c3d4:	c060      	movi.n	a6, 0
  90c3d6:	26342f        	s8i	a6, a3, 47
				/*
				 * Since this probe succeeded, we allow the next probe
				 * twice as soon.  This allows the maxRate to move up
				 * faster if the probes are succesful.
				 */
				pRc->probeTime = nowMsec - pRateTable->probeInterval / 2;
  90c3d9:	265001        	l8ui	a6, a5, 1
  90c3dc:	061614        	srli	a6, a6, 1
  90c3df:	06860c        	sub	a6, a8, a6
  90c3e2:	963d      	s32i.n	a6, a3, 52
  90c3e4:	600008        	j	90c3f0 <rcUpdate_ht$isra$4+0x110>
  90c3e7:	006a61        	excw
			}
		}

		if (retries > 0) {
  90c3ea:	04c060        	excw
			 *
			 * Later: if rssiAck is close to pRc->state[txRate].rssiThres
			 * and we see lots of retries, then we could increase
			 * pRc->state[txRate].rssiThres.
			 */
			pRc->hwMaxRetryPktCnt = 0;
  90c3ed:	600010        	j	90c401 <rcUpdate_ht$isra$4+0x121>
		} else {
			/*
			 * It worked with no retries.  First ignore bogus (small)
			 * rssiAck values.
			 */
			if (txRate == pRc->rateMaxPhy && pRc->hwMaxRetryPktCnt < 255) {
  90c3f0:	26306d        	l8ui	a6, a3, 109
  90c3f3:	76490d        	bne	a4, a6, 90c404 <rcUpdate_ht$isra$4+0x124>
  90c3f6:	263038        	l8ui	a6, a3, 56
  90c3f9:	270aff        	movi	a7, 255
  90c3fc:	776104        	beq	a6, a7, 90c404 <rcUpdate_ht$isra$4+0x124>
				pRc->hwMaxRetryPktCnt++;
  90c3ff:	b166      	addi.n	a6, a6, 1
  90c401:	263438        	s8i	a6, a3, 56
    
	/*
	 * If this rate looks bad (high PER) then stop using it for
	 * a while (except if we are probing).
	 */
	if (pRc->state[txRate].per >= 55 && txRate > 0 &&
  90c404:	a436      	add.n	a6, a3, a4
  90c406:	296000        	l8ui	a9, a6, 0
  90c409:	c366      	movi.n	a6, 54
  90c40b:	796b4a        	bgeu	a6, a9, 90c459 <rcUpdate_ht$isra$4+0x179>
  90c40e:	644047        	beqz	a4, 90c459 <rcUpdate_ht$isra$4+0x179>
	    pRateTable->info[txRate].rateKbps <= 
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  90c411:	26306d        	l8ui	a6, a3, 109
	/*
	 * If this rate looks bad (high PER) then stop using it for
	 * a while (except if we are probing).
	 */
	if (pRc->state[txRate].per >= 55 && txRate > 0 &&
	    pRateTable->info[txRate].rateKbps <= 
  90c414:	04470a        	addx4	a7, a4, a4
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  90c417:	066a0a        	addx4	a10, a6, a6
	/*
	 * If this rate looks bad (high PER) then stop using it for
	 * a while (except if we are probing).
	 */
	if (pRc->state[txRate].per >= 55 && txRate > 0 &&
	    pRateTable->info[txRate].rateKbps <= 
  90c41a:	047709        	addx2	a7, a7, a4
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  90c41d:	06a609        	addx2	a6, a10, a6
	/*
	 * If this rate looks bad (high PER) then stop using it for
	 * a while (except if we are probing).
	 */
	if (pRc->state[txRate].per >= 55 && txRate > 0 &&
	    pRateTable->info[txRate].rateKbps <= 
  90c420:	05770a        	addx4	a7, a7, a5
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  90c423:	05660a        	addx4	a6, a6, a5
    
	/*
	 * If this rate looks bad (high PER) then stop using it for
	 * a while (except if we are probing).
	 */
	if (pRc->state[txRate].per >= 55 && txRate > 0 &&
  90c426:	8775      	l32i.n	a7, a7, 20
  90c428:	8665      	l32i.n	a6, a6, 20
  90c42a:	77632b        	bltu	a6, a7, 90c459 <rcUpdate_ht$isra$4+0x179>
  90c42d:	040c47        	extui	a12, a4, 0, 8
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  90c430:	2a3039        	l8ui	a10, a3, 57
  90c433:	d730      	mov.n	a7, a3
  90c435:	c061      	movi.n	a6, 1
  90c437:	600017        	j	90c452 <rcUpdate_ht$isra$4+0x172>
  90c43a:	00002d        	excw
		if (pRc->validRateIndex[i] == curValidTxRate) {
  90c43d:	703bb1        	bgeu	a3, a0, 90c3f2 <rcUpdate_ht$isra$4+0x112>
  90c440:	66b177        	bltz	a11, 90c5bb <rcSibUpdate_ht$constprop$6+0xdb>
  90c443:	7cd90b        	bne	a13, a12, 90c452 <rcUpdate_ht$isra$4+0x172>
			*pNextIndex = pRc->validRateIndex[i-1];
  90c446:	ab3b      	add.n	a11, a3, a11
  90c448:	26b039        	l8ui	a6, a11, 57
  90c44b:	26346d        	s8i	a6, a3, 109
  90c44e:	600005        	j	90c457 <rcUpdate_ht$isra$4+0x177>
  90c451:	00db60        	excw
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  90c454:	7a62e4        	blt	a6, a10, 90c43c <rcUpdate_ht$isra$4+0x15c>
	{
		rcGetNextLowerValidTxRate(pRateTable, pRc, (A_UINT8) txRate, 
					  &pRc->rateMaxPhy);

		/* Don't probe for a little while. */
		pRc->probeTime = nowMsec;
  90c457:	983d      	s32i.n	a8, a3, 52
	}

	/* Make sure the rates below this have lower PER */
	/* Monotonicity is kept only for rates below the current rate. */
	if (pRc->state[txRate].per < lastPer) {
  90c459:	729307        	bltu	a9, a2, 90c464 <rcUpdate_ht$isra$4+0x184>
			}
		}
	}

	/* Maintain monotonicity for rates above the current rate*/
	for (rate = txRate; rate < pRc->rateTableSize - 1; rate++) {
  90c45c:	26302e        	l8ui	a6, a3, 46
  90c45f:	b069      	addi.n	a9, a6, -1
  90c461:	60004b        	j	90c4b0 <rcUpdate_ht$isra$4+0x1d0>
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  90c464:	04490a        	addx4	a9, a4, a4
  90c467:	049909        	addx2	a9, a9, a4
  90c46a:	05990a        	addx4	a9, a9, a5
	}

	/* Make sure the rates below this have lower PER */
	/* Monotonicity is kept only for rates below the current rate. */
	if (pRc->state[txRate].per < lastPer) {
		for (rate = txRate - 1; rate >= 0; rate--) {
  90c46d:	b042      	addi.n	a2, a4, -1
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  90c46f:	c060      	movi.n	a6, 0

	/* Make sure the rates below this have lower PER */
	/* Monotonicity is kept only for rates below the current rate. */
	if (pRc->state[txRate].per < lastPer) {
		for (rate = txRate - 1; rate >= 0; rate--) {
			if (pRateTable->info[rate].phy != pRateTable->info[txRate].phy) {
  90c471:	db90      	mov.n	a11, a9
  90c473:	600020        	j	90c497 <rcUpdate_ht$isra$4+0x1b7>
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  90c476:	a697      	add.n	a7, a9, a6
  90c478:	277ce4        	addi	a7, a7, -28

	/* Make sure the rates below this have lower PER */
	/* Monotonicity is kept only for rates below the current rate. */
	if (pRc->state[txRate].per < lastPer) {
		for (rate = txRate - 1; rate >= 0; rate--) {
			if (pRateTable->info[rate].phy != pRateTable->info[txRate].phy) {
  90c47b:	2a7000        	l8ui	a10, a7, 0
  90c47e:	27b010        	l8ui	a7, a11, 16
  90c481:	77a9d7        	bne	a10, a7, 90c45c <rcUpdate_ht$isra$4+0x17c>
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  90c484:	a237      	add.n	a7, a3, a2
		for (rate = txRate - 1; rate >= 0; rate--) {
			if (pRateTable->info[rate].phy != pRateTable->info[txRate].phy) {
				break;
			}

			if (pRc->state[rate].per > pRc->state[rate+1].per) {
  90c486:	2a7001        	l8ui	a10, a7, 1
  90c489:	2c7000        	l8ui	a12, a7, 0
  90c48c:	7cab02        	bgeu	a10, a12, 90c492 <rcUpdate_ht$isra$4+0x1b2>
				pRc->state[rate].per = pRc->state[rate+1].per;
  90c48f:	2a7400        	s8i	a10, a7, 0
	}

	/* Make sure the rates below this have lower PER */
	/* Monotonicity is kept only for rates below the current rate. */
	if (pRc->state[txRate].per < lastPer) {
		for (rate = txRate - 1; rate >= 0; rate--) {
  90c492:	b022      	addi.n	a2, a2, -1
  90c494:	266cd4        	addi	a6, a6, -44
  90c497:	6920db        	bnei	a2, -1, 90c476 <rcUpdate_ht$isra$4+0x196>
  90c49a:	63ffbe        	j	90c45c <rcUpdate_ht$isra$4+0x17c>
  90c49d:	00b144        	extui	a1, a0, 11, 5
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  90c4a0:	a432      	add.n	a2, a3, a4
  90c4a2:	b027      	addi.n	a7, a2, -1
		}
	}

	/* Maintain monotonicity for rates above the current rate*/
	for (rate = txRate; rate < pRc->rateTableSize - 1; rate++) {
		if (pRc->state[rate+1].per < pRc->state[rate].per) {
  90c4a4:	277000        	l8ui	a7, a7, 0
  90c4a7:	2a2000        	l8ui	a10, a2, 0
  90c4aa:	77ab02        	bgeu	a10, a7, 90c4b0 <rcUpdate_ht$isra$4+0x1d0>
			pRc->state[rate+1].per = pRc->state[rate].per;
  90c4ad:	272400        	s8i	a7, a2, 0
			}
		}
	}

	/* Maintain monotonicity for rates above the current rate*/
	for (rate = txRate; rate < pRc->rateTableSize - 1; rate++) {
  90c4b0:	7942ea        	blt	a4, a9, 90c49e <rcUpdate_ht$isra$4+0x1be>
			pRc->state[rate+1].per = pRc->state[rate].per;
		}
	}

	/* Every so often, we reduce the thresholds and PER (different for CCK and OFDM). */
	if (nowMsec - pRc->perDownTime >= pRateTable->rssiReduceInterval) {
  90c4b3:	24321a        	l32i	a4, a3, 104
  90c4b6:	225002        	l8ui	a2, a5, 2
  90c4b9:	04840c        	sub	a4, a8, a4
  90c4bc:	72431c        	bltu	a4, a2, 90c4dc <rcUpdate_ht$isra$4+0x1fc>
  90c4bf:	d230      	mov.n	a2, a3
  90c4c1:	60000e        	j	90c4d3 <rcUpdate_ht$isra$4+0x1f3>
  90c4c4:	002420        	excw
		for (rate = 0; rate < pRc->rateTableSize; rate++) {
			pRc->state[rate].per = 7*pRc->state[rate].per/8;
  90c4c7:	000444        	extui	a4, a0, 0, 5
  90c4ca:	0f0434        	min	a4, a0, a15
  90c4cd:	122424        	l32r	a2, 8d5560 <_bss_end+0x3c2650>
  90c4d0:	00b122        	excw
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  90c4d3:	03240c        	sub	a4, a2, a3
		}
	}

	/* Every so often, we reduce the thresholds and PER (different for CCK and OFDM). */
	if (nowMsec - pRc->perDownTime >= pRateTable->rssiReduceInterval) {
		for (rate = 0; rate < pRc->rateTableSize; rate++) {
  90c4d6:	7642eb        	blt	a4, a6, 90c4c5 <rcUpdate_ht$isra$4+0x1e5>
			pRc->state[rate].per = 7*pRc->state[rate].per/8;
		}

		pRc->perDownTime = nowMsec;
  90c4d9:	28361a        	s32i	a8, a3, 104
  90c4dc:	d10f      	retw.n
	...

0090c4e0 <rcSibUpdate_ht$constprop$6>:
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90c4e0:	6c1052        	entry	a1, 0x290
  90c4e3:	d830      	mov.n	a8, a3
  90c4e5:	d350      	mov.n	a3, a5
	TX_RATE_CTRL *pRc = (TX_RATE_CTRL *)(pSib);
	PHY_STATE_CTRL mPhyCtrlState;  

	A_UINT8 i, j, k, hi = 0, htHi = 0;

	pRateTable = (RATE_TABLE_11N*)asc->hwRateTable[sc->sc_curmode];
  90c4e7:	252248        	l32i	a5, a2, 0x120
  90c4ea:	2222c2        	l32i	a2, a2, 0x308
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
	       A_UINT32 capflag, A_BOOL keepState, struct ieee80211_rate  *pRateSet)
{
	RATE_TABLE_11N *pRateTable = 0;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
  90c4ed:	268282        	l32i	a6, a8, 0x208
	TX_RATE_CTRL *pRc = (TX_RATE_CTRL *)(pSib);
	PHY_STATE_CTRL mPhyCtrlState;  

	A_UINT8 i, j, k, hi = 0, htHi = 0;

	pRateTable = (RATE_TABLE_11N*)asc->hwRateTable[sc->sc_curmode];
  90c4f0:	05220a        	addx4	a2, a2, a5

	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;
  90c4f3:	c25e      	movi.n	a5, 46
	TX_RATE_CTRL *pRc = (TX_RATE_CTRL *)(pSib);
	PHY_STATE_CTRL mPhyCtrlState;  

	A_UINT8 i, j, k, hi = 0, htHi = 0;

	pRateTable = (RATE_TABLE_11N*)asc->hwRateTable[sc->sc_curmode];
  90c4f5:	8221      	l32i.n	a2, a2, 4

	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;
  90c4f7:	25642e        	s8i	a5, a6, 46
  90c4fa:	c050      	movi.n	a5, 0

	/* Initialize thresholds according to the global rate table */
	for (i = 0 ; (i < pRc->rateTableSize) && (!keepState); i++) {
		pRc->state[i].per       = 0;
  90c4fc:	da50      	mov.n	a10, a5

	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;

	/* Initialize thresholds according to the global rate table */
	for (i = 0 ; (i < pRc->rateTableSize) && (!keepState); i++) {
  90c4fe:	c27e      	movi.n	a7, 46
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90c500:	a569      	add.n	a9, a6, a5
	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;

	/* Initialize thresholds according to the global rate table */
	for (i = 0 ; (i < pRc->rateTableSize) && (!keepState); i++) {
		pRc->state[i].per       = 0;
  90c502:	2a9400        	s8i	a10, a9, 0
  90c505:	b155      	addi.n	a5, a5, 1

	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;

	/* Initialize thresholds according to the global rate table */
	for (i = 0 ; (i < pRc->rateTableSize) && (!keepState); i++) {
  90c507:	7759f5        	bne	a5, a7, 90c500 <rcSibUpdate_ht$constprop$6+0x20>
  90c50a:	d760      	mov.n	a7, a6
rcInitValidTxMask(TX_RATE_CTRL *pRc)
{
	A_UINT8 i;

	for (i = 0; i < pRc->rateTableSize; i++) {
		pRc->validRateIndex[i] = FALSE;
  90c50c:	c090      	movi.n	a9, 0
  90c50e:	b055      	addi.n	a5, a5, -1
  90c510:	29743a        	s8i	a9, a7, 58
  90c513:	050547        	extui	a5, a5, 0, 8
  90c516:	b177      	addi.n	a7, a7, 1
static void
rcInitValidTxMask(TX_RATE_CTRL *pRc)
{
	A_UINT8 i;

	for (i = 0; i < pRc->rateTableSize; i++) {
  90c518:	655ff2        	bnez	a5, 90c50e <rcSibUpdate_ht$constprop$6+0x2e>
  90c51b:	211692        	s32i	a1, a1, 0x248
  90c51e:	d910      	mov.n	a9, a1
	/* Determine the valid rates */
	rcInitValidTxMask(pRc);

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < MAX_TX_RATE_TBL; j++) {
			mPhyCtrlState.validPhyRateIndex[i][j] = 0;
  90c520:	da50      	mov.n	a10, a5

	/* Determine the valid rates */
	rcInitValidTxMask(pRc);

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < MAX_TX_RATE_TBL; j++) {
  90c522:	c2be      	movi.n	a11, 46
			mPhyCtrlState.validPhyRateIndex[i][j] = 0;
  90c524:	dc50      	mov.n	a12, a5
  90c526:	600016        	j	90c540 <rcSibUpdate_ht$constprop$6+0x60>
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90c529:	a79d      	add.n	a13, a9, a7
	/* Determine the valid rates */
	rcInitValidTxMask(pRc);

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < MAX_TX_RATE_TBL; j++) {
			mPhyCtrlState.validPhyRateIndex[i][j] = 0;
  90c52b:	2ad40c        	s8i	a10, a13, 12
  90c52e:	b177      	addi.n	a7, a7, 1

	/* Determine the valid rates */
	rcInitValidTxMask(pRc);

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < MAX_TX_RATE_TBL; j++) {
  90c530:	7b79f5        	bne	a7, a11, 90c529 <rcSibUpdate_ht$constprop$6+0x49>
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90c533:	a517      	add.n	a7, a1, a5

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < MAX_TX_RATE_TBL; j++) {
			mPhyCtrlState.validPhyRateIndex[i][j] = 0;
		}   
		mPhyCtrlState.validPhyRateCount[i] = 0;
  90c535:	2c7400        	s8i	a12, a7, 0
  90c538:	b155      	addi.n	a5, a5, 1
  90c53a:	299c2e        	addi	a9, a9, 46
	}

	/* Determine the valid rates */
	rcInitValidTxMask(pRc);

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
  90c53d:	685a04        	beqi	a5, 12, 90c545 <rcSibUpdate_ht$constprop$6+0x65>

	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;

	/* Initialize thresholds according to the global rate table */
	for (i = 0 ; (i < pRc->rateTableSize) && (!keepState); i++) {
  90c540:	c070      	movi.n	a7, 0
  90c542:	63ffe3        	j	90c529 <rcSibUpdate_ht$constprop$6+0x49>
			mPhyCtrlState.validPhyRateIndex[i][j] = 0;
		}   
		mPhyCtrlState.validPhyRateCount[i] = 0;
	}

	pRc->rcPhyMode = (capflag & WLAN_RC_40_FLAG);
  90c545:	c052      	movi.n	a5, 2
  90c547:	054901        	and	a9, a4, a5
  90c54a:	040d40        	extui	a13, a4, 0, 1
  90c54d:	291690        	s32i	a9, a1, 0x240
  90c550:	29646c        	s8i	a9, a6, 108
  90c553:	2d1693        	s32i	a13, a1, 0x24c

	if (pRateSet == NULL || !pRateSet->rates.rs_nrates) {
  90c556:	c834      	beqz.n	a3, 90c55e <rcSibUpdate_ht$constprop$6+0x7e>
  90c558:	273000        	l8ui	a7, a3, 0
  90c55b:	657071        	bnez	a7, 90c5d0 <rcSibUpdate_ht$constprop$6+0xf0>
static A_UINT8 rcSibInitValidRates(const RATE_TABLE_11N *pRateTable,
				   TX_RATE_CTRL *pRc,
				   A_UINT32 capflag,
				   PHY_STATE_CTRL *pPhyStateCtrl)
{
	A_UINT8 i, hi = 0;
  90c55e:	c050      	movi.n	a5, 0
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	for (i = 0; i < pRateTable->rateCount; i++) {
  90c560:	d350      	mov.n	a3, a5
  90c562:	600060        	j	90c5c6 <rcSibUpdate_ht$constprop$6+0xe6>
  90c565:	0e3711        	slli	a7, a3, 2
		if (singleStream) {
			valid = pRateTable->info[i].validSingleStream;
  90c568:	a377      	add.n	a7, a7, a3
	A_UINT8 i, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	for (i = 0; i < pRateTable->rateCount; i++) {
		if (singleStream) {
  90c56a:	281293        	l32i	a8, a1, 0x24c
			valid = pRateTable->info[i].validSingleStream;
  90c56d:	037709        	addx2	a7, a7, a3
  90c570:	02770a        	addx4	a7, a7, a2
	A_UINT8 i, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	for (i = 0; i < pRateTable->rateCount; i++) {
		if (singleStream) {
  90c573:	cc85      	bnez.n	a8, 90c57c <rcSibUpdate_ht$constprop$6+0x9c>
			valid = pRateTable->info[i].validSingleStream;
  90c575:	28700b        	l8ui	a8, a7, 11
  90c578:	600003        	j	90c57f <rcSibUpdate_ht$constprop$6+0x9f>
  90c57b:	002870        	excw
		} else {
			valid = pRateTable->info[i].valid;
  90c57e:	076981        	excw
		}
            
		if (valid == TRUE) {
  90c581:	3e0337        	excw
			A_UINT32 phy = pRateTable->info[i].phy;
  90c584:	0a0377        	excw
  90c587:	090277        	excw
  90c58a:	0a2770        	excw
  90c58d:	10044b        	l32r	a0, 8cd6bc <_bss_end+0x3ba7ac>

			if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
  90c590:	02da70        	excw
  90c593:	2c0a00        	movi	a12, 0
  90c596:	281699        	s32i	a8, a1, 0x264
  90c599:	5bff34        	call8	90c26c <rcIsValidPhyRate>
  90c59c:	281299        	l32i	a8, a1, 0x264
  90c59f:	c9ae      	beqz.n	a10, 90c5c1 <rcSibUpdate_ht$constprop$6+0xe1>
				continue;

			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = i;
  90c5a1:	a719      	add.n	a9, a1, a7
  90c5a3:	2a9000        	l8ui	a10, a9, 0
  90c5a6:	077b09        	addx2	a11, a7, a7
  90c5a9:	07b70f        	subx8	a7, a11, a7
  90c5ac:	0a7709        	addx2	a7, a7, a10
  90c5af:	a717      	add.n	a7, a1, a7
  90c5b1:	23740c        	s8i	a3, a7, 12
			pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c5b4:	b1aa      	addi.n	a10, a10, 1

static INLINE void
rcSetValidTxMask(TX_RATE_CTRL *pRc, A_UINT8 index, A_BOOL validTxRate)
{
	ASSERT(index < pRc->rateTableSize);
	pRc->validRateIndex[index] = validTxRate ? TRUE : FALSE;
  90c5b6:	a367      	add.n	a7, a6, a3

			if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
				continue;

			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = i;
			pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c5b8:	2a9400        	s8i	a10, a9, 0

static INLINE void
rcSetValidTxMask(TX_RATE_CTRL *pRc, A_UINT8 index, A_BOOL validTxRate)
{
	ASSERT(index < pRc->rateTableSize);
	pRc->validRateIndex[index] = validTxRate ? TRUE : FALSE;
  90c5bb:	28743a        	s8i	a8, a7, 58
			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = i;
			pPhyStateCtrl->validPhyRateCount[phy] += 1;

			rcSetValidTxMask(pRc, i, TRUE);

			hi = A_MAX(hi, i);
  90c5be:	035537        	maxu	a5, a5, a3
{
	A_UINT8 i, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	for (i = 0; i < pRateTable->rateCount; i++) {
  90c5c1:	b133      	addi.n	a3, a3, 1
  90c5c3:	030347        	extui	a3, a3, 0, 8
  90c5c6:	272000        	l8ui	a7, a2, 0
  90c5c9:	773398        	bltu	a3, a7, 90c565 <rcSibUpdate_ht$constprop$6+0x85>
  90c5cc:	6001de        	j	90c7ae <rcSibUpdate_ht$constprop$6+0x2ce>
  90c5cf:	002a12        	srai	a10, a0, 2
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
			     (pRateTable->info[j].dot11Rate & 0x7F))
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) == 
  90c5d2:	90c0      	s32i.n	a0, a12, 0
                   struct ieee80211_rateset *pRateSet,
		   A_UINT32 capflag,
		   struct ath_node_target *an,
		   PHY_STATE_CTRL *pPhyStateCtrl)
{
	A_UINT8 i, j, hi = 0;
  90c5d4:	90c0      	s32i.n	a0, a12, 0
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
			     (pRateTable->info[j].dot11Rate & 0x7F))
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) == 
  90c5d6:	e8          	.byte 0xe8
  90c5d7:	c0d4      	movi.n	a13, 4
                   struct ieee80211_rateset *pRateSet,
		   A_UINT32 capflag,
		   struct ath_node_target *an,
		   PHY_STATE_CTRL *pPhyStateCtrl)
{
	A_UINT8 i, j, hi = 0;
  90c5d9:	291691        	s32i	a9, a1, 0x244
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
			     (pRateTable->info[j].dot11Rate & 0x7F))
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) == 
  90c5dc:	0e4e01        	and	a14, a4, a14
  90c5df:	0a5d38        	moveqz	a13, a5, a10
  90c5e2:	6000c3        	j	90c6a9 <rcSibUpdate_ht$constprop$6+0x1c9>
		for (j = 0; j < pRateTable->rateCount; j++) {
			A_UINT32 phy = pRateTable->info[j].phy;
#ifdef MAGPIE_MERLIN
			struct atheros_node *pSib = ATH_NODE_ATHEROS(an);

			if (pSib->stbc) {
  90c5e5:	2b8282        	l32i	a11, a8, 0x208
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
			A_UINT32 phy = pRateTable->info[j].phy;
  90c5e8:	077a0a        	addx4	a10, a7, a7
  90c5eb:	07aa09        	addx2	a10, a10, a7
#ifdef MAGPIE_MERLIN
			struct atheros_node *pSib = ATH_NODE_ATHEROS(an);

			if (pSib->stbc) {
  90c5ee:	2bb21d        	l32i	a11, a11, 116
  90c5f1:	1c6ac9        	l32r	a12, 8e7118 <memset+0x2d0>
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
			A_UINT32 phy = pRateTable->info[j].phy;
  90c5f4:	02aa0a        	addx4	a10, a10, a2
  90c5f7:	25a010        	l8ui	a5, a10, 16
#ifdef MAGPIE_MERLIN
			struct atheros_node *pSib = ATH_NODE_ATHEROS(an);

			if (pSib->stbc) {
  90c5fa:	7cb006        	bnone	a11, a12, 90c604 <rcSibUpdate_ht$constprop$6+0x124>
				valid = pRateTable->info[j].validSTBC;
  90c5fd:	8ba3      	l32i.n	a11, a10, 12
  90c5ff:	60000d        	j	90c610 <rcSibUpdate_ht$constprop$6+0x130>
  90c602:	00002b        	mulsh	a0, a0, a0
			} else if (singleStream) {
  90c605:	1293cc        	l32r	a2, 8f1538 <memset+0xa6f0>
  90c608:	b38b      	addi.n	a11, a8, 3
#else
			if (singleStream) {
#endif            
				valid = pRateTable->info[j].validSingleStream;
  90c60a:	a260      	add.n	a0, a6, a2
  90c60c:	00018b        	excw
			} else {
				valid = pRateTable->info[j].valid;
  90c60f:	a107      	add.n	a7, a0, a1
			 * We allow a rate only if its valid and the capflag matches one of
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
			     (pRateTable->info[j].dot11Rate & 0x7F))
  90c611:	7a0a07        	bge	a0, a10, 90c61c <rcSibUpdate_ht$constprop$6+0x13c>
  90c614:	aa09      	add.n	a9, a0, a10
  90c616:	02aa0a        	addx4	a10, a10, a2
			/*
			 * We allow a rate only if its valid and the capflag matches one of
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
  90c619:	2cf000        	l8ui	a12, a15, 0
  90c61c:	2aa01e        	l8ui	a10, a10, 30
  90c61f:	0aca03        	xor	a10, a12, a10
  90c622:	0a0a46        	extui	a10, a10, 0, 7
  90c625:	65a064        	bnez	a10, 90c68d <rcSibUpdate_ht$constprop$6+0x1ad>
			     (pRateTable->info[j].dot11Rate & 0x7F))
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) == 
  90c628:	c0a1      	movi.n	a10, 1
  90c62a:	0eda39        	movnez	a10, a13, a14
  90c62d:	0bab01        	and	a11, a10, a11
  90c630:	c0a1      	movi.n	a10, 1
  90c632:	0eda39        	movnez	a10, a13, a14
  90c635:	7ab954        	bne	a11, a10, 90c68d <rcSibUpdate_ht$constprop$6+0x1ad>
				WLAN_RC_CAP_MODE(capflag)) && !WLAN_RC_PHY_HT(phy)) {
  90c638:	6f5451        	bgeui	a5, 4, 90c68d <rcSibUpdate_ht$constprop$6+0x1ad>
				if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
  90c63b:	da50      	mov.n	a10, a5
  90c63d:	db40      	mov.n	a11, a4
  90c63f:	2c0a00        	movi	a12, 0
  90c642:	281699        	s32i	a8, a1, 0x264
  90c645:	291696        	s32i	a9, a1, 0x258
  90c648:	2d1695        	s32i	a13, a1, 0x254
  90c64b:	2e1698        	s32i	a14, a1, 0x260
  90c64e:	2f1697        	s32i	a15, a1, 0x25c
  90c651:	5bff06        	call8	90c26c <rcIsValidPhyRate>
  90c654:	281299        	l32i	a8, a1, 0x264
  90c657:	291296        	l32i	a9, a1, 0x258
  90c65a:	2d1295        	l32i	a13, a1, 0x254
  90c65d:	2e1298        	l32i	a14, a1, 0x260
  90c660:	2f1297        	l32i	a15, a1, 0x25c
  90c663:	caa6      	beqz.n	a10, 90c68d <rcSibUpdate_ht$constprop$6+0x1ad>
					continue;

				pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
  90c665:	a51a      	add.n	a10, a1, a5
  90c667:	2ba000        	l8ui	a11, a10, 0
  90c66a:	055c09        	addx2	a12, a5, a5
  90c66d:	05c50f        	subx8	a5, a12, a5
  90c670:	0b5509        	addx2	a5, a5, a11
  90c673:	a515      	add.n	a5, a1, a5
  90c675:	27540c        	s8i	a7, a5, 12

static INLINE void
rcSetValidTxMask(TX_RATE_CTRL *pRc, A_UINT8 index, A_BOOL validTxRate)
{
	ASSERT(index < pRc->rateTableSize);
	pRc->validRateIndex[index] = validTxRate ? TRUE : FALSE;
  90c678:	c0c1      	movi.n	a12, 1
  90c67a:	a765      	add.n	a5, a6, a7
  90c67c:	2c543a        	s8i	a12, a5, 58

				pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
				pPhyStateCtrl->validPhyRateCount[phy] += 1;

				rcSetValidTxMask(pRc, j, TRUE);
				hi = A_MAX(hi, j);
  90c67f:	251291        	l32i	a5, a1, 0x244
				WLAN_RC_CAP_MODE(capflag)) && !WLAN_RC_PHY_HT(phy)) {
				if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
					continue;

				pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
				pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c682:	b1bb      	addi.n	a11, a11, 1

				rcSetValidTxMask(pRc, j, TRUE);
				hi = A_MAX(hi, j);
  90c684:	075537        	maxu	a5, a5, a7
				WLAN_RC_CAP_MODE(capflag)) && !WLAN_RC_PHY_HT(phy)) {
				if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
					continue;

				pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
				pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c687:	2ba400        	s8i	a11, a10, 0

				rcSetValidTxMask(pRc, j, TRUE);
				hi = A_MAX(hi, j);
  90c68a:	251691        	s32i	a5, a1, 0x244
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
  90c68d:	b177      	addi.n	a7, a7, 1
  90c68f:	070747        	extui	a7, a7, 0, 8
  90c692:	600005        	j	90c69b <rcSibUpdate_ht$constprop$6+0x1bb>
			/*
			 * We allow a rate only if its valid and the capflag matches one of
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
  90c695:	a93f      	add.n	a15, a3, a9
	A_UINT8 i, j, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
  90c697:	c070      	movi.n	a7, 0
			/*
			 * We allow a rate only if its valid and the capflag matches one of
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
  90c699:	b1ff      	addi.n	a15, a15, 1
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
  90c69b:	252000        	l8ui	a5, a2, 0
  90c69e:	757b02        	bgeu	a7, a5, 90c6a4 <rcSibUpdate_ht$constprop$6+0x1c4>
  90c6a1:	63ff40        	j	90c5e5 <rcSibUpdate_ht$constprop$6+0x105>
	A_UINT8 i, j, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
  90c6a4:	b199      	addi.n	a9, a9, 1
  90c6a6:	090947        	extui	a9, a9, 0, 8
  90c6a9:	253000        	l8ui	a5, a3, 0
  90c6ac:	7593e5        	bltu	a9, a5, 90c695 <rcSibUpdate_ht$constprop$6+0x1b5>
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	A_UINT8 *phtMcs = (A_UINT8*)&pRateSet->htrates;
	TX_RATE_CTRL *pRc = (TX_RATE_CTRL *)(pSib);
	PHY_STATE_CTRL mPhyCtrlState;  

	A_UINT8 i, j, k, hi = 0, htHi = 0;
  90c6af:	c090      	movi.n	a9, 0
	} else {
		/* Use intersection of working rates and valid rates */
		hi = rcSibSetValidRates(pRateTable, pRc, &(pRateSet->rates),
					capflag, an, &mPhyCtrlState);

		if (capflag & WLAN_RC_HT_FLAG) {
  90c6b1:	7c4f02        	bbsi	a4, 28, 90c6b7 <rcSibUpdate_ht$constprop$6+0x1d7>
  90c6b4:	6000f0        	j	90c7a8 <rcSibUpdate_ht$constprop$6+0x2c8>
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
			    || !WLAN_RC_PHY_HT(phy) 
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
			    || ((pRateTable->info[j].dot11Rate == 15) && 
				(valid & TRUE_20) && 
				(capflag & WLAN_RC_WEP_TKIP_FLAG)) )
  90c6b7:	251a00        	movi	a5, 0x100
	       A_UINT32 capflag, A_BOOL keepState, struct ieee80211_rate  *pRateSet)
{
	RATE_TABLE_11N *pRateTable = 0;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	A_UINT8 *phtMcs = (A_UINT8*)&pRateSet->htrates;
  90c6ba:	233c1f        	addi	a3, a3, 31
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
			    || !WLAN_RC_PHY_HT(phy) 
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
			    || ((pRateTable->info[j].dot11Rate == 15) && 
				(valid & TRUE_20) && 
				(capflag & WLAN_RC_WEP_TKIP_FLAG)) )
  90c6bd:	054501        	and	a5, a4, a5
	       A_UINT32 capflag, A_BOOL keepState, struct ieee80211_rate  *pRateSet)
{
	RATE_TABLE_11N *pRateTable = 0;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	A_UINT8 *phtMcs = (A_UINT8*)&pRateSet->htrates;
  90c6c0:	23169a        	s32i	a3, a1, 0x268
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
			    || !WLAN_RC_PHY_HT(phy) 
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
			    || ((pRateTable->info[j].dot11Rate == 15) && 
				(valid & TRUE_20) && 
				(capflag & WLAN_RC_WEP_TKIP_FLAG)) )
  90c6c3:	251694        	s32i	a5, a1, 0x250
	       A_UINT32 capflag, A_BOOL keepState, struct ieee80211_rate  *pRateSet)
{
	RATE_TABLE_11N *pRateTable = 0;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	A_UINT8 *phtMcs = (A_UINT8*)&pRateSet->htrates;
  90c6c6:	d390      	mov.n	a3, a9
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
			    || !WLAN_RC_PHY_HT(phy) 
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
			    || ((pRateTable->info[j].dot11Rate == 15) && 
  90c6c8:	c0ef      	movi.n	a14, 15
  90c6ca:	6000d1        	j	90c79f <rcSibUpdate_ht$constprop$6+0x2bf>
		for (j = 0; j < pRateTable->rateCount; j++) {
			A_UINT32 phy = pRateTable->info[j].phy;
#ifdef MAGPIE_MERLIN
			struct atheros_node *pSib = ATH_NODE_ATHEROS(an);

			if (pSib->stbc) {
  90c6cd:	2b8282        	l32i	a11, a8, 0x208
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
			A_UINT32 phy = pRateTable->info[j].phy;
  90c6d0:	077a0a        	addx4	a10, a7, a7
  90c6d3:	07aa09        	addx2	a10, a10, a7
#ifdef MAGPIE_MERLIN
			struct atheros_node *pSib = ATH_NODE_ATHEROS(an);

			if (pSib->stbc) {
  90c6d6:	2bb21d        	l32i	a11, a11, 116
  90c6d9:	1c6ac9        	l32r	a12, 8e7200 <memset+0x3b8>
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
			A_UINT32 phy = pRateTable->info[j].phy;
  90c6dc:	02aa0a        	addx4	a10, a10, a2
  90c6df:	25a010        	l8ui	a5, a10, 16
#ifdef MAGPIE_MERLIN
			struct atheros_node *pSib = ATH_NODE_ATHEROS(an);

			if (pSib->stbc) {
  90c6e2:	7cb006        	bnone	a11, a12, 90c6ec <rcSibUpdate_ht$constprop$6+0x20c>
				valid = pRateTable->info[j].validSTBC;
  90c6e5:	2aa00f        	l8ui	a10, a10, 15
  90c6e8:	600010        	j	90c6fc <rcSibUpdate_ht$constprop$6+0x21c>
  90c6eb:	002d12        	srai	a13, a0, 2
			} else if (singleStream) {
  90c6ee:	93cc      	s32i.n	a3, a12, 48
  90c6f0:	d62a      	excw
#else
			if (singleStream) {
#endif
				valid = pRateTable->info[j].validSingleStream;
  90c6f2:	a00b      	add.n	a11, a0, a0
  90c6f4:	600004        	j	90c6fc <rcSibUpdate_ht$constprop$6+0x21c>
  90c6f7:	00002a        	muluh	a0, a0, a0
			} else {
				valid = pRateTable->info[j].valid;
  90c6fa:	a007      	add.n	a7, a0, a0
			}
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
  90c6fc:	077b0a        	addx4	a11, a7, a7
  90c6ff:	07bb09        	addx2	a11, a11, a7
  90c702:	02bb0a        	addx4	a11, a11, a2
  90c705:	2bb01e        	l8ui	a11, a11, 30
  90c708:	2cf000        	l8ui	a12, a15, 0
  90c70b:	0cbc03        	xor	a12, a11, a12
				valid = pRateTable->info[j].validSingleStream;
			} else {
				valid = pRateTable->info[j].valid;
			}
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
  90c70e:	0c0c46        	extui	a12, a12, 0, 7
  90c711:	65c06b        	bnez	a12, 90c780 <rcSibUpdate_ht$constprop$6+0x2a0>
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
			    || !WLAN_RC_PHY_HT(phy) 
  90c714:	6e5468        	bltui	a5, 4, 90c780 <rcSibUpdate_ht$constprop$6+0x2a0>
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
  90c717:	c0d2      	movi.n	a13, 2
  90c719:	0dac01        	and	a12, a10, a13
  90c71c:	c8c4      	beqz.n	a12, 90c724 <rcSibUpdate_ht$constprop$6+0x244>
  90c71e:	2d1290        	l32i	a13, a1, 0x240
  90c721:	64d148        	beqz	a13, 90c86d <rcSibUpdate_ht$constprop$6+0x38d>
  90c724:	c0d4      	movi.n	a13, 4
  90c726:	7da056        	bnone	a10, a13, 90c780 <rcSibUpdate_ht$constprop$6+0x2a0>
  90c729:	2d1290        	l32i	a13, a1, 0x240
  90c72c:	64d050        	beqz	a13, 90c780 <rcSibUpdate_ht$constprop$6+0x2a0>
			    || ((pRateTable->info[j].dot11Rate == 15) && 
  90c72f:	7eb907        	bne	a11, a14, 90c73a <rcSibUpdate_ht$constprop$6+0x25a>
  90c732:	c8c4      	beqz.n	a12, 90c73a <rcSibUpdate_ht$constprop$6+0x25a>
				(valid & TRUE_20) && 
  90c734:	2d1294        	l32i	a13, a1, 0x250
  90c737:	65d045        	bnez	a13, 90c780 <rcSibUpdate_ht$constprop$6+0x2a0>
				(capflag & WLAN_RC_WEP_TKIP_FLAG)) )
			{
				continue;
			}
    
			if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
  90c73a:	da50      	mov.n	a10, a5
  90c73c:	db40      	mov.n	a11, a4
  90c73e:	2c0a00        	movi	a12, 0
  90c741:	281699        	s32i	a8, a1, 0x264
  90c744:	291696        	s32i	a9, a1, 0x258
  90c747:	2e1698        	s32i	a14, a1, 0x260
  90c74a:	2f1697        	s32i	a15, a1, 0x25c
  90c74d:	5bfec7        	call8	90c26c <rcIsValidPhyRate>
  90c750:	281299        	l32i	a8, a1, 0x264
  90c753:	291296        	l32i	a9, a1, 0x258
  90c756:	2e1298        	l32i	a14, a1, 0x260
  90c759:	2f1297        	l32i	a15, a1, 0x25c
  90c75c:	caa0      	beqz.n	a10, 90c780 <rcSibUpdate_ht$constprop$6+0x2a0>
				continue;
    
			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
  90c75e:	a51a      	add.n	a10, a1, a5
  90c760:	2ba000        	l8ui	a11, a10, 0
  90c763:	055c09        	addx2	a12, a5, a5
  90c766:	05c50f        	subx8	a5, a12, a5
  90c769:	0b5509        	addx2	a5, a5, a11
  90c76c:	a515      	add.n	a5, a1, a5
			pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c76e:	b1bb      	addi.n	a11, a11, 1
			}
    
			if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
				continue;
    
			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
  90c770:	27540c        	s8i	a7, a5, 12
			pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c773:	2ba400        	s8i	a11, a10, 0

static INLINE void
rcSetValidTxMask(TX_RATE_CTRL *pRc, A_UINT8 index, A_BOOL validTxRate)
{
	ASSERT(index < pRc->rateTableSize);
	pRc->validRateIndex[index] = validTxRate ? TRUE : FALSE;
  90c776:	a765      	add.n	a5, a6, a7
  90c778:	c0a1      	movi.n	a10, 1
  90c77a:	2a543a        	s8i	a10, a5, 58
    
			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
			pPhyStateCtrl->validPhyRateCount[phy] += 1;

			rcSetValidTxMask(pRc, j, TRUE);
			hi = A_MAX(hi, j);
  90c77d:	079937        	maxu	a9, a9, a7
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
  90c780:	b177      	addi.n	a7, a7, 1
  90c782:	070747        	extui	a7, a7, 0, 8
  90c785:	600008        	j	90c791 <rcSibUpdate_ht$constprop$6+0x2b1>
				valid = pRateTable->info[j].validSingleStream;
			} else {
				valid = pRateTable->info[j].valid;
			}
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
  90c788:	2d129a        	l32i	a13, a1, 0x268
	A_UINT8 i, j, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
  90c78b:	c070      	movi.n	a7, 0
				valid = pRateTable->info[j].validSingleStream;
			} else {
				valid = pRateTable->info[j].valid;
			}
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
  90c78d:	a3df      	add.n	a15, a13, a3
  90c78f:	b1ff      	addi.n	a15, a15, 1
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
  90c791:	252000        	l8ui	a5, a2, 0
  90c794:	757b02        	bgeu	a7, a5, 90c79a <rcSibUpdate_ht$constprop$6+0x2ba>
  90c797:	63ff32        	j	90c6cd <rcSibUpdate_ht$constprop$6+0x1ed>
	A_UINT8 i, j, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
  90c79a:	b133      	addi.n	a3, a3, 1
  90c79c:	030347        	extui	a3, a3, 0, 8
  90c79f:	2d129a        	l32i	a13, a1, 0x268
  90c7a2:	25d000        	l8ui	a5, a13, 0
  90c7a5:	7533df        	bltu	a3, a5, 90c788 <rcSibUpdate_ht$constprop$6+0x2a8>
		if (capflag & WLAN_RC_HT_FLAG) {
			htHi = rcSibSetValidHtRates(pRateTable, pRc, phtMcs,
						    capflag, an, &mPhyCtrlState);
		}

		hi = A_MAX(hi, htHi);
  90c7a8:	231291        	l32i	a3, a1, 0x244
  90c7ab:	039537        	maxu	a5, a9, a3
	}

	pRc->rateTableSize = hi + 1;
	pRc->rateMaxPhy    = 0;
  90c7ae:	c030      	movi.n	a3, 0
		}

		hi = A_MAX(hi, htHi);
	}

	pRc->rateTableSize = hi + 1;
  90c7b0:	b155      	addi.n	a5, a5, 1
	pRc->rateMaxPhy    = 0;
  90c7b2:	23646d        	s8i	a3, a6, 109
  90c7b5:	c030      	movi.n	a3, 0
		}

		hi = A_MAX(hi, htHi);
	}

	pRc->rateTableSize = hi + 1;
  90c7b7:	25642e        	s8i	a5, a6, 46
	pRc->rateMaxPhy    = 0;
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);

	for (i = 0, k = 0; i < WLAN_RC_PHY_MAX; i++) {
  90c7ba:	d430      	mov.n	a4, a3
  90c7bc:	60004e        	j	90c80e <rcSibUpdate_ht$constprop$6+0x32e>
  90c7bf:	002d12        	srai	a13, a0, 2
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90c7c2:	92a9      	s32i.n	a2, a10, 36
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);

	for (i = 0, k = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < mPhyCtrlState.validPhyRateCount[i]; j++) {
			pRc->validRateIndex[k++] = mPhyCtrlState.validPhyRateIndex[i][j];
  90c7c4:	69a7d8        	bnei	a10, 7, 90c7a0 <rcSibUpdate_ht$constprop$6+0x2c0>
  90c7c7:	28800c        	l8ui	a8, a8, 12
  90c7ca:	b177      	addi.n	a7, a7, 1
  90c7cc:	28943a        	s8i	a8, a9, 58
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90c7cf:	070847        	extui	a8, a7, 0, 8
  90c7d2:	a489      	add.n	a9, a8, a4
  90c7d4:	090947        	extui	a9, a9, 0, 8
	pRc->rateMaxPhy    = 0;
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);

	for (i = 0, k = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < mPhyCtrlState.validPhyRateCount[i]; j++) {
  90c7d7:	7583e5        	bltu	a8, a5, 90c7c0 <rcSibUpdate_ht$constprop$6+0x2e0>
			pRc->validRateIndex[k++] = mPhyCtrlState.validPhyRateIndex[i][j];
		}   

		if (!rcIsValidPhyRate(i, pRateTable->initialRateMax, TRUE) ||
  90c7da:	2b2003        	l8ui	a11, a2, 3
  90c7dd:	a454      	add.n	a4, a5, a4
  90c7df:	da30      	mov.n	a10, a3
  90c7e1:	c0c1      	movi.n	a12, 1
  90c7e3:	040447        	extui	a4, a4, 0, 8
  90c7e6:	5bfea1        	call8	90c26c <rcIsValidPhyRate>
  90c7e9:	c9a3      	beqz.n	a10, 90c800 <rcSibUpdate_ht$constprop$6+0x320>
  90c7eb:	645011        	beqz	a5, 90c800 <rcSibUpdate_ht$constprop$6+0x320>
		    !mPhyCtrlState.validPhyRateCount[i]) 
			continue;

		pRc->rateMaxPhy = mPhyCtrlState.validPhyRateIndex[i][j-1];	
  90c7ee:	033709        	addx2	a7, a3, a3
  90c7f1:	03770f        	subx8	a7, a7, a3
  90c7f4:	017709        	addx2	a7, a7, a1
  90c7f7:	057508        	add	a5, a7, a5
  90c7fa:	25500b        	l8ui	a5, a5, 11
  90c7fd:	25646d        	s8i	a5, a6, 109
  90c800:	251292        	l32i	a5, a1, 0x248
  90c803:	b133      	addi.n	a3, a3, 1
  90c805:	255c2e        	addi	a5, a5, 46
  90c808:	251692        	s32i	a5, a1, 0x248
	pRc->rateTableSize = hi + 1;
	pRc->rateMaxPhy    = 0;
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);

	for (i = 0, k = 0; i < WLAN_RC_PHY_MAX; i++) {
  90c80b:	683a09        	beqi	a3, 12, 90c818 <rcSibUpdate_ht$constprop$6+0x338>
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90c80e:	a315      	add.n	a5, a1, a3
	pRc->rateMaxPhy    = 0;
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);

	for (i = 0, k = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < mPhyCtrlState.validPhyRateCount[i]; j++) {
  90c810:	255000        	l8ui	a5, a5, 0
  90c813:	c070      	movi.n	a7, 0
  90c815:	63ffb6        	j	90c7cf <rcSibUpdate_ht$constprop$6+0x2ef>
	}
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);
	ASSERT(k <= MAX_TX_RATE_TBL);

	pRc->rateMaxPhy = pRc->validRateIndex[k-4];
  90c818:	a463      	add.n	a3, a6, a4
  90c81a:	233036        	l8ui	a3, a3, 54
	pRc->maxValidRate = k;
  90c81d:	246439        	s8i	a4, a6, 57
	}
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);
	ASSERT(k <= MAX_TX_RATE_TBL);

	pRc->rateMaxPhy = pRc->validRateIndex[k-4];
  90c820:	23646d        	s8i	a3, a6, 109
  90c823:	60003c        	j	90c863 <rcSibUpdate_ht$constprop$6+0x383>
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
		for (j=0; j <= i-1; j++) {
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c826:	a369      	add.n	a9, a6, a3
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c828:	b133      	addi.n	a3, a3, 1
  90c82a:	a368      	add.n	a8, a6, a3
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
		for (j=0; j <= i-1; j++) {
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c82c:	25903a        	l8ui	a5, a9, 58
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c82f:	27803a        	l8ui	a7, a8, 58
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
		for (j=0; j <= i-1; j++) {
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c832:	055a0a        	addx4	a10, a5, a5
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c835:	077b0a        	addx4	a11, a7, a7
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
		for (j=0; j <= i-1; j++) {
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c838:	05aa09        	addx2	a10, a10, a5
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c83b:	07bb09        	addx2	a11, a11, a7
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
		for (j=0; j <= i-1; j++) {
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c83e:	02aa0a        	addx4	a10, a10, a2
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c841:	02bb0a        	addx4	a11, a11, a2
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
		for (j=0; j <= i-1; j++) {
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c844:	8aa5      	l32i.n	a10, a10, 20
  90c846:	2bb205        	l32i	a11, a11, 20
  90c849:	299c30        	addi	a9, a9, 48
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c84c:	288c30        	addi	a8, a8, 48
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
		for (j=0; j <= i-1; j++) {
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c84f:	7abb05        	bgeu	a11, a10, 90c858 <rcSibUpdate_ht$constprop$6+0x378>
				    pRateTable->info[pRc->validRateIndex[j+1]].userRateKbps)
#endif
				{
					A_UINT8 tmp=0;
					tmp = pRc->validRateIndex[j];
					pRc->validRateIndex[j] = pRc->validRateIndex[j+1];
  90c852:	27940a        	s8i	a7, a9, 10
					pRc->validRateIndex[j+1] = tmp;
  90c855:	25840a        	s8i	a5, a8, 10
rcSortValidRates(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc)
{
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
		for (j=0; j <= i-1; j++) {
  90c858:	030347        	extui	a3, a3, 0, 8
  90c85b:	600001        	j	90c860 <rcSibUpdate_ht$constprop$6+0x380>
static void
rcSortValidRates(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc)
{
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
  90c85e:	c030      	movi.n	a3, 0
		for (j=0; j <= i-1; j++) {
  90c860:	7432c2        	blt	a3, a4, 90c826 <rcSibUpdate_ht$constprop$6+0x346>
static void
rcSortValidRates(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc)
{
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
  90c863:	b044      	addi.n	a4, a4, -1
  90c865:	040447        	extui	a4, a4, 0, 8
  90c868:	654ff2        	bnez	a4, 90c85e <rcSibUpdate_ht$constprop$6+0x37e>
  90c86b:	d10f      	retw.n
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
			    || !WLAN_RC_PHY_HT(phy) 
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
			    || ((pRateTable->info[j].dot11Rate == 15) && 
  90c86d:	7eb102        	beq	a11, a14, 90c873 <rcSibUpdate_ht$constprop$6+0x393>
  90c870:	63fec6        	j	90c73a <rcSibUpdate_ht$constprop$6+0x25a>
  90c873:	63febd        	j	90c734 <rcSibUpdate_ht$constprop$6+0x254>
	...

0090c878 <ath_rate_newassoc_11n>:
}

static void
ath_rate_newassoc_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, int isnew, 
		      unsigned int capflag, struct ieee80211_rate *rs)
{
  90c878:	6c1004        	entry	a1, 32
  90c87b:	da20      	mov.n	a10, a2
  90c87d:	db30      	mov.n	a11, a3
  90c87f:	dc50      	mov.n	a12, a5
  90c881:	dd60      	mov.n	a13, a6
	if (isnew) {
  90c883:	c949      	beqz.n	a4, 90c8a0 <ath_rate_newassoc_11n+0x28>
#ifdef MAGPIE_MERLIN
		struct atheros_node *oan = ATH_NODE_ATHEROS(an);
  90c885:	283282        	l32i	a8, a3, 0x208
		/* Only MERLIN can send STBC */
		oan->stbc = (capflag & ATH_RC_TX_STBC_FLAG) ? 1 : 0;
  90c888:	055e40        	extui	a14, a5, 5, 1
  90c88b:	2f8074        	l8ui	a15, a8, 116
  90c88e:	29fa9f        	movi	a9, -97
  90c891:	0bee11        	slli	a14, a14, 5
  90c894:	09f901        	and	a9, a15, a9
  90c897:	0e9902        	or	a9, a9, a14
  90c89a:	298474        	s8i	a9, a8, 116
#endif
		rcSibUpdate_ht(sc, an, capflag, 0, rs);
  90c89d:	5bff10        	call8	90c4e0 <rcSibUpdate_ht$constprop$6>
  90c8a0:	d10f      	retw.n
	...

0090c8a4 <rcRateFind_11n>:
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
  90c8a4:	6c100c        	entry	a1, 96
  90c8a7:	9217      	s32i.n	a2, a1, 28
	A_UINT8 i = 0; 
	A_UINT8 tryPerRate  = 0;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
  90c8a9:	222248        	l32i	a2, a2, 0x120
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c8ac:	8817      	l32i.n	a8, a1, 28
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
	A_UINT8 i = 0; 
	A_UINT8 tryPerRate  = 0;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
  90c8ae:	9218      	s32i.n	a2, a1, 32
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c8b0:	8918      	l32i.n	a9, a1, 32
  90c8b2:	2282c2        	l32i	a2, a8, 0x308
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
  90c8b5:	971c      	s32i.n	a7, a1, 48
  90c8b7:	931a      	s32i.n	a3, a1, 40
	A_UINT8 i = 0; 
	A_UINT8 tryPerRate  = 0;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c8b9:	09220a        	addx4	a2, a2, a9
  90c8bc:	8221      	l32i.n	a2, a2, 4
	struct atheros_node *asn = ATH_NODE_ATHEROS(an);
  90c8be:	881a      	l32i.n	a8, a1, 40
	A_UINT8 rix, nrix;
	A_UINT8 dot11Rate;
	WLAN_PHY phy;

	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0, 
  90c8c0:	891c      	l32i.n	a9, a1, 48
	A_INT8               index;
	TX_RATE_CTRL         *pRc = NULL;

	pRc = (TX_RATE_CTRL *)(pSib ? (pSib) : NULL);

	*isProbing = FALSE;
  90c8c2:	2d1219        	l32i	a13, a1, 100
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
  90c8c5:	9419      	s32i.n	a4, a1, 36
	A_INT8               index;
	TX_RATE_CTRL         *pRc = NULL;

	pRc = (TX_RATE_CTRL *)(pSib ? (pSib) : NULL);

	*isProbing = FALSE;
  90c8c7:	c040      	movi.n	a4, 0
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
	A_UINT8 i = 0; 
	A_UINT8 tryPerRate  = 0;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c8c9:	9214      	s32i.n	a2, a1, 16
	struct atheros_node *asn = ATH_NODE_ATHEROS(an);
	A_UINT8 rix, nrix;
	A_UINT8 dot11Rate;
	WLAN_PHY phy;

	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0, 
  90c8cb:	090940        	extui	a9, a9, 0, 1
{
	A_UINT8 i = 0; 
	A_UINT8 tryPerRate  = 0;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
	struct atheros_node *asn = ATH_NODE_ATHEROS(an);
  90c8ce:	228282        	l32i	a2, a8, 0x208
	 *   0msec   <= dt <= 25msec:   don't derate
	 *   25msec  <= dt <= 185msec:  derate linearly from 0 to 10dB
	 *   185msec <= dt:             derate by 10dB
	 */

	nowMsec = A_MS_TICKGET();
  90c8d1:	da40      	mov.n	a10, a4
	A_INT8               index;
	TX_RATE_CTRL         *pRc = NULL;

	pRc = (TX_RATE_CTRL *)(pSib ? (pSib) : NULL);

	*isProbing = FALSE;
  90c8d3:	94d0      	s32i.n	a4, a13, 0
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
  90c8d5:	951b      	s32i.n	a5, a1, 44
  90c8d7:	961d      	s32i.n	a6, a1, 52
  90c8d9:	231218        	l32i	a3, a1, 96
	struct atheros_node *asn = ATH_NODE_ATHEROS(an);
	A_UINT8 rix, nrix;
	A_UINT8 dot11Rate;
	WLAN_PHY phy;

	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0, 
  90c8dc:	9916      	s32i.n	a9, a1, 24
	 *   0msec   <= dt <= 25msec:   don't derate
	 *   25msec  <= dt <= 185msec:  derate linearly from 0 to 10dB
	 *   185msec <= dt:             derate by 10dB
	 */

	nowMsec = A_MS_TICKGET();
  90c8de:	5bec77        	call8	907abc <ath_hal_getuptime>
	 * Now look up the rate in the rssi table and return it.
	 * If no rates match then we return 0 (lowest rate)
	 */

	bestThruput = 0;
	maxIndex = pRc->maxValidRate-1;
  90c8e1:	2e2039        	l8ui	a14, a2, 57
  90c8e4:	b0ef      	addi.n	a15, a14, -1
  90c8e6:	0f0f47        	extui	a15, a15, 0, 8
	}

	return rix;
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
  90c8e9:	00f532        	sext	a5, a15, 7
    
	/*
	 * Try the higher rate first. It will reduce memory moving time
	 * if we have very good channel characteristics.
	 */
	for (index = maxIndex; index >= minIndex ; index--) {
  90c8ec:	d840      	mov.n	a8, a4

	bestThruput = 0;
	maxIndex = pRc->maxValidRate-1;

	minIndex = 0;
	bestRate = minIndex;
  90c8ee:	db40      	mov.n	a11, a4
	/*
	 * Now look up the rate in the rssi table and return it.
	 * If no rates match then we return 0 (lowest rate)
	 */

	bestThruput = 0;
  90c8f0:	dc40      	mov.n	a12, a4
	}

	return rix;
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
  90c8f2:	a525      	add.n	a5, a2, a5
		 * used to next lower rate, its PER would grow to
		 * 10-15 and we would be worse off then staying
		 * at the current rate.
		 */
		perThres = pRc->state[rate].per;
		if ( perThres < 12 ) {
  90c8f4:	c06b      	movi.n	a6, 11
			perThres = 12;
		}

		thisThruput = pRateTable->info[rate].userRateKbps * (100 - perThres);
  90c8f6:	270a64        	movi	a7, 100
  90c8f9:	60003e        	j	90c93b <rcRateFind_11n+0x97>
	}

	return rix;
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
  90c8fc:	a854      	add.n	a4, a5, a8
	 * if we have very good channel characteristics.
	 */
	for (index = maxIndex; index >= minIndex ; index--) {
		A_UINT8 perThres;
    
		rate = pRc->validRateIndex[index];
  90c8fe:	29403a        	l8ui	a9, a4, 58
		if (rate > pRc->rateMaxPhy) {
  90c901:	24206d        	l8ui	a4, a2, 109
  90c904:	794331        	bltu	a4, a9, 90c939 <rcRateFind_11n+0x95>
		}

		/* if the best throughput is already larger than the userRateKbps..
		 * then we could skip of rest of calculation.. 
		 */
		if( bestThruput >= pRateTable->info[rate].userRateKbps)
  90c907:	09940a        	addx4	a4, a9, a9
  90c90a:	8d14      	l32i.n	a13, a1, 16
  90c90c:	094409        	addx2	a4, a4, a9
  90c90f:	0d440a        	addx4	a4, a4, a13
  90c912:	8446      	l32i.n	a4, a4, 24
  90c914:	74c30a        	bltu	a12, a4, 90c922 <rcRateFind_11n+0x7e>
	/*
	 * Must check the actual rate (rateKbps) to account for non-monoticity of
	 * 11g's rate table
	 */

	if (rate >= pRc->rateMaxPhy && probeAllowed) {
  90c917:	24206d        	l8ui	a4, a2, 109
  90c91a:	74bb26        	bgeu	a11, a4, 90c944 <rcRateFind_11n+0xa0>
  90c91d:	600027        	j	90c948 <rcRateFind_11n+0xa4>
  90c920:	0000a9        	excw
		 * rate whose PER has decayed close to 0.  If we
		 * used to next lower rate, its PER would grow to
		 * 10-15 and we would be worse off then staying
		 * at the current rate.
		 */
		perThres = pRc->state[rate].per;
  90c923:	2d2dd0        	addmi	a13, a2, 0xffffd000
  90c926:	007d63        	excw
		if ( perThres < 12 ) {
  90c929:	01c0dc        	excw
			perThres = 12;
		}

		thisThruput = pRateTable->info[rate].userRateKbps * (100 - perThres);
  90c92c:	0d7d0c        	sub	a13, a7, a13
  90c92f:	04dd28        	mull	a13, a13, a4
		if (bestThruput <= thisThruput) {
  90c932:	7cd303        	bltu	a13, a12, 90c939 <rcRateFind_11n+0x95>
  90c935:	db90      	mov.n	a11, a9
  90c937:	dcd0      	mov.n	a12, a13
  90c939:	b088      	addi.n	a8, a8, -1
	}

	return rix;
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
  90c93b:	a8f4      	add.n	a4, a15, a8
    
	/*
	 * Try the higher rate first. It will reduce memory moving time
	 * if we have very good channel characteristics.
	 */
	for (index = maxIndex; index >= minIndex ; index--) {
  90c93d:	7847bb        	bbci	a4, 24, 90c8fc <rcRateFind_11n+0x58>
  90c940:	63ffd3        	j	90c917 <rcRateFind_11n+0x73>
  90c943:	008516        	excw
	/*
	 * Must check the actual rate (rateKbps) to account for non-monoticity of
	 * 11g's rate table
	 */

	if (rate >= pRc->rateMaxPhy && probeAllowed) {
  90c946:	ce56      	bnez.n	a5, 90c970 <rcRateFind_11n+0xcc>
  90c948:	d4b0      	mov.n	a4, a11
  90c94a:	600047        	j	90c995 <rcRateFind_11n+0xf1>
                     A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_UINT8 i;

	for (i = 0; i < pRc->maxValidRate-1; i++) {
		if (pRc->validRateIndex[i] == curValidTxRate) {
  90c94d:	a526      	add.n	a6, a2, a5
  90c94f:	27603a        	l8ui	a7, a6, 58
  90c952:	747912        	bne	a7, a4, 90c968 <rcRateFind_11n+0xc4>
		rate = pRc->rateMaxPhy;

		/* Probe the next allowed phy state */
		/* FIXME: Check to make sure ratMax is checked properly */
		if (rcGetNextValidTxRate( pRateTable, pRc, rate, &nextRate) && 
		    (nowMsec - pRc->probeTime > pRateTable->probeInterval) &&
  90c955:	8814      	l32i.n	a8, a1, 16
{
	A_UINT8 i;

	for (i = 0; i < pRc->maxValidRate-1; i++) {
		if (pRc->validRateIndex[i] == curValidTxRate) {
			*pNextIndex = pRc->validRateIndex[i+1];
  90c957:	25603b        	l8ui	a5, a6, 59
		rate = pRc->rateMaxPhy;

		/* Probe the next allowed phy state */
		/* FIXME: Check to make sure ratMax is checked properly */
		if (rcGetNextValidTxRate( pRateTable, pRc, rate, &nextRate) && 
		    (nowMsec - pRc->probeTime > pRateTable->probeInterval) &&
  90c95a:	862d      	l32i.n	a6, a2, 52
  90c95c:	278001        	l8ui	a7, a8, 1
  90c95f:	06a60c        	sub	a6, a10, a6
	if (rate >= pRc->rateMaxPhy && probeAllowed) {
		rate = pRc->rateMaxPhy;

		/* Probe the next allowed phy state */
		/* FIXME: Check to make sure ratMax is checked properly */
		if (rcGetNextValidTxRate( pRateTable, pRc, rate, &nextRate) && 
  90c962:	767316        	bltu	a7, a6, 90c97c <rcRateFind_11n+0xd8>
  90c965:	60002c        	j	90c995 <rcRateFind_11n+0xf1>
rcGetNextValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc, 
                     A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_UINT8 i;

	for (i = 0; i < pRc->maxValidRate-1; i++) {
  90c968:	b155      	addi.n	a5, a5, 1
  90c96a:	050547        	extui	a5, a5, 0, 8
  90c96d:	600003        	j	90c974 <rcRateFind_11n+0xd0>
	/*
	 * Must check the actual rate (rateKbps) to account for non-monoticity of
	 * 11g's rate table
	 */

	if (rate >= pRc->rateMaxPhy && probeAllowed) {
  90c970:	c050      	movi.n	a5, 0
rcGetNextValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc, 
                     A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_UINT8 i;

	for (i = 0; i < pRc->maxValidRate-1; i++) {
  90c972:	b0ee      	addi.n	a14, a14, -1
  90c974:	7e52d5        	blt	a5, a14, 90c94d <rcRateFind_11n+0xa9>
  90c977:	60001a        	j	90c995 <rcRateFind_11n+0xf1>
  90c97a:	000026        	excw
		rate = pRc->rateMaxPhy;

		/* Probe the next allowed phy state */
		/* FIXME: Check to make sure ratMax is checked properly */
		if (rcGetNextValidTxRate( pRateTable, pRc, rate, &nextRate) && 
		    (nowMsec - pRc->probeTime > pRateTable->probeInterval) &&
  90c97d:	2038c9        	excw
  90c980:	62c040        	j	8f89c4 <memset+0x11b7c>
		{
			rate                  = nextRate;
			pRc->probeRate        = rate;
			pRc->probeTime        = nowMsec;
			pRc->hwMaxRetryPktCnt = 0;
			*isProbing            = TRUE;
  90c983:	291219        	l32i	a9, a1, 100
		    (pRc->hwMaxRetryPktCnt >= 1))
		{
			rate                  = nextRate;
			pRc->probeRate        = rate;
			pRc->probeTime        = nowMsec;
			pRc->hwMaxRetryPktCnt = 0;
  90c986:	242438        	s8i	a4, a2, 56
		if (rcGetNextValidTxRate( pRateTable, pRc, rate, &nextRate) && 
		    (nowMsec - pRc->probeTime > pRateTable->probeInterval) &&
		    (pRc->hwMaxRetryPktCnt >= 1))
		{
			rate                  = nextRate;
			pRc->probeRate        = rate;
  90c989:	25242f        	s8i	a5, a2, 47
			pRc->probeTime        = nowMsec;
			pRc->hwMaxRetryPktCnt = 0;
			*isProbing            = TRUE;
  90c98c:	c041      	movi.n	a4, 1
		    (nowMsec - pRc->probeTime > pRateTable->probeInterval) &&
		    (pRc->hwMaxRetryPktCnt >= 1))
		{
			rate                  = nextRate;
			pRc->probeRate        = rate;
			pRc->probeTime        = nowMsec;
  90c98e:	9a2d      	s32i.n	a10, a2, 52
			pRc->hwMaxRetryPktCnt = 0;
			*isProbing            = TRUE;
  90c990:	9490      	s32i.n	a4, a9, 0
{
	A_UINT8 i;

	for (i = 0; i < pRc->maxValidRate-1; i++) {
		if (pRc->validRateIndex[i] == curValidTxRate) {
			*pNextIndex = pRc->validRateIndex[i+1];
  90c992:	055402        	or	a4, a5, a5
	 * Make sure rate is not higher than the allowed maximum.
	 * We should also enforce the min, but I suspect the min is
	 * normally 1 rather than 0 because of the rate 9 vs 6 issue
	 * in the old code.
	 */
	if (rate > (pRc->rateTableSize - 1)) {
  90c995:	25202e        	l8ui	a5, a2, 46
  90c998:	754204        	blt	a4, a5, 90c9a0 <rcRateFind_11n+0xfc>
		rate = pRc->rateTableSize - 1;
  90c99b:	b054      	addi.n	a4, a5, -1
  90c99d:	040447        	extui	a4, a4, 0, 8
	}

	/* record selected rate, which is used to decide if we want to do fast frame */
	if (!(*isProbing) && pSib) {
  90c9a0:	2d1219        	l32i	a13, a1, 100
  90c9a3:	85d0      	l32i.n	a5, a13, 0
  90c9a5:	cd57      	bnez.n	a5, 90c9c0 <rcRateFind_11n+0x11c>
		pSib->lastRateKbps = pRateTable->info[rate].rateKbps;
  90c9a7:	8614      	l32i.n	a6, a1, 16
  90c9a9:	04450a        	addx4	a5, a4, a4
  90c9ac:	045509        	addx2	a5, a5, a4
  90c9af:	06550a        	addx4	a5, a5, a6
		((struct atheros_softc*)sc->sc_rc)->currentTxRateKbps = pSib->lastRateKbps;
  90c9b2:	8817      	l32i.n	a8, a1, 28
		rate = pRc->rateTableSize - 1;
	}

	/* record selected rate, which is used to decide if we want to do fast frame */
	if (!(*isProbing) && pSib) {
		pSib->lastRateKbps = pRateTable->info[rate].rateKbps;
  90c9b4:	8655      	l32i.n	a6, a5, 20
		((struct atheros_softc*)sc->sc_rc)->currentTxRateKbps = pSib->lastRateKbps;
  90c9b6:	258248        	l32i	a5, a8, 0x120
		rate = pRc->rateTableSize - 1;
	}

	/* record selected rate, which is used to decide if we want to do fast frame */
	if (!(*isProbing) && pSib) {
		pSib->lastRateKbps = pRateTable->info[rate].rateKbps;
  90c9b9:	26261c        	s32i	a6, a2, 112
		((struct atheros_softc*)sc->sc_rc)->currentTxRateKbps = pSib->lastRateKbps;
  90c9bc:	9654      	s32i.n	a6, a5, 16
		((struct atheros_softc*)sc->sc_rc)->currentTxRateIndex = rate;
  90c9be:	9455      	s32i.n	a4, a5, 20

	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0, 
			    isProbe);
	nrix = rix;

	if ((rcflag & ATH_RC_PROBE_ALLOWED) && (*isProbe)) {
  90c9c0:	8916      	l32i.n	a9, a1, 24
  90c9c2:	649050        	beqz	a9, 90ca16 <rcRateFind_11n+0x172>
  90c9c5:	2d1219        	l32i	a13, a1, 100

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
	A_UINT8 i = 0; 
  90c9c8:	c0e0      	movi.n	a14, 0

	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0, 
			    isProbe);
	nrix = rix;

	if ((rcflag & ATH_RC_PROBE_ALLOWED) && (*isProbe)) {
  90c9ca:	85d0      	l32i.n	a5, a13, 0
  90c9cc:	d640      	mov.n	a6, a4
  90c9ce:	7e5148        	beq	a5, a14, 90ca1a <rcRateFind_11n+0x176>
		/* set one try for probe rates. For the probes don't enable rts */
		rcRateSetseries(pRateTable, &series[i++], 1, nrix,
				FALSE, asc->tx_chainmask, asn->stbc);
  90c9d1:	25221d        	l32i	a5, a2, 116
			    isProbe);
	nrix = rix;

	if ((rcflag & ATH_RC_PROBE_ALLOWED) && (*isProbe)) {
		/* set one try for probe rates. For the probes don't enable rts */
		rcRateSetseries(pRateTable, &series[i++], 1, nrix,
  90c9d4:	8a14      	l32i.n	a10, a1, 16
  90c9d6:	05d551        	extui	a5, a5, 29, 2
  90c9d9:	9510      	s32i.n	a5, a1, 0
  90c9db:	8518      	l32i.n	a5, a1, 32
  90c9dd:	db30      	mov.n	a11, a3
  90c9df:	8f53      	l32i.n	a15, a5, 12
  90c9e1:	c0c1      	movi.n	a12, 1
  90c9e3:	dd40      	mov.n	a13, a4
  90c9e5:	5bfdf1        	call8	90c1ac <rcRateSetseries>
               const RATE_TABLE_11N *pRateTable , 
               A_UINT8 rix, A_UINT16 stepDown, A_UINT16 minRate)
{
	A_UINT32                j;
	A_UINT8                 nextIndex;
	struct atheros_node     *pSib = ATH_NODE_ATHEROS(an);
  90c9e8:	881a      	l32i.n	a8, a1, 40
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  90c9ea:	c051      	movi.n	a5, 1
               const RATE_TABLE_11N *pRateTable , 
               A_UINT8 rix, A_UINT16 stepDown, A_UINT16 minRate)
{
	A_UINT32                j;
	A_UINT8                 nextIndex;
	struct atheros_node     *pSib = ATH_NODE_ATHEROS(an);
  90c9ec:	268282        	l32i	a6, a8, 0x208
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  90c9ef:	286039        	l8ui	a8, a6, 57
  90c9f2:	d760      	mov.n	a7, a6
  90c9f4:	600012        	j	90ca0a <rcRateFind_11n+0x166>
  90c9f7:	002a70        	excw
		if (pRc->validRateIndex[i] == curValidTxRate) {
  90c9fa:	3bb155        	excw
  90c9fd:	b177      	addi.n	a7, a7, 1
  90c9ff:	74a907        	bne	a10, a4, 90ca0a <rcRateFind_11n+0x166>
			*pNextIndex = pRc->validRateIndex[i-1];
  90ca02:	a966      	add.n	a6, a6, a9
  90ca04:	266039        	l8ui	a6, a6, 57
  90ca07:	600006        	j	90ca11 <rcRateFind_11n+0x16d>
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  90ca0a:	d950      	mov.n	a9, a5
  90ca0c:	7852e8        	blt	a5, a8, 90c9f8 <rcRateFind_11n+0x154>
  90ca0f:	d640      	mov.n	a6, a4
			    isProbe);
	nrix = rix;

	if ((rcflag & ATH_RC_PROBE_ALLOWED) && (*isProbe)) {
		/* set one try for probe rates. For the probes don't enable rts */
		rcRateSetseries(pRateTable, &series[i++], 1, nrix,
  90ca11:	c0e1      	movi.n	a14, 1
  90ca13:	600003        	j	90ca1a <rcRateFind_11n+0x176>

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
	A_UINT8 i = 0; 
  90ca16:	8e16      	l32i.n	a14, a1, 24

	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0, 
			    isProbe);
	nrix = rix;

	if ((rcflag & ATH_RC_PROBE_ALLOWED) && (*isProbe)) {
  90ca18:	d640      	mov.n	a6, a4
		 * after the probe rate
		 */
		nrix = rcRateGetIndex( sc, an, pRateTable, nrix, 1, FALSE);
	}

	tryPerRate = (numTries/numRates);
  90ca1a:	8b1b      	l32i.n	a11, a1, 44
  90ca1c:	2a1209        	l32i	a10, a1, 36
  90ca1f:	9e1e      	s32i.n	a14, a1, 56
  90ca21:	5b67dd        	call8	8e6998 <__divsi3>

	/* Set the choosen rate. No RTS for first series entry. */
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
  90ca24:	8e1e      	l32i.n	a14, a1, 56
		 * after the probe rate
		 */
		nrix = rcRateGetIndex( sc, an, pRateTable, nrix, 1, FALSE);
	}

	tryPerRate = (numTries/numRates);
  90ca26:	0a0947        	extui	a9, a10, 0, 8
  90ca29:	9916      	s32i.n	a9, a1, 24

	/* Set the choosen rate. No RTS for first series entry. */
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
  90ca2b:	0fe811        	slli	a8, a14, 1
  90ca2e:	ae8b      	add.n	a11, a8, a14
			nrix, FALSE, asc->tx_chainmask, asn->stbc);
  90ca30:	28221d        	l32i	a8, a2, 116
		 * after the probe rate
		 */
		nrix = rcRateGetIndex( sc, an, pRateTable, nrix, 1, FALSE);
	}

	tryPerRate = (numTries/numRates);
  90ca33:	d7a0      	mov.n	a7, a10

	/* Set the choosen rate. No RTS for first series entry. */
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
  90ca35:	08d851        	extui	a8, a8, 29, 2
  90ca38:	9810      	s32i.n	a8, a1, 0
  90ca3a:	8818      	l32i.n	a8, a1, 32
  90ca3c:	8a14      	l32i.n	a10, a1, 16
  90ca3e:	8f83      	l32i.n	a15, a8, 12
  90ca40:	b1e5      	addi.n	a5, a14, 1
  90ca42:	dc90      	mov.n	a12, a9
  90ca44:	03bb0a        	addx4	a11, a11, a3
  90ca47:	066d02        	or	a13, a6, a6
  90ca4a:	2e0a00        	movi	a14, 0
  90ca4d:	5bfdd7        	call8	90c1ac <rcRateSetseries>
  90ca50:	050547        	extui	a5, a5, 0, 8
  90ca53:	8919      	l32i.n	a9, a1, 36
	}

	return rix;
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
  90ca55:	07571c        	mul16u	a7, a5, a7
  90ca58:	07970c        	sub	a7, a9, a7
	for (; i < numRates; i++) {
		A_UINT8 tryNum;
		A_UINT8 minRate;

		tryNum  = ((i + 1) == numRates) ? numTries - (tryPerRate * i) : tryPerRate ;
		minRate = (((i + 1) == numRates) && (rcflag & ATH_RC_MINRATE_LASTRATE)) ? 1 : 0;
  90ca5b:	891c      	l32i.n	a9, a1, 48
  90ca5d:	070847        	extui	a8, a7, 0, 8
  90ca60:	c072      	movi.n	a7, 2
  90ca62:	079901        	and	a9, a9, a7
  90ca65:	9815      	s32i.n	a8, a1, 20
  90ca67:	9919      	s32i.n	a9, a1, 36
	/* Set the choosen rate. No RTS for first series entry. */
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
			nrix, FALSE, asc->tx_chainmask, asn->stbc);

	/* Fill in the other rates for multirate retry */
	for (; i < numRates; i++) {
  90ca69:	6000a4        	j	90cb11 <rcRateFind_11n+0x26d>
		A_UINT8 tryNum;
		A_UINT8 minRate;

		tryNum  = ((i + 1) == numRates) ? numTries - (tryPerRate * i) : tryPerRate ;
  90ca6c:	891b      	l32i.n	a9, a1, 44
  90ca6e:	b157      	addi.n	a7, a5, 1
  90ca70:	8c16      	l32i.n	a12, a1, 24
		minRate = (((i + 1) == numRates) && (rcflag & ATH_RC_MINRATE_LASTRATE)) ? 1 : 0;
  90ca72:	c080      	movi.n	a8, 0
	/* Fill in the other rates for multirate retry */
	for (; i < numRates; i++) {
		A_UINT8 tryNum;
		A_UINT8 minRate;

		tryNum  = ((i + 1) == numRates) ? numTries - (tryPerRate * i) : tryPerRate ;
  90ca74:	79790a        	bne	a7, a9, 90ca82 <rcRateFind_11n+0x1de>
		minRate = (((i + 1) == numRates) && (rcflag & ATH_RC_MINRATE_LASTRATE)) ? 1 : 0;
  90ca77:	8919      	l32i.n	a9, a1, 36
  90ca79:	c081      	movi.n	a8, 1
  90ca7b:	c0a0      	movi.n	a10, 0
  90ca7d:	8c15      	l32i.n	a12, a1, 20
  90ca7f:	09a838        	moveqz	a8, a10, a9
               const RATE_TABLE_11N *pRateTable , 
               A_UINT8 rix, A_UINT16 stepDown, A_UINT16 minRate)
{
	A_UINT32                j;
	A_UINT8                 nextIndex;
	struct atheros_node     *pSib = ATH_NODE_ATHEROS(an);
  90ca82:	891a      	l32i.n	a9, a1, 40
  90ca84:	279282        	l32i	a7, a9, 0x208
	TX_RATE_CTRL            *pRc = (TX_RATE_CTRL *)(pSib);
    
	if (minRate) {
  90ca87:	ca89      	beqz.n	a8, 90cab4 <rcRateFind_11n+0x210>
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  90ca89:	2b7039        	l8ui	a11, a7, 57
  90ca8c:	c490      	movi.n	a9, 64
  90ca8e:	da70      	mov.n	a10, a7
  90ca90:	c081      	movi.n	a8, 1
  90ca92:	600016        	j	90caac <rcRateFind_11n+0x208>
		if (pRc->validRateIndex[i] == curValidTxRate) {
  90ca95:	2ea03b        	l8ui	a14, a10, 59
  90ca98:	b188      	addi.n	a8, a8, 1
  90ca9a:	b1aa      	addi.n	a10, a10, 1
  90ca9c:	76e90c        	bne	a14, a6, 90caac <rcRateFind_11n+0x208>
			*pNextIndex = pRc->validRateIndex[i-1];
  90ca9f:	ad7d      	add.n	a13, a7, a13
  90caa1:	b099      	addi.n	a9, a9, -1
  90caa3:	26d039        	l8ui	a6, a13, 57
	A_UINT8                 nextIndex;
	struct atheros_node     *pSib = ATH_NODE_ATHEROS(an);
	TX_RATE_CTRL            *pRc = (TX_RATE_CTRL *)(pSib);
    
	if (minRate) {
		for (j = RATE_TABLE_11N_SIZE; j > 0; j-- ) {
  90caa6:	659fe4        	bnez	a9, 90ca8e <rcRateFind_11n+0x1ea>
  90caa9:	600038        	j	90cae5 <rcRateFind_11n+0x241>
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  90caac:	dd80      	mov.n	a13, a8
  90caae:	7b82e3        	blt	a8, a11, 90ca95 <rcRateFind_11n+0x1f1>
  90cab1:	600030        	j	90cae5 <rcRateFind_11n+0x241>
		A_UINT8 minRate;

		tryNum  = ((i + 1) == numRates) ? numTries - (tryPerRate * i) : tryPerRate ;
		minRate = (((i + 1) == numRates) && (rcflag & ATH_RC_MINRATE_LASTRATE)) ? 1 : 0;

		nrix = rcRateGetIndex(sc, an, pRateTable, nrix, stepDnInc, minRate);
  90cab4:	881d      	l32i.n	a8, a1, 52
  90cab6:	080a4f        	extui	a10, a8, 0, 16
  90cab9:	60001c        	j	90cad9 <rcRateFind_11n+0x235>
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
		if (pRc->validRateIndex[i] == curValidTxRate) {
  90cabc:	2e903b        	l8ui	a14, a9, 59
  90cabf:	b188      	addi.n	a8, a8, 1
  90cac1:	b199      	addi.n	a9, a9, 1
  90cac3:	76e909        	bne	a14, a6, 90cad0 <rcRateFind_11n+0x22c>
			*pNextIndex = pRc->validRateIndex[i-1];
  90cac6:	ad7d      	add.n	a13, a7, a13
  90cac8:	26d039        	l8ui	a6, a13, 57
			} else {
				break;
			}
		}
	} else {
		for (j = stepDown; j > 0; j-- ) {
  90cacb:	b0aa      	addi.n	a10, a10, -1
  90cacd:	600008        	j	90cad9 <rcRateFind_11n+0x235>
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  90cad0:	dd80      	mov.n	a13, a8
  90cad2:	7b82e6        	blt	a8, a11, 90cabc <rcRateFind_11n+0x218>
  90cad5:	60000c        	j	90cae5 <rcRateFind_11n+0x241>
  90cad8:	00c8a8        	excw
  90cadb:	2b7039        	l8ui	a11, a7, 57
  90cade:	d970      	mov.n	a9, a7
  90cae0:	c081      	movi.n	a8, 1
  90cae2:	63ffea        	j	90cad0 <rcRateFind_11n+0x22c>

		nrix = rcRateGetIndex(sc, an, pRateTable, nrix, stepDnInc, minRate);

		/* All other rates in the series have RTS enabled */
		rcRateSetseries(pRateTable, &series[i], tryNum,
				nrix, TRUE, asc->tx_chainmask, asn->stbc);
  90cae5:	27221d        	l32i	a7, a2, 116
		minRate = (((i + 1) == numRates) && (rcflag & ATH_RC_MINRATE_LASTRATE)) ? 1 : 0;

		nrix = rcRateGetIndex(sc, an, pRateTable, nrix, stepDnInc, minRate);

		/* All other rates in the series have RTS enabled */
		rcRateSetseries(pRateTable, &series[i], tryNum,
  90cae8:	8918      	l32i.n	a9, a1, 32
  90caea:	07d751        	extui	a7, a7, 29, 2
  90caed:	9710      	s32i.n	a7, a1, 0
  90caef:	055b09        	addx2	a11, a5, a5
  90caf2:	8f93      	l32i.n	a15, a9, 12
  90caf4:	8a14      	l32i.n	a10, a1, 16
  90caf6:	03bb0a        	addx4	a11, a11, a3
  90caf9:	dd60      	mov.n	a13, a6
  90cafb:	c0e1      	movi.n	a14, 1
  90cafd:	5bfdab        	call8	90c1ac <rcRateSetseries>
  90cb00:	8815      	l32i.n	a8, a1, 20
  90cb02:	8916      	l32i.n	a9, a1, 24
	/* Set the choosen rate. No RTS for first series entry. */
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
			nrix, FALSE, asc->tx_chainmask, asn->stbc);

	/* Fill in the other rates for multirate retry */
	for (; i < numRates; i++) {
  90cb04:	b155      	addi.n	a5, a5, 1
  90cb06:	09870c        	sub	a7, a8, a9
  90cb09:	070847        	extui	a8, a7, 0, 8
  90cb0c:	050547        	extui	a5, a5, 0, 8
  90cb0f:	9815      	s32i.n	a8, a1, 20
  90cb11:	891b      	l32i.n	a9, a1, 44
  90cb13:	795a02        	bge	a5, a9, 90cb19 <rcRateFind_11n+0x275>
  90cb16:	63ff52        	j	90ca6c <rcRateFind_11n+0x1c8>
	 *    {MCS2, MCS1, MCS0, MCS0}.
	 * When first rate in series is MCS3 in HT20 @ 2.4GHz, series should look like:
	 *    {MCS3, MCS2, MCS1, MCS1}
	 * So, set fourth rate in series to be same as third one for above conditions.
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
  90cb19:	8817      	l32i.n	a8, a1, 28
  90cb1b:	2282c2        	l32i	a2, a8, 0x308
  90cb1e:	69215a        	bnei	a2, 1, 90cb7c <rcRateFind_11n+0x2d8>
		dot11Rate = pRateTable->info[rix].dot11Rate;
  90cb21:	04470a        	addx4	a7, a4, a4
  90cb24:	8914      	l32i.n	a9, a1, 16
  90cb26:	047709        	addx2	a7, a7, a4
  90cb29:	09770a        	addx4	a7, a7, a9
  90cb2c:	26701e        	l8ui	a6, a7, 30
		phy = pRateTable->info[rix].phy;
  90cb2f:	277010        	l8ui	a7, a7, 16
		if (i == 4 &&
  90cb32:	695446        	bnei	a5, 4, 90cb7c <rcRateFind_11n+0x2d8>
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) || 
  90cb35:	c050      	movi.n	a5, 0
  90cb37:	287cfa        	addi	a8, a7, -6
  90cb3a:	da50      	mov.n	a10, a5
  90cb3c:	082a38        	moveqz	a10, a2, a8
	 * So, set fourth rate in series to be same as third one for above conditions.
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
		dot11Rate = pRateTable->info[rix].dot11Rate;
		phy = pRateTable->info[rix].phy;
		if (i == 4 &&
  90cb3f:	0a0847        	extui	a8, a10, 0, 8
  90cb42:	75810b        	beq	a8, a5, 90cb51 <rcRateFind_11n+0x2ad>
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) || 
  90cb45:	286cfe        	addi	a8, a6, -2
  90cb48:	085239        	movnez	a2, a5, a8
	 * So, set fourth rate in series to be same as third one for above conditions.
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
		dot11Rate = pRateTable->info[rix].dot11Rate;
		phy = pRateTable->info[rix].phy;
		if (i == 4 &&
  90cb4b:	020247        	extui	a2, a2, 0, 8
  90cb4e:	75291a        	bne	a2, a5, 90cb6c <rcRateFind_11n+0x2c8>
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) || 
		     (dot11Rate == 3 && phy == WLAN_RC_PHY_HT_20_SS))) 
  90cb51:	c020      	movi.n	a2, 0
  90cb53:	277cfc        	addi	a7, a7, -4
  90cb56:	c051      	movi.n	a5, 1
  90cb58:	dd20      	mov.n	a13, a2
  90cb5a:	075d38        	moveqz	a13, a5, a7
  90cb5d:	0dd702        	or	a7, a13, a13
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
		dot11Rate = pRateTable->info[rix].dot11Rate;
		phy = pRateTable->info[rix].phy;
		if (i == 4 &&
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) || 
  90cb60:	72d118        	beq	a13, a2, 90cb7c <rcRateFind_11n+0x2d8>
		     (dot11Rate == 3 && phy == WLAN_RC_PHY_HT_20_SS))) 
  90cb63:	266cfd        	addi	a6, a6, -3
  90cb66:	065238        	moveqz	a2, a5, a6
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
		dot11Rate = pRateTable->info[rix].dot11Rate;
		phy = pRateTable->info[rix].phy;
		if (i == 4 &&
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) || 
  90cb69:	64200f        	beqz	a2, 90cb7c <rcRateFind_11n+0x2d8>
		     (dot11Rate == 3 && phy == WLAN_RC_PHY_HT_20_SS))) 
		{
			series[3].rix = series[2].rix;
  90cb6c:	223018        	l8ui	a2, a3, 24
  90cb6f:	223424        	s8i	a2, a3, 36
			series[3].flags = series[2].flags;
  90cb72:	22301b        	l8ui	a2, a3, 27
  90cb75:	223427        	s8i	a2, a3, 39
			series[3].max4msframelen = series[2].max4msframelen;
  90cb78:	8237      	l32i.n	a2, a3, 28
  90cb7a:	923a      	s32i.n	a2, a3, 40
	/*
	 * 2009/02/06
	 * AP91 Kite: NetGear OTA location-4 downlink.
	 *            Enable RTS/CTS at MCS 3-0 for downlink throughput.
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
  90cb7c:	8817      	l32i.n	a8, a1, 28
  90cb7e:	2282c2        	l32i	a2, a8, 0x308
  90cb81:	69211b        	bnei	a2, 1, 90cba0 <rcRateFind_11n+0x2fc>
		dot11Rate = pRateTable->info[rix].dot11Rate;
  90cb84:	04420a        	addx4	a2, a4, a4
  90cb87:	8914      	l32i.n	a9, a1, 16
  90cb89:	042409        	addx2	a4, a2, a4
  90cb8c:	09440a        	addx4	a4, a4, a9
		if (dot11Rate <= 3 ) {
  90cb8f:	22401e        	l8ui	a2, a4, 30
  90cb92:	6f240a        	bgeui	a2, 4, 90cba0 <rcRateFind_11n+0x2fc>
			series[0].flags |= ATH_RC_RTSCTS_FLAG;         
  90cb95:	243003        	l8ui	a4, a3, 3
  90cb98:	c120      	movi.n	a2, 16
  90cb9a:	024202        	or	a2, a4, a2
  90cb9d:	223403        	s8i	a2, a3, 3
  90cba0:	d10f      	retw.n
	...

0090cba4 <rcUpdate_11n>:
void rcUpdate_11n(struct ath_softc_tgt *sc, struct ath_node_target *an,
		  A_UINT8 curTxAnt, 
		  int finalTSIdx, int Xretries,
		  struct ath_rc_series rcs[], int nFrames, 
		  int nBad, int long_retry)
{
  90cba4:	6c1008        	entry	a1, 64
  90cba7:	d920      	mov.n	a9, a2
	A_UINT32 series = 0;
	A_UINT32 rix;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90cba9:	2492c2        	l32i	a4, a9, 0x308
  90cbac:	222248        	l32i	a2, a2, 0x120
void rcUpdate_11n(struct ath_softc_tgt *sc, struct ath_node_target *an,
		  A_UINT8 curTxAnt, 
		  int finalTSIdx, int Xretries,
		  struct ath_rc_series rcs[], int nFrames, 
		  int nBad, int long_retry)
{
  90cbaf:	d870      	mov.n	a8, a7
	A_UINT32 series = 0;
	A_UINT32 rix;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90cbb1:	02420a        	addx4	a2, a4, a2
  90cbb4:	8421      	l32i.n	a4, a2, 4
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
  90cbb6:	223282        	l32i	a2, a3, 0x208
  90cbb9:	9215      	s32i.n	a2, a1, 20

	/*
	 * If the first rate is not the final index, there are intermediate rate failures
	 * to be processed.
	 */
	if (finalTSIdx != 0) {
  90cbbb:	6450aa        	beqz	a5, 90cc69 <rcUpdate_11n+0xc5>
				} else {
					rix = pRateTable->info[rcs[series].rix].baseIndex;
				}

				/* FIXME:XXXX, too many args! */
				rcUpdate_ht(sc, an, rix, Xretries? 1 : 2, rcs[series].tries, 
  90cbbe:	c0a1      	movi.n	a10, 1
  90cbc0:	9a14      	s32i.n	a10, a1, 16
  90cbc2:	8b14      	l32i.n	a11, a1, 16
  90cbc4:	c0a2      	movi.n	a10, 2
  90cbc6:	06ab38        	moveqz	a11, a10, a6

	/*
	 * If the first rate is not the final index, there are intermediate rate failures
	 * to be processed.
	 */
	if (finalTSIdx != 0) {
  90cbc9:	c020      	movi.n	a2, 0
				} else {
					rix = pRateTable->info[rcs[series].rix].baseIndex;
				}

				/* FIXME:XXXX, too many args! */
				rcUpdate_ht(sc, an, rix, Xretries? 1 : 2, rcs[series].tries, 
  90cbcb:	9b14      	s32i.n	a11, a1, 16
  90cbcd:	60008c        	j	90cc5d <rcUpdate_11n+0xb9>
  90cbd0:	002e70        	excw
	 */
	if (finalTSIdx != 0) {

		/* Process intermediate rates that failed.*/
		for (series = 0; series < finalTSIdx ; series++) {
			if (rcs[series].tries != 0) {
  90cbd3:	0164e0        	excw
  90cbd6:	812b      	l32i.n	a1, a2, 44
				flags = rcs[series].flags;
  90cbd8:	7003c0        	bltu	a0, a0, 90cb9c <rcRateFind_11n+0x2f8>
				/* If HT40 and we have switched mode from 40 to 20 => don't update */
				if ((flags & ATH_RC_CW40_FLAG) && 
  90cbdb:	c20c      	movi.n	a0, 44
  90cbdd:	ba01      	addi.n	a1, a0, 10
  90cbdf:	c8a9      	beqz.n	a10, 90cbec <rcUpdate_11n+0x48>
				    (pRc->rcPhyMode != (flags & ATH_RC_CW40_FLAG))) {
  90cbe1:	8d15      	l32i.n	a13, a1, 20
  90cbe3:	2cd06c        	l8ui	a12, a13, 108
		/* Process intermediate rates that failed.*/
		for (series = 0; series < finalTSIdx ; series++) {
			if (rcs[series].tries != 0) {
				flags = rcs[series].flags;
				/* If HT40 and we have switched mode from 40 to 20 => don't update */
				if ((flags & ATH_RC_CW40_FLAG) && 
  90cbe6:	7ac102        	beq	a12, a10, 90cbec <rcUpdate_11n+0x48>
  90cbe9:	60010d        	j	90ccfa <rcUpdate_11n+0x156>
				    (pRc->rcPhyMode != (flags & ATH_RC_CW40_FLAG))) {
					return;
				}
				if ((flags & ATH_RC_CW40_FLAG) && (flags & ATH_RC_HT40_SGI_FLAG)) {
  90cbec:	c0c6      	movi.n	a12, 6
  90cbee:	0cbc01        	and	a12, a11, a12
  90cbf1:	69c613        	bnei	a12, 6, 90cc08 <rcUpdate_11n+0x64>
					rix = pRateTable->info[rcs[series].rix].htIndex;
  90cbf4:	2a7000        	l8ui	a10, a7, 0
  90cbf7:	0aab0a        	addx4	a11, a10, a10
  90cbfa:	0aba09        	addx2	a10, a11, a10
  90cbfd:	04aa0a        	addx4	a10, a10, a4
  90cc00:	2ca025        	l8ui	a12, a10, 37
  90cc03:	600039        	j	90cc40 <rcUpdate_11n+0x9c>
  90cc06:	00007d        	excw
				} else if (flags & ATH_RC_HT40_SGI_FLAG) {
  90cc09:	b711      	addi.n	a1, a1, 7
					rix = pRateTable->info[rcs[series].rix].sgiIndex;
  90cc0b:	2a7000        	l8ui	a10, a7, 0
  90cc0e:	0aab0a        	addx4	a11, a10, a10
  90cc11:	0aba09        	addx2	a10, a11, a10
  90cc14:	04aa0a        	addx4	a10, a10, a4
  90cc17:	2ca024        	l8ui	a12, a10, 36
  90cc1a:	600022        	j	90cc40 <rcUpdate_11n+0x9c>
				} else if (flags & ATH_RC_CW40_FLAG) {
  90cc1d:	c9a0      	beqz.n	a10, 90cc31 <rcUpdate_11n+0x8d>
					rix = pRateTable->info[rcs[series].rix].cw40Index;
  90cc1f:	2a7000        	l8ui	a10, a7, 0
  90cc22:	0aab0a        	addx4	a11, a10, a10
  90cc25:	0aba09        	addx2	a10, a11, a10
  90cc28:	04aa0a        	addx4	a10, a10, a4
  90cc2b:	2ca023        	l8ui	a12, a10, 35
  90cc2e:	60000e        	j	90cc40 <rcUpdate_11n+0x9c>
				} else {
					rix = pRateTable->info[rcs[series].rix].baseIndex;
  90cc31:	2a7000        	l8ui	a10, a7, 0
  90cc34:	0aab0a        	addx4	a11, a10, a10
  90cc37:	0aba09        	addx2	a10, a11, a10
  90cc3a:	04aa0a        	addx4	a10, a10, a4
  90cc3d:	2ca022        	l8ui	a12, a10, 34
				}

				/* FIXME:XXXX, too many args! */
				rcUpdate_ht(sc, an, rix, Xretries? 1 : 2, rcs[series].tries, 
  90cc40:	2a1210        	l32i	a10, a1, 64
  90cc43:	8d14      	l32i.n	a13, a1, 16
  90cc45:	0a0f4f        	extui	a15, a10, 0, 16
  90cc48:	9f10      	s32i.n	a15, a1, 0
  90cc4a:	da90      	mov.n	a10, a9
  90cc4c:	db30      	mov.n	a11, a3
  90cc4e:	9817      	s32i.n	a8, a1, 28
  90cc50:	9916      	s32i.n	a9, a1, 24
  90cc52:	5bfda3        	call8	90c2e0 <rcUpdate_ht$isra$4>
  90cc55:	8916      	l32i.n	a9, a1, 24
  90cc57:	8817      	l32i.n	a8, a1, 28
	 * to be processed.
	 */
	if (finalTSIdx != 0) {

		/* Process intermediate rates that failed.*/
		for (series = 0; series < finalTSIdx ; series++) {
  90cc59:	b122      	addi.n	a2, a2, 1
  90cc5b:	bc77      	addi.n	a7, a7, 12
  90cc5d:	752b02        	bgeu	a2, a5, 90cc63 <rcUpdate_11n+0xbf>
  90cc60:	63ff6d        	j	90cbd1 <rcUpdate_11n+0x2d>
  90cc63:	600011        	j	90cc78 <rcUpdate_11n+0xd4>
  90cc66:	000000        	ill
		/*
		 * Handle the special case of MIMO PS burst, where the second aggregate is sent
		 *  out with only one rate and one try. Treating it as an excessive retry penalizes
		 * the rate inordinately.
		 */
		if (rcs[0].tries == 1 && Xretries == 1) {
  90cc69:	277001        	l8ui	a7, a7, 1
		  A_UINT8 curTxAnt, 
		  int finalTSIdx, int Xretries,
		  struct ath_rc_series rcs[], int nFrames, 
		  int nBad, int long_retry)
{
	A_UINT32 series = 0;
  90cc6c:	d250      	mov.n	a2, a5
		/*
		 * Handle the special case of MIMO PS burst, where the second aggregate is sent
		 *  out with only one rate and one try. Treating it as an excessive retry penalizes
		 * the rate inordinately.
		 */
		if (rcs[0].tries == 1 && Xretries == 1) {
  90cc6e:	697106        	bnei	a7, 1, 90cc78 <rcUpdate_11n+0xd4>
			Xretries = 2;
  90cc71:	b067      	addi.n	a7, a6, -1
  90cc73:	c052      	movi.n	a5, 2
  90cc75:	075638        	moveqz	a6, a5, a7
		}
	}

	flags = rcs[series].flags;
  90cc78:	022209        	addx2	a2, a2, a2
  90cc7b:	08280a        	addx4	a8, a2, a8
  90cc7e:	278003        	l8ui	a7, a8, 3
	/* If HT40 and we have switched mode from 40 to 20 => don't update */
	if ((flags & ATH_RC_CW40_FLAG) && 
  90cc81:	c052      	movi.n	a5, 2
  90cc83:	057501        	and	a5, a7, a5
  90cc86:	c856      	beqz.n	a5, 90cc90 <rcUpdate_11n+0xec>
	    (pRc->rcPhyMode != (flags & ATH_RC_CW40_FLAG))) {
  90cc88:	8b15      	l32i.n	a11, a1, 20
  90cc8a:	22b06c        	l8ui	a2, a11, 108
		}
	}

	flags = rcs[series].flags;
	/* If HT40 and we have switched mode from 40 to 20 => don't update */
	if ((flags & ATH_RC_CW40_FLAG) && 
  90cc8d:	752969        	bne	a2, a5, 90ccfa <rcUpdate_11n+0x156>
	    (pRc->rcPhyMode != (flags & ATH_RC_CW40_FLAG))) {
		return;
	}
	if ((flags & ATH_RC_CW40_FLAG) && (flags & ATH_RC_HT40_SGI_FLAG)) {
  90cc90:	c026      	movi.n	a2, 6
  90cc92:	027201        	and	a2, a7, a2
  90cc95:	692613        	bnei	a2, 6, 90ccac <rcUpdate_11n+0x108>
		rix = pRateTable->info[rcs[series].rix].htIndex;
  90cc98:	228000        	l8ui	a2, a8, 0
  90cc9b:	02250a        	addx4	a5, a2, a2
  90cc9e:	025209        	addx2	a2, a5, a2
  90cca1:	04240a        	addx4	a4, a2, a4
  90cca4:	2c4025        	l8ui	a12, a4, 37
  90cca7:	600035        	j	90cce0 <rcUpdate_11n+0x13c>
  90ccaa:	000022        	excw
  90ccad:	8000      	l32i.n	a0, a0, 0
	} else if (flags & ATH_RC_HT40_SGI_FLAG) {
  90ccaf:	7d770e        	bbci	a7, 29, 90ccc1 <rcUpdate_11n+0x11d>
		rix = pRateTable->info[rcs[series].rix].sgiIndex;
  90ccb2:	02250a        	addx4	a5, a2, a2
  90ccb5:	025209        	addx2	a2, a5, a2
  90ccb8:	04240a        	addx4	a4, a2, a4
  90ccbb:	2c4024        	l8ui	a12, a4, 36
  90ccbe:	60001e        	j	90cce0 <rcUpdate_11n+0x13c>
	} else if (flags & ATH_RC_CW40_FLAG) {
  90ccc1:	c85f      	beqz.n	a5, 90ccd4 <rcUpdate_11n+0x130>
		rix = pRateTable->info[rcs[series].rix].cw40Index;
  90ccc3:	02250a        	addx4	a5, a2, a2
  90ccc6:	025209        	addx2	a2, a5, a2
  90ccc9:	04240a        	addx4	a4, a2, a4
  90cccc:	2c4023        	l8ui	a12, a4, 35
  90cccf:	60000d        	j	90cce0 <rcUpdate_11n+0x13c>
  90ccd2:	000002        	or	a0, a0, a0
	} else {
		rix = pRateTable->info[rcs[series].rix].baseIndex;
  90ccd5:	250a02        	movi	a5, 2
  90ccd8:	520904        	call0	88f0ec <_bss_end+0x37c1dc>
  90ccdb:	240a2c        	movi	a4, 44
  90ccde:	402222        	excw
	}

	/* FIXME:XXXX, too many args! */
	rcUpdate_ht(sc, an, rix, Xretries, long_retry, curTxAnt, 
  90cce1:	12112e        	l32r	a2, 8d119c <_bss_end+0x3be28c>
  90cce4:	121202        	l32r	a2, 8d14ec <_bss_end+0x3be5dc>
  90cce7:	024f92        	excw
  90ccea:	102212        	l32r	a0, 8d5534 <_bss_end+0x3c2624>
  90cced:	10da90        	l32r	a0, 903730 <memset+0x1c8e8>
  90ccf0:	db30      	mov.n	a11, a3
  90ccf2:	dd60      	mov.n	a13, a6
  90ccf4:	020f4f        	extui	a15, a2, 0, 16
  90ccf7:	5bfd7a        	call8	90c2e0 <rcUpdate_ht$isra$4>
  90ccfa:	d10f      	retw.n

0090ccfc <ath_tx_status_update_rate>:

void ath_tx_status_update_rate(struct ath_softc_tgt *sc,
			       struct ath_rc_series rcs[],
			       int series,
			       WMI_TXSTATUS_EVENT *txs)
{
  90ccfc:	6c1004        	entry	a1, 32
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];

	/* HT Rate */
	if (pRateTable->info[rcs[series].rix].rateCode & 0x80) {
  90ccff:	044409        	addx2	a4, a4, a4
			       struct ath_rc_series rcs[],
			       int series,
			       WMI_TXSTATUS_EVENT *txs)
{
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90cd02:	282248        	l32i	a8, a2, 0x120

	/* HT Rate */
	if (pRateTable->info[rcs[series].rix].rateCode & 0x80) {
  90cd05:	03430a        	addx4	a3, a4, a3
			       struct ath_rc_series rcs[],
			       int series,
			       WMI_TXSTATUS_EVENT *txs)
{
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90cd08:	2222c2        	l32i	a2, a2, 0x308

	/* HT Rate */
	if (pRateTable->info[rcs[series].rix].rateCode & 0x80) {
  90cd0b:	293000        	l8ui	a9, a3, 0
			       struct ath_rc_series rcs[],
			       int series,
			       WMI_TXSTATUS_EVENT *txs)
{
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90cd0e:	08220a        	addx4	a2, a2, a8
  90cd11:	8821      	l32i.n	a8, a2, 4

	/* HT Rate */
	if (pRateTable->info[rcs[series].rix].rateCode & 0x80) {
  90cd13:	09920a        	addx4	a2, a9, a9
  90cd16:	092209        	addx2	a2, a2, a9
  90cd19:	08220a        	addx4	a2, a2, a8
  90cd1c:	24201c        	l8ui	a4, a2, 28
  90cd1f:	285000        	l8ui	a8, a5, 0
  90cd22:	004432        	sext	a4, a4, 7
  90cd25:	222c10        	addi	a2, a2, 16
  90cd28:	674045        	bgez	a4, 90cd71 <ath_tx_status_update_rate+0x75>
		txs->txstatus[txs->cnt].ts_rate |= SM(pRateTable->info[rcs[series].rix].dot11Rate,
  90cd2b:	088909        	addx2	a9, a8, a8
  90cd2e:	a959      	add.n	a9, a5, a9
  90cd30:	22200e        	l8ui	a2, a2, 14
  90cd33:	249002        	l8ui	a4, a9, 2
  90cd36:	020243        	extui	a2, a2, 0, 4
  90cd39:	042202        	or	a2, a2, a4
  90cd3c:	229402        	s8i	a2, a9, 2
								       ATH9K_HTC_TXSTAT_RATE);
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_MCS;
  90cd3f:	229003        	l8ui	a2, a9, 3
  90cd42:	c048      	movi.n	a4, 8
  90cd44:	042402        	or	a4, a2, a4
  90cd47:	249403        	s8i	a4, a9, 3

		if (rcs[series].flags & ATH_RC_CW40_FLAG)
  90cd4a:	243003        	l8ui	a4, a3, 3
  90cd4d:	7e4707        	bbci	a4, 30, 90cd58 <ath_tx_status_update_rate+0x5c>
			txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_CW40;
  90cd50:	c148      	movi.n	a4, 24
  90cd52:	042202        	or	a2, a2, a4
  90cd55:	229403        	s8i	a2, a9, 3

		if (rcs[series].flags & ATH_RC_HT40_SGI_FLAG)
  90cd58:	223003        	l8ui	a2, a3, 3
  90cd5b:	7d2723        	bbci	a2, 29, 90cd82 <ath_tx_status_update_rate+0x86>
			txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_SGI;
  90cd5e:	088809        	addx2	a8, a8, a8
  90cd61:	a858      	add.n	a8, a5, a8
  90cd63:	248003        	l8ui	a4, a8, 3
  90cd66:	c220      	movi.n	a2, 32
  90cd68:	024202        	or	a2, a4, a2
  90cd6b:	228403        	s8i	a2, a8, 3
  90cd6e:	600010        	j	90cd82 <ath_tx_status_update_rate+0x86>

	} else {
		txs->txstatus[txs->cnt].ts_rate |= SM(rcs[series].rix, ATH9K_HTC_TXSTAT_RATE);
  90cd71:	088809        	addx2	a8, a8, a8
  90cd74:	a858      	add.n	a8, a5, a8
  90cd76:	228002        	l8ui	a2, a8, 2
  90cd79:	090943        	extui	a9, a9, 0, 4
  90cd7c:	029902        	or	a9, a9, a2
  90cd7f:	298402        	s8i	a9, a8, 2
	}

	if (rcs[series].flags & ATH_RC_RTSCTS_FLAG)
  90cd82:	223003        	l8ui	a2, a3, 3
  90cd85:	7b2713        	bbci	a2, 27, 90cd9c <ath_tx_status_update_rate+0xa0>
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_RTC_CTS;
  90cd88:	225000        	l8ui	a2, a5, 0
  90cd8b:	022209        	addx2	a2, a2, a2
  90cd8e:	a255      	add.n	a5, a5, a2
  90cd90:	235003        	l8ui	a3, a5, 3
  90cd93:	220a04        	movi	a2, 4
  90cd96:	023202        	or	a2, a3, a2
  90cd99:	225403        	s8i	a2, a5, 3
  90cd9c:	d10f      	retw.n
	...

0090cda0 <ath_rate_attach>:

}

struct ath_ratectrl *
ath_rate_attach(struct ath_softc_tgt *sc)
{
  90cda0:	6c1004        	entry	a1, 32
  90cda3:	136913        	l32r	a3, 8e71f0 <memset+0x3a8>
  90cda6:	c0a0      	movi.n	a10, 0
  90cda8:	223252        	l32i	a2, a3, 0x148
  90cdab:	c1b8      	movi.n	a11, 24
  90cdad:	0b2000        	callx8	a2
  90cdb0:	d2a0      	mov.n	a2, a10
	struct atheros_softc *asc;

	asc = adf_os_mem_alloc(sizeof(struct atheros_softc));
	if (asc == NULL)
  90cdb2:	c9a6      	beqz.n	a10, 90cdcc <ath_rate_attach+0x2c>

/* set a memory buffer */
static inline void
__adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
	A_MEMSET(buf, b, size);
  90cdb4:	8334      	l32i.n	a3, a3, 16
  90cdb6:	c0b0      	movi.n	a11, 0
  90cdb8:	c1c8      	movi.n	a12, 24
  90cdba:	0b3000        	callx8	a3
		return NULL;

	adf_os_mem_set(asc, 0, sizeof(struct atheros_softc));
	asc->arc.arc_space = sizeof(struct atheros_node);
  90cdbd:	230a78        	movi	a3, 120
  90cdc0:	9320      	s32i.n	a3, a2, 0

	ar5416AttachRateTables(asc);
  90cdc2:	da20      	mov.n	a10, a2

	asc->tx_chainmask = 1;
  90cdc4:	230a01        	movi	a3, 1
		return NULL;

	adf_os_mem_set(asc, 0, sizeof(struct atheros_softc));
	asc->arc.arc_space = sizeof(struct atheros_node);

	ar5416AttachRateTables(asc);
  90cdc7:	580887        	call8	90efe4 <ar5416AttachRateTables>

	asc->tx_chainmask = 1;
  90cdca:	9323      	s32i.n	a3, a2, 12
    
	return &asc->arc;
}
  90cdcc:	d10f      	retw.n
	...

0090cdd0 <ath_rate_findrate>:
                  int numRates,
                  int stepDnInc,
                  unsigned int rcflag,
                  struct ath_rc_series series[],
                  int *isProbe)
{
  90cdd0:	6c1006        	entry	a1, 48
  90cdd3:	881f      	l32i.n	a8, a1, 60
	*isProbe = 0;
  90cdd5:	c0e0      	movi.n	a14, 0

	if (!numRates || !numTries) {
  90cdd7:	c091      	movi.n	a9, 1
                  int stepDnInc,
                  unsigned int rcflag,
                  struct ath_rc_series series[],
                  int *isProbe)
{
	*isProbe = 0;
  90cdd9:	9e80      	s32i.n	a14, a8, 0

	if (!numRates || !numTries) {
  90cddb:	079e38        	moveqz	a14, a9, a7
                  int numRates,
                  int stepDnInc,
                  unsigned int rcflag,
                  struct ath_rc_series series[],
                  int *isProbe)
{
  90cdde:	dd70      	mov.n	a13, a7
  90cde0:	da20      	mov.n	a10, a2
  90cde2:	db30      	mov.n	a11, a3
  90cde4:	dc60      	mov.n	a12, a6
	*isProbe = 0;

	if (!numRates || !numTries) {
  90cde6:	cde0      	bnez.n	a14, 90cdfa <ath_rate_findrate+0x2a>
  90cde8:	06e939        	movnez	a9, a14, a6
  90cdeb:	cc9b      	bnez.n	a9, 90cdfa <ath_rate_findrate+0x2a>
	*isProbe = 0;
	if (!numRates || !numTries) {
		return;
	}

	rcRateFind_11n(sc, an, numTries, numRates, stepDnInc, rcflag, series, isProbe);
  90cded:	891e      	l32i.n	a9, a1, 56
  90cdef:	8e1c      	l32i.n	a14, a1, 48
  90cdf1:	8f1d      	l32i.n	a15, a1, 52
  90cdf3:	9910      	s32i.n	a9, a1, 0
  90cdf5:	9811      	s32i.n	a8, a1, 4
  90cdf7:	5bfeab        	call8	90c8a4 <rcRateFind_11n>
  90cdfa:	d10f      	retw.n

0090cdfc <ath_rate_tx_complete>:
ath_rate_tx_complete(struct ath_softc_tgt *sc,
		     struct ath_node_target *an,
		     struct ath_tx_desc *ds,
		     struct ath_rc_series rcs[], 
		     int nframes, int nbad)
{
  90cdfc:	6c1006        	entry	a1, 48
			 int nframes, int nbad)
{
	int finalTSIdx = ds->ds_txstat.ts_rate;
	int tx_status = 0;

	if ((ds->ds_txstat.ts_status & HAL_TXERR_XRETRY) ||
  90cdff:	294066        	l8ui	a9, a4, 102
  90ce02:	c085      	movi.n	a8, 5
  90ce04:	089801        	and	a8, a9, a8
ath_rate_tx_complete(struct ath_softc_tgt *sc,
		     struct ath_node_target *an,
		     struct ath_tx_desc *ds,
		     struct ath_rc_series rcs[], 
		     int nframes, int nbad)
{
  90ce07:	da20      	mov.n	a10, a2
  90ce09:	db30      	mov.n	a11, a3
  90ce0b:	df50      	mov.n	a15, a5
			 struct ath_node_target *an,
			 struct ath_tx_desc *ds,
			 struct ath_rc_series rcs[], 
			 int nframes, int nbad)
{
	int finalTSIdx = ds->ds_txstat.ts_rate;
  90ce0d:	2d4068        	l8ui	a13, a4, 104

	if ((ds->ds_txstat.ts_status & HAL_TXERR_XRETRY) ||
	    (ds->ds_txstat.ts_status & HAL_TXERR_FIFO) || 
	    (ds->ds_txstat.ts_flags & HAL_TX_DATA_UNDERRUN) ||
	    (ds->ds_txstat.ts_flags & HAL_TX_DELIM_UNDERRUN)) {
		tx_status = 1;
  90ce10:	c0e1      	movi.n	a14, 1
			 int nframes, int nbad)
{
	int finalTSIdx = ds->ds_txstat.ts_rate;
	int tx_status = 0;

	if ((ds->ds_txstat.ts_status & HAL_TXERR_XRETRY) ||
  90ce12:	65800b        	bnez	a8, 90ce21 <ath_rate_tx_complete+0x25>
	    (ds->ds_txstat.ts_status & HAL_TXERR_FIFO) || 
	    (ds->ds_txstat.ts_flags & HAL_TX_DATA_UNDERRUN) ||
  90ce15:	2c4067        	l8ui	a12, a4, 103
  90ce18:	290a18        	movi	a9, 24
  90ce1b:	09c901        	and	a9, a12, a9
  90ce1e:	098e38        	moveqz	a14, a8, a9
	    (ds->ds_txstat.ts_flags & HAL_TX_DELIM_UNDERRUN)) {
		tx_status = 1;
	}

	rcUpdate_11n(sc, an,
  90ce21:	2c4073        	l8ui	a12, a4, 115
  90ce24:	9610      	s32i.n	a6, a1, 0
  90ce26:	9711      	s32i.n	a7, a1, 4
  90ce28:	244071        	l8ui	a4, a4, 113
  90ce2b:	9412      	s32i.n	a4, a1, 8
  90ce2d:	5bff5d        	call8	90cba4 <rcUpdate_11n>
  90ce30:	d10f      	retw.n
	...

0090ce34 <ath_rate_newassoc>:
}

void
ath_rate_newassoc(struct ath_softc_tgt *sc, struct ath_node_target *an, int isnew, 
		  unsigned int capflag, struct ieee80211_rate *rs)
{
  90ce34:	6c1004        	entry	a1, 32
	ath_rate_newassoc_11n(sc, an, isnew, capflag, rs);
  90ce37:	da20      	mov.n	a10, a2
  90ce39:	db30      	mov.n	a11, a3
  90ce3b:	dc40      	mov.n	a12, a4
  90ce3d:	dd50      	mov.n	a13, a5
  90ce3f:	de60      	mov.n	a14, a6
  90ce41:	5bfe8d        	call8	90c878 <ath_rate_newassoc_11n>
  90ce44:	d10f      	retw.n
	...

0090ce48 <ath_rate_node_update>:
void ath_rate_node_update(struct ath_softc_tgt *sc,
			  struct ath_node_target *an,
			  a_int32_t isnew,
			  a_uint32_t capflag,
			  struct ieee80211_rate *rs)
{
  90ce48:	6c1004        	entry	a1, 32

void
ath_rate_newassoc(struct ath_softc_tgt *sc, struct ath_node_target *an, int isnew, 
		  unsigned int capflag, struct ieee80211_rate *rs)
{
	ath_rate_newassoc_11n(sc, an, isnew, capflag, rs);
  90ce4b:	da20      	mov.n	a10, a2
  90ce4d:	db30      	mov.n	a11, a3
  90ce4f:	dc40      	mov.n	a12, a4
  90ce51:	dd50      	mov.n	a13, a5
  90ce53:	de60      	mov.n	a14, a6
  90ce55:	5bfe88        	call8	90c878 <ath_rate_newassoc_11n>
  90ce58:	d10f      	retw.n
	...

0090ce5c <ath_rate_newstate>:
ath_rate_newstate(struct ath_softc_tgt *sc,
		  struct ieee80211vap_target *vap,
		  enum ieee80211_state state,
		  a_uint32_t capflag,
		  struct ieee80211_rate *rs)
{
  90ce5c:	6c1004        	entry	a1, 32
	struct ieee80211_node_target *ni = vap->iv_bss;
	struct atheros_softc *asc = (struct atheros_softc *) sc->sc_rc;

	asc->tx_chainmask = sc->sc_ic.ic_tx_chainmask;
  90ce5f:	292d16        	addmi	a9, a2, 0x1600
  90ce62:	282248        	l32i	a8, a2, 0x120
  90ce65:	299026        	l8ui	a9, a9, 38
		  struct ieee80211vap_target *vap,
		  enum ieee80211_state state,
		  a_uint32_t capflag,
		  struct ieee80211_rate *rs)
{
	struct ieee80211_node_target *ni = vap->iv_bss;
  90ce68:	8b34      	l32i.n	a11, a3, 16
ath_rate_newstate(struct ath_softc_tgt *sc,
		  struct ieee80211vap_target *vap,
		  enum ieee80211_state state,
		  a_uint32_t capflag,
		  struct ieee80211_rate *rs)
{
  90ce6a:	da20      	mov.n	a10, a2
	struct ieee80211_node_target *ni = vap->iv_bss;
	struct atheros_softc *asc = (struct atheros_softc *) sc->sc_rc;

	asc->tx_chainmask = sc->sc_ic.ic_tx_chainmask;
  90ce6c:	9983      	s32i.n	a9, a8, 12

void
ath_rate_newassoc(struct ath_softc_tgt *sc, struct ath_node_target *an, int isnew, 
		  unsigned int capflag, struct ieee80211_rate *rs)
{
	ath_rate_newassoc_11n(sc, an, isnew, capflag, rs);
  90ce6e:	c0c1      	movi.n	a12, 1
  90ce70:	dd50      	mov.n	a13, a5
  90ce72:	066e02        	or	a14, a6, a6
  90ce75:	5bfe80        	call8	90c878 <ath_rate_newassoc_11n>
  90ce78:	d10f      	retw.n
	...

0090ce7c <__adf_os_mem_copy>:
    //free(buf,M_DEVBUF);
}

/* move a memory buffer */
static inline void 		__adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
  90ce7c:	6c1004        	entry	a1, 32
    A_MEMCPY(dst,src,size);    
  90ce7f:	186913        	l32r	a8, 8e72cc <memset+0x484>
  90ce82:	da20      	mov.n	a10, a2
  90ce84:	8885      	l32i.n	a8, a8, 20
  90ce86:	db30      	mov.n	a11, a3
  90ce88:	dc40      	mov.n	a12, a4
  90ce8a:	0b8000        	callx8	a8
  90ce8d:	d10f      	retw.n
	...

0090ce90 <ieee80211_anyhdrsize>:
/*
 * Like ieee80211_hdrsize, but handles any type of frame.
 */
static __inline a_int32_t
ieee80211_anyhdrsize(const void *data)
{
  90ce90:	6c1004        	entry	a1, 32
	const struct ieee80211_frame *wh = data;

	if ((wh->i_fc[0]&IEEE80211_FC0_TYPE_MASK) == IEEE80211_FC0_TYPE_CTL) {
  90ce93:	282000        	l8ui	a8, a2, 0
  90ce96:	c09c      	movi.n	a9, 12
  90ce98:	098901        	and	a9, a8, a9
  90ce9b:	699415        	bnei	a9, 4, 90ceb4 <ieee80211_anyhdrsize+0x24>
		switch (wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK) {
  90ce9e:	22faf0        	movi	a2, -16
  90cea1:	028801        	and	a8, a8, a2
  90cea4:	220ac0        	movi	a2, 192
  90cea7:	728105        	beq	a8, a2, 90ceb0 <ieee80211_anyhdrsize+0x20>
  90ceaa:	220ad0        	movi	a2, 208
  90cead:	728927        	bne	a8, a2, 90ced8 <ieee80211_anyhdrsize+0x48>
		case IEEE80211_FC0_SUBTYPE_CTS:
		case IEEE80211_FC0_SUBTYPE_ACK:
			return sizeof(struct ieee80211_frame_ack);
  90ceb0:	c02a      	movi.n	a2, 10
  90ceb2:	d10f      	retw.n
	const struct ieee80211_frame *wh = data;
	a_int32_t size = sizeof(struct ieee80211_frame);

	/* NB: we don't handle control frames */
	adf_os_assert((wh->i_fc[0]&IEEE80211_FC0_TYPE_MASK) != IEEE80211_FC0_TYPE_CTL);
	if ((wh->i_fc[1] & IEEE80211_FC1_DIR_MASK) == IEEE80211_FC1_DIR_DSTODS)
  90ceb4:	2a2001        	l8ui	a10, a2, 1
 */
static __inline a_int32_t
ieee80211_hdrsize(const void *data)
{
	const struct ieee80211_frame *wh = data;
	a_int32_t size = sizeof(struct ieee80211_frame);
  90ceb7:	c19e      	movi.n	a9, 30

	/* NB: we don't handle control frames */
	adf_os_assert((wh->i_fc[0]&IEEE80211_FC0_TYPE_MASK) != IEEE80211_FC0_TYPE_CTL);
	if ((wh->i_fc[1] & IEEE80211_FC1_DIR_MASK) == IEEE80211_FC1_DIR_DSTODS)
  90ceb9:	0a0a41        	extui	a10, a10, 0, 2
 */
static __inline a_int32_t
ieee80211_hdrsize(const void *data)
{
	const struct ieee80211_frame *wh = data;
	a_int32_t size = sizeof(struct ieee80211_frame);
  90cebc:	2aacfd        	addi	a10, a10, -3
  90cebf:	c128      	movi.n	a2, 24
  90cec1:	0a9238        	moveqz	a2, a9, a10

	/* NB: we don't handle control frames */
	adf_os_assert((wh->i_fc[0]&IEEE80211_FC0_TYPE_MASK) != IEEE80211_FC0_TYPE_CTL);
	if ((wh->i_fc[1] & IEEE80211_FC1_DIR_MASK) == IEEE80211_FC1_DIR_DSTODS)
		size += IEEE80211_ADDR_LEN;
	if (IEEE80211_QOS_HAS_SEQ(wh))
  90cec4:	29fa8c        	movi	a9, -116
  90cec7:	098801        	and	a8, a8, a9
		size += sizeof(a_uint16_t);
  90ceca:	2a0a88        	movi	a10, 136
  90cecd:	b229      	addi.n	a9, a2, 2
  90cecf:	0a880c        	sub	a8, a8, a10
  90ced2:	089238        	moveqz	a2, a9, a8
  90ced5:	d10f      	retw.n
  90ced7:	00c120        	excw
			return sizeof(struct ieee80211_frame_ack);
		}
		return sizeof(struct ieee80211_frame_min);
	} else
		return ieee80211_hdrsize(data);
}
  90ceda:	d10f      	retw.n

0090cedc <owl_tgt_tid_init>:
	ath_rate_findrate(sc, an, 1, frameLen, 10, 4, 1,
			  ATH_RC_PROBE_ALLOWED, series, isProbe);
}

static void owl_tgt_tid_init(struct ath_atx_tid *tid)
{
  90cedc:	6c1004        	entry	a1, 32
	int i;

	tid->seq_start  = tid->seq_next = 0;
  90cedf:	c090      	movi.n	a9, 0
	tid->baw_size   = WME_MAX_BA;
  90cee1:	c480      	movi.n	a8, 64

static void owl_tgt_tid_init(struct ath_atx_tid *tid)
{
	int i;

	tid->seq_start  = tid->seq_next = 0;
  90cee3:	292503        	s16i	a9, a2, 6
  90cee6:	292502        	s16i	a9, a2, 4
	tid->baw_size   = WME_MAX_BA;
  90cee9:	282504        	s16i	a8, a2, 8
	tid->baw_head   = tid->baw_tail = 0;
	tid->paused     = 0;
  90ceec:	292434        	s8i	a9, a2, 52
{
	int i;

	tid->seq_start  = tid->seq_next = 0;
	tid->baw_size   = WME_MAX_BA;
	tid->baw_head   = tid->baw_tail = 0;
  90ceef:	c080      	movi.n	a8, 0
	tid->paused     = 0;
	tid->flag       = 0;
  90cef1:	292436        	s8i	a9, a2, 54
	tid->sched      = AH_FALSE;
  90cef4:	292435        	s8i	a9, a2, 53

	asf_tailq_init(&tid->buf_q);
  90cef7:	292c2c        	addi	a9, a2, 44
{
	int i;

	tid->seq_start  = tid->seq_next = 0;
	tid->baw_size   = WME_MAX_BA;
	tid->baw_head   = tid->baw_tail = 0;
  90cefa:	9824      	s32i.n	a8, a2, 16
  90cefc:	9823      	s32i.n	a8, a2, 12
	tid->paused     = 0;
	tid->flag       = 0;
	tid->sched      = AH_FALSE;

	asf_tailq_init(&tid->buf_q);
  90cefe:	982b      	s32i.n	a8, a2, 44
  90cf00:	992c      	s32i.n	a9, a2, 48

	for (i = 0; i < ATH_TID_MAX_BUFS; i++) {
		TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, i);
  90cf02:	2d0a01        	movi	a13, 1
  90cf05:	2cfaff        	movi	a12, -1
  90cf08:	085912        	srai	a9, a8, 5
  90cf0b:	b499      	addi.n	a9, a9, 4
  90cf0d:	02990a        	addx4	a9, a9, a2
  90cf10:	008104        	ssl	a8
  90cf13:	00da1a        	sll	a10, a13
  90cf16:	8b91      	l32i.n	a11, a9, 4
  90cf18:	0aca03        	xor	a10, a12, a10
  90cf1b:	0baa01        	and	a10, a10, a11
  90cf1e:	9a91      	s32i.n	a10, a9, 4
	tid->flag       = 0;
	tid->sched      = AH_FALSE;

	asf_tailq_init(&tid->buf_q);

	for (i = 0; i < ATH_TID_MAX_BUFS; i++) {
  90cf20:	b188      	addi.n	a8, a8, 1
  90cf22:	698ee2        	bnei	a8, 128, 90cf08 <owl_tgt_tid_init+0x2c>
		TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, i);
	}
}
  90cf25:	d10f      	retw.n
	...

0090cf28 <ath_tgt_txq_add_ucast>:

	return 0;
}

static void ath_tgt_txq_add_ucast(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90cf28:	6c1006        	entry	a1, 48
	struct ath_hal *ah = sc->sc_ah;
  90cf2b:	222d05        	addmi	a2, a2, 0x500
  90cf2e:	842b      	l32i.n	a4, a2, 44
	struct ath_txq *txq;
	HAL_STATUS status;
	volatile a_int32_t txe_val;

	adf_os_assert(bf);
  90cf30:	cd35      	bnez.n	a3, 90cf49 <ath_tgt_txq_add_ucast+0x21>
  90cf32:	126913        	l32r	a2, 8e7380 <memset+0x538>
  90cf35:	1a6af9        	l32r	a10, 8e7b1c <memset+0xcd4>
  90cf38:	222212        	l32i	a2, a2, 72
  90cf3b:	1b6afa        	l32r	a11, 8e7b24 <memset+0xcdc>
  90cf3e:	0b2000        	callx8	a2
  90cf41:	126978        	l32r	a2, 8e7524 <memset+0x6dc>
  90cf44:	0c0200        	memw
  90cf47:	8220      	l32i.n	a2, a2, 0

	txq = bf->bf_txq;

	status = ah->ah_procTxDesc(ah, bf->bf_lastds);
  90cf49:	28421a        	l32i	a8, a4, 104
  90cf4c:	8b3e      	l32i.n	a11, a3, 56
  90cf4e:	da40      	mov.n	a10, a4
	HAL_STATUS status;
	volatile a_int32_t txe_val;

	adf_os_assert(bf);

	txq = bf->bf_txq;
  90cf50:	223220        	l32i	a2, a3, 128

	status = ah->ah_procTxDesc(ah, bf->bf_lastds);
  90cf53:	0b8000        	callx8	a8

	ATH_TXQ_INSERT_TAIL(txq, bf, bf_list);
  90cf56:	c080      	movi.n	a8, 0
  90cf58:	9839      	s32i.n	a8, a3, 36
  90cf5a:	8823      	l32i.n	a8, a2, 12
  90cf5c:	983a      	s32i.n	a8, a3, 40
  90cf5e:	9380      	s32i.n	a3, a8, 0
  90cf60:	283c24        	addi	a8, a3, 36
  90cf63:	9823      	s32i.n	a8, a2, 12
  90cf65:	8824      	l32i.n	a8, a2, 16
  90cf67:	9325      	s32i.n	a3, a2, 20
  90cf69:	b188      	addi.n	a8, a8, 1
  90cf6b:	9824      	s32i.n	a8, a2, 16

	if (txq->axq_link == NULL) {
  90cf6d:	8821      	l32i.n	a8, a2, 4
  90cf6f:	cc89      	bnez.n	a8, 90cf7c <ath_tgt_txq_add_ucast+0x54>
		ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
  90cf71:	884a      	l32i.n	a8, a4, 40
  90cf73:	da40      	mov.n	a10, a4
  90cf75:	8b20      	l32i.n	a11, a2, 0
  90cf77:	8c3c      	l32i.n	a12, a3, 48
  90cf79:	600024        	j	90cfa1 <ath_tgt_txq_add_ucast+0x79>
	} else {
		*txq->axq_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
  90cf7c:	8c3c      	l32i.n	a12, a3, 48
  90cf7e:	9c80      	s32i.n	a12, a8, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90cf80:	186ab4        	l32r	a8, 8e7a50 <memset+0xc08>

		txe_val = ioread32_mac(0x0840);
		if (!(txe_val & (1<< txq->axq_qnum)))
  90cf83:	8b20      	l32i.n	a11, a2, 0
  90cf85:	0c0200        	memw
  90cf88:	8880      	l32i.n	a8, a8, 0
	if (txq->axq_link == NULL) {
		ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
	} else {
		*txq->axq_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);

		txe_val = ioread32_mac(0x0840);
  90cf8a:	0c0200        	memw
  90cf8d:	9810      	s32i.n	a8, a1, 0
		if (!(txe_val & (1<< txq->axq_qnum)))
  90cf8f:	0c0200        	memw
  90cf92:	8810      	l32i.n	a8, a1, 0
  90cf94:	00b004        	ssr	a11
  90cf97:	08081b        	sra	a8, a8
  90cf9a:	7f8f06        	bbsi	a8, 31, 90cfa4 <ath_tgt_txq_add_ucast+0x7c>
			ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
  90cf9d:	884a      	l32i.n	a8, a4, 40
  90cf9f:	da40      	mov.n	a10, a4
  90cfa1:	0b8000        	callx8	a8
	}

	txq->axq_link = &bf->bf_lastds->ds_link;
  90cfa4:	833e      	l32i.n	a3, a3, 56
	ah->ah_startTxDma(ah, txq->axq_qnum);
  90cfa6:	8b20      	l32i.n	a11, a2, 0
		txe_val = ioread32_mac(0x0840);
		if (!(txe_val & (1<< txq->axq_qnum)))
			ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
	}

	txq->axq_link = &bf->bf_lastds->ds_link;
  90cfa8:	9321      	s32i.n	a3, a2, 4
	ah->ah_startTxDma(ah, txq->axq_qnum);
  90cfaa:	834c      	l32i.n	a3, a4, 48
  90cfac:	da40      	mov.n	a10, a4
  90cfae:	0b3000        	callx8	a3
  90cfb1:	d10f      	retw.n
	...

0090cfb4 <ath_update_stats>:
			     bf->bf_lastds, bf->bf_rcs, 1, 0);
}

static void
ath_update_stats(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90cfb4:	6c1004        	entry	a1, 32
	struct ath_tx_desc *ds = bf->bf_desc;
  90cfb7:	883c      	l32i.n	a8, a3, 48
	u_int32_t sr, lr;

	if (ds->ds_txstat.ts_status == 0) {
  90cfb9:	298066        	l8ui	a9, a8, 102
  90cfbc:	cd95      	bnez.n	a9, 90cfd5 <ath_update_stats+0x21>
		if (ds->ds_txstat.ts_rate & HAL_TXSTAT_ALTRATE)
  90cfbe:	298068        	l8ui	a9, a8, 104
  90cfc1:	009932        	sext	a9, a9, 7
  90cfc4:	679042        	bgez	a9, 90d00a <ath_update_stats+0x56>
			sc->sc_tx_stats.ast_tx_altrate++;
  90cfc7:	292259        	l32i	a9, a2, 0x164
  90cfca:	b199      	addi.n	a9, a9, 1
  90cfcc:	292659        	s32i	a9, a2, 0x164
  90cfcf:	600037        	j	90d00a <ath_update_stats+0x56>
  90cfd2:	000000        	ill
	} else {
		if (ds->ds_txstat.ts_status & HAL_TXERR_XRETRY)
  90cfd5:	7f9707        	bbci	a9, 31, 90cfe0 <ath_update_stats+0x2c>
			sc->sc_tx_stats.ast_tx_xretries++;
  90cfd8:	292252        	l32i	a9, a2, 0x148
  90cfdb:	b199      	addi.n	a9, a9, 1
  90cfdd:	292652        	s32i	a9, a2, 0x148
		if (ds->ds_txstat.ts_status & HAL_TXERR_FIFO)
  90cfe0:	298066        	l8ui	a9, a8, 102
  90cfe3:	7d9707        	bbci	a9, 29, 90cfee <ath_update_stats+0x3a>
			sc->sc_tx_stats.ast_tx_fifoerr++;
  90cfe6:	292253        	l32i	a9, a2, 0x14c
  90cfe9:	b199      	addi.n	a9, a9, 1
  90cfeb:	292653        	s32i	a9, a2, 0x14c
		if (ds->ds_txstat.ts_status & HAL_TXERR_FILT)
  90cfee:	298066        	l8ui	a9, a8, 102
  90cff1:	7e9707        	bbci	a9, 30, 90cffc <ath_update_stats+0x48>
			sc->sc_tx_stats.ast_tx_filtered++;
  90cff4:	292254        	l32i	a9, a2, 0x150
  90cff7:	b199      	addi.n	a9, a9, 1
  90cff9:	292654        	s32i	a9, a2, 0x150
		if (ds->ds_txstat.ts_status & HAL_TXERR_TIMER_EXPIRED)
  90cffc:	298066        	l8ui	a9, a8, 102
  90cfff:	7b9707        	bbci	a9, 27, 90d00a <ath_update_stats+0x56>
			sc->sc_tx_stats.ast_tx_timer_exp++;
  90d002:	292255        	l32i	a9, a2, 0x154
  90d005:	b199      	addi.n	a9, a9, 1
  90d007:	292655        	s32i	a9, a2, 0x154
	}
	sr = ds->ds_txstat.ts_shortretry;
	lr = ds->ds_txstat.ts_longretry;
  90d00a:	298071        	l8ui	a9, a8, 113
	sc->sc_tx_stats.ast_tx_shortretry += sr;
  90d00d:	2a2256        	l32i	a10, a2, 0x158
		if (ds->ds_txstat.ts_status & HAL_TXERR_FILT)
			sc->sc_tx_stats.ast_tx_filtered++;
		if (ds->ds_txstat.ts_status & HAL_TXERR_TIMER_EXPIRED)
			sc->sc_tx_stats.ast_tx_timer_exp++;
	}
	sr = ds->ds_txstat.ts_shortretry;
  90d010:	288070        	l8ui	a8, a8, 112
	lr = ds->ds_txstat.ts_longretry;
	sc->sc_tx_stats.ast_tx_shortretry += sr;
  90d013:	a8a8      	add.n	a8, a10, a8
  90d015:	282656        	s32i	a8, a2, 0x158
	sc->sc_tx_stats.ast_tx_longretry += lr;
  90d018:	282257        	l32i	a8, a2, 0x15c
  90d01b:	a988      	add.n	a8, a8, a9
  90d01d:	282657        	s32i	a8, a2, 0x15c
  90d020:	d10f      	retw.n
	...

0090d024 <ath_tx_update_baw>:
	ath_tgt_tx_enqueue(txq, tid);
}

static void
ath_tx_update_baw(ath_atx_tid_t *tid, int seqno)
{
  90d024:	6c1004        	entry	a1, 32
	int index;
	int cindex;

	index  = ATH_BA_INDEX(tid->seq_start, seqno);
  90d027:	2a2102        	l16ui	a10, a2, 4
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);
  90d02a:	8823      	l32i.n	a8, a2, 12
ath_tx_update_baw(ath_atx_tid_t *tid, int seqno)
{
	int index;
	int cindex;

	index  = ATH_BA_INDEX(tid->seq_start, seqno);
  90d02c:	0a330c        	sub	a3, a3, a10
  90d02f:	030a4b        	extui	a10, a3, 0, 12
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);
  90d032:	a8aa      	add.n	a10, a10, a8

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);
  90d034:	0a5941        	extui	a9, a10, 5, 2
  90d037:	c081      	movi.n	a8, 1
  90d039:	b499      	addi.n	a9, a9, 4
  90d03b:	02990a        	addx4	a9, a9, a2
  90d03e:	c7bf      	movi.n	a11, -1
  90d040:	00a104        	ssl	a10
  90d043:	008a1a        	sll	a10, a8
  90d046:	0aba03        	xor	a10, a11, a10
  90d049:	8b91      	l32i.n	a11, a9, 4

	while (tid->baw_head != tid->baw_tail &&
  90d04b:	8c24      	l32i.n	a12, a2, 16
	int cindex;

	index  = ATH_BA_INDEX(tid->seq_start, seqno);
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);
  90d04d:	0baa01        	and	a10, a10, a11
  90d050:	9a91      	s32i.n	a10, a9, 4

	while (tid->baw_head != tid->baw_tail &&
	       (!TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head))) {
  90d052:	db80      	mov.n	a11, a8
	index  = ATH_BA_INDEX(tid->seq_start, seqno);
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);

	while (tid->baw_head != tid->baw_tail &&
  90d054:	600012        	j	90d06a <ath_tx_update_baw+0x46>
  90d057:	002921        	excw
	       (!TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head))) {
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90d05a:	02b188        	excw
  90d05d:	b199      	addi.n	a9, a9, 1
  90d05f:	09094b        	extui	a9, a9, 0, 12
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
  90d062:	080846        	extui	a8, a8, 0, 7

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);

	while (tid->baw_head != tid->baw_tail &&
	       (!TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head))) {
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90d065:	292502        	s16i	a9, a2, 4
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
  90d068:	9823      	s32i.n	a8, a2, 12
	index  = ATH_BA_INDEX(tid->seq_start, seqno);
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);

	while (tid->baw_head != tid->baw_tail &&
  90d06a:	8823      	l32i.n	a8, a2, 12
  90d06c:	7c8110        	beq	a8, a12, 90d080 <ath_tx_update_baw+0x5c>
	       (!TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head))) {
  90d06f:	085912        	srai	a9, a8, 5
  90d072:	02990a        	addx4	a9, a9, a2
  90d075:	8995      	l32i.n	a9, a9, 20
  90d077:	008104        	ssl	a8
  90d07a:	00ba1a        	sll	a10, a11
	index  = ATH_BA_INDEX(tid->seq_start, seqno);
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);

	while (tid->baw_head != tid->baw_tail &&
  90d07d:	79a0d7        	bnone	a10, a9, 90d058 <ath_tx_update_baw+0x34>
  90d080:	d10f      	retw.n
	...

0090d084 <ath_dma_unmap>:
	skb = adf_nbuf_queue_first(&bf->bf_skbhead);
	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, skb, ADF_OS_DMA_TO_DEVICE);
}

static void ath_dma_unmap(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d084:	6c1004        	entry	a1, 32
 * @return first buffer in queue
 */
static inline adf_nbuf_t 
adf_nbuf_queue_first(adf_nbuf_queue_t *head)
{
    return (__adf_nbuf_queue_first(head));
  90d087:	2a3c14        	addi	a10, a3, 20
  90d08a:	5be70c        	call8	906cbc <__adf_nbuf_queue_first>
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  90d08d:	2a2246        	l32i	a10, a2, 0x118
  90d090:	8b30      	l32i.n	a11, a3, 0
  90d092:	2c0a00        	movi	a12, 0
  90d095:	5be677        	call8	906a74 <__adf_nbuf_unmap>
  90d098:	d10f      	retw.n
	...

0090d09c <ath_tgt_skb_free>:
}

static void ath_tgt_skb_free(struct ath_softc_tgt *sc,
			     adf_nbuf_queue_t *head,
			     HTC_ENDPOINT_ID endpt)
{
  90d09c:	6c1004        	entry	a1, 32
	adf_nbuf_t tskb;

	while (adf_nbuf_queue_len(head) != 0) {
		tskb = adf_nbuf_queue_remove(head);
		ath_free_tx_skb(sc->tgt_htc_handle,endpt,tskb);
  90d09f:	156913        	l32r	a5, 8e74ec <memset+0x6a4>
			     adf_nbuf_queue_t *head,
			     HTC_ENDPOINT_ID endpt)
{
	adf_nbuf_t tskb;

	while (adf_nbuf_queue_len(head) != 0) {
  90d0a2:	600012        	j	90d0b8 <ath_tgt_skb_free+0x1c>
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  90d0a5:	da30      	mov.n	a10, a3
  90d0a7:	5be65f        	call8	906a24 <__adf_nbuf_queue_remove>
  90d0aa:	dca0      	mov.n	a12, a10
		tskb = adf_nbuf_queue_remove(head);
		ath_free_tx_skb(sc->tgt_htc_handle,endpt,tskb);
  90d0ac:	285282        	l32i	a8, a5, 0x208
  90d0af:	2a2202        	l32i	a10, a2, 8
  90d0b2:	044b02        	or	a11, a4, a4
  90d0b5:	0b8000        	callx8	a8
 * @return length of the queue
 */
static inline a_uint32_t
adf_nbuf_queue_len(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_len(head);
  90d0b8:	da30      	mov.n	a10, a3
  90d0ba:	5be6fe        	call8	906cb4 <__adf_nbuf_queue_len>
			     adf_nbuf_queue_t *head,
			     HTC_ENDPOINT_ID endpt)
{
	adf_nbuf_t tskb;

	while (adf_nbuf_queue_len(head) != 0) {
  90d0bd:	65afe4        	bnez	a10, 90d0a5 <ath_tgt_skb_free+0x9>
		tskb = adf_nbuf_queue_remove(head);
		ath_free_tx_skb(sc->tgt_htc_handle,endpt,tskb);
	}
}
  90d0c0:	d10f      	retw.n
	...

0090d0c4 <ath_filltxdesc>:
	skb = adf_nbuf_queue_first(&bf->bf_skbhead);
	adf_nbuf_unmap( sc->sc_dev, bf->bf_dmamap, ADF_OS_DMA_TO_DEVICE);
}

static void ath_filltxdesc(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d0c4:	6c1004        	entry	a1, 32
	struct ath_tx_desc *ds0, *ds = bf->bf_desc;
  90d0c7:	863c      	l32i.n	a6, a3, 48
 * @param[out] sg   map info
 */
static inline void
adf_nbuf_dmamap_info(adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
    __adf_nbuf_dmamap_info(bmap, sg);
  90d0c9:	8a30      	l32i.n	a10, a3, 0
	struct ath_hal *ah = sc->sc_ah;
  90d0cb:	222d05        	addmi	a2, a2, 0x500
  90d0ce:	b43b      	addi.n	a11, a3, 4
	a_uint8_t i;

	ds0 = ds;
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	for (i = 0; i < bf->bf_dmamap_info.nsegs; i++, ds++) {
  90d0d0:	c040      	movi.n	a4, 0
}

static void ath_filltxdesc(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds0, *ds = bf->bf_desc;
	struct ath_hal *ah = sc->sc_ah;
  90d0d2:	872b      	l32i.n	a7, a2, 44
	ds0 = ds;
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	for (i = 0; i < bf->bf_dmamap_info.nsegs; i++, ds++) {

		ds->ds_data = bf->bf_dmamap_info.dma_segs[i].paddr;
  90d0d4:	d540      	mov.n	a5, a4
  90d0d6:	5be66c        	call8	906a88 <__adf_nbuf_dmamap_info>
	adf_nbuf_unmap( sc->sc_dev, bf->bf_dmamap, ADF_OS_DMA_TO_DEVICE);
}

static void ath_filltxdesc(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds0, *ds = bf->bf_desc;
  90d0d9:	d260      	mov.n	a2, a6
	a_uint8_t i;

	ds0 = ds;
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	for (i = 0; i < bf->bf_dmamap_info.nsegs; i++, ds++) {
  90d0db:	600081        	j	90d160 <ath_filltxdesc+0x9c>
  90d0de:	000003        	xor	a0, a0, a0

		ds->ds_data = bf->bf_dmamap_info.dma_segs[i].paddr;
  90d0e1:	480b2a        	excw
  90d0e4:	8008      	l32i.n	a0, a0, 32

		if (i == (bf->bf_dmamap_info.nsegs - 1)) {
  90d0e6:	b099      	addi.n	a9, a9, -1
	ds0 = ds;
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	for (i = 0; i < bf->bf_dmamap_info.nsegs; i++, ds++) {

		ds->ds_data = bf->bf_dmamap_info.dma_segs[i].paddr;
  90d0e8:	2a2404        	s8i	a10, a2, 4
  90d0eb:	2a8009        	l8ui	a10, a8, 9
  90d0ee:	2a2405        	s8i	a10, a2, 5
  90d0f1:	2a800a        	l8ui	a10, a8, 10
  90d0f4:	2a2406        	s8i	a10, a2, 6
  90d0f7:	28800b        	l8ui	a8, a8, 11
  90d0fa:	282407        	s8i	a8, a2, 7

		if (i == (bf->bf_dmamap_info.nsegs - 1)) {
  90d0fd:	794910        	bne	a4, a9, 90d111 <ath_filltxdesc+0x4d>
			ds->ds_link = 0;
  90d100:	252400        	s8i	a5, a2, 0
  90d103:	252401        	s8i	a5, a2, 1
  90d106:	252402        	s8i	a5, a2, 2
  90d109:	252403        	s8i	a5, a2, 3
			bf->bf_lastds = ds;
  90d10c:	923e      	s32i.n	a2, a3, 56
  90d10e:	600020        	j	90d132 <ath_filltxdesc+0x6e>
		} else
			ds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, i+1);
  90d111:	b148      	addi.n	a8, a4, 1
  90d113:	0c8911        	slli	a9, a8, 4
  90d116:	a898      	add.n	a8, a9, a8
  90d118:	893d      	l32i.n	a9, a3, 52
  90d11a:	09880b        	addx8	a8, a8, a9
  90d11d:	088957        	extui	a9, a8, 24, 8
  90d120:	292400        	s8i	a9, a2, 0
  90d123:	080957        	extui	a9, a8, 16, 8
  90d126:	292401        	s8i	a9, a2, 1
  90d129:	088947        	extui	a9, a8, 8, 8
  90d12c:	292402        	s8i	a9, a2, 2
  90d12f:	282403        	s8i	a8, a2, 3

		ah->ah_fillTxDesc(ds
				   , bf->bf_dmamap_info.dma_segs[i].len
				   , i == 0
				   , i == (bf->bf_dmamap_info.nsegs - 1)
  90d132:	8d31      	l32i.n	a13, a3, 4
			ds->ds_link = 0;
			bf->bf_lastds = ds;
		} else
			ds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, i+1);

		ah->ah_fillTxDesc(ds
  90d134:	c091      	movi.n	a9, 1
				   , bf->bf_dmamap_info.dma_segs[i].len
				   , i == 0
				   , i == (bf->bf_dmamap_info.nsegs - 1)
  90d136:	b0dd      	addi.n	a13, a13, -1
			ds->ds_link = 0;
			bf->bf_lastds = ds;
		} else
			ds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, i+1);

		ah->ah_fillTxDesc(ds
  90d138:	0d4d0c        	sub	a13, a4, a13
  90d13b:	034b0b        	addx8	a11, a4, a3
  90d13e:	c080      	movi.n	a8, 0
  90d140:	dc80      	mov.n	a12, a8
  90d142:	2f7218        	l32i	a15, a7, 96
  90d145:	0d9838        	moveqz	a8, a9, a13
  90d148:	8bb3      	l32i.n	a11, a11, 12
  90d14a:	049c38        	moveqz	a12, a9, a4
  90d14d:	dd80      	mov.n	a13, a8
  90d14f:	da20      	mov.n	a10, a2
  90d151:	de60      	mov.n	a14, a6
  90d153:	0bf000        	callx8	a15
	a_uint8_t i;

	ds0 = ds;
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	for (i = 0; i < bf->bf_dmamap_info.nsegs; i++, ds++) {
  90d156:	b144      	addi.n	a4, a4, 1
  90d158:	280a88        	movi	a8, 136
  90d15b:	040447        	extui	a4, a4, 0, 8
  90d15e:	a822      	add.n	a2, a2, a8
  90d160:	8931      	l32i.n	a9, a3, 4
  90d162:	794b02        	bgeu	a4, a9, 90d168 <ath_filltxdesc+0xa4>
  90d165:	63ff77        	j	90d0e0 <ath_filltxdesc+0x1c>
				   , bf->bf_dmamap_info.dma_segs[i].len
				   , i == 0
				   , i == (bf->bf_dmamap_info.nsegs - 1)
				   , ds0);
	}
}
  90d168:	d10f      	retw.n
	...

0090d16c <ath_tx_tgt_setds>:

static void ath_tx_tgt_setds(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d16c:	6c1006        	entry	a1, 48
	struct ath_tx_desc *ds = bf->bf_desc;
	struct ath_hal *ah = sc->sc_ah;

	switch (bf->bf_protmode) {
  90d16f:	293084        	l8ui	a9, a3, 132
}

static void ath_tx_tgt_setds(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds = bf->bf_desc;
	struct ath_hal *ah = sc->sc_ah;
  90d172:	282d05        	addmi	a8, a2, 0x500
  90d175:	8d8b      	l32i.n	a13, a8, 44
	}
}

static void ath_tx_tgt_setds(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds = bf->bf_desc;
  90d177:	8a3c      	l32i.n	a10, a3, 48
  90d179:	283144        	l16ui	a8, a3, 136
	struct ath_hal *ah = sc->sc_ah;

	switch (bf->bf_protmode) {
  90d17c:	689108        	beqi	a9, 1, 90d188 <ath_tx_tgt_setds+0x1c>
  90d17f:	69920d        	bnei	a9, 2, 90d190 <ath_tx_tgt_setds+0x24>
    	case IEEE80211_PROT_RTSCTS:
		bf->bf_flags |= HAL_TXDESC_RTSENA;
  90d182:	c094      	movi.n	a9, 4
  90d184:	600002        	j	90d18a <ath_tx_tgt_setds+0x1e>
  90d187:	00c098        	excw
		break;
    	case IEEE80211_PROT_CTSONLY:
		bf->bf_flags |= HAL_TXDESC_CTSENA;
  90d18a:	098802        	or	a8, a8, a9
  90d18d:	283544        	s16i	a8, a3, 136
		break;
    	default:
		break;
	}

	ah->ah_set11nTxDesc(ds
  90d190:	293144        	l16ui	a9, a3, 136
  90d193:	c180      	movi.n	a8, 16
  90d195:	089802        	or	a8, a9, a8
  90d198:	08084f        	extui	a8, a8, 0, 16
  90d19b:	9810      	s32i.n	a8, a1, 0
  90d19d:	2b3122        	l16ui	a11, a3, 68
  90d1a0:	88df      	l32i.n	a8, a13, 60
  90d1a2:	2c304a        	l8ui	a12, a3, 74
  90d1a5:	2e3049        	l8ui	a14, a3, 73
  90d1a8:	2f3085        	l8ui	a15, a3, 133
  90d1ab:	2d0a3c        	movi	a13, 60
  90d1ae:	0b8000        	callx8	a8
			      , 60
			      , bf->bf_keyix
			      , bf->bf_keytype
			      , bf->bf_flags | HAL_TXDESC_INTREQ);

	ath_filltxdesc(sc, bf);
  90d1b1:	da20      	mov.n	a10, a2
  90d1b3:	db30      	mov.n	a11, a3
  90d1b5:	5bffc3        	call8	90d0c4 <ath_filltxdesc>
  90d1b8:	d10f      	retw.n
	...

0090d1bc <ath_tgt_tx_enqueue>:
	ath_tgt_tx_send_normal(sc, bf);
}

static void
ath_tgt_tx_enqueue(struct ath_txq *txq, struct ath_atx_tid  *tid)
{
  90d1bc:	6c1004        	entry	a1, 32
	if (tid->paused)
  90d1bf:	283034        	l8ui	a8, a3, 52
  90d1c2:	cd88      	bnez.n	a8, 90d1de <ath_tgt_tx_enqueue+0x22>
		return;

	if (tid->sched)
  90d1c4:	283035        	l8ui	a8, a3, 53
  90d1c7:	008832        	sext	a8, a8, 7
  90d1ca:	cd80      	bnez.n	a8, 90d1de <ath_tgt_tx_enqueue+0x22>
		return;

	tid->sched = AH_TRUE;
  90d1cc:	c091      	movi.n	a9, 1
  90d1ce:	293435        	s8i	a9, a3, 53
	asf_tailq_insert_tail(&txq->axq_tidq, tid, tid_qelem);
  90d1d1:	9839      	s32i.n	a8, a3, 36
  90d1d3:	8827      	l32i.n	a8, a2, 28
  90d1d5:	983a      	s32i.n	a8, a3, 40
  90d1d7:	9380      	s32i.n	a3, a8, 0
  90d1d9:	233c24        	addi	a3, a3, 36
  90d1dc:	9327      	s32i.n	a3, a2, 28
  90d1de:	d10f      	retw.n

0090d1e0 <ath_update_aggr_stats$isra$2>:
	ath_tx_set_retry(sc, bf);
	asf_tailq_insert_tail(bf_q, bf, bf_list);
}

static void
ath_update_aggr_stats(struct ath_softc_tgt *sc,
  90d1e0:	6c1004        	entry	a1, 32
{

	u_int8_t status = ATH_DS_TX_STATUS(ds);
	u_int8_t txflags = ATH_DS_TX_FLAGS(ds);

	__statsn(sc, txaggr_longretries, ds->ds_txstat.ts_longretry);
  90d1e3:	2a3071        	l8ui	a10, a3, 113
  90d1e6:	2b2268        	l32i	a11, a2, 0x1a0
ath_update_aggr_stats(struct ath_softc_tgt *sc,
		      struct ath_tx_desc *ds, int nframes,
		      int nbad)
{

	u_int8_t status = ATH_DS_TX_STATUS(ds);
  90d1e9:	283066        	l8ui	a8, a3, 102
	u_int8_t txflags = ATH_DS_TX_FLAGS(ds);

	__statsn(sc, txaggr_longretries, ds->ds_txstat.ts_longretry);
  90d1ec:	0aba08        	add	a10, a11, a10
		      struct ath_tx_desc *ds, int nframes,
		      int nbad)
{

	u_int8_t status = ATH_DS_TX_STATUS(ds);
	u_int8_t txflags = ATH_DS_TX_FLAGS(ds);
  90d1ef:	293067        	l8ui	a9, a3, 103

	__statsn(sc, txaggr_longretries, ds->ds_txstat.ts_longretry);
  90d1f2:	2a2668        	s32i	a10, a2, 0x1a0
	__statsn(sc, txaggr_shortretries, ds->ds_txstat.ts_shortretry);
  90d1f5:	233070        	l8ui	a3, a3, 112
  90d1f8:	2a226b        	l32i	a10, a2, 0x1ac
  90d1fb:	03a308        	add	a3, a10, a3
  90d1fe:	23266b        	s32i	a3, a2, 0x1ac

	if (txflags & HAL_TX_DESC_CFG_ERR)
  90d201:	7d9708        	bbci	a9, 29, 90d20d <ath_update_aggr_stats$isra$2+0x2d>
		__stats(sc, txaggr_desc_cfgerr);
  90d204:	232271        	l32i	a3, a2, 0x1c4
  90d207:	233c01        	addi	a3, a3, 1
  90d20a:	232671        	s32i	a3, a2, 0x1c4

	if (txflags & HAL_TX_DATA_UNDERRUN)
  90d20d:	7c9708        	bbci	a9, 28, 90d219 <ath_update_aggr_stats$isra$2+0x39>
		__stats(sc, txaggr_data_urun);
  90d210:	232265        	l32i	a3, a2, 0x194
  90d213:	233c01        	addi	a3, a3, 1
  90d216:	232665        	s32i	a3, a2, 0x194

	if (txflags & HAL_TX_DELIM_UNDERRUN)
  90d219:	7b9707        	bbci	a9, 27, 90d224 <ath_update_aggr_stats$isra$2+0x44>
		__stats(sc, txaggr_delim_urun);
  90d21c:	232266        	l32i	a3, a2, 0x198
  90d21f:	b133      	addi.n	a3, a3, 1
  90d221:	232666        	s32i	a3, a2, 0x198

	if (!status) {
  90d224:	cb88      	beqz.n	a8, 90d260 <ath_update_aggr_stats$isra$2+0x80>
		return;
	}

	if (status & HAL_TXERR_XRETRY)
  90d226:	7f8707        	bbci	a8, 31, 90d231 <ath_update_aggr_stats$isra$2+0x51>
		__stats(sc, txaggr_compxretry);
  90d229:	23226a        	l32i	a3, a2, 0x1a8
  90d22c:	b133      	addi.n	a3, a3, 1
  90d22e:	23266a        	s32i	a3, a2, 0x1a8

	if (status & HAL_TXERR_FILT)
  90d231:	7e8708        	bbci	a8, 30, 90d23d <ath_update_aggr_stats$isra$2+0x5d>
		__stats(sc, txaggr_filtered);
  90d234:	23226e        	l32i	a3, a2, 0x1b8
  90d237:	233c01        	addi	a3, a3, 1
  90d23a:	23266e        	s32i	a3, a2, 0x1b8

	if (status & HAL_TXERR_FIFO)
  90d23d:	7d8708        	bbci	a8, 29, 90d249 <ath_update_aggr_stats$isra$2+0x69>
		__stats(sc, txaggr_fifo);
  90d240:	23226f        	l32i	a3, a2, 0x1bc
  90d243:	233c01        	addi	a3, a3, 1
  90d246:	23266f        	s32i	a3, a2, 0x1bc

	if (status & HAL_TXERR_XTXOP)
  90d249:	7c8708        	bbci	a8, 28, 90d255 <ath_update_aggr_stats$isra$2+0x75>
		__stats(sc, txaggr_xtxop);
  90d24c:	232270        	l32i	a3, a2, 0x1c0
  90d24f:	233c01        	addi	a3, a3, 1
  90d252:	232670        	s32i	a3, a2, 0x1c0

	if (status & HAL_TXERR_TIMER_EXPIRED)
  90d255:	7b8707        	bbci	a8, 27, 90d260 <ath_update_aggr_stats$isra$2+0x80>
		__stats(sc, txaggr_timer_exp);
  90d258:	23226c        	l32i	a3, a2, 0x1b0
  90d25b:	b133      	addi.n	a3, a3, 1
  90d25d:	23266c        	s32i	a3, a2, 0x1b0
  90d260:	d10f      	retw.n
	...

0090d264 <__adf_os_mem_set$constprop$13>:
}

/* set a memory buffer */
static inline void
__adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
  90d264:	6c1004        	entry	a1, 32
{
	A_MEMSET(buf, b, size);
  90d267:	186913        	l32r	a8, 8e76b4 <memset+0x86c>
  90d26a:	da20      	mov.n	a10, a2
  90d26c:	8884      	l32i.n	a8, a8, 16
  90d26e:	c0b0      	movi.n	a11, 0
  90d270:	dc30      	mov.n	a12, a3
  90d272:	0b8000        	callx8	a8
  90d275:	d10f      	retw.n
	...

0090d278 <ath_buf_set_rate>:
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d278:	6c1016        	entry	a1, 176
    a_uint8_t rix, cix, rtsctsrate;
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
  90d27b:	253144        	l16ui	a5, a3, 136
  90d27e:	c07c      	movi.n	a7, 12
  90d280:	075801        	and	a8, a5, a7
    cix = rt->info[sc->sc_protrix].controlRate;
  90d283:	272d03        	addmi	a7, a2, 0x300
  90d286:	27700c        	l8ui	a7, a7, 12
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
    struct ath_hal *ah = sc->sc_ah;
  90d289:	242d05        	addmi	a4, a2, 0x500
    HAL_11N_RATE_SERIES series[4];
    a_int32_t i, flags;
    a_uint8_t rix, cix, rtsctsrate;
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
  90d28c:	262281        	l32i	a6, a2, 0x204
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
    struct ath_hal *ah = sc->sc_ah;
  90d28f:	844b      	l32i.n	a4, a4, 44
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;
  90d291:	07770a        	addx4	a7, a7, a7
  90d294:	06770a        	addx4	a7, a7, a6
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
    struct ath_hal *ah = sc->sc_ah;
  90d297:	24161e        	s32i	a4, a1, 120
    a_uint8_t rix, cix, rtsctsrate;
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
  90d29a:	28161c        	s32i	a8, a1, 112

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
    struct ath_hal *ah = sc->sc_ah;
    const HAL_RATE_TABLE *rt;
    struct ath_tx_desc *ds = bf->bf_desc;
  90d29d:	843c      	l32i.n	a4, a3, 48
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;
  90d29f:	287037        	l8ui	a8, a7, 55

    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
  90d2a2:	273084        	l8ui	a7, a3, 132

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
    struct ath_hal *ah = sc->sc_ah;
    const HAL_RATE_TABLE *rt;
    struct ath_tx_desc *ds = bf->bf_desc;
  90d2a5:	24161f        	s32i	a4, a1, 124
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;
  90d2a8:	28161d        	s32i	a8, a1, 116
    a_int32_t i, flags;
    a_uint8_t rix, cix, rtsctsrate;
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
  90d2ab:	243050        	l8ui	a4, a3, 80
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;

    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
  90d2ae:	ca70      	beqz.n	a7, 90d2d2 <ath_buf_set_rate+0x5a>
	(rt->info[rix].phy == IEEE80211_T_OFDM ||
  90d2b0:	04440a        	addx4	a4, a4, a4
  90d2b3:	06440a        	addx4	a4, a4, a6
  90d2b6:	284029        	l8ui	a8, a4, 41
  90d2b9:	c071      	movi.n	a7, 1
  90d2bb:	298cfc        	addi	a9, a8, -4
  90d2be:	c040      	movi.n	a4, 0
  90d2c0:	097438        	moveqz	a4, a7, a9
    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;

    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
  90d2c3:	cc46      	bnez.n	a4, 90d2cd <ath_buf_set_rate+0x55>
	(rt->info[rix].phy == IEEE80211_T_OFDM ||
  90d2c5:	288cfe        	addi	a8, a8, -2
    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;

    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
  90d2c8:	087438        	moveqz	a4, a7, a8
  90d2cb:	c843      	beqz.n	a4, 90d2d2 <ath_buf_set_rate+0x5a>
	(rt->info[rix].phy == IEEE80211_T_OFDM ||
	 rt->info[rix].phy == IEEE80211_T_HT) &&
	(bf->bf_flags & HAL_TXDESC_NOACK) == 0) {
	    cix = rt->info[sc->sc_protrix].controlRate;
	    prot_mode = AH_TRUE;
  90d2cd:	c071      	movi.n	a7, 1
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;

    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
	(rt->info[rix].phy == IEEE80211_T_OFDM ||
	 rt->info[rix].phy == IEEE80211_T_HT) &&
  90d2cf:	7e574a        	bbci	a5, 30, 90d31d <ath_buf_set_rate+0xa5>
	(bf->bf_flags & HAL_TXDESC_NOACK) == 0) {
	    cix = rt->info[sc->sc_protrix].controlRate;
	    prot_mode = AH_TRUE;
    } else {
	    if (ath_hal_getcapability(ah, HAL_CAP_HT) && (!bf->bf_ismcast))
  90d2d2:	2a121e        	l32i	a10, a1, 120
  90d2d5:	c0b5      	movi.n	a11, 5
  90d2d7:	5bf69c        	call8	90ad48 <ath_hal_getcapability>
  90d2da:	c8af      	beqz.n	a10, 90d2ed <ath_buf_set_rate+0x75>
  90d2dc:	253221        	l32i	a5, a3, 132
		    flags = HAL_TXDESC_RTSENA;
  90d2df:	28121c        	l32i	a8, a1, 112
	 rt->info[rix].phy == IEEE80211_T_HT) &&
	(bf->bf_flags & HAL_TXDESC_NOACK) == 0) {
	    cix = rt->info[sc->sc_protrix].controlRate;
	    prot_mode = AH_TRUE;
    } else {
	    if (ath_hal_getcapability(ah, HAL_CAP_HT) && (!bf->bf_ismcast))
  90d2e2:	057540        	extui	a5, a5, 7, 1
		    flags = HAL_TXDESC_RTSENA;
  90d2e5:	c044      	movi.n	a4, 4
  90d2e7:	054838        	moveqz	a8, a4, a5
  90d2ea:	28161c        	s32i	a8, a1, 112
  90d2ed:	d530      	mov.n	a5, a3

	    for (i = 4; i--;) {
  90d2ef:	c044      	movi.n	a4, 4
  90d2f1:	600021        	j	90d316 <ath_buf_set_rate+0x9e>
  90d2f4:	255cf4        	addi	a5, a5, -12
		    if (bf->bf_rcs[i].tries) {
  90d2f7:	275081        	l8ui	a7, a5, 129
  90d2fa:	c978      	beqz.n	a7, 90d316 <ath_buf_set_rate+0x9e>
			    cix = rt->info[bf->bf_rcs[i].rix].controlRate;
  90d2fc:	044409        	addx2	a4, a4, a4
  90d2ff:	03440a        	addx4	a4, a4, a3
  90d302:	244050        	l8ui	a4, a4, 80
  90d305:	04440a        	addx4	a4, a4, a4
  90d308:	06440a        	addx4	a4, a4, a6
  90d30b:	244037        	l8ui	a4, a4, 55
  90d30e:	24161d        	s32i	a4, a1, 116
  90d311:	600006        	j	90d31b <ath_buf_set_rate+0xa3>
  90d314:	0000b0        	excw
	    prot_mode = AH_TRUE;
    } else {
	    if (ath_hal_getcapability(ah, HAL_CAP_HT) && (!bf->bf_ismcast))
		    flags = HAL_TXDESC_RTSENA;

	    for (i = 4; i--;) {
  90d317:	446940        	excw
  90d31a:	d8c0      	mov.n	a8, a12
    const HAL_RATE_TABLE *rt;
    struct ath_tx_desc *ds = bf->bf_desc;
    HAL_11N_RATE_SERIES series[4];
    a_int32_t i, flags;
    a_uint8_t rix, cix, rtsctsrate;
    a_int32_t prot_mode = AH_FALSE;
  90d31c:	70da10        	bge	a13, a0, 90d330 <ath_buf_set_rate+0xb8>
 * @param[in] size  buffer size
 */
static inline void
adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
    __adf_os_mem_set(buf, b, size);
  90d31f:	2b0a70        	movi	a11, 112
  90d322:	5bffd0        	call8	90d264 <__adf_os_mem_set$constprop$13>
	if (bf != NULL) {
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  90d325:	283c30        	addi	a8, a3, 48
  90d328:	d530      	mov.n	a5, a3
  90d32a:	241c10        	addi	a4, a1, 16
  90d32d:	281620        	s32i	a8, a1, 128
    }

    adf_os_mem_set(series, 0, sizeof(HAL_11N_RATE_SERIES) * 4);

    for (i = 0; i < 4; i++) {
	    if (!bf->bf_rcs[i].tries)
  90d330:	285051        	l8ui	a8, a5, 81
  90d333:	6480f9        	beqz	a8, 90d430 <ath_buf_set_rate+0x1b8>
		    continue;

	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
  90d336:	2d5050        	l8ui	a13, a5, 80
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);
  90d339:	2c3221        	l32i	a12, a3, 132
	    if (!bf->bf_rcs[i].tries)
		    continue;

	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
  90d33c:	0dda0a        	addx4	a10, a13, a13
  90d33f:	06aa0a        	addx4	a10, a10, a6
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);
  90d342:	2e0a40        	movi	a14, 64
	    if (!bf->bf_rcs[i].tries)
		    continue;

	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
  90d345:	2ba034        	l8ui	a11, a10, 52
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);
  90d348:	290a00        	movi	a9, 0
	    if (!bf->bf_rcs[i].tries)
		    continue;

	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
  90d34b:	2aac20        	addi	a10, a10, 32
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);
  90d34e:	7ec002        	bnone	a12, a14, 90d354 <ath_buf_set_rate+0xdc>
  90d351:	29a015        	l8ui	a9, a10, 21
	    if (!bf->bf_rcs[i].tries)
		    continue;

	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
  90d354:	0b9902        	or	a9, a9, a11
	if (bf != NULL) {
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  90d357:	2a4cf4        	addi	a10, a4, -12
	    series[i].Rate = rt->info[rix].rateCode |
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);

	    series[i].Tries = bf->bf_rcs[i].tries;
#ifdef MAGPIE_MERLIN
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
  90d35a:	2e5053        	l8ui	a14, a5, 83
	    if (!bf->bf_rcs[i].tries)
		    continue;

	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
  90d35d:	99a0      	s32i.n	a9, a10, 0
	if (bf != NULL) {
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  90d35f:	294cf0        	addi	a9, a4, -16
	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);

	    series[i].Tries = bf->bf_rcs[i].tries;
  90d362:	9890      	s32i.n	a8, a9, 0
#ifdef MAGPIE_MERLIN
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
				   HAL_RATESERIES_RTS_CTS : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
  90d364:	c0a2      	movi.n	a10, 2
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 ) |
  90d366:	c094      	movi.n	a9, 4
	    series[i].Tries = bf->bf_rcs[i].tries;
#ifdef MAGPIE_MERLIN
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
				   HAL_RATESERIES_RTS_CTS : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
  90d368:	0aea01        	and	a10, a14, a10
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 ) |
  90d36b:	09e901        	and	a9, a14, a9
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);

	    series[i].Tries = bf->bf_rcs[i].tries;
#ifdef MAGPIE_MERLIN
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
				   HAL_RATESERIES_RTS_CTS : 0 ) |
  90d36e:	0e4840        	extui	a8, a14, 4, 1
  90d371:	09ab02        	or	a11, a10, a9
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_TX_STBC_FLAG) ?
		     HAL_RATESERIES_STBC: 0);
  90d374:	c2f0      	movi.n	a15, 32
	    series[i].Tries = bf->bf_rcs[i].tries;
#ifdef MAGPIE_MERLIN
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
				   HAL_RATESERIES_RTS_CTS : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
  90d376:	08bb02        	or	a11, a11, a8
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_TX_STBC_FLAG) ?
		     HAL_RATESERIES_STBC: 0);
  90d379:	0fef01        	and	a15, a14, a15
  90d37c:	c088      	movi.n	a8, 8
  90d37e:	c0e0      	movi.n	a14, 0
  90d380:	0fe838        	moveqz	a8, a14, a15
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
				   HAL_RATESERIES_RTS_CTS : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 ) |
  90d383:	08b802        	or	a8, a11, a8
	    series[i].Rate = rt->info[rix].rateCode |
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);

	    series[i].Tries = bf->bf_rcs[i].tries;
#ifdef MAGPIE_MERLIN
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
  90d386:	9840      	s32i.n	a8, a4, 0

static a_uint32_t ath_pkt_duration(struct ath_softc_tgt *sc,
				   a_uint8_t rix, struct ath_tx_buf *bf,
				   a_int32_t width, a_int32_t half_gi)
{
	const HAL_RATE_TABLE *rt = sc->sc_currates;
  90d388:	2b2281        	l32i	a11, a2, 0x204
	a_uint32_t nbits, nsymbits, duration, nsymbols;
	a_uint8_t rc;
	a_int32_t streams;
	a_int32_t pktlen;

	pktlen = bf->bf_isaggr ? bf->bf_al : bf->bf_pktlen;
  90d38b:	7ac705        	bbci	a12, 26, 90d394 <ath_buf_set_rate+0x11c>
  90d38e:	2c3127        	l16ui	a12, a3, 78
  90d391:	600002        	j	90d397 <ath_buf_set_rate+0x11f>
  90d394:	2c3122        	l16ui	a12, a3, 68
	rc = rt->info[rix].rateCode;
  90d397:	0dd80a        	addx4	a8, a13, a13
  90d39a:	0b880a        	addx4	a8, a8, a11
  90d39d:	288034        	l8ui	a8, a8, 52

	if (!IS_HT_RATE(rc))
  90d3a0:	008e32        	sext	a14, a8, 7
  90d3a3:	66e011        	bltz	a14, 90d3b8 <ath_buf_set_rate+0x140>
		return ath_hal_computetxtime(sc->sc_ah, rt, pktlen, rix,
  90d3a6:	282d05        	addmi	a8, a2, 0x500
					     bf->bf_shpream);
  90d3a9:	2e3221        	l32i	a14, a3, 132

	pktlen = bf->bf_isaggr ? bf->bf_al : bf->bf_pktlen;
	rc = rt->info[rix].rateCode;

	if (!IS_HT_RATE(rc))
		return ath_hal_computetxtime(sc->sc_ah, rt, pktlen, rix,
  90d3ac:	8a8b      	l32i.n	a10, a8, 44
  90d3ae:	0e6e40        	extui	a14, a14, 6, 1
  90d3b1:	5bf674        	call8	90ad84 <ath_hal_computetxtime>
  90d3b4:	60004d        	j	90d405 <ath_buf_set_rate+0x18d>
  90d3b7:	00c0d1        	excw
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 );
#endif
	    series[i].PktDuration = ath_pkt_duration(sc, rix, bf,
  90d3ba:	c0b0      	movi.n	a11, 0
  90d3bc:	0adb39        	movnez	a11, a13, a10
	if (!IS_HT_RATE(rc))
		return ath_hal_computetxtime(sc->sc_ah, rt, pktlen, rix,
					     bf->bf_shpream);

	nbits = (pktlen << 3) + OFDM_PLCP_BITS;
	nsymbits = bits_per_symbol[HT_RC_2_MCS(rc)][width];
  90d3bf:	080a43        	extui	a10, a8, 0, 4
  90d3c2:	0bab09        	addx2	a11, a10, a11
  90d3c5:	1a6afb        	l32r	a10, 8e7fb4 <memset+0x116c>
	nsymbols = (nbits + nsymbits - 1) / nsymbits;
  90d3c8:	281622        	s32i	a8, a1, 136
	if (!IS_HT_RATE(rc))
		return ath_hal_computetxtime(sc->sc_ah, rt, pktlen, rix,
					     bf->bf_shpream);

	nbits = (pktlen << 3) + OFDM_PLCP_BITS;
	nsymbits = bits_per_symbol[HT_RC_2_MCS(rc)][width];
  90d3cb:	0abb09        	addx2	a11, a11, a10
  90d3ce:	2bb100        	l16ui	a11, a11, 0
	nsymbols = (nbits + nsymbits - 1) / nsymbits;
  90d3d1:	291621        	s32i	a9, a1, 132

	if (!IS_HT_RATE(rc))
		return ath_hal_computetxtime(sc->sc_ah, rt, pktlen, rix,
					     bf->bf_shpream);

	nbits = (pktlen << 3) + OFDM_PLCP_BITS;
  90d3d4:	0bca0b        	addx8	a10, a12, a11
	nsymbits = bits_per_symbol[HT_RC_2_MCS(rc)][width];
	nsymbols = (nbits + nsymbits - 1) / nsymbits;
  90d3d7:	2aac15        	addi	a10, a10, 21
  90d3da:	5b659c        	call8	8e6a4c <__udivsi3>

	if (!half_gi)
  90d3dd:	291221        	l32i	a9, a1, 132
  90d3e0:	281222        	l32i	a8, a1, 136
  90d3e3:	cc95      	bnez.n	a9, 90d3ec <ath_buf_set_rate+0x174>
		duration = SYMBOL_TIME(nsymbols);
  90d3e5:	0eaa11        	slli	a10, a10, 2
  90d3e8:	600011        	j	90d3fd <ath_buf_set_rate+0x185>
  90d3eb:	000aaa        	excw
	else
		duration = SYMBOL_TIME_HALFGI(nsymbols);
  90d3ee:	0b0faa        	excw
  90d3f1:	11196a        	l32r	a1, 8d399c <_bss_end+0x3c0a8c>
  90d3f4:	fc          	.byte 0xfc
  90d3f5:	b4aa      	addi.n	a10, a10, 4
  90d3f7:	09aa2a        	muluh	a10, a10, a9
  90d3fa:	0a2a14        	srli	a10, a10, 2

	streams = HT_RC_2_STREAMS(rc);
  90d3fd:	083843        	extui	a8, a8, 3, 4
	duration += L_STF + L_LTF + L_SIG + HT_SIG + HT_STF + HT_LTF(streams);
  90d400:	b988      	addi.n	a8, a8, 9
  90d402:	0a8a0a        	addx4	a10, a8, a10
#endif
	    series[i].PktDuration = ath_pkt_duration(sc, rix, bf,
				     (bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) != 0,
				     (bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG));

	    series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90d405:	292d16        	addmi	a9, a2, 0x1600
	if (bf != NULL) {
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  90d408:	284cf8        	addi	a8, a4, -8
#endif
	    series[i].PktDuration = ath_pkt_duration(sc, rix, bf,
				     (bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) != 0,
				     (bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG));

	    series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90d40b:	299026        	l8ui	a9, a9, 38
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 );
#endif
	    series[i].PktDuration = ath_pkt_duration(sc, rix, bf,
  90d40e:	9a80      	s32i.n	a10, a8, 0
	if (bf != NULL) {
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  90d410:	284cfc        	addi	a8, a4, -4
#endif
	    series[i].PktDuration = ath_pkt_duration(sc, rix, bf,
				     (bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) != 0,
				     (bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG));

	    series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90d413:	9980      	s32i.n	a9, a8, 0

	    if (prot_mode)
  90d415:	c878      	beqz.n	a7, 90d421 <ath_buf_set_rate+0x1a9>
		    series[i].RateFlags |= HAL_RATESERIES_RTS_CTS;
  90d417:	8940      	l32i.n	a9, a4, 0
  90d419:	c081      	movi.n	a8, 1
  90d41b:	089802        	or	a8, a9, a8
  90d41e:	284600        	s32i	a8, a4, 0

	    if (bf->bf_rcs[i].flags & ATH_RC_DS_FLAG)
  90d421:	285053        	l8ui	a8, a5, 83
  90d424:	7f8708        	bbci	a8, 31, 90d430 <ath_buf_set_rate+0x1b8>
		    series[i].RateFlags |= HAL_RATESERIES_RTS_CTS;
  90d427:	8940      	l32i.n	a9, a4, 0
  90d429:	c081      	movi.n	a8, 1
  90d42b:	089802        	or	a8, a9, a8
  90d42e:	9840      	s32i.n	a8, a4, 0
	    }
    }

    adf_os_mem_set(series, 0, sizeof(HAL_11N_RATE_SERIES) * 4);

    for (i = 0; i < 4; i++) {
  90d430:	281220        	l32i	a8, a1, 128
  90d433:	bc55      	addi.n	a5, a5, 12
  90d435:	244c1c        	addi	a4, a4, 28
  90d438:	785102        	beq	a5, a8, 90d43e <ath_buf_set_rate+0x1c6>
  90d43b:	63fef1        	j	90d330 <ath_buf_set_rate+0xb8>

	    if (bf->bf_rcs[i].flags & ATH_RC_DS_FLAG)
		    series[i].RateFlags |= HAL_RATESERIES_RTS_CTS;
    }

    rtsctsrate = rt->info[cix].rateCode |
  90d43e:	24121d        	l32i	a4, a1, 116
	    (bf->bf_shpream ? rt->info[cix].shortPreamble : 0);
  90d441:	233221        	l32i	a3, a3, 132

	    if (bf->bf_rcs[i].flags & ATH_RC_DS_FLAG)
		    series[i].RateFlags |= HAL_RATESERIES_RTS_CTS;
    }

    rtsctsrate = rt->info[cix].rateCode |
  90d444:	04420a        	addx4	a2, a4, a4
  90d447:	06260a        	addx4	a6, a2, a6
  90d44a:	2c6034        	l8ui	a12, a6, 52
  90d44d:	c020      	movi.n	a2, 0
  90d44f:	266c20        	addi	a6, a6, 32
  90d452:	793702        	bbci	a3, 25, 90d458 <ath_buf_set_rate+0x1e0>
  90d455:	226015        	l8ui	a2, a6, 21
	    (bf->bf_shpream ? rt->info[cix].shortPreamble : 0);

    ah->ah_set11nRateScenario(ds, 1,
  90d458:	28121e        	l32i	a8, a1, 120
  90d45b:	2a121f        	l32i	a10, a1, 124
  90d45e:	238210        	l32i	a3, a8, 64
  90d461:	2f121c        	l32i	a15, a1, 112
  90d464:	c0b1      	movi.n	a11, 1
  90d466:	0c2c02        	or	a12, a2, a12
  90d469:	dd10      	mov.n	a13, a1
  90d46b:	c0e4      	movi.n	a14, 4
  90d46d:	0b3000        	callx8	a3
  90d470:	d10f      	retw.n
	...

0090d474 <ath_dma_map>:

	return duration;
}

static void ath_dma_map(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d474:	6c1004        	entry	a1, 32
 * @return first buffer in queue
 */
static inline adf_nbuf_t 
adf_nbuf_queue_first(adf_nbuf_queue_t *head)
{
    return (__adf_nbuf_queue_first(head));
  90d477:	2a3c14        	addi	a10, a3, 20
  90d47a:	5be610        	call8	906cbc <__adf_nbuf_queue_first>
  90d47d:	dca0      	mov.n	a12, a10
adf_nbuf_map(adf_os_device_t        osdev, 
             adf_os_dma_map_t       bmap, 
             adf_nbuf_t             buf, 
             adf_os_dma_dir_t       dir)
{
    return __adf_nbuf_map(osdev, bmap, buf, dir);
  90d47f:	8b30      	l32i.n	a11, a3, 0
  90d481:	2a2246        	l32i	a10, a2, 0x118
  90d484:	c0d0      	movi.n	a13, 0
  90d486:	5be578        	call8	906a68 <__adf_nbuf_map>
  90d489:	d10f      	retw.n
	...

0090d48c <ath_buf_toggle>:
}

static struct ath_tx_buf *ath_buf_toggle(struct ath_softc_tgt *sc,
				      struct ath_tx_buf *bf,
				      a_uint8_t retry)
{
  90d48c:	6c1004        	entry	a1, 32
  90d48f:	d520      	mov.n	a5, a2
	struct ath_tx_buf *tmp = NULL;
	adf_nbuf_t buf = NULL;

	adf_os_assert(sc->sc_txbuf_held != NULL);
  90d491:	2222dc        	l32i	a2, a2, 0x370
  90d494:	cd25      	bnez.n	a2, 90d4ad <ath_buf_toggle+0x21>
  90d496:	126913        	l32r	a2, 8e78e4 <memset+0xa9c>
  90d499:	1a6af9        	l32r	a10, 8e8080 <memset+0x1238>
  90d49c:	222212        	l32i	a2, a2, 72
  90d49f:	1b6afd        	l32r	a11, 8e8094 <memset+0x124c>
  90d4a2:	0b2000        	callx8	a2
  90d4a5:	126978        	l32r	a2, 8e7a88 <memset+0xc40>
  90d4a8:	0c0200        	memw
  90d4ab:	8220      	l32i.n	a2, a2, 0

	tmp = sc->sc_txbuf_held;
  90d4ad:	2252dc        	l32i	a2, a5, 0x370

	if (retry) {
  90d4b0:	6440e0        	beqz	a4, 90d594 <ath_buf_toggle+0x108>
		ath_dma_unmap(sc, bf);
  90d4b3:	033b02        	or	a11, a3, a3
  90d4b6:	055a02        	or	a10, a5, a5
  90d4b9:	5bfef2        	call8	90d084 <ath_dma_unmap>
		adf_nbuf_queue_init(&tmp->bf_skbhead);
  90d4bc:	262c14        	addi	a6, a2, 20
 * @param[in] head  buf queue head
 */
static inline void
adf_nbuf_queue_init(adf_nbuf_queue_t *head)
{
    __adf_nbuf_queue_init(head);
  90d4bf:	066a02        	or	a10, a6, a6
  90d4c2:	5be5f8        	call8	906ca4 <__adf_nbuf_queue_init>
		buf = adf_nbuf_queue_remove(&bf->bf_skbhead);
  90d4c5:	243c14        	addi	a4, a3, 20
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  90d4c8:	044a02        	or	a10, a4, a4
  90d4cb:	5be556        	call8	906a24 <__adf_nbuf_queue_remove>
  90d4ce:	d7a0      	mov.n	a7, a10
		adf_os_assert(buf);
  90d4d0:	cda5      	bnez.n	a10, 90d4e9 <ath_buf_toggle+0x5d>
  90d4d2:	186913        	l32r	a8, 8e7920 <memset+0xad8>
  90d4d5:	1a6af9        	l32r	a10, 8e80bc <memset+0x1274>
  90d4d8:	288212        	l32i	a8, a8, 72
  90d4db:	1b6afd        	l32r	a11, 8e80d0 <memset+0x1288>
  90d4de:	0b8000        	callx8	a8
  90d4e1:	186978        	l32r	a8, 8e7ac4 <memset+0xc7c>
  90d4e4:	0c0200        	memw
  90d4e7:	8880      	l32i.n	a8, a8, 0
 * @param[in] buf   buf
 */
static inline void
adf_nbuf_queue_add(adf_nbuf_queue_t *head, adf_nbuf_t buf)
{
    __adf_nbuf_queue_add(head, buf);
  90d4e9:	da60      	mov.n	a10, a6
  90d4eb:	db70      	mov.n	a11, a7
  90d4ed:	5be545        	call8	906a04 <__adf_nbuf_queue_add>
 * @return length of the queue
 */
static inline a_uint32_t
adf_nbuf_queue_len(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_len(head);
  90d4f0:	da40      	mov.n	a10, a4
  90d4f2:	5be5f0        	call8	906cb4 <__adf_nbuf_queue_len>
		adf_nbuf_queue_add(&tmp->bf_skbhead, buf);

		adf_os_assert(adf_nbuf_queue_len(&bf->bf_skbhead) == 0);
  90d4f5:	c9a5      	beqz.n	a10, 90d50e <ath_buf_toggle+0x82>
  90d4f7:	146913        	l32r	a4, 8e7944 <memset+0xafc>
  90d4fa:	1a6af9        	l32r	a10, 8e80e0 <memset+0x1298>
  90d4fd:	244212        	l32i	a4, a4, 72
  90d500:	1b6afd        	l32r	a11, 8e80f4 <memset+0x12ac>
  90d503:	0b4000        	callx8	a4
  90d506:	146978        	l32r	a4, 8e7ae8 <memset+0xca0>
  90d509:	0c0200        	memw
  90d50c:	8440      	l32i.n	a4, a4, 0

		tmp->bf_next = bf->bf_next;
  90d50e:	843b      	l32i.n	a4, a3, 44
		tmp->bf_endpt = bf->bf_endpt;
		tmp->bf_tidno = bf->bf_tidno;
		tmp->bf_skb = bf->bf_skb;
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
  90d510:	262087        	l8ui	a6, a2, 135
		adf_os_assert(buf);
		adf_nbuf_queue_add(&tmp->bf_skbhead, buf);

		adf_os_assert(adf_nbuf_queue_len(&bf->bf_skbhead) == 0);

		tmp->bf_next = bf->bf_next;
  90d513:	942b      	s32i.n	a4, a2, 44
		tmp->bf_endpt = bf->bf_endpt;
  90d515:	243223        	l32i	a4, a3, 140
		tmp->bf_tidno = bf->bf_tidno;
		tmp->bf_skb = bf->bf_skb;
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
  90d518:	2b3c3c        	addi	a11, a3, 60
		adf_nbuf_queue_add(&tmp->bf_skbhead, buf);

		adf_os_assert(adf_nbuf_queue_len(&bf->bf_skbhead) == 0);

		tmp->bf_next = bf->bf_next;
		tmp->bf_endpt = bf->bf_endpt;
  90d51b:	242623        	s32i	a4, a2, 140
		tmp->bf_tidno = bf->bf_tidno;
  90d51e:	24304d        	l8ui	a4, a3, 77
		tmp->bf_skb = bf->bf_skb;
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
  90d521:	c4cc      	movi.n	a12, 76

		adf_os_assert(adf_nbuf_queue_len(&bf->bf_skbhead) == 0);

		tmp->bf_next = bf->bf_next;
		tmp->bf_endpt = bf->bf_endpt;
		tmp->bf_tidno = bf->bf_tidno;
  90d523:	24244d        	s8i	a4, a2, 77
		tmp->bf_skb = bf->bf_skb;
  90d526:	8438      	l32i.n	a4, a3, 32
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
  90d528:	2a2c3c        	addi	a10, a2, 60
		adf_os_assert(adf_nbuf_queue_len(&bf->bf_skbhead) == 0);

		tmp->bf_next = bf->bf_next;
		tmp->bf_endpt = bf->bf_endpt;
		tmp->bf_tidno = bf->bf_tidno;
		tmp->bf_skb = bf->bf_skb;
  90d52b:	9428      	s32i.n	a4, a2, 32
		tmp->bf_node = bf->bf_node;
  90d52d:	8434      	l32i.n	a4, a3, 16
  90d52f:	242604        	s32i	a4, a2, 16
		tmp->bf_isaggr = bf->bf_isaggr;
  90d532:	273221        	l32i	a7, a3, 132
  90d535:	24fadf        	movi	a4, -33
  90d538:	075740        	extui	a7, a7, 5, 1
  90d53b:	046601        	and	a6, a6, a4
  90d53e:	0b7711        	slli	a7, a7, 5
  90d541:	076602        	or	a6, a6, a7
  90d544:	262487        	s8i	a6, a2, 135
		tmp->bf_flags = bf->bf_flags;
  90d547:	263144        	l16ui	a6, a3, 136
  90d54a:	262544        	s16i	a6, a2, 136
		tmp->bf_state = bf->bf_state;
  90d54d:	5b6585        	call8	8e6b64 <memcpy>
		tmp->bf_retries = bf->bf_retries;
  90d550:	263086        	l8ui	a6, a3, 134
		tmp->bf_comp = bf->bf_comp;
		tmp->bf_nframes = bf->bf_nframes;
		tmp->bf_cookie = bf->bf_cookie;

		bf->bf_isaggr = 0;
		bf->bf_next = NULL;
  90d553:	c080      	movi.n	a8, 0
		tmp->bf_skb = bf->bf_skb;
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
		tmp->bf_retries = bf->bf_retries;
  90d555:	262486        	s8i	a6, a2, 134
		tmp->bf_comp = bf->bf_comp;
  90d558:	863f      	l32i.n	a6, a3, 60
		bf->bf_comp = NULL;

		bf->bf_retries = 0;
		bf->bf_nframes = 0;

		ath_dma_map(sc, tmp);
  90d55a:	da50      	mov.n	a10, a5
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
		tmp->bf_retries = bf->bf_retries;
		tmp->bf_comp = bf->bf_comp;
  90d55c:	962f      	s32i.n	a6, a2, 60
		tmp->bf_nframes = bf->bf_nframes;
  90d55e:	26304c        	l8ui	a6, a3, 76
		bf->bf_comp = NULL;

		bf->bf_retries = 0;
		bf->bf_nframes = 0;

		ath_dma_map(sc, tmp);
  90d561:	db20      	mov.n	a11, a2
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
		tmp->bf_retries = bf->bf_retries;
		tmp->bf_comp = bf->bf_comp;
		tmp->bf_nframes = bf->bf_nframes;
  90d563:	26244c        	s8i	a6, a2, 76
		tmp->bf_cookie = bf->bf_cookie;
  90d566:	263092        	l8ui	a6, a3, 146

		bf->bf_isaggr = 0;
		bf->bf_next = NULL;
  90d569:	983b      	s32i.n	a8, a3, 44
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
		tmp->bf_retries = bf->bf_retries;
		tmp->bf_comp = bf->bf_comp;
		tmp->bf_nframes = bf->bf_nframes;
		tmp->bf_cookie = bf->bf_cookie;
  90d56b:	262492        	s8i	a6, a2, 146

		bf->bf_isaggr = 0;
  90d56e:	263087        	l8ui	a6, a3, 135
		bf->bf_next = NULL;
		bf->bf_skb = NULL;
  90d571:	9838      	s32i.n	a8, a3, 32
		tmp->bf_retries = bf->bf_retries;
		tmp->bf_comp = bf->bf_comp;
		tmp->bf_nframes = bf->bf_nframes;
		tmp->bf_cookie = bf->bf_cookie;

		bf->bf_isaggr = 0;
  90d573:	046401        	and	a4, a6, a4
  90d576:	243487        	s8i	a4, a3, 135
		bf->bf_next = NULL;
		bf->bf_skb = NULL;
		bf->bf_node = NULL;
  90d579:	9834      	s32i.n	a8, a3, 16
		bf->bf_flags = 0;
  90d57b:	283544        	s16i	a8, a3, 136
		bf->bf_comp = NULL;
  90d57e:	28360f        	s32i	a8, a3, 60

		bf->bf_retries = 0;
  90d581:	283486        	s8i	a8, a3, 134
		bf->bf_nframes = 0;
  90d584:	28344c        	s8i	a8, a3, 76

		bf->bf_isaggr = 0;
		bf->bf_next = NULL;
		bf->bf_skb = NULL;
		bf->bf_node = NULL;
		bf->bf_flags = 0;
  90d587:	088402        	or	a4, a8, a8
		bf->bf_comp = NULL;

		bf->bf_retries = 0;
		bf->bf_nframes = 0;

		ath_dma_map(sc, tmp);
  90d58a:	5bffba        	call8	90d474 <ath_dma_map>
		ath_tx_tgt_setds(sc, tmp);
  90d58d:	da50      	mov.n	a10, a5
  90d58f:	db20      	mov.n	a11, a2
  90d591:	5bfef6        	call8	90d16c <ath_tx_tgt_setds>
	}

	sc->sc_txbuf_held = bf;
  90d594:	2356dc        	s32i	a3, a5, 0x370

	return tmp;
}
  90d597:	d10f      	retw.n
  90d599:	000000        	ill

0090d59c <ath_tx_freebuf>:
	bf->bf_txq_add(sc, bf);
}

static void
ath_tx_freebuf(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d59c:	6c1004        	entry	a1, 32
	a_int32_t i ;
	struct ath_tx_desc *bfd = NULL;
	struct ath_hal *ah = sc->sc_ah;
  90d59f:	242d05        	addmi	a4, a2, 0x500
  90d5a2:	864b      	l32i.n	a6, a4, 44

	for (bfd = bf->bf_desc, i = 0; i < bf->bf_dmamap_info.nsegs; bfd++, i++) {
  90d5a4:	c050      	movi.n	a5, 0
  90d5a6:	843c      	l32i.n	a4, a3, 48
  90d5a8:	270a88        	movi	a7, 136
  90d5ab:	600023        	j	90d5d2 <ath_tx_freebuf+0x36>
  90d5ae:	000028        	mull	a0, a0, a0
		ah->ah_clr11nAggr(bfd);
  90d5b1:	6214da        	j	8eea8f <memset+0x7c47>
  90d5b4:	400b80        	excw
  90d5b7:	002862        	excw
		ah->ah_set11nBurstDuration(bfd, 0);
  90d5ba:	15044a        	l32r	a5, 8ce6e4 <_bss_end+0x3bb7d4>
  90d5bd:	022b0a        	addx4	a11, a2, a2
  90d5c0:	000b80        	excw
  90d5c3:	002862        	excw
		ah->ah_set11nVirtualMoreFrag(bfd, 0);
  90d5c6:	16da40        	l32r	a6, 903ec8 <memset+0x1d080>
  90d5c9:	c0b0      	movi.n	a11, 0
  90d5cb:	0b8000        	callx8	a8
{
	a_int32_t i ;
	struct ath_tx_desc *bfd = NULL;
	struct ath_hal *ah = sc->sc_ah;

	for (bfd = bf->bf_desc, i = 0; i < bf->bf_dmamap_info.nsegs; bfd++, i++) {
  90d5ce:	a744      	add.n	a4, a4, a7
  90d5d0:	b155      	addi.n	a5, a5, 1
  90d5d2:	283201        	l32i	a8, a3, 4
  90d5d5:	7853d7        	bltu	a5, a8, 90d5b0 <ath_tx_freebuf+0x14>
		ah->ah_clr11nAggr(bfd);
		ah->ah_set11nBurstDuration(bfd, 0);
		ah->ah_set11nVirtualMoreFrag(bfd, 0);
	}

	ath_dma_unmap(sc, bf);
  90d5d8:	033b02        	or	a11, a3, a3
  90d5db:	022a02        	or	a10, a2, a2
  90d5de:	5bfea9        	call8	90d084 <ath_dma_unmap>

	ath_tgt_skb_free(sc, &bf->bf_skbhead,bf->bf_endpt);
  90d5e1:	2c3223        	l32i	a12, a3, 140
  90d5e4:	2b3c14        	addi	a11, a3, 20
  90d5e7:	022a02        	or	a10, a2, a2
  90d5ea:	5bfeac        	call8	90d09c <ath_tgt_skb_free>

	bf->bf_skb = NULL;
  90d5ed:	c040      	movi.n	a4, 0
  90d5ef:	9438      	s32i.n	a4, a3, 32
	bf->bf_comp = NULL;
  90d5f1:	943f      	s32i.n	a4, a3, 60
	bf->bf_node = NULL;
  90d5f3:	9434      	s32i.n	a4, a3, 16
	bf->bf_next = NULL;
  90d5f5:	943b      	s32i.n	a4, a3, 44
	bf = ath_buf_toggle(sc, bf, 0);
  90d5f7:	db30      	mov.n	a11, a3
  90d5f9:	dc40      	mov.n	a12, a4
  90d5fb:	da20      	mov.n	a10, a2
  90d5fd:	5bffa3        	call8	90d48c <ath_buf_toggle>
	bf->bf_retries = 0;
	bf->bf_isretried = 0;
  90d600:	26a087        	l8ui	a6, a10, 135
  90d603:	c65f      	movi.n	a5, -17
  90d605:	056501        	and	a5, a6, a5
	bf->bf_skb = NULL;
	bf->bf_comp = NULL;
	bf->bf_node = NULL;
	bf->bf_next = NULL;
	bf = ath_buf_toggle(sc, bf, 0);
	bf->bf_retries = 0;
  90d608:	24a486        	s8i	a4, a10, 134
	bf->bf_isretried = 0;
  90d60b:	25a487        	s8i	a5, a10, 135

	if (bf != NULL)
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
  90d60e:	94a9      	s32i.n	a4, a10, 36
  90d610:	2422f1        	l32i	a4, a2, 0x3c4
  90d613:	23ac24        	addi	a3, a10, 36
  90d616:	94aa      	s32i.n	a4, a10, 40
  90d618:	9a40      	s32i.n	a10, a4, 0
  90d61a:	2326f1        	s32i	a3, a2, 0x3c4
  90d61d:	d10f      	retw.n
	...

0090d620 <ath_buf_comp>:
		ath_free_tx_skb(sc->tgt_htc_handle,endpt,tskb);
	}
}

static void ath_buf_comp(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d620:	6c1004        	entry	a1, 32
	ath_dma_unmap(sc, bf);
  90d623:	022a02        	or	a10, a2, a2
  90d626:	033b02        	or	a11, a3, a3
  90d629:	5bfe96        	call8	90d084 <ath_dma_unmap>
	ath_tgt_skb_free(sc, &bf->bf_skbhead,bf->bf_endpt);
  90d62c:	2c3223        	l32i	a12, a3, 140
  90d62f:	022a02        	or	a10, a2, a2
  90d632:	2b3c14        	addi	a11, a3, 20
  90d635:	5bfe99        	call8	90d09c <ath_tgt_skb_free>
	bf->bf_skb = NULL;
  90d638:	c040      	movi.n	a4, 0
  90d63a:	9438      	s32i.n	a4, a3, 32
	bf->bf_node = NULL;
  90d63c:	9434      	s32i.n	a4, a3, 16
	bf = ath_buf_toggle(sc, bf, 0);
  90d63e:	da20      	mov.n	a10, a2
  90d640:	033b02        	or	a11, a3, a3
  90d643:	dc40      	mov.n	a12, a4
  90d645:	5bff91        	call8	90d48c <ath_buf_toggle>
	if (bf != NULL) {
  90d648:	74a10e        	beq	a10, a4, 90d65a <ath_buf_comp+0x3a>
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
  90d64b:	2322f1        	l32i	a3, a2, 0x3c4
  90d64e:	94a9      	s32i.n	a4, a10, 36
  90d650:	93aa      	s32i.n	a3, a10, 40
  90d652:	9a30      	s32i.n	a10, a3, 0
  90d654:	2aac24        	addi	a10, a10, 36
  90d657:	2a26f1        	s32i	a10, a2, 0x3c4
  90d65a:	d10f      	retw.n

0090d65c <ath_bar_tx>:
	ath_buf_comp(sc, bf);
}

static void ath_bar_tx(struct ath_softc_tgt *sc,
		       ath_atx_tid_t *tid, struct ath_tx_buf *bf)
{
  90d65c:	6c101a        	entry	a1, 208
  90d65f:	033702        	or	a7, a3, a3
	adf_nbuf_t skb;
	struct ieee80211_frame_bar *bar;
	u_int8_t min_rate;
	struct ath_tx_desc *ds, *ds0;
	struct ath_hal *ah = sc->sc_ah;
  90d662:	232d05        	addmi	a3, a2, 0x500
  90d665:	23320b        	l32i	a3, a3, 44
  90d668:	2b0a70        	movi	a11, 112
  90d66b:	231628        	s32i	a3, a1, 160
	int i = 0;
	adf_nbuf_queue_t skbhead;
	a_uint8_t *anbdata;
	a_uint32_t anblen;

	__stats(sc, tx_bars);
  90d66e:	232278        	l32i	a3, a2, 0x1e0
  90d671:	2a1c20        	addi	a10, a1, 32
  90d674:	b133      	addi.n	a3, a3, 1
  90d676:	232678        	s32i	a3, a2, 0x1e0
  90d679:	5bfefa        	call8	90d264 <__adf_os_mem_set$constprop$13>

	adf_os_mem_set(&series, 0, sizeof(series));

	ath_aggr_pause_tid(sc, tid);

	skb = adf_nbuf_queue_remove(&bf->bf_skbhead);
  90d67c:	254c14        	addi	a5, a4, 20
}

static inline void
ath_aggr_pause_tid(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
	tid->paused =1;
  90d67f:	c031      	movi.n	a3, 1
  90d681:	237434        	s8i	a3, a7, 52
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  90d684:	da50      	mov.n	a10, a5
  90d686:	5be4e7        	call8	906a24 <__adf_nbuf_queue_remove>
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90d689:	261c20        	addi	a6, a1, 32
  90d68c:	2c6c70        	addi	a12, a6, 112
  90d68f:	2b6c74        	addi	a11, a6, 116
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  90d692:	0aa302        	or	a3, a10, a10
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90d695:	5be57d        	call8	906c8c <__adf_nbuf_peek_header>
 * @return none
 */
static inline void
adf_nbuf_trim_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    __adf_nbuf_trim_tail(buf, size);
  90d698:	2b1224        	l32i	a11, a1, 144
  90d69b:	da30      	mov.n	a10, a3
  90d69d:	5be550        	call8	906be0 <__adf_nbuf_trim_tail>
	adf_nbuf_trim_tail(skb, anblen);
	bar = (struct ieee80211_frame_bar *) anbdata;

	min_rate =  0x0b;

	ath_dma_unmap(sc, bf);
  90d6a0:	da20      	mov.n	a10, a2
  90d6a2:	db40      	mov.n	a11, a4
	ath_aggr_pause_tid(sc, tid);

	skb = adf_nbuf_queue_remove(&bf->bf_skbhead);
	adf_nbuf_peek_header(skb, &anbdata, &anblen);
	adf_nbuf_trim_tail(skb, anblen);
	bar = (struct ieee80211_frame_bar *) anbdata;
  90d6a4:	261225        	l32i	a6, a1, 148

	min_rate =  0x0b;

	ath_dma_unmap(sc, bf);
  90d6a7:	5bfe77        	call8	90d084 <ath_dma_unmap>
 * @param[in] buf   buf
 */
static inline void
adf_nbuf_queue_add(adf_nbuf_queue_t *head, adf_nbuf_t buf)
{
    __adf_nbuf_queue_add(head, buf);
  90d6aa:	da50      	mov.n	a10, a5
  90d6ac:	033b02        	or	a11, a3, a3
	adf_nbuf_queue_add(&bf->bf_skbhead, skb);

	bar->i_fc[1] = IEEE80211_FC1_DIR_NODS;
  90d6af:	c050      	movi.n	a5, 0
  90d6b1:	5be4d4        	call8	906a04 <__adf_nbuf_queue_add>
  90d6b4:	256401        	s8i	a5, a6, 1
	bar->i_fc[0] = IEEE80211_FC0_VERSION_0 |
  90d6b7:	25fa84        	movi	a5, -124
  90d6ba:	256400        	s8i	a5, a6, 0
		IEEE80211_FC0_TYPE_CTL |
		IEEE80211_FC0_SUBTYPE_BAR;
	bar->i_ctl = tid->tidno << IEEE80211_BAR_CTL_TID_S |
  90d6bd:	8970      	l32i.n	a9, a7, 0
  90d6bf:	c054      	movi.n	a5, 4
  90d6c1:	049911        	slli	a9, a9, 12
  90d6c4:	059902        	or	a9, a9, a5
  90d6c7:	09094f        	extui	a9, a9, 0, 16
  90d6ca:	098a14        	srli	a10, a9, 8
  90d6cd:	2a6410        	s8i	a10, a6, 16
  90d6d0:	296411        	s8i	a9, a6, 17
		IEEE80211_BAR_CTL_COMBA;
	bar->i_seq = adf_os_cpu_to_le16(tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT);
  90d6d3:	297102        	l16ui	a9, a7, 4

	bar->i_fc[1] = IEEE80211_FC1_DIR_NODS;
	bar->i_fc[0] = IEEE80211_FC0_VERSION_0 |
		IEEE80211_FC0_TYPE_CTL |
		IEEE80211_FC0_SUBTYPE_BAR;
	bar->i_ctl = tid->tidno << IEEE80211_BAR_CTL_TID_S |
  90d6d6:	c050      	movi.n	a5, 0
		IEEE80211_BAR_CTL_COMBA;
	bar->i_seq = adf_os_cpu_to_le16(tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT);
  90d6d8:	0c9911        	slli	a9, a9, 4
  90d6db:	09094f        	extui	a9, a9, 0, 16

#undef adf_os_cpu_to_le16

static a_uint16_t adf_os_cpu_to_le16(a_uint16_t x)
{
	return ((((x) & 0xff00) >> 8) |   (((x) & 0x00ff) << 8));
  90d6de:	089b11        	slli	a11, a9, 8
  90d6e1:	098a14        	srli	a10, a9, 8
  90d6e4:	0aba02        	or	a10, a11, a10
	bar->i_fc[0] = IEEE80211_FC0_VERSION_0 |
		IEEE80211_FC0_TYPE_CTL |
		IEEE80211_FC0_SUBTYPE_BAR;
	bar->i_ctl = tid->tidno << IEEE80211_BAR_CTL_TID_S |
		IEEE80211_BAR_CTL_COMBA;
	bar->i_seq = adf_os_cpu_to_le16(tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT);
  90d6e7:	0a0a4f        	extui	a10, a10, 0, 16
  90d6ea:	0a8b14        	srli	a11, a10, 8
  90d6ed:	2b6412        	s8i	a11, a6, 18
  90d6f0:	2a6413        	s8i	a10, a6, 19

	bf->bf_seqno = tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT;
  90d6f3:	294523        	s16i	a9, a4, 70
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  90d6f6:	da30      	mov.n	a10, a3
  90d6f8:	c1b4      	movi.n	a11, 20
  90d6fa:	5be548        	call8	906c1c <__adf_nbuf_put_tail>

	adf_nbuf_put_tail(skb, sizeof(struct ieee80211_frame_bar));

	bf->bf_comp = ath_bar_tx_comp;
  90d6fd:	166afe        	l32r	a6, 8e82f8 <memset+0x14b0>
	bf->bf_tidno = tid->tidno;
	bf->bf_node = &tid->an->ni;
	ath_dma_map(sc, bf);
  90d700:	da20      	mov.n	a10, a2

	bf->bf_seqno = tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT;

	adf_nbuf_put_tail(skb, sizeof(struct ieee80211_frame_bar));

	bf->bf_comp = ath_bar_tx_comp;
  90d702:	964f      	s32i.n	a6, a4, 60
	bf->bf_tidno = tid->tidno;
  90d704:	8670      	l32i.n	a6, a7, 0
	bf->bf_node = &tid->an->ni;
	ath_dma_map(sc, bf);
  90d706:	db40      	mov.n	a11, a4
	bf->bf_seqno = tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT;

	adf_nbuf_put_tail(skb, sizeof(struct ieee80211_frame_bar));

	bf->bf_comp = ath_bar_tx_comp;
	bf->bf_tidno = tid->tidno;
  90d708:	26444d        	s8i	a6, a4, 77
	bf->bf_node = &tid->an->ni;
  90d70b:	867e      	l32i.n	a6, a7, 56
  90d70d:	9644      	s32i.n	a6, a4, 16
	ath_dma_map(sc, bf);
  90d70f:	5bff59        	call8	90d474 <ath_dma_map>
 * @param[out] sg   map info
 */
static inline void
adf_nbuf_dmamap_info(adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
    __adf_nbuf_dmamap_info(bmap, sg);
  90d712:	8a40      	l32i.n	a10, a4, 0
  90d714:	b44b      	addi.n	a11, a4, 4
  90d716:	5be4dc        	call8	906a88 <__adf_nbuf_dmamap_info>
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	ds = bf->bf_desc;
	ah->ah_setupTxDesc(ds
  90d719:	291228        	l32i	a9, a1, 160
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  90d71c:	da30      	mov.n	a10, a3
  90d71e:	289217        	l32i	a8, a9, 92
	bf->bf_tidno = tid->tidno;
	bf->bf_node = &tid->an->ni;
	ath_dma_map(sc, bf);
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	ds = bf->bf_desc;
  90d721:	864c      	l32i.n	a6, a4, 48
  90d723:	281629        	s32i	a8, a1, 164
  90d726:	5be551        	call8	906c6c <__adf_nbuf_len>
	ah->ah_setupTxDesc(ds
  90d729:	234049        	l8ui	a3, a4, 73
  90d72c:	c0fb      	movi.n	a15, 11
  90d72e:	9311      	s32i.n	a3, a1, 4
  90d730:	281229        	l32i	a8, a1, 164
  90d733:	c131      	movi.n	a3, 17
  90d735:	b4ab      	addi.n	a11, a10, 4
  90d737:	9312      	s32i.n	a3, a1, 8
  90d739:	da60      	mov.n	a10, a6
  90d73b:	9f10      	s32i.n	a15, a1, 0
  90d73d:	9513      	s32i.n	a5, a1, 12
  90d73f:	9514      	s32i.n	a5, a1, 16
  90d741:	dc50      	mov.n	a12, a5
  90d743:	055d02        	or	a13, a5, a5
  90d746:	2e0a3c        	movi	a14, 60
  90d749:	0b8000        	callx8	a8
			    , HAL_TXDESC_INTREQ
			    | HAL_TXDESC_CLRDMASK
			    , 0, 0);

	skbhead = bf->bf_skbhead;
	bf->bf_isaggr = 0;
  90d74c:	284087        	l8ui	a8, a4, 135
  90d74f:	23fadf        	movi	a3, -33
  90d752:	038301        	and	a3, a8, a3
  90d755:	234487        	s8i	a3, a4, 135
	bf->bf_next = NULL;
  90d758:	954b      	s32i.n	a5, a4, 44

	for (ds0 = ds, i=0; i < bf->bf_dmamap_info.nsegs; ds0++, i++) {
  90d75a:	d360      	mov.n	a3, a6
  90d75c:	260a88        	movi	a6, 136
  90d75f:	600011        	j	90d774 <ath_bar_tx+0x118>
  90d762:	000000        	ill
		ah->ah_clr11nAggr(ds0);
  90d765:	291228        	l32i	a9, a1, 160
  90d768:	da30      	mov.n	a10, a3
  90d76a:	289214        	l32i	a8, a9, 80

	skbhead = bf->bf_skbhead;
	bf->bf_isaggr = 0;
	bf->bf_next = NULL;

	for (ds0 = ds, i=0; i < bf->bf_dmamap_info.nsegs; ds0++, i++) {
  90d76d:	a633      	add.n	a3, a3, a6
		ah->ah_clr11nAggr(ds0);
  90d76f:	0b8000        	callx8	a8

	skbhead = bf->bf_skbhead;
	bf->bf_isaggr = 0;
	bf->bf_next = NULL;

	for (ds0 = ds, i=0; i < bf->bf_dmamap_info.nsegs; ds0++, i++) {
  90d772:	b155      	addi.n	a5, a5, 1
  90d774:	8841      	l32i.n	a8, a4, 4
  90d776:	7853eb        	bltu	a5, a8, 90d765 <ath_bar_tx+0x109>
		ah->ah_clr11nAggr(ds0);
	}

	ath_filltxdesc(sc, bf);
  90d779:	da20      	mov.n	a10, a2
  90d77b:	db40      	mov.n	a11, a4
  90d77d:	5bfe51        	call8	90d0c4 <ath_filltxdesc>

	for (i = 0 ; i < 4; i++) {
		series[i].Tries = ATH_TXMAXTRY;
		series[i].Rate = min_rate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90d780:	232d16        	addmi	a3, a2, 0x1600
  90d783:	281c20        	addi	a8, a1, 32
  90d786:	263026        	l8ui	a6, a3, 38

	bf->bf_comp = NULL;
	ath_buf_comp(sc, bf);
}

static void ath_bar_tx(struct ath_softc_tgt *sc,
  90d789:	258c70        	addi	a5, a8, 112
	}

	ath_filltxdesc(sc, bf);

	for (i = 0 ; i < 4; i++) {
		series[i].Tries = ATH_TXMAXTRY;
  90d78c:	c03b      	movi.n	a3, 11
  90d78e:	9380      	s32i.n	a3, a8, 0
		series[i].Rate = min_rate;
  90d790:	9381      	s32i.n	a3, a8, 4
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90d792:	9683      	s32i.n	a6, a8, 12
  90d794:	288c1c        	addi	a8, a8, 28
		ah->ah_clr11nAggr(ds0);
	}

	ath_filltxdesc(sc, bf);

	for (i = 0 ; i < 4; i++) {
  90d797:	7589f3        	bne	a8, a5, 90d78e <ath_bar_tx+0x132>
		series[i].Tries = ATH_TXMAXTRY;
		series[i].Rate = min_rate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
	}

	ah->ah_set11nRateScenario(bf->bf_desc, 0, 0, series, 4, 4);
  90d79a:	251228        	l32i	a5, a1, 160
  90d79d:	8a4c      	l32i.n	a10, a4, 48
  90d79f:	c0b0      	movi.n	a11, 0
  90d7a1:	c0e4      	movi.n	a14, 4
  90d7a3:	235210        	l32i	a3, a5, 64
  90d7a6:	dcb0      	mov.n	a12, a11
  90d7a8:	2d1c20        	addi	a13, a1, 32
  90d7ab:	0eef02        	or	a15, a14, a14
  90d7ae:	0b3000        	callx8	a3
	ath_tgt_txq_add_ucast(sc, bf);
  90d7b1:	da20      	mov.n	a10, a2
  90d7b3:	db40      	mov.n	a11, a4
  90d7b5:	5bfddc        	call8	90cf28 <ath_tgt_txq_add_ucast>
  90d7b8:	d10f      	retw.n
	...

0090d7bc <ATH_SKB_2_WH>:
int ath_tgt_tx_add_to_aggr(struct ath_softc_tgt *sc,
			   struct ath_buf *bf,int datatype,
			   ath_atx_tid_t *tid, int is_burst);

struct ieee80211_frame *ATH_SKB_2_WH(adf_nbuf_t skb)
{
  90d7bc:	6c1006        	entry	a1, 48
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90d7bf:	da20      	mov.n	a10, a2
  90d7c1:	b41b      	addi.n	a11, a1, 4
  90d7c3:	dc10      	mov.n	a12, a1
  90d7c5:	5be531        	call8	906c8c <__adf_nbuf_peek_header>
	a_uint32_t anblen;

	adf_nbuf_peek_header(skb, &anbdata, &anblen);

	return((struct ieee80211_frame *)anbdata);
}
  90d7c8:	8211      	l32i.n	a2, a1, 4
  90d7ca:	d10f      	retw.n

0090d7cc <ath_tx_set_retry>:
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
	}
}

static void ath_tx_set_retry(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d7cc:	6c1004        	entry	a1, 32
	struct ieee80211_frame *wh;

	__stats(sc, txaggr_retries);
  90d7cf:	282260        	l32i	a8, a2, 0x180

	bf->bf_isretried = 1;
	bf->bf_retries ++;
	wh = ATH_SKB_2_WH(bf->bf_skb);
  90d7d2:	8a38      	l32i.n	a10, a3, 32

static void ath_tx_set_retry(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ieee80211_frame *wh;

	__stats(sc, txaggr_retries);
  90d7d4:	b188      	addi.n	a8, a8, 1
  90d7d6:	282660        	s32i	a8, a2, 0x180

	bf->bf_isretried = 1;
  90d7d9:	283087        	l8ui	a8, a3, 135
  90d7dc:	c120      	movi.n	a2, 16
  90d7de:	028202        	or	a2, a8, a2
  90d7e1:	223487        	s8i	a2, a3, 135
	bf->bf_retries ++;
  90d7e4:	223086        	l8ui	a2, a3, 134
  90d7e7:	222c01        	addi	a2, a2, 1
  90d7ea:	223486        	s8i	a2, a3, 134
	wh = ATH_SKB_2_WH(bf->bf_skb);
  90d7ed:	5bfff3        	call8	90d7bc <ATH_SKB_2_WH>
	wh->i_fc[1] |= IEEE80211_FC1_RETRY;
  90d7f0:	23a001        	l8ui	a3, a10, 1
  90d7f3:	c028      	movi.n	a2, 8
  90d7f5:	023202        	or	a2, a3, a2
  90d7f8:	22a401        	s8i	a2, a10, 1
  90d7fb:	d10f      	retw.n
  90d7fd:	000000        	ill

0090d800 <owl_tgt_node_init>:
		ath_aggr_resume_tid(sc, tid);
	}
}

void owl_tgt_node_init(struct ath_node_target * an)
{
  90d800:	6c1004        	entry	a1, 32
	struct ath_atx_tid *tid;
	int tidno;

	for (tidno = 0, tid = &an->tid[tidno]; tidno < WME_NUM_TID;tidno++, tid++) {
  90d803:	232c24        	addi	a3, a2, 36
  90d806:	240a00        	movi	a4, 0
		tid->tidno = tidno;
		tid->an = an;

		if ( tid->flag & TID_CLEANUP_INPROGRES ) {
			tid->flag |= TID_REINITIALIZE;
  90d809:	250a04        	movi	a5, 4

	for (tidno = 0, tid = &an->tid[tidno]; tidno < WME_NUM_TID;tidno++, tid++) {
		tid->tidno = tidno;
		tid->an = an;

		if ( tid->flag & TID_CLEANUP_INPROGRES ) {
  90d80c:	283036        	l8ui	a8, a3, 54
{
	struct ath_atx_tid *tid;
	int tidno;

	for (tidno = 0, tid = &an->tid[tidno]; tidno < WME_NUM_TID;tidno++, tid++) {
		tid->tidno = tidno;
  90d80f:	9430      	s32i.n	a4, a3, 0
		tid->an = an;
  90d811:	923e      	s32i.n	a2, a3, 56

		if ( tid->flag & TID_CLEANUP_INPROGRES ) {
  90d813:	7f871d        	bbci	a8, 31, 90d834 <owl_tgt_node_init+0x34>
			tid->flag |= TID_REINITIALIZE;
  90d816:	058802        	or	a8, a8, a5
  90d819:	283436        	s8i	a8, a3, 54
			adf_os_print("tid[%p]->incomp is not 0: %d\n",
  90d81c:	186913        	l32r	a8, 8e7c68 <memset+0xe20>
  90d81f:	2c3037        	l8ui	a12, a3, 55
  90d822:	288212        	l32i	a8, a8, 72
  90d825:	1a6aff        	l32r	a10, 8e8424 <memset+0x15dc>
  90d828:	db30      	mov.n	a11, a3
  90d82a:	00cc32        	sext	a12, a12, 7
  90d82d:	0b8000        	callx8	a8
  90d830:	600005        	j	90d839 <owl_tgt_node_init+0x39>
  90d833:	00da30        	excw
				     tid, tid->incomp);
		} else {
			owl_tgt_tid_init(tid);
  90d836:	5bfda9        	call8	90cedc <owl_tgt_tid_init>
void owl_tgt_node_init(struct ath_node_target * an)
{
	struct ath_atx_tid *tid;
	int tidno;

	for (tidno = 0, tid = &an->tid[tidno]; tidno < WME_NUM_TID;tidno++, tid++) {
  90d839:	b144      	addi.n	a4, a4, 1
  90d83b:	233c3c        	addi	a3, a3, 60
  90d83e:	6948ca        	bnei	a4, 8, 90d80c <owl_tgt_node_init+0xc>
				     tid, tid->incomp);
		} else {
			owl_tgt_tid_init(tid);
		}
	}
}
  90d841:	d10f      	retw.n
	...

0090d844 <ath_tx_status_clear>:

void ath_tx_status_clear(struct ath_softc_tgt *sc)
{
  90d844:	6c1004        	entry	a1, 32
	int i;

	for (i = 0; i < 2; i++) {
		sc->tx_status[i].cnt = 0;
  90d847:	222d16        	addmi	a2, a2, 0x1600
  90d84a:	c080      	movi.n	a8, 0
  90d84c:	282438        	s8i	a8, a2, 56
  90d84f:	28245d        	s8i	a8, a2, 93
  90d852:	d10f      	retw.n

0090d854 <ath_tx_status_update>:

	return txs;
}

void ath_tx_status_update(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d854:	6c1004        	entry	a1, 32
	struct ath_tx_desc *ds = bf->bf_lastds;
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  90d857:	282249        	l32i	a8, a2, 0x124
  90d85a:	146abb        	l32r	a4, 8e8348 <memset+0x1500>

	return txs;
}

void ath_tx_status_update(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d85d:	da20      	mov.n	a10, a2
	struct ath_tx_desc *ds = bf->bf_lastds;
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  90d85f:	048401        	and	a4, a8, a4
	return txs;
}

void ath_tx_status_update(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds = bf->bf_lastds;
  90d862:	8c3e      	l32i.n	a12, a3, 56
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  90d864:	654075        	bnez	a4, 90d8dd <ath_tx_status_update+0x89>
{
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
  90d867:	292d16        	addmi	a9, a2, 0x1600
  90d86a:	2b9038        	l8ui	a11, a9, 56
  90d86d:	280a0b        	movi	a8, 11
  90d870:	7b8b08        	bgeu	a8, a11, 90d87c <ath_tx_status_update+0x28>
  90d873:	24905d        	l8ui	a4, a9, 93
  90d876:	748363        	bltu	a8, a4, 90d8dd <ath_tx_status_update+0x89>
static WMI_TXSTATUS_EVENT *ath_tx_status_get(struct ath_softc_tgt *sc)
{
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
  90d879:	240a01        	movi	a4, 1
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  90d87c:	04480b        	addx8	a8, a4, a4
  90d87f:	04840a        	addx4	a4, a8, a4
  90d882:	186b00        	l32r	a8, 8e8484 <memset+0x163c>

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  90d885:	2b3092        	l8ui	a11, a3, 146
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  90d888:	a844      	add.n	a4, a4, a8
  90d88a:	a4a4      	add.n	a4, a10, a4

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  90d88c:	284008        	l8ui	a8, a4, 8
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  90d88f:	b84d      	addi.n	a13, a4, 8

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  90d891:	088909        	addx2	a9, a8, a8
  90d894:	a9d9      	add.n	a9, a13, a9
  90d896:	2b9401        	s8i	a11, a9, 1
	txs->txstatus[txs->cnt].ts_rate = SM(bf->bf_endpt, ATH9K_HTC_TXSTAT_EPID);
  90d899:	2b3223        	l32i	a11, a3, 140
  90d89c:	0cbb11        	slli	a11, a11, 4
  90d89f:	2b9402        	s8i	a11, a9, 2

	if (ds->ds_txstat.ts_status & HAL_TXERR_FILT)
  90d8a2:	2ec066        	l8ui	a14, a12, 102
  90d8a5:	2b0a02        	movi	a11, 2
  90d8a8:	7be008        	bnone	a14, a11, 90d8b4 <ath_tx_status_update+0x60>
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_FILT;
  90d8ab:	2e9003        	l8ui	a14, a9, 3
  90d8ae:	0beb02        	or	a11, a14, a11
  90d8b1:	2b9403        	s8i	a11, a9, 3

	if (!(ds->ds_txstat.ts_status & HAL_TXERR_XRETRY) &&
  90d8b4:	2bc066        	l8ui	a11, a12, 102
  90d8b7:	c197      	movi.n	a9, 23
  90d8b9:	79b80f        	bany	a11, a9, 90d8cc <ath_tx_status_update+0x78>
	    !(ds->ds_txstat.ts_status & HAL_TXERR_FIFO) &&
	    !(ds->ds_txstat.ts_status & HAL_TXERR_TIMER_EXPIRED) &&
	    !(ds->ds_txstat.ts_status & HAL_TXERR_FILT))
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_ACK;
  90d8bc:	088809        	addx2	a8, a8, a8
  90d8bf:	a8d8      	add.n	a8, a13, a8
  90d8c1:	2b8003        	l8ui	a11, a8, 3
  90d8c4:	c091      	movi.n	a9, 1
  90d8c6:	09b902        	or	a9, a11, a9
  90d8c9:	298403        	s8i	a9, a8, 3

	ath_tx_status_update_rate(sc, bf->bf_rcs, ds->ds_txstat.ts_rate, txs);
  90d8cc:	2cc068        	l8ui	a12, a12, 104
  90d8cf:	2b3c50        	addi	a11, a3, 80
  90d8d2:	5bfd0a        	call8	90ccfc <ath_tx_status_update_rate>

	txs->cnt++;
  90d8d5:	234008        	l8ui	a3, a4, 8
  90d8d8:	b133      	addi.n	a3, a3, 1
  90d8da:	234408        	s8i	a3, a4, 8
  90d8dd:	d10f      	retw.n
	...

0090d8e0 <ath_tx_status_update_aggr>:
}

void ath_tx_status_update_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
			       struct ath_tx_desc *ds, struct ath_rc_series rcs[],
			       int txok)
{
  90d8e0:	6c1004        	entry	a1, 32
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  90d8e3:	282249        	l32i	a8, a2, 0x124
  90d8e6:	176abb        	l32r	a7, 8e83d4 <memset+0x158c>
}

void ath_tx_status_update_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
			       struct ath_tx_desc *ds, struct ath_rc_series rcs[],
			       int txok)
{
  90d8e9:	da20      	mov.n	a10, a2
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  90d8eb:	078701        	and	a7, a8, a7
}

void ath_tx_status_update_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
			       struct ath_tx_desc *ds, struct ath_rc_series rcs[],
			       int txok)
{
  90d8ee:	db50      	mov.n	a11, a5
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  90d8f0:	657058        	bnez	a7, 90d94c <ath_tx_status_update_aggr+0x6c>
{
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
  90d8f3:	292d16        	addmi	a9, a2, 0x1600
  90d8f6:	2c9038        	l8ui	a12, a9, 56
  90d8f9:	280a0b        	movi	a8, 11
  90d8fc:	7c8b08        	bgeu	a8, a12, 90d908 <ath_tx_status_update_aggr+0x28>
  90d8ff:	27905d        	l8ui	a7, a9, 93
  90d902:	778346        	bltu	a8, a7, 90d94c <ath_tx_status_update_aggr+0x6c>
static WMI_TXSTATUS_EVENT *ath_tx_status_get(struct ath_softc_tgt *sc)
{
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
  90d905:	270a01        	movi	a7, 1
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  90d908:	07780b        	addx8	a8, a7, a7
  90d90b:	07870a        	addx4	a7, a8, a7
  90d90e:	186b00        	l32r	a8, 8e8510 <memset+0x16c8>

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  90d911:	293092        	l8ui	a9, a3, 146
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  90d914:	a877      	add.n	a7, a7, a8
  90d916:	a7a7      	add.n	a7, a10, a7

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  90d918:	287008        	l8ui	a8, a7, 8
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  90d91b:	b87d      	addi.n	a13, a7, 8

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  90d91d:	088809        	addx2	a8, a8, a8
  90d920:	a8d8      	add.n	a8, a13, a8
  90d922:	298401        	s8i	a9, a8, 1
	txs->txstatus[txs->cnt].ts_rate = SM(bf->bf_endpt, ATH9K_HTC_TXSTAT_EPID);
  90d925:	233223        	l32i	a3, a3, 140
  90d928:	0c3311        	slli	a3, a3, 4
  90d92b:	238402        	s8i	a3, a8, 2

	if (txok)
  90d92e:	c86a      	beqz.n	a6, 90d93c <ath_tx_status_update_aggr+0x5c>
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_ACK;
  90d930:	298003        	l8ui	a9, a8, 3
  90d933:	230a01        	movi	a3, 1
  90d936:	039302        	or	a3, a9, a3
  90d939:	238403        	s8i	a3, a8, 3

	if (rcs)
  90d93c:	c8b4      	beqz.n	a11, 90d944 <ath_tx_status_update_aggr+0x64>
		ath_tx_status_update_rate(sc, rcs, ds->ds_txstat.ts_rate, txs);
  90d93e:	2c4068        	l8ui	a12, a4, 104
  90d941:	5bfcee        	call8	90ccfc <ath_tx_status_update_rate>

	txs->cnt++;
  90d944:	237008        	l8ui	a3, a7, 8
  90d947:	b133      	addi.n	a3, a3, 1
  90d949:	237408        	s8i	a3, a7, 8
  90d94c:	d10f      	retw.n
	...

0090d950 <ath_tx_retry_subframe>:
}

static void
ath_tx_retry_subframe(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
		      ath_tx_bufhead *bf_q, struct ath_tx_buf **bar)
{
  90d950:	6c1006        	entry	a1, 48
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
	int i = 0;

	__stats(sc, txaggr_compretries);
  90d953:	262263        	l32i	a6, a2, 0x18c
}

static void
ath_tx_retry_subframe(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
		      ath_tx_bufhead *bf_q, struct ath_tx_buf **bar)
{
  90d956:	d850      	mov.n	a8, a5
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
	int i = 0;

	__stats(sc, txaggr_compretries);
  90d958:	b166      	addi.n	a6, a6, 1
{

	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
  90d95a:	252d05        	addmi	a5, a2, 0x500
static void
ath_tx_retry_subframe(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
		      ath_tx_bufhead *bf_q, struct ath_tx_buf **bar)
{

	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  90d95d:	8c34      	l32i.n	a12, a3, 16
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90d95f:	29304d        	l8ui	a9, a3, 77
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
  90d962:	855b      	l32i.n	a5, a5, 44
	int i = 0;

	__stats(sc, txaggr_compretries);
  90d964:	262663        	s32i	a6, a2, 0x18c

	for(ds = bf->bf_desc, i = 0; i < bf->bf_dmamap_info.nsegs; ds++, i++) {
  90d967:	c070      	movi.n	a7, 0
  90d969:	863c      	l32i.n	a6, a3, 48
  90d96b:	2d0a88        	movi	a13, 136
  90d96e:	600030        	j	90d9a2 <ath_tx_retry_subframe+0x52>
		ah->ah_clr11nAggr(ds);
  90d971:	2b5214        	l32i	a11, a5, 80
  90d974:	da60      	mov.n	a10, a6
  90d976:	9813      	s32i.n	a8, a1, 12
  90d978:	9911      	s32i.n	a9, a1, 4
  90d97a:	9c10      	s32i.n	a12, a1, 0
  90d97c:	9d12      	s32i.n	a13, a1, 8
  90d97e:	0bb000        	callx8	a11
		ah->ah_set11nBurstDuration(ds, 0);
  90d981:	2e5215        	l32i	a14, a5, 84
  90d984:	066a02        	or	a10, a6, a6
  90d987:	c0b0      	movi.n	a11, 0
  90d989:	0be000        	callx8	a14
		ah->ah_set11nVirtualMoreFrag(ds, 0);
  90d98c:	2e5216        	l32i	a14, a5, 88
  90d98f:	da60      	mov.n	a10, a6
  90d991:	c0b0      	movi.n	a11, 0
  90d993:	0be000        	callx8	a14
	struct ath_hal *ah = sc->sc_ah;
	int i = 0;

	__stats(sc, txaggr_compretries);

	for(ds = bf->bf_desc, i = 0; i < bf->bf_dmamap_info.nsegs; ds++, i++) {
  90d996:	8d12      	l32i.n	a13, a1, 8
  90d998:	8c10      	l32i.n	a12, a1, 0
  90d99a:	8911      	l32i.n	a9, a1, 4
  90d99c:	8813      	l32i.n	a8, a1, 12
  90d99e:	ad66      	add.n	a6, a6, a13
  90d9a0:	b177      	addi.n	a7, a7, 1
  90d9a2:	8b31      	l32i.n	a11, a3, 4
  90d9a4:	7b73c9        	bltu	a7, a11, 90d971 <ath_tx_retry_subframe+0x21>
		ah->ah_clr11nAggr(ds);
		ah->ah_set11nBurstDuration(ds, 0);
		ah->ah_set11nVirtualMoreFrag(ds, 0);
	}

	if (bf->bf_retries >= OWLMAX_RETRIES) {
  90d9a7:	253086        	l8ui	a5, a3, 134
  90d9aa:	c069      	movi.n	a6, 9
  90d9ac:	756b40        	bgeu	a6, a5, 90d9f0 <ath_tx_retry_subframe+0xa0>
		__stats(sc, txaggr_xretries);
  90d9af:	242274        	l32i	a4, a2, 0x1d0
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90d9b2:	2b3123        	l16ui	a11, a3, 70
		ah->ah_set11nBurstDuration(ds, 0);
		ah->ah_set11nVirtualMoreFrag(ds, 0);
	}

	if (bf->bf_retries >= OWLMAX_RETRIES) {
		__stats(sc, txaggr_xretries);
  90d9b5:	b144      	addi.n	a4, a4, 1
  90d9b7:	242674        	s32i	a4, a2, 0x1d0
ath_tx_retry_subframe(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
		      ath_tx_bufhead *bf_q, struct ath_tx_buf **bar)
{

	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90d9ba:	0c9411        	slli	a4, a9, 4
  90d9bd:	09490c        	sub	a9, a4, a9
  90d9c0:	0c9a0a        	addx4	a10, a9, a12
		ah->ah_set11nVirtualMoreFrag(ds, 0);
	}

	if (bf->bf_retries >= OWLMAX_RETRIES) {
		__stats(sc, txaggr_xretries);
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90d9c3:	2aac24        	addi	a10, a10, 36
  90d9c6:	0b4b14        	srli	a11, a11, 4
  90d9c9:	9813      	s32i.n	a8, a1, 12
  90d9cb:	5bfd96        	call8	90d024 <ath_tx_update_baw>
		ath_tx_status_update_aggr(sc, bf, bf->bf_lastds, NULL, 0);
  90d9ce:	c0d0      	movi.n	a13, 0
  90d9d0:	8c3e      	l32i.n	a12, a3, 56
  90d9d2:	da20      	mov.n	a10, a2
  90d9d4:	db30      	mov.n	a11, a3
  90d9d6:	0dde02        	or	a14, a13, a13
  90d9d9:	5bffc1        	call8	90d8e0 <ath_tx_status_update_aggr>

		if (!*bar)
  90d9dc:	8813      	l32i.n	a8, a1, 12
  90d9de:	8480      	l32i.n	a4, a8, 0
  90d9e0:	cc42      	bnez.n	a4, 90d9e6 <ath_tx_retry_subframe+0x96>
			*bar = bf;
  90d9e2:	9380      	s32i.n	a3, a8, 0
  90d9e4:	d10f      	retw.n
		else
			ath_tx_freebuf(sc, bf);
  90d9e6:	da20      	mov.n	a10, a2
  90d9e8:	db30      	mov.n	a11, a3
  90d9ea:	5bfeec        	call8	90d59c <ath_tx_freebuf>
  90d9ed:	d10f      	retw.n
  90d9ef:	00853b        	movgez	a5, a8, a0
		return;
	}

	if (!bf->bf_next) {
  90d9f2:	cd54      	bnez.n	a5, 90da0a <ath_tx_retry_subframe+0xba>
		__stats(sc, txaggr_errlast);
  90d9f4:	252267        	l32i	a5, a2, 0x19c
		bf = ath_buf_toggle(sc, bf, 1);
  90d9f7:	db30      	mov.n	a11, a3
			ath_tx_freebuf(sc, bf);
		return;
	}

	if (!bf->bf_next) {
		__stats(sc, txaggr_errlast);
  90d9f9:	b155      	addi.n	a5, a5, 1
  90d9fb:	252667        	s32i	a5, a2, 0x19c
		bf = ath_buf_toggle(sc, bf, 1);
  90d9fe:	da20      	mov.n	a10, a2
  90da00:	c0c1      	movi.n	a12, 1
  90da02:	5bfea2        	call8	90d48c <ath_buf_toggle>
  90da05:	d3a0      	mov.n	a3, a10
  90da07:	60000d        	j	90da18 <ath_tx_retry_subframe+0xc8>
	} else
		bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs - 1]);
  90da0a:	b0b5      	addi.n	a5, a11, -1
  90da0c:	0c5611        	slli	a6, a5, 4
  90da0f:	a565      	add.n	a5, a6, a5
  90da11:	863d      	l32i.n	a6, a3, 52
  90da13:	06550b        	addx8	a5, a5, a6
  90da16:	953e      	s32i.n	a5, a3, 56

	ath_tx_set_retry(sc, bf);
  90da18:	da20      	mov.n	a10, a2
  90da1a:	db30      	mov.n	a11, a3
	asf_tailq_insert_tail(bf_q, bf, bf_list);
  90da1c:	c020      	movi.n	a2, 0
		__stats(sc, txaggr_errlast);
		bf = ath_buf_toggle(sc, bf, 1);
	} else
		bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs - 1]);

	ath_tx_set_retry(sc, bf);
  90da1e:	5bff6b        	call8	90d7cc <ath_tx_set_retry>
	asf_tailq_insert_tail(bf_q, bf, bf_list);
  90da21:	9239      	s32i.n	a2, a3, 36
  90da23:	8241      	l32i.n	a2, a4, 4
  90da25:	923a      	s32i.n	a2, a3, 40
  90da27:	9320      	s32i.n	a3, a2, 0
  90da29:	233c24        	addi	a3, a3, 36
  90da2c:	9341      	s32i.n	a3, a4, 4
  90da2e:	d10f      	retw.n

0090da30 <ath_tx_comp_aggr_error>:
}

static void
ath_tx_comp_aggr_error(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
		       ath_atx_tid_t *tid)
{
  90da30:	6c1020        	entry	a1, 0x100


	struct ath_tx_desc lastds;
	struct ath_tx_desc *ds = &lastds;
	struct ath_rc_series rcs[4];
	struct ath_tx_buf *bar = NULL;
  90da33:	c060      	movi.n	a6, 0
  90da35:	261630        	s32i	a6, a1, 192
	struct ath_tx_buf *bf_next;
	int nframes = bf->bf_nframes;
	ath_tx_bufhead bf_q;
	struct ath_txq *txq;

	asf_tailq_init(&bf_q);
  90da38:	26162e        	s32i	a6, a1, 184
 * @param[in] size    buffer size
 */
static inline void
adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    __adf_os_mem_copy(dst, src, size);
  90da3b:	8b3e      	l32i.n	a11, a3, 56
  90da3d:	260ab8        	movi	a6, 184
  90da40:	061608        	add	a6, a1, a6
  90da43:	011a02        	or	a10, a1, a1
  90da46:	2c0a88        	movi	a12, 136
	struct ath_tx_desc lastds;
	struct ath_tx_desc *ds = &lastds;
	struct ath_rc_series rcs[4];
	struct ath_tx_buf *bar = NULL;
	struct ath_tx_buf *bf_next;
	int nframes = bf->bf_nframes;
  90da49:	25304c        	l8ui	a5, a3, 76
	ath_tx_bufhead bf_q;
	struct ath_txq *txq;

	asf_tailq_init(&bf_q);
  90da4c:	26162f        	s32i	a6, a1, 188
	txq = bf->bf_txq;
  90da4f:	273220        	l32i	a7, a3, 128
  90da52:	5bfd0a        	call8	90ce7c <__adf_os_mem_copy>
  90da55:	2a0a88        	movi	a10, 136
  90da58:	0a1a08        	add	a10, a1, a10
  90da5b:	2b3c50        	addi	a11, a3, 80
  90da5e:	2c0a30        	movi	a12, 48
  90da61:	5bfd06        	call8	90ce7c <__adf_os_mem_copy>
	adf_os_mem_copy(ds, bf->bf_lastds, sizeof (struct ath_tx_desc));
	adf_os_mem_copy(rcs, bf->bf_rcs, sizeof(rcs));

	while (bf) {
		bf_next = bf->bf_next;
		ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
  90da64:	d860      	mov.n	a8, a6
  90da66:	2d0ac0        	movi	a13, 192

	adf_os_mem_copy(ds, bf->bf_lastds, sizeof (struct ath_tx_desc));
	adf_os_mem_copy(rcs, bf->bf_rcs, sizeof(rcs));

	while (bf) {
		bf_next = bf->bf_next;
  90da69:	863b      	l32i.n	a6, a3, 44
		ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
  90da6b:	db30      	mov.n	a11, a3
  90da6d:	dc80      	mov.n	a12, a8
  90da6f:	da20      	mov.n	a10, a2
  90da71:	a1dd      	add.n	a13, a13, a1
  90da73:	281634        	s32i	a8, a1, 208
  90da76:	5bffb6        	call8	90d950 <ath_tx_retry_subframe>
		bf = bf_next;
  90da79:	d360      	mov.n	a3, a6
	txq = bf->bf_txq;

	adf_os_mem_copy(ds, bf->bf_lastds, sizeof (struct ath_tx_desc));
	adf_os_mem_copy(rcs, bf->bf_rcs, sizeof(rcs));

	while (bf) {
  90da7b:	281234        	l32i	a8, a1, 208
  90da7e:	656fe4        	bnez	a6, 90da66 <ath_tx_comp_aggr_error+0x36>
		bf_next = bf->bf_next;
		ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
		bf = bf_next;
	}

	ath_update_aggr_stats(sc, ds, nframes, nframes);
  90da81:	022a02        	or	a10, a2, a2
  90da84:	011b02        	or	a11, a1, a1
  90da87:	5bfdd6        	call8	90d1e0 <ath_update_aggr_stats$isra$2>
	ath_rate_tx_complete(sc, tid->an, ds, rcs, nframes, nframes);
  90da8a:	8b4e      	l32i.n	a11, a4, 56
  90da8c:	2d0a88        	movi	a13, 136
  90da8f:	dc10      	mov.n	a12, a1
  90da91:	da20      	mov.n	a10, a2
  90da93:	ad1d      	add.n	a13, a1, a13
  90da95:	de50      	mov.n	a14, a5
  90da97:	df50      	mov.n	a15, a5
  90da99:	5bfcd8        	call8	90cdfc <ath_rate_tx_complete>

	if (bar) {
  90da9c:	2c1230        	l32i	a12, a1, 192
  90da9f:	c8c5      	beqz.n	a12, 90daa8 <ath_tx_comp_aggr_error+0x78>
		ath_bar_tx(sc, tid, bar);
  90daa1:	da20      	mov.n	a10, a2
  90daa3:	db40      	mov.n	a11, a4
  90daa5:	5bfeed        	call8	90d65c <ath_bar_tx>
	}

	if (!asf_tailq_empty(&bf_q)) {
  90daa8:	23122e        	l32i	a3, a1, 184
  90daab:	ca3d      	beqz.n	a3, 90dadc <ath_tx_comp_aggr_error+0xac>
		__stats(sc, txaggr_prepends);
  90daad:	232264        	l32i	a3, a2, 0x190
  90dab0:	b133      	addi.n	a3, a3, 1
  90dab2:	232664        	s32i	a3, a2, 0x190
		TAILQ_INSERTQ_HEAD(&tid->buf_q, &bf_q, bf_list);
  90dab5:	834b      	l32i.n	a3, a4, 44
  90dab7:	22122f        	l32i	a2, a1, 188
  90daba:	c83b      	beqz.n	a3, 90dac9 <ath_tx_comp_aggr_error+0x99>
  90dabc:	9320      	s32i.n	a3, a2, 0
  90dabe:	824b      	l32i.n	a2, a4, 44
  90dac0:	23122f        	l32i	a3, a1, 188
  90dac3:	932a      	s32i.n	a3, a2, 40
  90dac5:	600002        	j	90dacb <ath_tx_comp_aggr_error+0x9b>
  90dac8:	00924c        	extui	a2, a0, 9, 13
  90dacb:	22122e        	l32i	a2, a1, 184
  90dace:	234c2c        	addi	a3, a4, 44
  90dad1:	924b      	s32i.n	a2, a4, 44
  90dad3:	932a      	s32i.n	a3, a2, 40
		ath_tgt_tx_enqueue(txq, tid);
  90dad5:	da70      	mov.n	a10, a7
  90dad7:	db40      	mov.n	a11, a4
  90dad9:	5bfdb8        	call8	90d1bc <ath_tgt_tx_enqueue>
  90dadc:	d10f      	retw.n
	...

0090dae0 <ath_tx_status_send>:

	txs->cnt++;
}

void ath_tx_status_send(struct ath_softc_tgt *sc)
{
  90dae0:	6c1004        	entry	a1, 32
	int i;

	if (sc->sc_tx_draining)
  90dae3:	242249        	l32i	a4, a2, 0x124
  90dae6:	136abb        	l32r	a3, 8e85d4 <memset+0x178c>
  90dae9:	034401        	and	a4, a4, a3
  90daec:	cf44      	bnez.n	a4, 90db24 <ath_tx_status_send+0x44>
		return;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt) {
  90daee:	232d16        	addmi	a3, a2, 0x1600
  90daf1:	283038        	l8ui	a8, a3, 56
  90daf4:	c980      	beqz.n	a8, 90db08 <ath_tx_status_send+0x28>
			wmi_event(sc->tgt_wmi_handle, WMI_TXSTATUS_EVENTID,
  90daf6:	1c6b02        	l32r	a12, 8e8700 <memset+0x18b8>
  90daf9:	8a23      	l32i.n	a10, a2, 12
  90dafb:	1b6b01        	l32r	a11, 8e8700 <memset+0x18b8>
  90dafe:	ac2c      	add.n	a12, a2, a12
  90db00:	c2d5      	movi.n	a13, 37
  90db02:	5bea06        	call8	90831c <wmi_event>
				  &sc->tx_status[i], sizeof(WMI_TXSTATUS_EVENT));
			/* FIXME: Handle failures. */
			sc->tx_status[i].cnt = 0;
  90db05:	243438        	s8i	a4, a3, 56

	if (sc->sc_tx_draining)
		return;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt) {
  90db08:	232d16        	addmi	a3, a2, 0x1600
  90db0b:	24305d        	l8ui	a4, a3, 93
  90db0e:	c942      	beqz.n	a4, 90db24 <ath_tx_status_send+0x44>
			wmi_event(sc->tgt_wmi_handle, WMI_TXSTATUS_EVENTID,
  90db10:	1c6b03        	l32r	a12, 8e871c <memset+0x18d4>
  90db13:	8a23      	l32i.n	a10, a2, 12
  90db15:	1b6b01        	l32r	a11, 8e871c <memset+0x18d4>
  90db18:	ac2c      	add.n	a12, a2, a12
  90db1a:	c2d5      	movi.n	a13, 37
				  &sc->tx_status[i], sizeof(WMI_TXSTATUS_EVENT));
			/* FIXME: Handle failures. */
			sc->tx_status[i].cnt = 0;
  90db1c:	c020      	movi.n	a2, 0
	if (sc->sc_tx_draining)
		return;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt) {
			wmi_event(sc->tgt_wmi_handle, WMI_TXSTATUS_EVENTID,
  90db1e:	5be9ff        	call8	90831c <wmi_event>
				  &sc->tx_status[i], sizeof(WMI_TXSTATUS_EVENT));
			/* FIXME: Handle failures. */
			sc->tx_status[i].cnt = 0;
  90db21:	22345d        	s8i	a2, a3, 93
  90db24:	d10f      	retw.n
	...

0090db28 <ath_tgt_tid_drain>:
	return((struct ieee80211_frame *)anbdata);
}

void
ath_tgt_tid_drain(struct ath_softc_tgt *sc, struct ath_atx_tid *tid)
{
  90db28:	6c1004        	entry	a1, 32
	struct ath_tx_buf *bf;

	while (!asf_tailq_empty(&tid->buf_q)) {
  90db2b:	600015        	j	90db44 <ath_tgt_tid_drain+0x1c>
		TAILQ_DEQ(&tid->buf_q, bf, bf_list);
  90db2e:	88b9      	l32i.n	a8, a11, 36
  90db30:	89ba      	l32i.n	a9, a11, 40
  90db32:	c883      	beqz.n	a8, 90db39 <ath_tgt_tid_drain+0x11>
  90db34:	998a      	s32i.n	a9, a8, 40
  90db36:	600001        	j	90db3b <ath_tgt_tid_drain+0x13>
  90db39:	993c      	s32i.n	a9, a3, 48
  90db3b:	89ba      	l32i.n	a9, a11, 40
		ath_tx_freebuf(sc, bf);
  90db3d:	da20      	mov.n	a10, a2
ath_tgt_tid_drain(struct ath_softc_tgt *sc, struct ath_atx_tid *tid)
{
	struct ath_tx_buf *bf;

	while (!asf_tailq_empty(&tid->buf_q)) {
		TAILQ_DEQ(&tid->buf_q, bf, bf_list);
  90db3f:	9890      	s32i.n	a8, a9, 0
		ath_tx_freebuf(sc, bf);
  90db41:	5bfe96        	call8	90d59c <ath_tx_freebuf>
void
ath_tgt_tid_drain(struct ath_softc_tgt *sc, struct ath_atx_tid *tid)
{
	struct ath_tx_buf *bf;

	while (!asf_tailq_empty(&tid->buf_q)) {
  90db44:	8b3b      	l32i.n	a11, a3, 44
  90db46:	65bfe4        	bnez	a11, 90db2e <ath_tgt_tid_drain+0x6>
		TAILQ_DEQ(&tid->buf_q, bf, bf_list);
		ath_tx_freebuf(sc, bf);
	}

	tid->seq_next = tid->seq_start;
  90db49:	223102        	l16ui	a2, a3, 4
  90db4c:	223503        	s16i	a2, a3, 6
	tid->baw_tail = tid->baw_head;
  90db4f:	8233      	l32i.n	a2, a3, 12
  90db51:	9234      	s32i.n	a2, a3, 16
  90db53:	d10f      	retw.n
  90db55:	000000        	ill

0090db58 <ath_tgt_tx_prepare>:
	return  bf;
}

struct ath_tx_buf* ath_tgt_tx_prepare(struct ath_softc_tgt *sc,
				   adf_nbuf_t skb, ath_data_hdr_t *dh)
{
  90db58:	6c1006        	entry	a1, 48
  90db5b:	d520      	mov.n	a5, a2
	struct ath_tx_buf *bf;
	struct ieee80211_node_target *ni;
	struct ath_atx_tid *tid;

	ni = ath_tgt_find_node(sc, dh->ni_index);
  90db5d:	224001        	l8ui	a2, a4, 1
							a_int32_t node_index)
{
	struct ath_node_target *an;
	struct ieee80211_node_target *ni;

	if (node_index > TARGET_NODE_MAX)
  90db60:	c068      	movi.n	a6, 8
  90db62:	726a02        	bge	a6, a2, 90db68 <ath_tgt_tx_prepare+0x10>
  90db65:	600263        	j	90ddcc <ath_tgt_tx_prepare+0x274>
	  	return NULL;

	an = &sc->sc_sta[node_index];
  90db68:	0a2611        	slli	a6, a2, 6
  90db6b:	a266      	add.n	a6, a6, a2
  90db6d:	026609        	addx2	a6, a6, a2
  90db70:	275a30        	movi	a7, 0x530
  90db73:	07660a        	addx4	a6, a6, a7
  90db76:	a656      	add.n	a6, a5, a6
  90db78:	b866      	addi.n	a6, a6, 8
	ni = &an->ni;

	if (an->an_valid) {
  90db7a:	226d02        	addmi	a2, a6, 0x200
  90db7d:	222004        	l8ui	a2, a2, 4
  90db80:	002232        	sext	a2, a2, 7
  90db83:	642247        	beqz	a2, 90ddce <ath_tgt_tx_prepare+0x276>
		if (ni->ni_vap == NULL) {
  90db86:	8268      	l32i.n	a2, a6, 32
  90db88:	642242        	beqz	a2, 90ddce <ath_tgt_tx_prepare+0x276>
	struct ieee80211_node_target *ni;
	struct ath_atx_tid *tid;

	ni = ath_tgt_find_node(sc, dh->ni_index);
	if (ni == NULL)
		return NULL;
  90db8b:	c020      	movi.n	a2, 0
	struct ath_tx_buf *bf;
	struct ieee80211_node_target *ni;
	struct ath_atx_tid *tid;

	ni = ath_tgt_find_node(sc, dh->ni_index);
	if (ni == NULL)
  90db8d:	726902        	bne	a6, a2, 90db93 <ath_tgt_tx_prepare+0x3b>
  90db90:	60023a        	j	90ddce <ath_tgt_tx_prepare+0x276>
		return NULL;

	tid = ATH_AN_2_TID(ATH_NODE_TARGET(ni), dh->tidno);
  90db93:	274003        	l8ui	a7, a4, 3
  90db96:	0c7811        	slli	a8, a7, 4
  90db99:	07870c        	sub	a7, a8, a7
  90db9c:	06770a        	addx4	a7, a7, a6
	if (tid->flag & TID_REINITIALIZE) {
  90db9f:	27705a        	l8ui	a7, a7, 90
  90dba2:	7d770e        	bbci	a7, 29, 90dbb4 <ath_tgt_tx_prepare+0x5c>
		adf_os_print("drop frame due to TID reinit\n");
  90dba5:	136913        	l32r	a3, 8e7ff4 <memset+0x11ac>
  90dba8:	1a6b04        	l32r	a10, 8e87b8 <memset+0x1970>
  90dbab:	233212        	l32i	a3, a3, 72
  90dbae:	0b3000        	callx8	a3
		return NULL;
  90dbb1:	d10f      	retw.n
  90dbb3:	002252        	extui	a2, a0, 18, 3

static struct ath_tx_buf* ath_tx_buf_alloc(struct ath_softc_tgt *sc)
{
	struct ath_tx_buf *bf = NULL;

	bf = asf_tailq_first(&sc->sc_txbuf);
  90dbb6:	f0          	.byte 0xf0
	if (bf !=  NULL) {
  90dbb7:	cb22      	beqz.n	a2, 90dbed <ath_tgt_tx_prepare+0x95>
 * @param[in] size  buffer size
 */
static inline void
adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
    __adf_os_mem_set(buf, b, size);
  90dbb9:	2a2c3c        	addi	a10, a2, 60
  90dbbc:	c4bc      	movi.n	a11, 76
  90dbbe:	5bfda9        	call8	90d264 <__adf_os_mem_set$constprop$13>
		adf_os_mem_set(&bf->bf_state, 0, sizeof(struct ath_buf_state));
		asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  90dbc1:	8729      	l32i.n	a7, a2, 36
  90dbc3:	882a      	l32i.n	a8, a2, 40
  90dbc5:	c874      	beqz.n	a7, 90dbcd <ath_tgt_tx_prepare+0x75>
  90dbc7:	987a      	s32i.n	a8, a7, 40
  90dbc9:	600003        	j	90dbd0 <ath_tgt_tx_prepare+0x78>
  90dbcc:	002856        	extui	a8, a0, 18, 7
  90dbcf:	f1          	.byte 0xf1
  90dbd0:	882a      	l32i.n	a8, a2, 40
		__stats(sc, tx_nobufs);
		return NULL;
	}

	bf->bf_tidno = dh->tidno;
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
  90dbd2:	c091      	movi.n	a9, 1
	struct ath_tx_buf *bf = NULL;

	bf = asf_tailq_first(&sc->sc_txbuf);
	if (bf !=  NULL) {
		adf_os_mem_set(&bf->bf_state, 0, sizeof(struct ath_buf_state));
		asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  90dbd4:	9780      	s32i.n	a7, a8, 0
	if (!bf) {
		__stats(sc, tx_nobufs);
		return NULL;
	}

	bf->bf_tidno = dh->tidno;
  90dbd6:	284003        	l8ui	a8, a4, 3
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
  90dbd9:	c070      	movi.n	a7, 0
  90dbdb:	2a8cfd        	addi	a10, a8, -3
	if (!bf) {
		__stats(sc, tx_nobufs);
		return NULL;
	}

	bf->bf_tidno = dh->tidno;
  90dbde:	28244d        	s8i	a8, a2, 77
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
  90dbe1:	0a9739        	movnez	a7, a9, a10
  90dbe4:	c870      	beqz.n	a7, 90dbe8 <ath_tgt_tx_prepare+0x90>
  90dbe6:	ce84      	bnez.n	a8, 90dc0e <ath_tgt_tx_prepare+0xb6>
  90dbe8:	c090      	movi.n	a9, 0
  90dbea:	600036        	j	90dc24 <ath_tgt_tx_prepare+0xcc>
	bf = asf_tailq_first(&sc->sc_txbuf);
	if (bf !=  NULL) {
		adf_os_mem_set(&bf->bf_state, 0, sizeof(struct ath_buf_state));
		asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
	} else {
		adf_os_assert(0);
  90dbed:	136913        	l32r	a3, 8e803c <memset+0x11f4>
  90dbf0:	1b6b05        	l32r	a11, 8e8804 <memset+0x19bc>
  90dbf3:	233212        	l32i	a3, a3, 72
  90dbf6:	1a6af9        	l32r	a10, 8e87dc <memset+0x1994>
  90dbf9:	0b3000        	callx8	a3
  90dbfc:	136978        	l32r	a3, 8e81dc <memset+0x1394>
  90dbff:	0c0200        	memw
  90dc02:	8330      	l32i.n	a3, a3, 0
		return NULL;
	}

	bf = ath_tx_buf_alloc(sc);
	if (!bf) {
		__stats(sc, tx_nobufs);
  90dc04:	235277        	l32i	a3, a5, 0x1dc
  90dc07:	b133      	addi.n	a3, a3, 1
  90dc09:	235677        	s32i	a3, a5, 0x1dc
		return NULL;
  90dc0c:	d10f      	retw.n
	}

	bf->bf_tidno = dh->tidno;
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
  90dc0e:	b087      	addi.n	a7, a8, -1
  90dc10:	070747        	extui	a7, a7, 0, 8
  90dc13:	6e720d        	bltui	a7, 2, 90dc24 <ath_tgt_tx_prepare+0xcc>
  90dc16:	288cfc        	addi	a8, a8, -4
  90dc19:	080847        	extui	a8, a8, 0, 8
  90dc1c:	c093      	movi.n	a9, 3
  90dc1e:	6f8202        	bgeui	a8, 2, 90dc24 <ath_tgt_tx_prepare+0xcc>
  90dc21:	290a02        	movi	a9, 2
  90dc24:	05990a        	addx4	a9, a9, a5
  90dc27:	299d05        	addmi	a9, a9, 0x500
  90dc2a:	8793      	l32i.n	a7, a9, 12
 * @param[in] buf   buf
 */
static inline void
adf_nbuf_queue_add(adf_nbuf_queue_t *head, adf_nbuf_t buf)
{
    __adf_nbuf_queue_add(head, buf);
  90dc2c:	db30      	mov.n	a11, a3
  90dc2e:	272620        	s32i	a7, a2, 128
	bf->bf_keytype = dh->keytype;
  90dc31:	274008        	l8ui	a7, a4, 8
  90dc34:	272485        	s8i	a7, a2, 133
	bf->bf_keyix = dh->keyix;
  90dc37:	274009        	l8ui	a7, a4, 9
  90dc3a:	272449        	s8i	a7, a2, 73
	bf->bf_protmode = dh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
  90dc3d:	274007        	l8ui	a7, a4, 7
	bf->bf_node = ni;
  90dc40:	9624      	s32i.n	a6, a2, 16

	bf->bf_tidno = dh->tidno;
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
	bf->bf_keytype = dh->keytype;
	bf->bf_keyix = dh->keyix;
	bf->bf_protmode = dh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
  90dc42:	070741        	extui	a7, a7, 0, 2
	bf->bf_node = ni;

	adf_nbuf_queue_add(&bf->bf_skbhead, skb);
  90dc45:	262c14        	addi	a6, a2, 20
  90dc48:	da60      	mov.n	a10, a6

	bf->bf_tidno = dh->tidno;
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
	bf->bf_keytype = dh->keytype;
	bf->bf_keyix = dh->keyix;
	bf->bf_protmode = dh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
  90dc4a:	272484        	s8i	a7, a2, 132
  90dc4d:	5be36d        	call8	906a04 <__adf_nbuf_queue_add>
 * @return first buffer in queue
 */
static inline adf_nbuf_t 
adf_nbuf_queue_first(adf_nbuf_queue_t *head)
{
    return (__adf_nbuf_queue_first(head));
  90dc50:	da60      	mov.n	a10, a6
  90dc52:	5be41a        	call8	906cbc <__adf_nbuf_queue_first>
  90dc55:	d3a0      	mov.n	a3, a10
 * @return length of the queue
 */
static inline a_uint32_t
adf_nbuf_queue_len(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_len(head);
  90dc57:	da60      	mov.n	a10, a6
  90dc59:	5be416        	call8	906cb4 <__adf_nbuf_queue_len>
	bf->bf_node = ni;

	adf_nbuf_queue_add(&bf->bf_skbhead, skb);
	skb = adf_nbuf_queue_first(&(bf->bf_skbhead));

	if (adf_nbuf_queue_len(&(bf->bf_skbhead)) == 0) {
  90dc5c:	ccac      	bnez.n	a10, 90dc6c <ath_tgt_tx_prepare+0x114>
		__stats(sc, tx_noskbs);
  90dc5e:	225276        	l32i	a2, a5, 0x1d8
  90dc61:	b122      	addi.n	a2, a2, 1
  90dc63:	225676        	s32i	a2, a5, 0x1d8
		return NULL;
  90dc66:	d2a0      	mov.n	a2, a10
  90dc68:	d10f      	retw.n
  90dc6a:	0000cd        	excw
	}

	adf_os_assert(skb);
  90dc6d:	361769        	excw
  90dc70:	131a6a        	l32r	a3, 8d4618 <_bss_end+0x3c1708>
  90dc73:	f9          	.byte 0xf9
  90dc74:	277212        	l32i	a7, a7, 72
  90dc77:	1b6b06        	l32r	a11, 8e8890 <memset+0x1a48>
  90dc7a:	0b7000        	callx8	a7
  90dc7d:	176978        	l32r	a7, 8e8260 <memset+0x1418>
  90dc80:	0c0200        	memw
  90dc83:	277200        	l32i	a7, a7, 0
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90dc86:	da30      	mov.n	a10, a3
  90dc88:	b41b      	addi.n	a11, a1, 4

	bf->bf_skb = skb;
  90dc8a:	9328      	s32i.n	a3, a2, 32
  90dc8c:	dc10      	mov.n	a12, a1
  90dc8e:	5be3ff        	call8	906c8c <__adf_nbuf_peek_header>
				     ath_data_hdr_t *dh)

{
	struct ieee80211_frame *wh = ATH_SKB2_WH(bf->bf_skb);
	a_int32_t retval;
	a_uint32_t flags = adf_os_ntohl(dh->flags);
  90dc91:	294004        	l8ui	a9, a4, 4
  90dc94:	284005        	l8ui	a8, a4, 5
  90dc97:	274006        	l8ui	a7, a4, 6
  90dc9a:	089910        	slli	a9, a9, 24
  90dc9d:	008811        	slli	a8, a8, 16
  90dca0:	098802        	or	a8, a8, a9
  90dca3:	244007        	l8ui	a4, a4, 7
  90dca6:	087711        	slli	a7, a7, 8

static void ath_tgt_tx_seqno_normal(struct ath_tx_buf *bf)
{
	struct ieee80211_node_target *ni = bf->bf_node;
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
  90dca9:	8a28      	l32i.n	a10, a2, 32
				     ath_data_hdr_t *dh)

{
	struct ieee80211_frame *wh = ATH_SKB2_WH(bf->bf_skb);
	a_int32_t retval;
	a_uint32_t flags = adf_os_ntohl(dh->flags);
  90dcab:	087702        	or	a7, a7, a8
{
	a_uint8_t *anbdata;
	a_uint32_t anblen;

	adf_nbuf_peek_header(skb, &anbdata, &anblen);
	return((struct ieee80211_frame *)anbdata);
  90dcae:	8311      	l32i.n	a3, a1, 4
				     ath_data_hdr_t *dh)

{
	struct ieee80211_frame *wh = ATH_SKB2_WH(bf->bf_skb);
	a_int32_t retval;
	a_uint32_t flags = adf_os_ntohl(dh->flags);
  90dcb0:	074402        	or	a4, a4, a7
	return bf;
}

static void ath_tgt_tx_seqno_normal(struct ath_tx_buf *bf)
{
	struct ieee80211_node_target *ni = bf->bf_node;
  90dcb3:	272204        	l32i	a7, a2, 16
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
  90dcb6:	5bfec1        	call8	90d7bc <ATH_SKB_2_WH>
	struct ath_atx_tid *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90dcb9:	28204d        	l8ui	a8, a2, 77

	u_int8_t fragno = (wh->i_seq[0] & 0xf);

	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90dcbc:	2b710c        	l16ui	a11, a7, 24
static void ath_tgt_tx_seqno_normal(struct ath_tx_buf *bf)
{
	struct ieee80211_node_target *ni = bf->bf_node;
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
	struct ath_atx_tid *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90dcbf:	0c8911        	slli	a9, a8, 4
  90dcc2:	08980c        	sub	a8, a9, a8
  90dcc5:	07880a        	addx4	a8, a8, a7

	u_int8_t fragno = (wh->i_seq[0] & 0xf);

	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90dcc8:	b1bb      	addi.n	a11, a11, 1
  90dcca:	0b0b4b        	extui	a11, a11, 0, 12
static void ath_tgt_tx_seqno_normal(struct ath_tx_buf *bf)
{
	struct ieee80211_node_target *ni = bf->bf_node;
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
	struct ath_atx_tid *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90dccd:	288c24        	addi	a8, a8, 36

	u_int8_t fragno = (wh->i_seq[0] & 0xf);
  90dcd0:	29a016        	l8ui	a9, a10, 22

	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90dcd3:	2b750c        	s16i	a11, a7, 24

	bf->bf_seqno = (tid->seq_next << IEEE80211_SEQ_SEQ_SHIFT);
  90dcd6:	278103        	l16ui	a7, a8, 6
	struct ieee80211_node_target *ni = bf->bf_node;
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
	struct ath_atx_tid *tid = ATH_AN_2_TID(an, bf->bf_tidno);

	u_int8_t fragno = (wh->i_seq[0] & 0xf);
  90dcd9:	090943        	extui	a9, a9, 0, 4

	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);

	bf->bf_seqno = (tid->seq_next << IEEE80211_SEQ_SEQ_SHIFT);
  90dcdc:	0c7711        	slli	a7, a7, 4
  90dcdf:	07074f        	extui	a7, a7, 0, 16
  90dce2:	272523        	s16i	a7, a2, 70

#undef adf_os_cpu_to_le16

static a_uint16_t adf_os_cpu_to_le16(a_uint16_t x)
{
	return ((((x) & 0xff00) >> 8) |   (((x) & 0x00ff) << 8));
  90dce5:	087b11        	slli	a11, a7, 8
  90dce8:	078714        	srli	a7, a7, 8
  90dceb:	07b702        	or	a7, a11, a7

	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);

	bf->bf_seqno = (tid->seq_next << IEEE80211_SEQ_SEQ_SHIFT);

	*(u_int16_t *)wh->i_seq = adf_os_cpu_to_le16(bf->bf_seqno);
  90dcee:	070b4f        	extui	a11, a7, 0, 16
  90dcf1:	27a50b        	s16i	a7, a10, 22
	wh->i_seq[0] |= fragno;
  90dcf4:	0b8714        	srli	a7, a11, 8
  90dcf7:	079702        	or	a7, a9, a7
  90dcfa:	27a416        	s8i	a7, a10, 22

	if (!(wh->i_fc[1] & IEEE80211_FC1_MORE_FRAG))
  90dcfd:	27a001        	l8ui	a7, a10, 1
  90dd00:	7d7f08        	bbsi	a7, 29, 90dd0c <ath_tgt_tx_prepare+0x1b4>
		INCR(tid->seq_next, IEEE80211_SEQ_MAX);
  90dd03:	278103        	l16ui	a7, a8, 6
  90dd06:	277c01        	addi	a7, a7, 1
  90dd09:	278503        	s16i	a7, a8, 6
  90dd0c:	278103        	l16ui	a7, a8, 6
	a_uint32_t flags = adf_os_ntohl(dh->flags);

	ath_tgt_tx_seqno_normal(bf);

	bf->bf_txq_add  = ath_tgt_txq_add_ucast;
	bf->bf_hdrlen   = ieee80211_anyhdrsize(wh);
  90dd0f:	033a02        	or	a10, a3, a3

	*(u_int16_t *)wh->i_seq = adf_os_cpu_to_le16(bf->bf_seqno);
	wh->i_seq[0] |= fragno;

	if (!(wh->i_fc[1] & IEEE80211_FC1_MORE_FRAG))
		INCR(tid->seq_next, IEEE80211_SEQ_MAX);
  90dd12:	07074b        	extui	a7, a7, 0, 12
  90dd15:	278503        	s16i	a7, a8, 6
	a_int32_t retval;
	a_uint32_t flags = adf_os_ntohl(dh->flags);

	ath_tgt_tx_seqno_normal(bf);

	bf->bf_txq_add  = ath_tgt_txq_add_ucast;
  90dd18:	176b07        	l32r	a7, 8e8934 <memset+0x1aec>
  90dd1b:	272610        	s32i	a7, a2, 64
	bf->bf_hdrlen   = ieee80211_anyhdrsize(wh);
  90dd1e:	5bfc5c        	call8	90ce90 <ieee80211_anyhdrsize>
  90dd21:	d7a0      	mov.n	a7, a10
  90dd23:	2a2448        	s8i	a10, a2, 72
 * @return first buffer in queue
 */
static inline adf_nbuf_t 
adf_nbuf_queue_first(adf_nbuf_queue_t *head)
{
    return (__adf_nbuf_queue_first(head));
  90dd26:	066a02        	or	a10, a6, a6
  90dd29:	5be3e4        	call8	906cbc <__adf_nbuf_queue_first>
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  90dd2c:	5be3cf        	call8	906c6c <__adf_nbuf_len>
	a_int32_t pktlen;

	skb = adf_nbuf_queue_first(&bf->bf_skbhead);
	pktlen = adf_nbuf_len(skb);

	pktlen -= (hdrlen & 3);
  90dd2f:	070741        	extui	a7, a7, 0, 2
  90dd32:	07aa0c        	sub	a10, a10, a7
	pktlen += IEEE80211_CRC_LEN;
  90dd35:	b4a7      	addi.n	a7, a10, 4

	ath_tgt_tx_seqno_normal(bf);

	bf->bf_txq_add  = ath_tgt_txq_add_ucast;
	bf->bf_hdrlen   = ieee80211_anyhdrsize(wh);
	bf->bf_pktlen   = ath_get_pktlen(bf, bf->bf_hdrlen);
  90dd37:	272522        	s16i	a7, a2, 68
	bf->bf_ismcast  = IEEE80211_IS_MULTICAST(wh->i_addr1);
  90dd3a:	263004        	l8ui	a6, a3, 4
  90dd3d:	232087        	l8ui	a3, a2, 135
  90dd40:	096611        	slli	a6, a6, 7
  90dd43:	030346        	extui	a3, a3, 0, 7
  90dd46:	063302        	or	a3, a3, a6
}

static a_int32_t ath_key_setup(struct ieee80211_node_target *ni,
			       struct ath_tx_buf *bf)
{
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
  90dd49:	8a28      	l32i.n	a10, a2, 32
	ath_tgt_tx_seqno_normal(bf);

	bf->bf_txq_add  = ath_tgt_txq_add_ucast;
	bf->bf_hdrlen   = ieee80211_anyhdrsize(wh);
	bf->bf_pktlen   = ath_get_pktlen(bf, bf->bf_hdrlen);
	bf->bf_ismcast  = IEEE80211_IS_MULTICAST(wh->i_addr1);
  90dd4b:	232487        	s8i	a3, a2, 135

	if ((retval = ath_key_setup(bf->bf_node, bf)) < 0)
  90dd4e:	262204        	l32i	a6, a2, 16
}

static a_int32_t ath_key_setup(struct ieee80211_node_target *ni,
			       struct ath_tx_buf *bf)
{
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
  90dd51:	5bfe9a        	call8	90d7bc <ATH_SKB_2_WH>

	if (!(wh->i_fc[1] & IEEE80211_FC1_WEP)) {
  90dd54:	27a001        	l8ui	a7, a10, 1
  90dd57:	c430      	movi.n	a3, 64
  90dd59:	037301        	and	a3, a7, a3
  90dd5c:	030747        	extui	a7, a3, 0, 8
  90dd5f:	cc79      	bnez.n	a7, 90dd6c <ath_tgt_tx_prepare+0x214>
		bf->bf_keytype = HAL_KEY_TYPE_CLEAR;
  90dd61:	232485        	s8i	a3, a2, 133
		bf->bf_keyix = HAL_TXKEYIX_INVALID;
  90dd64:	c73f      	movi.n	a3, -1
  90dd66:	232449        	s8i	a3, a2, 73
  90dd69:	60002d        	j	90dd9a <ath_tgt_tx_prepare+0x242>
		return 0;
	}

	switch (bf->bf_keytype) {
  90dd6c:	2c2085        	l8ui	a12, a2, 133
  90dd6f:	68c209        	beqi	a12, 2, 90dd7c <ath_tgt_tx_prepare+0x224>
  90dd72:	68c30e        	beqi	a12, 3, 90dd84 <ath_tgt_tx_prepare+0x22c>
  90dd75:	69c113        	bnei	a12, 1, 90dd8c <ath_tgt_tx_prepare+0x234>
  90dd78:	600008        	j	90dd84 <ath_tgt_tx_prepare+0x22c>
  90dd7b:	002321        	excw
	case HAL_KEY_TYPE_WEP:
		bf->bf_pktlen += IEEE80211_WEP_ICVLEN;
		break;
	case HAL_KEY_TYPE_AES:
		bf->bf_pktlen += IEEE80211_WEP_MICLEN;
  90dd7e:	22b833        	excw
  90dd81:	600004        	j	90dd89 <ath_tgt_tx_prepare+0x231>
		break;
	case HAL_KEY_TYPE_TKIP:
		bf->bf_pktlen += IEEE80211_WEP_ICVLEN;
  90dd84:	232122        	l16ui	a3, a2, 68
  90dd87:	b433      	addi.n	a3, a3, 4
  90dd89:	232522        	s16i	a3, a2, 68
		break;
	default:
		break;
	}

	if (bf->bf_keytype == HAL_KEY_TYPE_AES ||
  90dd8c:	23ccfe        	addi	a3, a12, -2
  90dd8f:	030347        	extui	a3, a3, 0, 8
  90dd92:	6f3204        	bgeui	a3, 2, 90dd9a <ath_tgt_tx_prepare+0x242>
	    bf->bf_keytype == HAL_KEY_TYPE_TKIP)
		ieee80211_tgt_crypto_encap(wh, ni, bf->bf_keytype);
  90dd95:	db60      	mov.n	a11, a6
  90dd97:	5804a2        	call8	90f020 <ieee80211_tgt_crypto_encap>
  90dd9a:	232087        	l8ui	a3, a2, 135
	bf->bf_ismcast  = IEEE80211_IS_MULTICAST(wh->i_addr1);

	if ((retval = ath_key_setup(bf->bf_node, bf)) < 0)
		return retval;

	if (flags & ATH_SHORT_PREAMBLE)
  90dd9d:	7f4707        	bbci	a4, 31, 90dda8 <ath_tgt_tx_prepare+0x250>
		bf->bf_shpream = AH_TRUE;
  90dda0:	c440      	movi.n	a4, 64
  90dda2:	043302        	or	a3, a3, a4
  90dda5:	600005        	j	90ddae <ath_tgt_tx_prepare+0x256>
	else
		bf->bf_shpream = AH_FALSE;
  90dda8:	24fabf        	movi	a4, -65
  90ddab:	043301        	and	a3, a3, a4
  90ddae:	232487        	s8i	a3, a2, 135

	bf->bf_flags = HAL_TXDESC_CLRDMASK;
  90ddb1:	c031      	movi.n	a3, 1
  90ddb3:	232544        	s16i	a3, a2, 136
	bf->bf_atype = HAL_PKT_TYPE_NORMAL;
  90ddb6:	c030      	movi.n	a3, 0
	adf_os_assert(skb);

	bf->bf_skb = skb;

	ath_tgt_txbuf_setup(sc, bf, dh);
	ath_dma_map(sc, bf);
  90ddb8:	da50      	mov.n	a10, a5
  90ddba:	db20      	mov.n	a11, a2
		bf->bf_shpream = AH_TRUE;
	else
		bf->bf_shpream = AH_FALSE;

	bf->bf_flags = HAL_TXDESC_CLRDMASK;
	bf->bf_atype = HAL_PKT_TYPE_NORMAL;
  90ddbc:	23244a        	s8i	a3, a2, 74
	adf_os_assert(skb);

	bf->bf_skb = skb;

	ath_tgt_txbuf_setup(sc, bf, dh);
	ath_dma_map(sc, bf);
  90ddbf:	5bfdad        	call8	90d474 <ath_dma_map>
	ath_tx_tgt_setds(sc, bf);
  90ddc2:	da50      	mov.n	a10, a5
  90ddc4:	db20      	mov.n	a11, a2
  90ddc6:	5bfce9        	call8	90d16c <ath_tx_tgt_setds>

	return bf;
  90ddc9:	d10f      	retw.n
  90ddcb:	00c020        	excw
}
  90ddce:	d10f      	retw.n

0090ddd0 <ath_tgt_tx_send_normal>:
	return pktlen;
}

void
ath_tgt_tx_send_normal(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90ddd0:	6c1014        	entry	a1, 160
	struct ath_rc_series rcs[4];
	struct ath_rc_series mrcs[4];
	a_int32_t shortPreamble = 0;
	a_int32_t isProbe = 0;

	adf_os_mem_set(rcs, 0, sizeof(struct ath_rc_series)*4 );
  90ddd3:	251c40        	addi	a5, a1, 64
  90ddd6:	da50      	mov.n	a10, a5
  90ddd8:	c3b0      	movi.n	a11, 48
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	struct ath_rc_series rcs[4];
	struct ath_rc_series mrcs[4];
	a_int32_t shortPreamble = 0;
	a_int32_t isProbe = 0;
  90ddda:	c040      	movi.n	a4, 0
}

void
ath_tgt_tx_send_normal(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  90dddc:	8634      	l32i.n	a6, a3, 16
	struct ath_rc_series rcs[4];
	struct ath_rc_series mrcs[4];
	a_int32_t shortPreamble = 0;
	a_int32_t isProbe = 0;
  90ddde:	24161c        	s32i	a4, a1, 112
  90dde1:	5bfd20        	call8	90d264 <__adf_os_mem_set$constprop$13>
  90dde4:	2a1c10        	addi	a10, a1, 16
  90dde7:	c3b0      	movi.n	a11, 48
  90dde9:	5bfd1e        	call8	90d264 <__adf_os_mem_set$constprop$13>

	adf_os_mem_set(rcs, 0, sizeof(struct ath_rc_series)*4 );
	adf_os_mem_set(mrcs, 0, sizeof(struct ath_rc_series)*4 );

	if (!bf->bf_ismcast) {
  90ddec:	283221        	l32i	a8, a3, 132
  90ddef:	2d0a80        	movi	a13, 128
  90ddf2:	08dd01        	and	a13, a13, a8
  90ddf5:	74d920        	bne	a13, a4, 90de19 <ath_tgt_tx_send_normal+0x49>
				  a_int32_t stepDnInc,
				  a_uint32_t rcflag,
				  struct ath_rc_series series[],
				  a_int32_t *isProbe)
{
	ath_rate_findrate(sc, an, 1, frameLen, 10, 4, 1,
  90ddf8:	c0c1      	movi.n	a12, 1

	adf_os_mem_set(rcs, 0, sizeof(struct ath_rc_series)*4 );
	adf_os_mem_set(mrcs, 0, sizeof(struct ath_rc_series)*4 );

	if (!bf->bf_ismcast) {
		ath_tgt_rate_findrate(sc, an, shortPreamble,
  90ddfa:	241c70        	addi	a4, a1, 112
				  a_int32_t stepDnInc,
				  a_uint32_t rcflag,
				  struct ath_rc_series series[],
				  a_int32_t *isProbe)
{
	ath_rate_findrate(sc, an, 1, frameLen, 10, 4, 1,
  90ddfd:	da20      	mov.n	a10, a2
  90ddff:	db60      	mov.n	a11, a6
  90de01:	9c10      	s32i.n	a12, a1, 0
  90de03:	9c11      	s32i.n	a12, a1, 4
  90de05:	9512      	s32i.n	a5, a1, 8
  90de07:	9413      	s32i.n	a4, a1, 12
  90de09:	c0ea      	movi.n	a14, 10
  90de0b:	c0f4      	movi.n	a15, 4
  90de0d:	5bfbf0        	call8	90cdd0 <ath_rate_findrate>

	if (!bf->bf_ismcast) {
		ath_tgt_rate_findrate(sc, an, shortPreamble,
				      0, 0, 0, 0, 0,
				      rcs, &isProbe);
		ath_hal_memcpy(bf->bf_rcs, rcs, sizeof(rcs));
  90de10:	2a3c50        	addi	a10, a3, 80
  90de13:	db50      	mov.n	a11, a5
  90de15:	600023        	j	90de3c <ath_tgt_tx_send_normal+0x6c>
  90de18:	00c051        	extui	a0, a0, 28, 2
	} else {
		mrcs[1].tries = mrcs[2].tries = mrcs[3].tries = 0;
  90de1b:	241435        	s8i	a4, a1, 53
  90de1e:	241429        	s8i	a4, a1, 41
  90de21:	24141d        	s8i	a4, a1, 29
		mrcs[1].rix = mrcs[2].rix = mrcs[3].rix = 0;
  90de24:	241434        	s8i	a4, a1, 52
  90de27:	241428        	s8i	a4, a1, 40
  90de2a:	24141c        	s8i	a4, a1, 28
		mrcs[0].rix   = 0;
  90de2d:	241410        	s8i	a4, a1, 16
		mrcs[0].tries = 1;
  90de30:	251411        	s8i	a5, a1, 17
		mrcs[0].flags = 0;
  90de33:	241413        	s8i	a4, a1, 19
		ath_hal_memcpy(bf->bf_rcs, mrcs, sizeof(mrcs));
  90de36:	2a3c50        	addi	a10, a3, 80
  90de39:	2b1c10        	addi	a11, a1, 16
  90de3c:	c3c0      	movi.n	a12, 48
  90de3e:	5be73c        	call8	907b30 <ath_hal_memcpy>
	}

	ath_buf_set_rate(sc, bf);
  90de41:	da20      	mov.n	a10, a2
  90de43:	db30      	mov.n	a11, a3
  90de45:	5bfd0c        	call8	90d278 <ath_buf_set_rate>
	bf->bf_txq_add(sc, bf);
  90de48:	243210        	l32i	a4, a3, 64
  90de4b:	da20      	mov.n	a10, a2
  90de4d:	db30      	mov.n	a11, a3
  90de4f:	0b4000        	callx8	a4
  90de52:	d10f      	retw.n

0090de54 <ath_tgt_send_mgt>:
}

void
ath_tgt_send_mgt(struct ath_softc_tgt *sc,adf_nbuf_t hdr_buf, adf_nbuf_t skb,
		 HTC_ENDPOINT_ID endpt)
{
  90de54:	6c1024        	entry	a1, 0x120
	struct ieee80211_node_target *ni;
	struct ieee80211vap_target *vap;
	struct ath_vap_target *avp;
	struct ath_hal *ah = sc->sc_ah;
  90de57:	262d05        	addmi	a6, a2, 0x500
  90de5a:	866b      	l32i.n	a6, a6, 44
  90de5c:	2b0aa4        	movi	a11, 164
  90de5f:	261635        	s32i	a6, a1, 212
  90de62:	2c0aa0        	movi	a12, 160
	struct ath_rc_series rcs[4];
	HAL_11N_RATE_SERIES series[4];
	ath_mgt_hdr_t *mh;
	a_int8_t keyix;

	if (!hdr_buf) {
  90de65:	cd37      	bnez.n	a3, 90de80 <ath_tgt_send_mgt+0x2c>
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90de67:	231c20        	addi	a3, a1, 32
  90de6a:	da40      	mov.n	a10, a4
  90de6c:	0b3b08        	add	a11, a3, a11
  90de6f:	0c3c08        	add	a12, a3, a12
  90de72:	5be386        	call8	906c8c <__adf_nbuf_peek_header>
 *         or NULL if there is not sufficient data to pull.
 */
static inline a_uint8_t *
adf_nbuf_pull_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_pull_head(buf, size);
  90de75:	da40      	mov.n	a10, a4
  90de77:	c0b8      	movi.n	a11, 8
  90de79:	5be2b5        	call8	906950 <__adf_nbuf_pull_head>
  90de7c:	60000c        	j	90de8c <ath_tgt_send_mgt+0x38>
  90de7f:	00261c        	mul16u	a6, a2, a0
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90de82:	20da30        	movi	a0, 0xfffffd30
  90de85:	ab6b      	add.n	a11, a6, a11
  90de87:	ac6c      	add.n	a12, a6, a12
  90de89:	5be380        	call8	906c8c <__adf_nbuf_peek_header>
		adf_nbuf_pull_head(skb, sizeof(ath_mgt_hdr_t));
	} else {
		adf_nbuf_peek_header(hdr_buf, &data, &len);
	}

	adf_os_assert(len >= sizeof(ath_mgt_hdr_t));
  90de8c:	231230        	l32i	a3, a1, 192
  90de8f:	6f3816        	bgeui	a3, 8, 90dea9 <ath_tgt_send_mgt+0x55>
  90de92:	136913        	l32r	a3, 8e82e0 <memset+0x1498>
  90de95:	1a6af9        	l32r	a10, 8e8a7c <memset+0x1c34>
  90de98:	233212        	l32i	a3, a3, 72
  90de9b:	1b6b08        	l32r	a11, 8e8abc <memset+0x1c74>
  90de9e:	0b3000        	callx8	a3
  90dea1:	136978        	l32r	a3, 8e8484 <memset+0x163c>
  90dea4:	0c0200        	memw
  90dea7:	8330      	l32i.n	a3, a3, 0
  90dea9:	281c20        	addi	a8, a1, 32
  90deac:	2b0aa4        	movi	a11, 164
  90deaf:	2c0aa0        	movi	a12, 160
  90deb2:	0b8b08        	add	a11, a8, a11
  90deb5:	0c8c08        	add	a12, a8, a12
  90deb8:	044a02        	or	a10, a4, a4

	mh = (ath_mgt_hdr_t *)data;
  90debb:	231231        	l32i	a3, a1, 196
  90debe:	5be373        	call8	906c8c <__adf_nbuf_peek_header>
  90dec1:	2c1c20        	addi	a12, a1, 32
  90dec4:	2acc70        	addi	a10, a12, 112
  90dec7:	2b0a30        	movi	a11, 48
	adf_nbuf_peek_header(skb, &data, &len);
	wh = (struct ieee80211_frame *)data;
  90deca:	261231        	l32i	a6, a1, 196
  90decd:	5bfce5        	call8	90d264 <__adf_os_mem_set$constprop$13>
  90ded0:	2a1c20        	addi	a10, a1, 32
  90ded3:	2b0a70        	movi	a11, 112
  90ded6:	5bfce3        	call8	90d264 <__adf_os_mem_set$constprop$13>

	adf_os_mem_set(rcs, 0, sizeof(struct ath_rc_series)*4);
	adf_os_mem_set(series, 0, sizeof(HAL_11N_RATE_SERIES)*4);

	bf = asf_tailq_first(&sc->sc_txbuf);
  90ded9:	2722f0        	l32i	a7, a2, 0x3c0
	if (!bf)
  90dedc:	647375        	beqz	a7, 90e255 <ath_tgt_send_mgt+0x401>
		goto fail;

	asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  90dedf:	8979      	l32i.n	a9, a7, 36
  90dee1:	8a7a      	l32i.n	a10, a7, 40
  90dee3:	c895      	beqz.n	a9, 90deec <ath_tgt_send_mgt+0x98>
  90dee5:	9a9a      	s32i.n	a10, a9, 40
  90dee7:	600004        	j	90deef <ath_tgt_send_mgt+0x9b>
  90deea:	00002a        	muluh	a0, a0, a0
  90deed:	26f18a        	l16ui	a6, a15, 0x114
  90def0:	7a99a0        	bne	a9, a10, 90de94 <ath_tgt_send_mgt+0x40>

	ni = ath_tgt_find_node(sc, mh->ni_index);
  90def3:	293000        	l8ui	a9, a3, 0
							a_int32_t node_index)
{
	struct ath_node_target *an;
	struct ieee80211_node_target *ni;

	if (node_index > TARGET_NODE_MAX)
  90def6:	c0a8      	movi.n	a10, 8
  90def8:	79aa02        	bge	a10, a9, 90defe <ath_tgt_send_mgt+0xaa>
  90defb:	600356        	j	90e255 <ath_tgt_send_mgt+0x401>
	  	return NULL;

	an = &sc->sc_sta[node_index];
  90defe:	0a9e11        	slli	a14, a9, 6
  90df01:	a9ee      	add.n	a14, a14, a9
  90df03:	09ee09        	addx2	a14, a14, a9
  90df06:	2a5a30        	movi	a10, 0x530
  90df09:	0aee0a        	addx4	a14, a14, a10
  90df0c:	ae2e      	add.n	a14, a2, a14
  90df0e:	b8ee      	addi.n	a14, a14, 8
	ni = &an->ni;

	if (an->an_valid) {
  90df10:	29ed02        	addmi	a9, a14, 0x200
  90df13:	299004        	l8ui	a9, a9, 4
  90df16:	64933b        	beqz	a9, 90e255 <ath_tgt_send_mgt+0x401>
		if (ni->ni_vap == NULL) {
  90df19:	29e208        	l32i	a9, a14, 32
  90df1c:	649335        	beqz	a9, 90e255 <ath_tgt_send_mgt+0x401>

	ni = ath_tgt_find_node(sc, mh->ni_index);
	if (!ni)
		goto fail;

	bf->bf_endpt = endpt;
  90df1f:	257623        	s32i	a5, a7, 140
	bf->bf_cookie = mh->cookie;
  90df22:	253006        	l8ui	a5, a3, 6
	bf->bf_protmode = mh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
	hdrlen = ieee80211_anyhdrsize(wh);
  90df25:	066a02        	or	a10, a6, a6
	ni = ath_tgt_find_node(sc, mh->ni_index);
	if (!ni)
		goto fail;

	bf->bf_endpt = endpt;
	bf->bf_cookie = mh->cookie;
  90df28:	257492        	s8i	a5, a7, 146
	bf->bf_protmode = mh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
  90df2b:	253003        	l8ui	a5, a3, 3
  90df2e:	050541        	extui	a5, a5, 0, 2
  90df31:	257484        	s8i	a5, a7, 132
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
  90df34:	296001        	l8ui	a9, a6, 1
  90df37:	250a40        	movi	a5, 64
  90df3a:	059901        	and	a9, a9, a5
  90df3d:	29163a        	s32i	a9, a1, 232
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
  90df40:	256004        	l8ui	a5, a6, 4
	hdrlen = ieee80211_anyhdrsize(wh);
  90df43:	2e163c        	s32i	a14, a1, 240
  90df46:	5bfbd2        	call8	90ce90 <ieee80211_anyhdrsize>
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
	pktlen -= (hdrlen & 3);
  90df49:	0a0941        	extui	a9, a10, 0, 2
	bf->bf_cookie = mh->cookie;
	bf->bf_protmode = mh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
	hdrlen = ieee80211_anyhdrsize(wh);
  90df4c:	2a163b        	s32i	a10, a1, 236
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
	pktlen -= (hdrlen & 3);
  90df4f:	2a1230        	l32i	a10, a1, 192
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
	hdrlen = ieee80211_anyhdrsize(wh);
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
  90df52:	280aff        	movi	a8, 255
	pktlen -= (hdrlen & 3);
  90df55:	09a90c        	sub	a9, a10, a9
	pktlen += IEEE80211_CRC_LEN;
  90df58:	b499      	addi.n	a9, a9, 4
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
	hdrlen = ieee80211_anyhdrsize(wh);
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
  90df5a:	281639        	s32i	a8, a1, 228
	pktlen -= (hdrlen & 3);
	pktlen += IEEE80211_CRC_LEN;

	if (iswep)
  90df5d:	28123a        	l32i	a8, a1, 232
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
	hdrlen = ieee80211_anyhdrsize(wh);
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
	pktlen -= (hdrlen & 3);
	pktlen += IEEE80211_CRC_LEN;
  90df60:	291637        	s32i	a9, a1, 220
	bf->bf_endpt = endpt;
	bf->bf_cookie = mh->cookie;
	bf->bf_protmode = mh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
  90df63:	050540        	extui	a5, a5, 0, 1
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
	pktlen -= (hdrlen & 3);
	pktlen += IEEE80211_CRC_LEN;

	if (iswep)
  90df66:	2e123c        	l32i	a14, a1, 240
  90df69:	c884      	beqz.n	a8, 90df71 <ath_tgt_send_mgt+0x11d>
		keyix = mh->keyix;
  90df6b:	283005        	l8ui	a8, a3, 5
  90df6e:	281639        	s32i	a8, a1, 228
adf_nbuf_map(adf_os_device_t        osdev, 
             adf_os_dma_map_t       bmap, 
             adf_nbuf_t             buf, 
             adf_os_dma_dir_t       dir)
{
    return __adf_nbuf_map(osdev, bmap, buf, dir);
  90df71:	8b70      	l32i.n	a11, a7, 0
  90df73:	2a2246        	l32i	a10, a2, 0x118
  90df76:	dc40      	mov.n	a12, a4
  90df78:	c0d0      	movi.n	a13, 0
  90df7a:	2e163c        	s32i	a14, a1, 240
  90df7d:	5be2ba        	call8	906a68 <__adf_nbuf_map>
 * @param[in] buf   buf
 */
static inline void
adf_nbuf_queue_add(adf_nbuf_queue_t *head, adf_nbuf_t buf)
{
    __adf_nbuf_queue_add(head, buf);
  90df80:	db40      	mov.n	a11, a4

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, skb, ADF_OS_DMA_TO_DEVICE);

	bf->bf_skb = skb;
  90df82:	9478      	s32i.n	a4, a7, 32
  90df84:	2a7c14        	addi	a10, a7, 20
  90df87:	5be29f        	call8	906a04 <__adf_nbuf_queue_add>
	adf_nbuf_queue_add(&bf->bf_skbhead, skb);

	ds = bf->bf_desc;
  90df8a:	847c      	l32i.n	a4, a7, 48
	rt = sc->sc_currates;
  90df8c:	292281        	l32i	a9, a2, 0x204
	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, skb, ADF_OS_DMA_TO_DEVICE);

	bf->bf_skb = skb;
	adf_nbuf_queue_add(&bf->bf_skbhead, skb);

	ds = bf->bf_desc;
  90df8f:	241638        	s32i	a4, a1, 224
	rt = sc->sc_currates;
	adf_os_assert(rt != NULL);
  90df92:	2e123c        	l32i	a14, a1, 240
  90df95:	cd9f      	bnez.n	a9, 90dfb8 <ath_tgt_send_mgt+0x164>
  90df97:	146913        	l32r	a4, 8e83e4 <memset+0x159c>
  90df9a:	1a6af9        	l32r	a10, 8e8b80 <memset+0x1d38>
  90df9d:	244212        	l32i	a4, a4, 72
  90dfa0:	1b6b08        	l32r	a11, 8e8bc0 <memset+0x1d78>
  90dfa3:	29163f        	s32i	a9, a1, 252
  90dfa6:	0b4000        	callx8	a4
  90dfa9:	146978        	l32r	a4, 8e858c <memset+0x1744>
  90dfac:	2e123c        	l32i	a14, a1, 240
  90dfaf:	0c0200        	memw
  90dfb2:	244200        	l32i	a4, a4, 0
  90dfb5:	29123f        	l32i	a9, a1, 252

	if (mh->flags == ATH_SHORT_PREAMBLE)
  90dfb8:	2a3003        	l8ui	a10, a3, 3
  90dfbb:	c040      	movi.n	a4, 0
  90dfbd:	b0aa      	addi.n	a10, a10, -1
  90dfbf:	c0b1      	movi.n	a11, 1
  90dfc1:	d840      	mov.n	a8, a4
	else
		shortPreamble = AH_FALSE;

	flags = HAL_TXDESC_CLRDMASK;

	switch (wh->i_fc[0] & IEEE80211_FC0_TYPE_MASK) {
  90dfc3:	2c6000        	l8ui	a12, a6, 0

	ds = bf->bf_desc;
	rt = sc->sc_currates;
	adf_os_assert(rt != NULL);

	if (mh->flags == ATH_SHORT_PREAMBLE)
  90dfc6:	0ab838        	moveqz	a8, a11, a10
	else
		shortPreamble = AH_FALSE;

	flags = HAL_TXDESC_CLRDMASK;

	switch (wh->i_fc[0] & IEEE80211_FC0_TYPE_MASK) {
  90dfc9:	c0ac      	movi.n	a10, 12
  90dfcb:	0aca01        	and	a10, a12, a10
  90dfce:	74a91f        	bne	a10, a4, 90dff1 <ath_tgt_send_mgt+0x19d>
	case IEEE80211_FC0_TYPE_MGT:
		subtype = wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK;
  90dfd1:	c740      	movi.n	a4, -16
  90dfd3:	04c401        	and	a4, a12, a4

		if (subtype == IEEE80211_FC0_SUBTYPE_PROBE_RESP)
			atype = HAL_PKT_TYPE_PROBE_RESP;
  90dfd6:	c0c4      	movi.n	a12, 4
  90dfd8:	2c1636        	s32i	a12, a1, 216

	switch (wh->i_fc[0] & IEEE80211_FC0_TYPE_MASK) {
	case IEEE80211_FC0_TYPE_MGT:
		subtype = wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK;

		if (subtype == IEEE80211_FC0_SUBTYPE_PROBE_RESP)
  90dfdb:	c5c0      	movi.n	a12, 80
  90dfdd:	7c4113        	beq	a4, a12, 90dff4 <ath_tgt_send_mgt+0x1a0>
			atype = HAL_PKT_TYPE_PROBE_RESP;
		else if (subtype == IEEE80211_FC0_SUBTYPE_ATIM)
  90dfe0:	2cfa70        	movi	a12, -144
  90dfe3:	ac44      	add.n	a4, a4, a12
  90dfe5:	04ba38        	moveqz	a10, a11, a4
  90dfe8:	2a1636        	s32i	a10, a1, 216
  90dfeb:	600005        	j	90dff4 <ath_tgt_send_mgt+0x1a0>
  90dfee:	000000        	ill
		else
			atype = HAL_PKT_TYPE_NORMAL;

		break;
	default:
		atype = HAL_PKT_TYPE_NORMAL;
  90dff1:	241636        	s32i	a4, a1, 216
		break;
	}

	avp = &sc->sc_vap[mh->vap_index];
  90dff4:	243001        	l8ui	a4, a3, 1
  90dff7:	1a6a16        	l32r	a10, 8e8850 <memset+0x1a08>
  90dffa:	0c4b11        	slli	a11, a4, 4
  90dffd:	a4bb      	add.n	a11, a11, a4
  90dfff:	0abb0a        	addx4	a11, a11, a10
  90e002:	ab2b      	add.n	a11, a2, a11

	rcs[0].rix = ath_get_minrateidx(sc, avp);
  90e004:	2bbc08        	addi	a11, a11, 8
	rcs[0].tries = ATH_TXMAXTRY;
  90e007:	240a0b        	movi	a4, 11
		break;
	}

	avp = &sc->sc_vap[mh->vap_index];

	rcs[0].rix = ath_get_minrateidx(sc, avp);
  90e00a:	da20      	mov.n	a10, a2
  90e00c:	28163e        	s32i	a8, a1, 248
  90e00f:	29163f        	s32i	a9, a1, 252
  90e012:	2e163c        	s32i	a14, a1, 240
  90e015:	5bed2f        	call8	9094d4 <ath_get_minrateidx>
	rcs[0].tries = ATH_TXMAXTRY;
  90e018:	241491        	s8i	a4, a1, 145
	rcs[0].flags = 0;
  90e01b:	c040      	movi.n	a4, 0
  90e01d:	241493        	s8i	a4, a1, 147
 * @param[in] size    buffer size
 */
static inline void
adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    __adf_os_mem_copy(dst, src, size);
  90e020:	241c20        	addi	a4, a1, 32
  90e023:	2b4c70        	addi	a11, a4, 112
		break;
	}

	avp = &sc->sc_vap[mh->vap_index];

	rcs[0].rix = ath_get_minrateidx(sc, avp);
  90e026:	2a1490        	s8i	a10, a1, 144
  90e029:	c3c0      	movi.n	a12, 48
  90e02b:	2a7c50        	addi	a10, a7, 80
  90e02e:	5bfb93        	call8	90ce7c <__adf_os_mem_copy>
	rcs[0].flags = 0;

	adf_os_mem_copy(bf->bf_rcs, rcs, sizeof(rcs));
	rix = rcs[0].rix;
	try0 = rcs[0].tries;
	txrate = rt->info[rix].rateCode;
  90e031:	2d1090        	l8ui	a13, a1, 144
  90e034:	29123f        	l32i	a9, a1, 252
  90e037:	0dd40a        	addx4	a4, a13, a13
  90e03a:	09440a        	addx4	a4, a4, a9
  90e03d:	2a4034        	l8ui	a10, a4, 52

	if (shortPreamble){
  90e040:	28123e        	l32i	a8, a1, 248
	rcs[0].flags = 0;

	adf_os_mem_copy(bf->bf_rcs, rcs, sizeof(rcs));
	rix = rcs[0].rix;
	try0 = rcs[0].tries;
	txrate = rt->info[rix].rateCode;
  90e043:	2a1634        	s32i	a10, a1, 208
	rcs[0].tries = ATH_TXMAXTRY;
	rcs[0].flags = 0;

	adf_os_mem_copy(bf->bf_rcs, rcs, sizeof(rcs));
	rix = rcs[0].rix;
	try0 = rcs[0].tries;
  90e046:	2b1091        	l8ui	a11, a1, 145
	txrate = rt->info[rix].rateCode;
  90e049:	244c20        	addi	a4, a4, 32

	if (shortPreamble){
  90e04c:	2e123c        	l32i	a14, a1, 240
  90e04f:	c887      	beqz.n	a8, 90e05a <ath_tgt_send_mgt+0x206>
		txrate |= rt->info[rix].shortPreamble;
  90e051:	244015        	l8ui	a4, a4, 21
  90e054:	04aa02        	or	a10, a10, a4
  90e057:	2a1634        	s32i	a10, a1, 208
	}

	vap = ni->ni_vap;
  90e05a:	84e8      	l32i.n	a4, a14, 32
	bf->bf_node = ni;
  90e05c:	9e74      	s32i.n	a14, a7, 16

	if (ismcast) {
  90e05e:	cd56      	bnez.n	a5, 90e078 <ath_tgt_send_mgt+0x224>
		flags |= HAL_TXDESC_NOACK;
		try0 = 1;
	} else if (pktlen > vap->iv_rtsthreshold) {
  90e060:	244105        	l16ui	a4, a4, 10
  90e063:	251237        	l32i	a5, a1, 220
  90e066:	754a16        	bge	a4, a5, 90e080 <ath_tgt_send_mgt+0x22c>
		flags |= HAL_TXDESC_RTSENA;
		cix = rt->info[rix].controlRate;
  90e069:	0dd40a        	addx4	a4, a13, a13
  90e06c:	09440a        	addx4	a4, a4, a9
  90e06f:	2c4037        	l8ui	a12, a4, 55

	if (ismcast) {
		flags |= HAL_TXDESC_NOACK;
		try0 = 1;
	} else if (pktlen > vap->iv_rtsthreshold) {
		flags |= HAL_TXDESC_RTSENA;
  90e072:	c055      	movi.n	a5, 5
  90e074:	60000d        	j	90e085 <ath_tgt_send_mgt+0x231>
  90e077:	00c0b1        	excw

	vap = ni->ni_vap;
	bf->bf_node = ni;

	if (ismcast) {
		flags |= HAL_TXDESC_NOACK;
  90e07a:	c053      	movi.n	a5, 3
  90e07c:	600002        	j	90e082 <ath_tgt_send_mgt+0x22e>
  90e07f:	00c051        	extui	a0, a0, 28, 2
{
	struct ieee80211_node_target *ni;
	struct ieee80211vap_target *vap;
	struct ath_vap_target *avp;
	struct ath_hal *ah = sc->sc_ah;
	a_uint8_t rix, txrate, ctsrate, cix = 0xff, *data;
  90e082:	2c0aff        	movi	a12, 255
	} else if (pktlen > vap->iv_rtsthreshold) {
		flags |= HAL_TXDESC_RTSENA;
		cix = rt->info[rix].controlRate;
	}

	if ((bf->bf_protmode != IEEE80211_PROT_NONE) &&
  90e085:	247084        	l8ui	a4, a7, 132
  90e088:	ca44      	beqz.n	a4, 90e0b0 <ath_tgt_send_mgt+0x25c>
	    rt->info[rix].phy == IEEE80211_T_OFDM &&
  90e08a:	0dd40a        	addx4	a4, a13, a13
  90e08d:	09440a        	addx4	a4, a4, a9
	} else if (pktlen > vap->iv_rtsthreshold) {
		flags |= HAL_TXDESC_RTSENA;
		cix = rt->info[rix].controlRate;
	}

	if ((bf->bf_protmode != IEEE80211_PROT_NONE) &&
  90e090:	244029        	l8ui	a4, a4, 41
  90e093:	694219        	bnei	a4, 2, 90e0b0 <ath_tgt_send_mgt+0x25c>
	    rt->info[rix].phy == IEEE80211_T_OFDM &&
  90e096:	745816        	bany	a5, a4, 90e0b0 <ath_tgt_send_mgt+0x25c>
	    (flags & HAL_TXDESC_NOACK) == 0) {
		cix = rt->info[sc->sc_protrix].controlRate;
  90e099:	242d03        	addmi	a4, a2, 0x300
  90e09c:	24400c        	l8ui	a4, a4, 12
  90e09f:	04440a        	addx4	a4, a4, a4
  90e0a2:	09440a        	addx4	a4, a4, a9
  90e0a5:	2c4037        	l8ui	a12, a4, 55
		sc->sc_tx_stats.ast_tx_protect++;
  90e0a8:	24225a        	l32i	a4, a2, 0x168
  90e0ab:	b144      	addi.n	a4, a4, 1
  90e0ad:	24265a        	s32i	a4, a2, 0x168
	}

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
  90e0b0:	24e10c        	l16ui	a4, a14, 24
							   IEEE80211_SEQ_SEQ_SHIFT);
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);

	ctsduration = 0;
	if (flags & (HAL_TXDESC_RTSENA|HAL_TXDESC_CTSENA)) {
  90e0b3:	c0fc      	movi.n	a15, 12
	    (flags & HAL_TXDESC_NOACK) == 0) {
		cix = rt->info[sc->sc_protrix].controlRate;
		sc->sc_tx_stats.ast_tx_protect++;
	}

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
  90e0b5:	0c4411        	slli	a4, a4, 4
  90e0b8:	04044f        	extui	a4, a4, 0, 16

#undef adf_os_cpu_to_le16

static a_uint16_t adf_os_cpu_to_le16(a_uint16_t x)
{
	return ((((x) & 0xff00) >> 8) |   (((x) & 0x00ff) << 8));
  90e0bb:	084a11        	slli	a10, a4, 8
  90e0be:	048414        	srli	a4, a4, 8
  90e0c1:	04a402        	or	a4, a10, a4
	    (flags & HAL_TXDESC_NOACK) == 0) {
		cix = rt->info[sc->sc_protrix].controlRate;
		sc->sc_tx_stats.ast_tx_protect++;
	}

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
  90e0c4:	24650b        	s16i	a4, a6, 22
							   IEEE80211_SEQ_SEQ_SHIFT);
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90e0c7:	24e10c        	l16ui	a4, a14, 24

	ctsduration = 0;
	if (flags & (HAL_TXDESC_RTSENA|HAL_TXDESC_CTSENA)) {
  90e0ca:	0f5f01        	and	a15, a5, a15
		sc->sc_tx_stats.ast_tx_protect++;
	}

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
							   IEEE80211_SEQ_SEQ_SHIFT);
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90e0cd:	b144      	addi.n	a4, a4, 1
  90e0cf:	04044b        	extui	a4, a4, 0, 12
  90e0d2:	24e50c        	s16i	a4, a14, 24

	ctsduration = 0;
	if (flags & (HAL_TXDESC_RTSENA|HAL_TXDESC_CTSENA)) {
  90e0d5:	64f091        	beqz	a15, 90e16a <ath_tgt_send_mgt+0x316>
		adf_os_assert(cix != 0xff);
  90e0d8:	240aff        	movi	a4, 255
  90e0db:	74c92e        	bne	a12, a4, 90e10d <ath_tgt_send_mgt+0x2b9>
  90e0de:	146913        	l32r	a4, 8e852c <memset+0x16e4>
  90e0e1:	1a6af9        	l32r	a10, 8e8cc8 <memset+0x1e80>
  90e0e4:	244212        	l32i	a4, a4, 72
  90e0e7:	1b6b08        	l32r	a11, 8e8d08 <memset+0x1ec0>
  90e0ea:	28163e        	s32i	a8, a1, 248
  90e0ed:	29163f        	s32i	a9, a1, 252
  90e0f0:	2c163c        	s32i	a12, a1, 240
  90e0f3:	2d163d        	s32i	a13, a1, 244
  90e0f6:	0b4000        	callx8	a4
  90e0f9:	146978        	l32r	a4, 8e86dc <memset+0x1894>
  90e0fc:	2d123d        	l32i	a13, a1, 244
  90e0ff:	0c0200        	memw
  90e102:	8440      	l32i.n	a4, a4, 0
  90e104:	2c123c        	l32i	a12, a1, 240
  90e107:	29123f        	l32i	a9, a1, 252
  90e10a:	28123e        	l32i	a8, a1, 248
		ctsrate = rt->info[cix].rateCode;
  90e10d:	0cca0a        	addx4	a10, a12, a12
  90e110:	09aa0a        	addx4	a10, a10, a9
  90e113:	24a034        	l8ui	a4, a10, 52
  90e116:	c0b4      	movi.n	a11, 4
		if (shortPreamble) {
  90e118:	c98c      	beqz.n	a8, 90e138 <ath_tgt_send_mgt+0x2e4>
			ctsrate |= rt->info[cix].shortPreamble;
  90e11a:	2ea035        	l8ui	a14, a10, 53

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
							   IEEE80211_SEQ_SEQ_SHIFT);
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);

	ctsduration = 0;
  90e11d:	c0f0      	movi.n	a15, 0
	if (flags & (HAL_TXDESC_RTSENA|HAL_TXDESC_CTSENA)) {
		adf_os_assert(cix != 0xff);
		ctsrate = rt->info[cix].rateCode;
		if (shortPreamble) {
			ctsrate |= rt->info[cix].shortPreamble;
  90e11f:	0e4402        	or	a4, a4, a14
			if (flags & HAL_TXDESC_RTSENA)      /* SIFS + CTS */
  90e122:	7b5002        	bnone	a5, a11, 90e128 <ath_tgt_send_mgt+0x2d4>
				ctsduration += rt->info[cix].spAckDuration;
  90e125:	2fa11d        	l16ui	a15, a10, 58
			if ((flags & HAL_TXDESC_NOACK) == 0)    /* SIFS + ACK */
  90e128:	7e5f22        	bbsi	a5, 30, 90e14e <ath_tgt_send_mgt+0x2fa>
				ctsduration += rt->info[cix].spAckDuration;
  90e12b:	0ccc0a        	addx4	a12, a12, a12
  90e12e:	09cc0a        	addx4	a12, a12, a9
  90e131:	2ac11d        	l16ui	a10, a12, 58
  90e134:	600014        	j	90e14c <ath_tgt_send_mgt+0x2f8>
  90e137:	00df80        	excw
		} else {
			if (flags & HAL_TXDESC_RTSENA)      /* SIFS + CTS */
  90e13a:	7b5002        	bnone	a5, a11, 90e140 <ath_tgt_send_mgt+0x2ec>
				ctsduration += rt->info[cix].lpAckDuration;
  90e13d:	2fa11c        	l16ui	a15, a10, 56
			if ((flags & HAL_TXDESC_NOACK) == 0)    /* SIFS + ACK */
  90e140:	7e5f0a        	bbsi	a5, 30, 90e14e <ath_tgt_send_mgt+0x2fa>
				ctsduration += rt->info[cix].lpAckDuration;
  90e143:	0ccc0a        	addx4	a12, a12, a12
  90e146:	09cc0a        	addx4	a12, a12, a9
  90e149:	2ac11c        	l16ui	a10, a12, 56
  90e14c:	aaff      	add.n	a15, a15, a10
		}
		ctsduration += ath_hal_computetxtime(ah,
  90e14e:	2a1235        	l32i	a10, a1, 212
  90e151:	2c1237        	l32i	a12, a1, 220
  90e154:	099b02        	or	a11, a9, a9
  90e157:	088e02        	or	a14, a8, a8
  90e15a:	2f163c        	s32i	a15, a1, 240
  90e15d:	5bf309        	call8	90ad84 <ath_hal_computetxtime>
  90e160:	2f123c        	l32i	a15, a1, 240
						     rt, pktlen, rix, shortPreamble);
		try0 = 1;
  90e163:	c0b1      	movi.n	a11, 1
			if (flags & HAL_TXDESC_RTSENA)      /* SIFS + CTS */
				ctsduration += rt->info[cix].lpAckDuration;
			if ((flags & HAL_TXDESC_NOACK) == 0)    /* SIFS + ACK */
				ctsduration += rt->info[cix].lpAckDuration;
		}
		ctsduration += ath_hal_computetxtime(ah,
  90e165:	afaa      	add.n	a10, a10, a15
  90e167:	600003        	j	90e16e <ath_tgt_send_mgt+0x31a>

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
							   IEEE80211_SEQ_SEQ_SHIFT);
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);

	ctsduration = 0;
  90e16a:	daf0      	mov.n	a10, a15
		}
		ctsduration += ath_hal_computetxtime(ah,
						     rt, pktlen, rix, shortPreamble);
		try0 = 1;
	} else
		ctsrate = 0;
  90e16c:	d4f0      	mov.n	a4, a15

	flags |= HAL_TXDESC_INTREQ;

	ah->ah_setupTxDesc(ds
  90e16e:	281239        	l32i	a8, a1, 228
						     rt, pktlen, rix, shortPreamble);
		try0 = 1;
	} else
		ctsrate = 0;

	flags |= HAL_TXDESC_INTREQ;
  90e171:	c190      	movi.n	a9, 16
  90e173:	095502        	or	a5, a5, a9

	ah->ah_setupTxDesc(ds
  90e176:	008932        	sext	a9, a8, 7
  90e179:	281235        	l32i	a8, a1, 212
  90e17c:	9b10      	s32i.n	a11, a1, 0
  90e17e:	9512      	s32i.n	a5, a1, 8
  90e180:	9a14      	s32i.n	a10, a1, 16
  90e182:	9911      	s32i.n	a9, a1, 4
  90e184:	9413      	s32i.n	a4, a1, 12
  90e186:	298217        	l32i	a9, a8, 92
  90e189:	2a1238        	l32i	a10, a1, 224
  90e18c:	2b1237        	l32i	a11, a1, 220
  90e18f:	2c123b        	l32i	a12, a1, 236
  90e192:	2d1236        	l32i	a13, a1, 216
  90e195:	2f1234        	l32i	a15, a1, 208
  90e198:	c3ec      	movi.n	a14, 60
  90e19a:	0b9000        	callx8	a9
			    , keyix
			    , flags
			    , ctsrate
			    , ctsduration);

	bf->bf_flags = flags;
  90e19d:	257544        	s16i	a5, a7, 136

	/*
	 * Set key type in tx desc while sending the encrypted challenge to AP
	 * in Auth frame 3 of Shared Authentication, owl needs this.
	 */
	if (iswep && (keyix != HAL_TXKEYIX_INVALID) &&
  90e1a0:	25123a        	l32i	a5, a1, 232
  90e1a3:	c95f      	beqz.n	a5, 90e1c6 <ath_tgt_send_mgt+0x372>
			(wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK) == IEEE80211_FC0_SUBTYPE_AUTH)
  90e1a5:	266000        	l8ui	a6, a6, 0
  90e1a8:	250af0        	movi	a5, 240

	/*
	 * Set key type in tx desc while sending the encrypted challenge to AP
	 * in Auth frame 3 of Shared Authentication, owl needs this.
	 */
	if (iswep && (keyix != HAL_TXKEYIX_INVALID) &&
  90e1ab:	056601        	and	a6, a6, a5
  90e1ae:	250ab0        	movi	a5, 176
  90e1b1:	756911        	bne	a6, a5, 90e1c6 <ath_tgt_send_mgt+0x372>
			(wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK) == IEEE80211_FC0_SUBTYPE_AUTH)
		ah->ah_fillKeyTxDesc(ds, mh->keytype);
  90e1b4:	261235        	l32i	a6, a1, 212
  90e1b7:	2b3004        	l8ui	a11, a3, 4
  90e1ba:	2a1238        	l32i	a10, a1, 224
  90e1bd:	236219        	l32i	a3, a6, 100
  90e1c0:	00bb32        	sext	a11, a11, 7
  90e1c3:	0b3000        	callx8	a3

	ath_filltxdesc(sc, bf);
  90e1c6:	da20      	mov.n	a10, a2
  90e1c8:	db70      	mov.n	a11, a7
  90e1ca:	5bfbbe        	call8	90d0c4 <ath_filltxdesc>

	for (i=0; i<4; i++) {
		series[i].Tries = 2;
		series[i].Rate = txrate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90e1cd:	232d16        	addmi	a3, a2, 0x1600
  90e1d0:	2a3026        	l8ui	a10, a3, 38
  90e1d3:	231c20        	addi	a3, a1, 32
	sc->sc_tx_stats.ast_tx_shortretry += sr;
	sc->sc_tx_stats.ast_tx_longretry += lr;
}

void
ath_tgt_send_mgt(struct ath_softc_tgt *sc,adf_nbuf_t hdr_buf, adf_nbuf_t skb,
  90e1d6:	263c70        	addi	a6, a3, 112
		ah->ah_fillKeyTxDesc(ds, mh->keytype);

	ath_filltxdesc(sc, bf);

	for (i=0; i<4; i++) {
		series[i].Tries = 2;
  90e1d9:	c0b2      	movi.n	a11, 2
		series[i].Rate = txrate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
		series[i].RateFlags = 0;
  90e1db:	c090      	movi.n	a9, 0

	ath_filltxdesc(sc, bf);

	for (i=0; i<4; i++) {
		series[i].Tries = 2;
		series[i].Rate = txrate;
  90e1dd:	281234        	l32i	a8, a1, 208
		ah->ah_fillKeyTxDesc(ds, mh->keytype);

	ath_filltxdesc(sc, bf);

	for (i=0; i<4; i++) {
		series[i].Tries = 2;
  90e1e0:	9b30      	s32i.n	a11, a3, 0
		series[i].Rate = txrate;
  90e1e2:	9831      	s32i.n	a8, a3, 4
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90e1e4:	9a33      	s32i.n	a10, a3, 12
		series[i].RateFlags = 0;
  90e1e6:	9934      	s32i.n	a9, a3, 16
  90e1e8:	233c1c        	addi	a3, a3, 28
  90e1eb:	c050      	movi.n	a5, 0
			(wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK) == IEEE80211_FC0_SUBTYPE_AUTH)
		ah->ah_fillKeyTxDesc(ds, mh->keytype);

	ath_filltxdesc(sc, bf);

	for (i=0; i<4; i++) {
  90e1ed:	7639ec        	bne	a3, a6, 90e1dd <ath_tgt_send_mgt+0x389>
		series[i].Tries = 2;
		series[i].Rate = txrate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
		series[i].RateFlags = 0;
	}
	ah->ah_set11nRateScenario(ds, 0, ctsrate, series, 4, 0);
  90e1f0:	261235        	l32i	a6, a1, 212
  90e1f3:	2a1238        	l32i	a10, a1, 224
  90e1f6:	236210        	l32i	a3, a6, 64
  90e1f9:	db50      	mov.n	a11, a5
  90e1fb:	dc40      	mov.n	a12, a4
  90e1fd:	df50      	mov.n	a15, a5
  90e1ff:	2d1c20        	addi	a13, a1, 32
  90e202:	2e0a04        	movi	a14, 4
  90e205:	0b3000        	callx8	a3
static void
ath_tgt_txqaddbuf(struct ath_softc_tgt *sc,
		  struct ath_txq *txq, struct ath_tx_buf *bf,
		  struct ath_tx_desc *lastds)
{
	struct ath_hal *ah = sc->sc_ah;
  90e208:	232d05        	addmi	a3, a2, 0x500
  90e20b:	843b      	l32i.n	a4, a3, 44

	ATH_TXQ_INSERT_TAIL(txq, bf, bf_list);
  90e20d:	233aec        	movi	a3, 0x3ec
  90e210:	a323      	add.n	a3, a2, a3
  90e212:	9579      	s32i.n	a5, a7, 36
  90e214:	8533      	l32i.n	a5, a3, 12
		series[i].Rate = txrate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
		series[i].RateFlags = 0;
	}
	ah->ah_set11nRateScenario(ds, 0, ctsrate, series, 4, 0);
	ath_tgt_txqaddbuf(sc, txq, bf, bf->bf_lastds);
  90e216:	867e      	l32i.n	a6, a7, 56
		  struct ath_txq *txq, struct ath_tx_buf *bf,
		  struct ath_tx_desc *lastds)
{
	struct ath_hal *ah = sc->sc_ah;

	ATH_TXQ_INSERT_TAIL(txq, bf, bf_list);
  90e218:	957a      	s32i.n	a5, a7, 40
  90e21a:	9750      	s32i.n	a7, a5, 0
  90e21c:	257c24        	addi	a5, a7, 36
  90e21f:	9533      	s32i.n	a5, a3, 12
  90e221:	8534      	l32i.n	a5, a3, 16
  90e223:	9735      	s32i.n	a7, a3, 20
  90e225:	b155      	addi.n	a5, a5, 1
  90e227:	9534      	s32i.n	a5, a3, 16

	if (txq->axq_link == NULL) {
  90e229:	8531      	l32i.n	a5, a3, 4
  90e22b:	cc5d      	bnez.n	a5, 90e23c <ath_tgt_send_mgt+0x3e8>
		ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
  90e22d:	854a      	l32i.n	a5, a4, 40
  90e22f:	8b30      	l32i.n	a11, a3, 0
  90e231:	8c7c      	l32i.n	a12, a7, 48
  90e233:	da40      	mov.n	a10, a4
  90e235:	0b5000        	callx8	a5
  90e238:	600004        	j	90e240 <ath_tgt_send_mgt+0x3ec>
  90e23b:	00837c        	excw
	} else {
		*txq->axq_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
  90e23e:	9350      	s32i.n	a3, a5, 0
	}

	txq->axq_link = &lastds->ds_link;
  90e240:	233aec        	movi	a3, 0x3ec
  90e243:	a322      	add.n	a2, a2, a3
	ah->ah_startTxDma(ah, txq->axq_qnum);
  90e245:	8b20      	l32i.n	a11, a2, 0
  90e247:	834c      	l32i.n	a3, a4, 48
		ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
	} else {
		*txq->axq_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
	}

	txq->axq_link = &lastds->ds_link;
  90e249:	9621      	s32i.n	a6, a2, 4
	ah->ah_startTxDma(ah, txq->axq_qnum);
  90e24b:	da40      	mov.n	a10, a4
  90e24d:	0b3000        	callx8	a3
  90e250:	d10f      	retw.n
  90e252:	000000        	ill
	ah->ah_set11nRateScenario(ds, 0, ctsrate, series, 4, 0);
	ath_tgt_txqaddbuf(sc, txq, bf, bf->bf_lastds);

	return;
fail:
	HTC_ReturnBuffers(sc->tgt_htc_handle, endpt, skb);
  90e255:	136913        	l32r	a3, 8e86a4 <memset+0x185c>
  90e258:	8a22      	l32i.n	a10, a2, 8
  90e25a:	233282        	l32i	a3, a3, 0x208
  90e25d:	db50      	mov.n	a11, a5
  90e25f:	dc40      	mov.n	a12, a4
  90e261:	0b3000        	callx8	a3
  90e264:	d10f      	retw.n
	...

0090e268 <ath_tgt_handle_normal>:
	txq->axq_link = &lastds->ds_link;
	ah->ah_startTxDma(ah, txq->axq_qnum);
}

void ath_tgt_handle_normal(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90e268:	6c1004        	entry	a1, 32
	ath_atx_tid_t *tid;
	struct ath_node_target *an;

	an = (struct ath_node_target *)bf->bf_node;
  90e26b:	253204        	l32i	a5, a3, 16
	adf_os_assert(an);
  90e26e:	655017        	bnez	a5, 90e289 <ath_tgt_handle_normal+0x21>
  90e271:	146913        	l32r	a4, 8e86c0 <memset+0x1878>
  90e274:	1a6af9        	l32r	a10, 8e8e58 <memset+0x2010>
  90e277:	244212        	l32i	a4, a4, 72
  90e27a:	1b6b09        	l32r	a11, 8e8ea0 <memset+0x2058>
  90e27d:	0b4000        	callx8	a4
  90e280:	146978        	l32r	a4, 8e8860 <memset+0x1a18>
  90e283:	0c0200        	memw
  90e286:	244200        	l32i	a4, a4, 0

	tid = &an->tid[bf->bf_tidno];
  90e289:	24304d        	l8ui	a4, a3, 77
  90e28c:	0c4811        	slli	a8, a4, 4
  90e28f:	04840c        	sub	a4, a8, a4
  90e292:	05440a        	addx4	a4, a4, a5
  90e295:	244c24        	addi	a4, a4, 36
	adf_os_assert(tid);
  90e298:	cd45      	bnez.n	a4, 90e2b1 <ath_tgt_handle_normal+0x49>
  90e29a:	156913        	l32r	a5, 8e86e8 <memset+0x18a0>
  90e29d:	1a6af9        	l32r	a10, 8e8e84 <memset+0x203c>
  90e2a0:	255212        	l32i	a5, a5, 72
  90e2a3:	1b6b09        	l32r	a11, 8e8ec8 <memset+0x2080>
  90e2a6:	0b5000        	callx8	a5
  90e2a9:	156978        	l32r	a5, 8e888c <memset+0x1a44>
  90e2ac:	0c0200        	memw
  90e2af:	8550      	l32i.n	a5, a5, 0

	bf->bf_comp = ath_tgt_tx_comp_normal;
  90e2b1:	156b0a        	l32r	a5, 8e8edc <memset+0x2094>
	INCR(tid->seq_start, IEEE80211_SEQ_MAX);
	ath_tgt_tx_send_normal(sc, bf);
  90e2b4:	da20      	mov.n	a10, a2
	adf_os_assert(an);

	tid = &an->tid[bf->bf_tidno];
	adf_os_assert(tid);

	bf->bf_comp = ath_tgt_tx_comp_normal;
  90e2b6:	953f      	s32i.n	a5, a3, 60
	INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90e2b8:	254102        	l16ui	a5, a4, 4
	ath_tgt_tx_send_normal(sc, bf);
  90e2bb:	db30      	mov.n	a11, a3

	tid = &an->tid[bf->bf_tidno];
	adf_os_assert(tid);

	bf->bf_comp = ath_tgt_tx_comp_normal;
	INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90e2bd:	b155      	addi.n	a5, a5, 1
  90e2bf:	05054b        	extui	a5, a5, 0, 12
  90e2c2:	254502        	s16i	a5, a4, 4
	ath_tgt_tx_send_normal(sc, bf);
  90e2c5:	5bfec2        	call8	90ddd0 <ath_tgt_tx_send_normal>
  90e2c8:	d10f      	retw.n
	...

0090e2cc <ath_tx_addto_baw>:

	return ATH_TGT_AGGR_DONE;
}

void ath_tx_addto_baw(ath_atx_tid_t *tid, struct ath_tx_buf *bf)
{
  90e2cc:	6c1004        	entry	a1, 32
	int index, cindex;

	if (bf->bf_isretried) {
  90e2cf:	283221        	l32i	a8, a3, 132
  90e2d2:	7b8f3e        	bbsi	a8, 27, 90e314 <ath_tx_addto_baw+0x48>
		return;
	}

	index  = ATH_BA_INDEX(tid->seq_start, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90e2d5:	293123        	l16ui	a9, a3, 70
  90e2d8:	232102        	l16ui	a3, a2, 4
  90e2db:	094914        	srli	a9, a9, 4
  90e2de:	03990c        	sub	a9, a9, a3
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);
  90e2e1:	8a23      	l32i.n	a10, a2, 12

	if (bf->bf_isretried) {
		return;
	}

	index  = ATH_BA_INDEX(tid->seq_start, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90e2e3:	09094b        	extui	a9, a9, 0, 12
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);
  90e2e6:	a9ac      	add.n	a12, a10, a9
  90e2e8:	0c0846        	extui	a8, a12, 0, 7

	TX_BUF_BITMAP_SET(tid->tx_buf_bitmap, cindex);
  90e2eb:	085b12        	srai	a11, a8, 5
  90e2ee:	b4bb      	addi.n	a11, a11, 4
  90e2f0:	02bb0a        	addx4	a11, a11, a2
  90e2f3:	c031      	movi.n	a3, 1
  90e2f5:	00c104        	ssl	a12
  90e2f8:	003c1a        	sll	a12, a3
  90e2fb:	83b1      	l32i.n	a3, a11, 4
  90e2fd:	0c3c02        	or	a12, a3, a12

	if (index >= ((tid->baw_tail - tid->baw_head) & (ATH_TID_MAX_BUFS - 1))) {
  90e300:	8324      	l32i.n	a3, a2, 16
	}

	index  = ATH_BA_INDEX(tid->seq_start, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);

	TX_BUF_BITMAP_SET(tid->tx_buf_bitmap, cindex);
  90e302:	9cb1      	s32i.n	a12, a11, 4

	if (index >= ((tid->baw_tail - tid->baw_head) & (ATH_TID_MAX_BUFS - 1))) {
  90e304:	0a3a0c        	sub	a10, a3, a10
  90e307:	0a0a46        	extui	a10, a10, 0, 7
  90e30a:	7a9206        	blt	a9, a10, 90e314 <ath_tx_addto_baw+0x48>
		tid->baw_tail = cindex;
		INCR(tid->baw_tail, ATH_TID_MAX_BUFS);
  90e30d:	b188      	addi.n	a8, a8, 1
  90e30f:	080846        	extui	a8, a8, 0, 7
  90e312:	9824      	s32i.n	a8, a2, 16
  90e314:	d10f      	retw.n
	...

0090e318 <ath_tgt_tx_form_aggr>:
	return aggr_limit;
}

int ath_tgt_tx_form_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid,
			 ath_tx_bufhead *bf_q)
{
  90e318:	6c100c        	entry	a1, 96
  90e31b:	9219      	s32i.n	a2, a1, 36
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
	int nframes = 0, rl = 0;;
	struct ath_tx_desc *ds = NULL;
	struct ath_tx_buf *bf;
	struct ath_hal *ah = sc->sc_ah;
  90e31d:	8519      	l32i.n	a5, a1, 36
	return aggr_limit;
}

int ath_tgt_tx_form_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid,
			 ath_tx_bufhead *bf_q)
{
  90e31f:	d230      	mov.n	a2, a3
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
	int nframes = 0, rl = 0;;
	struct ath_tx_desc *ds = NULL;
	struct ath_tx_buf *bf;
	struct ath_hal *ah = sc->sc_ah;
  90e321:	235d05        	addmi	a3, a5, 0x500
  90e324:	833b      	l32i.n	a3, a3, 44
  90e326:	c186      	movi.n	a8, 22
  90e328:	931d      	s32i.n	a3, a1, 52
	u_int16_t aggr_limit =  (64*1024 -1), al = 0, bpad = 0, al_delta;
	u_int16_t h_baw = tid->baw_size/2, prev_al = 0, prev_frames = 0;
  90e32a:	232104        	l16ui	a3, a2, 8
	return aggr_limit;
}

int ath_tgt_tx_form_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid,
			 ath_tx_bufhead *bf_q)
{
  90e32d:	941b      	s32i.n	a4, a1, 44
	int nframes = 0, rl = 0;;
	struct ath_tx_desc *ds = NULL;
	struct ath_tx_buf *bf;
	struct ath_hal *ah = sc->sc_ah;
	u_int16_t aggr_limit =  (64*1024 -1), al = 0, bpad = 0, al_delta;
	u_int16_t h_baw = tid->baw_size/2, prev_al = 0, prev_frames = 0;
  90e32f:	031314        	srli	a3, a3, 1
  90e332:	981c      	s32i.n	a8, a1, 48
  90e334:	c155      	movi.n	a5, 21

	bf_first = asf_tailq_first(&tid->buf_q);
  90e336:	842b      	l32i.n	a4, a2, 44
  90e338:	735301        	bltu	a5, a3, 90e33d <ath_tgt_tx_form_aggr+0x25>
  90e33b:	931c      	s32i.n	a3, a1, 48
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
	int nframes = 0, rl = 0;;
	struct ath_tx_desc *ds = NULL;
	struct ath_tx_buf *bf;
	struct ath_hal *ah = sc->sc_ah;
	u_int16_t aggr_limit =  (64*1024 -1), al = 0, bpad = 0, al_delta;
  90e33d:	196a06        	l32r	a9, 8e8b58 <memset+0x1d10>
  90e340:	c070      	movi.n	a7, 0
  90e342:	d670      	mov.n	a6, a7
  90e344:	991a      	s32i.n	a9, a1, 40

int ath_tgt_tx_form_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid,
			 ath_tx_bufhead *bf_q)
{
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
	int nframes = 0, rl = 0;;
  90e346:	dd70      	mov.n	a13, a7
  90e348:	d570      	mov.n	a5, a7
}

int ath_tgt_tx_form_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid,
			 ath_tx_bufhead *bf_q)
{
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
  90e34a:	9718      	s32i.n	a7, a1, 32
	u_int16_t h_baw = tid->baw_size/2, prev_al = 0, prev_frames = 0;

	bf_first = asf_tailq_first(&tid->buf_q);

	do {
		bf = asf_tailq_first(&tid->buf_q);
  90e34c:	832b      	l32i.n	a3, a2, 44
		adf_os_assert(bf);
  90e34e:	cd3a      	bnez.n	a3, 90e36c <ath_tgt_tx_form_aggr+0x54>
  90e350:	186913        	l32r	a8, 8e879c <memset+0x1954>
  90e353:	1a6af9        	l32r	a10, 8e8f38 <memset+0x20f0>
  90e356:	2c8212        	l32i	a12, a8, 72
  90e359:	1b6b0b        	l32r	a11, 8e8f88 <memset+0x2140>
  90e35c:	9d1e      	s32i.n	a13, a1, 56
  90e35e:	0bc000        	callx8	a12
  90e361:	1a6978        	l32r	a10, 8e8944 <memset+0x1afc>
  90e364:	8d1e      	l32i.n	a13, a1, 56
  90e366:	0c0200        	memw
  90e369:	2aa200        	l32i	a10, a10, 0

		if (!BAW_WITHIN(tid->seq_start, tid->baw_size,
  90e36c:	2b3123        	l16ui	a11, a3, 70
  90e36f:	2a2102        	l16ui	a10, a2, 4
  90e372:	0b4b14        	srli	a11, a11, 4
  90e375:	0abb0c        	sub	a11, a11, a10
  90e378:	2a2104        	l16ui	a10, a2, 8
  90e37b:	0b0b4b        	extui	a11, a11, 0, 12
  90e37e:	7ab20a        	blt	a11, a10, 90e38c <ath_tgt_tx_form_aggr+0x74>
				SEQNO_FROM_BF_SEQNO(bf->bf_seqno))) {

			bf_first->bf_al= al;
  90e381:	264527        	s16i	a6, a4, 78
			bf_first->bf_nframes = nframes;
  90e384:	25444c        	s8i	a5, a4, 76
			return ATH_TGT_AGGR_BAW_CLOSED;
  90e387:	c021      	movi.n	a2, 1
  90e389:	d10f      	retw.n
  90e38b:	0065d0        	excw
		}

		if (!rl) {
  90e38e:	ad89      	add.n	a9, a8, a13
				 struct ath_tx_buf *bf)
{
	int i, prate;
	u_int32_t max4msframelen, frame_length;
	u_int16_t aggr_limit, legacy=0;
	const HAL_RATE_TABLE  *rt = sc->sc_currates;
  90e390:	19882e        	l32r	a9, 8f0448 <memset+0x9600>
  90e393:	299281        	l32i	a9, a9, 0x204
  90e396:	991a      	s32i.n	a9, a1, 40
	struct ieee80211_node_target *ieee_node = (struct ieee80211_node_target *)an;

	if (bf->bf_ismcast) {
  90e398:	2a3221        	l32i	a10, a3, 132
  90e39b:	78a719        	bbci	a10, 24, 90e3b8 <ath_tgt_tx_form_aggr+0xa0>
		bf->bf_rcs[1].tries = bf->bf_rcs[2].tries = bf->bf_rcs[3].tries = 0;
		bf->bf_rcs[0].rix   = 0xb;
  90e39e:	c0ab      	movi.n	a10, 11
  90e3a0:	2a3450        	s8i	a10, a3, 80
		bf->bf_rcs[0].tries = ATH_TXMAXTRY - 1;
  90e3a3:	c0aa      	movi.n	a10, 10
	u_int16_t aggr_limit, legacy=0;
	const HAL_RATE_TABLE  *rt = sc->sc_currates;
	struct ieee80211_node_target *ieee_node = (struct ieee80211_node_target *)an;

	if (bf->bf_ismcast) {
		bf->bf_rcs[1].tries = bf->bf_rcs[2].tries = bf->bf_rcs[3].tries = 0;
  90e3a5:	2d3475        	s8i	a13, a3, 117
  90e3a8:	2d3469        	s8i	a13, a3, 105
  90e3ab:	2d345d        	s8i	a13, a3, 93
		bf->bf_rcs[0].rix   = 0xb;
		bf->bf_rcs[0].tries = ATH_TXMAXTRY - 1;
  90e3ae:	2a3451        	s8i	a10, a3, 81
		bf->bf_rcs[0].flags = 0;
  90e3b1:	2d3453        	s8i	a13, a3, 83
  90e3b4:	60001f        	j	90e3d7 <ath_tgt_tx_form_aggr+0xbf>
  90e3b7:	002a3c        	excw
	} else {
		ath_tgt_rate_findrate(sc, an, AH_TRUE, 0, ATH_TXMAXTRY-1, 4, 1,
				      ATH_RC_PROBE_ALLOWED, bf->bf_rcs, &prate);
  90e3ba:	509a12        	call0	934c04 <_etext+0x25b17>
				  a_int32_t stepDnInc,
				  a_uint32_t rcflag,
				  struct ath_rc_series series[],
				  a_int32_t *isProbe)
{
	ath_rate_findrate(sc, an, 1, frameLen, 10, 4, 1,
  90e3bd:	2a1c10        	addi	a10, a1, 16
  90e3c0:	c0c1      	movi.n	a12, 1
  90e3c2:	9a13      	s32i.n	a10, a1, 12
  90e3c4:	8a19      	l32i.n	a10, a1, 36
  90e3c6:	db80      	mov.n	a11, a8
  90e3c8:	9c10      	s32i.n	a12, a1, 0
  90e3ca:	9c11      	s32i.n	a12, a1, 4
  90e3cc:	c0ea      	movi.n	a14, 10
  90e3ce:	c0f4      	movi.n	a15, 4
  90e3d0:	981e      	s32i.n	a8, a1, 56
  90e3d2:	5bfa7f        	call8	90cdd0 <ath_rate_findrate>
  90e3d5:	881e      	l32i.n	a8, a1, 56
}

int ath_tgt_tx_form_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid,
			 ath_tx_bufhead *bf_q)
{
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
  90e3d7:	1b6a06        	l32r	a11, 8e8bf0 <memset+0x1da8>
  90e3da:	033a02        	or	a10, a3, a3
  90e3dd:	2c0a00        	movi	a12, 0
	}

	max4msframelen = IEEE80211_AMPDU_LIMIT_MAX;

	for (i = 0; i < 4; i++) {
		if (bf->bf_rcs[i].tries) {
  90e3e0:	2da051        	l8ui	a13, a10, 81
  90e3e3:	c9d5      	beqz.n	a13, 90e3fc <ath_tgt_tx_form_aggr+0xe4>
			frame_length = bf->bf_rcs[i].max4msframelen;

			if (rt->info[bf->bf_rcs[i].rix].phy != IEEE80211_T_HT) {
  90e3e5:	2da050        	l8ui	a13, a10, 80
  90e3e8:	891a      	l32i.n	a9, a1, 40
  90e3ea:	0ddd0a        	addx4	a13, a13, a13
  90e3ed:	09dd0a        	addx4	a13, a13, a9
  90e3f0:	2dd029        	l8ui	a13, a13, 41

	max4msframelen = IEEE80211_AMPDU_LIMIT_MAX;

	for (i = 0; i < 4; i++) {
		if (bf->bf_rcs[i].tries) {
			frame_length = bf->bf_rcs[i].max4msframelen;
  90e3f3:	2ea215        	l32i	a14, a10, 84

			if (rt->info[bf->bf_rcs[i].rix].phy != IEEE80211_T_HT) {
  90e3f6:	69d40f        	bnei	a13, 4, 90e409 <ath_tgt_tx_form_aggr+0xf1>
				legacy = 1;
				break;
			}

			max4msframelen = ATH_MIN(max4msframelen, frame_length);
  90e3f9:	0ebb36        	minu	a11, a11, a14
				      ATH_RC_PROBE_ALLOWED, bf->bf_rcs, &prate);
	}

	max4msframelen = IEEE80211_AMPDU_LIMIT_MAX;

	for (i = 0; i < 4; i++) {
  90e3fc:	b1cc      	addi.n	a12, a12, 1
  90e3fe:	bcaa      	addi.n	a10, a10, 12
  90e400:	69c4dc        	bnei	a12, 4, 90e3e0 <ath_tgt_tx_form_aggr+0xc8>
				 struct ath_node_target *an,
				 struct ath_tx_buf *bf)
{
	int i, prate;
	u_int32_t max4msframelen, frame_length;
	u_int16_t aggr_limit, legacy=0;
  90e403:	c0c0      	movi.n	a12, 0
  90e405:	600002        	j	90e40b <ath_tgt_tx_form_aggr+0xf3>
  90e408:	00c0c1        	excw

			max4msframelen = ATH_MIN(max4msframelen, frame_length);
		}
	}

	if (prate || legacy)
  90e40b:	8d14      	l32i.n	a13, a1, 16
		return 0;
  90e40d:	c0a0      	movi.n	a10, 0

			max4msframelen = ATH_MIN(max4msframelen, frame_length);
		}
	}

	if (prate || legacy)
  90e40f:	7ad925        	bne	a13, a10, 90e438 <ath_tgt_tx_form_aggr+0x120>
		return 0;
  90e412:	dad0      	mov.n	a10, a13

			max4msframelen = ATH_MIN(max4msframelen, frame_length);
		}
	}

	if (prate || legacy)
  90e414:	cec0      	bnez.n	a12, 90e438 <ath_tgt_tx_form_aggr+0x120>
		return 0;

	if (sc->sc_ic.ic_enable_coex)
  90e416:	8919      	l32i.n	a9, a1, 36
  90e418:	2a9d16        	addmi	a10, a9, 0x1600
  90e41b:	2ca025        	l8ui	a12, a10, 37
  90e41e:	8aa8      	l32i.n	a10, a10, 32
  90e420:	64c005        	beqz	a12, 90e429 <ath_tgt_tx_form_aggr+0x111>
		aggr_limit = ATH_MIN((max4msframelen*3)/8, sc->sc_ic.ic_ampdu_limit);
  90e423:	0bbb09        	addx2	a11, a11, a11
  90e426:	0b3b14        	srli	a11, a11, 3
	else
		aggr_limit = ATH_MIN(max4msframelen, sc->sc_ic.ic_ampdu_limit);
  90e429:	0aba36        	minu	a10, a11, a10

	if (ieee_node->ni_maxampdu)
  90e42c:	28810a        	l16ui	a8, a8, 20
		return 0;

	if (sc->sc_ic.ic_enable_coex)
		aggr_limit = ATH_MIN((max4msframelen*3)/8, sc->sc_ic.ic_ampdu_limit);
	else
		aggr_limit = ATH_MIN(max4msframelen, sc->sc_ic.ic_ampdu_limit);
  90e42f:	0a0a4f        	extui	a10, a10, 0, 16

	if (ieee_node->ni_maxampdu)
		aggr_limit = ATH_MIN(aggr_limit, ieee_node->ni_maxampdu);
  90e432:	08ab36        	minu	a11, a10, a8
  90e435:	08ba39        	movnez	a10, a11, a8
			bf_first->bf_nframes = nframes;
			return ATH_TGT_AGGR_BAW_CLOSED;
		}

		if (!rl) {
			aggr_limit = ath_lookup_rate(sc, tid->an, bf);
  90e438:	0a0a4f        	extui	a10, a10, 0, 16
  90e43b:	9a1a      	s32i.n	a10, a1, 40
			rl = 1;
		}

		al_delta = ATH_AGGR_DELIM_SZ + bf->bf_pktlen;
  90e43d:	2c3122        	l16ui	a12, a3, 68
  90e440:	b4cc      	addi.n	a12, a12, 4
  90e442:	0c0c4f        	extui	a12, a12, 0, 16

		if (nframes && (aggr_limit < (al + bpad + al_delta + prev_al))) {
  90e445:	c85b      	beqz.n	a5, 90e454 <ath_tgt_tx_form_aggr+0x13c>
  90e447:	a76a      	add.n	a10, a6, a7
  90e449:	881a      	l32i.n	a8, a1, 40
  90e44b:	acaa      	add.n	a10, a10, a12
  90e44d:	7a8a03        	bge	a8, a10, 90e454 <ath_tgt_tx_form_aggr+0x13c>
  90e450:	600005        	j	90e459 <ath_tgt_tx_form_aggr+0x141>
  90e453:	00891c        	mul16u	a9, a8, a0
		}

#ifdef PROJECT_K2
		if ((nframes + prev_frames) >= ATH_MIN((h_baw), 17)) {
#else
		if ((nframes + prev_frames) >= ATH_MIN((h_baw), 22)) {
  90e456:	79520a        	blt	a5, a9, 90e464 <ath_tgt_tx_form_aggr+0x14c>
#endif
			bf_first->bf_al= al;
  90e459:	264527        	s16i	a6, a4, 78
			bf_first->bf_nframes = nframes;
  90e45c:	25444c        	s8i	a5, a4, 76
			return ATH_TGT_AGGR_LIMITED;
  90e45f:	c022      	movi.n	a2, 2
  90e461:	d10f      	retw.n
  90e463:	00da20        	excw
		}

		ath_tx_addto_baw(tid, bf);
  90e466:	db30      	mov.n	a11, a3
  90e468:	9c1f      	s32i.n	a12, a1, 60
  90e46a:	5bff98        	call8	90e2cc <ath_tx_addto_baw>
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
  90e46d:	8a39      	l32i.n	a10, a3, 36
  90e46f:	8b3a      	l32i.n	a11, a3, 40
  90e471:	8c1f      	l32i.n	a12, a1, 60
  90e473:	c8a3      	beqz.n	a10, 90e47a <ath_tgt_tx_form_aggr+0x162>
  90e475:	9baa      	s32i.n	a11, a10, 40
  90e477:	600001        	j	90e47c <ath_tgt_tx_form_aggr+0x164>
  90e47a:	9b2c      	s32i.n	a11, a2, 48
  90e47c:	8b3a      	l32i.n	a11, a3, 40
		asf_tailq_insert_tail(bf_q, bf, bf_list);
  90e47e:	881b      	l32i.n	a8, a1, 44
			bf_first->bf_nframes = nframes;
			return ATH_TGT_AGGR_LIMITED;
		}

		ath_tx_addto_baw(tid, bf);
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
  90e480:	9ab0      	s32i.n	a10, a11, 0
		asf_tailq_insert_tail(bf_q, bf, bf_list);
  90e482:	c0a0      	movi.n	a10, 0
  90e484:	9a39      	s32i.n	a10, a3, 36
  90e486:	8a81      	l32i.n	a10, a8, 4
		nframes ++;
  90e488:	b155      	addi.n	a5, a5, 1
			return ATH_TGT_AGGR_LIMITED;
		}

		ath_tx_addto_baw(tid, bf);
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
		asf_tailq_insert_tail(bf_q, bf, bf_list);
  90e48a:	9a3a      	s32i.n	a10, a3, 40
  90e48c:	93a0      	s32i.n	a3, a10, 0
  90e48e:	2a3c24        	addi	a10, a3, 36
  90e491:	9a81      	s32i.n	a10, a8, 4
		nframes ++;

		adf_os_assert(bf);

		adf_os_assert(bf->bf_comp == ath_tgt_tx_comp_aggr);
  90e493:	8b3f      	l32i.n	a11, a3, 60
  90e495:	1a6b0c        	l32r	a10, 8e90c8 <memset+0x2280>
  90e498:	7ab11a        	beq	a11, a10, 90e4b6 <ath_tgt_tx_form_aggr+0x19e>
  90e49b:	1a6913        	l32r	a10, 8e88e8 <memset+0x1aa0>
  90e49e:	1b6b0b        	l32r	a11, 8e90cc <memset+0x2284>
  90e4a1:	2da212        	l32i	a13, a10, 72
  90e4a4:	1a6af9        	l32r	a10, 8e9088 <memset+0x2240>
  90e4a7:	9c1f      	s32i.n	a12, a1, 60
  90e4a9:	0bd000        	callx8	a13
  90e4ac:	1a6978        	l32r	a10, 8e8a8c <memset+0x1c44>
  90e4af:	8c1f      	l32i.n	a12, a1, 60
  90e4b1:	0c0200        	memw
  90e4b4:	8aa0      	l32i.n	a10, a10, 0

		al += bpad + al_delta;
  90e4b6:	a766      	add.n	a6, a6, a7
		bf->bf_ndelim = ATH_AGGR_GET_NDELIM(bf->bf_pktlen);
  90e4b8:	273122        	l16ui	a7, a3, 68

		adf_os_assert(bf);

		adf_os_assert(bf->bf_comp == ath_tgt_tx_comp_aggr);

		al += bpad + al_delta;
  90e4bb:	ac66      	add.n	a6, a6, a12
		bf->bf_ndelim = ATH_AGGR_GET_NDELIM(bf->bf_pktlen);
  90e4bd:	2b0afb        	movi	a11, 251

		adf_os_assert(bf);

		adf_os_assert(bf->bf_comp == ath_tgt_tx_comp_aggr);

		al += bpad + al_delta;
  90e4c0:	06064f        	extui	a6, a6, 0, 16
		bf->bf_ndelim = ATH_AGGR_GET_NDELIM(bf->bf_pktlen);
  90e4c3:	c0a0      	movi.n	a10, 0
  90e4c5:	77b208        	blt	a11, a7, 90e4d1 <ath_tgt_tx_form_aggr+0x1b9>
  90e4c8:	2a0afc        	movi	a10, 252
  90e4cb:	07aa0c        	sub	a10, a10, a7
  90e4ce:	0a2a47        	extui	a10, a10, 2, 8

		switch (bf->bf_keytype) {
  90e4d1:	2b3085        	l8ui	a11, a3, 133
		adf_os_assert(bf);

		adf_os_assert(bf->bf_comp == ath_tgt_tx_comp_aggr);

		al += bpad + al_delta;
		bf->bf_ndelim = ATH_AGGR_GET_NDELIM(bf->bf_pktlen);
  90e4d4:	2a344b        	s8i	a10, a3, 75

		switch (bf->bf_keytype) {
  90e4d7:	68b212        	beqi	a11, 2, 90e4ed <ath_tgt_tx_form_aggr+0x1d5>
  90e4da:	6fb306        	bgeui	a11, 3, 90e4e4 <ath_tgt_tx_form_aggr+0x1cc>
  90e4dd:	69b11f        	bnei	a11, 1, 90e500 <ath_tgt_tx_form_aggr+0x1e8>
  90e4e0:	600010        	j	90e4f4 <ath_tgt_tx_form_aggr+0x1dc>
  90e4e3:	0068b3        	excw
  90e4e6:	0c69b4        	excw
  90e4e9:	156000        	l32r	a5, 8e64ec <_xtos_set_exception_handler+0x1a4>
  90e4ec:	0dbaaa        	excw
		case HAL_KEY_TYPE_AES:
			bf->bf_ndelim += ATH_AGGR_ENCRYPTDELIM;
  90e4ef:	60000a        	j	90e4fd <ath_tgt_tx_form_aggr+0x1e5>
  90e4f2:	00002a        	muluh	a0, a0, a0
			break;
		case HAL_KEY_TYPE_WEP:
		case HAL_KEY_TYPE_TKIP:
			bf->bf_ndelim += 64;
  90e4f5:	ac40      	add.n	a0, a4, a12
  90e4f7:	600002        	j	90e4fd <ath_tgt_tx_form_aggr+0x1e5>
  90e4fa:	00bcaa        	excw
			break;
		case HAL_KEY_TYPE_WAPI:
			bf->bf_ndelim += 12;
  90e4fd:	2a344b        	s8i	a10, a3, 75
			break;
		default:
			break;
		}

		bpad = PADBYTES(al_delta) + (bf->bf_ndelim << 2);
  90e500:	0c0c06        	neg	a12, a12
  90e503:	27304b        	l8ui	a7, a3, 75

		if (bf_prev) {
  90e506:	8918      	l32i.n	a9, a1, 32
			break;
		default:
			break;
		}

		bpad = PADBYTES(al_delta) + (bf->bf_ndelim << 2);
  90e508:	0c0c41        	extui	a12, a12, 0, 2
  90e50b:	0c770a        	addx4	a7, a7, a12

		if (bf_prev) {
  90e50e:	c99a      	beqz.n	a9, 90e52c <ath_tgt_tx_form_aggr+0x214>
			bf_prev->bf_next = bf;
			bf_prev->bf_lastds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
  90e510:	2b3030        	l8ui	a11, a3, 48
  90e513:	8a9e      	l32i.n	a10, a9, 56
		}

		bpad = PADBYTES(al_delta) + (bf->bf_ndelim << 2);

		if (bf_prev) {
			bf_prev->bf_next = bf;
  90e515:	939b      	s32i.n	a3, a9, 44
			bf_prev->bf_lastds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
  90e517:	2ba400        	s8i	a11, a10, 0
  90e51a:	2b3031        	l8ui	a11, a3, 49
  90e51d:	2ba401        	s8i	a11, a10, 1
  90e520:	2b3032        	l8ui	a11, a3, 50
  90e523:	2ba402        	s8i	a11, a10, 2
  90e526:	2b3033        	l8ui	a11, a3, 51
  90e529:	2ba403        	s8i	a11, a10, 3
		}
		bf_prev = bf;

		for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90e52c:	8c3c      	l32i.n	a12, a3, 48
  90e52e:	2d0a88        	movi	a13, 136
  90e531:	600016        	j	90e54b <ath_tgt_tx_form_aggr+0x233>
			ah->ah_set11nAggrMiddle(ds, bf->bf_ndelim);
  90e534:	881d      	l32i.n	a8, a1, 52
  90e536:	2b304b        	l8ui	a11, a3, 75
  90e539:	2e8212        	l32i	a14, a8, 72
  90e53c:	dac0      	mov.n	a10, a12
  90e53e:	9c1f      	s32i.n	a12, a1, 60
  90e540:	9d1e      	s32i.n	a13, a1, 56
  90e542:	0be000        	callx8	a14
			bf_prev->bf_next = bf;
			bf_prev->bf_lastds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
		}
		bf_prev = bf;

		for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90e545:	8c1f      	l32i.n	a12, a1, 60
  90e547:	8d1e      	l32i.n	a13, a1, 56
  90e549:	adcc      	add.n	a12, a12, a13
  90e54b:	8a3e      	l32i.n	a10, a3, 56
  90e54d:	7cabe3        	bgeu	a10, a12, 90e534 <ath_tgt_tx_form_aggr+0x21c>
			ah->ah_set11nAggrMiddle(ds, bf->bf_ndelim);

	} while (!asf_tailq_empty(&tid->buf_q));
  90e550:	882b      	l32i.n	a8, a2, 44
  90e552:	9318      	s32i.n	a3, a1, 32
  90e554:	c0d1      	movi.n	a13, 1
  90e556:	658df2        	bnez	a8, 90e34c <ath_tgt_tx_form_aggr+0x34>

	bf_first->bf_al= al;
  90e559:	264527        	s16i	a6, a4, 78
	bf_first->bf_nframes = nframes;
  90e55c:	25444c        	s8i	a5, a4, 76

	return ATH_TGT_AGGR_DONE;
  90e55f:	d280      	mov.n	a2, a8
}
  90e561:	d10f      	retw.n
	...

0090e564 <ath_tgt_txq_schedule>:
	asf_tailq_insert_tail(&txq->axq_tidq, tid, tid_qelem);
}

static void
ath_tgt_txq_schedule(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
  90e564:	6c1008        	entry	a1, 64
	u_int8_t bdone;

	bdone = AH_FALSE;

	do {
		TAILQ_DEQ(&txq->axq_tidq, tid, tid_qelem);
  90e567:	8536      	l32i.n	a5, a3, 24
  90e569:	6451ff        	beqz	a5, 90e76c <ath_tgt_txq_schedule+0x208>
  90e56c:	8459      	l32i.n	a4, a5, 36
  90e56e:	865a      	l32i.n	a6, a5, 40
  90e570:	c844      	beqz.n	a4, 90e578 <ath_tgt_txq_schedule+0x14>
  90e572:	964a      	s32i.n	a6, a4, 40
  90e574:	600002        	j	90e57a <ath_tgt_txq_schedule+0x16>
  90e577:	009637        	maxu	a6, a9, a0
  90e57a:	865a      	l32i.n	a6, a5, 40
  90e57c:	9460      	s32i.n	a4, a6, 0
		if (tid == NULL)
			return;

		tid->sched = AH_FALSE;

		if (tid->paused)
  90e57e:	275034        	l8ui	a7, a5, 52
		TAILQ_DEQ(&txq->axq_tidq, tid, tid_qelem);

		if (tid == NULL)
			return;

		tid->sched = AH_FALSE;
  90e581:	c040      	movi.n	a4, 0
  90e583:	245435        	s8i	a4, a5, 53

		if (tid->paused)
  90e586:	007732        	sext	a7, a7, 7
  90e589:	c040      	movi.n	a4, 0
  90e58b:	747102        	beq	a7, a4, 90e591 <ath_tgt_txq_schedule+0x2d>
  90e58e:	6001d3        	j	90e765 <ath_tgt_txq_schedule+0x201>
			continue;

		if (!(tid->flag & TID_AGGR_ENABLED))
  90e591:	285036        	l8ui	a8, a5, 54
  90e594:	c042      	movi.n	a4, 2
  90e596:	048801        	and	a8, a8, a4
  90e599:	c061      	movi.n	a6, 1
  90e59b:	8450      	l32i.n	a4, a5, 0
  90e59d:	65804f        	bnez	a8, 90e5f0 <ath_tgt_txq_schedule+0x8c>

static void
ath_tgt_tx_sched_normal(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
	struct ath_tx_buf *bf;
	struct ath_txq *txq =TID_TO_ACTXQ(tid->tidno);;
  90e5a0:	274cfd        	addi	a7, a4, -3
  90e5a3:	d980      	mov.n	a9, a8
  90e5a5:	076939        	movnez	a9, a6, a7
  90e5a8:	c996      	beqz.n	a9, 90e5c2 <ath_tgt_txq_schedule+0x5e>
  90e5aa:	046839        	movnez	a8, a6, a4
  90e5ad:	c981      	beqz.n	a8, 90e5c2 <ath_tgt_txq_schedule+0x5e>
  90e5af:	b047      	addi.n	a7, a4, -1
  90e5b1:	6e720f        	bltui	a7, 2, 90e5c4 <ath_tgt_txq_schedule+0x60>
  90e5b4:	244cfc        	addi	a4, a4, -4
  90e5b7:	c063      	movi.n	a6, 3
  90e5b9:	6f4207        	bgeui	a4, 2, 90e5c4 <ath_tgt_txq_schedule+0x60>
  90e5bc:	c062      	movi.n	a6, 2
  90e5be:	600002        	j	90e5c4 <ath_tgt_txq_schedule+0x60>
  90e5c1:	00c060        	excw
  90e5c4:	02660a        	addx4	a6, a6, a2
  90e5c7:	266d05        	addmi	a6, a6, 0x500
  90e5ca:	8763      	l32i.n	a7, a6, 12

	do {
		if (asf_tailq_empty(&tid->buf_q))
  90e5cc:	8b5b      	l32i.n	a11, a5, 44
  90e5ce:	64b186        	beqz	a11, 90e758 <ath_tgt_txq_schedule+0x1f4>
			break;

		bf = asf_tailq_first(&tid->buf_q);
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
  90e5d1:	84b9      	l32i.n	a4, a11, 36
  90e5d3:	86ba      	l32i.n	a6, a11, 40
  90e5d5:	c844      	beqz.n	a4, 90e5dd <ath_tgt_txq_schedule+0x79>
  90e5d7:	964a      	s32i.n	a6, a4, 40
  90e5d9:	600002        	j	90e5df <ath_tgt_txq_schedule+0x7b>
  90e5dc:	00965c        	extui	a6, a0, 25, 13
  90e5df:	86ba      	l32i.n	a6, a11, 40
		ath_tgt_tx_send_normal(sc, bf);
  90e5e1:	da20      	mov.n	a10, a2
	do {
		if (asf_tailq_empty(&tid->buf_q))
			break;

		bf = asf_tailq_first(&tid->buf_q);
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
  90e5e3:	9460      	s32i.n	a4, a6, 0
		ath_tgt_tx_send_normal(sc, bf);
  90e5e5:	5bfdfa        	call8	90ddd0 <ath_tgt_tx_send_normal>

	} while (txq->axq_depth < ATH_AGGR_MIN_QDEPTH);
  90e5e8:	8474      	l32i.n	a4, a7, 16
  90e5ea:	644fde        	beqz	a4, 90e5cc <ath_tgt_txq_schedule+0x68>
  90e5ed:	600167        	j	90e758 <ath_tgt_txq_schedule+0x1f4>
ath_tgt_tx_sched_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
	struct ath_tx_buf  *bf, *bf_last;
	ATH_AGGR_STATUS status;
	ath_tx_bufhead bf_q;
	struct ath_txq *txq = TID_TO_ACTXQ(tid->tidno);
  90e5f0:	284cfd        	addi	a8, a4, -3
  90e5f3:	d970      	mov.n	a9, a7
  90e5f5:	086939        	movnez	a9, a6, a8
  90e5f8:	090847        	extui	a8, a9, 0, 8
  90e5fb:	c98b      	beqz.n	a8, 90e61a <ath_tgt_txq_schedule+0xb6>
  90e5fd:	046739        	movnez	a7, a6, a4
  90e600:	070747        	extui	a7, a7, 0, 8
  90e603:	c973      	beqz.n	a7, 90e61a <ath_tgt_txq_schedule+0xb6>
  90e605:	b047      	addi.n	a7, a4, -1
  90e607:	6e7211        	bltui	a7, 2, 90e61c <ath_tgt_txq_schedule+0xb8>
  90e60a:	244cfc        	addi	a4, a4, -4
  90e60d:	c063      	movi.n	a6, 3
  90e60f:	6f4209        	bgeui	a4, 2, 90e61c <ath_tgt_txq_schedule+0xb8>
  90e612:	c062      	movi.n	a6, 2
  90e614:	600004        	j	90e61c <ath_tgt_txq_schedule+0xb8>
  90e617:	000000        	ill
  90e61a:	c060      	movi.n	a6, 0
  90e61c:	02660a        	addx4	a6, a6, a2
  90e61f:	266d05        	addmi	a6, a6, 0x500
  90e622:	8663      	l32i.n	a6, a6, 12
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
  90e624:	242d05        	addmi	a4, a2, 0x500
ath_tgt_tx_sched_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
	struct ath_tx_buf  *bf, *bf_last;
	ATH_AGGR_STATUS status;
	ath_tx_bufhead bf_q;
	struct ath_txq *txq = TID_TO_ACTXQ(tid->tidno);
  90e627:	9615      	s32i.n	a6, a1, 20
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
  90e629:	864b      	l32i.n	a6, a4, 44
	int i;


	if (asf_tailq_empty(&tid->buf_q))
  90e62b:	845b      	l32i.n	a4, a5, 44
  90e62d:	644127        	beqz	a4, 90e758 <ath_tgt_txq_schedule+0x1f4>

	do {
		if (asf_tailq_empty(&tid->buf_q))
			break;

		asf_tailq_init(&bf_q);
  90e630:	c040      	movi.n	a4, 0

	if (asf_tailq_empty(&tid->buf_q))
		return;

	do {
		if (asf_tailq_empty(&tid->buf_q))
  90e632:	875b      	l32i.n	a7, a5, 44
  90e634:	647120        	beqz	a7, 90e758 <ath_tgt_txq_schedule+0x1f4>
			break;

		asf_tailq_init(&bf_q);

		status = ath_tgt_tx_form_aggr(sc, tid, &bf_q);
  90e637:	da20      	mov.n	a10, a2
  90e639:	db50      	mov.n	a11, a5
  90e63b:	dc10      	mov.n	a12, a1

	do {
		if (asf_tailq_empty(&tid->buf_q))
			break;

		asf_tailq_init(&bf_q);
  90e63d:	9410      	s32i.n	a4, a1, 0
  90e63f:	9111      	s32i.n	a1, a1, 4

		status = ath_tgt_tx_form_aggr(sc, tid, &bf_q);
  90e641:	5bff35        	call8	90e318 <ath_tgt_tx_form_aggr>

		if (asf_tailq_empty(&bf_q))
  90e644:	8710      	l32i.n	a7, a1, 0
		if (asf_tailq_empty(&tid->buf_q))
			break;

		asf_tailq_init(&bf_q);

		status = ath_tgt_tx_form_aggr(sc, tid, &bf_q);
  90e646:	9a14      	s32i.n	a10, a1, 16

		if (asf_tailq_empty(&bf_q))
  90e648:	64710c        	beqz	a7, 90e758 <ath_tgt_txq_schedule+0x1f4>
			break;

		bf = asf_tailq_first(&bf_q);
		bf_last = asf_tailq_last(&bf_q, ath_tx_bufhead_s);
  90e64b:	8a11      	l32i.n	a10, a1, 4
  90e64d:	8aa1      	l32i.n	a10, a10, 4
  90e64f:	8da0      	l32i.n	a13, a10, 0

		if (bf->bf_nframes == 1) {
  90e651:	2a704c        	l8ui	a10, a7, 76
  90e654:	69a166        	bnei	a10, 1, 90e6be <ath_tgt_txq_schedule+0x15a>

			if(bf->bf_retries == 0)
  90e657:	2a7086        	l8ui	a10, a7, 134
  90e65a:	cca6      	bnez.n	a10, 90e664 <ath_tgt_txq_schedule+0x100>
				__stats(sc, txaggr_single);
  90e65c:	2a2261        	l32i	a10, a2, 0x184
  90e65f:	b1aa      	addi.n	a10, a10, 1
  90e661:	2a2661        	s32i	a10, a2, 0x184
			bf->bf_isaggr = 0;
  90e664:	2b7087        	l8ui	a11, a7, 135
  90e667:	2afadf        	movi	a10, -33
  90e66a:	0aba01        	and	a10, a11, a10
  90e66d:	2a7487        	s8i	a10, a7, 135
			bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs -1]);
  90e670:	8a71      	l32i.n	a10, a7, 4
			bf->bf_lastds->ds_link = 0;
  90e672:	c080      	movi.n	a8, 0
		if (bf->bf_nframes == 1) {

			if(bf->bf_retries == 0)
				__stats(sc, txaggr_single);
			bf->bf_isaggr = 0;
			bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs -1]);
  90e674:	b0aa      	addi.n	a10, a10, -1
  90e676:	0cab11        	slli	a11, a10, 4
  90e679:	aaba      	add.n	a10, a11, a10
  90e67b:	8b7d      	l32i.n	a11, a7, 52
			bf->bf_lastds->ds_link = 0;
			bf->bf_next = NULL;

			for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90e67d:	2c0a88        	movi	a12, 136
		if (bf->bf_nframes == 1) {

			if(bf->bf_retries == 0)
				__stats(sc, txaggr_single);
			bf->bf_isaggr = 0;
			bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs -1]);
  90e680:	0baa0b        	addx8	a10, a10, a11
  90e683:	9a7e      	s32i.n	a10, a7, 56
			bf->bf_lastds->ds_link = 0;
  90e685:	24a400        	s8i	a4, a10, 0
  90e688:	28a401        	s8i	a8, a10, 1
  90e68b:	28a402        	s8i	a8, a10, 2
  90e68e:	28a403        	s8i	a8, a10, 3
			bf->bf_next = NULL;
  90e691:	947b      	s32i.n	a4, a7, 44

			for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90e693:	8b7c      	l32i.n	a11, a7, 48
  90e695:	600013        	j	90e6ac <ath_tgt_txq_schedule+0x148>
				ah->ah_clr11nAggr(ds);
  90e698:	2d6214        	l32i	a13, a6, 80
  90e69b:	dab0      	mov.n	a10, a11
  90e69d:	2b1607        	s32i	a11, a1, 28
  90e6a0:	2c1606        	s32i	a12, a1, 24
  90e6a3:	0bd000        	callx8	a13
			bf->bf_isaggr = 0;
			bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs -1]);
			bf->bf_lastds->ds_link = 0;
			bf->bf_next = NULL;

			for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90e6a6:	8b17      	l32i.n	a11, a1, 28
  90e6a8:	8c16      	l32i.n	a12, a1, 24
  90e6aa:	acbb      	add.n	a11, a11, a12
  90e6ac:	8a7e      	l32i.n	a10, a7, 56
  90e6ae:	7babe6        	bgeu	a10, a11, 90e698 <ath_tgt_txq_schedule+0x134>
				ah->ah_clr11nAggr(ds);

			ath_buf_set_rate(sc, bf);
  90e6b1:	da20      	mov.n	a10, a2
  90e6b3:	db70      	mov.n	a11, a7
  90e6b5:	5bfaf0        	call8	90d278 <ath_buf_set_rate>
  90e6b8:	600084        	j	90e740 <ath_tgt_txq_schedule+0x1dc>
  90e6bb:	000000        	ill

			continue;
		}

		bf_last->bf_next = NULL;
		bf_last->bf_lastds->ds_link = 0;
  90e6be:	8ade      	l32i.n	a10, a13, 56
			bf->bf_txq_add(sc, bf);

			continue;
		}

		bf_last->bf_next = NULL;
  90e6c0:	94db      	s32i.n	a4, a13, 44
		bf_last->bf_lastds->ds_link = 0;
  90e6c2:	24a400        	s8i	a4, a10, 0
  90e6c5:	24a401        	s8i	a4, a10, 1
  90e6c8:	24a402        	s8i	a4, a10, 2
  90e6cb:	24a403        	s8i	a4, a10, 3
		bf_last->bf_ndelim = 0;
  90e6ce:	24d44b        	s8i	a4, a13, 75

		bf->bf_isaggr  = 1;
  90e6d1:	2b7087        	l8ui	a11, a7, 135
  90e6d4:	c2a0      	movi.n	a10, 32
  90e6d6:	0aba02        	or	a10, a11, a10
  90e6d9:	2a7487        	s8i	a10, a7, 135
		ath_buf_set_rate(sc, bf);
  90e6dc:	db70      	mov.n	a11, a7
  90e6de:	da20      	mov.n	a10, a2
  90e6e0:	2d1606        	s32i	a13, a1, 24
  90e6e3:	5bfae5        	call8	90d278 <ath_buf_set_rate>
		ah->ah_set11nAggrFirst(bf->bf_desc, bf->bf_al,
  90e6e6:	8a7c      	l32i.n	a10, a7, 48
  90e6e8:	2b7127        	l16ui	a11, a7, 78
  90e6eb:	2e6211        	l32i	a14, a6, 68
  90e6ee:	2c704b        	l8ui	a12, a7, 75
  90e6f1:	0be000        	callx8	a14
					  bf->bf_ndelim);
		bf->bf_lastds = bf_last->bf_lastds;
  90e6f4:	8d16      	l32i.n	a13, a1, 24

		for (i = 0; i < bf_last->bf_dmamap_info.nsegs; i++)
  90e6f6:	c0b0      	movi.n	a11, 0

		bf->bf_isaggr  = 1;
		ath_buf_set_rate(sc, bf);
		ah->ah_set11nAggrFirst(bf->bf_desc, bf->bf_al,
					  bf->bf_ndelim);
		bf->bf_lastds = bf_last->bf_lastds;
  90e6f8:	8ade      	l32i.n	a10, a13, 56
  90e6fa:	9a7e      	s32i.n	a10, a7, 56
  90e6fc:	60001b        	j	90e71b <ath_tgt_txq_schedule+0x1b7>
  90e6ff:	00008a        	excw

		for (i = 0; i < bf_last->bf_dmamap_info.nsegs; i++)
			ah->ah_set11nAggrLast(&bf_last->bf_descarr[i]);
  90e702:	dd0c      	excw
	tid->sched = AH_TRUE;
	asf_tailq_insert_tail(&txq->axq_tidq, tid, tid_qelem);
}

static void
ath_tgt_txq_schedule(struct ath_softc_tgt *sc, struct ath_txq *txq)
  90e704:	be11      	addi.n	a1, a1, 14
  90e706:	abee      	add.n	a14, a14, a11
		ah->ah_set11nAggrFirst(bf->bf_desc, bf->bf_al,
					  bf->bf_ndelim);
		bf->bf_lastds = bf_last->bf_lastds;

		for (i = 0; i < bf_last->bf_dmamap_info.nsegs; i++)
			ah->ah_set11nAggrLast(&bf_last->bf_descarr[i]);
  90e708:	2c6213        	l32i	a12, a6, 76
  90e70b:	0aea0b        	addx8	a10, a14, a10
  90e70e:	9b17      	s32i.n	a11, a1, 28
  90e710:	9d16      	s32i.n	a13, a1, 24
  90e712:	0bc000        	callx8	a12
		ath_buf_set_rate(sc, bf);
		ah->ah_set11nAggrFirst(bf->bf_desc, bf->bf_al,
					  bf->bf_ndelim);
		bf->bf_lastds = bf_last->bf_lastds;

		for (i = 0; i < bf_last->bf_dmamap_info.nsegs; i++)
  90e715:	8b17      	l32i.n	a11, a1, 28
  90e717:	8d16      	l32i.n	a13, a1, 24
  90e719:	b1bb      	addi.n	a11, a11, 1
  90e71b:	8ad1      	l32i.n	a10, a13, 4
  90e71d:	7ab3e0        	bltu	a11, a10, 90e701 <ath_tgt_txq_schedule+0x19d>
			ah->ah_set11nAggrLast(&bf_last->bf_descarr[i]);

		if (status == ATH_AGGR_8K_LIMITED) {
  90e720:	8914      	l32i.n	a9, a1, 16
  90e722:	69941a        	bnei	a9, 4, 90e740 <ath_tgt_txq_schedule+0x1dc>
			adf_os_assert(0);
  90e725:	146913        	l32r	a4, 8e8b74 <memset+0x1d2c>
  90e728:	1a6af9        	l32r	a10, 8e930c <memset+0x24c4>
  90e72b:	244212        	l32i	a4, a4, 72
  90e72e:	1b6b0d        	l32r	a11, 8e9364 <memset+0x251c>
  90e731:	0b4000        	callx8	a4
  90e734:	146978        	l32r	a4, 8e8d14 <memset+0x1ecc>
  90e737:	0c0200        	memw
  90e73a:	8440      	l32i.n	a4, a4, 0
  90e73c:	600018        	j	90e758 <ath_tgt_txq_schedule+0x1f4>
  90e73f:	002c72        	excw
			break;
		}

		bf->bf_txq_add(sc, bf);
  90e742:	10da20        	l32r	a0, 904fc4 <memset+0x1e17c>
  90e745:	db70      	mov.n	a11, a7
  90e747:	0bc000        	callx8	a12
	} while (txq->axq_depth < ATH_AGGR_MIN_QDEPTH &&
		 status != ATH_TGT_AGGR_BAW_CLOSED);
  90e74a:	8915      	l32i.n	a9, a1, 20
  90e74c:	8894      	l32i.n	a8, a9, 16
  90e74e:	cc86      	bnez.n	a8, 90e758 <ath_tgt_txq_schedule+0x1f4>
			adf_os_assert(0);
			break;
		}

		bf->bf_txq_add(sc, bf);
	} while (txq->axq_depth < ATH_AGGR_MIN_QDEPTH &&
  90e750:	8814      	l32i.n	a8, a1, 16
  90e752:	688102        	beqi	a8, 1, 90e758 <ath_tgt_txq_schedule+0x1f4>
  90e755:	63fed9        	j	90e632 <ath_tgt_txq_schedule+0xce>
		else
			ath_tgt_tx_sched_aggr(sc,tid);

		bdone = AH_TRUE;

		if (!asf_tailq_empty(&tid->buf_q)) {
  90e758:	865b      	l32i.n	a6, a5, 44
		if (!(tid->flag & TID_AGGR_ENABLED))
			ath_tgt_tx_sched_normal(sc,tid);
		else
			ath_tgt_tx_sched_aggr(sc,tid);

		bdone = AH_TRUE;
  90e75a:	c041      	movi.n	a4, 1

		if (!asf_tailq_empty(&tid->buf_q)) {
  90e75c:	c865      	beqz.n	a6, 90e765 <ath_tgt_txq_schedule+0x201>
			ath_tgt_tx_enqueue(txq, tid);
  90e75e:	da30      	mov.n	a10, a3
  90e760:	db50      	mov.n	a11, a5
  90e762:	5bfa96        	call8	90d1bc <ath_tgt_tx_enqueue>
		}

	} while (!asf_tailq_empty(&txq->axq_tidq) && !bdone);
  90e765:	8636      	l32i.n	a6, a3, 24
  90e767:	c861      	beqz.n	a6, 90e76c <ath_tgt_txq_schedule+0x208>
  90e769:	644dfa        	beqz	a4, 90e567 <ath_tgt_txq_schedule+0x3>
  90e76c:	d10f      	retw.n
	...

0090e770 <ath_aggr_resume_tid>:
	return ((((x) & 0xff00) >> 8) |   (((x) & 0x00ff) << 8));
}

static inline void
ath_aggr_resume_tid(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
  90e770:	6c1004        	entry	a1, 32
	struct ath_txq *txq;

	txq = TID_TO_ACTXQ(tid->tidno);
  90e773:	8930      	l32i.n	a9, a3, 0
  90e775:	c081      	movi.n	a8, 1
  90e777:	249cfd        	addi	a4, a9, -3
  90e77a:	c0b0      	movi.n	a11, 0
  90e77c:	048b39        	movnez	a11, a8, a4
  90e77f:	c9b3      	beqz.n	a11, 90e796 <ath_aggr_resume_tid+0x26>
  90e781:	c991      	beqz.n	a9, 90e796 <ath_aggr_resume_tid+0x26>
  90e783:	b094      	addi.n	a4, a9, -1
  90e785:	6e420f        	bltui	a4, 2, 90e798 <ath_aggr_resume_tid+0x28>
  90e788:	299cfc        	addi	a9, a9, -4
  90e78b:	c083      	movi.n	a8, 3
  90e78d:	6f9207        	bgeui	a9, 2, 90e798 <ath_aggr_resume_tid+0x28>
  90e790:	c082      	movi.n	a8, 2
  90e792:	600002        	j	90e798 <ath_aggr_resume_tid+0x28>
  90e795:	00c080        	excw
  90e798:	02880a        	addx4	a8, a8, a2
  90e79b:	288d05        	addmi	a8, a8, 0x500
  90e79e:	8483      	l32i.n	a4, a8, 12
	tid->paused = 0;
  90e7a0:	c080      	movi.n	a8, 0
  90e7a2:	283434        	s8i	a8, a3, 52

	if (asf_tailq_empty(&tid->buf_q))
  90e7a5:	883b      	l32i.n	a8, a3, 44
  90e7a7:	c88d      	beqz.n	a8, 90e7b8 <ath_aggr_resume_tid+0x48>
		return;

	ath_tgt_tx_enqueue(txq, tid);
  90e7a9:	da40      	mov.n	a10, a4
  90e7ab:	033b02        	or	a11, a3, a3
  90e7ae:	5bfa83        	call8	90d1bc <ath_tgt_tx_enqueue>
	ath_tgt_txq_schedule(sc, txq);
  90e7b1:	da20      	mov.n	a10, a2
  90e7b3:	db40      	mov.n	a11, a4
  90e7b5:	5bff6b        	call8	90e564 <ath_tgt_txq_schedule>
  90e7b8:	d10f      	retw.n
	...

0090e7bc <owl_tgt_tid_cleanup>:
	}
}

static void owl_tgt_tid_cleanup(struct ath_softc_tgt *sc,
				struct ath_atx_tid *tid)
{
  90e7bc:	6c1004        	entry	a1, 32
	tid->incomp--;
  90e7bf:	283037        	l8ui	a8, a3, 55
	}
}

static void owl_tgt_tid_cleanup(struct ath_softc_tgt *sc,
				struct ath_atx_tid *tid)
{
  90e7c2:	da20      	mov.n	a10, a2
	tid->incomp--;
  90e7c4:	b088      	addi.n	a8, a8, -1
  90e7c6:	080847        	extui	a8, a8, 0, 8
  90e7c9:	283437        	s8i	a8, a3, 55
	if (tid->incomp) {
  90e7cc:	cf85      	bnez.n	a8, 90e805 <owl_tgt_tid_cleanup+0x49>
		return;
	}

	tid->flag &= ~TID_CLEANUP_INPROGRES;
  90e7ce:	283036        	l8ui	a8, a3, 54
  90e7d1:	29fafe        	movi	a9, -2
  90e7d4:	098901        	and	a9, a8, a9
  90e7d7:	293436        	s8i	a9, a3, 54

	if (tid->flag & TID_REINITIALIZE) {
  90e7da:	7d8722        	bbci	a8, 29, 90e800 <owl_tgt_tid_cleanup+0x44>
		adf_os_print("TID REINIT DONE for tid %p\n", tid);
  90e7dd:	186913        	l32r	a8, 8e8c2c <memset+0x1de4>
  90e7e0:	1a6b0e        	l32r	a10, 8e9418 <memset+0x25d0>
  90e7e3:	288212        	l32i	a8, a8, 72
  90e7e6:	033b02        	or	a11, a3, a3
  90e7e9:	0b8000        	callx8	a8
		tid->flag  &= ~TID_REINITIALIZE;
  90e7ec:	293036        	l8ui	a9, a3, 54
  90e7ef:	c78b      	movi.n	a8, -5
  90e7f1:	089801        	and	a8, a9, a8
  90e7f4:	283436        	s8i	a8, a3, 54
		owl_tgt_tid_init(tid);
  90e7f7:	da30      	mov.n	a10, a3
  90e7f9:	5bf9b8        	call8	90cedc <owl_tgt_tid_init>
  90e7fc:	d10f      	retw.n
  90e7fe:	0000db        	excw
	} else {
		ath_aggr_resume_tid(sc, tid);
  90e801:	305bff        	excw
  90e804:	dbd1      	excw
  90e806:	0f006c        	excw

0090e808 <ath_tgt_tx_comp_normal>:
	tid->baw_tail = tid->baw_head;
}

static void ath_tgt_tx_comp_normal(struct ath_softc_tgt *sc,
				   struct ath_tx_buf *bf)
{
  90e808:	6c1004        	entry	a1, 32
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90e80b:	28304d        	l8ui	a8, a3, 77
  90e80e:	8934      	l32i.n	a9, a3, 16
  90e810:	0c8b11        	slli	a11, a8, 4
  90e813:	08bb0c        	sub	a11, a11, a8
  90e816:	09bb0a        	addx4	a11, a11, a9
  90e819:	2bbc24        	addi	a11, a11, 36

	if (tid->flag & TID_CLEANUP_INPROGRES) {
  90e81c:	28b036        	l8ui	a8, a11, 54
  90e81f:	7f8705        	bbci	a8, 31, 90e828 <ath_tgt_tx_comp_normal+0x20>
		owl_tgt_tid_cleanup(sc, tid);
  90e822:	022a02        	or	a10, a2, a2
  90e825:	5bffe5        	call8	90e7bc <owl_tgt_tid_cleanup>
	}

	if (bf->bf_node) {
  90e828:	8834      	l32i.n	a8, a3, 16
  90e82a:	c98f      	beqz.n	a8, 90e84d <ath_tgt_tx_comp_normal+0x45>
}

static void
ath_tx_uc_comp(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	ath_tx_status_update(sc, bf);
  90e82c:	da20      	mov.n	a10, a2
  90e82e:	033b02        	or	a11, a3, a3
  90e831:	5bfc08        	call8	90d854 <ath_tx_status_update>
	ath_update_stats(sc, bf);
  90e834:	da20      	mov.n	a10, a2
  90e836:	033b02        	or	a11, a3, a3
  90e839:	5bf9de        	call8	90cfb4 <ath_update_stats>
	ath_rate_tx_complete(sc, ATH_NODE_TARGET(bf->bf_node),
  90e83c:	8b34      	l32i.n	a11, a3, 16
  90e83e:	8c3e      	l32i.n	a12, a3, 56
  90e840:	da20      	mov.n	a10, a2
  90e842:	2d3c50        	addi	a13, a3, 80
  90e845:	c0e1      	movi.n	a14, 1
  90e847:	2f0a00        	movi	a15, 0
  90e84a:	5bf96c        	call8	90cdfc <ath_rate_tx_complete>

	if (bf->bf_node) {
		ath_tx_uc_comp(sc, bf);
	}

	ath_tx_freebuf(sc, bf);
  90e84d:	da20      	mov.n	a10, a2
  90e84f:	db30      	mov.n	a11, a3
  90e851:	5bfb52        	call8	90d59c <ath_tx_freebuf>
  90e854:	d10f      	retw.n
	...

0090e858 <ath_tgt_tx_comp_aggr>:
		INCR(tid->baw_tail, ATH_TID_MAX_BUFS);
	}
}

void ath_tgt_tx_comp_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90e858:	6c1032        	entry	a1, 0x190
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90e85b:	25304d        	l8ui	a5, a3, 77
	}
}

void ath_tgt_tx_comp_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  90e85e:	8434      	l32i.n	a4, a3, 16
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90e860:	0c5811        	slli	a8, a5, 4
  90e863:	05880c        	sub	a8, a8, a5
  90e866:	04880a        	addx4	a8, a8, a4
  90e869:	258c24        	addi	a5, a8, 36
	struct ath_rc_series rcs[4];
	u_int16_t seq_st;
	u_int32_t *ba;
	int ba_index;
	int nbad = 0;
	int nframes = bf->bf_nframes;
  90e86c:	26304c        	l8ui	a6, a3, 76
	ath_tx_bufhead bf_q;
	int tx_ok = 1;
	struct ath_tx_buf *bar = NULL;
	struct ath_txq *txq;

	txq = bf->bf_txq;
  90e86f:	283220        	l32i	a8, a3, 128

	if (tid->flag & TID_CLEANUP_INPROGRES) {
  90e872:	295036        	l8ui	a9, a5, 54
	struct ath_rc_series rcs[4];
	u_int16_t seq_st;
	u_int32_t *ba;
	int ba_index;
	int nbad = 0;
	int nframes = bf->bf_nframes;
  90e875:	261654        	s32i	a6, a1, 0x150
	struct ath_tx_buf *bf_next;
	ath_tx_bufhead bf_q;
	int tx_ok = 1;
	struct ath_tx_buf *bar = NULL;
  90e878:	c060      	movi.n	a6, 0
  90e87a:	261652        	s32i	a6, a1, 0x148
	struct ath_txq *txq;

	txq = bf->bf_txq;
  90e87d:	281655        	s32i	a8, a1, 0x154

	if (tid->flag & TID_CLEANUP_INPROGRES) {
  90e880:	090640        	extui	a6, a9, 0, 1
  90e883:	6460b1        	beqz	a6, 90e938 <ath_tgt_tx_comp_aggr+0xe0>
  90e886:	8b3e      	l32i.n	a11, a3, 56
  90e888:	da10      	mov.n	a10, a1
  90e88a:	2c0a88        	movi	a12, 136
  90e88d:	5bf97b        	call8	90ce7c <__adf_os_mem_copy>
  90e890:	2a1a10        	movi	a10, 0x110
  90e893:	a1aa      	add.n	a10, a10, a1
  90e895:	2b3c50        	addi	a11, a3, 80
  90e898:	c3c0      	movi.n	a12, 48
  90e89a:	5bf978        	call8	90ce7c <__adf_os_mem_copy>

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
		bf_next  = bf->bf_next;

		ath_tx_status_update_aggr(sc, bf, ds, rcs, 0);
  90e89d:	281a10        	movi	a8, 0x110

	seq_st = ATH_DS_BA_SEQ(ds);
	ba     = ATH_DS_BA_BITMAP(ds);
	tx_ok  = (ATH_DS_TX_STATUS(ds) == HAL_OK);

	if (!bf->bf_isaggr) {
  90e8a0:	263221        	l32i	a6, a3, 132

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
		bf_next  = bf->bf_next;

		ath_tx_status_update_aggr(sc, bf, ds, rcs, 0);
  90e8a3:	a188      	add.n	a8, a8, a1
  90e8a5:	d780      	mov.n	a7, a8

	seq_st = ATH_DS_BA_SEQ(ds);
	ba     = ATH_DS_BA_BITMAP(ds);
	tx_ok  = (ATH_DS_TX_STATUS(ds) == HAL_OK);

	if (!bf->bf_isaggr) {
  90e8a7:	7a6f2f        	bbsi	a6, 26, 90e8da <ath_tgt_tx_comp_aggr+0x82>
		ath_update_stats(sc, bf);
  90e8aa:	db30      	mov.n	a11, a3
  90e8ac:	da20      	mov.n	a10, a2
  90e8ae:	5bf9c1        	call8	90cfb4 <ath_update_stats>

		__stats(sc, tx_compunaggr);
  90e8b1:	24225e        	l32i	a4, a2, 0x178

		ath_tx_status_update(sc, bf);
  90e8b4:	db30      	mov.n	a11, a3
	tx_ok  = (ATH_DS_TX_STATUS(ds) == HAL_OK);

	if (!bf->bf_isaggr) {
		ath_update_stats(sc, bf);

		__stats(sc, tx_compunaggr);
  90e8b6:	b144      	addi.n	a4, a4, 1

		ath_tx_status_update(sc, bf);
  90e8b8:	022a02        	or	a10, a2, a2
	tx_ok  = (ATH_DS_TX_STATUS(ds) == HAL_OK);

	if (!bf->bf_isaggr) {
		ath_update_stats(sc, bf);

		__stats(sc, tx_compunaggr);
  90e8bb:	24265e        	s32i	a4, a2, 0x178

		ath_tx_status_update(sc, bf);
  90e8be:	5bfbe5        	call8	90d854 <ath_tx_status_update>

		ath_tx_freebuf(sc, bf);
  90e8c1:	db30      	mov.n	a11, a3
  90e8c3:	da20      	mov.n	a10, a2
  90e8c5:	5bfb35        	call8	90d59c <ath_tx_freebuf>

		if (tid->flag & TID_CLEANUP_INPROGRES) {
  90e8c8:	235036        	l8ui	a3, a5, 54
  90e8cb:	7f3f02        	bbsi	a3, 31, 90e8d1 <ath_tgt_tx_comp_aggr+0x79>
  90e8ce:	6002fa        	j	90ebcc <ath_tgt_tx_comp_aggr+0x374>
			owl_tgt_tid_cleanup(sc, tid);
  90e8d1:	da20      	mov.n	a10, a2
  90e8d3:	db50      	mov.n	a11, a5
  90e8d5:	5bffb9        	call8	90e7bc <owl_tgt_tid_cleanup>
  90e8d8:	d10f      	retw.n

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
		bf_next  = bf->bf_next;

		ath_tx_status_update_aggr(sc, bf, ds, rcs, 0);
  90e8da:	db30      	mov.n	a11, a3
  90e8dc:	da20      	mov.n	a10, a2
  90e8de:	dc10      	mov.n	a12, a1
  90e8e0:	dd70      	mov.n	a13, a7
  90e8e2:	c0e0      	movi.n	a14, 0
		return;
	}

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
		bf_next  = bf->bf_next;
  90e8e4:	26320b        	l32i	a6, a3, 44

		ath_tx_status_update_aggr(sc, bf, ds, rcs, 0);
  90e8e7:	5bfbfe        	call8	90d8e0 <ath_tx_status_update_aggr>

		ath_tx_freebuf(sc, bf);
  90e8ea:	db30      	mov.n	a11, a3
  90e8ec:	da20      	mov.n	a10, a2
  90e8ee:	5bfb2b        	call8	90d59c <ath_tx_freebuf>

		tid->incomp--;
  90e8f1:	235037        	l8ui	a3, a5, 55
  90e8f4:	b033      	addi.n	a3, a3, -1
  90e8f6:	030347        	extui	a3, a3, 0, 8
  90e8f9:	235437        	s8i	a3, a5, 55
		if (!tid->incomp) {
  90e8fc:	cd35      	bnez.n	a3, 90e915 <ath_tgt_tx_comp_aggr+0xbd>
			tid->flag  &= ~TID_CLEANUP_INPROGRES;
  90e8fe:	265036        	l8ui	a6, a5, 54
  90e901:	c73e      	movi.n	a3, -2
  90e903:	036301        	and	a3, a6, a3
  90e906:	235436        	s8i	a3, a5, 54
			ath_aggr_resume_tid(sc, tid);
  90e909:	da20      	mov.n	a10, a2
  90e90b:	db50      	mov.n	a11, a5
  90e90d:	5bff98        	call8	90e770 <ath_aggr_resume_tid>
  90e910:	600006        	j	90e91a <ath_tgt_tx_comp_aggr+0xc2>
  90e913:	0000d3        	excw
			break;
		}

		bf = bf_next;
  90e916:	60656f        	j	914e89 <_etext+0x5d9c>
		}

		return;
	}

	while (bf) {
  90e919:	bfda      	addi.n	a10, a13, 15
		}

		bf = bf_next;
	}

	ath_update_aggr_stats(sc, ds, nframes, nbad);
  90e91b:	20db10        	l32ai	a0, a13, 64
  90e91e:	5bfa30        	call8	90d1e0 <ath_update_aggr_stats$isra$2>
	ath_rate_tx_complete(sc, an, ds, rcs, nframes, nbad);
  90e921:	2d1a10        	movi	a13, 0x110
  90e924:	2e1254        	l32i	a14, a1, 0x150
  90e927:	da20      	mov.n	a10, a2
  90e929:	db40      	mov.n	a11, a4
  90e92b:	dc10      	mov.n	a12, a1
  90e92d:	ad1d      	add.n	a13, a1, a13
  90e92f:	c0f0      	movi.n	a15, 0
  90e931:	5bf932        	call8	90cdfc <ath_rate_tx_complete>
  90e934:	d10f      	retw.n
  90e936:	00002c        	excw
void ath_tgt_tx_comp_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc lastds;
	struct ath_tx_desc *ds = &lastds;
  90e939:	0a882b        	mulsh	a8, a8, a10
  90e93c:	320e0c        	excw
  90e93f:	1a085b        	l32r	a10, 8d0aac <_bss_end+0x3bdb9c>
  90e942:	f9          	.byte 0xf9
  90e943:	4e2d3c        	excw
		ath_tx_comp_cleanup(sc, bf);
		return;
	}

	adf_os_mem_copy(ds, bf->bf_lastds, sizeof (struct ath_tx_desc));
	adf_os_mem_copy(rcs, bf->bf_rcs, sizeof(rcs));
  90e946:	502a1a        	call0	9191b0 <_etext+0xa0c3>
  90e949:	10aa1a        	l32r	a0, 8f91b4 <memset+0x1236c>
  90e94c:	0ddb02        	or	a11, a13, a13
  90e94f:	2c0a30        	movi	a12, 48
  90e952:	2d1658        	s32i	a13, a1, 0x160
  90e955:	5bf949        	call8	90ce7c <__adf_os_mem_copy>

	if (ds->ds_txstat.ts_flags == HAL_TX_SW_FILTERED) {
  90e958:	2a10ef        	l8ui	a10, a1, 239
  90e95b:	2d1258        	l32i	a13, a1, 0x160
  90e95e:	69ae1a        	bnei	a10, 128, 90e97c <ath_tgt_tx_comp_aggr+0x124>
		adf_os_assert(0);
  90e961:	126913        	l32r	a2, 8e8db0 <memset+0x1f68>
  90e964:	1a6af9        	l32r	a10, 8e9548 <memset+0x2700>
  90e967:	222212        	l32i	a2, a2, 72
  90e96a:	1b6b0f        	l32r	a11, 8e95a8 <memset+0x2760>
  90e96d:	0b2000        	callx8	a2
  90e970:	126978        	l32r	a2, 8e8f50 <memset+0x2108>
  90e973:	0c0200        	memw
  90e976:	8220      	l32i.n	a2, a2, 0
  90e978:	d10f      	retw.n
  90e97a:	000027        	excw
		return;
	}

	if (!bf->bf_isaggr) {
  90e97d:	3221c2        	excw
  90e980:	b007      	addi.n	a7, a0, -1
  90e982:	b701      	addi.n	a1, a0, 7
  90e984:	657104        	bnez	a7, 90ea8c <ath_tgt_tx_comp_aggr+0x234>
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc *ds  = bf->bf_lastds;

	ath_update_stats(sc, bf);
  90e987:	da20      	mov.n	a10, a2
  90e989:	db30      	mov.n	a11, a3
static void
ath_tx_comp_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc *ds  = bf->bf_lastds;
  90e98b:	853e      	l32i.n	a5, a3, 56
}

static void
ath_tx_comp_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  90e98d:	8434      	l32i.n	a4, a3, 16
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90e98f:	26304d        	l8ui	a6, a3, 77
	struct ath_tx_desc *ds  = bf->bf_lastds;

	ath_update_stats(sc, bf);
  90e992:	2d1658        	s32i	a13, a1, 0x160
  90e995:	5bf987        	call8	90cfb4 <ath_update_stats>
	ath_rate_tx_complete(sc, an, ds, bf->bf_rcs, 1, 0);
  90e998:	2d1258        	l32i	a13, a1, 0x160
  90e99b:	dc50      	mov.n	a12, a5
  90e99d:	da20      	mov.n	a10, a2
  90e99f:	db40      	mov.n	a11, a4
  90e9a1:	c0e1      	movi.n	a14, 1
  90e9a3:	df70      	mov.n	a15, a7
  90e9a5:	5bf915        	call8	90cdfc <ath_rate_tx_complete>

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90e9a8:	255066        	l8ui	a5, a5, 102
  90e9ab:	7f5f02        	bbsi	a5, 31, 90e9b1 <ath_tgt_tx_comp_aggr+0x159>
  90e9ae:	6000ab        	j	90ea5d <ath_tgt_tx_comp_aggr+0x205>

static inline void
ath_tx_retry_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90e9b1:	24304d        	l8ui	a4, a3, 77
	struct ath_txq *txq;

	txq = bf->bf_txq;

	if (bf->bf_retries >= OWLMAX_RETRIES) {
  90e9b4:	c079      	movi.n	a7, 9

static inline void
ath_tx_retry_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90e9b6:	0c4511        	slli	a5, a4, 4
  90e9b9:	04540c        	sub	a4, a5, a4
  90e9bc:	8534      	l32i.n	a5, a3, 16
	struct ath_txq *txq;

	txq = bf->bf_txq;
  90e9be:	263220        	l32i	a6, a3, 128

static inline void
ath_tx_retry_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90e9c1:	05440a        	addx4	a4, a4, a5
	struct ath_txq *txq;

	txq = bf->bf_txq;

	if (bf->bf_retries >= OWLMAX_RETRIES) {
  90e9c4:	253086        	l8ui	a5, a3, 134

static inline void
ath_tx_retry_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90e9c7:	244c24        	addi	a4, a4, 36
	struct ath_txq *txq;

	txq = bf->bf_txq;

	if (bf->bf_retries >= OWLMAX_RETRIES) {
  90e9ca:	757b27        	bgeu	a7, a5, 90e9f5 <ath_tgt_tx_comp_aggr+0x19d>
		__stats(sc, txunaggr_xretry);
  90e9cd:	252273        	l32i	a5, a2, 0x1cc
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90e9d0:	2b3123        	l16ui	a11, a3, 70
	struct ath_txq *txq;

	txq = bf->bf_txq;

	if (bf->bf_retries >= OWLMAX_RETRIES) {
		__stats(sc, txunaggr_xretry);
  90e9d3:	b155      	addi.n	a5, a5, 1
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90e9d5:	044a02        	or	a10, a4, a4
	struct ath_txq *txq;

	txq = bf->bf_txq;

	if (bf->bf_retries >= OWLMAX_RETRIES) {
		__stats(sc, txunaggr_xretry);
  90e9d8:	252673        	s32i	a5, a2, 0x1cc
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90e9db:	0b4b14        	srli	a11, a11, 4
  90e9de:	5bf991        	call8	90d024 <ath_tx_update_baw>
		ath_tx_status_update(sc, bf);
  90e9e1:	da20      	mov.n	a10, a2
  90e9e3:	db30      	mov.n	a11, a3
  90e9e5:	5bfb9b        	call8	90d854 <ath_tx_status_update>
		ath_bar_tx(sc, tid, bf);
  90e9e8:	da20      	mov.n	a10, a2
  90e9ea:	db40      	mov.n	a11, a4
  90e9ec:	dc30      	mov.n	a12, a3
  90e9ee:	5bfb1b        	call8	90d65c <ath_bar_tx>
  90e9f1:	d10f      	retw.n
  90e9f3:	000025        	excw
		return;
	}

	__stats(sc, txunaggr_compretries);
  90e9f6:	226db1        	addmi	a2, a6, 0xffffb100
  90e9f9:	552526        	call4	957e94 <_etext+0x48da7>
  90e9fc:	6d853e        	excw
	if (!bf->bf_lastds->ds_link) {
  90e9ff:	295000        	l8ui	a9, a5, 0
  90ea02:	285001        	l8ui	a8, a5, 1
  90ea05:	275002        	l8ui	a7, a5, 2
  90ea08:	089910        	slli	a9, a9, 24
  90ea0b:	008811        	slli	a8, a8, 16
  90ea0e:	098802        	or	a8, a8, a9
  90ea11:	087711        	slli	a7, a7, 8
  90ea14:	255003        	l8ui	a5, a5, 3
  90ea17:	087702        	or	a7, a7, a8
  90ea1a:	075502        	or	a5, a5, a7
  90ea1d:	cd54      	bnez.n	a5, 90ea35 <ath_tgt_tx_comp_aggr+0x1dd>
		__stats(sc, txunaggr_errlast);
  90ea1f:	252272        	l32i	a5, a2, 0x1c8
		bf = ath_buf_toggle(sc, bf, 1);
  90ea22:	db30      	mov.n	a11, a3
		return;
	}

	__stats(sc, txunaggr_compretries);
	if (!bf->bf_lastds->ds_link) {
		__stats(sc, txunaggr_errlast);
  90ea24:	b155      	addi.n	a5, a5, 1
  90ea26:	252672        	s32i	a5, a2, 0x1c8
		bf = ath_buf_toggle(sc, bf, 1);
  90ea29:	022a02        	or	a10, a2, a2
  90ea2c:	2c0a01        	movi	a12, 1
  90ea2f:	5bfa97        	call8	90d48c <ath_buf_toggle>
  90ea32:	0aa302        	or	a3, a10, a10
	}

	ath_tx_set_retry(sc, bf);
  90ea35:	da20      	mov.n	a10, a2
  90ea37:	db30      	mov.n	a11, a3
  90ea39:	5bfb64        	call8	90d7cc <ath_tx_set_retry>
	asf_tailq_insert_head(&tid->buf_q, bf, bf_list);
  90ea3c:	824b      	l32i.n	a2, a4, 44
  90ea3e:	253c24        	addi	a5, a3, 36
  90ea41:	9239      	s32i.n	a2, a3, 36
  90ea43:	c823      	beqz.n	a2, 90ea4a <ath_tgt_tx_comp_aggr+0x1f2>
  90ea45:	952a      	s32i.n	a5, a2, 40
  90ea47:	600001        	j	90ea4c <ath_tgt_tx_comp_aggr+0x1f4>
  90ea4a:	954c      	s32i.n	a5, a4, 48
  90ea4c:	934b      	s32i.n	a3, a4, 44
  90ea4e:	224c2c        	addi	a2, a4, 44
  90ea51:	923a      	s32i.n	a2, a3, 40
	ath_tgt_tx_enqueue(txq, tid);
  90ea53:	da60      	mov.n	a10, a6
  90ea55:	db40      	mov.n	a11, a4
  90ea57:	60016e        	j	90ebc9 <ath_tgt_tx_comp_aggr+0x371>
  90ea5a:	000000        	ill

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
		ath_tx_retry_unaggr(sc, bf);
		return;
	}
	__stats(sc, tx_compunaggr);
  90ea5d:	25225e        	l32i	a5, a2, 0x178

	ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90ea60:	2b3123        	l16ui	a11, a3, 70

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
		ath_tx_retry_unaggr(sc, bf);
		return;
	}
	__stats(sc, tx_compunaggr);
  90ea63:	b155      	addi.n	a5, a5, 1
  90ea65:	25265e        	s32i	a5, a2, 0x178

static void
ath_tx_comp_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90ea68:	0c6511        	slli	a5, a6, 4
  90ea6b:	06560c        	sub	a6, a5, a6
  90ea6e:	046a0a        	addx4	a10, a6, a4
		ath_tx_retry_unaggr(sc, bf);
		return;
	}
	__stats(sc, tx_compunaggr);

	ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90ea71:	2aac24        	addi	a10, a10, 36
  90ea74:	0b4b14        	srli	a11, a11, 4
  90ea77:	5bf96b        	call8	90d024 <ath_tx_update_baw>
	ath_tx_status_update(sc, bf);
  90ea7a:	da20      	mov.n	a10, a2
  90ea7c:	db30      	mov.n	a11, a3
  90ea7e:	5bfb75        	call8	90d854 <ath_tx_status_update>
	ath_tx_freebuf(sc, bf);
  90ea81:	da20      	mov.n	a10, a2
  90ea83:	db30      	mov.n	a11, a3
  90ea85:	5bfac5        	call8	90d59c <ath_tx_freebuf>
  90ea88:	d10f      	retw.n
  90ea8a:	000027        	excw
	if (!bf->bf_isaggr) {
		ath_tx_comp_unaggr(sc, bf);
		return;
	}

	__stats(sc, tx_compaggr);
  90ea8d:	225f26        	s32ri	a2, a5, 152

	asf_tailq_init(&bf_q);
  90ea90:	1650b1        	l32r	a6, 8e2d54 <athos_indirection_table_install+0x17e0>
	if (!bf->bf_isaggr) {
		ath_tx_comp_unaggr(sc, bf);
		return;
	}

	__stats(sc, tx_compaggr);
  90ea93:	77261a        	bbci	a2, 7, 90eab1 <ath_tgt_tx_comp_aggr+0x259>

	asf_tailq_init(&bf_q);
  90ea96:	402726        	excw
	if (!bf->bf_isaggr) {
		ath_tx_comp_unaggr(sc, bf);
		return;
	}

	__stats(sc, tx_compaggr);
  90ea99:	5fa617        	call12	8f82f8 <memset+0x114b0>

	asf_tailq_init(&bf_q);
  90ea9c:	271651        	s32i	a7, a1, 0x144

	seq_st =  ATH_DS_BA_SEQ(ds);
  90ea9f:	281176        	l16ui	a8, a1, 236
	ba     =  ATH_DS_BA_BITMAP(ds);
	tx_ok  =  (ATH_DS_TX_STATUS(ds) == HAL_OK);
  90eaa2:	2710ee        	l8ui	a7, a1, 238

	__stats(sc, tx_compaggr);

	asf_tailq_init(&bf_q);

	seq_st =  ATH_DS_BA_SEQ(ds);
  90eaa5:	281656        	s32i	a8, a1, 0x158
	ba     =  ATH_DS_BA_BITMAP(ds);
	tx_ok  =  (ATH_DS_TX_STATUS(ds) == HAL_OK);

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90eaa8:	070f40        	extui	a15, a7, 0, 1
  90eaab:	c8f1      	beqz.n	a15, 90eab0 <ath_tgt_tx_comp_aggr+0x258>
  90eaad:	60001f        	j	90ead0 <ath_tgt_tx_comp_aggr+0x278>

	asf_tailq_init(&bf_q);

	seq_st =  ATH_DS_BA_SEQ(ds);
	ba     =  ATH_DS_BA_BITMAP(ds);
	tx_ok  =  (ATH_DS_TX_STATUS(ds) == HAL_OK);
  90eab0:	c091      	movi.n	a9, 1
  90eab2:	07f939        	movnez	a9, a15, a7
	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	if (tx_ok && !ATH_DS_TX_BA(ds)) {
  90eab5:	ca95      	beqz.n	a9, 90eade <ath_tgt_tx_comp_aggr+0x286>
  90eab7:	d6f0      	mov.n	a6, a15
  90eab9:	7faf23        	bbsi	a10, 31, 90eae0 <ath_tgt_tx_comp_aggr+0x288>
		__stats(sc, txaggr_babug);
  90eabc:	242269        	l32i	a4, a2, 0x1a4
		adf_os_print("BA Bug?\n");
  90eabf:	1a6b10        	l32r	a10, 8e9700 <memset+0x28b8>
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	if (tx_ok && !ATH_DS_TX_BA(ds)) {
		__stats(sc, txaggr_babug);
  90eac2:	b144      	addi.n	a4, a4, 1
  90eac4:	242669        	s32i	a4, a2, 0x1a4
		adf_os_print("BA Bug?\n");
  90eac7:	146913        	l32r	a4, 8e8f14 <memset+0x20cc>
  90eaca:	244212        	l32i	a4, a4, 72
  90eacd:	0b4000        	callx8	a4
		ath_tx_comp_aggr_error(sc, bf, tid);
  90ead0:	da20      	mov.n	a10, a2
  90ead2:	db30      	mov.n	a11, a3
  90ead4:	dc50      	mov.n	a12, a5
  90ead6:	5bfbd6        	call8	90da30 <ath_tx_comp_aggr_error>
  90ead9:	d10f      	retw.n
  90eadb:	000000        	ill
	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	if (tx_ok && !ATH_DS_TX_BA(ds)) {
  90eade:	d690      	mov.n	a6, a9

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
		bf_next  = bf->bf_next;

		if (tx_ok && ATH_BA_ISSET(ba, ba_index)) {
  90eae0:	270afc        	movi	a7, 252
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90eae3:	2b3123        	l16ui	a11, a3, 70
  90eae6:	281256        	l32i	a8, a1, 0x158
  90eae9:	0b4b14        	srli	a11, a11, 4
  90eaec:	08ba0c        	sub	a10, a11, a8
		bf_next  = bf->bf_next;
  90eaef:	883b      	l32i.n	a8, a3, 44
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90eaf1:	0a0c4b        	extui	a12, a10, 0, 12
		bf_next  = bf->bf_next;
  90eaf4:	281657        	s32i	a8, a1, 0x15c

		if (tx_ok && ATH_BA_ISSET(ba, ba_index)) {
  90eaf7:	c38f      	movi.n	a8, 63
  90eaf9:	7c824c        	blt	a8, a12, 90eb49 <ath_tgt_tx_comp_aggr+0x2f1>
  90eafc:	649049        	beqz	a9, 90eb49 <ath_tgt_tx_comp_aggr+0x2f1>
  90eaff:	0c5c12        	srai	a12, a12, 5
  90eb02:	01cc0a        	addx4	a12, a12, a1
  90eb05:	a7cc      	add.n	a12, a12, a7
  90eb07:	c0e1      	movi.n	a14, 1
  90eb09:	8cc0      	l32i.n	a12, a12, 0
  90eb0b:	00a104        	ssl	a10
  90eb0e:	00ea1a        	sll	a10, a14
  90eb11:	7ca034        	bnone	a10, a12, 90eb49 <ath_tgt_tx_comp_aggr+0x2f1>
			__stats(sc, txaggr_compgood);
  90eb14:	2a2262        	l32i	a10, a2, 0x188
  90eb17:	aeaa      	add.n	a10, a10, a14
  90eb19:	2a2662        	s32i	a10, a2, 0x188
			ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90eb1c:	055a02        	or	a10, a5, a5
  90eb1f:	291659        	s32i	a9, a1, 0x164
  90eb22:	2e1658        	s32i	a14, a1, 0x160
  90eb25:	5bf93f        	call8	90d024 <ath_tx_update_baw>
			ath_tx_status_update_aggr(sc, bf, ds, rcs, 1);
  90eb28:	2e1258        	l32i	a14, a1, 0x160
  90eb2b:	2c0a88        	movi	a12, 136
  90eb2e:	2d1a10        	movi	a13, 0x110
  90eb31:	da20      	mov.n	a10, a2
  90eb33:	db30      	mov.n	a11, a3
  90eb35:	a1cc      	add.n	a12, a12, a1
  90eb37:	0d1d08        	add	a13, a1, a13
  90eb3a:	5bfb69        	call8	90d8e0 <ath_tx_status_update_aggr>
			ath_tx_freebuf(sc, bf);
  90eb3d:	da20      	mov.n	a10, a2
  90eb3f:	db30      	mov.n	a11, a3
  90eb41:	5bfa96        	call8	90d59c <ath_tx_freebuf>
  90eb44:	600019        	j	90eb61 <ath_tgt_tx_comp_aggr+0x309>
  90eb47:	00002c        	excw
		} else {
			ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
  90eb4a:	1a402d        	l32r	a10, 8dec00 <_bss_end+0x3cbcf0>
  90eb4d:	1a48da        	l32r	a10, 8e0eb8 <_bss_end+0x3cdfa8>
  90eb50:	20db30        	l32ai	a0, a13, 192
  90eb53:	ac1c      	add.n	a12, a1, a12
  90eb55:	0d1d08        	add	a13, a1, a13
  90eb58:	291659        	s32i	a9, a1, 0x164
			nbad ++;
  90eb5b:	266c01        	addi	a6, a6, 1
			__stats(sc, txaggr_compgood);
			ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
			ath_tx_status_update_aggr(sc, bf, ds, rcs, 1);
			ath_tx_freebuf(sc, bf);
		} else {
			ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
  90eb5e:	5bfb7c        	call8	90d950 <ath_tx_retry_subframe>
  90eb61:	231257        	l32i	a3, a1, 0x15c
			nbad ++;
  90eb64:	291259        	l32i	a9, a1, 0x164
		adf_os_print("BA Bug?\n");
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	while (bf) {
  90eb67:	653f78        	bnez	a3, 90eae3 <ath_tgt_tx_comp_aggr+0x28b>
			nbad ++;
		}
		bf = bf_next;
	}

	ath_update_aggr_stats(sc, ds, nframes, nbad);
  90eb6a:	2b0a88        	movi	a11, 136
  90eb6d:	da20      	mov.n	a10, a2
  90eb6f:	a1bb      	add.n	a11, a11, a1
  90eb71:	5bf99b        	call8	90d1e0 <ath_update_aggr_stats$isra$2>
	ath_rate_tx_complete(sc, an, ds, rcs, nframes, nbad);
  90eb74:	2c0a88        	movi	a12, 136
  90eb77:	2d1a10        	movi	a13, 0x110
  90eb7a:	2e1254        	l32i	a14, a1, 0x150
  90eb7d:	a1cc      	add.n	a12, a12, a1
  90eb7f:	da20      	mov.n	a10, a2
  90eb81:	db40      	mov.n	a11, a4
  90eb83:	0d1d08        	add	a13, a1, a13
  90eb86:	066f02        	or	a15, a6, a6
  90eb89:	5bf89c        	call8	90cdfc <ath_rate_tx_complete>

	if (bar) {
  90eb8c:	2c1252        	l32i	a12, a1, 0x148
  90eb8f:	c8c5      	beqz.n	a12, 90eb98 <ath_tgt_tx_comp_aggr+0x340>
		ath_bar_tx(sc, tid, bar);
  90eb91:	da20      	mov.n	a10, a2
  90eb93:	db50      	mov.n	a11, a5
  90eb95:	5bfab1        	call8	90d65c <ath_bar_tx>
	}

	if (!asf_tailq_empty(&bf_q)) {
  90eb98:	231250        	l32i	a3, a1, 0x140
  90eb9b:	ca3d      	beqz.n	a3, 90ebcc <ath_tgt_tx_comp_aggr+0x374>
		__stats(sc, txaggr_prepends);
  90eb9d:	232264        	l32i	a3, a2, 0x190
  90eba0:	b133      	addi.n	a3, a3, 1
  90eba2:	232664        	s32i	a3, a2, 0x190
		TAILQ_INSERTQ_HEAD(&tid->buf_q, &bf_q, bf_list);
  90eba5:	835b      	l32i.n	a3, a5, 44
  90eba7:	221251        	l32i	a2, a1, 0x144
  90ebaa:	c83a      	beqz.n	a3, 90ebb8 <ath_tgt_tx_comp_aggr+0x360>
  90ebac:	9320      	s32i.n	a3, a2, 0
  90ebae:	825b      	l32i.n	a2, a5, 44
  90ebb0:	231251        	l32i	a3, a1, 0x144
  90ebb3:	932a      	s32i.n	a3, a2, 40
  90ebb5:	600001        	j	90ebba <ath_tgt_tx_comp_aggr+0x362>
  90ebb8:	925c      	s32i.n	a2, a5, 48
  90ebba:	221250        	l32i	a2, a1, 0x140
  90ebbd:	235c2c        	addi	a3, a5, 44
  90ebc0:	925b      	s32i.n	a2, a5, 44
		ath_tgt_tx_enqueue(txq, tid);
  90ebc2:	2a1255        	l32i	a10, a1, 0x154
		ath_bar_tx(sc, tid, bar);
	}

	if (!asf_tailq_empty(&bf_q)) {
		__stats(sc, txaggr_prepends);
		TAILQ_INSERTQ_HEAD(&tid->buf_q, &bf_q, bf_list);
  90ebc5:	932a      	s32i.n	a3, a2, 40
		ath_tgt_tx_enqueue(txq, tid);
  90ebc7:	db50      	mov.n	a11, a5
  90ebc9:	5bf97c        	call8	90d1bc <ath_tgt_tx_enqueue>
  90ebcc:	d10f      	retw.n
	...

0090ebd0 <owltgt_tx_processq>:
	ath_tx_status_send(sc);
}

void owltgt_tx_processq(struct ath_softc_tgt *sc, struct ath_txq *txq,
			owl_txq_state_t txqstate)
{
  90ebd0:	6c1006        	entry	a1, 48
	struct ath_tx_buf *bf;
	struct ath_tx_desc *ds;
	struct ath_hal *ah = sc->sc_ah;
  90ebd3:	252d05        	addmi	a5, a2, 0x500
  90ebd6:	865b      	l32i.n	a6, a5, 44
		bf = asf_tailq_first(&txq->axq_q);

		ds = bf->bf_lastds;
		status = ah->ah_procTxDesc(ah, ds);

		if (status == HAL_EINPROGRESS) {
  90ebd8:	c07f      	movi.n	a7, 15
	struct ath_tx_desc *ds;
	struct ath_hal *ah = sc->sc_ah;
	HAL_STATUS status;

	for (;;) {
		if (asf_tailq_empty(&txq->axq_q)) {
  90ebda:	8532      	l32i.n	a5, a3, 8
  90ebdc:	cc54      	bnez.n	a5, 90ebe4 <owltgt_tx_processq+0x14>
			txq->axq_link = NULL;
  90ebde:	9531      	s32i.n	a5, a3, 4
			txq->axq_linkbuf = NULL;
  90ebe0:	9535      	s32i.n	a5, a3, 20
			break;
  90ebe2:	d10f      	retw.n
		}

		bf = asf_tailq_first(&txq->axq_q);

		ds = bf->bf_lastds;
  90ebe4:	885e      	l32i.n	a8, a5, 56
		status = ah->ah_procTxDesc(ah, ds);
  90ebe6:	29621a        	l32i	a9, a6, 104
  90ebe9:	db80      	mov.n	a11, a8
  90ebeb:	9810      	s32i.n	a8, a1, 0
  90ebed:	da60      	mov.n	a10, a6
  90ebef:	0b9000        	callx8	a9

		if (status == HAL_EINPROGRESS) {
  90ebf2:	8810      	l32i.n	a8, a1, 0
  90ebf4:	77a91e        	bne	a10, a7, 90ec16 <owltgt_tx_processq+0x46>
			if (txqstate == OWL_TXQ_ACTIVE)
  90ebf7:	64406d        	beqz	a4, 90ec68 <owltgt_tx_processq+0x98>
				break;
			else if (txqstate == OWL_TXQ_STOPPED) {
  90ebfa:	694112        	bnei	a4, 1, 90ec10 <owltgt_tx_processq+0x40>
				__stats(sc, tx_stopfiltered);
  90ebfd:	292275        	l32i	a9, a2, 0x1d4
  90ec00:	b199      	addi.n	a9, a9, 1
  90ec02:	292675        	s32i	a9, a2, 0x1d4
				ds->ds_txstat.ts_flags  = 0;
  90ec05:	c090      	movi.n	a9, 0
  90ec07:	298467        	s8i	a9, a8, 103
				ds->ds_txstat.ts_status = HAL_OK;
  90ec0a:	298466        	s8i	a9, a8, 102
  90ec0d:	600005        	j	90ec16 <owltgt_tx_processq+0x46>
			} else {
				ds->ds_txstat.ts_flags  = HAL_TX_SW_FILTERED;
  90ec10:	29fa80        	movi	a9, -128
  90ec13:	298467        	s8i	a9, a8, 103
			}
		}

		ATH_TXQ_REMOVE_HEAD(txq, bf, bf_list);
  90ec16:	8859      	l32i.n	a8, a5, 36
  90ec18:	895a      	l32i.n	a9, a5, 40
  90ec1a:	c883      	beqz.n	a8, 90ec21 <owltgt_tx_processq+0x51>
  90ec1c:	998a      	s32i.n	a9, a8, 40
  90ec1e:	600001        	j	90ec23 <owltgt_tx_processq+0x53>
  90ec21:	9933      	s32i.n	a9, a3, 12
  90ec23:	895a      	l32i.n	a9, a5, 40
  90ec25:	9890      	s32i.n	a8, a9, 0
  90ec27:	8834      	l32i.n	a8, a3, 16
  90ec29:	b088      	addi.n	a8, a8, -1
  90ec2b:	9834      	s32i.n	a8, a3, 16
		if ((asf_tailq_empty(&txq->axq_q))) {
  90ec2d:	8832      	l32i.n	a8, a3, 8
  90ec2f:	cc8a      	bnez.n	a8, 90ec3d <owltgt_tx_processq+0x6d>
			__stats(sc, tx_qnull);
  90ec31:	29225c        	l32i	a9, a2, 0x170
  90ec34:	b199      	addi.n	a9, a9, 1
  90ec36:	29265c        	s32i	a9, a2, 0x170
			txq->axq_link = NULL;
  90ec39:	9831      	s32i.n	a8, a3, 4
			txq->axq_linkbuf = NULL;
  90ec3b:	9835      	s32i.n	a8, a3, 20
		}

		if (bf->bf_comp) {
  90ec3d:	885f      	l32i.n	a8, a5, 60
			bf->bf_comp(sc, bf);
  90ec3f:	da20      	mov.n	a10, a2
  90ec41:	db50      	mov.n	a11, a5
			__stats(sc, tx_qnull);
			txq->axq_link = NULL;
			txq->axq_linkbuf = NULL;
		}

		if (bf->bf_comp) {
  90ec43:	c886      	beqz.n	a8, 90ec4d <owltgt_tx_processq+0x7d>
			bf->bf_comp(sc, bf);
  90ec45:	0b8000        	callx8	a8
  90ec48:	60000c        	j	90ec58 <owltgt_tx_processq+0x88>
  90ec4b:	00005b        	extui	a0, a0, 16, 12
		} else {
			ath_tx_status_update(sc, bf);
  90ec4e:	fb          	.byte 0xfb
  90ec4f:	01022a        	muluh	a2, a0, a1
			ath_buf_comp(sc, bf);
  90ec52:	02db50        	extui	a11, a2, 29, 1
  90ec55:	5bfa72        	call8	90d620 <ath_buf_comp>
		}

		if (txqstate == OWL_TXQ_ACTIVE) {
  90ec58:	654f7e        	bnez	a4, 90ebda <owltgt_tx_processq+0xa>
			ath_tgt_txq_schedule(sc, txq);
  90ec5b:	022a02        	or	a10, a2, a2
  90ec5e:	033b02        	or	a11, a3, a3
  90ec61:	5bfe40        	call8	90e564 <ath_tgt_txq_schedule>
  90ec64:	63ff72        	j	90ebda <owltgt_tx_processq+0xa>
  90ec67:	00d10f        	subx8	a1, a13, a0
	...

0090ec6c <owl_tgt_tx_tasklet>:
	owltgt_tx_processq(sc, txq, OWL_TXQ_ACTIVE);
	ah->ah_setInterrupts(ah, sc->sc_imask);
}

void owl_tgt_tx_tasklet(TQUEUE_ARG data)
{
  90ec6c:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)data;
	a_int32_t i;
	struct ath_txq *txq;

	ath_tx_status_clear(sc);
  90ec6f:	da20      	mov.n	a10, a2
  90ec71:	5bfaf4        	call8	90d844 <ath_tx_status_clear>

	for (i = 0; i < (HAL_NUM_TX_QUEUES - 6); i++) {
  90ec74:	c030      	movi.n	a3, 0
		txq = ATH_TXQ(sc, i);

		if (ATH_TXQ_SETUP(sc, i)) {
			if (txq == sc->sc_cabq)
  90ec76:	262d05        	addmi	a6, a2, 0x500
	ath_tx_status_clear(sc);

	for (i = 0; i < (HAL_NUM_TX_QUEUES - 6); i++) {
		txq = ATH_TXQ(sc, i);

		if (ATH_TXQ_SETUP(sc, i)) {
  90ec79:	242d03        	addmi	a4, a2, 0x300
  90ec7c:	2440c8        	l8ui	a4, a4, 200
  90ec7f:	003004        	ssr	a3
  90ec82:	04041b        	sra	a4, a4
  90ec85:	7f4745        	bbci	a4, 31, 90ecce <owl_tgt_tx_tasklet+0x62>
	struct ath_txq *txq;

	ath_tx_status_clear(sc);

	for (i = 0; i < (HAL_NUM_TX_QUEUES - 6); i++) {
		txq = ATH_TXQ(sc, i);
  90ec88:	253c1e        	addi	a5, a3, 30
  90ec8b:	0b5511        	slli	a5, a5, 5
  90ec8e:	a525      	add.n	a5, a2, a5

		if (ATH_TXQ_SETUP(sc, i)) {
			if (txq == sc->sc_cabq)
  90ec90:	846c      	l32i.n	a4, a6, 48
	struct ath_txq *txq;

	ath_tx_status_clear(sc);

	for (i = 0; i < (HAL_NUM_TX_QUEUES - 6); i++) {
		txq = ATH_TXQ(sc, i);
  90ec92:	bc55      	addi.n	a5, a5, 12

		if (ATH_TXQ_SETUP(sc, i)) {
			if (txq == sc->sc_cabq)
  90ec94:	74592d        	bne	a5, a4, 90ecc5 <owl_tgt_tx_tasklet+0x59>
	}
}

static void owltgt_tx_process_cabq(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	struct ath_hal *ah = sc->sc_ah;
  90ec97:	846b      	l32i.n	a4, a6, 44
	ah->ah_setInterrupts(ah, sc->sc_imask & ~HAL_INT_SWBA);
  90ec99:	196a21        	l32r	a9, 8e9520 <memset+0x26d8>
  90ec9c:	2b22c4        	l32i	a11, a2, 0x310
  90ec9f:	284228        	l32i	a8, a4, 160
  90eca2:	09bb01        	and	a11, a11, a9
  90eca5:	da40      	mov.n	a10, a4
  90eca7:	0b8000        	callx8	a8
	owltgt_tx_processq(sc, txq, OWL_TXQ_ACTIVE);
  90ecaa:	da20      	mov.n	a10, a2
  90ecac:	db50      	mov.n	a11, a5
  90ecae:	2c0a00        	movi	a12, 0
  90ecb1:	5bffc7        	call8	90ebd0 <owltgt_tx_processq>
	ah->ah_setInterrupts(ah, sc->sc_imask);
  90ecb4:	2b22c4        	l32i	a11, a2, 0x310
  90ecb7:	254228        	l32i	a5, a4, 160
  90ecba:	044a02        	or	a10, a4, a4
  90ecbd:	0b5000        	callx8	a5
  90ecc0:	60000a        	j	90ecce <owl_tgt_tx_tasklet+0x62>
  90ecc3:	0000da        	excw

		if (ATH_TXQ_SETUP(sc, i)) {
			if (txq == sc->sc_cabq)
				owltgt_tx_process_cabq(sc, txq);
			else
				owltgt_tx_processq(sc, txq, OWL_TXQ_ACTIVE);
  90ecc6:	20db50        	l32ai	a0, a13, 0x140
  90ecc9:	c0c0      	movi.n	a12, 0
  90eccb:	5bffc1        	call8	90ebd0 <owltgt_tx_processq>
	a_int32_t i;
	struct ath_txq *txq;

	ath_tx_status_clear(sc);

	for (i = 0; i < (HAL_NUM_TX_QUEUES - 6); i++) {
  90ecce:	b133      	addi.n	a3, a3, 1
  90ecd0:	6934a5        	bnei	a3, 4, 90ec79 <owl_tgt_tx_tasklet+0xd>
			else
				owltgt_tx_processq(sc, txq, OWL_TXQ_ACTIVE);
		}
	}

	ath_tx_status_send(sc);
  90ecd3:	da20      	mov.n	a10, a2
  90ecd5:	5bfb82        	call8	90dae0 <ath_tx_status_send>
  90ecd8:	d10f      	retw.n
	...

0090ecdc <ath_tgt_handle_aggr>:
	} while (!asf_tailq_empty(&txq->axq_tidq) && !bdone);
}

void
ath_tgt_handle_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90ecdc:	6c1004        	entry	a1, 32
	ath_atx_tid_t *tid;
	struct ath_node_target *an;
	struct ath_txq *txq = bf->bf_txq;
	a_bool_t queue_frame, within_baw;

	an = (struct ath_node_target *)bf->bf_node;
  90ecdf:	8634      	l32i.n	a6, a3, 16
void
ath_tgt_handle_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	ath_atx_tid_t *tid;
	struct ath_node_target *an;
	struct ath_txq *txq = bf->bf_txq;
  90ece1:	253220        	l32i	a5, a3, 128
	a_bool_t queue_frame, within_baw;

	an = (struct ath_node_target *)bf->bf_node;
	adf_os_assert(an);
  90ece4:	cd65      	bnez.n	a6, 90ecfd <ath_tgt_handle_aggr+0x21>
  90ece6:	146913        	l32r	a4, 8e9134 <memset+0x22ec>
  90ece9:	1a6af9        	l32r	a10, 8e98d0 <memset+0x2a88>
  90ecec:	244212        	l32i	a4, a4, 72
  90ecef:	1b6b11        	l32r	a11, 8e9934 <memset+0x2aec>
  90ecf2:	0b4000        	callx8	a4
  90ecf5:	146978        	l32r	a4, 8e92d8 <memset+0x2490>
  90ecf8:	0c0200        	memw
  90ecfb:	8440      	l32i.n	a4, a4, 0

	tid = &an->tid[bf->bf_tidno];
  90ecfd:	24304d        	l8ui	a4, a3, 77
  90ed00:	0c4811        	slli	a8, a4, 4
  90ed03:	04840c        	sub	a4, a8, a4
  90ed06:	06440a        	addx4	a4, a4, a6
  90ed09:	244c24        	addi	a4, a4, 36
	adf_os_assert(tid);
  90ed0c:	cd45      	bnez.n	a4, 90ed25 <ath_tgt_handle_aggr+0x49>
  90ed0e:	166913        	l32r	a6, 8e915c <memset+0x2314>
  90ed11:	1a6af9        	l32r	a10, 8e98f8 <memset+0x2ab0>
  90ed14:	266212        	l32i	a6, a6, 72
  90ed17:	1b6b11        	l32r	a11, 8e995c <memset+0x2b14>
  90ed1a:	0b6000        	callx8	a6
  90ed1d:	166978        	l32r	a6, 8e9300 <memset+0x24b8>
  90ed20:	0c0200        	memw
  90ed23:	8660      	l32i.n	a6, a6, 0

	bf->bf_comp = ath_tgt_tx_comp_aggr;
  90ed25:	166b0c        	l32r	a6, 8e9958 <memset+0x2b10>
	within_baw = BAW_WITHIN(tid->seq_start, tid->baw_size,
				SEQNO_FROM_BF_SEQNO(bf->bf_seqno));

	queue_frame = ( (txq->axq_depth >= ATH_AGGR_MIN_QDEPTH) ||
			(!asf_tailq_empty(&tid->buf_q)) ||
			(tid->paused) || (!within_baw) );
  90ed28:	8a54      	l32i.n	a10, a5, 16
	adf_os_assert(an);

	tid = &an->tid[bf->bf_tidno];
	adf_os_assert(tid);

	bf->bf_comp = ath_tgt_tx_comp_aggr;
  90ed2a:	963f      	s32i.n	a6, a3, 60

	within_baw = BAW_WITHIN(tid->seq_start, tid->baw_size,
  90ed2c:	283123        	l16ui	a8, a3, 70
  90ed2f:	294102        	l16ui	a9, a4, 4
  90ed32:	264104        	l16ui	a6, a4, 8
				SEQNO_FROM_BF_SEQNO(bf->bf_seqno));

	queue_frame = ( (txq->axq_depth >= ATH_AGGR_MIN_QDEPTH) ||
			(!asf_tailq_empty(&tid->buf_q)) ||
			(tid->paused) || (!within_baw) );
  90ed35:	cda3      	bnez.n	a10, 90ed4c <ath_tgt_handle_aggr+0x70>
	bf->bf_comp = ath_tgt_tx_comp_aggr;

	within_baw = BAW_WITHIN(tid->seq_start, tid->baw_size,
				SEQNO_FROM_BF_SEQNO(bf->bf_seqno));

	queue_frame = ( (txq->axq_depth >= ATH_AGGR_MIN_QDEPTH) ||
  90ed37:	8a4b      	l32i.n	a10, a4, 44
  90ed39:	ccaf      	bnez.n	a10, 90ed4c <ath_tgt_handle_aggr+0x70>
			(!asf_tailq_empty(&tid->buf_q)) ||
  90ed3b:	2a4034        	l8ui	a10, a4, 52
  90ed3e:	ccaa      	bnez.n	a10, 90ed4c <ath_tgt_handle_aggr+0x70>
	tid = &an->tid[bf->bf_tidno];
	adf_os_assert(tid);

	bf->bf_comp = ath_tgt_tx_comp_aggr;

	within_baw = BAW_WITHIN(tid->seq_start, tid->baw_size,
  90ed40:	084814        	srli	a8, a8, 4
  90ed43:	09880c        	sub	a8, a8, a9
  90ed46:	08084b        	extui	a8, a8, 0, 12
				SEQNO_FROM_BF_SEQNO(bf->bf_seqno));

	queue_frame = ( (txq->axq_depth >= ATH_AGGR_MIN_QDEPTH) ||
			(!asf_tailq_empty(&tid->buf_q)) ||
			(tid->paused) || (!within_baw) );
  90ed49:	768219        	blt	a8, a6, 90ed66 <ath_tgt_handle_aggr+0x8a>

	if (queue_frame) {
		asf_tailq_insert_tail(&tid->buf_q, bf, bf_list);
  90ed4c:	c020      	movi.n	a2, 0
  90ed4e:	9239      	s32i.n	a2, a3, 36
  90ed50:	824c      	l32i.n	a2, a4, 48
		ath_tgt_tx_enqueue(txq, tid);
  90ed52:	da50      	mov.n	a10, a5
	queue_frame = ( (txq->axq_depth >= ATH_AGGR_MIN_QDEPTH) ||
			(!asf_tailq_empty(&tid->buf_q)) ||
			(tid->paused) || (!within_baw) );

	if (queue_frame) {
		asf_tailq_insert_tail(&tid->buf_q, bf, bf_list);
  90ed54:	923a      	s32i.n	a2, a3, 40
  90ed56:	9320      	s32i.n	a3, a2, 0
  90ed58:	233c24        	addi	a3, a3, 36
  90ed5b:	934c      	s32i.n	a3, a4, 48
		ath_tgt_tx_enqueue(txq, tid);
  90ed5d:	db40      	mov.n	a11, a4
  90ed5f:	5bf917        	call8	90d1bc <ath_tgt_tx_enqueue>
  90ed62:	d10f      	retw.n
  90ed64:	0000da        	excw
	} else {
		ath_tx_addto_baw(tid, bf);
  90ed67:	40db30        	excw
  90ed6a:	5bfd58        	call8	90e2cc <ath_tx_addto_baw>
		__stats(sc, txaggr_nframes);
  90ed6d:	24225d        	l32i	a4, a2, 0x174
		ath_tgt_tx_send_normal(sc, bf);
  90ed70:	da20      	mov.n	a10, a2
	if (queue_frame) {
		asf_tailq_insert_tail(&tid->buf_q, bf, bf_list);
		ath_tgt_tx_enqueue(txq, tid);
	} else {
		ath_tx_addto_baw(tid, bf);
		__stats(sc, txaggr_nframes);
  90ed72:	b144      	addi.n	a4, a4, 1
  90ed74:	24265d        	s32i	a4, a2, 0x174
		ath_tgt_tx_send_normal(sc, bf);
  90ed77:	db30      	mov.n	a11, a3
  90ed79:	5bfc15        	call8	90ddd0 <ath_tgt_tx_send_normal>
  90ed7c:	d10f      	retw.n
	...

0090ed80 <ath_tgt_tx_cleanup>:
	wh->i_fc[1] |= IEEE80211_FC1_RETRY;
}

void ath_tgt_tx_cleanup(struct ath_softc_tgt *sc, struct ath_node_target *an,
			ath_atx_tid_t *tid, a_uint8_t discard_all)
{
  90ed80:	6c1004        	entry	a1, 32
  90ed83:	050547        	extui	a5, a5, 0, 8
	struct ath_tx_buf *bf_next;
	struct ath_txq *txq;

	txq = TID_TO_ACTXQ(tid->tidno);

	bf = asf_tailq_first(&tid->buf_q);
  90ed86:	834b      	l32i.n	a3, a4, 44

	while (bf) {
		if (discard_all || bf->bf_isretried) {
			bf_next = asf_tailq_next(bf, bf_list);
			TAILQ_DEQ(&tid->buf_q, bf, bf_list);
			if (bf->bf_isretried)
  90ed88:	c160      	movi.n	a6, 16

	txq = TID_TO_ACTXQ(tid->tidno);

	bf = asf_tailq_first(&tid->buf_q);

	while (bf) {
  90ed8a:	600042        	j	90edd0 <ath_tgt_tx_cleanup+0x50>
		if (discard_all || bf->bf_isretried) {
  90ed8d:	cc54      	bnez.n	a5, 90ed95 <ath_tgt_tx_cleanup+0x15>
  90ed8f:	273221        	l32i	a7, a3, 132
  90ed92:	776033        	bnone	a6, a7, 90edc9 <ath_tgt_tx_cleanup+0x49>
			bf_next = asf_tailq_next(bf, bf_list);
  90ed95:	8739      	l32i.n	a7, a3, 36
			TAILQ_DEQ(&tid->buf_q, bf, bf_list);
  90ed97:	834b      	l32i.n	a3, a4, 44
  90ed99:	c83f      	beqz.n	a3, 90edac <ath_tgt_tx_cleanup+0x2c>
  90ed9b:	8839      	l32i.n	a8, a3, 36
  90ed9d:	893a      	l32i.n	a9, a3, 40
  90ed9f:	c883      	beqz.n	a8, 90eda6 <ath_tgt_tx_cleanup+0x26>
  90eda1:	998a      	s32i.n	a9, a8, 40
  90eda3:	600001        	j	90eda8 <ath_tgt_tx_cleanup+0x28>
  90eda6:	994c      	s32i.n	a9, a4, 48
  90eda8:	893a      	l32i.n	a9, a3, 40
  90edaa:	9890      	s32i.n	a8, a9, 0
			if (bf->bf_isretried)
  90edac:	283221        	l32i	a8, a3, 132
  90edaf:	78600a        	bnone	a6, a8, 90edbd <ath_tgt_tx_cleanup+0x3d>
				ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90edb2:	2b3123        	l16ui	a11, a3, 70
  90edb5:	da40      	mov.n	a10, a4
  90edb7:	0b4b14        	srli	a11, a11, 4
  90edba:	5bf89a        	call8	90d024 <ath_tx_update_baw>
			ath_tx_freebuf(sc, bf);
  90edbd:	db30      	mov.n	a11, a3
  90edbf:	da20      	mov.n	a10, a2
  90edc1:	5bf9f6        	call8	90d59c <ath_tx_freebuf>
			bf = bf_next;
  90edc4:	d370      	mov.n	a3, a7
			continue;
  90edc6:	600006        	j	90edd0 <ath_tgt_tx_cleanup+0x50>
		}
		bf->bf_comp = ath_tgt_tx_comp_normal;
  90edc9:	176b0a        	l32r	a7, 8e99f4 <memset+0x2bac>
  90edcc:	973f      	s32i.n	a7, a3, 60
		bf = asf_tailq_next(bf, bf_list);
  90edce:	8339      	l32i.n	a3, a3, 36

	txq = TID_TO_ACTXQ(tid->tidno);

	bf = asf_tailq_first(&tid->buf_q);

	while (bf) {
  90edd0:	653fb9        	bnez	a3, 90ed8d <ath_tgt_tx_cleanup+0xd>
}

static inline void
ath_aggr_pause_tid(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
	tid->paused =1;
  90edd3:	c031      	movi.n	a3, 1
  90edd5:	234434        	s8i	a3, a4, 52
		bf = asf_tailq_next(bf, bf_list);
	}

	ath_aggr_pause_tid(sc, tid);

	while (tid->baw_head != tid->baw_tail) {
  90edd8:	8944      	l32i.n	a9, a4, 16
		if (TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head)) {
  90edda:	c051      	movi.n	a5, 1
			tid->incomp++;
			tid->flag |= TID_CLEANUP_INPROGRES;
			TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, tid->baw_head);
  90eddc:	c7af      	movi.n	a10, -1
  90edde:	60003d        	j	90ee1f <ath_tgt_tx_cleanup+0x9f>
	}

	ath_aggr_pause_tid(sc, tid);

	while (tid->baw_head != tid->baw_tail) {
		if (TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head)) {
  90ede1:	035612        	srai	a6, a3, 5
  90ede4:	b466      	addi.n	a6, a6, 4
  90ede6:	04660a        	addx4	a6, a6, a4
  90ede9:	8761      	l32i.n	a7, a6, 4
  90edeb:	003104        	ssl	a3
  90edee:	00581a        	sll	a8, a5
  90edf1:	778018        	bnone	a8, a7, 90ee0d <ath_tgt_tx_cleanup+0x8d>
			tid->incomp++;
  90edf4:	2b4037        	l8ui	a11, a4, 55
			tid->flag |= TID_CLEANUP_INPROGRES;
			TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, tid->baw_head);
  90edf7:	08a803        	xor	a8, a10, a8

	ath_aggr_pause_tid(sc, tid);

	while (tid->baw_head != tid->baw_tail) {
		if (TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head)) {
			tid->incomp++;
  90edfa:	b1bb      	addi.n	a11, a11, 1
  90edfc:	2b4437        	s8i	a11, a4, 55
			tid->flag |= TID_CLEANUP_INPROGRES;
  90edff:	2b4036        	l8ui	a11, a4, 54
			TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, tid->baw_head);
  90ee02:	078701        	and	a7, a8, a7
	ath_aggr_pause_tid(sc, tid);

	while (tid->baw_head != tid->baw_tail) {
		if (TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head)) {
			tid->incomp++;
			tid->flag |= TID_CLEANUP_INPROGRES;
  90ee05:	05bb02        	or	a11, a11, a5
  90ee08:	2b4436        	s8i	a11, a4, 54
			TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, tid->baw_head);
  90ee0b:	9761      	s32i.n	a7, a6, 4
		}
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
  90ee0d:	b133      	addi.n	a3, a3, 1
  90ee0f:	030346        	extui	a3, a3, 0, 7
  90ee12:	9343      	s32i.n	a3, a4, 12
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90ee14:	234102        	l16ui	a3, a4, 4
  90ee17:	b133      	addi.n	a3, a3, 1
  90ee19:	03034b        	extui	a3, a3, 0, 12
  90ee1c:	234502        	s16i	a3, a4, 4
		bf = asf_tailq_next(bf, bf_list);
	}

	ath_aggr_pause_tid(sc, tid);

	while (tid->baw_head != tid->baw_tail) {
  90ee1f:	8343      	l32i.n	a3, a4, 12
  90ee21:	7939bc        	bne	a3, a9, 90ede1 <ath_tgt_tx_cleanup+0x61>
		}
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
	}

	if (!(tid->flag & TID_CLEANUP_INPROGRES)) {
  90ee24:	234036        	l8ui	a3, a4, 54
  90ee27:	7f3f06        	bbsi	a3, 31, 90ee31 <ath_tgt_tx_cleanup+0xb1>
		ath_aggr_resume_tid(sc, tid);
  90ee2a:	da20      	mov.n	a10, a2
  90ee2c:	db40      	mov.n	a11, a4
  90ee2e:	5bfe50        	call8	90e770 <ath_aggr_resume_tid>
  90ee31:	d10f      	retw.n
	...

0090ee34 <ath_bar_tx_comp>:
	ath_tx_set_retry(sc, bf);
	ath_tgt_txq_add_ucast(sc, bf);
}

static void ath_bar_tx_comp(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90ee34:	6c1006        	entry	a1, 48
	struct ath_node_target *an;
	ath_atx_tid_t *tid;
	struct ath_txq *txq;

	an = (struct ath_node_target *)bf->bf_node;
	tid = &an->tid[bf->bf_tidno];
  90ee37:	25304d        	l8ui	a5, a3, 77
	ath_tgt_txq_add_ucast(sc, bf);
}

static void ath_bar_tx_comp(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds = bf->bf_lastds;
  90ee3a:	883e      	l32i.n	a8, a3, 56
	struct ath_node_target *an;
	ath_atx_tid_t *tid;
	struct ath_txq *txq;

	an = (struct ath_node_target *)bf->bf_node;
	tid = &an->tid[bf->bf_tidno];
  90ee3c:	0c5911        	slli	a9, a5, 4
	struct ath_tx_desc *ds = bf->bf_lastds;
	struct ath_node_target *an;
	ath_atx_tid_t *tid;
	struct ath_txq *txq;

	an = (struct ath_node_target *)bf->bf_node;
  90ee3f:	8434      	l32i.n	a4, a3, 16
	tid = &an->tid[bf->bf_tidno];
	txq = TID_TO_ACTXQ(tid->tidno);

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90ee41:	268066        	l8ui	a6, a8, 102
	struct ath_node_target *an;
	ath_atx_tid_t *tid;
	struct ath_txq *txq;

	an = (struct ath_node_target *)bf->bf_node;
	tid = &an->tid[bf->bf_tidno];
  90ee44:	05990c        	sub	a9, a9, a5
  90ee47:	04990a        	addx4	a9, a9, a4
	txq = TID_TO_ACTXQ(tid->tidno);

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90ee4a:	060640        	extui	a6, a6, 0, 1
	struct ath_node_target *an;
	ath_atx_tid_t *tid;
	struct ath_txq *txq;

	an = (struct ath_node_target *)bf->bf_node;
	tid = &an->tid[bf->bf_tidno];
  90ee4d:	259c24        	addi	a5, a9, 36
  90ee50:	299c20        	addi	a9, a9, 32
	txq = TID_TO_ACTXQ(tid->tidno);

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90ee53:	6460bf        	beqz	a6, 90ef16 <ath_bar_tx_comp+0xe2>
static void ath_bar_retry(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);

	if (bf->bf_retries >= OWLMAX_BAR_RETRIES) {
  90ee56:	263086        	l8ui	a6, a3, 134
  90ee59:	c0a9      	movi.n	a10, 9
  90ee5b:	76ab5a        	bgeu	a10, a6, 90eeb9 <ath_bar_tx_comp+0x85>
		ath_tgt_delba_send(sc, bf->bf_node, tid->tidno, 1,
  90ee5e:	269007        	l8ui	a6, a9, 7
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, tidno);
	struct wmi_data_delba wmi_delba;

	tid->flag &= ~TID_AGGR_ENABLED;

	ath_tgt_tx_cleanup(sc, an, tid, 1);
  90ee61:	db40      	mov.n	a11, a4
			       struct ieee80211_node_target *ni,
			       a_uint8_t tidno, a_uint8_t initiator,
			       a_uint16_t reasoncode)
{
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, tidno);
  90ee63:	0c6811        	slli	a8, a6, 4
  90ee66:	06860c        	sub	a6, a8, a6
  90ee69:	04660a        	addx4	a6, a6, a4
  90ee6c:	2c6c24        	addi	a12, a6, 36
	struct wmi_data_delba wmi_delba;

	tid->flag &= ~TID_AGGR_ENABLED;
  90ee6f:	29c036        	l8ui	a9, a12, 54
  90ee72:	c78d      	movi.n	a8, -3
  90ee74:	089801        	and	a8, a9, a8
  90ee77:	28c436        	s8i	a8, a12, 54

	ath_tgt_tx_cleanup(sc, an, tid, 1);
  90ee7a:	da20      	mov.n	a10, a2
  90ee7c:	c0d1      	movi.n	a13, 1
  90ee7e:	5bffc0        	call8	90ed80 <ath_tgt_tx_cleanup>

	wmi_delba.ni_nodeindex = ni->ni_nodeindex;
  90ee81:	24400c        	l8ui	a4, a4, 12
	wmi_delba.tidno = tid->tidno;
	wmi_delba.initiator = 1;
	wmi_delba.reasoncode = IEEE80211_REASON_UNSPECIFIED;

	__stats(sc, txbar_xretry);
	wmi_event(sc->tgt_wmi_handle,
  90ee84:	1b6b12        	l32r	a11, 8e9acc <memset+0x2c84>

	tid->flag &= ~TID_AGGR_ENABLED;

	ath_tgt_tx_cleanup(sc, an, tid, 1);

	wmi_delba.ni_nodeindex = ni->ni_nodeindex;
  90ee87:	241400        	s8i	a4, a1, 0
	wmi_delba.tidno = tid->tidno;
  90ee8a:	8469      	l32i.n	a4, a6, 36
	wmi_delba.initiator = 1;
	wmi_delba.reasoncode = IEEE80211_REASON_UNSPECIFIED;

	__stats(sc, txbar_xretry);
	wmi_event(sc->tgt_wmi_handle,
  90ee8c:	8a23      	l32i.n	a10, a2, 12
	tid->flag &= ~TID_AGGR_ENABLED;

	ath_tgt_tx_cleanup(sc, an, tid, 1);

	wmi_delba.ni_nodeindex = ni->ni_nodeindex;
	wmi_delba.tidno = tid->tidno;
  90ee8e:	241401        	s8i	a4, a1, 1
	wmi_delba.initiator = 1;
  90ee91:	c041      	movi.n	a4, 1
  90ee93:	241402        	s8i	a4, a1, 2
	wmi_delba.reasoncode = IEEE80211_REASON_UNSPECIFIED;
  90ee96:	241403        	s8i	a4, a1, 3

	__stats(sc, txbar_xretry);
  90ee99:	242279        	l32i	a4, a2, 0x1e4
	wmi_event(sc->tgt_wmi_handle,
  90ee9c:	dc10      	mov.n	a12, a1
	wmi_delba.ni_nodeindex = ni->ni_nodeindex;
	wmi_delba.tidno = tid->tidno;
	wmi_delba.initiator = 1;
	wmi_delba.reasoncode = IEEE80211_REASON_UNSPECIFIED;

	__stats(sc, txbar_xretry);
  90ee9e:	b144      	addi.n	a4, a4, 1
  90eea0:	242679        	s32i	a4, a2, 0x1e4
	wmi_event(sc->tgt_wmi_handle,
  90eea3:	c0d4      	movi.n	a13, 4
  90eea5:	5be51d        	call8	90831c <wmi_event>
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);

	if (bf->bf_retries >= OWLMAX_BAR_RETRIES) {
		ath_tgt_delba_send(sc, bf->bf_node, tid->tidno, 1,
				   IEEE80211_REASON_UNSPECIFIED);
		ath_tgt_tid_drain(sc, tid);
  90eea8:	da20      	mov.n	a10, a2
  90eeaa:	db50      	mov.n	a11, a5

		bf->bf_comp = NULL;
  90eeac:	c040      	movi.n	a4, 0
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);

	if (bf->bf_retries >= OWLMAX_BAR_RETRIES) {
		ath_tgt_delba_send(sc, bf->bf_node, tid->tidno, 1,
				   IEEE80211_REASON_UNSPECIFIED);
		ath_tgt_tid_drain(sc, tid);
  90eeae:	5bfb1e        	call8	90db28 <ath_tgt_tid_drain>
			       struct ieee80211_node_target *ni,
			       a_uint8_t tidno, a_uint8_t initiator,
			       a_uint16_t reasoncode)
{
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, tidno);
  90eeb1:	266c20        	addi	a6, a6, 32
	if (bf->bf_retries >= OWLMAX_BAR_RETRIES) {
		ath_tgt_delba_send(sc, bf->bf_node, tid->tidno, 1,
				   IEEE80211_REASON_UNSPECIFIED);
		ath_tgt_tid_drain(sc, tid);

		bf->bf_comp = NULL;
  90eeb4:	943f      	s32i.n	a4, a3, 60
  90eeb6:	600065        	j	90ef1f <ath_bar_tx_comp+0xeb>
		ath_buf_comp(sc, bf);
		return;
	}

	__stats(sc, txbar_compretries);
  90eeb9:	24227a        	l32i	a4, a2, 0x1e8
  90eebc:	b144      	addi.n	a4, a4, 1
  90eebe:	24267a        	s32i	a4, a2, 0x1e8

	if (!bf->bf_lastds->ds_link) {
  90eec1:	268000        	l8ui	a6, a8, 0
  90eec4:	258001        	l8ui	a5, a8, 1
  90eec7:	248002        	l8ui	a4, a8, 2
  90eeca:	086610        	slli	a6, a6, 24
  90eecd:	005511        	slli	a5, a5, 16
  90eed0:	065502        	or	a5, a5, a6
  90eed3:	084411        	slli	a4, a4, 8
  90eed6:	054402        	or	a4, a4, a5
  90eed9:	258003        	l8ui	a5, a8, 3
  90eedc:	045402        	or	a4, a5, a4
  90eedf:	cd43      	bnez.n	a4, 90eef6 <ath_bar_tx_comp+0xc2>
		__stats(sc, txbar_errlast);
  90eee1:	24227b        	l32i	a4, a2, 0x1ec
		bf = ath_buf_toggle(sc, bf, 1);
  90eee4:	db30      	mov.n	a11, a3
	}

	__stats(sc, txbar_compretries);

	if (!bf->bf_lastds->ds_link) {
		__stats(sc, txbar_errlast);
  90eee6:	b144      	addi.n	a4, a4, 1
  90eee8:	24267b        	s32i	a4, a2, 0x1ec
		bf = ath_buf_toggle(sc, bf, 1);
  90eeeb:	022a02        	or	a10, a2, a2
  90eeee:	2c0a01        	movi	a12, 1
  90eef1:	5bf966        	call8	90d48c <ath_buf_toggle>
  90eef4:	d3a0      	mov.n	a3, a10
	}

	bf->bf_lastds->ds_link = 0;
  90eef6:	843e      	l32i.n	a4, a3, 56
  90eef8:	c080      	movi.n	a8, 0

	ath_tx_set_retry(sc, bf);
  90eefa:	da20      	mov.n	a10, a2
  90eefc:	db30      	mov.n	a11, a3
	if (!bf->bf_lastds->ds_link) {
		__stats(sc, txbar_errlast);
		bf = ath_buf_toggle(sc, bf, 1);
	}

	bf->bf_lastds->ds_link = 0;
  90eefe:	284400        	s8i	a8, a4, 0
  90ef01:	284401        	s8i	a8, a4, 1
  90ef04:	284402        	s8i	a8, a4, 2
  90ef07:	284403        	s8i	a8, a4, 3

	ath_tx_set_retry(sc, bf);
  90ef0a:	5bfa30        	call8	90d7cc <ath_tx_set_retry>
	ath_tgt_txq_add_ucast(sc, bf);
  90ef0d:	da20      	mov.n	a10, a2
  90ef0f:	db30      	mov.n	a11, a3
  90ef11:	5bf805        	call8	90cf28 <ath_tgt_txq_add_ucast>
  90ef14:	d10f      	retw.n
	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
		ath_bar_retry(sc, bf);
		return;
	}

	ath_aggr_resume_tid(sc, tid);
  90ef16:	da20      	mov.n	a10, a2
  90ef18:	db50      	mov.n	a11, a5
  90ef1a:	5bfe15        	call8	90e770 <ath_aggr_resume_tid>

	bf->bf_comp = NULL;
  90ef1d:	963f      	s32i.n	a6, a3, 60
	ath_buf_comp(sc, bf);
  90ef1f:	da20      	mov.n	a10, a2
  90ef21:	db30      	mov.n	a11, a3
  90ef23:	5bf9bf        	call8	90d620 <ath_buf_comp>
  90ef26:	d10f      	retw.n

0090ef28 <ath_pci_suspend>:
	adf_os_free_intr(sc->sc_dev);
}

static void
ath_pci_suspend(adf_drv_handle_t hdl, adf_os_pm_t pm)
{
  90ef28:	6c1004        	entry	a1, 32
  90ef2b:	d10f      	retw.n
  90ef2d:	000000        	ill

0090ef30 <ath_pci_resume>:
}

static void
ath_pci_resume(adf_drv_handle_t hdl)
{
  90ef30:	6c1004        	entry	a1, 32
  90ef33:	d10f      	retw.n
  90ef35:	000000        	ill

0090ef38 <ath_pci_remove>:
	return NULL;
}

static void
ath_pci_remove(adf_drv_handle_t hdl)
{
  90ef38:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = hdl;

	ath_detach((struct ath_softc_tgt *)hdl);
  90ef3b:	da20      	mov.n	a10, a2
  90ef3d:	5beaf6        	call8	909b18 <ath_detach>
}

static inline void
adf_os_free_intr(adf_os_device_t osdev)
{
    __adf_os_free_intr(osdev);
  90ef40:	2a2246        	l32i	a10, a2, 0x118
  90ef43:	5bef7a        	call8	90ad2c <__adf_os_free_intr>
  90ef46:	d10f      	retw.n

0090ef48 <init_ath_pci>:

static adf_drv_info_t ath_drv_info = adf_os_pci_set_drv_info(ath_pci_tgt,&ath_pci_id_table[0], ath_pci_probe, ath_pci_remove, ath_pci_suspend, ath_pci_resume);

a_int32_t
init_ath_pci(void)
{
  90ef48:	6c1004        	entry	a1, 32
 * @return status of operation
 */
static inline a_status_t 
adf_net_register_drv(adf_drv_info_t *drv)
{
    return(__adf_net_register_drv(drv));
  90ef4b:	1a6b13        	l32r	a10, 8e9b98 <memset+0x2d50>
  90ef4e:	580063        	call8	90f0dc <__adf_net_register_drv>
	return adf_net_register_drv( &ath_drv_info );
}
  90ef51:	d2a0      	mov.n	a2, a10
  90ef53:	d10f      	retw.n
  90ef55:	000000        	ill

0090ef58 <ath_pci_probe>:
a_int32_t init_ath_pci(void);

static adf_drv_handle_t
ath_pci_probe(adf_os_resource_t *res,a_int32_t count, adf_os_attach_data_t *data,
	      adf_os_device_t osdev)
{
  90ef58:	6c1004        	entry	a1, 32
}

static inline int 
__adf_os_pci_config_write8(adf_os_device_t osdev, int offset, a_uint8_t val)
{
    wlan_pci_config_write(offset, val, 1);
  90ef5b:	c2b0      	movi.n	a11, 32
  90ef5d:	c0c1      	movi.n	a12, 1
  90ef5f:	c0ac      	movi.n	a10, 12
  90ef61:	5beafe        	call8	909b5c <wlan_pci_config_write>
  90ef64:	2b0aa8        	movi	a11, 168
  90ef67:	2c0a01        	movi	a12, 1
  90ef6a:	2a0a0d        	movi	a10, 13
  90ef6d:	5beafb        	call8	909b5c <wlan_pci_config_write>
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  90ef70:	166913        	l32r	a6, 8e93bc <memset+0x2574>
  90ef73:	136b14        	l32r	a3, 8e9bc4 <memset+0x2d7c>
  90ef76:	226252        	l32i	a2, a6, 0x148
  90ef79:	c0a0      	movi.n	a10, 0
  90ef7b:	db30      	mov.n	a11, a3
  90ef7d:	0b2000        	callx8	a2
  90ef80:	d2a0      	mov.n	a2, a10
	adf_os_pci_config_write8(osdev, ATH_PCI_CACHE_LINE_SIZE, csz);
	adf_os_pci_config_write8(osdev, ATH_PCI_LATENCY_TIMER, 0xa8);

	sc = adf_os_mem_alloc(sizeof(struct ath_pci_softc));

	if (sc == NULL) {
  90ef82:	ccaa      	bnez.n	a10, 90ef90 <ath_pci_probe+0x38>
		adf_os_print("ath_pci: no memory for device state\n");
  90ef84:	236212        	l32i	a3, a6, 72
  90ef87:	1a6b15        	l32r	a10, 8e9bdc <memset+0x2d94>
  90ef8a:	0b3000        	callx8	a3
  90ef8d:	d10f      	retw.n
  90ef8f:	008864        	excw

/* set a memory buffer */
static inline void
__adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
	A_MEMSET(buf, b, size);
  90ef92:	dc30      	mov.n	a12, a3
  90ef94:	c0b0      	movi.n	a11, 0
  90ef96:	0b8000        	callx8	a8

	/*
	 * Mark the device as detached to avoid processing
	 * interrupts until setup is complete.
	 */
	sc->aps_sc.sc_invalid = 1;
  90ef99:	232d01        	addmi	a3, a2, 0x100
  90ef9c:	293024        	l8ui	a9, a3, 36
  90ef9f:	28fa80        	movi	a8, -128
  90efa2:	089802        	or	a8, a9, a8
  90efa5:	283424        	s8i	a8, a3, 36

	adf_os_print("ath_pci_probe %x\n",id->device);
  90efa8:	2b4201        	l32i	a11, a4, 4
  90efab:	266212        	l32i	a6, a6, 72
  90efae:	1a6b16        	l32r	a10, 8e9c08 <memset+0x2dc0>
  90efb1:	0b6000        	callx8	a6

	if (ath_tgt_attach(id->device, &sc->aps_sc, osdev) != 0)
  90efb4:	8a41      	l32i.n	a10, a4, 4
  90efb6:	db20      	mov.n	a11, a2
  90efb8:	dc50      	mov.n	a12, a5
  90efba:	5be9c1        	call8	9096c0 <ath_tgt_attach>
  90efbd:	cda1      	bnez.n	a10, 90efd2 <ath_pci_probe+0x7a>
		goto bad3;

	/* ready to process interrupts */
	sc->aps_sc.sc_invalid = 0;
  90efbf:	243024        	l8ui	a4, a3, 36
#include <adf_os_irq_pvt.h>

static inline int
adf_os_setup_intr(adf_os_device_t  osdev, adf_os_drv_intr fn)
{
    return __adf_os_setup_intr(osdev, fn);
  90efc2:	1b6a20        	l32r	a11, 8e9844 <memset+0x29fc>
  90efc5:	040446        	extui	a4, a4, 0, 7
  90efc8:	243424        	s8i	a4, a3, 36
  90efcb:	da50      	mov.n	a10, a5
  90efcd:	5bef54        	call8	90ad20 <__adf_os_setup_intr>
  90efd0:	d10f      	retw.n
	adf_os_setup_intr(osdev, ath_intr);
	return (adf_drv_handle_t)sc;
bad3:
bad2:
	return NULL;
  90efd2:	c020      	movi.n	a2, 0
}
  90efd4:	d10f      	retw.n
	...

0090efd8 <exit_ath_pci>:
	return adf_net_register_drv( &ath_drv_info );
}

void
exit_ath_pci(void)
{
  90efd8:	6c1004        	entry	a1, 32
 * @see adf_net_register_drv()
 */
static inline void
adf_net_unregister_drv(a_uint8_t *drv_name)
{
    __adf_net_unregister_drv(drv_name);
  90efdb:	1a6b17        	l32r	a10, 8e9c38 <memset+0x2df0>
  90efde:	580042        	call8	90f0e8 <__adf_net_unregister_drv>
  90efe1:	d10f      	retw.n
	...

0090efe4 <ar5416AttachRateTables>:

#endif //#ifdef MAGPIE_MERLIN // MAGPIE_MERLIN 

void
ar5416AttachRateTables(struct atheros_softc *sc)
{
  90efe4:	6c1004        	entry	a1, 32
    sc->hwRateTable[WIRELESS_MODE_11NG]  = &ar5416_11ngRateTable;
  90efe7:	186b18        	l32r	a8, 8e9c48 <memset+0x2e00>
  90efea:	9822      	s32i.n	a8, a2, 8
#ifdef ATH_SUPPORT_A_MODE
    sc->hwRateTable[WIRELESS_MODE_11NA]  = &ar5416_11naRateTable;
  90efec:	186b19        	l32r	a8, 8e9c50 <memset+0x2e08>
  90efef:	9821      	s32i.n	a8, a2, 4
  90eff1:	d10f      	retw.n
	...

0090eff4 <io32_rmw>:
	iowrite8(addr, val);
}

static inline void io32_rmw(volatile uint32_t addr,
			    const uint32_t set, const uint32_t clr)
{
  90eff4:	6c1006        	entry	a1, 48
  90eff7:	0c0200        	memw
  90effa:	9210      	s32i.n	a2, a1, 0
	uint32_t val;

	val = ioread32(addr);
  90effc:	0c0200        	memw
  90efff:	8810      	l32i.n	a8, a1, 0
	val &= ~clr;
  90f001:	c79f      	movi.n	a9, -1
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90f003:	0c0200        	memw
  90f006:	8880      	l32i.n	a8, a8, 0
			    const uint32_t set, const uint32_t clr)
{
	uint32_t val;

	val = ioread32(addr);
	val &= ~clr;
  90f008:	049403        	xor	a4, a9, a4
  90f00b:	084801        	and	a8, a4, a8
	val |= set;
	iowrite32(addr, val);
  90f00e:	0c0200        	memw
  90f011:	8a10      	l32i.n	a10, a1, 0
{
	uint32_t val;

	val = ioread32(addr);
	val &= ~clr;
	val |= set;
  90f013:	038302        	or	a3, a8, a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90f016:	0c0200        	memw
  90f019:	93a0      	s32i.n	a3, a10, 0
  90f01b:	d10f      	retw.n
  90f01d:	000000        	ill

0090f020 <ieee80211_tgt_crypto_encap>:

a_status_t
ieee80211_tgt_crypto_encap(struct ieee80211_frame *wh,
			   struct ieee80211_node_target *ni,
			   a_uint8_t keytype)
{
  90f020:	6c1004        	entry	a1, 32
	a_uint16_t tmp;
	a_uint16_t offset = IEEE80211_WLAN_HDR_LEN;
	a_uint8_t b1, b2;
	struct ieee80211_qosframe_addr4 *wh_mesh;

	if (IEEE80211_QOS_HAS_SEQ(wh))
  90f023:	2a2000        	l8ui	a10, a2, 0
  90f026:	280a8c        	movi	a8, 140
  90f029:	08aa01        	and	a10, a10, a8
#define CRYPTO_KEY_TYPE_WAPI         4
#define IEEE80211_WLAN_HDR_LEN      24

	a_uint8_t *iv = NULL;
	a_uint16_t tmp;
	a_uint16_t offset = IEEE80211_WLAN_HDR_LEN;
  90f02c:	290a88        	movi	a9, 136
  90f02f:	09aa0c        	sub	a10, a10, a9
  90f032:	c188      	movi.n	a8, 24
  90f034:	c19c      	movi.n	a9, 28
  90f036:	0a9838        	moveqz	a8, a9, a10
	if (IEEE80211_QOS_HAS_SEQ(wh))
		offset += 4;  // pad for 4 byte alignment

	/* set the offset to 32 if the mesh control field is present */
	wh_mesh = (struct ieee80211_qosframe_addr4 *)wh;
	if (wh_mesh->i_qos[1] == 0x01)
  90f039:	2a201f        	l8ui	a10, a2, 31
		offset = 32;
  90f03c:	c290      	movi.n	a9, 32
  90f03e:	b0aa      	addi.n	a10, a10, -1
  90f040:	0a9838        	moveqz	a8, a9, a10

a_status_t
ieee80211_tgt_crypto_encap(struct ieee80211_frame *wh,
			   struct ieee80211_node_target *ni,
			   a_uint8_t keytype)
{
  90f043:	040447        	extui	a4, a4, 0, 8
	wh_mesh = (struct ieee80211_qosframe_addr4 *)wh;
	if (wh_mesh->i_qos[1] == 0x01)
		offset = 32;

	iv = (a_uint8_t *) wh;
	iv = iv + offset;
  90f046:	a822      	add.n	a2, a2, a8

	switch (keytype) {
  90f048:	684209        	beqi	a4, 2, 90f055 <ieee80211_tgt_crypto_encap+0x35>
  90f04b:	684302        	beqi	a4, 3, 90f051 <ieee80211_tgt_crypto_encap+0x31>
  90f04e:	600083        	j	90f0d5 <ieee80211_tgt_crypto_encap+0xb5>
  90f051:	600032        	j	90f087 <ieee80211_tgt_crypto_encap+0x67>
  90f054:	002831        	excw
	case CRYPTO_KEY_TYPE_AES:
		ni->ni_iv16++;
  90f057:	0db188        	excw
  90f05a:	08084f        	extui	a8, a8, 0, 16
  90f05d:	28350d        	s16i	a8, a3, 26
		if (ni->ni_iv16 == 0)
  90f060:	cc84      	bnez.n	a8, 90f068 <ieee80211_tgt_crypto_encap+0x48>
		{
			ni->ni_iv32++;
  90f062:	8437      	l32i.n	a4, a3, 28
  90f064:	b144      	addi.n	a4, a4, 1
  90f066:	9437      	s32i.n	a4, a3, 28
		}

		*iv++ = (a_uint8_t) ni->ni_iv16;
  90f068:	282400        	s8i	a8, a2, 0
		*iv++ = (a_uint8_t) (ni->ni_iv16 >> 8);
  90f06b:	24310d        	l16ui	a4, a3, 26
		*iv++ = 0x00;
		*iv++ |= 0x20;
  90f06e:	282003        	l8ui	a8, a2, 3
		{
			ni->ni_iv32++;
		}

		*iv++ = (a_uint8_t) ni->ni_iv16;
		*iv++ = (a_uint8_t) (ni->ni_iv16 >> 8);
  90f071:	048414        	srli	a4, a4, 8
  90f074:	242401        	s8i	a4, a2, 1
		*iv++ = 0x00;
  90f077:	c040      	movi.n	a4, 0
  90f079:	242402        	s8i	a4, a2, 2
		*iv++ |= 0x20;
  90f07c:	c240      	movi.n	a4, 32
  90f07e:	048402        	or	a4, a8, a4
  90f081:	242403        	s8i	a4, a2, 3
  90f084:	600036        	j	90f0be <ieee80211_tgt_crypto_encap+0x9e>
		tmp = (a_uint16_t) (ni->ni_iv32 >> 16);
		*iv++ = (a_uint8_t) tmp;
		*iv = (a_uint8_t) (tmp >> 8);
		break;
	case CRYPTO_KEY_TYPE_TKIP:
		ni->ni_iv16++;
  90f087:	28310d        	l16ui	a8, a3, 26
  90f08a:	b188      	addi.n	a8, a8, 1
  90f08c:	08084f        	extui	a8, a8, 0, 16
  90f08f:	28350d        	s16i	a8, a3, 26
		if (ni->ni_iv16 == 0)
  90f092:	cc86      	bnez.n	a8, 90f09c <ieee80211_tgt_crypto_encap+0x7c>
		{
			ni->ni_iv32++;
  90f094:	243207        	l32i	a4, a3, 28
  90f097:	b144      	addi.n	a4, a4, 1
  90f099:	243607        	s32i	a4, a3, 28
		}

		b1 = (a_uint8_t) (ni->ni_iv16 >> 8);
  90f09c:	088814        	srli	a8, a8, 8
		b2 = (b1 | 0x20) & 0x7f;
  90f09f:	c54f      	movi.n	a4, 95
		if (ni->ni_iv16 == 0)
		{
			ni->ni_iv32++;
		}

		b1 = (a_uint8_t) (ni->ni_iv16 >> 8);
  90f0a1:	282400        	s8i	a8, a2, 0
		b2 = (b1 | 0x20) & 0x7f;
  90f0a4:	c290      	movi.n	a9, 32
  90f0a6:	048801        	and	a8, a8, a4
  90f0a9:	098802        	or	a8, a8, a9
  90f0ac:	282401        	s8i	a8, a2, 1

		*iv++ = b1;
		*iv++ = b2;

		*iv++ = (a_uint8_t) ni->ni_iv16;
  90f0af:	24310d        	l16ui	a4, a3, 26
  90f0b2:	242402        	s8i	a4, a2, 2
		*iv++ |= 0x20;
  90f0b5:	242003        	l8ui	a4, a2, 3
  90f0b8:	094902        	or	a9, a4, a9
  90f0bb:	292403        	s8i	a9, a2, 3

		tmp = (a_uint16_t) ni->ni_iv32;
  90f0be:	8837      	l32i.n	a8, a3, 28
		*iv++ = (a_uint8_t) tmp;
  90f0c0:	282404        	s8i	a8, a2, 4
		*iv++ = (a_uint8_t) (tmp >> 8);
  90f0c3:	088847        	extui	a8, a8, 8, 8
  90f0c6:	282405        	s8i	a8, a2, 5

		tmp = (a_uint16_t) (ni->ni_iv32 >> 16);
  90f0c9:	23310e        	l16ui	a3, a3, 28
		*iv++ = (a_uint8_t) tmp;
  90f0cc:	232406        	s8i	a3, a2, 6
		*iv = (a_uint8_t) (tmp >> 8);
  90f0cf:	038314        	srli	a3, a3, 8
  90f0d2:	232407        	s8i	a3, a2, 7

#undef CRYPTO_KEY_TYPE_TKIP
#undef CRYPTO_KEY_TYPE_AES
#undef CRYPTO_KEY_TYPE_WAPI
#undef IEEE80211_WLAN_HDR_LEN
}
  90f0d5:	c021      	movi.n	a2, 1
  90f0d7:	d10f      	retw.n
  90f0d9:	000000        	ill

0090f0dc <__adf_net_register_drv>:
 * 
 * @return a_status_t
 */
a_status_t
__adf_net_register_drv(adf_drv_info_t *drv)
{
  90f0dc:	6c1004        	entry	a1, 32
    wlan_pci_register_drv(drv);    
  90f0df:	da20      	mov.n	a10, a2
  90f0e1:	5bea9b        	call8	909b50 <wlan_pci_register_drv>
    return A_STATUS_OK;
}
  90f0e4:	c020      	movi.n	a2, 0
  90f0e6:	d10f      	retw.n

0090f0e8 <__adf_net_unregister_drv>:
 * @brief unregister the driver from the shim
 * @param[in] name
 */
void
__adf_net_unregister_drv(a_uint8_t *name)
{
  90f0e8:	6c1004        	entry	a1, 32
  90f0eb:	d10f      	retw.n
