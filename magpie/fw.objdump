
../ath9k-htc-firmware-blob/magpie/fw.elf:     Dateiformat elf32-xtensa-be
../ath9k-htc-firmware-blob/magpie/fw.elf
Architektur: xtensa, Flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
Startadresse 0x00906000

Xtensa header:

Machine     = Base
Insn tables = true
Literal tables = true

Programm-Header:
    LOAD off    0x00501000 vaddr 0x00501000 paddr 0x00501000 align 2**29
         filesz 0x00001c70 memsz 0x00001c70 flags r--
    LOAD off    0x00510d00 vaddr 0x00510d00 paddr 0x00510d00 align 2**29
         filesz 0x00001f68 memsz 0x00002210 flags rw-
    LOAD off    0x00906000 vaddr 0x00906000 paddr 0x00906000 align 2**29
         filesz 0x000090fd memsz 0x000090fd flags r-x

Sektionen:
Idx Name          Größe     VMA       LMA       Datei-Off Ausr.
  0 .lit4         00019000  004e8000  004e8000  00000000  2**0
                  ALLOC
  1 .rodata       00001440  00501000  00501000  00501000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .literals     00000830  00502440  00502440  00502440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00001f68  00510d00  00510d00  00510d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000002a8  00512c68  00512c68  00512c68  2**2
                  ALLOC
  5 .boot         0000027c  00906000  00906000  00906000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text         00008e81  0090627c  0090627c  0090627c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .debug_aranges 00000348  00000000  00000000  0090f0fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0005bfda  00000000  00000000  0090f445  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005ed7  00000000  00000000  0096b41f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0001170c  00000000  00000000  009712f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001fb8  00000000  00000000  00982a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00008628  00000000  00000000  009849bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000eb45  00000000  00000000  0098cfe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .xt.prop      00004fe0  00000000  00000000  0099bb29  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 000017d0  00000000  00000000  009a0b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000006d  00000000  00000000  009a22d9  2**0
                  CONTENTS, READONLY
 17 .xtensa.info  00000038  00000000  00000000  009a2346  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
004e8000 l    d  .lit4	00000000 .lit4
00501000 l    d  .rodata	00000000 .rodata
00502440 l    d  .literals	00000000 .literals
00510d00 l    d  .data	00000000 .data
00512c68 l    d  .bss	00000000 .bss
00906000 l    d  .boot	00000000 .boot
0090627c l    d  .text	00000000 .text
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .xt.prop	00000000 .xt.prop
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .xtensa.info	00000000 .xtensa.info
00000000 l    df *ABS*	00000000 magpie.c
00501000 l     O .rodata	0000000d __FUNCTION__$3859
00000000 l    df *ABS*	00000000 adf_nbuf.c
00501010 l     O .rodata	00000010 __FUNCTION__$4966
00501020 l     O .rodata	0000001c __FUNCTION__$4971
0050103c l     O .rodata	0000001c __FUNCTION__$4976
00501058 l     O .rodata	00000012 __FUNCTION__$4982
00501084 l     O .rodata	00000010 __FUNCTION__$5011
00501094 l     O .rodata	00000013 __FUNCTION__$5016
005010a8 l     O .rodata	00000014 __FUNCTION__$5029
005010bc l     O .rodata	0000001b __FUNCTION__$5086
005010d8 l     O .rodata	00000019 __FUNCTION__$5099
0050106c l     O .rodata	00000015 __FUNCTION__$5006
00000000 l    df *ABS*	00000000 dbg_api.c
00906dd8 l     F .text	00000011 db_incorect_format
00906dec l     F .text	00000028 zf_debug_init
00906e14 l     F .text	00000066 db_ascii_to_hex
00906e7c l     F .text	00000037 db_hex_to_ascii
00906eb4 l     F .text	0000003b db_help_cmd
00906ef0 l     F .text	00000013 db_cmd_starthtc
00906f04 l     F .text	0000005c db_cmd_memcmp
00906f60 l     F .text	000000a8 db_cmd_memdump
00907008 l     F .text	000000c0 db_str_cmd
009070c8 l     F .text	00000083 db_ldr_cmd
0090714c l     F .text	000000dd db_intr_cmd
0090722c l     F .text	0000014a db_wdt_cmd
00907378 l     F .text	00000036 db_usb_cmd
009073b0 l     F .text	00000024 db_info_cmd
009073d4 l     F .text	00000264 zf_debug_task
00907674 l     F .text	0000006f db_clock_cmd
00000000 l    df *ABS*	00000000 usb_api_main_patch.c
00510d00 l     O .data	00000002 cmd_is_new$3834
00512c80 l     O .bss	00000004 evntbuf$3832
00512c84 l     O .bss	00000004 regaddr$3833
00512c88 l     O .bss	00000002 buf_len$3831
00510d02 l     O .data	00000002 cmd_is_new$3853
00512c8c l     O .bss	00000004 buf$3851
00512c90 l     O .bss	00000002 cmd_len$3850
005011c0 l     O .rodata	00000012 __func__$3854
00512c94 l     O .bss	00000004 regaddr$3849
00000000 l    df *ABS*	00000000 if_ath.c
00907b5c l     F .text	00000014 __adf_os_mem_alloc
00907b70 l     F .text	00000013 __adf_os_mem_copy
00907b84 l     F .text	00000013 __adf_os_mem_set
00907b98 l     F .text	00000005 tgt_HTCRecv_uapsdhandler
00501258 l     O .rodata	00000019 __FUNCTION__$7595
00907ba0 l     F .text	0000001c dispatch_magpie_sys_cmds
00907bbc l     F .text	00000005 htc_setup_comp
0090801c l     F .text	00000130 tgt_HTCSendCompleteHandler
00907f50 l     F .text	00000070 tgt_ServiceConnect
00907bc4 l     F .text	0000002e tgt_reg_service
00907bf4 l     F .text	00000010 tgt_HTCRecv_mgmthandler
00907c04 l     F .text	000000c2 ath_tgt_rx_tasklet
00907cc8 l     F .text	00000098 ath_descdma_cleanup
00907d60 l     F .text	00000014 __adf_os_init_bh$isra$4
00907d74 l     F .text	00000010 __adf_os_sched_bh$isra$5
00907d84 l     F .text	00000194 ath_rxdesc_init
00512c9c l     O .bss	00000001 reset_pll$7404
00907f18 l     F .text	00000036 ath_pll_reset_ones$isra$9
005012a4 l     O .rodata	00000013 __FUNCTION__$7635
00907fc0 l     F .text	0000005c ath_reg_read_filter
0090814c l     F .text	0000004c ath_desc_free
005012c8 l     O .rodata	00000012 __FUNCTION__$7187
00908198 l     F .text	000000af ath_descdma_setup$constprop$22
00501274 l     O .rodata	0000001a __FUNCTION__$7146
00908248 l     F .text	000000aa tgt_HTCRecvMessageHandler
009082f4 l     F .text	0000003b tgt_HTCRecv_cabhandler
00908380 l     F .text	00000012 ath_fatal_tasklet
00908394 l     F .text	00000012 ath_bmiss_tasklet
00510d04 l     O .data	00000004 ath_numrxbufs
00501204 l     O .rodata	0000001a __FUNCTION__$7010
005011f8 l     O .rodata	0000000c __FUNCTION__$6952
00908b44 l     F .text	0000006a ath_hal_reg_rmw_tgt
00908bb0 l     F .text	00000084 ath_rc_mask_tgt
00908c34 l     F .text	00000023 ath_rx_stats_tgt
00908c58 l     F .text	00000042 ath_tx_stats_tgt
00908c9c l     F .text	00000032 ath_int_stats_tgt
00908cd0 l     F .text	00000062 ath_node_update_tgt
00908d34 l     F .text	0000002a ath_detach_tgt
00501220 l     O .rodata	00000014 __FUNCTION__$7326
00908d60 l     F .text	00000088 ath_enable_aggr_tgt
00908de8 l     F .text	0000002c ath_ic_update_tgt
00908e14 l     F .text	00000056 handle_rc_rate_update_cmd
00908e6c l     F .text	00000052 handle_rc_state_change_cmd
00908ec0 l     F .text	0000004a ath_hal_reg_write_tgt
00908f0c l     F .text	0000003f ath_hal_reg_read_tgt
00501234 l     O .rodata	00000013 __FUNCTION__$7349
00908f4c l     F .text	00000074 ath_vap_create_tgt
00908fc0 l     F .text	00000054 ath_vap_delete_tgt
00909014 l     F .text	0000002c ath_node_cleanup_tgt
00909040 l     F .text	00000097 ath_node_create_tgt
00501248 l     O .rodata	0000000f __FUNCTION__$6931
009090d8 l     F .text	00000078 ath_setcurmode_tgt
00909150 l     F .text	00000050 ath_flushrecv_tgt
009091a0 l     F .text	0000003a ath_stoprecv_tgt
009091dc l     F .text	00000086 ath_startrecv_tgt
00909264 l     F .text	000000c8 ath_draintxq_tgt
0090932c l     F .text	0000002e ath_tx_draintxq_tgt
0090935c l     F .text	00000023 ath_aborttx_dma_tgt
00909380 l     F .text	00000026 ath_stop_tx_dma_tgt
009093a8 l     F .text	00000040 ath_aborttxq_tgt
009093e8 l     F .text	0000004e ath_init_tgt
00909438 l     F .text	00000054 ath_enable_intr_tgt
0090948c l     F .text	00000026 ath_disable_intr_tgt
009094b4 l     F .text	0000001e ath_get_tgt_version
009094d4 l     F .text	00000013 handle_echo_command
00501290 l     O .rodata	00000014 __FUNCTION__$7070
00909500 l     F .text	000001d2 tgt_HTCRecv_beaconhandler
00510d0c l     O .data	00000100 Magpie_Sys_DispatchEntries
00510d08 l     O .data	00000004 ath_numrxdescs
005012b8 l     O .rodata	0000000f __FUNCTION__$7211
00000000 l    df *ABS*	00000000 htc.c
005012dc l     O .rodata	00000018 __FUNCTION__$4065
00000000 l    df *ABS*	00000000 wmi_svc.c
0090a434 l     F .text	0000000b WMIServiceConnect
0090a440 l     F .text	00000007 _WMI_GetPendingEventsCount
0090a448 l     F .text	00000007 _WMI_GetControlEp
0090a450 l     F .text	00000014 _WMI_RegisterDispatchTable
0090a464 l     F .text	00000005 _WMI_Shutdown
005012f4 l     O .rodata	00000016 __FUNCTION__$3864
0090a46c l     F .text	0000009e WMIRecvMessageHandler
0090a50c l     F .text	00000020 _WMI_SendCompleteHandler
0090a52c l     F .text	00000030 _WMI_AllocEvent
0090a55c l     F .text	00000036 _WMI_SendEvent
0090a594 l     F .text	0000006f _WMI_Init
00000000 l    df *ABS*	00000000 ar5416_hw.c
0050130c l     O .rodata	000000d4 ar5416hal_10
00000000 l    df *ABS*	00000000 ratectrl_11n_ln.c
0090c1bc l     F .text	000000c0 rcRateSetseries
0090c27c l     F .text	00000074 rcIsValidPhyRate
005013e0 l     O .rodata	00000028 nRetry2PerLookup$7250
0090c2f0 l     F .text	000001fe rcUpdate_ht$isra$4
0090c4f0 l     F .text	00000396 rcSibUpdate_ht$constprop$6
0090c888 l     F .text	0000002a ath_rate_newassoc_11n
00000000 l    df *ABS*	00000000 if_owl.c
0090ce8c l     F .text	00000013 __adf_os_mem_copy
0090cea0 l     F .text	0000004c ieee80211_anyhdrsize
0090ceec l     F .text	0000004b owl_tgt_tid_init
00501498 l     O .rodata	00000016 __FUNCTION__$7146
0090cf38 l     F .text	0000008b ath_tgt_txq_add_ucast
0090cfc4 l     F .text	0000006e ath_update_stats
0090d034 l     F .text	0000005e ath_tx_update_baw
0090d094 l     F .text	00000016 ath_dma_unmap
0090d0ac l     F .text	00000026 ath_tgt_skb_free
0090d0d4 l     F .text	000000a6 ath_filltxdesc
0090d17c l     F .text	0000004e ath_tx_tgt_setds
0090d1cc l     F .text	00000024 ath_tgt_tx_enqueue
0090d1f0 l     F .text	00000082 ath_update_aggr_stats$isra$2
0090d274 l     F .text	00000013 __adf_os_mem_set$constprop$13
00501430 l     O .rodata	00000040 bits_per_symbol
0090d288 l     F .text	000001fa ath_buf_set_rate
0090d484 l     F .text	00000017 ath_dma_map
00501408 l     O .rodata	0000000f __FUNCTION__$6945
0090d49c l     F .text	0000010d ath_buf_toggle
0090d5ac l     F .text	00000083 ath_tx_freebuf
0090d630 l     F .text	0000003c ath_buf_comp
0090ee44 l     F .text	000000f4 ath_bar_tx_comp
0090d66c l     F .text	0000015e ath_bar_tx
0090d7dc l     F .text	00000031 ath_tx_set_retry
0090d960 l     F .text	000000e0 ath_tx_retry_subframe
0090da40 l     F .text	000000ae ath_tx_comp_aggr_error
00501484 l     O .rodata	00000011 __FUNCTION__$7108
00501470 l     O .rodata	00000013 __FUNCTION__$7117
005014b0 l     O .rodata	00000011 __FUNCTION__$7227
005014c4 l     O .rodata	00000016 __FUNCTION__$7248
0090e818 l     F .text	0000004e ath_tgt_tx_comp_normal
005014f0 l     O .rodata	00000015 __FUNCTION__$7339
00501418 l     O .rodata	00000016 __FUNCTION__$7301
0090e574 l     F .text	0000020a ath_tgt_txq_schedule
0090e780 l     F .text	0000004a ath_aggr_resume_tid
0090e7cc l     F .text	0000004b owl_tgt_tid_cleanup
00501508 l     O .rodata	00000015 __FUNCTION__$7376
005014dc l     O .rodata	00000014 __FUNCTION__$7271
00000000 l    df *ABS*	00000000 app_start.c
0090f004 l     F .text	00000029 io32_rmw
00000000 l    df *ABS*	00000000 init.c
0090627c l     F .text	00000029 io32_rmw
00512c70 l     O .bss	00000004 loop_high
00512c74 l     O .bss	00000004 loop_low
00000000 l    df *ABS*	00000000 ah_osdep.c
00000000 l    df *ABS*	00000000 wlan_pci.c
00000000 l    df *ABS*	00000000 usb_api_magpie_patch.c
0090a63c l     F .text	00000029 io32_rmw
0090a668 l     F .text	00000068 _fw_restore_dma_fifo
0090a6d0 l     F .text	00000377 _fw_reset_dma_fifo
00000000 l    df *ABS*	00000000 if_ath_pci.c
0090ef38 l     F .text	00000005 ath_pci_suspend
0090ef40 l     F .text	00000005 ath_pci_resume
0090ef48 l     F .text	00000010 ath_pci_remove
00511bc0 l     O .data	00000020 ath_drv_info
0090ef68 l     F .text	0000007e ath_pci_probe
00511be0 l     O .data	00000160 ath_pci_id_table
00000000 l    df *ABS*	00000000 buf_pool_static.c
00000000 l    df *ABS*	00000000 cmnos_clock_patch.c
00512cbc l     O .bss	00000004 last_tick$3775
00000000 l    df *ABS*	00000000 HIF_usb_patch.c
00000000 l    df *ABS*	00000000 adf_os_dma.c
00000000 l    df *ABS*	00000000 adf_os_irq_pvt.c
00000000 l    df *ABS*	00000000 ah.c
00000000 l    df *ABS*	00000000 ar5416_phy.c
00000000 l    df *ABS*	00000000 adf_net.c
00000000 l    df *ABS*	00000000 ar5416Phy.c
00000000 l    df *ABS*	00000000 ieee80211_output.c
00000000 l    df *ABS*	00000000 
00500abc g       *ABS*	00000000 u16TxRxCounter
00906738 g     F .text	00000032 init_mem
00511388 g     O .data	000002bc ar5416_11g_table
008e37e8 g       *ABS*	00000000 HIFusb_DescTraceDump
0090ce0c g     F .text	00000036 ath_rate_tx_complete
004e8000 g       *ABS*	00000000 _rom_literal_start
00906554 g     F .text	00000054 zfGenWrongEpidEvent
00906a9c g     F .text	0000002b __adf_nbuf_dmamap_info
00512cf4 g     O .bss	000000a0 cmd_str
00510e0c g     O .data	00000002 bEepromExist
00907a58 g     F .text	00000078 bGet_descriptor_patch
0090db38 g     F .text	0000002d ath_tgt_tid_drain
00906be0 g     F .text	00000011 __adf_nbuf_last
00500ad0 g       *ABS*	00000000 u8UsbInterfaceValue
00906990 g     F .text	00000020 __adf_nbuf_copy
00512cc0 g     O .bss	00000004 _assfail_ori
00906a7c g     F .text	00000009 __adf_nbuf_map
00502440 g       *ABS*	00000000 _bss_table_end
0090f0ec g     F .text	0000000c __adf_net_register_drv
00512ca0 g     O .bss	00000004 g_wlan_intr
00906a60 g     F .text	0000001c __adf_nbuf_dmamap_create
0090ae04 g     F .text	00000052 ath_hal_get_curmode
00511d40 g     O .data	00000004 ar5416_11naRateTable
0090a16c g     F .text	0000009c HTCControlSvcProcessMsg
0051247c g     O .data	00000004 ar5416_11ngRateTable
00512d94 g     O .bss	00000002 gvLen
00909b54 g     F .text	0000000f wlan_pci_module_init
00500000 g       *ABS*	00000000 _indir_tbl
0090ad4c g     F .text	00000010 ath_hal_attach_tgt
00906db4 g     F .text	00000023 buf_pool_module_install
00501000 g       *ABS*	00000000 _lit4_end
00906c98 g     F .text	00000007 __adf_nbuf_is_cloned
00907880 g     F .text	00000107 usb_reg_out_patch
00906ac8 g     F .text	00000005 __adf_nbuf_set_rx_cksum
0090bc1c g     F .text	000000bc ar5416AbortTxDma
00512d98 g     O .bss	00000004 cmd_buf_ptr
0090f0fd g       *ABS*	00000000 _text_end
0090e868 g     F .text	00000376 ath_tgt_tx_comp_aggr
0090ac74 g     F .text	00000011 _HIFusb_isr_handler_patch
0090cdb0 g     F .text	0000002e ath_rate_attach
0090bb28 g     F .text	00000044 ar5416Set11nBurstDuration_20
009079cc g     F .text	00000022 vUsbFIFO_EPxCfg_FS_patch
00906ad8 g     F .text	000000a7 __adf_nbuf_create_frm_frag
00907750 g     F .text	00000022 cold_reboot
00501000 g       *ABS*	00000000 _lit4_start
009076fc g     F .text	0000000f cmnos_dbg_module_install
00502c70 g       *ABS*	00000000 _dram0_literal_end
0090a208 g     F .text	00000031 AdjustCreditThreshold
00502c70 g       *ABS*	00000000 _dram0_literal_start
0090ae58 g     F .text	00000029 ath_hal_wait
0090f0fd g       .text	00000000 _etext
0090bb6c g     F .text	0000006f ar5416Set11nVirtualMoreFrag_20
008e4f60 g       *ABS*	00000000 vbuf_module_install
00512c68 g     O .bss	00000004 idle_cnt
0090d810 g     F .text	00000043 owl_tgt_node_init
00907774 g     F .text	0000010a usb_status_in_patch
00909b64 g     F .text	0000000a wlan_pci_register_drv
00906938 g     F .text	0000002a __adf_nbuf_push_head
0090770c g     F .text	00000022 _fw_usbfifo_recv_command
0090eff4 g     F .text	0000000f ar5416AttachRateTables
00909d00 g     F .text	000000bf _HTC_Init
009068d8 g     F .text	0000001e __adf_nbuf_realloc_headroom
0090b958 g     F .text	00000089 ar5416Set11nAggrFirst_20
00906a94 g     F .text	00000005 __adf_nbuf_dmamap_destroy
0090de64 g     F .text	00000412 ath_tgt_send_mgt
0090c188 g     F .text	00000032 ar5416GetRateTable
00906cb8 g     F .text	0000000d __adf_nbuf_queue_init
008e6b64 g       *ABS*	00000000 memcpy
009076e4 g     F .text	00000016 dbg_timer_func
0090ce44 g     F .text	00000012 ath_rate_newassoc
00502440 g       *ABS*	00000000 _rodata_end
00906ad0 g     F .text	00000007 __adf_nbuf_get_vlan_info
0090cbb4 g     F .text	00000158 rcUpdate_11n
0090ad98 g     F .text	0000006b ath_hal_computetxtime
00500ad8 g       *ABS*	00000000 u8UsbDeviceDescriptor
0090cd0c g     F .text	000000a2 ath_tx_status_update_rate
00906cd0 g     F .text	00000007 __adf_nbuf_queue_first
00512cc4 g     O .bss	00000004 htc_handle
0090d7cc g     F .text	00000010 ATH_SKB_2_WH
0090f030 g     F .text	000000b9 ieee80211_tgt_crypto_encap
008e6a4c g       *ABS*	00000000 __udivsi3
00909e50 g     F .text	00000057 _HTC_Ready
00907ad0 g     F .text	00000010 ath_hal_getuptime
00906bf4 g     F .text	0000003b __adf_nbuf_trim_tail
00512c68 g       *ABS*	00000000 _bss_start
00510d00 g       *ABS*	00000000 _dram0_data_end
00511900 g     O .data	000002bc ar5416_11a_table
00909f50 g     F .text	00000062 ReturnBuffers
0090dde0 g     F .text	00000084 ath_tgt_tx_send_normal
00500ad2 g       *ABS*	00000000 u8UsbInterfaceAlternateSetting
00512c68 g       *ABS*	00000000 __XT_EXCEPTION_DESCS__
0090ecec g     F .text	000000a2 ath_tgt_handle_aggr
005010f4 g     O .rodata	000000cc command_table
0090627c g       *ABS*	00000000 _text_start
00907730 g     F .text	00000020 _fw_usbfifo_init
0090ebe0 g     F .text	0000009a owltgt_tx_processq
009068f8 g     F .text	0000001e __adf_nbuf_realloc_tailroom
0090e278 g     F .text	00000062 ath_tgt_handle_normal
0090b24c g     F .text	00000015 ar5416StartTxDma
0090bde8 g     F .text	00000059 ar5416SetRxFilter
00907b3c g     F .text	00000005 ath_hal_free
0090a23c g     F .text	00000156 _HTC_SendMsg
0090c110 g     F .text	00000077 ar5416Attach
00906c90 g     F .text	00000005 __adf_nbuf_cat
0090b238 g     F .text	00000012 ar5416SetTxDP
0090ce58 g     F .text	00000012 ath_rate_node_update
008e1548 g       *ABS*	00000000 generic_hif_module_install
00906c64 g     F .text	00000019 __adf_nbuf_tailroom
00906c88 g     F .text	00000007 __adf_nbuf_clone
008e4934 g       *ABS*	00000000 mUsbFIFOConfig
0090abf0 g     F .text	0000000a cmnos_clock_init_patch
008e36e4 g       *ABS*	00000000 _HIFusb_isr_handler
00906d10 g     F .text	00000057 _buf_pool_static_create_pool
00512d9c g     O .bss	00000028 raw_cmd
00906cc8 g     F .text	00000007 __adf_nbuf_queue_len
00501000 g       *ABS*	00000000 _dport0_literal_start
0090efe8 g     F .text	0000000b exit_ath_pci
00512f10 g       *ABS*	00000000 _bss_end
00906d08 g     F .text	00000005 _buf_pool_static_shutdown
0090b1d4 g     F .text	00000061 ar5416UpdateTxTrigLevel
00512cb4 g     O .bss	00000002 bJumptoFlash
00512cc8 g     O .bss	0000002c g_poolCtx
009069f8 g     F .text	00000020 __adf_nbuf_get_priv
00512cb0 g     O .bss	00000004 gpio_func
0090a0e8 g     F .text	00000082 HTCProcessConfigPipeMsg
00906d68 g     F .text	00000022 _buf_pool_static_alloc_buf
0090bcfc g     F .text	0000000a ar5416Detach
0090af48 g     F .text	0000000f ar5416EnableReceive
00500aa4 g       *ABS*	00000000 usbFifoConf
00500ab8 g       *ABS*	00000000 pu8DescriptorEX
0090abfc g     F .text	0000000a cmnos_refclk_speed_get_patch
0090b5d4 g     F .text	0000010c ar5416Set11nTxDesc_20
00510d00 g       *ABS*	00000000 _dram0_data_start
0090ef58 g     F .text	0000000d init_ath_pci
00511644 g     O .data	000002bc ar5416_11b_table
008e3a9c g       *ABS*	00000000 bGet_descriptor
0090b264 g     F .text	0000002b ar5416NumTxPending
009096d4 g     F .text	00000456 ath_tgt_attach
00909ca8 g     F .text	00000013 _HTC_GetReservedHeadroom
00906840 g     F .text	0000003c Magpie_init
00512c68 g       *ABS*	00000000 __XT_EXCEPTION_DESCS_END__
00906478 g     F .text	0000005e zfGenExceptionEvent
00906b80 g     F .text	00000060 __adf_nbuf_split_to_frag
0090a604 g     F .text	00000037 WMI_service_module_install
00906d8c g     F .text	00000010 _buf_pool_static_alloc_buf_align
00501000 g       *ABS*	00000000 _dport0_rodata_start
00510d00 g       *ABS*	00000000 _dport0_data_start
008e6958 g       *ABS*	00000000 xthal_get_ccount
00906918 g     F .text	0000001e __adf_nbuf_expand
0090ae9c g     F .text	00000083 ar5416SetInterrupts
009062f0 g     F .text	00000062 change_magpie_clk
0090af38 g     F .text	0000000d ar5416SetRxDP
0090d854 g     F .text	00000010 ath_tx_status_clear
00512ca4 g     O .bss	00000004 g_wlan_drv_handle
00909cbc g     F .text	0000002a HTCSendDoneHandler
0090aa48 g     F .text	00000079 _fw_usb_suspend_reboot
008e497c g       *ABS*	00000000 mUsbEPMxPtSzLow
0090af20 g     F .text	00000015 ar5416GetTsf64
00512cb8 g     O .bss	00000004 ref_clk
00909ea8 g     F .text	00000066 HTCCheckAndSendCreditReport
00500a98 g       *ABS*	00000000 ControlCmd
00510d00 g       *ABS*	00000000 _data_start
00500ace g       *ABS*	00000000 u8UsbConfigValue
00907b18 g     F .text	00000022 ath_hal_malloc
0090bcd8 g     F .text	00000021 ar5416StopDmaReceive
00909dc0 g     F .text	00000005 _HTC_PauseRecv
0090f0f8 g     F .text	00000005 __adf_net_unregister_drv
0090ad08 g     F .text	0000002b __adf_os_dmamem_alloc
008e48f8 g       *ABS*	00000000 mUsbEPMap
00906964 g     F .text	0000002b __adf_nbuf_pull_head
0090ad34 g     F .text	0000000c __adf_os_setup_intr
00512c7c g     O .bss	00000004 m_origUsbfifoRecvCmd
0090ac24 g     F .text	0000002b cmnos_tick_patch
00906a18 g     F .text	0000001e __adf_nbuf_queue_add
00908ae8 g     F .text	0000005a wmi_cmd_rsp
009069b0 g     F .text	00000020 __adf_nbuf_unshare
00512ec0 g     O .bss	00000012 UsbDeviceDescriptorPatch
00906d9c g     F .text	00000016 _buf_pool_static_free_buf
00906ce0 g     F .text	0000000e __adf_nbuf_is_queue_empty
0090ae84 g     F .text	00000017 ar5416IsInterruptPending
00907b44 g     F .text	00000015 ath_hal_memcpy
008e6348 g       *ABS*	00000000 _xtos_set_exception_handler
00906000 g     F .boot	0000027c app_start
0090b290 g     F .text	000001e6 ar5416SetupTxDesc_20
0050095c g       *ABS*	00000000 cticks
008e5010 g       *ABS*	00000000 vdesc_module_install
0090d864 g     F .text	0000008b ath_tx_status_update
00512c68 g       *ABS*	00000000 _data_end
0090f0fd g       *ABS*	00000000 _iram0_text_end
0090e328 g     F .text	0000024b ath_tgt_tx_form_aggr
00502430 g       *ABS*	00000000 __XT_EXCEPTION_TABLE__
0090e2dc g     F .text	0000004a ath_tx_addto_baw
00906a38 g     F .text	00000026 __adf_nbuf_queue_remove
00909b2c g     F .text	00000028 ath_detach
0090676c g     F .text	0000005b wlan_task
00502440 g       *ABS*	00000000 _literals_start
00512dc4 g     O .bss	000000f0 cmd_buffer
00906cf0 g     F .text	00000017 _buf_pool_static_init
00512c6c g     O .bss	00000001 htc_complete_setup
00906c80 g     F .text	00000008 __adf_nbuf_len
0090bbdc g     F .text	0000003d ar5416StopTxDma
00909c78 g     F .text	00000016 wlan_pci_isr
008e6e48 g       *ABS*	00000000 memset
00502c70 g       *ABS*	00000000 _literals_end
00909c90 g     F .text	00000005 _HTC_Shutdown
0090ad5c g     F .text	0000003a ath_hal_getcapability
009069d0 g     F .text	00000027 __adf_nbuf_frag_info
00501000 g       *ABS*	00000000 _dport0_rodata_end
0090ac08 g     F .text	0000001c cmnos_delay_us_patch
00500ac4 g       *ABS*	00000000 eUsbCxFinishAction
00512c98 g     O .bss	00000004 init_htc_handle
00909e14 g     F .text	00000016 HTCFreeMsgBuffer
0090b9e4 g     F .text	00000083 ar5416Set11nAggrMiddle_20
00906ca0 g     F .text	00000015 __adf_nbuf_peek_header
009065dc g     F .text	0000015b HTCMsgRecvHandler_patch
0090644c g     F .text	0000002a reset_EP4_FIFO
008e6998 g       *ABS*	00000000 __divsi3
008e6560 g       *ABS*	00000000 strcmp
0090afe8 g     F .text	000001ea ar5416ProcRxDescFast_20
00501000 g       *ABS*	00000000 _dram0_rodata_start
0090aac4 g     F .text	000000da zfTurnOffPower_patch
00501000 g       *ABS*	00000000 _rom_literal_end
00908330 g     F .text	0000004e wmi_event
00512c78 g     O .bss	00000004 delay
00909ba0 g     F .text	00000038 wlan_pci_config_read
009083a8 g     F .text	0000073e ath_intr
00909fb4 g     F .text	00000010 _HTC_ReturnBuffers
008e1574 g       *ABS*	00000000 athos_indirection_table_install
008e6980 g       *ABS*	00000000 xthal_get_intenable
0090ec7c g     F .text	0000006e owl_tgt_tx_tasklet
008e4954 g       *ABS*	00000000 mUsbEPMxPtSzHigh
00907b08 g     F .text	00000010 ath_hal_delay
00500ac0 g       *ABS*	00000000 u8ConfigDescriptorEX
0090687c g     F .text	0000003e __adf_nbuf_alloc
0090ac88 g     F .text	00000080 _HIFusb_start_patch
00906cd8 g     F .text	00000007 __adf_nbuf_queue_next
00907638 g     F .text	00000039 db_ascii_to_int
0090a394 g     F .text	00000097 HTCMsgRecvHandler
0090d8f0 g     F .text	0000006e ath_tx_status_update_aggr
009068bc g     F .text	0000001c __adf_nbuf_free
00512eb4 g     O .bss	00000004 cmd_not_found
008e4914 g       *ABS*	00000000 mUsbFIFOMap
009067c8 g     F .text	00000005 htc_setup_comp
00502430 g       *ABS*	00000000 _bss_table_start
005110cc g     O .data	000002bc ar5416_11ng_table
00906a88 g     F .text	00000009 __adf_nbuf_unmap
00906c58 g     F .text	0000000a __adf_nbuf_headroom
0090ed90 g     F .text	000000b3 ath_tgt_tx_cleanup
008e3e64 g       *ABS*	00000000 bStandardCommand
008e3b54 g       *ABS*	00000000 bSet_configuration
00909bd8 g     F .text	000000a0 wlan_pci_probe
009064d8 g     F .text	0000007c AR6002_fatal_exception_handler_patch
00909dd0 g     F .text	00000041 htc_module_install
00510d00 g       *ABS*	00000000 _dport0_data_end
0090ac50 g     F .text	0000000d cmnos_milliseconds_patch
00512cac g     O .bss	00000004 gpio
00501000 g       *ABS*	00000000 _rodata_start
009094e8 g     F .text	00000018 ath_get_minrateidx
00512f10 g       .bss	00000000 _end
008e34a0 g       *ABS*	00000000 _HIFusb_start
0090ac60 g     F .text	00000011 _HIFusb_get_max_msg_len_patch
0090aba0 g     F .text	0000004f zfResetUSBFIFO_patch
0090daf0 g     F .text	00000046 ath_tx_status_send
00512eb8 g     O .bss	00000004 cmd_buf_full
0090f0fd g       *ABS*	00000000 _iram0_text_start
0090ba68 g     F .text	0000007d ar5416Set11nAggrLast_20
00909f10 g     F .text	0000003f HTCControlSvcProcessSendComplete
00909e2c g     F .text	00000021 HTCAllocMsgBuffer
00511bbc g     O .data	00000004 g_pci_init_func
00909c98 g     F .text	0000000d _HTC_RegisterService
00907ae0 g     F .text	00000026 _ath_hal_attach_tgt
0090a008 g     F .text	000000e0 HTCProcessConnectMsg
0090bae8 g     F .text	0000003e ar5416Clr11nAggr_20
0090c8b4 g     F .text	000002fe rcRateFind_11n
00906c30 g     F .text	00000026 __adf_nbuf_put_tail
0090cde0 g     F .text	0000002c ath_rate_findrate
00512ca8 g     O .bss	00000004 g_wlan_drv
00906354 g     F .text	000000f6 exception_reset
0090b478 g     F .text	00000136 ar5416FillTxDesc_20
00909ce8 g     F .text	00000017 HTC_AssembleBuffers
00510e10 g     O .data	000002bc ar5416_11na_table
00512f10 g       *ABS*	00000000 _fw_image_end
00909dc8 g     F .text	00000005 _HTC_ResumeRecv
0090db68 g     F .text	00000278 ath_tgt_tx_prepare
0090627c g       .text	00000000 _stext
009079f0 g     F .text	00000023 bSet_configuration_patch
0090ad40 g     F .text	0000000c __adf_os_free_intr
0090b5b0 g     F .text	00000021 ar5416FillKeyTxDesc_20
009067d0 g     F .text	0000006e _wmi_cmd_rsp
00512ebc g     O .bss	00000004 pressed_time
00909b70 g     F .text	0000002f wlan_pci_config_write
009062a8 g     F .text	00000046 fatal_exception_func
00909fc4 g     F .text	00000044 _HTC_ReturnBuffersList
0090af70 g     F .text	00000077 ar5416SetupRxDesc_20
009065a8 g     F .text	00000032 HTCControlSvcProcessMsg_patch
008e49a0 g       *ABS*	00000000 mUsbEPinHighBandSet
0090ce6c g     F .text	0000001e ath_rate_newstate
00510d00 g       *ABS*	00000000 _dport0_bss_start
00501000 g       *ABS*	00000000 _dram0_rodata_end
0090be44 g     F .text	000002c9 ar5416ProcTxDesc_20
0090a42c g     F .text	00000005 RedistributeCredit
00907988 g     F .text	00000042 vUSBFIFO_EP6Cfg_FS_patch
00510d00 g       *ABS*	00000000 _dport0_bss_end
00907a14 g     F .text	00000044 bStandardCommand_patch
00512ed4 g     O .bss	0000003c ConfigDescriptorPatch
0090bd08 g     F .text	000000df ar5416GetPendingInterrupts
00501000 g       *ABS*	00000000 _dport0_literal_end
0090b6e0 g     F .text	00000278 ar5416Set11nRateScenario_20
0090af58 g     F .text	00000017 ar5416StopPcuReceive



Disassembly of section .boot:

00906000 <app_start>:

extern BOOLEAN bJumptoFlash;
extern BOOLEAN bEepromExist;

void __section(boot) __noreturn __visible app_start(void)
{
  906000:	6c1004        	entry	a1, 32
#if defined(PROJECT_MAGPIE)
	T_EEP_RET retEEP;
#endif

	/* Zero BSS segment & dynamic memory section. */
	init_mem();
  906003:	5801cd        	call8	906738 <init_mem>

#if defined(PROJECT_MAGPIE)
	fatal_exception_func();
  906006:	5800a8        	call8	9062a8 <fatal_exception_func>
#endif

	if( IS_FLASHBOOT() ) {
  906009:	126912        	l32r	a2, 8e0454 <_bss_end+0x3cd544>
  90600c:	136913        	l32r	a3, 8e0458 <_bss_end+0x3cd548>
  90600f:	0c0200        	memw
  906012:	242200        	l32i	a4, a2, 0
  906015:	126915        	l32r	a2, 8e046c <_bss_end+0x3cd55c>
  906018:	04045f        	extui	a4, a4, 16, 16
  90601b:	734935        	bne	a4, a3, 906054 <app_start+0x54>
		athos_indirection_table_install();
  90601e:	5b6d55        	call8	8e1574 <athos_indirection_table_install>
		DBG_MODULE_INSTALL();
  906021:	1a6914        	l32r	a10, 8e0474 <_bss_end+0x3cd564>
  906024:	5805b5        	call8	9076fc <cmnos_dbg_module_install>
		A_CLOCK_INIT(SYSTEM_CLK);
  906027:	1a6916        	l32r	a10, 8e0480 <_bss_end+0x3cd570>
  90602a:	232238        	l32i	a3, a2, 224
  90602d:	0b3000        	callx8	a3
		A_UART_INIT();
  906030:	2a2213        	l32i	a10, a2, 76
  906033:	0ba000        	callx8	a10
		A_PRINTF_INIT();
  906036:	232211        	l32i	a3, a2, 68
  906039:	0b3000        	callx8	a3
		A_DBG_INIT();
  90603c:	23226e        	l32i	a3, a2, 0x1b8
  90603f:	0b3000        	callx8	a3
		A_EEP_INIT();
  906042:	23225f        	l32i	a3, a2, 0x17c
  906045:	0b3000        	callx8	a3
		A_TASKLET_INIT();
  906048:	232269        	l32i	a3, a2, 0x1a4
  90604b:	0b3000        	callx8	a3
		_indir_tbl.cmnos.timer._timer_init();
  90604e:	222241        	l32i	a2, a2, 0x104
  906051:	600002        	j	906057 <app_start+0x57>
		u8UsbInterfaceAlternateSetting = u8UsbConfigValue = u8UsbInterfaceValue = 0;
#endif
	}
#ifdef ROM_VER_1_1
	else
		A_EEP_INIT(); /*Required for 1_1*/
  906054:	22225f        	l32i	a2, a2, 0x17c
  906057:	0b2000        	callx8	a2
#endif

#if defined(PROJECT_MAGPIE)
	retEEP = A_EEP_IS_EXIST();
  90605a:	126915        	l32r	a2, 8e04b0 <_bss_end+0x3cd5a0>
	bJumptoFlash = FALSE;
  90605d:	c040      	movi.n	a4, 0
	else
		A_EEP_INIT(); /*Required for 1_1*/
#endif

#if defined(PROJECT_MAGPIE)
	retEEP = A_EEP_IS_EXIST();
  90605f:	2a2262        	l32i	a10, a2, 0x188
  906062:	0ba000        	callx8	a10
	bJumptoFlash = FALSE;
  906065:	136917        	l32r	a3, 8e04c4 <_bss_end+0x3cd5b4>
  906068:	243500        	s16i	a4, a3, 0
  90606b:	136918        	l32r	a3, 8e04cc <_bss_end+0x3cd5bc>
	if ( RET_SUCCESS == retEEP ) {
  90606e:	cca0      	bnez.n	a10, 906072 <app_start+0x72>
		bEepromExist = TRUE;
  906070:	c041      	movi.n	a4, 1
	} else {
		bEepromExist = FALSE;
	}
#endif

	hostif = A_IS_HOST_PRESENT();
  906072:	8a2e      	l32i.n	a10, a2, 56
	retEEP = A_EEP_IS_EXIST();
	bJumptoFlash = FALSE;
	if ( RET_SUCCESS == retEEP ) {
		bEepromExist = TRUE;
	} else {
		bEepromExist = FALSE;
  906074:	243500        	s16i	a4, a3, 0
	}
#endif

	hostif = A_IS_HOST_PRESENT();
  906077:	0ba000        	callx8	a10
  90607a:	d6a0      	mov.n	a6, a10
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90607c:	136919        	l32r	a3, 8e04e0 <_bss_end+0x3cd5d0>
#elif defined(PROJECT_K2)
	rst_status = ioread32(MAGPIE_REG_RST_STATUS_ADDR);
#endif /* #if defined(PROJECT_MAGPIE) */


	A_PRINTF(" A_WDT_INIT()\n\r");
  90607f:	242212        	l32i	a4, a2, 72
  906082:	1a691a        	l32r	a10, 8e04ec <_bss_end+0x3cd5dc>
  906085:	0c0200        	memw
  906088:	8330      	l32i.n	a3, a3, 0
  90608a:	0b4000        	callx8	a4
		_indir_tbl.cmnos.usb._usb_fw_task = _fw_usb_fw_task;
		_indir_tbl.cmnos.usb._usb_reset_fifo = _fw_usb_reset_fifo;
#endif
	}

	if( rst_status == WDT_MAGIC_PATTERN ) {
  90608d:	14691b        	l32r	a4, 8e04fc <_bss_end+0x3cd5ec>
  906090:	74391d        	bne	a3, a4, 9060b1 <app_start+0xb1>
		A_PRINTF(" ==>WDT reset<==\n");
  906093:	222212        	l32i	a2, a2, 72
  906096:	1a691c        	l32r	a10, 8e0508 <_bss_end+0x3cd5f8>
  906099:	0b2000        	callx8	a2
#if defined(PROJECT_MAGPIE)
		reset_EP4_FIFO();
  90609c:	5800eb        	call8	90644c <reset_EP4_FIFO>
#endif
		*((volatile uint32_t*)WATCH_DOG_RESET_COUNTER_ADDR)+=1;
  90609f:	12691d        	l32r	a2, 8e0514 <_bss_end+0x3cd604>
  9060a2:	0c0200        	memw
  9060a5:	8320      	l32i.n	a3, a2, 0
  9060a7:	b133      	addi.n	a3, a3, 1
  9060a9:	0c0200        	memw
  9060ac:	9320      	s32i.n	a3, a2, 0
  9060ae:	600011        	j	9060c3 <app_start+0xc3>
	} else if (rst_status == SUS_MAGIC_PATTERN) {
  9060b1:	14691e        	l32r	a4, 8e052c <_bss_end+0x3cd61c>
		A_PRINTF(" ==>warm start<==\n");
  9060b4:	222212        	l32i	a2, a2, 72
  9060b7:	1a691f        	l32r	a10, 8e0534 <_bss_end+0x3cd624>
		A_PRINTF(" ==>WDT reset<==\n");
#if defined(PROJECT_MAGPIE)
		reset_EP4_FIFO();
#endif
		*((volatile uint32_t*)WATCH_DOG_RESET_COUNTER_ADDR)+=1;
	} else if (rst_status == SUS_MAGIC_PATTERN) {
  9060ba:	743102        	beq	a3, a4, 9060c0 <app_start+0xc0>
		A_PRINTF(" ==>warm start<==\n");
	} else
		A_PRINTF(" ==>cold start<==\n");
  9060bd:	1a6920        	l32r	a10, 8e0540 <_bss_end+0x3cd630>
  9060c0:	0b2000        	callx8	a2

#if defined(PROJECT_MAGPIE)
	*((volatile uint32_t*)WATCH_DOG_MAGIC_PATTERN_ADDR)=WDT_MAGIC_PATTERN;
  9060c3:	13691b        	l32r	a3, 8e0530 <_bss_end+0x3cd620>
  9060c6:	126919        	l32r	a2, 8e052c <_bss_end+0x3cd61c>
#endif /* #if defined(PROJECT_MAGPIE) */

	/* intr enable would left for firmware */
	/* athos_interrupt_init(); */

	DBG_MODULE_INSTALL();
  9060c9:	1a6914        	l32r	a10, 8e051c <_bss_end+0x3cd60c>
		A_PRINTF(" ==>warm start<==\n");
	} else
		A_PRINTF(" ==>cold start<==\n");

#if defined(PROJECT_MAGPIE)
	*((volatile uint32_t*)WATCH_DOG_MAGIC_PATTERN_ADDR)=WDT_MAGIC_PATTERN;
  9060cc:	0c0200        	memw
  9060cf:	232600        	s32i	a3, a2, 0
#endif /* #if defined(PROJECT_MAGPIE) */

	/* intr enable would left for firmware */
	/* athos_interrupt_init(); */

	DBG_MODULE_INSTALL();
  9060d2:	58058a        	call8	9076fc <cmnos_dbg_module_install>
	SFLASH_MODULE_INSTALL();
	A_SFLASH_INIT();
#endif
#endif

	HIF_MODULE_INSTALL();
  9060d5:	1a6921        	l32r	a10, 8e055c <_bss_end+0x3cd64c>
  9060d8:	5b6d1b        	call8	8e1548 <generic_hif_module_install>
	HTC_MODULE_INSTALL();
  9060db:	1a6922        	l32r	a10, 8e0564 <_bss_end+0x3cd654>
  9060de:	580f3c        	call8	909dd0 <htc_module_install>
	WMI_SERVICE_MODULE_INSTALL();
  9060e1:	1a6923        	l32r	a10, 8e0570 <_bss_end+0x3cd660>
  9060e4:	581147        	call8	90a604 <WMI_service_module_install>
	BUF_POOL_MODULE_INSTALL();
  9060e7:	1a6924        	l32r	a10, 8e0578 <_bss_end+0x3cd668>
  9060ea:	580332        	call8	906db4 <buf_pool_module_install>
	VBUF_MODULE_INSTALL();
  9060ed:	1a6925        	l32r	a10, 8e0584 <_bss_end+0x3cd674>
  9060f0:	5b7b9b        	call8	8e4f60 <vbuf_module_install>
	VDESC_MODULE_INSTALL();
  9060f3:	1a6926        	l32r	a10, 8e058c <_bss_end+0x3cd67c>
  9060f6:	5b7bc6        	call8	8e5010 <vdesc_module_install>

	//init each module, should be put together..
	A_PRINTF("ALLOCRAM start 0x%x size %d\n", ALLOCRAM_START, ALLOCRAM_SIZE);
  9060f9:	136927        	l32r	a3, 8e0598 <_bss_end+0x3cd688>
  9060fc:	146928        	l32r	a4, 8e059c <_bss_end+0x3cd68c>
  9060ff:	126915        	l32r	a2, 8e0554 <_bss_end+0x3cd644>
  906102:	b437      	addi.n	a7, a3, 4
  906104:	282212        	l32i	a8, a2, 72
  906107:	03450c        	sub	a5, a4, a3
  90610a:	1a6929        	l32r	a10, 8e05b0 <_bss_end+0x3cd6a0>
  90610d:	db70      	mov.n	a11, a7
  90610f:	dc50      	mov.n	a12, a5
  906111:	0b8000        	callx8	a8
	A_ALLOCRAM_INIT(ALLOCRAM_START, ALLOCRAM_SIZE);
  906114:	c78c      	movi.n	a8, -4
  906116:	783107        	beq	a3, a8, 906121 <app_start+0x121>
  906119:	da70      	mov.n	a10, a7
  90611b:	743905        	bne	a3, a4, 906124 <app_start+0x124>
  90611e:	600009        	j	90612b <app_start+0x12b>
  906121:	1a6910        	l32r	a10, 8e0564 <_bss_end+0x3cd654>
  906124:	db50      	mov.n	a11, a5
  906126:	600004        	j	90612e <app_start+0x12e>
  906129:	00001b        	sra	a0, a0
  90612c:	691123        	bnei	a1, 1, 906153 <app_start+0x153>
  90612f:	22510b        	l16ui	a2, a5, 22
  906132:	300065        	excw

	if( hostif == HIF_USB ) {
  906135:	60c513        	j	91264c <_iram0_text_end+0x354f>
		_indir_tbl.hif._get_max_msg_len = _HIFusb_get_max_msg_len_patch;
  906138:	692a23        	bnei	a2, 12, 90615f <app_start+0x15f>
  90613b:	267913        	l16si	a6, a7, 38
		_indir_tbl.cmnos.usb._usb_reg_out = usb_reg_out_patch;
  90613e:	692b23        	bnei	a2, 16, 906165 <app_start+0x165>
  906141:	263313        	excw
		_indir_tbl.hif._isr_handler = _HIFusb_isr_handler_patch;
  906144:	692c23        	bnei	a2, 32, 90616b <app_start+0x16b>
  906147:	267b13        	l32ai	a6, a7, 76
		_indir_tbl.cmnos.usb._usb_set_configuration = bSet_configuration_patch;
  90614a:	692d23        	bnei	a2, 64, 906171 <app_start+0x171>
  90614d:	262613        	s32i	a6, a2, 76
		_indir_tbl.cmnos.usb._usb_status_in = usb_status_in_patch;
  906150:	692e23        	bnei	a2, 128, 906177 <app_start+0x177>
  906153:	263413        	s8i	a6, a3, 19
		_indir_tbl.cmnos.usb._usb_get_descriptor = bGet_descriptor_patch;
  906156:	692f23        	bnei	a2, 0x100, 90617d <app_start+0x17d>
  906159:	263013        	l8ui	a6, a3, 19
		_indir_tbl.cmnos.usb._usb_standard_cmd = bStandardCommand_patch;
  90615c:	693023        	bnei	a3, -1, 906183 <app_start+0x183>
  90615f:	262713        	excw
		_indir_tbl.usbfifo_api._init = _fw_usbfifo_init;
  906162:	693123        	bnei	a3, 1, 906189 <app_start+0x189>
  906165:	269613        	s32i	a6, a9, 76

#if defined(PROJECT_MAGPIE)
		_indir_tbl.cmnos.usb._usb_power_off = zfTurnOffPower_patch;
  906168:	693223        	bnei	a3, 2, 90618f <app_start+0x18f>
  90616b:	262913        	l16si	a6, a2, 38
		_indir_tbl.cmnos.usb._usb_reset_fifo = zfResetUSBFIFO_patch;
  90616e:	693323        	bnei	a3, 3, 906195 <app_start+0x195>
  906171:	262a13        	movi	a6, 0x213
		_indir_tbl.hif._start = _HIFusb_start_patch;
  906174:	693423        	bnei	a3, 4, 90619b <app_start+0x19b>
  906177:	267413        	s8i	a6, a7, 19
		_indir_tbl.htc._HTC_MsgRecvHandler = HTCMsgRecvHandler_patch;
  90617a:	693523        	bnei	a3, 5, 9061a1 <app_start+0x1a1>
  90617d:	268613        	s32i	a6, a8, 76
		_indir_tbl.htc._HTC_ControlSvcProcessMsg = HTCControlSvcProcessMsg_patch;
  906180:	693623        	bnei	a3, 6, 9061a7 <app_start+0x1a7>
  906183:	268812        	excw

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  906186:	693722        	bnei	a3, 7, 9061ac <app_start+0x1ac>
  906189:	200079        	l8ui	a0, a0, 121
#endif

		if (!(ioread8_usb(ZM_MAIN_CTRL_OFFSET) & BIT6))
  90618c:	2f0258        	l32i	a15, a0, 0x160
			vUSBFIFO_EP6Cfg_FS_patch();
  90618f:	05fe12        	srai	a14, a5, 15
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  906192:	693813        	bnei	a3, 8, 9061a9 <app_start+0x1a9>

#ifdef FUSION_USB_ENABLE_TX_STREAM
		// For K2, enable tx stream mode
		A_PRINTF("Enable Tx Stream mode: 0x%x\r\n",
  906195:	69150c        	bnei	a1, 5, 9061a5 <app_start+0x1a5>
  906198:	02008b        	excw
  90619b:	202332        	excw
  90619e:	121a69        	l32r	a2, 8ccb44 <_bss_end+0x3b9c34>
  9061a1:	390b30        	excw
  9061a4:	00da20        	excw
			ioread32_usb(ZM_SOC_USB_MODE_CTRL_OFFSET));

		/* Patch for K2 USB STREAM mode */
		/* disable down stream DMA mode */
		io32_rmw_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT6, BIT0);
  9061a7:	c4b0      	movi.n	a11, 64
  9061a9:	c0c1      	movi.n	a12, 1
  9061ab:	582396        	call8	90f004 <io32_rmw>
#if SYSTEM_MODULE_HP_EP5
		io32_set_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT8);
  9061ae:	da20      	mov.n	a10, a2
  9061b0:	2b1a00        	movi	a11, 0x100
  9061b3:	c0c0      	movi.n	a12, 0
  9061b5:	582393        	call8	90f004 <io32_rmw>
#endif

#if SYSTEM_MODULE_HP_EP6
		io32_set_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT9);
  9061b8:	da20      	mov.n	a10, a2
  9061ba:	2b2a00        	movi	a11, 0x200
  9061bd:	c0c0      	movi.n	a12, 0
  9061bf:	582391        	call8	90f004 <io32_rmw>
#endif
		/* enable down stream DMA mode */
		io32_set_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT0);
  9061c2:	da20      	mov.n	a10, a2
  9061c4:	c0b1      	movi.n	a11, 1
  9061c6:	2c0a00        	movi	a12, 0
  9061c9:	58238e        	call8	90f004 <io32_rmw>
#endif

#ifdef FUSION_USB_ENABLE_RX_STREAM
		/* Patch for K2 USB STREAM mode */
		/* disable upstream DMA mode and enable upstream stream mode */
		io32_clr_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT1 | BIT3);
  9061cc:	da20      	mov.n	a10, a2
  9061ce:	c0b0      	movi.n	a11, 0
  9061d0:	c0ca      	movi.n	a12, 10
  9061d2:	58238c        	call8	90f004 <io32_rmw>

		/* K2, Set maximum IN transfer to 8K */
		io32_rmw_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, 0x20, 0x30);
  9061d5:	da20      	mov.n	a10, a2
  9061d7:	c2b0      	movi.n	a11, 32
  9061d9:	c3c0      	movi.n	a12, 48
  9061db:	58238a        	call8	90f004 <io32_rmw>

		/* enable upstream DMA mode */
		io32_set_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT1);
  9061de:	da20      	mov.n	a10, a2
  9061e0:	c0b2      	movi.n	a11, 2
  9061e2:	2c0a00        	movi	a12, 0
  9061e5:	582387        	call8	90f004 <io32_rmw>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9061e8:	12693a        	l32r	a2, 8e06d0 <_bss_end+0x3cd7c0>
  9061eb:	230aa0        	movi	a3, 160
  9061ee:	0c0200        	memw
  9061f1:	9320      	s32i.n	a3, a2, 0
  9061f3:	12693b        	l32r	a2, 8e06e0 <_bss_end+0x3cd7d0>
  9061f6:	c039      	movi.n	a3, 9
  9061f8:	0c0200        	memw
  9061fb:	9320      	s32i.n	a3, a2, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  9061fd:	12693c        	l32r	a2, 8e06f0 <_bss_end+0x3cd7e0>
	}
#if defined(PROJECT_MAGPIE) && !defined(ROM_VER_1_1)
	else if (hostif == HIF_PCI )
		hif_pci_patch_install(&_indir_tbl.hif);
#endif
	A_PRINTF("USB mode: 0x%x\r\n", ioread32_usb(0x100));
  906200:	1a693d        	l32r	a10, 8e06f4 <_bss_end+0x3cd7e4>
  906203:	0c0200        	memw
  906206:	8b20      	l32i.n	a11, a2, 0
  906208:	126915        	l32r	a2, 8e065c <_bss_end+0x3cd74c>
  90620b:	232212        	l32i	a3, a2, 72
  90620e:	0b3000        	callx8	a3

	// patch the clock function
	if(1) {
		_indir_tbl.cmnos.clock._clock_init = cmnos_clock_init_patch;
  906211:	13693e        	l32r	a3, 8e070c <_bss_end+0x3cd7fc>
		_indir_tbl.cmnos.clock._delay_us = cmnos_delay_us_patch;
		_indir_tbl.cmnos.clock._clock_tick = cmnos_tick_patch;
		_indir_tbl.cmnos.clock._milliseconds = cmnos_milliseconds_patch;

		//default clock, setup initial variable, SYSTEM_FREQ=40
		A_CLOCK_INIT(SYSTEM_FREQ);
  906214:	2a0a28        	movi	a10, 40
#endif
	A_PRINTF("USB mode: 0x%x\r\n", ioread32_usb(0x100));

	// patch the clock function
	if(1) {
		_indir_tbl.cmnos.clock._clock_init = cmnos_clock_init_patch;
  906217:	232638        	s32i	a3, a2, 224
		_indir_tbl.cmnos.clock._refclk_speed_get = cmnos_refclk_speed_get_patch;
  90621a:	13693f        	l32r	a3, 8e0718 <_bss_end+0x3cd808>
  90621d:	23263d        	s32i	a3, a2, 244
		_indir_tbl.cmnos.clock._delay_us = cmnos_delay_us_patch;
  906220:	136940        	l32r	a3, 8e0720 <_bss_end+0x3cd810>
  906223:	23263b        	s32i	a3, a2, 236
		_indir_tbl.cmnos.clock._clock_tick = cmnos_tick_patch;
  906226:	136941        	l32r	a3, 8e072c <_bss_end+0x3cd81c>
  906229:	232640        	s32i	a3, a2, 0x100
		_indir_tbl.cmnos.clock._milliseconds = cmnos_milliseconds_patch;
  90622c:	136942        	l32r	a3, 8e0734 <_bss_end+0x3cd824>
  90622f:	23263e        	s32i	a3, a2, 248

		//default clock, setup initial variable, SYSTEM_FREQ=40
		A_CLOCK_INIT(SYSTEM_FREQ);
  906232:	58126f        	call8	90abf0 <cmnos_clock_init_patch>
	}

	Magpie_init();
  906235:	580182        	call8	906840 <Magpie_init>

#if MAGPIE_ENABLE_WLAN == 1
	io32_clr(MAGPIE_REG_RST_RESET_ADDR, BIT10 | BIT8 | BIT7 | BIT6);
  906238:	1a6943        	l32r	a10, 8e0744 <_bss_end+0x3cd834>
  90623b:	2b0a00        	movi	a11, 0
  90623e:	2c5ac0        	movi	a12, 0x5c0
  906241:	582370        	call8	90f004 <io32_rmw>
#if defined(PROJECT_MAGPIE)
	io32_set(MAGPIE_REG_AHB_ARB_ADDR, BIT1);
  906244:	1a6944        	l32r	a10, 8e0754 <_bss_end+0x3cd844>
  906247:	2b0a02        	movi	a11, 2
  90624a:	2c0a00        	movi	a12, 0
  90624d:	58236d        	call8	90f004 <io32_rmw>
#endif

	wlan_pci_module_init();
  906250:	580e40        	call8	909b54 <wlan_pci_module_init>
	wlan_pci_probe();
  906253:	580e61        	call8	909bd8 <wlan_pci_probe>
#endif


	A_PRINTF("Tgt running\n\r");
  906256:	1a6945        	l32r	a10, 8e076c <_bss_end+0x3cd85c>
  906259:	232212        	l32i	a3, a2, 72
  90625c:	0b3000        	callx8	a3

#if defined(PROJECT_MAGPIE)
	if(1) {
		A_PRINTF("======= Apply MISC Assert patch\n\r");
  90625f:	1a6946        	l32r	a10, 8e0778 <_bss_end+0x3cd868>
  906262:	232212        	l32i	a3, a2, 72
  906265:	0b3000        	callx8	a3
		_assfail_ori =  _indir_tbl.cmnos.misc._assfail;
  906268:	842a      	l32i.n	a4, a2, 40
  90626a:	136947        	l32r	a3, 8e0788 <_bss_end+0x3cd878>
  90626d:	243600        	s32i	a4, a3, 0
		_indir_tbl.cmnos.misc._assfail = exception_reset;
  906270:	136948        	l32r	a3, 8e0790 <_bss_end+0x3cd880>
  906273:	23260a        	s32i	a3, a2, 40
	}

	change_magpie_clk();
  906276:	58001e        	call8	9062f0 <change_magpie_clk>
#endif
	wlan_task(); //never return
  906279:	58013c        	call8	90676c <wlan_task>

Disassembly of section .text:

0090627c <io32_rmw>:
	iowrite8(addr, val);
}

static inline void io32_rmw(volatile uint32_t addr,
			    const uint32_t set, const uint32_t clr)
{
  90627c:	6c1006        	entry	a1, 48
  90627f:	0c0200        	memw
  906282:	9210      	s32i.n	a2, a1, 0
	uint32_t val;

	val = ioread32(addr);
  906284:	0c0200        	memw
  906287:	8810      	l32i.n	a8, a1, 0
	val &= ~clr;
  906289:	c79f      	movi.n	a9, -1
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90628b:	0c0200        	memw
  90628e:	8880      	l32i.n	a8, a8, 0
			    const uint32_t set, const uint32_t clr)
{
	uint32_t val;

	val = ioread32(addr);
	val &= ~clr;
  906290:	049403        	xor	a4, a9, a4
  906293:	084801        	and	a8, a4, a8
	val |= set;
	iowrite32(addr, val);
  906296:	0c0200        	memw
  906299:	8a10      	l32i.n	a10, a1, 0
{
	uint32_t val;

	val = ioread32(addr);
	val &= ~clr;
	val |= set;
  90629b:	038302        	or	a3, a8, a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90629e:	0c0200        	memw
  9062a1:	93a0      	s32i.n	a3, a10, 0
  9062a3:	d10f      	retw.n
  9062a5:	000000        	ill

009062a8 <fatal_exception_func>:

static void idle_task();

#if defined(PROJECT_MAGPIE)
void fatal_exception_func()
{
  9062a8:	6c1004        	entry	a1, 32
	// patch for execption
	(void)_xtos_set_exception_handler(EXCCAUSE_UNALIGNED, AR6002_fatal_exception_handler_patch);
  9062ab:	126949        	l32r	a2, 8e07d0 <_bss_end+0x3cd8c0>
  9062ae:	c0a9      	movi.n	a10, 9
  9062b0:	022b02        	or	a11, a2, a2
  9062b3:	5b8025        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_LOAD_STORE_ERROR, AR6002_fatal_exception_handler_patch);
  9062b6:	db20      	mov.n	a11, a2
  9062b8:	2a0a03        	movi	a10, 3
  9062bb:	5b8023        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_ILLEGAL, AR6002_fatal_exception_handler_patch);
  9062be:	db20      	mov.n	a11, a2
  9062c0:	2a0a00        	movi	a10, 0
  9062c3:	5b8021        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_INSTR_ERROR, AR6002_fatal_exception_handler_patch);
  9062c6:	db20      	mov.n	a11, a2
  9062c8:	2a0a02        	movi	a10, 2
  9062cb:	5b801f        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_PRIVILEGED, AR6002_fatal_exception_handler_patch);
  9062ce:	db20      	mov.n	a11, a2
  9062d0:	2a0a08        	movi	a10, 8
  9062d3:	5b801d        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_INSTR_DATA_ERROR, AR6002_fatal_exception_handler_patch);
  9062d6:	db20      	mov.n	a11, a2
  9062d8:	2a0a0c        	movi	a10, 12
  9062db:	5b801b        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_LOAD_STORE_DATA_ERROR, AR6002_fatal_exception_handler_patch);
  9062de:	db20      	mov.n	a11, a2
  9062e0:	c0ad      	movi.n	a10, 13
  9062e2:	5b8019        	call8	8e6348 <_xtos_set_exception_handler>
	(void)_xtos_set_exception_handler(EXCCAUSE_DIVIDE_BY_ZERO, AR6002_fatal_exception_handler_patch);
  9062e5:	db20      	mov.n	a11, a2
  9062e7:	c0a6      	movi.n	a10, 6
  9062e9:	5b8017        	call8	8e6348 <_xtos_set_exception_handler>
  9062ec:	d10f      	retw.n
	...

009062f0 <change_magpie_clk>:
#endif

#if defined(PROJECT_MAGPIE)
void
change_magpie_clk(void)
{
  9062f0:	6c1004        	entry	a1, 32
  9062f3:	12694a        	l32r	a2, 8e081c <_bss_end+0x3cd90c>
  9062f6:	c131      	movi.n	a3, 17
  9062f8:	0c0200        	memw
  9062fb:	9320      	s32i.n	a3, a2, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  9062fd:	0c0200        	memw
  906300:	8320      	l32i.n	a3, a2, 0
	iowrite32(0x00056004, BIT4 | BIT0);

	/* Wait for the update bit (BIT0) to get cleared */
	while (ioread32(0x00056004) & BIT0)
  906302:	030340        	extui	a3, a3, 0, 1
  906305:	653ff4        	bnez	a3, 9062fd <change_magpie_clk+0xd>
		;

	/* Put the PLL into reset */
	io32_set(0x00050010, BIT1);
  906308:	146943        	l32r	a4, 8e0814 <_bss_end+0x3cd904>
  90630b:	dc30      	mov.n	a12, a3
  90630d:	da40      	mov.n	a10, a4
  90630f:	c0b2      	movi.n	a11, 2
  906311:	5bffda        	call8	90627c <io32_rmw>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  906314:	18694b        	l32r	a8, 8e0840 <_bss_end+0x3cd930>
  906317:	293a25        	movi	a9, 0x325
	 */
	/* Setting PLL to 400MHz */
	iowrite32(0x00056000, 0x325);

	/* Pull CPU PLL out of Reset */
	io32_clr(0x00050010, BIT1);
  90631a:	da40      	mov.n	a10, a4
  90631c:	db30      	mov.n	a11, a3
  90631e:	0c0200        	memw
  906321:	9980      	s32i.n	a9, a8, 0
  906323:	2c0a02        	movi	a12, 2
  906326:	5bffd5        	call8	90627c <io32_rmw>

	A_DELAY_USECS(60); // wait for stable
  906329:	136915        	l32r	a3, 8e0780 <_bss_end+0x3cd870>
  90632c:	c3ac      	movi.n	a10, 60
  90632e:	24323b        	l32i	a4, a3, 236
  906331:	0b4000        	callx8	a4
  906334:	14694c        	l32r	a4, 8e0864 <_bss_end+0x3cd954>
  906337:	0c0200        	memw
  90633a:	9420      	s32i.n	a4, a2, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90633c:	0c0200        	memw
  90633f:	8420      	l32i.n	a4, a2, 0
	/*
	 * AHB clk = ( CPU clk / 2 )
	 */
	iowrite32(0x00056004, 0x00001 | BIT16 | BIT8); /* set plldiv to 2 */

	while (ioread32(0x00056004) & BIT0)
  906341:	7f4ff7        	bbsi	a4, 31, 90633c <change_magpie_clk+0x4c>
		;

	/* UART Setting */
	A_UART_HWINIT((100*1000*1000), 115200);
  906344:	22321a        	l32i	a2, a3, 104
  906347:	1a694d        	l32r	a10, 8e087c <_bss_end+0x3cd96c>
  90634a:	1b694e        	l32r	a11, 8e0884 <_bss_end+0x3cd974>
  90634d:	0b2000        	callx8	a2
  906350:	d10f      	retw.n
	...

00906354 <exception_reset>:

}

void exception_reset(struct register_dump_s *dump)
{
  906354:	6c1004        	entry	a1, 32
	A_PRINTF("exception_reset \n");
  906357:	136915        	l32r	a3, 8e07ac <_bss_end+0x3cd89c>
  90635a:	1a694f        	l32r	a10, 8e0898 <_bss_end+0x3cd988>
  90635d:	243212        	l32i	a4, a3, 72
  906360:	0b4000        	callx8	a4

	/* phase I dump info */
	A_PRINTF("exception reset-phase 1\n");
  906363:	1a6950        	l32r	a10, 8e08a4 <_bss_end+0x3cd994>
  906366:	243212        	l32i	a4, a3, 72
  906369:	0b4000        	callx8	a4
	if(_assfail_ori)
  90636c:	146947        	l32r	a4, 8e0888 <_bss_end+0x3cd978>
  90636f:	8440      	l32i.n	a4, a4, 0
  906371:	c844      	beqz.n	a4, 906379 <exception_reset+0x25>
		_assfail_ori(dump);
  906373:	022a02        	or	a10, a2, a2
  906376:	0b4000        	callx8	a4

	/* phase II reset */
	A_PRINTF("exception reset-phase 2\n");
  906379:	223212        	l32i	a2, a3, 72
  90637c:	1a6951        	l32r	a10, 8e08c0 <_bss_end+0x3cd9b0>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90637f:	c040      	movi.n	a4, 0
  906381:	0b2000        	callx8	a2
  906384:	156919        	l32r	a5, 8e07e8 <_bss_end+0x3cd8d8>
  906387:	12691b        	l32r	a2, 8e07f4 <_bss_end+0x3cd8e4>
	iowrite32(WATCH_DOG_MAGIC_PATTERN_ADDR, WDT_MAGIC_PATTERN);

	io32_set(MAGPIE_REG_RST_RESET_ADDR, BIT10 | BIT8 | BIT7 | BIT6);
  90638a:	2b5ac0        	movi	a11, 0x5c0
  90638d:	0c0200        	memw
  906390:	9250      	s32i.n	a2, a5, 0
  906392:	126943        	l32r	a2, 8e08a0 <_bss_end+0x3cd990>
  906395:	c0c0      	movi.n	a12, 0
  906397:	da20      	mov.n	a10, a2
  906399:	5bffb8        	call8	90627c <io32_rmw>

	io32_set(MAGPIE_REG_AHB_ARB_ADDR, BIT1);
  90639c:	1a6944        	l32r	a10, 8e08ac <_bss_end+0x3cd99c>
  90639f:	2b0a02        	movi	a11, 2
  9063a2:	2c0a00        	movi	a12, 0
  9063a5:	5bffb5        	call8	90627c <io32_rmw>
  9063a8:	166952        	l32r	a6, 8e08f0 <_bss_end+0x3cd9e0>

	iowrite32_usb(ZM_SOC_USB_DMA_RESET_OFFSET, 0x0);
	io32_set(0x50010, BIT4);
  9063ab:	dc40      	mov.n	a12, a4
  9063ad:	0c0200        	memw
  9063b0:	9460      	s32i.n	a4, a6, 0
  9063b2:	da20      	mov.n	a10, a2
  9063b4:	c1b0      	movi.n	a11, 16
  9063b6:	5bffb1        	call8	90627c <io32_rmw>
	A_DELAY_USECS(5);
  9063b9:	28323b        	l32i	a8, a3, 236
  9063bc:	c0a5      	movi.n	a10, 5
  9063be:	0b8000        	callx8	a8
	io32_clr(0x50010, BIT4);
  9063c1:	c1c0      	movi.n	a12, 16
  9063c3:	044b02        	or	a11, a4, a4
  9063c6:	022a02        	or	a10, a2, a2
  9063c9:	5bffac        	call8	90627c <io32_rmw>
	A_DELAY_USECS(5);
  9063cc:	22323b        	l32i	a2, a3, 236
  9063cf:	c0a5      	movi.n	a10, 5
  9063d1:	0b2000        	callx8	a2
  9063d4:	c021      	movi.n	a2, 1
  9063d6:	0c0200        	memw
  9063d9:	226600        	s32i	a2, a6, 0
  9063dc:	16694a        	l32r	a6, 8e0904 <_bss_end+0x3cd9f4>
  9063df:	280a11        	movi	a8, 17
  9063e2:	0c0200        	memw
  9063e5:	286600        	s32i	a8, a6, 0
	iowrite32_usb(ZM_SOC_USB_DMA_RESET_OFFSET, BIT0);

	// set clock to bypass mode - 40Mhz from XTAL
	iowrite32(MAGPIE_REG_CPU_PLL_BYPASS_ADDR, BIT0 | BIT4);
	A_DELAY_USECS(100); // wait for stable
  9063e8:	26323b        	l32i	a6, a3, 236
  9063eb:	2a0a64        	movi	a10, 100
  9063ee:	0b6000        	callx8	a6
  9063f1:	186953        	l32r	a8, 8e0940 <_bss_end+0x3cda30>
  9063f4:	16694b        	l32r	a6, 8e0920 <_bss_end+0x3cda10>
	iowrite32(MAGPIE_REG_CPU_PLL_ADDR, BIT16);

	A_UART_HWINIT((40*1000*1000), 115200);
  9063f7:	1b694e        	l32r	a11, 8e0930 <_bss_end+0x3cda20>
  9063fa:	0c0200        	memw
  9063fd:	9860      	s32i.n	a8, a6, 0
  9063ff:	1a6916        	l32r	a10, 8e0858 <_bss_end+0x3cd948>
  906402:	26321a        	l32i	a6, a3, 104
  906405:	0b6000        	callx8	a6

	A_PRINTF("do TX/RX swap\n");
  906408:	1a6954        	l32r	a10, 8e0958 <_bss_end+0x3cda48>
  90640b:	263212        	l32i	a6, a3, 72
  90640e:	0b6000        	callx8	a6

	MAGPIE_REG_USB_RX0_SWAP_DATA = 0x1;
  906411:	166955        	l32r	a6, 8e0968 <_bss_end+0x3cda58>
	MAGPIE_REG_USB_TX0_SWAP_DATA = 0x1;
	MAGPIE_REG_USB_RX1_SWAP_DATA = 0x1;
	MAGPIE_REG_USB_RX2_SWAP_DATA = 0x1;

        A_PRINTF("Cold reboot initiated.");
  906414:	1a6959        	l32r	a10, 8e0978 <_bss_end+0x3cda68>

	A_UART_HWINIT((40*1000*1000), 115200);

	A_PRINTF("do TX/RX swap\n");

	MAGPIE_REG_USB_RX0_SWAP_DATA = 0x1;
  906417:	0c0200        	memw
  90641a:	9260      	s32i.n	a2, a6, 0
	MAGPIE_REG_USB_TX0_SWAP_DATA = 0x1;
  90641c:	166956        	l32r	a6, 8e0974 <_bss_end+0x3cda64>
  90641f:	0c0200        	memw
  906422:	226600        	s32i	a2, a6, 0
	MAGPIE_REG_USB_RX1_SWAP_DATA = 0x1;
  906425:	166957        	l32r	a6, 8e0984 <_bss_end+0x3cda74>
  906428:	0c0200        	memw
  90642b:	226600        	s32i	a2, a6, 0
	MAGPIE_REG_USB_RX2_SWAP_DATA = 0x1;
  90642e:	166958        	l32r	a6, 8e0990 <_bss_end+0x3cda80>
  906431:	0c0200        	memw
  906434:	226600        	s32i	a2, a6, 0

        A_PRINTF("Cold reboot initiated.");
  906437:	223212        	l32i	a2, a3, 72
  90643a:	0b2000        	callx8	a2
#if defined(PROJECT_MAGPIE)
	iowrite32(WATCH_DOG_MAGIC_PATTERN_ADDR, 0);
#elif defined(PROJECT_K2)
	iowrite32(MAGPIE_REG_RST_STATUS_ADDR, 0);
#endif /* #if defined(PROJECT_MAGPIE) */
	A_USB_JUMP_BOOT();
  90643d:	22322c        	l32i	a2, a3, 176
  906440:	0c0200        	memw
  906443:	9450      	s32i.n	a4, a5, 0
  906445:	0b2000        	callx8	a2
  906448:	d10f      	retw.n
	...

0090644c <reset_EP4_FIFO>:
}

void reset_EP4_FIFO(void)
{
  90644c:	6c1004        	entry	a1, 32
  90644f:	18695a        	l32r	a8, 8e09b8 <_bss_end+0x3cdaa8>
{
	uint8_t val;

	val = ioread8(addr);
	val &= ~clr;
	val |= set;
  906452:	c1a0      	movi.n	a10, 16

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  906454:	298000        	l8ui	a9, a8, 0
  906457:	090947        	extui	a9, a9, 0, 8
{
	uint8_t val;

	val = ioread8(addr);
	val &= ~clr;
	val |= set;
  90645a:	0a9902        	or	a9, a9, a10
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  90645d:	0c0200        	memw
  906460:	298400        	s8i	a9, a8, 0

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  906463:	298000        	l8ui	a9, a8, 0
			    const uint8_t set, const uint8_t clr)
{
	uint8_t val;

	val = ioread8(addr);
	val &= ~clr;
  906466:	c6af      	movi.n	a10, -17

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  906468:	090947        	extui	a9, a9, 0, 8
			    const uint8_t set, const uint8_t clr)
{
	uint8_t val;

	val = ioread8(addr);
	val &= ~clr;
  90646b:	0a9901        	and	a9, a9, a10
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  90646e:	0c0200        	memw
  906471:	298400        	s8i	a9, a8, 0
  906474:	d10f      	retw.n
	...

00906478 <zfGenExceptionEvent>:
	for(i = 0; i < 100; i++) {}
	io8_clr_usb(ZM_EP4_BYTE_COUNT_HIGH_OFFSET, BIT4);
}

LOCAL void zfGenExceptionEvent(uint32_t exccause, uint32_t pc, uint32_t badvaddr)
{
  906478:	6c1004        	entry	a1, 32
	uint32_t pattern = 0x33221199;

	A_PRINTF("<Exception>Tgt Drv send an event 44332211 to Host Drv\n");
  90647b:	186915        	l32r	a8, 8e08d0 <_bss_end+0x3cd9c0>
  90647e:	1a695b        	l32r	a10, 8e09ec <_bss_end+0x3cdadc>
  906481:	288212        	l32i	a8, a8, 72
  906484:	0b8000        	callx8	a8

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  906487:	18695c        	l32r	a8, 8e09f8 <_bss_end+0x3cdae8>
	mUSB_STATUS_IN_INT_DISABLE();
  90648a:	2a0ac0        	movi	a10, 192
  90648d:	298000        	l8ui	a9, a8, 0
  906490:	090947        	extui	a9, a9, 0, 8
  906493:	0a9902        	or	a9, a9, a10
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  906496:	0c0200        	memw
  906499:	298400        	s8i	a9, a8, 0
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90649c:	18693c        	l32r	a8, 8e098c <_bss_end+0x3cda7c>
  90649f:	c09f      	movi.n	a9, 15
  9064a1:	0c0200        	memw
  9064a4:	9980      	s32i.n	a9, a8, 0
  9064a6:	18695d        	l32r	a8, 8e0a1c <_bss_end+0x3cdb0c>
  9064a9:	19695e        	l32r	a9, 8e0a24 <_bss_end+0x3cdb14>
  9064ac:	0c0200        	memw
  9064af:	9980      	s32i.n	a9, a8, 0
  9064b1:	0c0200        	memw
  9064b4:	9280      	s32i.n	a2, a8, 0
  9064b6:	0c0200        	memw
  9064b9:	9380      	s32i.n	a3, a8, 0
  9064bb:	0c0200        	memw
  9064be:	9480      	s32i.n	a4, a8, 0

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  9064c0:	18695f        	l32r	a8, 8e0a3c <_bss_end+0x3cdb2c>
	iowrite32_usb(ZM_EP3_DATA_OFFSET, pattern);
	iowrite32_usb(ZM_EP3_DATA_OFFSET, exccause);
	iowrite32_usb(ZM_EP3_DATA_OFFSET, pc);
	iowrite32_usb(ZM_EP3_DATA_OFFSET, badvaddr);
    
	mUSB_EP3_XFER_DONE();
  9064c3:	c038      	movi.n	a3, 8
  9064c5:	228000        	l8ui	a2, a8, 0
  9064c8:	020247        	extui	a2, a2, 0, 8
  9064cb:	032202        	or	a2, a2, a3
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  9064ce:	0c0200        	memw
  9064d1:	228400        	s8i	a2, a8, 0
  9064d4:	d10f      	retw.n
	...

009064d8 <AR6002_fatal_exception_handler_patch>:
	mUSB_EP3_XFER_DONE();
}

void
AR6002_fatal_exception_handler_patch(CPU_exception_frame_t *exc_frame)
{
  9064d8:	6c1016        	entry	a1, 176
	struct register_dump_s dump;
	uint32_t  exc_cause, exc_vaddr;
	asm volatile("rsr %0,%1" : "=r" (exc_cause) : "n" (EXCCAUSE));
  9064db:	04e830        	rsr.exccause	a4
	asm volatile("rsr %0,%1" : "=r" (exc_vaddr) : "n" (EXCVADDR));
  9064de:	03ee30        	rsr.excvaddr	a3

	dump.exc_frame              = *exc_frame; /* structure copy */
  9064e1:	2c0a80        	movi	a12, 128
  9064e4:	022b02        	or	a11, a2, a2
  9064e7:	2a1c10        	addi	a10, a1, 16
  9064ea:	5b819e        	call8	8e6b64 <memcpy>
	dump.badvaddr               = exc_vaddr;
	dump.exc_frame.xt_exccause  = exc_cause;
	dump.pc                     = exc_frame->xt_pc;
  9064ed:	8b20      	l32i.n	a11, a2, 0
	dump.assline                = 0;

	zfGenExceptionEvent(dump.exc_frame.xt_exccause, dump.pc, dump.badvaddr);
  9064ef:	da40      	mov.n	a10, a4
  9064f1:	dc30      	mov.n	a12, a3

	dump.exc_frame              = *exc_frame; /* structure copy */
	dump.badvaddr               = exc_vaddr;
	dump.exc_frame.xt_exccause  = exc_cause;
	dump.pc                     = exc_frame->xt_pc;
	dump.assline                = 0;
  9064f3:	c020      	movi.n	a2, 0
	uint32_t  exc_cause, exc_vaddr;
	asm volatile("rsr %0,%1" : "=r" (exc_cause) : "n" (EXCCAUSE));
	asm volatile("rsr %0,%1" : "=r" (exc_vaddr) : "n" (EXCVADDR));

	dump.exc_frame              = *exc_frame; /* structure copy */
	dump.badvaddr               = exc_vaddr;
  9064f5:	9313      	s32i.n	a3, a1, 12
	dump.exc_frame.xt_exccause  = exc_cause;
	dump.pc                     = exc_frame->xt_pc;
  9064f7:	9b12      	s32i.n	a11, a1, 8
	dump.assline                = 0;
  9064f9:	9211      	s32i.n	a2, a1, 4
	asm volatile("rsr %0,%1" : "=r" (exc_cause) : "n" (EXCCAUSE));
	asm volatile("rsr %0,%1" : "=r" (exc_vaddr) : "n" (EXCVADDR));

	dump.exc_frame              = *exc_frame; /* structure copy */
	dump.badvaddr               = exc_vaddr;
	dump.exc_frame.xt_exccause  = exc_cause;
  9064fb:	941c      	s32i.n	a4, a1, 48
	dump.pc                     = exc_frame->xt_pc;
	dump.assline                = 0;

	zfGenExceptionEvent(dump.exc_frame.xt_exccause, dump.pc, dump.badvaddr);
  9064fd:	5bffde        	call8	906478 <zfGenExceptionEvent>

#if SYSTEM_MODULE_PRINT
	A_PRINTF("\nFatal exception (%d): \tpc=0x%x \n\r\tbadvaddr=0x%x \n\r\tdump area=0x%x\n",
  906500:	126915        	l32r	a2, 8e0954 <_bss_end+0x3cda44>
  906503:	8b1c      	l32i.n	a11, a1, 48
  906505:	232212        	l32i	a3, a2, 72
  906508:	8c12      	l32i.n	a12, a1, 8
  90650a:	8d13      	l32i.n	a13, a1, 12
  90650c:	1a6960        	l32r	a10, 8e0a8c <_bss_end+0x3cdb7c>
  90650f:	de10      	mov.n	a14, a1
  906511:	0b3000        	callx8	a3
		 dump.exc_frame.xt_exccause, dump.pc, dump.badvaddr, &dump);
	PRINT_FAILURE_STATE();
  906514:	0bb130        	rsr.epc1	a11
  906517:	0cb230        	rsr.epc2	a12
  90651a:	0db330        	rsr.epc3	a13
  90651d:	0eb430        	rsr.epc4	a14
  906520:	1a6961        	l32r	a10, 8e0aa4 <_bss_end+0x3cdb94>
  906523:	232212        	l32i	a3, a2, 72
  906526:	0b3000        	callx8	a3
  906529:	136912        	l32r	a3, 8e0974 <_bss_end+0x3cda64>
  90652c:	1a6962        	l32r	a10, 8e0ab4 <_bss_end+0x3cdba4>
  90652f:	0c0200        	memw
  906532:	8b30      	l32i.n	a11, a3, 0
  906534:	13691d        	l32r	a3, 8e09a8 <_bss_end+0x3cda98>
  906537:	0c0200        	memw
  90653a:	8c30      	l32i.n	a12, a3, 0
  90653c:	136919        	l32r	a3, 8e09a0 <_bss_end+0x3cda90>
  90653f:	0c0200        	memw
  906542:	8d30      	l32i.n	a13, a3, 0
  906544:	232212        	l32i	a3, a2, 72
  906547:	0b3000        	callx8	a3
#else
	A_PUTS("Fatal exception\n\r");
#endif
	A_ASSFAIL(&dump);
  90654a:	822a      	l32i.n	a2, a2, 40
  90654c:	da10      	mov.n	a10, a1
  90654e:	0b2000        	callx8	a2
  906551:	63fffc        	j	906551 <AR6002_fatal_exception_handler_patch+0x79>

00906554 <zfGenWrongEpidEvent>:
    
	mUSB_EP3_XFER_DONE();
}

LOCAL void zfGenWrongEpidEvent(uint32_t epid)
{
  906554:	6c1004        	entry	a1, 32
	uint32_t pattern   = 0x33221299;

	A_PRINTF("<WrongEPID>Tgt Drv send an event 44332212 to Host Drv\n");
  906557:	186915        	l32r	a8, 8e09ac <_bss_end+0x3cda9c>
  90655a:	1a6963        	l32r	a10, 8e0ae8 <_bss_end+0x3cdbd8>
  90655d:	288212        	l32i	a8, a8, 72
  906560:	0b8000        	callx8	a8

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  906563:	18695c        	l32r	a8, 8e0ad4 <_bss_end+0x3cdbc4>
	mUSB_STATUS_IN_INT_DISABLE();
  906566:	2a0ac0        	movi	a10, 192
  906569:	298000        	l8ui	a9, a8, 0
  90656c:	090947        	extui	a9, a9, 0, 8
  90656f:	0a9902        	or	a9, a9, a10
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  906572:	0c0200        	memw
  906575:	298400        	s8i	a9, a8, 0
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  906578:	18693c        	l32r	a8, 8e0a68 <_bss_end+0x3cdb58>
  90657b:	c09f      	movi.n	a9, 15
  90657d:	0c0200        	memw
  906580:	9980      	s32i.n	a9, a8, 0
  906582:	18695d        	l32r	a8, 8e0af8 <_bss_end+0x3cdbe8>
  906585:	196964        	l32r	a9, 8e0b18 <_bss_end+0x3cdc08>
  906588:	0c0200        	memw
  90658b:	9980      	s32i.n	a9, a8, 0
  90658d:	0c0200        	memw
  906590:	9280      	s32i.n	a2, a8, 0

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  906592:	18695f        	l32r	a8, 8e0b10 <_bss_end+0x3cdc00>
	iowrite32_usb(ZM_CBUS_FIFO_SIZE_OFFSET, 0x0f);

	iowrite32_usb(ZM_EP3_DATA_OFFSET, pattern);
	iowrite32_usb(ZM_EP3_DATA_OFFSET, epid);

	mUSB_EP3_XFER_DONE();
  906595:	c098      	movi.n	a9, 8
  906597:	228000        	l8ui	a2, a8, 0
  90659a:	020247        	extui	a2, a2, 0, 8
  90659d:	092202        	or	a2, a2, a9
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  9065a0:	0c0200        	memw
  9065a3:	228400        	s8i	a2, a8, 0
  9065a6:	d10f      	retw.n

009065a8 <HTCControlSvcProcessMsg_patch>:
}

void 
HTCControlSvcProcessMsg_patch(HTC_ENDPOINT_ID EndpointID, adf_nbuf_t hdr_buf,
			      adf_nbuf_t pBuffers, void *arg)
{
  9065a8:	6c1006        	entry	a1, 48
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  9065ab:	da40      	mov.n	a10, a4
  9065ad:	b41b      	addi.n	a11, a1, 4
  9065af:	dc10      	mov.n	a12, a1
  9065b1:	5801bb        	call8	906ca0 <__adf_nbuf_peek_header>
	/* we assume buffers are aligned such that we can access the message
	 * parameters directly*/
	adf_nbuf_peek_header(pBuffers, &anbdata, &anblen);
	pMsg = (HTC_UNKNOWN_MSG *)anbdata;

	if (pMsg->MessageID == HTC_MSG_SETUP_COMPLETE_ID) {
  9065b4:	8811      	l32i.n	a8, a1, 4
  9065b6:	298000        	l8ui	a9, a8, 0
  9065b9:	288001        	l8ui	a8, a8, 1
  9065bc:	089911        	slli	a9, a9, 8
  9065bf:	098802        	or	a8, a8, a9
  9065c2:	698407        	bnei	a8, 4, 9065cd <HTCControlSvcProcessMsg_patch+0x25>
		htc_complete_setup = 1;
  9065c5:	186965        	l32r	a8, 8e0b5c <_bss_end+0x3cdc4c>
  9065c8:	c091      	movi.n	a9, 1
  9065ca:	298400        	s8i	a9, a8, 0
	}

	HTCControlSvcProcessMsg(EndpointID, hdr_buf, pBuffers, arg);
  9065cd:	da20      	mov.n	a10, a2
  9065cf:	db30      	mov.n	a11, a3
  9065d1:	dc40      	mov.n	a12, a4
  9065d3:	dd50      	mov.n	a13, a5
  9065d5:	580ee5        	call8	90a16c <HTCControlSvcProcessMsg>
  9065d8:	d10f      	retw.n
	...

009065dc <HTCMsgRecvHandler_patch>:
}

/* Patch callback for check the endpoint ID is correct or not */
void 
HTCMsgRecvHandler_patch(adf_nbuf_t hdr_buf, adf_nbuf_t buffer, void *context)
{
  9065dc:	6c100a        	entry	a1, 80
	adf_nbuf_t tmp_nbuf;
	HTC_FRAME_HDR *pHTCHdr;
                
	if (hdr_buf == ADF_NBUF_NULL) {
		/* HTC hdr is not in the hdr_buf */
		tmp_nbuf = buffer;
  9065df:	033502        	or	a5, a3, a3
  9065e2:	022539        	movnez	a5, a2, a2
  9065e5:	2b1c24        	addi	a11, a1, 36
  9065e8:	055a02        	or	a10, a5, a5
  9065eb:	2c1c20        	addi	a12, a1, 32
  9065ee:	5801ac        	call8	906ca0 <__adf_nbuf_peek_header>
	} else {
		tmp_nbuf = hdr_buf;
	}
                
	adf_nbuf_peek_header(tmp_nbuf, &anbdata, &anblen);        
	pHTCHdr = (HTC_FRAME_HDR *)anbdata; 
  9065f1:	8619      	l32i.n	a6, a1, 36
  
	eid = pHTCHdr->EndpointID;
  9065f3:	2b6000        	l8ui	a11, a6, 0
    
	if ((eid != 0) && (htc_complete_setup == 0)) {
  9065f6:	64b132        	beqz	a11, 90672c <HTCMsgRecvHandler_patch+0x150>
  9065f9:	186965        	l32r	a8, 8e0b90 <_bss_end+0x3cdc80>
  9065fc:	288000        	l8ui	a8, a8, 0
  9065ff:	658095        	bnez	a8, 906698 <HTCMsgRecvHandler_patch+0xbc>
		A_PRINTF("\nHTC Hdr EndpointID = %d, anblen = %d\n", pHTCHdr->EndpointID, anblen);
  906602:	126915        	l32r	a2, 8e0a58 <_bss_end+0x3cdb48>
  906605:	8c18      	l32i.n	a12, a1, 32
  906607:	232212        	l32i	a3, a2, 72
  90660a:	1a6966        	l32r	a10, 8e0ba4 <_bss_end+0x3cdc94>
  90660d:	0b3000        	callx8	a3
		A_PRINTF("HTC Hder : %2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x\n",
                         *anbdata, *(anbdata+1), *(anbdata+2), *(anbdata+3), 
  906610:	8819      	l32i.n	a8, a1, 36
  
	eid = pHTCHdr->EndpointID;
    
	if ((eid != 0) && (htc_complete_setup == 0)) {
		A_PRINTF("\nHTC Hdr EndpointID = %d, anblen = %d\n", pHTCHdr->EndpointID, anblen);
		A_PRINTF("HTC Hder : %2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x\n",
  906612:	1a6967        	l32r	a10, 8e0bb0 <_bss_end+0x3cdca0>
  906615:	238005        	l8ui	a3, a8, 5
  906618:	2b8000        	l8ui	a11, a8, 0
  90661b:	2c8001        	l8ui	a12, a8, 1
  90661e:	2d8002        	l8ui	a13, a8, 2
  906621:	2e8003        	l8ui	a14, a8, 3
  906624:	2f8004        	l8ui	a15, a8, 4
  906627:	9310      	s32i.n	a3, a1, 0
  906629:	238006        	l8ui	a3, a8, 6
  90662c:	9311      	s32i.n	a3, a1, 4
  90662e:	238007        	l8ui	a3, a8, 7
  906631:	9312      	s32i.n	a3, a1, 8
  906633:	238008        	l8ui	a3, a8, 8
  906636:	9313      	s32i.n	a3, a1, 12
  906638:	238009        	l8ui	a3, a8, 9
  90663b:	9314      	s32i.n	a3, a1, 16
  90663d:	23800a        	l8ui	a3, a8, 10
  906640:	9315      	s32i.n	a3, a1, 20
  906642:	23800b        	l8ui	a3, a8, 11
  906645:	9316      	s32i.n	a3, a1, 24
  906647:	232212        	l32i	a3, a2, 72
  90664a:	0b3000        	callx8	a3
                         *anbdata, *(anbdata+1), *(anbdata+2), *(anbdata+3), 
                         *(anbdata+4), *(anbdata+5), *(anbdata+6), *(anbdata+7),
                         *(anbdata+8), *(anbdata+9), *(anbdata+10), *(anbdata+11)); 
		A_PRINTF("init_htc_handle = 0x%8x\n", init_htc_handle);
  90664d:	136969        	l32r	a3, 8e0bf4 <_bss_end+0x3cdce4>
  906650:	242212        	l32i	a4, a2, 72
  906653:	1a6968        	l32r	a10, 8e0bf4 <_bss_end+0x3cdce4>
  906656:	2b3200        	l32i	a11, a3, 0
  906659:	0b4000        	callx8	a4
            
		if (pHTCHdr->EndpointID == 1) {
  90665c:	266000        	l8ui	a6, a6, 0
  90665f:	696112        	bnei	a6, 1, 906675 <HTCMsgRecvHandler_patch+0x99>
			A_PRINTF("Return WMI Command buffer\n");
  906662:	242212        	l32i	a4, a2, 72
  906665:	1a696a        	l32r	a10, 8e0c10 <_bss_end+0x3cdd00>
  906668:	0b4000        	callx8	a4
			HTC_ReturnBuffers(init_htc_handle, 1, tmp_nbuf);
  90666b:	8a30      	l32i.n	a10, a3, 0
  90666d:	222282        	l32i	a2, a2, 0x208
  906670:	db60      	mov.n	a11, a6
  906672:	60001b        	j	906691 <HTCMsgRecvHandler_patch+0xb5>
		} else if ((pHTCHdr->EndpointID == 5) || (pHTCHdr->EndpointID == 6)) {
  906675:	266cfb        	addi	a6, a6, -5
  906678:	060647        	extui	a6, a6, 0, 8
  90667b:	6e6202        	bltui	a6, 2, 906681 <HTCMsgRecvHandler_patch+0xa5>
  90667e:	6000b3        	j	906735 <HTCMsgRecvHandler_patch+0x159>
			A_PRINTF("Return Data buffer\n");
  906681:	242212        	l32i	a4, a2, 72
  906684:	1a696b        	l32r	a10, 8e0c30 <_bss_end+0x3cdd20>
  906687:	0b4000        	callx8	a4
			HTC_ReturnBuffers(init_htc_handle, 6, tmp_nbuf);
  90668a:	8a30      	l32i.n	a10, a3, 0
  90668c:	222282        	l32i	a2, a2, 0x208
  90668f:	c0b6      	movi.n	a11, 6
  906691:	dc50      	mov.n	a12, a5
  906693:	0b2000        	callx8	a2
  906696:	d10f      	retw.n
		} else {
		}
	} else {
		if ((pHTCHdr->EndpointID < 0) || (pHTCHdr->EndpointID >= ENDPOINT_MAX)) {
  906698:	c185      	movi.n	a8, 21
  90669a:	7b8302        	bltu	a8, a11, 9066a0 <HTCMsgRecvHandler_patch+0xc4>
  90669d:	60008b        	j	90672c <HTCMsgRecvHandler_patch+0x150>
			A_PRINTF("HTC Hdr EndpointID = %d, anblen = %d\n", pHTCHdr->EndpointID, anblen);
  9066a0:	126915        	l32r	a2, 8e0af4 <_bss_end+0x3cdbe4>
  9066a3:	8c18      	l32i.n	a12, a1, 32
  9066a5:	232212        	l32i	a3, a2, 72
  9066a8:	1a696c        	l32r	a10, 8e0c58 <_bss_end+0x3cdd48>
			A_PRINTF("HTC Hder : %2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x\n", 
                                 *anbdata, *(anbdata+1), *(anbdata+2), *(anbdata+3), 
                                 *(anbdata+4), *(anbdata+5), *(anbdata+6), *(anbdata+7));

			if (anblen > 64) {
  9066ab:	c440      	movi.n	a4, 64
			HTC_ReturnBuffers(init_htc_handle, 6, tmp_nbuf);
		} else {
		}
	} else {
		if ((pHTCHdr->EndpointID < 0) || (pHTCHdr->EndpointID >= ENDPOINT_MAX)) {
			A_PRINTF("HTC Hdr EndpointID = %d, anblen = %d\n", pHTCHdr->EndpointID, anblen);
  9066ad:	0b3000        	callx8	a3
			A_PRINTF("HTC Hder : %2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x\n", 
                                 *anbdata, *(anbdata+1), *(anbdata+2), *(anbdata+3), 
  9066b0:	8819      	l32i.n	a8, a1, 36
		} else {
		}
	} else {
		if ((pHTCHdr->EndpointID < 0) || (pHTCHdr->EndpointID >= ENDPOINT_MAX)) {
			A_PRINTF("HTC Hdr EndpointID = %d, anblen = %d\n", pHTCHdr->EndpointID, anblen);
			A_PRINTF("HTC Hder : %2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x\n", 
  9066b2:	1a696d        	l32r	a10, 8e0c68 <_bss_end+0x3cdd58>
  9066b5:	238005        	l8ui	a3, a8, 5
  9066b8:	2b8000        	l8ui	a11, a8, 0
  9066bb:	2c8001        	l8ui	a12, a8, 1
  9066be:	2d8002        	l8ui	a13, a8, 2
  9066c1:	2e8003        	l8ui	a14, a8, 3
  9066c4:	2f8004        	l8ui	a15, a8, 4
  9066c7:	9310      	s32i.n	a3, a1, 0
  9066c9:	238006        	l8ui	a3, a8, 6
  9066cc:	9311      	s32i.n	a3, a1, 4
  9066ce:	238007        	l8ui	a3, a8, 7
  9066d1:	231602        	s32i	a3, a1, 8
  9066d4:	232212        	l32i	a3, a2, 72
  9066d7:	0b3000        	callx8	a3
                                 *anbdata, *(anbdata+1), *(anbdata+2), *(anbdata+3), 
                                 *(anbdata+4), *(anbdata+5), *(anbdata+6), *(anbdata+7));

			if (anblen > 64) {
  9066da:	231208        	l32i	a3, a1, 32
  9066dd:	734b20        	bgeu	a4, a3, 906701 <HTCMsgRecvHandler_patch+0x125>
				A_PRINTF("EP1-Tx-Data with Wrong Htc Header Endpoint ID, WAR free this buffer\n");
  9066e0:	232212        	l32i	a3, a2, 72
  9066e3:	1a696e        	l32r	a10, 8e0c9c <_bss_end+0x3cdd8c>
  9066e6:	0b3000        	callx8	a3
				HTC_ReturnBuffers(init_htc_handle, 6, tmp_nbuf);
  9066e9:	146969        	l32r	a4, 8e0c90 <_bss_end+0x3cdd80>
  9066ec:	232282        	l32i	a3, a2, 0x208
  9066ef:	8a40      	l32i.n	a10, a4, 0
  9066f1:	c0b6      	movi.n	a11, 6
  9066f3:	dc50      	mov.n	a12, a5
  9066f5:	0b3000        	callx8	a3
				A_PRINTF("EP1-Tx-Data > Free this buffer successfully\n");
  9066f8:	1a696f        	l32r	a10, 8e0cb4 <_bss_end+0x3cdda4>
  9066fb:	222212        	l32i	a2, a2, 72
  9066fe:	600024        	j	906726 <HTCMsgRecvHandler_patch+0x14a>
			} else {
				A_PRINTF("EP4-WMI-Cmd with Wrong Htc Header Endpoint ID, WAR free this buffer\n");
  906701:	232212        	l32i	a3, a2, 72
  906704:	1a6970        	l32r	a10, 8e0cc4 <_bss_end+0x3cddb4>
  906707:	0b3000        	callx8	a3
				zfGenWrongEpidEvent((a_uint32_t)pHTCHdr->EndpointID);
  90670a:	2a6000        	l8ui	a10, a6, 0
  90670d:	5bff91        	call8	906554 <zfGenWrongEpidEvent>
				HTC_ReturnBuffers(init_htc_handle, 1, tmp_nbuf);
  906710:	146969        	l32r	a4, 8e0cb4 <_bss_end+0x3cdda4>
  906713:	232282        	l32i	a3, a2, 0x208
  906716:	8a40      	l32i.n	a10, a4, 0
  906718:	c0b1      	movi.n	a11, 1
  90671a:	055c02        	or	a12, a5, a5
  90671d:	0b3000        	callx8	a3
				A_PRINTF("EP4-WMI-Cmd > Free this buffer successfully\n");
  906720:	1a6971        	l32r	a10, 8e0ce4 <_bss_end+0x3cddd4>
  906723:	222212        	l32i	a2, a2, 72
  906726:	0b2000        	callx8	a2
  906729:	d10f      	retw.n
  90672b:	00da20        	excw
			}
		} else
			HTCMsgRecvHandler( hdr_buf, buffer, context);
  90672e:	db30      	mov.n	a11, a3
  906730:	dc40      	mov.n	a12, a4
  906732:	580f18        	call8	90a394 <HTCMsgRecvHandler>
  906735:	d10f      	retw.n
	...

00906738 <init_mem>:
	}
}
#endif

void init_mem()
{
  906738:	6c1004        	entry	a1, 32
	int i = 0;
	uint32_t *temp = (uint32_t *)ALLOCRAM_START;

	/* clear bss segment */
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
  90673b:	186972        	l32r	a8, 8e0d04 <_bss_end+0x3cddf4>
  90673e:	196973        	l32r	a9, 8e0d0c <_bss_end+0x3cddfc>
		*temp = 0;
  906741:	c0a0      	movi.n	a10, 0
{
	int i = 0;
	uint32_t *temp = (uint32_t *)ALLOCRAM_START;

	/* clear bss segment */
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
  906743:	600003        	j	90674a <init_mem+0x12>
		*temp = 0;
  906746:	9a80      	s32i.n	a10, a8, 0
{
	int i = 0;
	uint32_t *temp = (uint32_t *)ALLOCRAM_START;

	/* clear bss segment */
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
  906748:	b488      	addi.n	a8, a8, 4
  90674a:	7983f8        	bltu	a8, a9, 906746 <init_mem+0xe>
		*temp = 0;

	/* clear heap segment */
	for(i = 0; i < ((ALLOCRAM_SIZE - 4)/4); i++)
  90674d:	1a6974        	l32r	a10, 8e0d20 <_bss_end+0x3cde10>
  906750:	196927        	l32r	a9, 8e0bec <_bss_end+0x3cdcdc>
  906753:	09a90c        	sub	a9, a10, a9
  906756:	092914        	srli	a9, a9, 2
			HTCMsgRecvHandler( hdr_buf, buffer, context);
	}
}
#endif

void init_mem()
  906759:	08990a        	addx4	a9, a9, a8
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
		*temp = 0;

	/* clear heap segment */
	for(i = 0; i < ((ALLOCRAM_SIZE - 4)/4); i++)
		temp[i] = 0;
  90675c:	c0a0      	movi.n	a10, 0
  90675e:	600003        	j	906765 <init_mem+0x2d>
  906761:	9a80      	s32i.n	a10, a8, 0
  906763:	b488      	addi.n	a8, a8, 4
	/* clear bss segment */
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
		*temp = 0;

	/* clear heap segment */
	for(i = 0; i < ((ALLOCRAM_SIZE - 4)/4); i++)
  906765:	7989f8        	bne	a8, a9, 906761 <init_mem+0x29>
		temp[i] = 0;
}
  906768:	d10f      	retw.n
	...

0090676c <wlan_task>:
	}
	return;
}

void __noreturn wlan_task(void)
{
  90676c:	6c1004        	entry	a1, 32
	loop_low=loop_high=0;
  90676f:	136975        	l32r	a3, 8e0d44 <_bss_end+0x3cde34>
  906772:	c020      	movi.n	a2, 0
  906774:	9230      	s32i.n	a2, a3, 0
  906776:	136976        	l32r	a3, 8e0d50 <_bss_end+0x3cde40>
  906779:	9230      	s32i.n	a2, a3, 0

	while(1) {
		/* update wdt timer */
		A_WDT_TASK();
  90677b:	126915        	l32r	a2, 8e0bd0 <_bss_end+0x3cdcc0>
  90677e:	23225c        	l32i	a3, a2, 0x170
  906781:	0b3000        	callx8	a3

		/* UPDATE cticks - to be moved to idle_tsk, put here will be easier to read  */
		A_CLOCK_TICK();
  906784:	232240        	l32i	a3, a2, 0x100
  906787:	0b3000        	callx8	a3

		HIF_isr_handler(NULL);
  90678a:	23227b        	l32i	a3, a2, 0x1ec
  90678d:	c0a0      	movi.n	a10, 0
  90678f:	0b3000        	callx8	a3

#if MAGPIE_ENABLE_WLAN == 1
		wlan_pci_isr();
  906792:	580d39        	call8	909c78 <wlan_pci_isr>
#endif

		A_TASKLET_RUN();
  906795:	23226d        	l32i	a3, a2, 0x1b4
  906798:	0b3000        	callx8	a3
		A_TIMER_RUN();
  90679b:	232245        	l32i	a3, a2, 0x114
  90679e:	0b3000        	callx8	a3

		/* Very low priority tasks */
		if ((loop_low & 0x1fff) == 0x7)
  9067a1:	136976        	l32r	a3, 8e0d7c <_bss_end+0x3cde6c>
  9067a4:	8830      	l32i.n	a8, a3, 0
  9067a6:	08084c        	extui	a8, a8, 0, 13
  9067a9:	698705        	bnei	a8, 7, 9067b2 <wlan_task+0x46>
			A_DBG_TASK();
  9067ac:	28226f        	l32i	a8, a2, 0x1bc
  9067af:	0b8000        	callx8	a8
		temp[i] = 0;
}

static void idle_task()
{
	if (loop_low == 0xffffffff) {
  9067b2:	8830      	l32i.n	a8, a3, 0
  9067b4:	698008        	bnei	a8, -1, 9067c0 <wlan_task+0x54>
		loop_low = 0;
  9067b7:	c080      	movi.n	a8, 0
  9067b9:	9830      	s32i.n	a8, a3, 0
		loop_high++;
  9067bb:	136975        	l32r	a3, 8e0d90 <_bss_end+0x3cde80>
  9067be:	8830      	l32i.n	a8, a3, 0
	} else {
		loop_low++;
  9067c0:	b188      	addi.n	a8, a8, 1
  9067c2:	9830      	s32i.n	a8, a3, 0
  9067c4:	63ffb6        	j	90677e <wlan_task+0x12>
	...

009067c8 <htc_setup_comp>:
#define MAGPIE 1

#if MAGPIE==1

void htc_setup_comp(void)
{
  9067c8:	6c1004        	entry	a1, 32
  9067cb:	d10f      	retw.n
  9067cd:	000000        	ill

009067d0 <_wmi_cmd_rsp>:
	}
}

void _wmi_cmd_rsp(void *pContext, WMI_COMMAND_ID cmd_id, A_UINT16 SeqNo,
		  A_UINT8 *buffer, int Length)
{
  9067d0:	6c1006        	entry	a1, 48
	adf_nbuf_t netbuf = ADF_NBUF_NULL;
	A_UINT8 *pData;

	netbuf = WMI_AllocEvent(pContext, WMI_EVT_CLASS_CMD_REPLY, sizeof(WMI_CMD_HDR) + Length);
  9067d3:	176915        	l32r	a7, 8e0c28 <_bss_end+0x3cdd18>
  9067d6:	da20      	mov.n	a10, a2
  9067d8:	28728d        	l32i	a8, a7, 0x234
  9067db:	2b0a01        	movi	a11, 1
  9067de:	2c6c04        	addi	a12, a6, 4
  9067e1:	0b8000        	callx8	a8
	}
}

void _wmi_cmd_rsp(void *pContext, WMI_COMMAND_ID cmd_id, A_UINT16 SeqNo,
		  A_UINT8 *buffer, int Length)
{
  9067e4:	04044f        	extui	a4, a4, 0, 16
	adf_nbuf_t netbuf = ADF_NBUF_NULL;
	A_UINT8 *pData;

	netbuf = WMI_AllocEvent(pContext, WMI_EVT_CLASS_CMD_REPLY, sizeof(WMI_CMD_HDR) + Length);
  9067e7:	d8a0      	mov.n	a8, a10
    
	if (netbuf == ADF_NBUF_NULL) {
  9067e9:	cea5      	bnez.n	a10, 906812 <_wmi_cmd_rsp+0x42>
		adf_os_print("%s: buffer allocation for event_id %x failed!\n", __FUNCTION__, cmd_id);
  9067eb:	126978        	l32r	a2, 8e0dcc <_bss_end+0x3cdebc>
  9067ee:	247212        	l32i	a4, a7, 72
  9067f1:	1a6977        	l32r	a10, 8e0dd0 <_bss_end+0x3cdec0>
  9067f4:	022b02        	or	a11, a2, a2
  9067f7:	033c02        	or	a12, a3, a3
  9067fa:	0b4000        	callx8	a4
		adf_os_assert(0);
  9067fd:	1a6979        	l32r	a10, 8e0de4 <_bss_end+0x3cded4>
  906800:	237212        	l32i	a3, a7, 72
  906803:	db20      	mov.n	a11, a2
  906805:	0b3000        	callx8	a3
  906808:	12697a        	l32r	a2, 8e0df0 <_bss_end+0x3cdee0>
  90680b:	0c0200        	memw
  90680e:	8220      	l32i.n	a2, a2, 0
  906810:	d10f      	retw.n
		return;
	}

	if (Length != 0 && buffer != NULL) {
  906812:	c962      	beqz.n	a6, 906828 <_wmi_cmd_rsp+0x58>
  906814:	c950      	beqz.n	a5, 906828 <_wmi_cmd_rsp+0x58>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  906816:	db60      	mov.n	a11, a6
  906818:	9810      	s32i.n	a8, a1, 0
  90681a:	580105        	call8	906c30 <__adf_nbuf_put_tail>
}

/* move a memory buffer */
static inline void 		__adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    A_MEMCPY(dst,src,size);    
  90681d:	8775      	l32i.n	a7, a7, 20
  90681f:	db50      	mov.n	a11, a5
  906821:	dc60      	mov.n	a12, a6
  906823:	0b7000        	callx8	a7
  906826:	8810      	l32i.n	a8, a1, 0
		pData = (A_UINT8 *)adf_nbuf_put_tail(netbuf, Length);
		adf_os_mem_copy(pData, buffer, Length);
	}

	WMI_SendEvent(pContext, netbuf, cmd_id, SeqNo, Length);
  906828:	156915        	l32r	a5, 8e0c7c <_bss_end+0x3cdd6c>
  90682b:	da20      	mov.n	a10, a2
  90682d:	25528e        	l32i	a5, a5, 0x238
  906830:	db80      	mov.n	a11, a8
  906832:	030c4f        	extui	a12, a3, 0, 16
  906835:	dd40      	mov.n	a13, a4
  906837:	de60      	mov.n	a14, a6
  906839:	0b5000        	callx8	a5
  90683c:	d10f      	retw.n
	...

00906840 <Magpie_init>:
}


void Magpie_init(void)
{
  906840:	6c1004        	entry	a1, 32
	A_PRINTF("[+++Magpie_init]\n\r");
  906843:	126915        	l32r	a2, 8e0c98 <_bss_end+0x3cdd88>
  906846:	1a697b        	l32r	a10, 8e0e34 <_bss_end+0x3cdf24>
  906849:	232212        	l32i	a3, a2, 72
  90684c:	0b3000        	callx8	a3
 
	A_PRINTF("[+++VBUF_init(%d)]\n\r", MAX_BUF_NUM);
  90684f:	13697c        	l32r	a3, 8e0e40 <_bss_end+0x3cdf30>
  906852:	282212        	l32i	a8, a2, 72
  906855:	2b0a64        	movi	a11, 100
  906858:	da30      	mov.n	a10, a3
  90685a:	0b8000        	callx8	a8
	VBUF_init(MAX_BUF_NUM);
  90685d:	2822a0        	l32i	a8, a2, 0x280
  906860:	2a0a64        	movi	a10, 100
  906863:	0b8000        	callx8	a8
    
	A_PRINTF("[+++VBUF_init(%d)]\n\r", MAX_DESC_NUM);
  906866:	282212        	l32i	a8, a2, 72
  906869:	da30      	mov.n	a10, a3
  90686b:	2b0a64        	movi	a11, 100
  90686e:	0b8000        	callx8	a8
	VDESC_init(MAX_DESC_NUM);
  906871:	2222a5        	l32i	a2, a2, 0x294
  906874:	2a0a64        	movi	a10, 100
  906877:	0b2000        	callx8	a2
  90687a:	d10f      	retw.n

0090687c <__adf_nbuf_alloc>:
 * @return newly allocated nbuf
 */
__adf_nbuf_t 
__adf_nbuf_alloc(adf_os_size_t size, a_uint32_t reserve, 
                 a_uint32_t align)
{
  90687c:	6c1004        	entry	a1, 32
    VBUF *buf = NULL;
    VDESC *desc;
    
    buf = VBUF_alloc_vbuf();
  90687f:	156915        	l32r	a5, 8e0cd4 <_bss_end+0x3cddc4>
 * @return newly allocated nbuf
 */
__adf_nbuf_t 
__adf_nbuf_alloc(adf_os_size_t size, a_uint32_t reserve, 
                 a_uint32_t align)
{
  906882:	d620      	mov.n	a6, a2
    VBUF *buf = NULL;
    VDESC *desc;
    
    buf = VBUF_alloc_vbuf();
  906884:	2a52a1        	l32i	a10, a5, 0x284
  906887:	0ba000        	callx8	a10
  90688a:	d2a0      	mov.n	a2, a10
    if ( buf != NULL ) {
  90688c:	64a028        	beqz	a10, 9068b8 <__adf_nbuf_alloc+0x3c>
        desc = VDESC_alloc_vdesc();
  90688f:	2a52a6        	l32i	a10, a5, 0x298
  906892:	0ba000        	callx8	a10
        desc->buf_addr = (A_UINT8 *)A_ALLOCRAM(size);
  906895:	255252        	l32i	a5, a5, 0x148
    VBUF *buf = NULL;
    VDESC *desc;
    
    buf = VBUF_alloc_vbuf();
    if ( buf != NULL ) {
        desc = VDESC_alloc_vdesc();
  906898:	d4a0      	mov.n	a4, a10
        desc->buf_addr = (A_UINT8 *)A_ALLOCRAM(size);
  90689a:	db60      	mov.n	a11, a6
  90689c:	c0a0      	movi.n	a10, 0
  90689e:	0b5000        	callx8	a5
        desc->buf_size = size;
        desc->next_desc = NULL;
  9068a1:	c080      	movi.n	a8, 0
    VDESC *desc;
    
    buf = VBUF_alloc_vbuf();
    if ( buf != NULL ) {
        desc = VDESC_alloc_vdesc();
        desc->buf_addr = (A_UINT8 *)A_ALLOCRAM(size);
  9068a3:	9a41      	s32i.n	a10, a4, 4
        desc->buf_size = size;
  9068a5:	264504        	s16i	a6, a4, 8
        desc->next_desc = NULL;
  9068a8:	9840      	s32i.n	a8, a4, 0
        desc->data_offset = reserve;
  9068aa:	234505        	s16i	a3, a4, 10
        desc->data_size = 0;
  9068ad:	284506        	s16i	a8, a4, 12
        desc->control = 0;    
  9068b0:	284507        	s16i	a8, a4, 14
        
        buf->desc_list = desc;
  9068b3:	9420      	s32i.n	a4, a2, 0
        buf->buf_length = 0;    
  9068b5:	282504        	s16i	a8, a2, 8
    }
    
    return buf;
}   
  9068b8:	d10f      	retw.n
	...

009068bc <__adf_nbuf_free>:
 * @param hdl
 * @param adf_nbuf
 * 
 */
void __adf_nbuf_free(__adf_nbuf_t  buf)
{
  9068bc:	6c1004        	entry	a1, 32
    adf_os_assert(0);
  9068bf:	186915        	l32r	a8, 8e0d14 <_bss_end+0x3cde04>
  9068c2:	1a697d        	l32r	a10, 8e0eb8 <_bss_end+0x3cdfa8>
  9068c5:	288212        	l32i	a8, a8, 72
  9068c8:	1b697e        	l32r	a11, 8e0ec0 <_bss_end+0x3cdfb0>
  9068cb:	0b8000        	callx8	a8
  9068ce:	18697a        	l32r	a8, 8e0eb8 <_bss_end+0x3cdfa8>
  9068d1:	0c0200        	memw
  9068d4:	8880      	l32i.n	a8, a8, 0
  9068d6:	d10f      	retw.n

009068d8 <__adf_nbuf_realloc_headroom>:
 * 
 * @return new nbuf
 */
__adf_nbuf_t 
__adf_nbuf_realloc_headroom(__adf_nbuf_t buf, a_uint32_t headroom)
{
  9068d8:	6c1004        	entry	a1, 32
    adf_os_assert(0);
  9068db:	186915        	l32r	a8, 8e0d30 <_bss_end+0x3cde20>
  9068de:	1b697f        	l32r	a11, 8e0edc <_bss_end+0x3cdfcc>
  9068e1:	288212        	l32i	a8, a8, 72
  9068e4:	1a697d        	l32r	a10, 8e0ed8 <_bss_end+0x3cdfc8>
    return NULL;
}
  9068e7:	c020      	movi.n	a2, 0
 * @return new nbuf
 */
__adf_nbuf_t 
__adf_nbuf_realloc_headroom(__adf_nbuf_t buf, a_uint32_t headroom)
{
    adf_os_assert(0);
  9068e9:	0b8000        	callx8	a8
  9068ec:	18697a        	l32r	a8, 8e0ed4 <_bss_end+0x3cdfc4>
  9068ef:	0c0200        	memw
  9068f2:	8880      	l32i.n	a8, a8, 0
    return NULL;
}
  9068f4:	d10f      	retw.n
	...

009068f8 <__adf_nbuf_realloc_tailroom>:
 * 
 * @return struct mbuf * (buffer with the new tailroom)
 */
__adf_nbuf_t 
__adf_nbuf_realloc_tailroom(__adf_nbuf_t  buf, a_uint32_t tailroom)
{
  9068f8:	6c1004        	entry	a1, 32
    adf_os_assert(0);
  9068fb:	186915        	l32r	a8, 8e0d50 <_bss_end+0x3cde40>
  9068fe:	1b6980        	l32r	a11, 8e0f00 <_bss_end+0x3cdff0>
  906901:	288212        	l32i	a8, a8, 72
  906904:	1a697d        	l32r	a10, 8e0ef8 <_bss_end+0x3cdfe8>
    return NULL;
}
  906907:	c020      	movi.n	a2, 0
 * @return struct mbuf * (buffer with the new tailroom)
 */
__adf_nbuf_t 
__adf_nbuf_realloc_tailroom(__adf_nbuf_t  buf, a_uint32_t tailroom)
{
    adf_os_assert(0);
  906909:	0b8000        	callx8	a8
  90690c:	18697a        	l32r	a8, 8e0ef4 <_bss_end+0x3cdfe4>
  90690f:	0c0200        	memw
  906912:	8880      	l32i.n	a8, a8, 0
    return NULL;
}
  906914:	d10f      	retw.n
	...

00906918 <__adf_nbuf_expand>:
 * 
 * @return struct mbuf* (NULL if something goofed up)
 */
__adf_nbuf_t 
__adf_nbuf_expand(__adf_nbuf_t buf, a_uint32_t headroom, a_uint32_t tailroom)
{
  906918:	6c1004        	entry	a1, 32
    adf_os_assert(0);
  90691b:	186915        	l32r	a8, 8e0d70 <_bss_end+0x3cde60>
  90691e:	1b6981        	l32r	a11, 8e0f24 <_bss_end+0x3ce014>
  906921:	288212        	l32i	a8, a8, 72
  906924:	1a697d        	l32r	a10, 8e0f18 <_bss_end+0x3ce008>
    return NULL;
}
  906927:	c020      	movi.n	a2, 0
 * @return struct mbuf* (NULL if something goofed up)
 */
__adf_nbuf_t 
__adf_nbuf_expand(__adf_nbuf_t buf, a_uint32_t headroom, a_uint32_t tailroom)
{
    adf_os_assert(0);
  906929:	0b8000        	callx8	a8
  90692c:	18697a        	l32r	a8, 8e0f14 <_bss_end+0x3ce004>
  90692f:	0c0200        	memw
  906932:	8880      	l32i.n	a8, a8, 0
    return NULL;
}
  906934:	d10f      	retw.n
	...

00906938 <__adf_nbuf_push_head>:
 * @return new data pointer ,NULL if the len is more than the
 *         space available in the head frag.
 */
a_uint8_t *       
__adf_nbuf_push_head(__adf_nbuf_t buf, adf_os_size_t len)
{
  906938:	6c1004        	entry	a1, 32
    a_uint8_t *ptr = NULL; 
    VDESC *desc = buf->desc_list;
  90693b:	8820      	l32i.n	a8, a2, 0
    
    desc->data_offset -= len;
  90693d:	03034f        	extui	a3, a3, 0, 16
    desc->data_size += len;
  906940:	2a8106        	l16ui	a10, a8, 12
__adf_nbuf_push_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL; 
    VDESC *desc = buf->desc_list;
    
    desc->data_offset -= len;
  906943:	298105        	l16ui	a9, a8, 10
    desc->data_size += len;
  906946:	aa3a      	add.n	a10, a3, a10
  906948:	2a8506        	s16i	a10, a8, 12
__adf_nbuf_push_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL; 
    VDESC *desc = buf->desc_list;
    
    desc->data_offset -= len;
  90694b:	03990c        	sub	a9, a9, a3
    desc->data_size += len;
    buf->buf_length += len;
  90694e:	2a2104        	l16ui	a10, a2, 8
__adf_nbuf_push_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL; 
    VDESC *desc = buf->desc_list;
    
    desc->data_offset -= len;
  906951:	09094f        	extui	a9, a9, 0, 16
  906954:	298505        	s16i	a9, a8, 10
    desc->data_size += len;
    buf->buf_length += len;
  906957:	aa33      	add.n	a3, a3, a10
  906959:	232504        	s16i	a3, a2, 8
    ptr = desc->buf_addr + desc->data_offset;
  90695c:	8281      	l32i.n	a2, a8, 4
    return(ptr);
}
  90695e:	a922      	add.n	a2, a2, a9
  906960:	d10f      	retw.n
	...

00906964 <__adf_nbuf_pull_head>:
 * 
 * @return new data pointer
 */
a_uint8_t * 
__adf_nbuf_pull_head(__adf_nbuf_t buf, adf_os_size_t len)
{
  906964:	6c1004        	entry	a1, 32
    a_uint8_t *ptr = NULL;
    VDESC *desc = buf->desc_list;
  906967:	8820      	l32i.n	a8, a2, 0
    
    desc->data_offset += len;
  906969:	03034f        	extui	a3, a3, 0, 16
    desc->data_size -= len;
  90696c:	2a8106        	l16ui	a10, a8, 12
__adf_nbuf_pull_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL;
    VDESC *desc = buf->desc_list;
    
    desc->data_offset += len;
  90696f:	298105        	l16ui	a9, a8, 10
    desc->data_size -= len;
  906972:	03aa0c        	sub	a10, a10, a3
  906975:	2a8506        	s16i	a10, a8, 12
__adf_nbuf_pull_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL;
    VDESC *desc = buf->desc_list;
    
    desc->data_offset += len;
  906978:	a939      	add.n	a9, a3, a9
    desc->data_size -= len;
    buf->buf_length -= len;
  90697a:	2a2104        	l16ui	a10, a2, 8
__adf_nbuf_pull_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL;
    VDESC *desc = buf->desc_list;
    
    desc->data_offset += len;
  90697d:	09094f        	extui	a9, a9, 0, 16
  906980:	298505        	s16i	a9, a8, 10
    desc->data_size -= len;
    buf->buf_length -= len;
  906983:	03a30c        	sub	a3, a10, a3
  906986:	232504        	s16i	a3, a2, 8
    ptr = desc->buf_addr + desc->data_offset;
  906989:	8281      	l32i.n	a2, a8, 4
    
    return ptr;
}
  90698b:	a922      	add.n	a2, a2, a9
  90698d:	d10f      	retw.n
	...

00906990 <__adf_nbuf_copy>:
 * 
 * @return struct mbuf * (newly allocated buffer)
 */
__adf_nbuf_t 
__adf_nbuf_copy(__adf_nbuf_t src)
{
  906990:	6c1004        	entry	a1, 32
    __adf_nbuf_t buf = NULL; 

    adf_os_assert(src != NULL);
  906993:	cd25      	bnez.n	a2, 9069ac <__adf_nbuf_copy+0x1c>
  906995:	186915        	l32r	a8, 8e0dec <_bss_end+0x3cdedc>
  906998:	1a697d        	l32r	a10, 8e0f8c <_bss_end+0x3ce07c>
  90699b:	288212        	l32i	a8, a8, 72
  90699e:	1b6982        	l32r	a11, 8e0fa8 <_bss_end+0x3ce098>
  9069a1:	0b8000        	callx8	a8
  9069a4:	18697a        	l32r	a8, 8e0f8c <_bss_end+0x3ce07c>
  9069a7:	0c0200        	memw
  9069aa:	8880      	l32i.n	a8, a8, 0
    
    return buf;
}
  9069ac:	c020      	movi.n	a2, 0
  9069ae:	d10f      	retw.n

009069b0 <__adf_nbuf_unshare>:
 * 
 * @return new nbuf
 */
__adf_nbuf_t 
__adf_nbuf_unshare(__adf_nbuf_t  src)
{
  9069b0:	6c1004        	entry	a1, 32
    __adf_nbuf_t buf = NULL;

    adf_os_assert(src != NULL);
  9069b3:	cd25      	bnez.n	a2, 9069cc <__adf_nbuf_unshare+0x1c>
  9069b5:	186915        	l32r	a8, 8e0e0c <_bss_end+0x3cdefc>
  9069b8:	1a697d        	l32r	a10, 8e0fac <_bss_end+0x3ce09c>
  9069bb:	288212        	l32i	a8, a8, 72
  9069be:	1b6983        	l32r	a11, 8e0fcc <_bss_end+0x3ce0bc>
  9069c1:	0b8000        	callx8	a8
  9069c4:	18697a        	l32r	a8, 8e0fac <_bss_end+0x3ce09c>
  9069c7:	0c0200        	memw
  9069ca:	8880      	l32i.n	a8, a8, 0

    return buf;
}
  9069cc:	c020      	movi.n	a2, 0
  9069ce:	d10f      	retw.n

009069d0 <__adf_nbuf_frag_info>:
 * @param[out] sg (scatter/gather list of all the frags)
 * 
 */
void  
__adf_nbuf_frag_info(__adf_nbuf_t buf, adf_os_sglist_t	*sg)
{
  9069d0:	6c1004        	entry	a1, 32
    VDESC *desc = buf->desc_list;
  9069d3:	8820      	l32i.n	a8, a2, 0
  9069d5:	d930      	mov.n	a9, a3
    int count = 0;
  9069d7:	c0a0      	movi.n	a10, 0
    
    while( desc != NULL ) {
  9069d9:	600013        	j	9069f0 <__adf_nbuf_frag_info+0x20>
        sg->sg_segs[count].vaddr = desc->buf_addr + desc->data_offset;
  9069dc:	2b8105        	l16ui	a11, a8, 10
  9069df:	8c81      	l32i.n	a12, a8, 4
        sg->sg_segs[count].len   = desc->data_size;
        
        count++;        
  9069e1:	b1aa      	addi.n	a10, a10, 1
{
    VDESC *desc = buf->desc_list;
    int count = 0;
    
    while( desc != NULL ) {
        sg->sg_segs[count].vaddr = desc->buf_addr + desc->data_offset;
  9069e3:	abcb      	add.n	a11, a12, a11
  9069e5:	9b91      	s32i.n	a11, a9, 4
        sg->sg_segs[count].len   = desc->data_size;
  9069e7:	2b8106        	l16ui	a11, a8, 12
  9069ea:	9b92      	s32i.n	a11, a9, 8
        
        count++;        
        desc = desc->next_desc;
  9069ec:	8880      	l32i.n	a8, a8, 0
  9069ee:	b899      	addi.n	a9, a9, 8
__adf_nbuf_frag_info(__adf_nbuf_t buf, adf_os_sglist_t	*sg)
{
    VDESC *desc = buf->desc_list;
    int count = 0;
    
    while( desc != NULL ) {
  9069f0:	658fe8        	bnez	a8, 9069dc <__adf_nbuf_frag_info+0xc>
        
        count++;        
        desc = desc->next_desc;
    }
    
    sg->nsegs = count;
  9069f3:	9a30      	s32i.n	a10, a3, 0
  9069f5:	d10f      	retw.n
	...

009069f8 <__adf_nbuf_get_priv>:
 * 
 * @return uint8_t* ( pointer to the data )
 */
a_uint8_t *
__adf_nbuf_get_priv(__adf_nbuf_t buf)
{
  9069f8:	6c1004        	entry	a1, 32
    adf_os_assert(buf != NULL);
  9069fb:	cd25      	bnez.n	a2, 906a14 <__adf_nbuf_get_priv+0x1c>
  9069fd:	186915        	l32r	a8, 8e0e54 <_bss_end+0x3cdf44>
  906a00:	1a697d        	l32r	a10, 8e0ff4 <_bss_end+0x3ce0e4>
  906a03:	288212        	l32i	a8, a8, 72
  906a06:	1b6984        	l32r	a11, 8e1018 <_bss_end+0x3ce108>
  906a09:	0b8000        	callx8	a8
  906a0c:	18697a        	l32r	a8, 8e0ff4 <_bss_end+0x3ce0e4>
  906a0f:	0c0200        	memw
  906a12:	8880      	l32i.n	a8, a8, 0

    return buf->ctx;
}
  906a14:	bc22      	addi.n	a2, a2, 12
  906a16:	d10f      	retw.n

00906a18 <__adf_nbuf_queue_add>:
 * 
 */
void 
__adf_nbuf_queue_add(__adf_nbuf_qhead_t  *qhead, 
                     __adf_nbuf_t  buf)
{
  906a18:	6c1004        	entry	a1, 32
    qhead->qlen++;
  906a1b:	8822      	l32i.n	a8, a2, 8
  906a1d:	b188      	addi.n	a8, a8, 1
  906a1f:	9822      	s32i.n	a8, a2, 8

    buf->next_buf = NULL;
  906a21:	c080      	movi.n	a8, 0
  906a23:	9831      	s32i.n	a8, a3, 4

    if (qhead->head == NULL) {
  906a25:	8820      	l32i.n	a8, a2, 0
  906a27:	cc83      	bnez.n	a8, 906a2e <__adf_nbuf_queue_add+0x16>
        qhead->head = buf;
  906a29:	9320      	s32i.n	a3, a2, 0
  906a2b:	600003        	j	906a32 <__adf_nbuf_queue_add+0x1a>
    }
    else {
        qhead->tail->next_buf = buf;
  906a2e:	8821      	l32i.n	a8, a2, 4
  906a30:	9381      	s32i.n	a3, a8, 4
    }
    qhead->tail = buf;
  906a32:	9321      	s32i.n	a3, a2, 4
  906a34:	d10f      	retw.n
	...

00906a38 <__adf_nbuf_queue_remove>:
 * 
 * @return the nbuf
 */
__adf_nbuf_t   
__adf_nbuf_queue_remove(__adf_nbuf_qhead_t *qhead)
{
  906a38:	6c1004        	entry	a1, 32
  906a3b:	d820      	mov.n	a8, a2
    __adf_nbuf_t  b0 = NULL;

    if (qhead->head) {
  906a3d:	8220      	l32i.n	a2, a2, 0
  906a3f:	c929      	beqz.n	a2, 906a5c <__adf_nbuf_queue_remove+0x24>
        qhead->qlen--;
  906a41:	8982      	l32i.n	a9, a8, 8
        b0 = qhead->head;
        if ( qhead->head == qhead->tail ) {
  906a43:	8a81      	l32i.n	a10, a8, 4
__adf_nbuf_queue_remove(__adf_nbuf_qhead_t *qhead)
{
    __adf_nbuf_t  b0 = NULL;

    if (qhead->head) {
        qhead->qlen--;
  906a45:	b099      	addi.n	a9, a9, -1
  906a47:	9982      	s32i.n	a9, a8, 8
  906a49:	c090      	movi.n	a9, 0
        b0 = qhead->head;
        if ( qhead->head == qhead->tail ) {
  906a4b:	7a2907        	bne	a2, a10, 906a56 <__adf_nbuf_queue_remove+0x1e>
            qhead->head = NULL;
  906a4e:	9980      	s32i.n	a9, a8, 0
            qhead->tail = NULL;
  906a50:	9981      	s32i.n	a9, a8, 4
  906a52:	600004        	j	906a5a <__adf_nbuf_queue_remove+0x22>
  906a55:	008a21        	excw
        } else {
            qhead->head = qhead->head->next_buf;
  906a58:	9a80      	s32i.n	a10, a8, 0
        }
    
        b0->next_buf = NULL;
  906a5a:	9921      	s32i.n	a9, a2, 4
    }
	return b0;
}
  906a5c:	d10f      	retw.n
	...

00906a60 <__adf_nbuf_dmamap_create>:
 * 
 * @return a_status_t
 */
a_status_t 
__adf_nbuf_dmamap_create(__adf_os_device_t osdev, __adf_os_dma_map_t *dmap)
{
  906a60:	6c1004        	entry	a1, 32
    a_status_t retval = A_STATUS_OK;
    
    (*dmap) = A_ALLOCRAM(sizeof(struct __adf_dma_map));
  906a63:	126915        	l32r	a2, 8e0eb8 <_bss_end+0x3cdfa8>
  906a66:	c0a0      	movi.n	a10, 0
  906a68:	222252        	l32i	a2, a2, 0x148
  906a6b:	c0bc      	movi.n	a11, 12
  906a6d:	0b2000        	callx8	a2
  906a70:	9a30      	s32i.n	a10, a3, 0
    if(*dmap == NULL)
        return A_STATUS_ENOMEM;
  906a72:	c023      	movi.n	a2, 3
__adf_nbuf_dmamap_create(__adf_os_device_t osdev, __adf_os_dma_map_t *dmap)
{
    a_status_t retval = A_STATUS_OK;
    
    (*dmap) = A_ALLOCRAM(sizeof(struct __adf_dma_map));
    if(*dmap == NULL)
  906a74:	c8a2      	beqz.n	a10, 906a7a <__adf_nbuf_dmamap_create+0x1a>
        return A_STATUS_ENOMEM;
            
    (*dmap)->buf = NULL;
  906a76:	c020      	movi.n	a2, 0
  906a78:	92a0      	s32i.n	a2, a10, 0
    return retval;
}
  906a7a:	d10f      	retw.n

00906a7c <__adf_nbuf_map>:


a_status_t 
__adf_nbuf_map(__adf_os_device_t osdev, __adf_os_dma_map_t bmap, 
                          __adf_nbuf_t buf, adf_os_dma_dir_t dir)
{   
  906a7c:	6c1004        	entry	a1, 32
    bmap->buf = buf;
  906a7f:	9430      	s32i.n	a4, a3, 0
    
    return A_STATUS_OK;
}
  906a81:	c020      	movi.n	a2, 0
  906a83:	d10f      	retw.n
  906a85:	000000        	ill

00906a88 <__adf_nbuf_unmap>:

void 
__adf_nbuf_unmap(__adf_os_device_t osdev, __adf_os_dma_map_t bmap, 
                            adf_os_dma_dir_t dir)
{
  906a88:	6c1004        	entry	a1, 32
    bmap->buf = NULL;
  906a8b:	c080      	movi.n	a8, 0
  906a8d:	9830      	s32i.n	a8, a3, 0
  906a8f:	d10f      	retw.n
  906a91:	000000        	ill

00906a94 <__adf_nbuf_dmamap_destroy>:
}

void
__adf_nbuf_dmamap_destroy(__adf_os_device_t osdev, 
                          __adf_os_dma_map_t dmap)
{
  906a94:	6c1004        	entry	a1, 32
  906a97:	d10f      	retw.n
  906a99:	000000        	ill

00906a9c <__adf_nbuf_dmamap_info>:
 * @param[in]  bmap
 * @param[out] sg (map_info ptr)
 */
void 
__adf_nbuf_dmamap_info(__adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
  906a9c:	6c1004        	entry	a1, 32
    VDESC *desc = bmap->buf->desc_list;
  906a9f:	8820      	l32i.n	a8, a2, 0
  906aa1:	d930      	mov.n	a9, a3
  906aa3:	8880      	l32i.n	a8, a8, 0
    int count = 0;
  906aa5:	c0a0      	movi.n	a10, 0
    
    while( desc != NULL ) {
  906aa7:	600015        	j	906ac0 <__adf_nbuf_dmamap_info+0x24>
  906aaa:	00002b        	mulsh	a0, a0, a0
        sg->dma_segs[count].paddr = (adf_os_dma_addr_t)(desc->buf_addr + desc->data_offset);
  906aad:	8105      	l32i.n	a1, a0, 20
  906aaf:	8c81      	l32i.n	a12, a8, 4
        sg->dma_segs[count].len   = desc->data_size;
        
        count++;        
  906ab1:	b1aa      	addi.n	a10, a10, 1
{
    VDESC *desc = bmap->buf->desc_list;
    int count = 0;
    
    while( desc != NULL ) {
        sg->dma_segs[count].paddr = (adf_os_dma_addr_t)(desc->buf_addr + desc->data_offset);
  906ab3:	abcb      	add.n	a11, a12, a11
  906ab5:	9b91      	s32i.n	a11, a9, 4
        sg->dma_segs[count].len   = desc->data_size;
  906ab7:	2b8106        	l16ui	a11, a8, 12
        
        count++;        
        desc = desc->next_desc;
  906aba:	8880      	l32i.n	a8, a8, 0
    VDESC *desc = bmap->buf->desc_list;
    int count = 0;
    
    while( desc != NULL ) {
        sg->dma_segs[count].paddr = (adf_os_dma_addr_t)(desc->buf_addr + desc->data_offset);
        sg->dma_segs[count].len   = desc->data_size;
  906abc:	9b92      	s32i.n	a11, a9, 8
  906abe:	b899      	addi.n	a9, a9, 8
__adf_nbuf_dmamap_info(__adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
    VDESC *desc = bmap->buf->desc_list;
    int count = 0;
    
    while( desc != NULL ) {
  906ac0:	658fe8        	bnez	a8, 906aac <__adf_nbuf_dmamap_info+0x10>
        
        count++;        
        desc = desc->next_desc;
    }
    
    sg->nsegs = count;    
  906ac3:	9a30      	s32i.n	a10, a3, 0
  906ac5:	d10f      	retw.n
	...

00906ac8 <__adf_nbuf_set_rx_cksum>:
 * @param buf
 * @param cksum
 */
void 
__adf_nbuf_set_rx_cksum(__adf_nbuf_t buf, adf_nbuf_rx_cksum_t *cksum)
{
  906ac8:	6c1004        	entry	a1, 32
  906acb:	d10f      	retw.n
  906acd:	000000        	ill

00906ad0 <__adf_nbuf_get_vlan_info>:
}

a_status_t      
__adf_nbuf_get_vlan_info(adf_net_handle_t hdl, __adf_nbuf_t buf, 
                         adf_net_vlanhdr_t *vlan)
{
  906ad0:	6c1004        	entry	a1, 32
    return A_STATUS_OK;
}
  906ad3:	c020      	movi.n	a2, 0
  906ad5:	d10f      	retw.n
	...

00906ad8 <__adf_nbuf_create_frm_frag>:

__adf_nbuf_t
__adf_nbuf_create_frm_frag(__adf_nbuf_queue_t *qhead)
{
  906ad8:	6c1004        	entry	a1, 32
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
    a_uint32_t cnt = 0, len = __adf_nbuf_queue_len(qhead);
    a_uint16_t total_len = 0;

    buf_head = VBUF_alloc_vbuf();
  906adb:	166915        	l32r	a6, 8e0f30 <_bss_end+0x3ce020>
    return A_STATUS_OK;
}

__adf_nbuf_t
__adf_nbuf_create_frm_frag(__adf_nbuf_queue_t *qhead)
{
  906ade:	022402        	or	a4, a2, a2
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
    a_uint32_t cnt = 0, len = __adf_nbuf_queue_len(qhead);
    a_uint16_t total_len = 0;

    buf_head = VBUF_alloc_vbuf();
  906ae1:	2a62a1        	l32i	a10, a6, 0x284
 * 
 */
a_uint32_t  
__adf_nbuf_queue_len(__adf_nbuf_qhead_t *qhead)
{
    return qhead->qlen;
  906ae4:	252202        	l32i	a5, a2, 8
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
    a_uint32_t cnt = 0, len = __adf_nbuf_queue_len(qhead);
    a_uint16_t total_len = 0;

    buf_head = VBUF_alloc_vbuf();
  906ae7:	0ba000        	callx8	a10
  906aea:	d2a0      	mov.n	a2, a10
 * @return (NULL if the Q is empty)
 */
__adf_nbuf_t   
__adf_nbuf_queue_first(__adf_nbuf_queue_t *qhead)
{
    return qhead->head;
  906aec:	8340      	l32i.n	a3, a4, 0
    a_uint16_t total_len = 0;

    buf_head = VBUF_alloc_vbuf();
    buf_tmp = __adf_nbuf_queue_first(qhead);

    __adf_os_assert(buf_head);
  906aee:	cda2      	bnez.n	a10, 906b04 <__adf_nbuf_create_frm_frag+0x2c>
  906af0:	266212        	l32i	a6, a6, 72
  906af3:	1a697d        	l32r	a10, 8e10e8 <_bss_end+0x3ce1d8>
  906af6:	1b6985        	l32r	a11, 8e110c <_bss_end+0x3ce1fc>
  906af9:	0b6000        	callx8	a6
  906afc:	16697a        	l32r	a6, 8e10e4 <_bss_end+0x3ce1d4>
  906aff:	0c0200        	memw
  906b02:	8660      	l32i.n	a6, a6, 0
    __adf_os_assert(buf_tmp);
  906b04:	cd35      	bnez.n	a3, 906b1d <__adf_nbuf_create_frm_frag+0x45>
  906b06:	166915        	l32r	a6, 8e0f5c <_bss_end+0x3ce04c>
  906b09:	1a697d        	l32r	a10, 8e1100 <_bss_end+0x3ce1f0>
  906b0c:	266212        	l32i	a6, a6, 72
  906b0f:	1b6985        	l32r	a11, 8e1124 <_bss_end+0x3ce214>
  906b12:	0b6000        	callx8	a6
  906b15:	16697a        	l32r	a6, 8e1100 <_bss_end+0x3ce1f0>
  906b18:	0c0200        	memw
  906b1b:	8660      	l32i.n	a6, a6, 0

    buf_head->desc_list = buf_tmp->desc_list;
  906b1d:	8330      	l32i.n	a3, a3, 0
  906b1f:	9320      	s32i.n	a3, a2, 0
__adf_nbuf_create_frm_frag(__adf_nbuf_queue_t *qhead)
{
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
    a_uint32_t cnt = 0, len = __adf_nbuf_queue_len(qhead);
    a_uint16_t total_len = 0;
  906b21:	c030      	movi.n	a3, 0
__adf_nbuf_t
__adf_nbuf_create_frm_frag(__adf_nbuf_queue_t *qhead)
{
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
    a_uint32_t cnt = 0, len = __adf_nbuf_queue_len(qhead);
  906b23:	d730      	mov.n	a7, a3

__adf_nbuf_t
__adf_nbuf_create_frm_frag(__adf_nbuf_queue_t *qhead)
{
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
  906b25:	d630      	mov.n	a6, a3
    __adf_os_assert(buf_head);
    __adf_os_assert(buf_tmp);

    buf_head->desc_list = buf_tmp->desc_list;

    while ((buf_tmp = __adf_nbuf_queue_remove(qhead)) != NULL) {
  906b27:	60002d        	j	906b58 <__adf_nbuf_create_frm_frag+0x80>
  906b2a:	000029        	excw
        cnt++;

        //adf_os_print("merge buf: %x\n", buf_tmp->desc_list->buf_addr + buf_tmp->desc_list->data_offset);

        total_len += buf_tmp->buf_length;
  906b2d:	a104      	add.n	a4, a0, a1
    __adf_os_assert(buf_tmp);

    buf_head->desc_list = buf_tmp->desc_list;

    while ((buf_tmp = __adf_nbuf_queue_remove(qhead)) != NULL) {
        cnt++;
  906b2f:	b177      	addi.n	a7, a7, 1

        //adf_os_print("merge buf: %x\n", buf_tmp->desc_list->buf_addr + buf_tmp->desc_list->data_offset);

        total_len += buf_tmp->buf_length;
  906b31:	a933      	add.n	a3, a3, a9
  906b33:	03034f        	extui	a3, a3, 0, 16
  906b36:	89a0      	l32i.n	a9, a10, 0

        if (vdesc_prev) {
  906b38:	c860      	beqz.n	a6, 906b3c <__adf_nbuf_create_frm_frag+0x64>
            /* link "the last VDESC of previous VBUF" to "the 1st VDESC of this VBUF" */
            vdesc_prev->next_desc = buf_tmp->desc_list;
  906b3a:	9960      	s32i.n	a9, a6, 0
        }

        /* traverse VDESC list in this VBUF to find out the last VDESC */
        vdesc_tmp = buf_tmp->desc_list;
  906b3c:	d690      	mov.n	a6, a9
        while (vdesc_tmp->next_desc) {
  906b3e:	600002        	j	906b44 <__adf_nbuf_create_frm_frag+0x6c>
  906b41:	00d680        	excw
  906b44:	8860      	l32i.n	a8, a6, 0
  906b46:	658ff8        	bnez	a8, 906b42 <__adf_nbuf_create_frm_frag+0x6a>
        vdesc_prev = vdesc_tmp;

        /* return VBUF to the pool */
        buf_tmp->desc_list = NULL;
        buf_tmp->buf_length = 0;
        VBUF_free_vbuf(buf_tmp);
  906b49:	196915        	l32r	a9, 8e0fa0 <_bss_end+0x3ce090>
            vdesc_tmp = vdesc_tmp->next_desc;
        }
        vdesc_prev = vdesc_tmp;

        /* return VBUF to the pool */
        buf_tmp->desc_list = NULL;
  906b4c:	28a600        	s32i	a8, a10, 0
        buf_tmp->buf_length = 0;
  906b4f:	28a504        	s16i	a8, a10, 8
        VBUF_free_vbuf(buf_tmp);
  906b52:	2892a3        	l32i	a8, a9, 0x28c
  906b55:	0b8000        	callx8	a8
    __adf_os_assert(buf_head);
    __adf_os_assert(buf_tmp);

    buf_head->desc_list = buf_tmp->desc_list;

    while ((buf_tmp = __adf_nbuf_queue_remove(qhead)) != NULL) {
  906b58:	da40      	mov.n	a10, a4
  906b5a:	5bffb7        	call8	906a38 <__adf_nbuf_queue_remove>
  906b5d:	65afcb        	bnez	a10, 906b2c <__adf_nbuf_create_frm_frag+0x54>
        buf_tmp->desc_list = NULL;
        buf_tmp->buf_length = 0;
        VBUF_free_vbuf(buf_tmp);
    }

    if (cnt != len) {
  906b60:	757116        	beq	a7, a5, 906b7a <__adf_nbuf_create_frm_frag+0xa2>
        //adf_os_print("cnt: %x, len: %x, __adf_nbuf_queue_len: %x\n", cnt, len, 
        //             __adf_nbuf_queue_len(qhead));
        adf_os_assert(0);
  906b63:	146915        	l32r	a4, 8e0fb8 <_bss_end+0x3ce0a8>
  906b66:	1a697d        	l32r	a10, 8e115c <_bss_end+0x3ce24c>
  906b69:	244212        	l32i	a4, a4, 72
  906b6c:	1b6985        	l32r	a11, 8e1180 <_bss_end+0x3ce270>
  906b6f:	0b4000        	callx8	a4
  906b72:	14697a        	l32r	a4, 8e115c <_bss_end+0x3ce24c>
  906b75:	0c0200        	memw
  906b78:	8440      	l32i.n	a4, a4, 0
    }
    //__adf_os_assert(cnt == len);

    buf_head->buf_length = total_len;
  906b7a:	232504        	s16i	a3, a2, 8

    return buf_head;
}
  906b7d:	d10f      	retw.n
	...

00906b80 <__adf_nbuf_split_to_frag>:

void
__adf_nbuf_split_to_frag(__adf_nbuf_t buf, __adf_nbuf_qhead_t *qhead)
{
  906b80:	6c1004        	entry	a1, 32
 * @param qhead
 */
void 
__adf_nbuf_queue_init(__adf_nbuf_qhead_t *qhead)
{
    qhead->qlen = 0;
  906b83:	c040      	movi.n	a4, 0
  906b85:	9432      	s32i.n	a4, a3, 8
    qhead->head = NULL;
  906b87:	9430      	s32i.n	a4, a3, 0
    qhead->tail = NULL;
  906b89:	9431      	s32i.n	a4, a3, 4
  906b8b:	166915        	l32r	a6, 8e0fe0 <_bss_end+0x3ce0d0>
{
    VBUF *buf_tmp;
    VDESC *desc_tmp = NULL;

    __adf_nbuf_queue_init(qhead);
    desc_tmp = buf->desc_list;
  906b8e:	8420      	l32i.n	a4, a2, 0

    while (desc_tmp /*&& desc_tmp->buf_addr*/) {
  906b90:	60003a        	j	906bce <__adf_nbuf_split_to_frag+0x4e>
  906b93:	00002a        	muluh	a0, a0, a0
        buf_tmp = VBUF_alloc_vbuf();
  906b96:	62a10b        	j	8f0ca5 <memset+0x9e5d>
  906b99:	a000      	add.n	a0, a0, a0
  906b9b:	d5a0      	mov.n	a5, a10

        __adf_os_assert(buf_tmp);
  906b9d:	65a014        	bnez	a10, 906bb5 <__adf_nbuf_split_to_frag+0x35>
  906ba0:	276212        	l32i	a7, a6, 72
  906ba3:	1a697d        	l32r	a10, 8e1198 <_bss_end+0x3ce288>
  906ba6:	1b6986        	l32r	a11, 8e11c0 <_bss_end+0x3ce2b0>
  906ba9:	0b7000        	callx8	a7
  906bac:	17697a        	l32r	a7, 8e1194 <_bss_end+0x3ce284>
  906baf:	0c0200        	memw
  906bb2:	277200        	l32i	a7, a7, 0

        //desc_tmp->data_size = 0;
        buf_tmp->desc_list = desc_tmp;
        //buf_tmp->buf_length = desc_tmp->buf_size;
        buf_tmp->buf_length = desc_tmp->data_size;
  906bb5:	274106        	l16ui	a7, a4, 12
        buf_tmp = VBUF_alloc_vbuf();

        __adf_os_assert(buf_tmp);

        //desc_tmp->data_size = 0;
        buf_tmp->desc_list = desc_tmp;
  906bb8:	9450      	s32i.n	a4, a5, 0
        //buf_tmp->buf_length = desc_tmp->buf_size;
        buf_tmp->buf_length = desc_tmp->data_size;
  906bba:	275504        	s16i	a7, a5, 8
        buf_tmp->next_buf = NULL;
  906bbd:	c070      	movi.n	a7, 0
  906bbf:	9751      	s32i.n	a7, a5, 4

        //adf_os_print("split - buf: %x\n", buf_tmp->desc_list->buf_addr + buf_tmp->desc_list->data_offset);

        __adf_nbuf_queue_add(qhead, buf_tmp);
  906bc1:	db50      	mov.n	a11, a5
  906bc3:	da30      	mov.n	a10, a3
  906bc5:	5bff94        	call8	906a18 <__adf_nbuf_queue_add>

        desc_tmp = desc_tmp->next_desc;

        buf_tmp->desc_list->next_desc = NULL;
  906bc8:	8550      	l32i.n	a5, a5, 0

        //adf_os_print("split - buf: %x\n", buf_tmp->desc_list->buf_addr + buf_tmp->desc_list->data_offset);

        __adf_nbuf_queue_add(qhead, buf_tmp);

        desc_tmp = desc_tmp->next_desc;
  906bca:	8440      	l32i.n	a4, a4, 0

        buf_tmp->desc_list->next_desc = NULL;
  906bcc:	9750      	s32i.n	a7, a5, 0
    VDESC *desc_tmp = NULL;

    __adf_nbuf_queue_init(qhead);
    desc_tmp = buf->desc_list;

    while (desc_tmp /*&& desc_tmp->buf_addr*/) {
  906bce:	654fc3        	bnez	a4, 906b95 <__adf_nbuf_split_to_frag+0x15>
        buf_tmp->desc_list->next_desc = NULL;
    }

    buf->desc_list = NULL;
    buf->buf_length = 0;
    VBUF_free_vbuf(buf);
  906bd1:	2362a3        	l32i	a3, a6, 0x28c
        desc_tmp = desc_tmp->next_desc;

        buf_tmp->desc_list->next_desc = NULL;
    }

    buf->desc_list = NULL;
  906bd4:	9420      	s32i.n	a4, a2, 0
    buf->buf_length = 0;
  906bd6:	242504        	s16i	a4, a2, 8
    VBUF_free_vbuf(buf);
  906bd9:	da20      	mov.n	a10, a2
  906bdb:	0b3000        	callx8	a3
  906bde:	d10f      	retw.n

00906be0 <__adf_nbuf_last>:
 * 
 * @return struct mbuf*
 */
VDESC * 
__adf_nbuf_last(VBUF *buf)
{
  906be0:	6c1004        	entry	a1, 32
    VDESC *desc = buf->desc_list;
  906be3:	8220      	l32i.n	a2, a2, 0
    
    //for(; desc->next_desc != NULL; desc = desc->next_desc)
    //    ;
    while(desc->next_desc != NULL)
  906be5:	600001        	j	906bea <__adf_nbuf_last+0xa>
    {
        desc = desc->next_desc;
  906be8:	d280      	mov.n	a2, a8
{
    VDESC *desc = buf->desc_list;
    
    //for(; desc->next_desc != NULL; desc = desc->next_desc)
    //    ;
    while(desc->next_desc != NULL)
  906bea:	8820      	l32i.n	a8, a2, 0
  906bec:	658ff8        	bnez	a8, 906be8 <__adf_nbuf_last+0x8>
    {
        desc = desc->next_desc;
    }
    
    return desc;
}
  906bef:	d10f      	retw.n
  906bf1:	000000        	ill

00906bf4 <__adf_nbuf_trim_tail>:
 * @param len (how much to strip down)
 * 
 */
void 
__adf_nbuf_trim_tail(__adf_nbuf_t buf, adf_os_size_t len)
{
  906bf4:	6c1004        	entry	a1, 32
    VDESC *last_desc = __adf_nbuf_last(buf);
  906bf7:	022a02        	or	a10, a2, a2
  906bfa:	5bfff9        	call8	906be0 <__adf_nbuf_last>
  906bfd:	d4a0      	mov.n	a4, a10
    
    adf_os_assert(buf != NULL);
  906bff:	cd25      	bnez.n	a2, 906c18 <__adf_nbuf_trim_tail+0x24>
  906c01:	186915        	l32r	a8, 8e1058 <_bss_end+0x3ce148>
  906c04:	1a697d        	l32r	a10, 8e11f8 <_bss_end+0x3ce2e8>
  906c07:	288212        	l32i	a8, a8, 72
  906c0a:	1b6987        	l32r	a11, 8e1228 <_bss_end+0x3ce318>
  906c0d:	0b8000        	callx8	a8
  906c10:	18697a        	l32r	a8, 8e11f8 <_bss_end+0x3ce2e8>
  906c13:	0c0200        	memw
  906c16:	8880      	l32i.n	a8, a8, 0
    last_desc->data_size -= len;
  906c18:	284106        	l16ui	a8, a4, 12
  906c1b:	03034f        	extui	a3, a3, 0, 16
  906c1e:	03880c        	sub	a8, a8, a3
  906c21:	284506        	s16i	a8, a4, 12
    buf->buf_length -= len;
  906c24:	242104        	l16ui	a4, a2, 8
  906c27:	03430c        	sub	a3, a4, a3
  906c2a:	232504        	s16i	a3, a2, 8
  906c2d:	d10f      	retw.n
	...

00906c30 <__adf_nbuf_put_tail>:
 * @return previous tail (data+len),NULL if the len is more than
 *         space available
 */
a_uint8_t *
__adf_nbuf_put_tail(__adf_nbuf_t buf, adf_os_size_t len)
{
  906c30:	6c1004        	entry	a1, 32
    a_uint8_t *tail = NULL;
    VDESC *last_desc = __adf_nbuf_last(buf);
  906c33:	da20      	mov.n	a10, a2
  906c35:	5bffea        	call8	906be0 <__adf_nbuf_last>
    
    tail = last_desc->buf_addr + last_desc->data_offset + last_desc->data_size;
  906c38:	28a106        	l16ui	a8, a10, 12
  906c3b:	29a105        	l16ui	a9, a10, 10
    last_desc->data_size += len;
  906c3e:	03034f        	extui	a3, a3, 0, 16
__adf_nbuf_put_tail(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *tail = NULL;
    VDESC *last_desc = __adf_nbuf_last(buf);
    
    tail = last_desc->buf_addr + last_desc->data_offset + last_desc->data_size;
  906c41:	a989      	add.n	a9, a8, a9
    last_desc->data_size += len;
  906c43:	a838      	add.n	a8, a3, a8
  906c45:	28a506        	s16i	a8, a10, 12
    buf->buf_length += len;
  906c48:	282104        	l16ui	a8, a2, 8
__adf_nbuf_put_tail(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *tail = NULL;
    VDESC *last_desc = __adf_nbuf_last(buf);
    
    tail = last_desc->buf_addr + last_desc->data_offset + last_desc->data_size;
  906c4b:	8ba1      	l32i.n	a11, a10, 4
    last_desc->data_size += len;
    buf->buf_length += len;
  906c4d:	a833      	add.n	a3, a3, a8
  906c4f:	232504        	s16i	a3, a2, 8
    
    return tail;
}
  906c52:	a9b2      	add.n	a2, a11, a9
  906c54:	d10f      	retw.n
	...

00906c58 <__adf_nbuf_headroom>:
 * 
 * @return num of bytes available
 */
a_uint32_t
__adf_nbuf_headroom(__adf_nbuf_t  buf)
{
  906c58:	6c1004        	entry	a1, 32
    return buf->desc_list->data_offset;
  906c5b:	8820      	l32i.n	a8, a2, 0
}
  906c5d:	228105        	l16ui	a2, a8, 10
  906c60:	d10f      	retw.n
	...

00906c64 <__adf_nbuf_tailroom>:
 * @return num of bytes
 */

a_uint32_t 
__adf_nbuf_tailroom(__adf_nbuf_t  buf)
{
  906c64:	6c1004        	entry	a1, 32
    VDESC *last_desc = __adf_nbuf_last(buf);
  906c67:	da20      	mov.n	a10, a2
  906c69:	5bffdd        	call8	906be0 <__adf_nbuf_last>
    
    return last_desc->buf_size - last_desc->data_offset - last_desc->data_size;
  906c6c:	28a104        	l16ui	a8, a10, 8
  906c6f:	22a105        	l16ui	a2, a10, 10
  906c72:	02820c        	sub	a2, a8, a2
  906c75:	28a106        	l16ui	a8, a10, 12
}
  906c78:	08220c        	sub	a2, a2, a8
  906c7b:	d10f      	retw.n
  906c7d:	000000        	ill

00906c80 <__adf_nbuf_len>:
 * 
 * @return total length of packet (sum of all frag lengths)
 */ 
a_uint32_t
__adf_nbuf_len(__adf_nbuf_t  buf)
{
  906c80:	6c1004        	entry	a1, 32
    return buf->buf_length; 
}
  906c83:	222104        	l16ui	a2, a2, 8
  906c86:	d10f      	retw.n

00906c88 <__adf_nbuf_clone>:
 * 
 * @return Read-only copy of the nbuf (including clusters)
 */
__adf_nbuf_t 
__adf_nbuf_clone(__adf_nbuf_t  src)
{
  906c88:	6c1004        	entry	a1, 32
    __adf_nbuf_t buf = NULL;
    
    return buf;
}
  906c8b:	c020      	movi.n	a2, 0
  906c8d:	d10f      	retw.n
	...

00906c90 <__adf_nbuf_cat>:

void
__adf_nbuf_cat(__adf_nbuf_t dst, __adf_nbuf_t src)
{
  906c90:	6c1004        	entry	a1, 32
  906c93:	d10f      	retw.n
  906c95:	000000        	ill

00906c98 <__adf_nbuf_is_cloned>:
 * 
 * @return a_bool_t
 */
a_bool_t
__adf_nbuf_is_cloned(__adf_nbuf_t  buf)
{
  906c98:	6c1004        	entry	a1, 32
    return A_FALSE;
}
  906c9b:	c020      	movi.n	a2, 0
  906c9d:	d10f      	retw.n
	...

00906ca0 <__adf_nbuf_peek_header>:
 * @brief This will return the header's addr & m_len
 */
void
__adf_nbuf_peek_header(__adf_nbuf_t buf, a_uint8_t   **addr, 
                       a_uint32_t	*len)
{
  906ca0:	6c1004        	entry	a1, 32
    VDESC *desc = buf->desc_list;
  906ca3:	8820      	l32i.n	a8, a2, 0
    
    *addr = desc->buf_addr + desc->data_offset;
  906ca5:	298105        	l16ui	a9, a8, 10
  906ca8:	8a81      	l32i.n	a10, a8, 4
    *len = desc->data_size; 
  906caa:	288106        	l16ui	a8, a8, 12
__adf_nbuf_peek_header(__adf_nbuf_t buf, a_uint8_t   **addr, 
                       a_uint32_t	*len)
{
    VDESC *desc = buf->desc_list;
    
    *addr = desc->buf_addr + desc->data_offset;
  906cad:	a9a9      	add.n	a9, a10, a9
  906caf:	9930      	s32i.n	a9, a3, 0
    *len = desc->data_size; 
  906cb1:	9840      	s32i.n	a8, a4, 0
  906cb3:	d10f      	retw.n
  906cb5:	000000        	ill

00906cb8 <__adf_nbuf_queue_init>:
 * @brief init the queue
 * @param qhead
 */
void 
__adf_nbuf_queue_init(__adf_nbuf_qhead_t *qhead)
{
  906cb8:	6c1004        	entry	a1, 32
    qhead->qlen = 0;
  906cbb:	c080      	movi.n	a8, 0
  906cbd:	9822      	s32i.n	a8, a2, 8
    qhead->head = NULL;
  906cbf:	9820      	s32i.n	a8, a2, 0
    qhead->tail = NULL;
  906cc1:	9821      	s32i.n	a8, a2, 4
  906cc3:	d10f      	retw.n
  906cc5:	000000        	ill

00906cc8 <__adf_nbuf_queue_len>:
 * @return length
 * 
 */
a_uint32_t  
__adf_nbuf_queue_len(__adf_nbuf_qhead_t *qhead)
{
  906cc8:	6c1004        	entry	a1, 32
    return qhead->qlen;
}
  906ccb:	8222      	l32i.n	a2, a2, 8
  906ccd:	d10f      	retw.n
	...

00906cd0 <__adf_nbuf_queue_first>:
 * 
 * @return (NULL if the Q is empty)
 */
__adf_nbuf_t   
__adf_nbuf_queue_first(__adf_nbuf_queue_t *qhead)
{
  906cd0:	6c1004        	entry	a1, 32
    return qhead->head;
}
  906cd3:	8220      	l32i.n	a2, a2, 0
  906cd5:	d10f      	retw.n
	...

00906cd8 <__adf_nbuf_queue_next>:
 * 
 * @return (NULL if no packets are there)
 */
__adf_nbuf_t   
__adf_nbuf_queue_next(__adf_nbuf_t  buf)
{
  906cd8:	6c1004        	entry	a1, 32
    return buf->next_buf;
}
  906cdb:	8221      	l32i.n	a2, a2, 4
  906cdd:	d10f      	retw.n
	...

00906ce0 <__adf_nbuf_is_queue_empty>:
 * 
 * @return a_bool_t
 */
a_bool_t  
__adf_nbuf_is_queue_empty(__adf_nbuf_qhead_t *qhead)
{
  906ce0:	6c1004        	entry	a1, 32
    return ((qhead->qlen == 0));
  906ce3:	8922      	l32i.n	a9, a2, 8
  906ce5:	c081      	movi.n	a8, 1
  906ce7:	c020      	movi.n	a2, 0
  906ce9:	098238        	moveqz	a2, a8, a9
}
  906cec:	d10f      	retw.n
	...

00906cf0 <_buf_pool_static_init>:
    pAPIs->_free_buf = _buf_pool_static_free_buf;
    pAPIs->_shutdown = _buf_pool_static_shutdown;
}
 
LOCAL pool_handle_t _buf_pool_static_init(adf_os_handle_t handle)
{
  906cf0:	6c1004        	entry	a1, 32
  906cf3:	c080      	movi.n	a8, 0
    pAPIs->_alloc_buf_align = _buf_pool_static_alloc_buf_align;
    pAPIs->_free_buf = _buf_pool_static_free_buf;
    pAPIs->_shutdown = _buf_pool_static_shutdown;
}
 
LOCAL pool_handle_t _buf_pool_static_init(adf_os_handle_t handle)
  906cf5:	126988        	l32r	a2, 8e1318 <_bss_end+0x3ce408>
{
#if 1
    int i;
    
    for(i=0; i < POOL_ID_MAX; i++) {
        g_poolCtx.bufQ[i] = NULL;
  906cf8:	db80      	mov.n	a11, a8
LOCAL pool_handle_t _buf_pool_static_init(adf_os_handle_t handle)
{
#if 1
    int i;
    
    for(i=0; i < POOL_ID_MAX; i++) {
  906cfa:	c298      	movi.n	a9, 40
    pAPIs->_alloc_buf_align = _buf_pool_static_alloc_buf_align;
    pAPIs->_free_buf = _buf_pool_static_free_buf;
    pAPIs->_shutdown = _buf_pool_static_shutdown;
}
 
LOCAL pool_handle_t _buf_pool_static_init(adf_os_handle_t handle)
  906cfc:	a28a      	add.n	a10, a8, a2
{
#if 1
    int i;
    
    for(i=0; i < POOL_ID_MAX; i++) {
        g_poolCtx.bufQ[i] = NULL;
  906cfe:	9ba0      	s32i.n	a11, a10, 0
  906d00:	b488      	addi.n	a8, a8, 4
LOCAL pool_handle_t _buf_pool_static_init(adf_os_handle_t handle)
{
#if 1
    int i;
    
    for(i=0; i < POOL_ID_MAX; i++) {
  906d02:	7989f6        	bne	a8, a9, 906cfc <_buf_pool_static_init+0xc>
    ctx = (BUF_POOL_STATIC_CONTEXT *)adf_os_mem_alloc(sizeof(BUF_POOL_STATIC_CONTEXT));
    ctx->NetHandle = handle;
    
    return ctx; 
#endif    
}      
  906d05:	d10f      	retw.n
	...

00906d08 <_buf_pool_static_shutdown>:
    
LOCAL void _buf_pool_static_shutdown(pool_handle_t handle) 
{
  906d08:	6c1004        	entry	a1, 32
  906d0b:	d10f      	retw.n
  906d0d:	000000        	ill

00906d10 <_buf_pool_static_create_pool>:
    // SHALL NOT BE USED in FW
}

LOCAL void _buf_pool_static_create_pool(pool_handle_t handle, BUF_POOL_ID poolId, int nItems, int nSize)
{
  906d10:	6c1006        	entry	a1, 48
        desc->data_size = 0;
        
        buf->buf_length = 0;        
        buf->desc_list = desc;
        
        if ( g_poolCtx.bufQ[poolId] == NULL ) {
  906d13:	126988        	l32r	a2, 8e1334 <_bss_end+0x3ce424>
{
    // SHALL NOT BE USED in FW
}

LOCAL void _buf_pool_static_create_pool(pool_handle_t handle, BUF_POOL_ID poolId, int nItems, int nSize)
{
  906d16:	d940      	mov.n	a9, a4
    VDESC *desc;
    
    //BUF_POOL_STATIC_CONTEXT *ctx = (BUF_POOL_STATIC_CONTEXT *)handle;
    
    for ( i = 0; i < nItems; i++) {
        buf = VBUF_alloc_vbuf();
  906d18:	176915        	l32r	a7, 8e116c <_bss_end+0x3ce25c>
    VBUF *buf;
    VDESC *desc;
    
    //BUF_POOL_STATIC_CONTEXT *ctx = (BUF_POOL_STATIC_CONTEXT *)handle;
    
    for ( i = 0; i < nItems; i++) {
  906d1b:	c040      	movi.n	a4, 0
        desc->data_size = 0;
        
        buf->buf_length = 0;        
        buf->desc_list = desc;
        
        if ( g_poolCtx.bufQ[poolId] == NULL ) {
  906d1d:	02330a        	addx4	a3, a3, a2
    VBUF *buf;
    VDESC *desc;
    
    //BUF_POOL_STATIC_CONTEXT *ctx = (BUF_POOL_STATIC_CONTEXT *)handle;
    
    for ( i = 0; i < nItems; i++) {
  906d20:	60003e        	j	906d62 <_buf_pool_static_create_pool+0x52>
  906d23:	002a72        	excw
        buf = VBUF_alloc_vbuf();
  906d26:	a199      	add.n	a9, a9, a1
  906d28:	100ba0        	l32r	a0, 8c9ba8 <_bss_end+0x3b6c98>
  906d2b:	00d2a0        	excw
        desc = VDESC_alloc_vdesc();
  906d2e:	2a72a6        	l32i	a10, a7, 0x298
  906d31:	0ba000        	callx8	a10
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  906d34:	287252        	l32i	a8, a7, 0x148
  906d37:	d6a0      	mov.n	a6, a10
  906d39:	db50      	mov.n	a11, a5
  906d3b:	c0a0      	movi.n	a10, 0
  906d3d:	0b8000        	callx8	a8

        desc->buf_addr = (A_UINT8 *)adf_os_mem_alloc(nSize);
        desc->buf_size = nSize;
        desc->data_offset = 0;
  906d40:	c080      	movi.n	a8, 0
    
    for ( i = 0; i < nItems; i++) {
        buf = VBUF_alloc_vbuf();
        desc = VDESC_alloc_vdesc();

        desc->buf_addr = (A_UINT8 *)adf_os_mem_alloc(nSize);
  906d42:	9a61      	s32i.n	a10, a6, 4
        desc->buf_size = nSize;
  906d44:	256504        	s16i	a5, a6, 8
        desc->data_offset = 0;
  906d47:	286505        	s16i	a8, a6, 10
        desc->data_size = 0;
  906d4a:	286506        	s16i	a8, a6, 12
        
        buf->buf_length = 0;        
        buf->desc_list = desc;
  906d4d:	9620      	s32i.n	a6, a2, 0
        
        if ( g_poolCtx.bufQ[poolId] == NULL ) {
  906d4f:	8630      	l32i.n	a6, a3, 0
        desc->buf_addr = (A_UINT8 *)adf_os_mem_alloc(nSize);
        desc->buf_size = nSize;
        desc->data_offset = 0;
        desc->data_size = 0;
        
        buf->buf_length = 0;        
  906d51:	282504        	s16i	a8, a2, 8
        buf->desc_list = desc;
        
        if ( g_poolCtx.bufQ[poolId] == NULL ) {
  906d54:	8910      	l32i.n	a9, a1, 0
  906d56:	cc62      	bnez.n	a6, 906d5c <_buf_pool_static_create_pool+0x4c>
  906d58:	600002        	j	906d5e <_buf_pool_static_create_pool+0x4e>
  906d5b:	009621        	excw
            g_poolCtx.bufQ[poolId] = buf;
        } else {
            buf->next_buf = g_poolCtx.bufQ[poolId];
            g_poolCtx.bufQ[poolId] = buf;
  906d5e:	9230      	s32i.n	a2, a3, 0
    VBUF *buf;
    VDESC *desc;
    
    //BUF_POOL_STATIC_CONTEXT *ctx = (BUF_POOL_STATIC_CONTEXT *)handle;
    
    for ( i = 0; i < nItems; i++) {
  906d60:	b144      	addi.n	a4, a4, 1
  906d62:	7942be        	blt	a4, a9, 906d24 <_buf_pool_static_create_pool+0x14>
        } else {
            buf->next_buf = g_poolCtx.bufQ[poolId];
            g_poolCtx.bufQ[poolId] = buf;
        }
    }
}
  906d65:	d10f      	retw.n
	...

00906d68 <_buf_pool_static_alloc_buf>:
            
LOCAL adf_nbuf_t  _buf_pool_static_alloc_buf(pool_handle_t handle, BUF_POOL_ID poolId, int reserve)
{
  906d68:	6c1004        	entry	a1, 32
    VBUF *buf;
    
    buf = g_poolCtx.bufQ[poolId];
  906d6b:	126988        	l32r	a2, 8e138c <_bss_end+0x3ce47c>
  906d6e:	02330a        	addx4	a3, a3, a2
  906d71:	8230      	l32i.n	a2, a3, 0
    if ( buf != NULL ) {
  906d73:	c921      	beqz.n	a2, 906d88 <_buf_pool_static_alloc_buf+0x20>
        g_poolCtx.bufQ[poolId] = buf->next_buf;
  906d75:	8821      	l32i.n	a8, a2, 4
  906d77:	9830      	s32i.n	a8, a3, 0
        
        buf->next_buf = NULL;
        buf->desc_list->data_offset = reserve;
  906d79:	8920      	l32i.n	a9, a2, 0
    
    buf = g_poolCtx.bufQ[poolId];
    if ( buf != NULL ) {
        g_poolCtx.bufQ[poolId] = buf->next_buf;
        
        buf->next_buf = NULL;
  906d7b:	c080      	movi.n	a8, 0
  906d7d:	9821      	s32i.n	a8, a2, 4
        buf->desc_list->data_offset = reserve;
  906d7f:	249505        	s16i	a4, a9, 10
        buf->desc_list->data_size = 0;
  906d82:	289506        	s16i	a8, a9, 12
        buf->buf_length = 0;
  906d85:	282504        	s16i	a8, a2, 8
    }
    
    return buf;
}
  906d88:	d10f      	retw.n
	...

00906d8c <_buf_pool_static_alloc_buf_align>:

LOCAL adf_nbuf_t  _buf_pool_static_alloc_buf_align(pool_handle_t handle, BUF_POOL_ID poolId, int reserve, int align)
{
  906d8c:	6c1004        	entry	a1, 32
    return _buf_pool_static_alloc_buf(handle, poolId, reserve);
  906d8f:	da20      	mov.n	a10, a2
  906d91:	db30      	mov.n	a11, a3
  906d93:	dc40      	mov.n	a12, a4
  906d95:	5bfff4        	call8	906d68 <_buf_pool_static_alloc_buf>
}
  906d98:	d2a0      	mov.n	a2, a10
  906d9a:	d10f      	retw.n

00906d9c <_buf_pool_static_free_buf>:
    
LOCAL void _buf_pool_static_free_buf(pool_handle_t handle, BUF_POOL_ID poolId, adf_nbuf_t buf)
{
  906d9c:	6c1004        	entry	a1, 32
    if ( g_poolCtx.bufQ[poolId] == NULL ) {
  906d9f:	186988        	l32r	a8, 8e13c0 <_bss_end+0x3ce4b0>
  906da2:	08330a        	addx4	a3, a3, a8
  906da5:	8830      	l32i.n	a8, a3, 0
  906da7:	cc81      	bnez.n	a8, 906dac <_buf_pool_static_free_buf+0x10>
  906da9:	600001        	j	906dae <_buf_pool_static_free_buf+0x12>
        g_poolCtx.bufQ[poolId] = buf;
    } else {
        buf->next_buf = g_poolCtx.bufQ[poolId];
  906dac:	9841      	s32i.n	a8, a4, 4
        g_poolCtx.bufQ[poolId] = buf;
  906dae:	9430      	s32i.n	a4, a3, 0
  906db0:	d10f      	retw.n
	...

00906db4 <buf_pool_module_install>:
LOCAL void _buf_pool_static_shutdown(pool_handle_t handle);      

BUF_POOL_STATIC_CONTEXT g_poolCtx;

void buf_pool_module_install(struct buf_pool_api *pAPIs)
{   
  906db4:	6c1004        	entry	a1, 32
    pAPIs->_init = _buf_pool_static_init;
  906db7:	186989        	l32r	a8, 8e13dc <_bss_end+0x3ce4cc>
  906dba:	9820      	s32i.n	a8, a2, 0
    pAPIs->_create_pool = _buf_pool_static_create_pool;
  906dbc:	18698a        	l32r	a8, 8e13e4 <_bss_end+0x3ce4d4>
  906dbf:	9822      	s32i.n	a8, a2, 8
    pAPIs->_alloc_buf = _buf_pool_static_alloc_buf;
  906dc1:	18698b        	l32r	a8, 8e13f0 <_bss_end+0x3ce4e0>
  906dc4:	9823      	s32i.n	a8, a2, 12
    pAPIs->_alloc_buf_align = _buf_pool_static_alloc_buf_align;
  906dc6:	18698c        	l32r	a8, 8e13f8 <_bss_end+0x3ce4e8>
  906dc9:	9824      	s32i.n	a8, a2, 16
    pAPIs->_free_buf = _buf_pool_static_free_buf;
  906dcb:	18698d        	l32r	a8, 8e1400 <_bss_end+0x3ce4f0>
  906dce:	9825      	s32i.n	a8, a2, 20
    pAPIs->_shutdown = _buf_pool_static_shutdown;
  906dd0:	18698e        	l32r	a8, 8e1408 <_bss_end+0x3ce4f8>
  906dd3:	9821      	s32i.n	a8, a2, 4
  906dd5:	d10f      	retw.n
	...

00906dd8 <db_incorect_format>:
int cmd_not_found;
uint16_t gvLen;
int pressed_time;

static void db_incorect_format(void)
{
  906dd8:	6c1004        	entry	a1, 32
	A_PRINTF("Error! Incorrect format.\n\r");
  906ddb:	186915        	l32r	a8, 8e1230 <_bss_end+0x3ce320>
  906dde:	1a698f        	l32r	a10, 8e141c <_bss_end+0x3ce50c>
  906de1:	288212        	l32i	a8, a8, 72
  906de4:	0b8000        	callx8	a8
  906de7:	d10f      	retw.n
  906de9:	000000        	ill

00906dec <zf_debug_init>:
	} while (mem1 < mem2);
	A_PRINTF("\n\r");
}

static void zf_debug_init(void)
{
  906dec:	6c1006        	entry	a1, 48
	uint8_t ch;

	/* Purge Rx FIFO */
	while ((zm_get_char(&ch)) != 0)
  906def:	126915        	l32r	a2, 8e1244 <_bss_end+0x3ce334>
  906df2:	282215        	l32i	a8, a2, 84
  906df5:	da10      	mov.n	a10, a1
  906df7:	0b8000        	callx8	a8
  906dfa:	65aff4        	bnez	a10, 906df2 <zf_debug_init+0x6>
	{
	}

	cmd_buf_ptr = 0;
  906dfd:	126990        	l32r	a2, 8e1440 <_bss_end+0x3ce530>
  906e00:	9a20      	s32i.n	a10, a2, 0
	cmd_buf_full = FALSE;
  906e02:	126991        	l32r	a2, 8e1448 <_bss_end+0x3ce538>
  906e05:	9a20      	s32i.n	a10, a2, 0
	gvLen = 0;
  906e07:	126992        	l32r	a2, 8e1450 <_bss_end+0x3ce540>
  906e0a:	2a2500        	s16i	a10, a2, 0
	pressed_time = 0;
  906e0d:	126993        	l32r	a2, 8e145c <_bss_end+0x3ce54c>
  906e10:	9a20      	s32i.n	a10, a2, 0
  906e12:	d10f      	retw.n

00906e14 <db_ascii_to_hex>:
	}
	return (int)A_STRLEN(cmd_str);
}

static int db_ascii_to_hex(char *num_str, unsigned long *hex_num)
{
  906e14:	6c1004        	entry	a1, 32
	int i = 0;

	*hex_num = 0;
  906e17:	c080      	movi.n	a8, 0
  906e19:	9830      	s32i.n	a8, a3, 0
	while (num_str[i])
	{
		if ((num_str[i] >= '0') && (num_str[i] <= '9'))
  906e1b:	c099      	movi.n	a9, 9
static int db_ascii_to_hex(char *num_str, unsigned long *hex_num)
{
	int i = 0;

	*hex_num = 0;
	while (num_str[i])
  906e1d:	60004b        	j	906e6c <db_ascii_to_hex+0x58>
	{
		if ((num_str[i] >= '0') && (num_str[i] <= '9'))
  906e20:	2a8cd0        	addi	a10, a8, -48
  906e23:	0a0a47        	extui	a10, a10, 0, 8
  906e26:	7a930e        	bltu	a9, a10, 906e38 <db_ascii_to_hex+0x24>
		{
			*hex_num <<= 4;
  906e29:	8830      	l32i.n	a8, a3, 0
  906e2b:	0c8811        	slli	a8, a8, 4
  906e2e:	9830      	s32i.n	a8, a3, 0
			*hex_num += (num_str[i] - '0');
  906e30:	288cd0        	addi	a8, a8, -48
  906e33:	60002c        	j	906e63 <db_ascii_to_hex+0x4f>
  906e36:	00002a        	muluh	a0, a0, a0
		}
		else if ((num_str[i] >= 'A') && (num_str[i] <= 'F'))
  906e39:	8cbf      	l32i.n	a12, a11, 60
  906e3b:	0a0a47        	extui	a10, a10, 0, 8
  906e3e:	6fa60e        	bgeui	a10, 6, 906e50 <db_ascii_to_hex+0x3c>
		{
			*hex_num <<= 4;
  906e41:	8830      	l32i.n	a8, a3, 0
  906e43:	0c8811        	slli	a8, a8, 4
  906e46:	9830      	s32i.n	a8, a3, 0
			*hex_num += (num_str[i] - 'A' + 10);
  906e48:	288cc9        	addi	a8, a8, -55
  906e4b:	600014        	j	906e63 <db_ascii_to_hex+0x4f>
  906e4e:	000028        	mull	a0, a0, a0
		}
		else if ((num_str[i] >= 'a') && (num_str[i] <= 'f'))
  906e51:	8c9f      	l32i.n	a12, a9, 60
  906e53:	080847        	extui	a8, a8, 0, 8
  906e56:	6f861c        	bgeui	a8, 6, 906e76 <db_ascii_to_hex+0x62>
		{
			*hex_num <<= 4;
  906e59:	8830      	l32i.n	a8, a3, 0
  906e5b:	0c8811        	slli	a8, a8, 4
  906e5e:	9830      	s32i.n	a8, a3, 0
			*hex_num += (num_str[i] - 'a' + 10);
  906e60:	288ca9        	addi	a8, a8, -87
  906e63:	2a2000        	l8ui	a10, a2, 0
  906e66:	b122      	addi.n	a2, a2, 1
  906e68:	aa88      	add.n	a8, a8, a10
  906e6a:	9830      	s32i.n	a8, a3, 0
static int db_ascii_to_hex(char *num_str, unsigned long *hex_num)
{
	int i = 0;

	*hex_num = 0;
	while (num_str[i])
  906e6c:	282000        	l8ui	a8, a2, 0
  906e6f:	658fad        	bnez	a8, 906e20 <db_ascii_to_hex+0xc>
		{
			return -1;
		}
		i++;
	}
	return 0;
  906e72:	d280      	mov.n	a2, a8
  906e74:	d10f      	retw.n
			*hex_num <<= 4;
			*hex_num += (num_str[i] - 'a' + 10);
		}
		else
		{
			return -1;
  906e76:	c72f      	movi.n	a2, -1
		}
		i++;
	}
	return 0;
}
  906e78:	d10f      	retw.n
	...

00906e7c <db_hex_to_ascii>:
	}
	return 0;
}

static int db_hex_to_ascii(unsigned long hex_num, char *num_str)
{
  906e7c:	6c1004        	entry	a1, 32
  906e7f:	d930      	mov.n	a9, a3
  906e81:	c18c      	movi.n	a8, 28
	unsigned long four_bits;

	for (i=7; i>=0; i--)
	{
		four_bits = (hex_num >> i*4) & 0xf;
		if (four_bits < 10)
  906e83:	c0c9      	movi.n	a12, 9
static int db_hex_to_ascii(unsigned long hex_num, char *num_str)
{
	int i;
	unsigned long four_bits;

	for (i=7; i>=0; i--)
  906e85:	2bfafc        	movi	a11, -4
	{
		four_bits = (hex_num >> i*4) & 0xf;
  906e88:	008004        	ssr	a8
  906e8b:	020a19        	srl	a10, a2
  906e8e:	0a0a43        	extui	a10, a10, 0, 4
		if (four_bits < 10)
  906e91:	7ac307        	bltu	a12, a10, 906e9c <db_hex_to_ascii+0x20>
		{
			num_str[7-i] = four_bits + '0';
  906e94:	2aac30        	addi	a10, a10, 48
  906e97:	600004        	j	906e9f <db_hex_to_ascii+0x23>
  906e9a:	00002a        	muluh	a0, a0, a0
		}
		else
		{
			num_str[7-i] = four_bits - 10 + 'A';
  906e9d:	ac37      	add.n	a7, a3, a12
  906e9f:	2a9400        	s8i	a10, a9, 0
  906ea2:	288cfc        	addi	a8, a8, -4
  906ea5:	b199      	addi.n	a9, a9, 1
static int db_hex_to_ascii(unsigned long hex_num, char *num_str)
{
	int i;
	unsigned long four_bits;

	for (i=7; i>=0; i--)
  906ea7:	7b89dd        	bne	a8, a11, 906e88 <db_hex_to_ascii+0xc>
		else
		{
			num_str[7-i] = four_bits - 10 + 'A';
		}
	}
	num_str[8] = 0;
  906eaa:	c020      	movi.n	a2, 0
  906eac:	223408        	s8i	a2, a3, 8
	return 0;
}
  906eaf:	c020      	movi.n	a2, 0
  906eb1:	d10f      	retw.n
	...

00906eb4 <db_help_cmd>:

int db_help_cmd(char *cmd, char *param1, char *param2, char *param3)
{
  906eb4:	6c1004        	entry	a1, 32
	int i;

	i = 0;

	A_PRINTF("%s %s\n", ATH_DEBUGGER_VERSION_STR, ATH_COMMAND_LIST_STR);
  906eb7:	146915        	l32r	a4, 8e130c <_bss_end+0x3ce3fc>
  906eba:	1a6994        	l32r	a10, 8e150c <_bss_end+0x3ce5fc>
  906ebd:	224212        	l32i	a2, a4, 72
  906ec0:	1b6995        	l32r	a11, 8e1514 <_bss_end+0x3ce604>
  906ec3:	1c6996        	l32r	a12, 8e151c <_bss_end+0x3ce60c>
  906ec6:	0b2000        	callx8	a2
  906ec9:	136997        	l32r	a3, 8e1528 <_bss_end+0x3ce618>

int db_help_cmd(char *cmd, char *param1, char *param2, char *param3)
{
	int i;

	i = 0;
  906ecc:	c020      	movi.n	a2, 0

	A_PRINTF("%s %s\n", ATH_DEBUGGER_VERSION_STR, ATH_COMMAND_LIST_STR);

	while (command_table[i].cmd_func)
  906ece:	600016        	j	906ee8 <db_help_cmd+0x34>
	}
	num_str[8] = 0;
	return 0;
}

int db_help_cmd(char *cmd, char *param1, char *param2, char *param3)
  906ed1:	293cfc        	addi	a9, a3, -4
  906ed4:	2b3cf8        	addi	a11, a3, -8

	A_PRINTF("%s %s\n", ATH_DEBUGGER_VERSION_STR, ATH_COMMAND_LIST_STR);

	while (command_table[i].cmd_func)
	{
		A_PRINTF("%s\t%s\n\r", command_table[i].cmd_str,
  906ed7:	284212        	l32i	a8, a4, 72
  906eda:	1a6998        	l32r	a10, 8e153c <_bss_end+0x3ce62c>
  906edd:	8bb0      	l32i.n	a11, a11, 0
  906edf:	8c90      	l32i.n	a12, a9, 0
				       command_table[i].help_str);
		i++;
  906ee1:	b122      	addi.n	a2, a2, 1

	A_PRINTF("%s %s\n", ATH_DEBUGGER_VERSION_STR, ATH_COMMAND_LIST_STR);

	while (command_table[i].cmd_func)
	{
		A_PRINTF("%s\t%s\n\r", command_table[i].cmd_str,
  906ee3:	0b8000        	callx8	a8
  906ee6:	bc33      	addi.n	a3, a3, 12

	i = 0;

	A_PRINTF("%s %s\n", ATH_DEBUGGER_VERSION_STR, ATH_COMMAND_LIST_STR);

	while (command_table[i].cmd_func)
  906ee8:	8830      	l32i.n	a8, a3, 0
  906eea:	658fe3        	bnez	a8, 906ed1 <db_help_cmd+0x1d>
		A_PRINTF("%s\t%s\n\r", command_table[i].cmd_str,
				       command_table[i].help_str);
		i++;
	}
	return i;
}
  906eed:	d10f      	retw.n
	...

00906ef0 <db_cmd_starthtc>:
#endif
	return 1;
}

static int db_cmd_starthtc(char *cmd, char *param1, char *param2, char *param3)
{
  906ef0:	6c1004        	entry	a1, 32
    extern htc_handle_t htc_handle;
    HTC_Ready(htc_handle);
  906ef3:	126915        	l32r	a2, 8e1348 <_bss_end+0x3ce438>
  906ef6:	282281        	l32i	a8, a2, 0x204
  906ef9:	126999        	l32r	a2, 8e1560 <generic_hif_module_install+0x18>
  906efc:	8a20      	l32i.n	a10, a2, 0
  906efe:	0b8000        	callx8	a8
}
  906f01:	d10f      	retw.n
	...

00906f04 <db_cmd_memcmp>:
#endif
#endif /* #if defined(PROJECT_K2) */

/* Memory Comparison */
static int db_cmd_memcmp(char *cmd, char *param1, char *param2, char *param3)
{
  906f04:	6c1006        	entry	a1, 48
	unsigned long       addr1, addr2, len;
	A_UINT8             *buf1, *buf2;

	if (db_ascii_to_hex(param1, &addr1) != -1 &&
  906f07:	033a02        	or	a10, a3, a3
  906f0a:	2b1c08        	addi	a11, a1, 8
  906f0d:	5bffc1        	call8	906e14 <db_ascii_to_hex>
  906f10:	68a045        	beqi	a10, -1, 906f59 <db_cmd_memcmp+0x55>
	    db_ascii_to_hex(param2, &addr2) != -1 &&
  906f13:	044a02        	or	a10, a4, a4
  906f16:	2b1c04        	addi	a11, a1, 4
  906f19:	5bffbe        	call8	906e14 <db_ascii_to_hex>
static int db_cmd_memcmp(char *cmd, char *param1, char *param2, char *param3)
{
	unsigned long       addr1, addr2, len;
	A_UINT8             *buf1, *buf2;

	if (db_ascii_to_hex(param1, &addr1) != -1 &&
  906f1c:	68a039        	beqi	a10, -1, 906f59 <db_cmd_memcmp+0x55>
	    db_ascii_to_hex(param2, &addr2) != -1 &&
	    db_ascii_to_hex(param3, &len) != -1 &&
  906f1f:	055a02        	or	a10, a5, a5
  906f22:	011b02        	or	a11, a1, a1
  906f25:	5bffbb        	call8	906e14 <db_ascii_to_hex>
{
	unsigned long       addr1, addr2, len;
	A_UINT8             *buf1, *buf2;

	if (db_ascii_to_hex(param1, &addr1) != -1 &&
	    db_ascii_to_hex(param2, &addr2) != -1 &&
  906f28:	68a02d        	beqi	a10, -1, 906f59 <db_cmd_memcmp+0x55>
	    db_ascii_to_hex(param3, &len) != -1 &&
	    addr1 != addr2 && addr1%4 == 0 && addr2%4 == 0 && len%4 == 0)
  906f2b:	8a12      	l32i.n	a10, a1, 8
  906f2d:	8b11      	l32i.n	a11, a1, 4
	unsigned long       addr1, addr2, len;
	A_UINT8             *buf1, *buf2;

	if (db_ascii_to_hex(param1, &addr1) != -1 &&
	    db_ascii_to_hex(param2, &addr2) != -1 &&
	    db_ascii_to_hex(param3, &len) != -1 &&
  906f2f:	7ba126        	beq	a10, a11, 906f59 <db_cmd_memcmp+0x55>
	    addr1 != addr2 && addr1%4 == 0 && addr2%4 == 0 && len%4 == 0)
  906f32:	0a0241        	extui	a2, a10, 0, 2
  906f35:	ce20      	bnez.n	a2, 906f59 <db_cmd_memcmp+0x55>
  906f37:	0b0241        	extui	a2, a11, 0, 2
  906f3a:	cd2b      	bnez.n	a2, 906f59 <db_cmd_memcmp+0x55>
  906f3c:	8c10      	l32i.n	a12, a1, 0
  906f3e:	0c0241        	extui	a2, a12, 0, 2
  906f41:	cd24      	bnez.n	a2, 906f59 <db_cmd_memcmp+0x55>
	{
		buf1 = (A_UINT8 *)addr1;
		buf2 = (A_UINT8 *)addr2;        ;

		A_PRINTF("memcmp(buf1, buf2, len) = %d\n\r", A_MEMCMP(buf1, buf2, len));
  906f43:	186915        	l32r	a8, 8e1398 <_bss_end+0x3ce488>
  906f46:	8587      	l32i.n	a5, a8, 28
  906f48:	248212        	l32i	a4, a8, 72
  906f4b:	0b5000        	callx8	a5
  906f4e:	dba0      	mov.n	a11, a10
  906f50:	1a699a        	l32r	a10, 8e15b8 <athos_indirection_table_install+0x44>
  906f53:	0b4000        	callx8	a4
  906f56:	d10f      	retw.n
  906f58:	005bff        	excw
		return 0;
	}

	db_incorect_format();
  906f5b:	9fc7      	s32i.n	a15, a12, 28
	return -1;
  906f5d:	2fd10f        	l16ui	a15, a13, 30

00906f60 <db_cmd_memdump>:
}

/* Memory Dump */
static int db_cmd_memdump(char *cmd, char *param1, char *param2, char *param3)
{
  906f60:	6c1006        	entry	a1, 48
	unsigned long       addr1, addr2;

	if (db_ascii_to_hex(param1, &addr1) != -1 && db_ascii_to_hex(param2, &addr2) != -1 && addr1 < addr2 && addr1%4 == 0)
  906f63:	033a02        	or	a10, a3, a3
  906f66:	2b1c04        	addi	a11, a1, 4
  906f69:	5bffaa        	call8	906e14 <db_ascii_to_hex>
  906f6c:	69a002        	bnei	a10, -1, 906f72 <db_cmd_memdump+0x12>
  906f6f:	60008e        	j	907001 <db_cmd_memdump+0xa1>
  906f72:	da40      	mov.n	a10, a4
  906f74:	db10      	mov.n	a11, a1
  906f76:	5bffa7        	call8	906e14 <db_ascii_to_hex>
  906f79:	69a002        	bnei	a10, -1, 906f7f <db_cmd_memdump+0x1f>
  906f7c:	600081        	j	907001 <db_cmd_memdump+0xa1>
  906f7f:	8211      	l32i.n	a2, a1, 4
  906f81:	241200        	l32i	a4, a1, 0
  906f84:	742b79        	bgeu	a2, a4, 907001 <db_cmd_memdump+0xa1>
  906f87:	020341        	extui	a3, a2, 0, 2
  906f8a:	653073        	bnez	a3, 907001 <db_cmd_memdump+0xa1>
	unsigned int i = 0;
	const char *tmp;

	do {
		if (i == 0) {
			A_PRINTF("\n\r%06x: ", mem1);
  906f8d:	176915        	l32r	a7, 8e13e4 <_bss_end+0x3ce4d4>
{
	unsigned int i = 0;
	const char *tmp;

	do {
		if (i == 0) {
  906f90:	cc3c      	bnez.n	a3, 906fa0 <db_cmd_memdump+0x40>
			A_PRINTF("\n\r%06x: ", mem1);
  906f92:	257212        	l32i	a5, a7, 72
  906f95:	1a699b        	l32r	a10, 8e1604 <athos_indirection_table_install+0x90>
  906f98:	db20      	mov.n	a11, a2
  906f9a:	0b5000        	callx8	a5
  906f9d:	022502        	or	a5, a2, a2
			tmp = mem1;
		}

		A_PRINTF("%04x ", *(uint16_t *)mem1);
  906fa0:	166915        	l32r	a6, 8e13f4 <_bss_end+0x3ce4e4>
  906fa3:	2b2100        	l16ui	a11, a2, 0
  906fa6:	286212        	l32i	a8, a6, 72
  906fa9:	1a699c        	l32r	a10, 8e161c <athos_indirection_table_install+0xa8>

		mem1 += 2;
		i++;
  906fac:	233c01        	addi	a3, a3, 1
		if (i == 0) {
			A_PRINTF("\n\r%06x: ", mem1);
			tmp = mem1;
		}

		A_PRINTF("%04x ", *(uint16_t *)mem1);
  906faf:	0b8000        	callx8	a8

		mem1 += 2;
  906fb2:	b222      	addi.n	a2, a2, 2
		i++;

		if (i == 8) {
  906fb4:	693834        	bnei	a3, 8, 906fec <db_cmd_memdump+0x8c>
			A_PRINTF(" ");
  906fb7:	236212        	l32i	a3, a6, 72
  906fba:	1a699d        	l32r	a10, 8e1630 <athos_indirection_table_install+0xbc>
  906fbd:	0b3000        	callx8	a3
			do {
				if (*tmp > 0x20 && *tmp < 0x7e)
  906fc0:	c53c      	movi.n	a3, 92
  906fc2:	2b5000        	l8ui	a11, a5, 0
  906fc5:	166915        	l32r	a6, 8e141c <_bss_end+0x3ce50c>
  906fc8:	28bcdf        	addi	a8, a11, -33
  906fcb:	080847        	extui	a8, a8, 0, 8
					A_PRINTF("%c", *tmp);
  906fce:	266212        	l32i	a6, a6, 72
		i++;

		if (i == 8) {
			A_PRINTF(" ");
			do {
				if (*tmp > 0x20 && *tmp < 0x7e)
  906fd1:	783308        	bltu	a3, a8, 906fdd <db_cmd_memdump+0x7d>
					A_PRINTF("%c", *tmp);
  906fd4:	1a699e        	l32r	a10, 8e164c <athos_indirection_table_install+0xd8>
  906fd7:	0b6000        	callx8	a6
  906fda:	600005        	j	906fe3 <db_cmd_memdump+0x83>
				else
					A_PRINTF(".");
  906fdd:	1a699f        	l32r	a10, 8e165c <athos_indirection_table_install+0xe8>
  906fe0:	0b6000        	callx8	a6
				tmp++;
  906fe3:	255c01        	addi	a5, a5, 1
			} while (tmp < mem1);
  906fe6:	7253d8        	bltu	a5, a2, 906fc2 <db_cmd_memdump+0x62>
			i = 0;
  906fe9:	230a00        	movi	a3, 0
		}
	} while (mem1 < mem2);
  906fec:	7423a0        	bltu	a2, a4, 906f90 <db_cmd_memdump+0x30>
	A_PRINTF("\n\r");
  906fef:	126915        	l32r	a2, 8e1444 <_bss_end+0x3ce534>
  906ff2:	1a69a0        	l32r	a10, 8e1674 <athos_indirection_table_install+0x100>
  906ff5:	222212        	l32i	a2, a2, 72
  906ff8:	0b2000        	callx8	a2
	unsigned long       addr1, addr2;

	if (db_ascii_to_hex(param1, &addr1) != -1 && db_ascii_to_hex(param2, &addr2) != -1 && addr1 < addr2 && addr1%4 == 0)
	{
		db_print_dump((const char *)addr1, (const char *)addr2);
		return 0;
  906ffb:	c020      	movi.n	a2, 0
  906ffd:	d10f      	retw.n
  906fff:	00005b        	extui	a0, a0, 16, 12
	}

	db_incorect_format();
  907002:	ff          	.byte 0xff
  907003:	75c72f        	bbci	a12, 21, 907036 <db_str_cmd+0x2e>
	return -1;
}
  907006:	d10f      	retw.n

00907008 <db_str_cmd>:
	db_incorect_format();
	return -1;
}

static int db_str_cmd(char *cmd, char *param1, char *param2, char *param3)
{
  907008:	6c100a        	entry	a1, 80
	unsigned long val;
	unsigned long addr;
	char val_str[20];
	char addr_str[20];

	if ((A_STRLEN(param2) > 0) &&
  90700b:	186915        	l32r	a8, 8e1460 <_bss_end+0x3ce550>
  90700e:	da40      	mov.n	a10, a4
  907010:	288266        	l32i	a8, a8, 0x198
  907013:	0b8000        	callx8	a8
  907016:	6ba102        	bgei	a10, 1, 90701c <db_str_cmd+0x14>
  907019:	6000a4        	j	9070c1 <db_str_cmd+0xb9>
	    (db_ascii_to_hex(param1, &addr) != -1) &&
  90701c:	da30      	mov.n	a10, a3
  90701e:	2b1c28        	addi	a11, a1, 40
  907021:	5bff7c        	call8	906e14 <db_ascii_to_hex>
	unsigned long val;
	unsigned long addr;
	char val_str[20];
	char addr_str[20];

	if ((A_STRLEN(param2) > 0) &&
  907024:	69a002        	bnei	a10, -1, 90702a <db_str_cmd+0x22>
  907027:	600096        	j	9070c1 <db_str_cmd+0xb9>
	    (db_ascii_to_hex(param1, &addr) != -1) &&
	    (db_ascii_to_hex(param2, &val) != -1))
  90702a:	da40      	mov.n	a10, a4
  90702c:	2b1c2c        	addi	a11, a1, 44
  90702f:	5bff79        	call8	906e14 <db_ascii_to_hex>
	unsigned long addr;
	char val_str[20];
	char addr_str[20];

	if ((A_STRLEN(param2) > 0) &&
	    (db_ascii_to_hex(param1, &addr) != -1) &&
  907032:	69a002        	bnei	a10, -1, 907038 <db_str_cmd+0x30>
  907035:	600088        	j	9070c1 <db_str_cmd+0xb9>
	    (db_ascii_to_hex(param2, &val) != -1))
	{
		if (strcmp(cmd, "STR") == 0)
  907038:	1b69a1        	l32r	a11, 8e16bc <athos_indirection_table_install+0x148>
  90703b:	da20      	mov.n	a10, a2
  90703d:	5b7d48        	call8	8e6560 <strcmp>
  907040:	cda1      	bnez.n	a10, 907055 <db_str_cmd+0x4d>
		{
			addr &= 0xfffffffc;
  907042:	821a      	l32i.n	a2, a1, 40
  907044:	c73c      	movi.n	a3, -4
  907046:	023201        	and	a2, a3, a2
			iowrite32(addr, val);
  907049:	831b      	l32i.n	a3, a1, 44
	    (db_ascii_to_hex(param1, &addr) != -1) &&
	    (db_ascii_to_hex(param2, &val) != -1))
	{
		if (strcmp(cmd, "STR") == 0)
		{
			addr &= 0xfffffffc;
  90704b:	921a      	s32i.n	a2, a1, 40
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90704d:	0c0200        	memw
  907050:	9320      	s32i.n	a3, a2, 0
  907052:	600044        	j	90709a <db_str_cmd+0x92>
			iowrite32(addr, val);
		}

		else if (strcmp(cmd, "STRH") == 0)
  907055:	1b69a2        	l32r	a11, 8e16e0 <athos_indirection_table_install+0x16c>
  907058:	da20      	mov.n	a10, a2
  90705a:	5b7d41        	call8	8e6560 <strcmp>
  90705d:	cda3      	bnez.n	a10, 907074 <db_str_cmd+0x6c>
		{
			addr &= 0xfffffffe;
  90705f:	821a      	l32i.n	a2, a1, 40
  907061:	c73e      	movi.n	a3, -2
  907063:	023201        	and	a2, a3, a2
  907066:	231117        	l16ui	a3, a1, 46
  907069:	921a      	s32i.n	a2, a1, 40
	*(volatile uint8_t *) addr = b;
}

static inline void iowrite16(volatile uint32_t addr, const uint16_t b)
{
	*(volatile uint16_t *) addr = b;
  90706b:	0c0200        	memw
  90706e:	232500        	s16i	a3, a2, 0
  907071:	600025        	j	90709a <db_str_cmd+0x92>
			//*(volatile unsigned short *)(addr & 0xfffffffe) = (unsigned short)val;
			iowrite16(addr, val);
		}
		else if (strcmp(cmd, "STRB") == 0)
  907074:	1b69a3        	l32r	a11, 8e1700 <athos_indirection_table_install+0x18c>
  907077:	da20      	mov.n	a10, a2
  907079:	5b7d39        	call8	8e6560 <strcmp>
  90707c:	cdaa      	bnez.n	a10, 90709a <db_str_cmd+0x92>
		{
			if( addr & 0x00f00000 )
  90707e:	821a      	l32i.n	a2, a1, 40
  907080:	1369a4        	l32r	a3, 8e1710 <athos_indirection_table_install+0x19c>
  907083:	841b      	l32i.n	a4, a1, 44
  907085:	732003        	bnone	a2, a3, 90708c <db_str_cmd+0x84>
  907088:	600005        	j	907091 <db_str_cmd+0x89>
  90708b:	00c033        	excw
				iowrite8(addr, val);
			else
				iowrite8(addr^3, val);
  90708e:	032203        	xor	a2, a2, a3
  907091:	040447        	extui	a4, a4, 0, 8
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  907094:	0c0200        	memw
  907097:	242400        	s8i	a4, a2, 0
			//*(volatile unsigned char *)addr = (unsigned char)val;
		}

		db_hex_to_ascii(val, val_str);
  90709a:	8a1b      	l32i.n	a10, a1, 44
  90709c:	2b1c14        	addi	a11, a1, 20
  90709f:	5bff77        	call8	906e7c <db_hex_to_ascii>
		db_hex_to_ascii(addr, addr_str);
  9070a2:	8a1a      	l32i.n	a10, a1, 40
  9070a4:	db10      	mov.n	a11, a1
  9070a6:	5bff75        	call8	906e7c <db_hex_to_ascii>

		A_PRINTF("%s : %s\n\r", addr_str, val_str);
  9070a9:	126915        	l32r	a2, 8e1500 <_bss_end+0x3ce5f0>
  9070ac:	1a69a5        	l32r	a10, 8e1740 <athos_indirection_table_install+0x1cc>
  9070af:	222212        	l32i	a2, a2, 72
  9070b2:	db10      	mov.n	a11, a1
  9070b4:	2c1c14        	addi	a12, a1, 20
  9070b7:	0b2000        	callx8	a2
		return 0;
  9070ba:	c020      	movi.n	a2, 0
  9070bc:	d10f      	retw.n
  9070be:	000000        	ill
	}

	db_incorect_format();
  9070c1:	5bff45        	call8	906dd8 <db_incorect_format>
	return -1;
  9070c4:	c72f      	movi.n	a2, -1
}
  9070c6:	d10f      	retw.n

009070c8 <db_ldr_cmd>:
	}
	return i;
}

static int db_ldr_cmd(char *cmd, char *param1, char *param2, char *param3)
{
  9070c8:	6c100a        	entry	a1, 80
	unsigned long val;
	unsigned long addr;
	char val_str[20];
	char addr_str[20];

	if (db_ascii_to_hex(param1, &addr) != -1)
  9070cb:	033a02        	or	a10, a3, a3
  9070ce:	2b1c28        	addi	a11, a1, 40
  9070d1:	5bff50        	call8	906e14 <db_ascii_to_hex>
  9070d4:	d3a0      	mov.n	a3, a10
  9070d6:	68a06b        	beqi	a10, -1, 907145 <db_ldr_cmd+0x7d>
	{
		if( addr == 0 )
  9070d9:	831a      	l32i.n	a3, a1, 40
  9070db:	cd31      	bnez.n	a3, 9070f0 <db_ldr_cmd+0x28>
		{
			A_PRINTF("Error! bad address 0x%08x.\n\r",
  9070dd:	126915        	l32r	a2, 8e1534 <_bss_end+0x3ce624>
  9070e0:	1a69a6        	l32r	a10, 8e1778 <athos_indirection_table_install+0x204>
  9070e3:	222212        	l32i	a2, a2, 72
  9070e6:	033b02        	or	a11, a3, a3
  9070e9:	0b2000        	callx8	a2
				 (unsigned long)addr);
			return -1;
  9070ec:	c72f      	movi.n	a2, -1
  9070ee:	d10f      	retw.n
		}
		if (strcmp(cmd, "LDR") == 0)
  9070f0:	1b69a7        	l32r	a11, 8e178c <athos_indirection_table_install+0x218>
  9070f3:	da20      	mov.n	a10, a2
  9070f5:	5b7d1a        	call8	8e6560 <strcmp>
  9070f8:	ccad      	bnez.n	a10, 907109 <db_ldr_cmd+0x41>
		{
			addr &= 0xfffffffc;
  9070fa:	c72c      	movi.n	a2, -4
  9070fc:	023301        	and	a3, a3, a2
  9070ff:	931a      	s32i.n	a3, a1, 40
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  907101:	0c0200        	memw
  907104:	8430      	l32i.n	a4, a3, 0
  907106:	600017        	j	907121 <db_ldr_cmd+0x59>
			//val = *(unsigned long *)addr;

			val = ioread32(addr);
		}
		else if (strcmp(cmd, "LDRH") == 0)
  907109:	1b69a8        	l32r	a11, 8e17ac <athos_indirection_table_install+0x238>
  90710c:	022a02        	or	a10, a2, a2
  90710f:	5b7d14        	call8	8e6560 <strcmp>
  907112:	ccab      	bnez.n	a10, 907121 <db_ldr_cmd+0x59>
		{
			addr &= 0xfffffffe;
  907114:	c72e      	movi.n	a2, -2
  907116:	023301        	and	a3, a3, a2
	return *(const volatile uint8_t *) addr;
}

static inline uint16_t ioread16(const volatile uint32_t addr)
{
	return *(const volatile uint16_t *) addr;
  907119:	243100        	l16ui	a4, a3, 0
  90711c:	931a      	s32i.n	a3, a1, 40
  90711e:	04044f        	extui	a4, a4, 0, 16
		}
		else if (strcmp(cmd, "LDRB") == 0)
		{
		}

		db_hex_to_ascii(val, val_str);
  907121:	2b1c14        	addi	a11, a1, 20
  907124:	da40      	mov.n	a10, a4
  907126:	5bff55        	call8	906e7c <db_hex_to_ascii>
		db_hex_to_ascii(addr, addr_str);
  907129:	8a1a      	l32i.n	a10, a1, 40
  90712b:	db10      	mov.n	a11, a1
  90712d:	5bff53        	call8	906e7c <db_hex_to_ascii>

		A_PRINTF("%s : %s\n\r", addr_str, val_str);
  907130:	126915        	l32r	a2, 8e1584 <athos_indirection_table_install+0x10>
  907133:	1a69a5        	l32r	a10, 8e17c8 <athos_indirection_table_install+0x254>
  907136:	222212        	l32i	a2, a2, 72
  907139:	db10      	mov.n	a11, a1
  90713b:	2c1c14        	addi	a12, a1, 20
  90713e:	0b2000        	callx8	a2
		return 0;
  907141:	c020      	movi.n	a2, 0
  907143:	d10f      	retw.n
	}

	db_incorect_format();
  907145:	5bff24        	call8	906dd8 <db_incorect_format>
  907148:	63ffa0        	j	9070ec <db_ldr_cmd+0x24>
	...

0090714c <db_intr_cmd>:
}

uint32_t delay = 0;

static int db_intr_cmd(char *cmd, char *param1, char *param2, char *param3)
{
  90714c:	6c1006        	entry	a1, 48
#if SYSTEM_MODULE_INTR
	uint32_t pending_intrs;

	if(strcmp(param1, "read") == 0 )
  90714f:	1b69a9        	l32r	a11, 8e17f4 <athos_indirection_table_install+0x280>
  907152:	033a02        	or	a10, a3, a3
  907155:	5b7d02        	call8	8e6560 <strcmp>
  907158:	65a024        	bnez	a10, 907180 <db_intr_cmd+0x34>
	{
		{
			/* Update snapshot of pending interrupts */

			pending_intrs = A_INTR_GET_INTRPENDING();
  90715b:	146915        	l32r	a4, 8e15b0 <athos_indirection_table_install+0x3c>
  90715e:	2a424f        	l32i	a10, a4, 0x13c
  907161:	0ba000        	callx8	a10
  907164:	d2a0      	mov.n	a2, a10

			A_PRINTF("intr mask [0x%08x]\n\r", xthal_get_intenable());
  907166:	234212        	l32i	a3, a4, 72
  907169:	5b7e05        	call8	8e6980 <xthal_get_intenable>
  90716c:	dba0      	mov.n	a11, a10
  90716e:	1a69aa        	l32r	a10, 8e1818 <athos_indirection_table_install+0x2a4>
  907171:	0b3000        	callx8	a3
			A_PRINTF("intr on [0x%08x]\n\r", pending_intrs);
  907174:	1a69ab        	l32r	a10, 8e1820 <athos_indirection_table_install+0x2ac>
  907177:	234212        	l32i	a3, a4, 72
  90717a:	db20      	mov.n	a11, a2
  90717c:	600089        	j	907209 <db_intr_cmd+0xbd>
  90717f:	001b69        	excw
		}
	}
	else if (strcmp(param1, "timer") == 0 )
  907182:	acda      	add.n	a10, a13, a12
  907184:	305b7c        	excw
  907187:	f6          	.byte 0xf6
  907188:	65a084        	bnez	a10, 907210 <db_intr_cmd+0xc4>
	{
		uint32_t data = 0;

		if (strcmp(param2, "on") == 0 )
  90718b:	1b69ad        	l32r	a11, 8e1840 <athos_indirection_table_install+0x2cc>
			A_PRINTF("intr on [0x%08x]\n\r", pending_intrs);
		}
	}
	else if (strcmp(param1, "timer") == 0 )
	{
		uint32_t data = 0;
  90718e:	9a10      	s32i.n	a10, a1, 0

		if (strcmp(param2, "on") == 0 )
  907190:	da40      	mov.n	a10, a4
  907192:	5b7cf3        	call8	8e6560 <strcmp>
  907195:	65a013        	bnez	a10, 9071ac <db_intr_cmd+0x60>
		{
			/* TODO: this part is probably dead. */
			pending_intrs = A_INTR_GET_INTRENABLE()|CMNOS_IMASK_XTTIMER;
  907198:	146915        	l32r	a4, 8e15ec <athos_indirection_table_install+0x78>
  90719b:	230a02        	movi	a3, 2
  90719e:	2a424d        	l32i	a10, a4, 0x134
  9071a1:	0ba000        	callx8	a10
  9071a4:	03a302        	or	a3, a10, a3
  9071a7:	600019        	j	9071c4 <db_intr_cmd+0x78>
  9071aa:	00001b        	sra	a0, a0
			A_INTR_SET_INTRENABLE(pending_intrs);
			A_PRINTF("- intr [0x%08x]\n\r", pending_intrs);
		}
		else if ( strcmp(param2, "off") == 0 )
  9071ad:	69afda        	bnei	a10, 0x100, 90718b <db_intr_cmd+0x3f>
  9071b0:	405b7c        	excw
  9071b3:	eb          	.byte 0xeb
  9071b4:	cea5      	bnez.n	a10, 9071dd <db_intr_cmd+0x91>
		{
			pending_intrs = A_INTR_GET_INTRENABLE()&(~CMNOS_IMASK_XTTIMER);
  9071b6:	146915        	l32r	a4, 8e160c <athos_indirection_table_install+0x98>
  9071b9:	c73d      	movi.n	a3, -3
  9071bb:	2a424d        	l32i	a10, a4, 0x134
  9071be:	0ba000        	callx8	a10
  9071c1:	03a301        	and	a3, a10, a3
			A_INTR_SET_INTRENABLE(pending_intrs);
  9071c4:	22424e        	l32i	a2, a4, 0x138
  9071c7:	033a02        	or	a10, a3, a3
  9071ca:	0b2000        	callx8	a2
			A_PRINTF("- intr [0x%08x]\n\r", pending_intrs);
  9071cd:	1a69ae        	l32r	a10, 8e1888 <athos_indirection_table_install+0x314>
  9071d0:	244212        	l32i	a4, a4, 72
  9071d3:	db30      	mov.n	a11, a3
  9071d5:	0b4000        	callx8	a4
  9071d8:	600049        	j	907225 <db_intr_cmd+0xd9>
  9071db:	0000da        	excw
            
		}
		else if( db_ascii_to_hex(param2, &data)==0 )
  9071de:	40db10        	excw
  9071e1:	5bff0c        	call8	906e14 <db_ascii_to_hex>
  9071e4:	cfad      	bnez.n	a10, 907225 <db_intr_cmd+0xd9>
		{
			if( data>=0 && data <=10 )
  9071e6:	8410      	l32i.n	a4, a1, 0
  9071e8:	c02a      	movi.n	a2, 10
  9071ea:	1369b0        	l32r	a3, 8e18ac <athos_indirection_table_install+0x338>
  9071ed:	742304        	bltu	a2, a4, 9071f5 <db_intr_cmd+0xa9>
				delay = data;
  9071f0:	9430      	s32i.n	a4, a3, 0
  9071f2:	600004        	j	9071fa <db_intr_cmd+0xae>
			else
				delay = 3;
  9071f5:	c023      	movi.n	a2, 3
  9071f7:	223600        	s32i	a2, a3, 0
            
			A_PRINTF("==>set cb to %d seconds \n\r", delay);
  9071fa:	126915        	l32r	a2, 8e1650 <athos_indirection_table_install+0xdc>
  9071fd:	1a69b1        	l32r	a10, 8e18c4 <athos_indirection_table_install+0x350>
  907200:	232212        	l32i	a3, a2, 72
  907203:	1269b0        	l32r	a2, 8e18c4 <athos_indirection_table_install+0x350>
  907206:	2b2200        	l32i	a11, a2, 0
  907209:	0b3000        	callx8	a3
  90720c:	600015        	j	907225 <db_intr_cmd+0xd9>
  90720f:	001369        	excw
		}

	}
	else
	{
		A_PRINTF("\tintr read - read the interrenable status\n\r");
  907212:	151a69        	l32r	a5, 8cdbb8 <_bss_end+0x3baca8>
  907215:	b222      	addi.n	a2, a2, 2
  907217:	32120b        	excw
  90721a:	20001a        	l8ui	a0, a0, 26
		A_PRINTF("\tintr timer on/off/tick - timer attach on/off/ticks\n\r");
  90721d:	69b322        	bnei	a11, 3, 907243 <db_wdt_cmd+0x17>
  907220:	32120b        	excw
  907223:	2000c0        	l8ui	a0, a0, 192

	}

#endif //#if SYSTEM_MODULE_INTR
	return 0;
}
  907226:	20d10f        	l16ui	a0, a13, 30
  907229:	000000        	ill

0090722c <db_wdt_cmd>:
    extern htc_handle_t htc_handle;
    HTC_Ready(htc_handle);
}

static int db_wdt_cmd(char *cmd, char *param1, char *param2, char *param3)
{
  90722c:	6c1008        	entry	a1, 64
        if ( strcmp(param1, "rst") == 0 )
  90722f:	1b69b4        	l32r	a11, 8e1900 <athos_indirection_table_install+0x38c>
  907232:	033a02        	or	a10, a3, a3
  907235:	5b7cca        	call8	8e6560 <strcmp>
  907238:	cda1      	bnez.n	a10, 90724d <db_wdt_cmd+0x21>
        {
		A_PRINTF(" reseting...\n\n\r");
  90723a:	136915        	l32r	a3, 8e1690 <athos_indirection_table_install+0x11c>
  90723d:	1a69b5        	l32r	a10, 8e1914 <athos_indirection_table_install+0x3a0>
  907240:	243212        	l32i	a4, a3, 72
  907243:	0b4000        	callx8	a4
		A_WDT_RESET();
  907246:	22325d        	l32i	a2, a3, 0x174
  907249:	600010        	j	90725d <db_wdt_cmd+0x31>
  90724c:	001b69        	excw
        }
        else if( strcmp(param1, "on") == 0 )
  90724f:	adda      	add.n	a10, a13, a13
  907251:	305b7c        	excw
  907254:	c3cc      	movi.n	a12, 60
  907256:	ab12      	add.n	a2, a1, a11
        {
		A_WDT_ENABLE();
  907258:	691522        	bnei	a1, 5, 90727e <db_wdt_cmd+0x52>
  90725b:	22590b        	l16si	a2, a5, 22
  90725e:	2000d1        	l8ui	a0, a0, 209
  907261:	0f0000        	callx12	a0
        }
        else if (strcmp(param1, "off") == 0 )
  907264:	1b69af        	l32r	a11, 8e1920 <athos_indirection_table_install+0x3ac>
  907267:	da30      	mov.n	a10, a3
  907269:	5b7cbd        	call8	8e6560 <strcmp>
  90726c:	cca8      	bnez.n	a10, 907278 <db_wdt_cmd+0x4c>
        {
		A_WDT_DISABLE();
  90726e:	126915        	l32r	a2, 8e16c4 <athos_indirection_table_install+0x150>
  907271:	22225a        	l32i	a2, a2, 0x168
  907274:	63ffe5        	j	90725d <db_wdt_cmd+0x31>
  907277:	001b69        	excw
        }
        else if ( strcmp(param1, "boot") == 0 )
  90727a:	b6da      	addi.n	a10, a13, 6
  90727c:	305b7c        	excw
  90727f:	b8ce      	addi.n	a14, a12, 8
  907281:	a413      	add.n	a3, a1, a4
        {
		A_PRINTF("Last BOOT is ");
  907283:	69151a        	bnei	a1, 5, 9072a1 <db_wdt_cmd+0x75>
  907286:	69b724        	bnei	a11, 7, 9072ae <db_wdt_cmd+0x82>
  907289:	32120b        	excw
  90728c:	40002a        	excw
		if (ENUM_WDT_BOOT == A_WDT_LASTBOOT() )
  90728f:	325e0b        	excw
  907292:	a000      	add.n	a0, a0, a0
			A_PRINTF("wdt");
  907294:	233212        	l32i	a3, a3, 72
		A_WDT_DISABLE();
        }
        else if ( strcmp(param1, "boot") == 0 )
        {
		A_PRINTF("Last BOOT is ");
		if (ENUM_WDT_BOOT == A_WDT_LASTBOOT() )
  907297:	69a105        	bnei	a10, 1, 9072a0 <db_wdt_cmd+0x74>
			A_PRINTF("wdt");
  90729a:	1a69b8        	l32r	a10, 8e197c <athos_indirection_table_install+0x408>
  90729d:	600002        	j	9072a3 <db_wdt_cmd+0x77>
		else
			A_PRINTF("normal boot");
  9072a0:	1a69b9        	l32r	a10, 8e1984 <athos_indirection_table_install+0x410>
  9072a3:	0b3000        	callx8	a3
  9072a6:	d10f      	retw.n
        }
        else if (strcmp(param1, "loop") == 0 )
  9072a8:	1b69ba        	l32r	a11, 8e1990 <athos_indirection_table_install+0x41c>
  9072ab:	da30      	mov.n	a10, a3
  9072ad:	5b7cac        	call8	8e6560 <strcmp>
  9072b0:	ceac      	bnez.n	a10, 9072e0 <db_wdt_cmd+0xb4>
        {
		T_WDT_CMD wdt_cmd;
		uint32_t time_offset;
		A_PRINTF(" doing the wdt reseting...");
  9072b2:	136915        	l32r	a3, 8e1708 <athos_indirection_table_install+0x194>
  9072b5:	1a69bb        	l32r	a10, 8e19a4 <athos_indirection_table_install+0x430>
  9072b8:	253212        	l32i	a5, a3, 72
  9072bb:	0b5000        	callx8	a5

		if( db_ascii_to_hex(param2, &time_offset)!=0 )
  9072be:	da40      	mov.n	a10, a4
  9072c0:	2b1c10        	addi	a11, a1, 16
  9072c3:	5bfed4        	call8	906e14 <db_ascii_to_hex>
		{
			if( time_offset < 0 || time_offset >0xffffffff )
				time_offset = 0xffffff;
		}
		A_PRINTF(" (wdt tick: 0x%08x...\n\n\r", time_offset);
  9072c6:	2b1204        	l32i	a11, a1, 16
  9072c9:	243212        	l32i	a4, a3, 72
  9072cc:	1a69bc        	l32r	a10, 8e19bc <athos_indirection_table_install+0x448>
  9072cf:	0b4000        	callx8	a4
		wdt_cmd.cmd = WDT_TIMEOUT;
		wdt_cmd.timeout = time_offset;

		A_WDT_SET(wdt_cmd);
  9072d2:	8b14      	l32i.n	a11, a1, 16
  9072d4:	23325b        	l32i	a3, a3, 0x16c
  9072d7:	c0a1      	movi.n	a10, 1
  9072d9:	0b3000        	callx8	a3
  9072dc:	63fffc        	j	9072dc <db_wdt_cmd+0xb0>
  9072df:	001b69        	excw
		while(1) ;
        }
        else if (strcmp(param1, "noloop") == 0 )
  9072e2:	bdda      	addi.n	a10, a13, 13
  9072e4:	305b7c        	excw
  9072e7:	9ece      	s32i.n	a14, a12, 56
  9072e9:	ad13      	add.n	a3, a1, a13
        {
		T_WDT_CMD wdt_cmd;
		uint32_t time_offset;
		A_PRINTF(" doing the wdt reseting...");
  9072eb:	69151a        	bnei	a1, 5, 907309 <db_wdt_cmd+0xdd>
  9072ee:	69bb24        	bnei	a11, 16, 907316 <db_wdt_cmd+0xea>
  9072f1:	32120b        	excw
  9072f4:	40002b        	excw

		if( db_ascii_to_hex(param3, &time_offset)!=0 )
  9072f7:	1c10da        	l32r	a12, 8cb660 <_bss_end+0x3b8750>
  9072fa:	505bfe        	call0	91e2f4 <_etext+0xf1f7>
  9072fd:	c62b      	movi.n	a2, -21
		{
			if( time_offset < 0 || time_offset >0xffffffff )
				time_offset = 0xffffff;
		}
		A_PRINTF(" (wdt tick: 0x%08x...\n\n\r", time_offset);
  9072ff:	120424        	l32r	a2, 8c8390 <_bss_end+0x3b5480>
  907302:	32121a        	excw
  907305:	69bc0b        	bnei	a11, 32, 907314 <db_wdt_cmd+0xe8>
  907308:	40008b        	excw

		wdt_cmd.cmd = WDT_TIMEOUT;
		wdt_cmd.timeout = time_offset;

		A_WDT_SET(wdt_cmd);
  90730b:	142332        	l32r	a4, 8cffd4 <_bss_end+0x3bd0c4>
  90730e:	5bc0a1        	call8	8f7594 <memset+0x1074c>
  907311:	0b3000        	callx8	a3
  907314:	d10f      	retw.n
  907316:	000000        	ill
        }
        else if( strcmp(param1, "event") == 0 )
  907319:	1b69be        	l32r	a11, 8e1a14 <athos_indirection_table_install+0x4a0>
  90731c:	da30      	mov.n	a10, a3
  90731e:	5b7c90        	call8	8e6560 <strcmp>
  907321:	65a04f        	bnez	a10, 907374 <db_wdt_cmd+0x148>

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  907324:	13695c        	l32r	a3, 8e1894 <athos_indirection_table_install+0x320>
        {
		uint32_t event= 0x00123400;

		/* disable ep3 intr */
		iowrite8_usb(0x17, ioread8_usb(0x17)|0xc0);
  907327:	240ac0        	movi	a4, 192
  90732a:	223000        	l8ui	a2, a3, 0
  90732d:	18695f        	l32r	a8, 8e18ac <athos_indirection_table_install+0x338>
  907330:	020247        	extui	a2, a2, 0, 8
  907333:	042202        	or	a2, a2, a4
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  907336:	0c0200        	memw
  907339:	223400        	s8i	a2, a3, 0
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90733c:	12693c        	l32r	a2, 8e182c <athos_indirection_table_install+0x2b8>
  90733f:	c04f      	movi.n	a4, 15
  907341:	0c0200        	memw
  907344:	9420      	s32i.n	a4, a2, 0
  907346:	1469bf        	l32r	a4, 8e1a44 <athos_indirection_table_install+0x4d0>
  907349:	12695d        	l32r	a2, 8e18c0 <athos_indirection_table_install+0x34c>
  90734c:	0c0200        	memw
  90734f:	9420      	s32i.n	a4, a2, 0

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  907351:	228000        	l8ui	a2, a8, 0

		/* ZM_EP3_DATA_REG = event; */
		iowrite32_usb(0xF8, event);

		/* tx done */
		iowrite8_usb(0xAE, ioread8_usb(0xAE) | 0x08);
  907354:	c048      	movi.n	a4, 8
  907356:	020247        	extui	a2, a2, 0, 8
  907359:	042202        	or	a2, a2, a4
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  90735c:	0c0200        	memw
  90735f:	228400        	s8i	a2, a8, 0

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  907362:	223000        	l8ui	a2, a3, 0

		/* enable ep3 intr */
		iowrite8_usb(0x17, ioread8_usb(0x17) & 0xbf);
  907365:	24fabf        	movi	a4, -65
  907368:	020247        	extui	a2, a2, 0, 8
  90736b:	042201        	and	a2, a2, a4
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  90736e:	0c0200        	memw
  907371:	223400        	s8i	a2, a3, 0
        }
}
  907374:	d10f      	retw.n
	...

00907378 <db_usb_cmd>:
#endif //#if SYSTEM_MODULE_INTR
	return 0;
}

static int db_usb_cmd(char *cmd, char *param1, char *param2, char *param3)
{
  907378:	6c1004        	entry	a1, 32
	A_PRINTF("THIS IS USB COMMAND\n\r");
  90737b:	126915        	l32r	a2, 8e17d0 <athos_indirection_table_install+0x25c>
  90737e:	1a69c0        	l32r	a10, 8e1a80 <athos_indirection_table_install+0x50c>
  907381:	282212        	l32i	a8, a2, 72
  907384:	0b8000        	callx8	a8

	if( strcmp(param1, "que") == 0 )
  907387:	1b69c1        	l32r	a11, 8e1a8c <athos_indirection_table_install+0x518>
  90738a:	033a02        	or	a10, a3, a3
  90738d:	5b7c74        	call8	8e6560 <strcmp>
  907390:	cca4      	bnez.n	a10, 907398 <db_usb_cmd+0x20>
	{
		HIFusb_DescTraceDump();
  907392:	5b7115        	call8	8e37e8 <HIFusb_DescTraceDump>
  907395:	600011        	j	9073aa <db_usb_cmd+0x32>
	}
	else
	{
		A_PRINTF("\tusb que - dump descriptor queue\n\r");
  907398:	282212        	l32i	a8, a2, 72
  90739b:	1a69c2        	l32r	a10, 8e1aa4 <athos_indirection_table_install+0x530>
  90739e:	0b8000        	callx8	a8
		A_PRINTF("\tusb fw on/off - enable/disable write fw download to ram\n\r");
  9073a1:	1a69c3        	l32r	a10, 8e1ab0 <athos_indirection_table_install+0x53c>
  9073a4:	222212        	l32i	a2, a2, 72
  9073a7:	0b2000        	callx8	a2

	}
	return 0;
}
  9073aa:	c020      	movi.n	a2, 0
  9073ac:	d10f      	retw.n
	...

009073b0 <db_info_cmd>:
		clk_change(clk, ratio, baud);
	}
}

static int db_info_cmd(char *cmd, char *param1, char *param2, char *param3)
{
  9073b0:	6c1004        	entry	a1, 32
#if 1

	if(strcmp(param1, "ram") == 0 )
  9073b3:	1b69c4        	l32r	a11, 8e1ac4 <athos_indirection_table_install+0x550>
  9073b6:	033a02        	or	a10, a3, a3
  9073b9:	5b7c69        	call8	8e6560 <strcmp>
  9073bc:	65a00d        	bnez	a10, 9073cd <db_info_cmd+0x1d>
	{
		A_ALLOCRAM_DEBUG();
  9073bf:	186915        	l32r	a8, 8e1814 <athos_indirection_table_install+0x2a0>
  9073c2:	288253        	l32i	a8, a8, 0x14c
  9073c5:	0b8000        	callx8	a8
  9073c8:	600004        	j	9073d0 <db_info_cmd+0x20>
  9073cb:	00005b        	extui	a0, a0, 16, 12
	* is dead too */
	else if(strcmp(param1, "cpu") == 0)
		zfPrintCpuUtilization();
#endif
	else   // defalut dump
		HIFusb_DescTraceDump();
  9073ce:	7106c0        	bbci	a0, 1, 907392 <db_usb_cmd+0x1a>
		A_PRINTF("read 0x%08x (0x%08x) use %d clocks\n\r", data3, data, ccount2-ccount1);

	}
#endif
	return 1;
}
  9073d1:	21d10f        	l16ui	a1, a13, 30

009073d4 <zf_debug_task>:
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
{
  9073d4:	6c1006        	entry	a1, 48
	int i;
	uint8_t ch;

	if ((zm_get_char(&ch)) == 0)
  9073d7:	136915        	l32r	a3, 8e182c <athos_indirection_table_install+0x2b8>
  9073da:	da10      	mov.n	a10, a1
  9073dc:	223215        	l32i	a2, a3, 84
  9073df:	0b2000        	callx8	a2
  9073e2:	64a250        	beqz	a10, 907636 <zf_debug_task+0x262>
	{
		return;
	}

	if (db_get_cmd_line(ch, raw_cmd, &gvLen) == 0)
  9073e5:	2b1000        	l8ui	a11, a1, 0

static uint16_t db_get_cmd_line(uint8_t ch, char *cmd_line, uint16_t *i)
{
	int cmd_buf_loc;

	switch (ch)
  9073e8:	69b802        	bnei	a11, 8, 9073ee <zf_debug_task+0x1a>
  9073eb:	6000f6        	j	9074e5 <zf_debug_task+0x111>
  9073ee:	c028      	movi.n	a2, 8
  9073f0:	7b2306        	bltu	a2, a11, 9073fa <zf_debug_task+0x26>
  9073f3:	64b23f        	beqz	a11, 907636 <zf_debug_task+0x262>
  9073f6:	60010a        	j	907504 <zf_debug_task+0x130>
  9073f9:	00c02d        	excw
  9073fc:	72b179        	beq	a11, a2, 907479 <zf_debug_task+0xa5>
  9073ff:	c52c      	movi.n	a2, 92
  907401:	72b102        	beq	a11, a2, 907407 <zf_debug_task+0x33>
  907404:	6000fc        	j	907504 <zf_debug_task+0x130>
	{
	case '\\' : /* Last command */
		pressed_time++;
  907407:	126993        	l32r	a2, 8e1a54 <athos_indirection_table_install+0x4e0>
  90740a:	8320      	l32i.n	a3, a2, 0
  90740c:	b133      	addi.n	a3, a3, 1
		if (pressed_time >= COMMAND_BUFFER_SIZE)
  90740e:	6b3602        	bgei	a3, 6, 907414 <zf_debug_task+0x40>
	int cmd_buf_loc;

	switch (ch)
	{
	case '\\' : /* Last command */
		pressed_time++;
  907411:	232600        	s32i	a3, a2, 0
		if (pressed_time >= COMMAND_BUFFER_SIZE)
		{
			pressed_time--;
		}
		cmd_buf_loc = cmd_buf_ptr - pressed_time;
  907414:	136990        	l32r	a3, 8e1a54 <athos_indirection_table_install+0x4e0>
  907417:	8220      	l32i.n	a2, a2, 0
  907419:	8a30      	l32i.n	a10, a3, 0
  90741b:	02aa0c        	sub	a10, a10, a2
		if (cmd_buf_loc < 0)
  90741e:	67a00e        	bgez	a10, 907430 <zf_debug_task+0x5c>
		{
			if (cmd_buf_full == TRUE)
  907421:	126991        	l32r	a2, 8e1a68 <athos_indirection_table_install+0x4f4>
  907424:	8320      	l32i.n	a3, a2, 0
			{
				cmd_buf_loc += COMMAND_BUFFER_SIZE;
  907426:	b6a2      	addi.n	a2, a10, 6
  907428:	b033      	addi.n	a3, a3, -1
  90742a:	2a0a00        	movi	a10, 0
  90742d:	032a38        	moveqz	a10, a2, a3
			{
				cmd_buf_loc = 0;
			}
		}

		if (A_STRLEN(cmd_buffer[cmd_buf_loc]) != 0)
  907430:	1269c5        	l32r	a2, 8e1b44 <athos_indirection_table_install+0x5d0>
  907433:	0aaa0a        	addx4	a10, a10, a10
  907436:	02a30b        	addx8	a3, a10, a2
  907439:	126915        	l32r	a2, 8e1890 <athos_indirection_table_install+0x31c>
  90743c:	033a02        	or	a10, a3, a3
  90743f:	242266        	l32i	a4, a2, 0x198
  907442:	0b4000        	callx8	a4
  907445:	64a1ed        	beqz	a10, 907636 <zf_debug_task+0x262>
		{
			A_STRCPY(cmd_line, cmd_buffer[cmd_buf_loc]);
  907448:	1469c6        	l32r	a4, 8e1b60 <athos_indirection_table_install+0x5ec>
  90744b:	252264        	l32i	a5, a2, 0x190
  90744e:	db30      	mov.n	a11, a3
  907450:	da40      	mov.n	a10, a4
  907452:	0b5000        	callx8	a5
			*i = A_STRLEN(cmd_buffer[cmd_buf_loc]);
  907455:	252266        	l32i	a5, a2, 0x198
  907458:	da30      	mov.n	a10, a3
  90745a:	0b5000        	callx8	a5
  90745d:	136992        	l32r	a3, 8e1aa8 <athos_indirection_table_install+0x534>
  907460:	2a3500        	s16i	a10, a3, 0
			A_PRINTF("\r>");
  907463:	232212        	l32i	a3, a2, 72
  907466:	1a69c7        	l32r	a10, 8e1b84 <athos_indirection_table_install+0x610>
  907469:	0b3000        	callx8	a3
			A_PRINTF("%s", cmd_line);
  90746c:	1a69c8        	l32r	a10, 8e1b8c <athos_indirection_table_install+0x618>
  90746f:	222212        	l32i	a2, a2, 72
  907472:	db40      	mov.n	a11, a4
  907474:	6000d1        	j	907549 <zf_debug_task+0x175>
  907477:	000012        	srai	a0, a0, 0
		}
		break;
	case 13 : /* Return */
		pressed_time = 0;
  90747a:	6993c0        	bnei	a9, 3, 90743e <zf_debug_task+0x6a>
  90747d:	509520        	call0	92c900 <_etext+0x1d803>
		cmd_line[*i] = 0;
  907480:	126992        	l32r	a2, 8e1ac8 <athos_indirection_table_install+0x554>
  907483:	1469c6        	l32r	a4, 8e1b9c <athos_indirection_table_install+0x628>
  907486:	262100        	l16ui	a6, a2, 0
		A_PRINTF("\n\r");
  907489:	1a69a0        	l32r	a10, 8e1b0c <athos_indirection_table_install+0x598>
			A_PRINTF("%s", cmd_line);
		}
		break;
	case 13 : /* Return */
		pressed_time = 0;
		cmd_line[*i] = 0;
  90748c:	064608        	add	a6, a4, a6
  90748f:	256400        	s8i	a5, a6, 0
		A_PRINTF("\n\r");
  907492:	253212        	l32i	a5, a3, 72
  907495:	0b5000        	callx8	a5
		if (*i != 0)
  907498:	222100        	l16ui	a2, a2, 0
  90749b:	ca2d      	beqz.n	a2, 9074cc <zf_debug_task+0xf8>
		{
			//Filter duplicated string in command history
			if (strcmp(cmd_buffer[(cmd_buf_ptr==0)?(COMMAND_BUFFER_SIZE-1):(cmd_buf_ptr-1)], cmd_line) != 0)
  90749d:	166990        	l32r	a6, 8e1ae0 <athos_indirection_table_install+0x56c>
  9074a0:	c0a5      	movi.n	a10, 5
  9074a2:	8260      	l32i.n	a2, a6, 0
  9074a4:	db40      	mov.n	a11, a4
  9074a6:	252cff        	addi	a5, a2, -1
  9074a9:	025a39        	movnez	a10, a5, a2
  9074ac:	1569c5        	l32r	a5, 8e1bc0 <athos_indirection_table_install+0x64c>
  9074af:	0aaa0a        	addx4	a10, a10, a10
  9074b2:	05aa0b        	addx8	a10, a10, a5
  9074b5:	5b7c2a        	call8	8e6560 <strcmp>
  9074b8:	c9a0      	beqz.n	a10, 9074cc <zf_debug_task+0xf8>
			{
				A_STRCPY(cmd_buffer[cmd_buf_ptr++], cmd_line);
  9074ba:	b127      	addi.n	a7, a2, 1
  9074bc:	022a0a        	addx4	a10, a2, a2
  9074bf:	233264        	l32i	a3, a3, 0x190
  9074c2:	9760      	s32i.n	a7, a6, 0
  9074c4:	05aa0b        	addx8	a10, a10, a5
  9074c7:	db40      	mov.n	a11, a4
  9074c9:	0b3000        	callx8	a3
			}
		}
		if (cmd_buf_ptr >= COMMAND_BUFFER_SIZE)
  9074cc:	126990        	l32r	a2, 8e1b0c <athos_indirection_table_install+0x598>
  9074cf:	8320      	l32i.n	a3, a2, 0
  9074d1:	6b3602        	bgei	a3, 6, 9074d7 <zf_debug_task+0x103>
  9074d4:	600148        	j	907620 <zf_debug_task+0x24c>
		{
			cmd_buf_ptr = 0;
  9074d7:	c030      	movi.n	a3, 0
  9074d9:	9320      	s32i.n	a3, a2, 0
			cmd_buf_full = TRUE;
  9074db:	126991        	l32r	a2, 8e1b20 <athos_indirection_table_install+0x5ac>
  9074de:	c031      	movi.n	a3, 1
  9074e0:	9320      	s32i.n	a3, a2, 0
  9074e2:	60013a        	j	907620 <zf_debug_task+0x24c>
		}
		return 1;
	case '\b' : /* Backspace */
		pressed_time = 0;
  9074e5:	126993        	l32r	a2, 8e1b34 <athos_indirection_table_install+0x5c0>
  9074e8:	c040      	movi.n	a4, 0
  9074ea:	9420      	s32i.n	a4, a2, 0
		if (*i > 0)
  9074ec:	126992        	l32r	a2, 8e1b34 <athos_indirection_table_install+0x5c0>
  9074ef:	242100        	l16ui	a4, a2, 0
  9074f2:	644140        	beqz	a4, 907636 <zf_debug_task+0x262>
		{
			*i = *i-1;
  9074f5:	b044      	addi.n	a4, a4, -1
  9074f7:	242500        	s16i	a4, a2, 0
			A_PRINTF("\b \b");
  9074fa:	1a69c9        	l32r	a10, 8e1c20 <athos_indirection_table_install+0x6ac>
  9074fd:	223212        	l32i	a2, a3, 72
  907500:	600115        	j	907619 <zf_debug_task+0x245>
  907503:	0022bc        	excw
		}
		break;
	case 0 : //None
		break;
	default :
		if ((ch >= ' ') && (ch <= '~'))
  907506:	e0          	.byte 0xe0
  907507:	020247        	extui	a2, a2, 0, 8
  90750a:	c53e      	movi.n	a3, 94
  90750c:	72332d        	bltu	a3, a2, 90753d <zf_debug_task+0x169>
		{
			pressed_time = 0;
  90750f:	126993        	l32r	a2, 8e1b5c <athos_indirection_table_install+0x5e8>
  907512:	c030      	movi.n	a3, 0
  907514:	9320      	s32i.n	a3, a2, 0
			if (*i < DB_MAX_COMMAND_LENGTH-2)
  907516:	136992        	l32r	a3, 8e1b60 <athos_indirection_table_install+0x5ec>
  907519:	c245      	movi.n	a4, 37
  90751b:	223100        	l16ui	a2, a3, 0
  90751e:	724b02        	bgeu	a4, a2, 907524 <zf_debug_task+0x150>
  907521:	600111        	j	907636 <zf_debug_task+0x262>
				{
					//if ((buf <= 'z') && (buf >= 'a'))
					//{
					//    buf -= 'a' - 'A';
					//}
					cmd_line[*i] = ch;
  907524:	1469c6        	l32r	a4, 8e1c3c <athos_indirection_table_install+0x6c8>
					*i = *i + 1;
					A_PRINTF("%c", ch);
  907527:	1a699e        	l32r	a10, 8e1ba0 <athos_indirection_table_install+0x62c>
				{
					//if ((buf <= 'z') && (buf >= 'a'))
					//{
					//    buf -= 'a' - 'A';
					//}
					cmd_line[*i] = ch;
  90752a:	a244      	add.n	a4, a4, a2
					*i = *i + 1;
  90752c:	b122      	addi.n	a2, a2, 1
  90752e:	223500        	s16i	a2, a3, 0
					A_PRINTF("%c", ch);
  907531:	126915        	l32r	a2, 8e1988 <athos_indirection_table_install+0x414>
				{
					//if ((buf <= 'z') && (buf >= 'a'))
					//{
					//    buf -= 'a' - 'A';
					//}
					cmd_line[*i] = ch;
  907534:	2b4400        	s8i	a11, a4, 0
					*i = *i + 1;
					A_PRINTF("%c", ch);
  907537:	222212        	l32i	a2, a2, 72
  90753a:	60000b        	j	907549 <zf_debug_task+0x175>
			}
		}
		else
		{
			ch = 7; /* Beep */
			A_PRINTF("%c", ch);
  90753d:	126915        	l32r	a2, 8e1994 <athos_indirection_table_install+0x420>
  907540:	1a699e        	l32r	a10, 8e1bb8 <athos_indirection_table_install+0x644>
  907543:	222212        	l32i	a2, a2, 72
  907546:	2b0a07        	movi	a11, 7
  907549:	0b2000        	callx8	a2
  90754c:	d10f      	retw.n
  90754e:	000012        	srai	a0, a0, 0
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  907551:	69c6c0        	bnei	a12, 6, 907515 <zf_debug_task+0x141>
  907554:	b1a2      	addi.n	a2, a10, 1
  907556:	c922      	beqz.n	a2, 90756c <zf_debug_task+0x198>


	for (k=0; k<4; k++)
	{
		/* Remove preceeding spaces */
		while (raw_str[i++] == ' '){}
  907558:	9000      	s32i.n	a0, a0, 0
  90755a:	b1cc      	addi.n	a12, a12, 1
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  90755c:	a8a7      	add.n	a7, a10, a8


	for (k=0; k<4; k++)
	{
		/* Remove preceeding spaces */
		while (raw_str[i++] == ' '){}
  90755e:	692c2b        	bnei	a2, 32, 90758d <zf_debug_task+0x1b9>
  907561:	63ffeb        	j	907550 <zf_debug_task+0x17c>

		/* Copy command string */
		j = 0;
		while(raw_str[i] && (raw_str[i] != ' '))
		{
			if (k == 0)
  907564:	cdea      	bnez.n	a14, 907582 <zf_debug_task+0x1ae>
			{
				if ((raw_str[i] <= 'z') && (raw_str[i] >= 'a'))
  907566:	22dc9f        	addi	a2, a13, -97
  907569:	020247        	extui	a2, a2, 0, 8
  90756c:	723305        	bltu	a3, a2, 907575 <zf_debug_task+0x1a1>
				{
					raw_str[i] -= 'a' - 'A';
  90756f:	2ddce0        	addi	a13, a13, -32
  907572:	2d9400        	s8i	a13, a9, 0
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  907575:	afb2      	add.n	a2, a11, a15
			{
				if ((raw_str[i] <= 'z') && (raw_str[i] >= 'a'))
				{
					raw_str[i] -= 'a' - 'A';
				}
				cmd_str[k*DB_MAX_COMMAND_LENGTH + j++] = raw_str[i++];
  907577:	269000        	l8ui	a6, a9, 0
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  90757a:	b022      	addi.n	a2, a2, -1
			{
				if ((raw_str[i] <= 'z') && (raw_str[i] >= 'a'))
				{
					raw_str[i] -= 'a' - 'A';
				}
				cmd_str[k*DB_MAX_COMMAND_LENGTH + j++] = raw_str[i++];
  90757c:	262400        	s8i	a6, a2, 0
  90757f:	600006        	j	907589 <zf_debug_task+0x1b5>
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  907582:	ab72      	add.n	a2, a7, a11
  907584:	b022      	addi.n	a2, a2, -1
				}
				cmd_str[k*DB_MAX_COMMAND_LENGTH + j++] = raw_str[i++];
			}
			else
			{
				cmd_str[k*DB_MAX_COMMAND_LENGTH + j++] = raw_str[i++];
  907586:	2d2400        	s8i	a13, a2, 0
  907589:	b199      	addi.n	a9, a9, 1
  90758b:	b1bb      	addi.n	a11, a11, 1
		while (raw_str[i++] == ' '){}
		i--;

		/* Copy command string */
		j = 0;
		while(raw_str[i] && (raw_str[i] != ' '))
  90758d:	2d9000        	l8ui	a13, a9, 0
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  907590:	059c0c        	sub	a12, a9, a5
		while (raw_str[i++] == ' '){}
		i--;

		/* Copy command string */
		j = 0;
		while(raw_str[i] && (raw_str[i] != ' '))
  907593:	04d201        	and	a2, a13, a4
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  907596:	b0b6      	addi.n	a6, a11, -1
		while (raw_str[i++] == ' '){}
		i--;

		/* Copy command string */
		j = 0;
		while(raw_str[i] && (raw_str[i] != ' '))
  907598:	652fc8        	bnez	a2, 907564 <zf_debug_task+0x190>
			else
			{
				cmd_str[k*DB_MAX_COMMAND_LENGTH + j++] = raw_str[i++];
			}
		}
		cmd_str[k*DB_MAX_COMMAND_LENGTH + j] = 0;
  90759b:	a8a7      	add.n	a7, a10, a8
  90759d:	067608        	add	a6, a7, a6
  9075a0:	226400        	s8i	a2, a6, 0
  9075a3:	288c28        	addi	a8, a8, 40
	int i = 0;
	int j;
	int k;


	for (k=0; k<4; k++)
  9075a6:	260aa0        	movi	a6, 160
  9075a9:	2eec01        	addi	a14, a14, 1
  9075ac:	7689a0        	bne	a8, a6, 907550 <zf_debug_task+0x17c>
				cmd_str[k*DB_MAX_COMMAND_LENGTH + j++] = raw_str[i++];
			}
		}
		cmd_str[k*DB_MAX_COMMAND_LENGTH + j] = 0;
	}
	return (int)A_STRLEN(cmd_str);
  9075af:	136915        	l32r	a3, 8e1a04 <athos_indirection_table_install+0x490>
  9075b2:	233266        	l32i	a3, a3, 0x198
  9075b5:	0b3000        	callx8	a3
	if (db_get_cmd_line(ch, raw_cmd, &gvLen) == 0)
	{
		return;
	}

	if (db_formalize_command(raw_cmd, cmd_str))
  9075b8:	64a054        	beqz	a10, 907610 <zf_debug_task+0x23c>
	{
		gvLen = 0;
  9075bb:	136992        	l32r	a3, 8e1c04 <athos_indirection_table_install+0x690>
  9075be:	223500        	s16i	a2, a3, 0
		i = 0;

		cmd_not_found = TRUE;
  9075c1:	1269cb        	l32r	a2, 8e1cf0 <athos_indirection_table_install+0x77c>
  9075c4:	c031      	movi.n	a3, 1
  9075c6:	9320      	s32i.n	a3, a2, 0
  9075c8:	126997        	l32r	a2, 8e1c24 <athos_indirection_table_install+0x6b0>
		while(command_table[i].cmd_func)
		{
			if (!strcmp(command_table[i].cmd_str, cmd_str))
  9075cb:	1369ca        	l32r	a3, 8e1cf4 <athos_indirection_table_install+0x780>
  9075ce:	600026        	j	9075f8 <zf_debug_task+0x224>
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  9075d1:	252cf8        	addi	a5, a2, -8
		i = 0;

		cmd_not_found = TRUE;
		while(command_table[i].cmd_func)
		{
			if (!strcmp(command_table[i].cmd_str, cmd_str))
  9075d4:	8a50      	l32i.n	a10, a5, 0
  9075d6:	033b02        	or	a11, a3, a3
  9075d9:	5b7be1        	call8	8e6560 <strcmp>
  9075dc:	bc22      	addi.n	a2, a2, 12
  9075de:	cda6      	bnez.n	a10, 9075f8 <zf_debug_task+0x224>
			{
				cmd_not_found = FALSE;
  9075e0:	1269cb        	l32r	a2, 8e1d0c <athos_indirection_table_install+0x798>
				command_table[i].cmd_func(cmd_str,
  9075e3:	1b69cc        	l32r	a11, 8e1d14 <athos_indirection_table_install+0x7a0>
  9075e6:	1c69cd        	l32r	a12, 8e1d1c <athos_indirection_table_install+0x7a8>
  9075e9:	1d69ce        	l32r	a13, 8e1d24 <athos_indirection_table_install+0x7b0>
		cmd_not_found = TRUE;
		while(command_table[i].cmd_func)
		{
			if (!strcmp(command_table[i].cmd_str, cmd_str))
			{
				cmd_not_found = FALSE;
  9075ec:	9a20      	s32i.n	a10, a2, 0
				command_table[i].cmd_func(cmd_str,
  9075ee:	033a02        	or	a10, a3, a3
  9075f1:	0b4000        	callx8	a4
  9075f4:	600005        	j	9075fd <zf_debug_task+0x229>
  9075f7:	008420        	excw
	{
		gvLen = 0;
		i = 0;

		cmd_not_found = TRUE;
		while(command_table[i].cmd_func)
  9075fa:	654fd3        	bnez	a4, 9075d1 <zf_debug_task+0x1fd>
							  cmd_str+DB_MAX_COMMAND_LENGTH*3);
				break;
			}
			i++;
		}
		if (cmd_not_found)
  9075fd:	1269cb        	l32r	a2, 8e1d2c <athos_indirection_table_install+0x7b8>
  907600:	8220      	l32i.n	a2, a2, 0
  907602:	c82a      	beqz.n	a2, 907610 <zf_debug_task+0x23c>
		{
			A_PRINTF("Error, HELP for command list.\n\r");
  907604:	126915        	l32r	a2, 8e1a58 <athos_indirection_table_install+0x4e4>
  907607:	1a69cf        	l32r	a10, 8e1d44 <athos_indirection_table_install+0x7d0>
  90760a:	222212        	l32i	a2, a2, 72
  90760d:	0b2000        	callx8	a2
		}

	}

	A_PRINTF(">");
  907610:	126915        	l32r	a2, 8e1a64 <athos_indirection_table_install+0x4f0>
  907613:	1a69d0        	l32r	a10, 8e1d54 <athos_indirection_table_install+0x7e0>
  907616:	222212        	l32i	a2, a2, 72
  907619:	0b2000        	callx8	a2
  90761c:	d10f      	retw.n
  90761e:	00001a        	sll	a0, a0
  907621:	69cac0        	bnei	a12, 12, 9075e5 <zf_debug_task+0x211>
		cmd_line[*i] = 0;
		A_PRINTF("\n\r");
		if (*i != 0)
		{
			//Filter duplicated string in command history
			if (strcmp(cmd_buffer[(cmd_buf_ptr==0)?(COMMAND_BUFFER_SIZE-1):(cmd_buf_ptr-1)], cmd_line) != 0)
  907624:	80dc      	l32i.n	a0, a13, 48
  907626:	80de      	l32i.n	a0, a13, 56
  907628:	8015      	l32i.n	a0, a1, 20
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  90762a:	69c624        	bnei	a12, 6, 907652 <db_ascii_to_int+0x1a>
		while (raw_str[i++] == ' '){}
		i--;

		/* Copy command string */
		j = 0;
		while(raw_str[i] && (raw_str[i] != ' '))
  90762d:	fa          	.byte 0xfa
  90762e:	dfc1      	excw
		{
			if (k == 0)
			{
				if ((raw_str[i] <= 'z') && (raw_str[i] >= 'a'))
  907630:	39dfa0        	excw
	cmd_buf_full = FALSE;
	gvLen = 0;
	pressed_time = 0;
}

static void zf_debug_task(void)
  907633:	63ff19        	j	907550 <zf_debug_task+0x17c>
  907636:	d10f      	retw.n

00907638 <db_ascii_to_int>:
	}
	return 0;
}

int db_ascii_to_int(char *num_str, unsigned long *int_num)
{
  907638:	6c1004        	entry	a1, 32
	int i = 0;

	*int_num = 0;
  90763b:	c080      	movi.n	a8, 0
  90763d:	9830      	s32i.n	a8, a3, 0
	while (num_str[i])
	{
		if ((num_str[i] >= '0') && (num_str[i] <= '9'))
  90763f:	c099      	movi.n	a9, 9
int db_ascii_to_int(char *num_str, unsigned long *int_num)
{
	int i = 0;

	*int_num = 0;
	while (num_str[i])
  907641:	60001e        	j	907663 <db_ascii_to_int+0x2b>
	{
		if ((num_str[i] >= '0') && (num_str[i] <= '9'))
  907644:	288cd0        	addi	a8, a8, -48
  907647:	080847        	extui	a8, a8, 0, 8
  90764a:	78931f        	bltu	a9, a8, 90766d <db_ascii_to_int+0x35>
		{
			*int_num *= 10;
  90764d:	8830      	l32i.n	a8, a3, 0
  90764f:	08880a        	addx4	a8, a8, a8
  907652:	0f8811        	slli	a8, a8, 1
  907655:	9830      	s32i.n	a8, a3, 0
			*int_num += (num_str[i] - '0');
  907657:	2a2000        	l8ui	a10, a2, 0
  90765a:	288cd0        	addi	a8, a8, -48
  90765d:	aa88      	add.n	a8, a8, a10
  90765f:	9830      	s32i.n	a8, a3, 0
  907661:	b122      	addi.n	a2, a2, 1
int db_ascii_to_int(char *num_str, unsigned long *int_num)
{
	int i = 0;

	*int_num = 0;
	while (num_str[i])
  907663:	282000        	l8ui	a8, a2, 0
  907666:	658fda        	bnez	a8, 907644 <db_ascii_to_int+0xc>
		{
			return -1;
		}
		i++;
	}
	return 0;
  907669:	d280      	mov.n	a2, a8
  90766b:	d10f      	retw.n
			*int_num *= 10;
			*int_num += (num_str[i] - '0');
		}
		else
		{
			return -1;
  90766d:	c72f      	movi.n	a2, -1
		}
		i++;
	}
	return 0;
}
  90766f:	d10f      	retw.n
  907671:	000000        	ill

00907674 <db_clock_cmd>:
	A_UART_HWINIT((clk*1000*1000)/ratio, baud);

}

static int db_clock_cmd(char *cmd, char *param1, char *param2, char *param3)
{
  907674:	6c1006        	entry	a1, 48
	uint32_t ratio = 1;
	uint32_t baud = 19200;
	uint32_t clk = 0;
  907677:	c020      	movi.n	a2, 0
    
	if( db_ascii_to_int(param1, &clk) != -1 )
  907679:	033a02        	or	a10, a3, a3
  90767c:	db10      	mov.n	a11, a1

static int db_clock_cmd(char *cmd, char *param1, char *param2, char *param3)
{
	uint32_t ratio = 1;
	uint32_t baud = 19200;
	uint32_t clk = 0;
  90767e:	221600        	s32i	a2, a1, 0
    
	if( db_ascii_to_int(param1, &clk) != -1 )
  907681:	5bffed        	call8	907638 <db_ascii_to_int>
  907684:	68a059        	beqi	a10, -1, 9076e1 <db_clock_cmd+0x6d>
	{
		A_PRINTF("changing clock to %d\n", clk);
  907687:	186915        	l32r	a8, 8e1adc <athos_indirection_table_install+0x568>
  90768a:	1a69d1        	l32r	a10, 8e1dd0 <athos_indirection_table_install+0x85c>
  90768d:	288212        	l32i	a8, a8, 72
  907690:	8b10      	l32i.n	a11, a1, 0
  907692:	0b8000        	callx8	a8
		clk_change(clk, ratio, baud);
  907695:	8810      	l32i.n	a8, a1, 0

static void clk_change(uint32_t clk, uint32_t ratio, uint32_t baud)
{
	uint32_t clk_sel = 0;

	switch(clk){
  907697:	c2ac      	movi.n	a10, 44
		break;
        case 88:
		clk_sel = 1;
		break;
        case 44:
		clk_sel = 2;
  907699:	c092      	movi.n	a9, 2

static void clk_change(uint32_t clk, uint32_t ratio, uint32_t baud)
{
	uint32_t clk_sel = 0;

	switch(clk){
  90769b:	7a8122        	beq	a8, a10, 9076c1 <db_clock_cmd+0x4d>
  90769e:	78a30e        	bltu	a10, a8, 9076b0 <db_clock_cmd+0x3c>
        case 22:
		clk_sel = 0;
  9076a1:	d920      	mov.n	a9, a2

static void clk_change(uint32_t clk, uint32_t ratio, uint32_t baud)
{
	uint32_t clk_sel = 0;

	switch(clk){
  9076a3:	c126      	movi.n	a2, 22
  9076a5:	728118        	beq	a8, a2, 9076c1 <db_clock_cmd+0x4d>
		break;
        case 117:
		clk_sel = 4;
		break;
        case 40:
		clk_sel = 6;            
  9076a8:	c096      	movi.n	a9, 6

static void clk_change(uint32_t clk, uint32_t ratio, uint32_t baud)
{
	uint32_t clk_sel = 0;

	switch(clk){
  9076aa:	c228      	movi.n	a2, 40
  9076ac:	60000c        	j	9076bc <db_clock_cmd+0x48>
  9076af:	00c528        	mull	a5, a12, a0
        case 22:
		clk_sel = 0;
		break;
        case 88:
		clk_sel = 1;
  9076b2:	c091      	movi.n	a9, 1

static void clk_change(uint32_t clk, uint32_t ratio, uint32_t baud)
{
	uint32_t clk_sel = 0;

	switch(clk){
  9076b4:	728109        	beq	a8, a2, 9076c1 <db_clock_cmd+0x4d>
		break;
        case 44:
		clk_sel = 2;
		break;
        case 117:
		clk_sel = 4;
  9076b7:	c094      	movi.n	a9, 4

static void clk_change(uint32_t clk, uint32_t ratio, uint32_t baud)
{
	uint32_t clk_sel = 0;

	switch(clk){
  9076b9:	220a75        	movi	a2, 117
  9076bc:	728101        	beq	a8, a2, 9076c1 <db_clock_cmd+0x4d>
		break;
        case 40:
		clk_sel = 6;            
		break;
        default:
		clk_sel = 6;
  9076bf:	c096      	movi.n	a9, 6
		break;
	}

	iowrite32(0x50040, (0x300|clk_sel|(ratio>>1)<<12));
  9076c1:	223a00        	movi	a2, 0x300
  9076c4:	029902        	or	a9, a9, a2
  9076c7:	1269d2        	l32r	a2, 8e1e10 <athos_indirection_table_install+0x89c>
	A_UART_HWINIT((clk*1000*1000)/ratio, baud);
  9076ca:	1a69d3        	l32r	a10, 8e1e18 <athos_indirection_table_install+0x8a4>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9076cd:	0c0200        	memw
  9076d0:	9920      	s32i.n	a9, a2, 0
  9076d2:	126915        	l32r	a2, 8e1b28 <athos_indirection_table_install+0x5b4>
  9076d5:	0a8a28        	mull	a10, a8, a10
  9076d8:	22221a        	l32i	a2, a2, 104
  9076db:	1b69d4        	l32r	a11, 8e1e2c <athos_indirection_table_install+0x8b8>
  9076de:	0b2000        	callx8	a2
	if( db_ascii_to_int(param1, &clk) != -1 )
	{
		A_PRINTF("changing clock to %d\n", clk);
		clk_change(clk, ratio, baud);
	}
}
  9076e1:	d10f      	retw.n
	...

009076e4 <dbg_timer_func>:
	db_incorect_format();
	return -1;
}

LOCAL void dbg_timer_func(A_HANDLE alarm, void *data)
{
  9076e4:	6c1004        	entry	a1, 32
	A_PRINTF("this is a timer alarm function 0x%08x\n\r", xthal_get_ccount());
  9076e7:	126915        	l32r	a2, 8e1b3c <athos_indirection_table_install+0x5c8>
  9076ea:	222212        	l32i	a2, a2, 72
  9076ed:	5b7c9a        	call8	8e6958 <xthal_get_ccount>
  9076f0:	dba0      	mov.n	a11, a10
  9076f2:	1a69d5        	l32r	a10, 8e1e48 <athos_indirection_table_install+0x8d4>
  9076f5:	0b2000        	callx8	a2
  9076f8:	d10f      	retw.n
	...

009076fc <cmnos_dbg_module_install>:

	db_incorect_format();
	return -1;
}
void cmnos_dbg_module_install(struct dbg_api *apis)
{
  9076fc:	6c1004        	entry	a1, 32
	apis->_dbg_init = zf_debug_init;
  9076ff:	1869d6        	l32r	a8, 8e1e58 <athos_indirection_table_install+0x8e4>
  907702:	9820      	s32i.n	a8, a2, 0
	apis->_dbg_task = zf_debug_task;
  907704:	1869d7        	l32r	a8, 8e1e60 <athos_indirection_table_install+0x8ec>
  907707:	9821      	s32i.n	a8, a2, 4
  907709:	d10f      	retw.n
	...

0090770c <_fw_usbfifo_recv_command>:

typedef void (* USBFIFO_recv_command)(VBUF *cmd);
USBFIFO_recv_command m_origUsbfifoRecvCmd = NULL;

void _fw_usbfifo_recv_command(VBUF *buf)
{
  90770c:	6c1004        	entry	a1, 32
	uint8_t *cmd_data;
	uint32_t tmp;

	cmd_data = (uint8_t *)(buf->desc_list->buf_addr +
  90770f:	8820      	l32i.n	a8, a2, 0

typedef void (* USBFIFO_recv_command)(VBUF *cmd);
USBFIFO_recv_command m_origUsbfifoRecvCmd = NULL;

void _fw_usbfifo_recv_command(VBUF *buf)
{
  907711:	da20      	mov.n	a10, a2
	uint8_t *cmd_data;
	uint32_t tmp;

	cmd_data = (uint8_t *)(buf->desc_list->buf_addr +
  907713:	298105        	l16ui	a9, a8, 10
				buf->desc_list->data_offset);
	tmp = *((uint32_t *)cmd_data);
  907716:	8881      	l32i.n	a8, a8, 4
  907718:	a988      	add.n	a8, a8, a9
	if (tmp == 0xFFFFFFFF)
  90771a:	8880      	l32i.n	a8, a8, 0
  90771c:	698004        	bnei	a8, -1, 907724 <_fw_usbfifo_recv_command+0x18>
		_fw_usb_suspend_reboot();
  90771f:	580cca        	call8	90aa48 <_fw_usb_suspend_reboot>
  907722:	d10f      	retw.n
	else
		m_origUsbfifoRecvCmd(buf);
  907724:	1869d8        	l32r	a8, 8e1e84 <athos_indirection_table_install+0x910>
  907727:	8880      	l32i.n	a8, a8, 0
  907729:	0b8000        	callx8	a8
  90772c:	d10f      	retw.n
	...

00907730 <_fw_usbfifo_init>:
}

void _fw_usbfifo_init(USB_FIFO_CONFIG *pConfig)
{
  907730:	6c1004        	entry	a1, 32
	m_origUsbfifoRecvCmd = pConfig->recv_command;
  907733:	8921      	l32i.n	a9, a2, 4
  907735:	1869d8        	l32r	a8, 8e1e98 <athos_indirection_table_install+0x924>
  907738:	9980      	s32i.n	a9, a8, 0

	usbFifoConf.get_command_buf = pConfig->get_command_buf;
  90773a:	1869d9        	l32r	a8, 8e1ea0 <athos_indirection_table_install+0x92c>
  90773d:	8920      	l32i.n	a9, a2, 0
  90773f:	9980      	s32i.n	a9, a8, 0
	usbFifoConf.recv_command    = _fw_usbfifo_recv_command;
  907741:	1969da        	l32r	a9, 8e1eac <athos_indirection_table_install+0x938>
  907744:	9981      	s32i.n	a9, a8, 4
	usbFifoConf.get_event_buf   = pConfig->get_event_buf;
  907746:	8922      	l32i.n	a9, a2, 8
	usbFifoConf.send_event_done = pConfig->send_event_done;
  907748:	8223      	l32i.n	a2, a2, 12
{
	m_origUsbfifoRecvCmd = pConfig->recv_command;

	usbFifoConf.get_command_buf = pConfig->get_command_buf;
	usbFifoConf.recv_command    = _fw_usbfifo_recv_command;
	usbFifoConf.get_event_buf   = pConfig->get_event_buf;
  90774a:	9982      	s32i.n	a9, a8, 8
	usbFifoConf.send_event_done = pConfig->send_event_done;
  90774c:	9283      	s32i.n	a2, a8, 12
  90774e:	d10f      	retw.n

00907750 <cold_reboot>:
}

void cold_reboot(void)
{
  907750:	6c1004        	entry	a1, 32
	A_PRINTF("Cold reboot initiated.");
  907753:	126915        	l32r	a2, 8e1ba8 <athos_indirection_table_install+0x634>
  907756:	1a69db        	l32r	a10, 8e1ec4 <athos_indirection_table_install+0x950>
  907759:	282212        	l32i	a8, a2, 72
  90775c:	0b8000        	callx8	a8
  90775f:	186919        	l32r	a8, 8e1bc4 <athos_indirection_table_install+0x650>
  907762:	c090      	movi.n	a9, 0
#if defined(PROJECT_MAGPIE)
	iowrite32(WATCH_DOG_MAGIC_PATTERN_ADDR, 0);
#elif defined(PROJECT_K2)
	iowrite32(MAGPIE_REG_RST_STATUS_ADDR, 0);
#endif /* #if defined(PROJECT_MAGPIE) */
	A_USB_JUMP_BOOT();
  907764:	22222c        	l32i	a2, a2, 176
  907767:	0c0200        	memw
  90776a:	298600        	s32i	a9, a8, 0
  90776d:	0b2000        	callx8	a2
  907770:	d10f      	retw.n
	...

00907774 <usb_status_in_patch>:

/*
 * support more than 64 bytes command on ep3
 */
void usb_status_in_patch(void)
{
  907774:	6c1004        	entry	a1, 32
	static VBUF *evntbuf = NULL;
	static volatile uint32_t *regaddr;
	static BOOLEAN cmd_is_new = TRUE;
	BOOLEAN cmd_end = FALSE;

	if (cmd_is_new) {
  907777:	1269dc        	l32r	a2, 8e1ee8 <athos_indirection_table_install+0x974>
  90777a:	282100        	l16ui	a8, a2, 0
  90777d:	648048        	beqz	a8, 9077c9 <usb_status_in_patch+0x55>
		evntbuf = usbFifoConf.get_event_buf();
  907780:	1869d9        	l32r	a8, 8e1ee4 <athos_indirection_table_install+0x970>
  907783:	8a82      	l32i.n	a10, a8, 8
  907785:	0ba000        	callx8	a10
  907788:	1869dd        	l32r	a8, 8e1efc <athos_indirection_table_install+0x988>
  90778b:	9a80      	s32i.n	a10, a8, 0
		if (evntbuf != NULL) {
  90778d:	c9af      	beqz.n	a10, 9077b0 <usb_status_in_patch+0x3c>
			regaddr = (uint32_t *)VBUF_GET_DATA_ADDR(evntbuf);
  90778f:	88a0      	l32i.n	a8, a10, 0
  907791:	298105        	l16ui	a9, a8, 10
  907794:	8881      	l32i.n	a8, a8, 4
  907796:	a989      	add.n	a9, a8, a9
  907798:	1869de        	l32r	a8, 8e1f10 <athos_indirection_table_install+0x99c>
  90779b:	9980      	s32i.n	a9, a8, 0
			buf_len = evntbuf->buf_length;
  90779d:	1869df        	l32r	a8, 8e1f1c <athos_indirection_table_install+0x9a8>
  9077a0:	29a104        	l16ui	a9, a10, 8
  9077a3:	298500        	s16i	a9, a8, 0
		} else {
			mUSB_STATUS_IN_INT_DISABLE();
			return;
		}

		cmd_is_new = FALSE;
  9077a6:	c080      	movi.n	a8, 0
  9077a8:	282500        	s16i	a8, a2, 0
  9077ab:	60001a        	j	9077c9 <usb_status_in_patch+0x55>
  9077ae:	000012        	srai	a0, a0, 0

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  9077b1:	695c29        	bnei	a5, 32, 9077de <usb_status_in_patch+0x6a>
		evntbuf = usbFifoConf.get_event_buf();
		if (evntbuf != NULL) {
			regaddr = (uint32_t *)VBUF_GET_DATA_ADDR(evntbuf);
			buf_len = evntbuf->buf_length;
		} else {
			mUSB_STATUS_IN_INT_DISABLE();
  9077b4:	0ac028        	mull	a0, a12, a10
  9077b7:	200008        	l8ui	a0, a0, 8
  9077ba:	084709        	addx2	a7, a4, a8
  9077bd:	8802      	l32i.n	a8, a0, 8
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  9077bf:	0c0200        	memw
  9077c2:	282400        	s8i	a8, a2, 0
  9077c5:	d10f      	retw.n
  9077c7:	00001a        	sll	a0, a0
		}

		cmd_is_new = FALSE;
	}

	if (buf_len > USB_EP3_MAX_PKT_SIZE) {
  9077ca:	69dfc4        	bnei	a13, 0x100, 907792 <usb_status_in_patch+0x1e>
  9077cd:	9028      	s32i.n	a0, a2, 32
  9077cf:	a100      	add.n	a0, a0, a1
	}
	/* TODO: 64 bytes...
	 * controller supposed will take care of zero-length? */
	else {
		reg_buf_len = buf_len;
		cmd_end = TRUE;
  9077d1:	c021      	movi.n	a2, 1
		}

		cmd_is_new = FALSE;
	}

	if (buf_len > USB_EP3_MAX_PKT_SIZE) {
  9077d3:	789b09        	bgeu	a9, a8, 9077e0 <usb_status_in_patch+0x6c>
		reg_buf_len = USB_EP3_MAX_PKT_SIZE;
		buf_len -= USB_EP3_MAX_PKT_SIZE;
  9077d6:	288cc0        	addi	a8, a8, -64
  9077d9:	28a500        	s16i	a8, a10, 0
	uint16_t reg_buf_len;
	static uint16_t buf_len;
	static VBUF *evntbuf = NULL;
	static volatile uint32_t *regaddr;
	static BOOLEAN cmd_is_new = TRUE;
	BOOLEAN cmd_end = FALSE;
  9077dc:	c020      	movi.n	a2, 0

		cmd_is_new = FALSE;
	}

	if (buf_len > USB_EP3_MAX_PKT_SIZE) {
		reg_buf_len = USB_EP3_MAX_PKT_SIZE;
  9077de:	d890      	mov.n	a8, a9
  9077e0:	1969de        	l32r	a9, 8e1f58 <athos_indirection_table_install+0x9e4>
		reg_buf_len = buf_len;
		cmd_end = TRUE;
	}

	/* INT use EP3 */
	for (count = 0; count < (reg_buf_len / 4); count++)
  9077e3:	082c14        	srli	a12, a8, 2
  9077e6:	8b90      	l32i.n	a11, a9, 0
  9077e8:	1e695d        	l32r	a14, 8e1d5c <athos_indirection_table_install+0x7e8>
  9077eb:	dab0      	mov.n	a10, a11
  9077ed:	c090      	movi.n	a9, 0
  9077ef:	600010        	j	907803 <usb_status_in_patch+0x8f>
  9077f2:	00000c        	sub	a0, a0, a0
	{
		iowrite32_usb(ZM_EP3_DATA_OFFSET, *regaddr);
  9077f5:	02008d        	excw
  9077f8:	d0b1      	excw
		reg_buf_len = buf_len;
		cmd_end = TRUE;
	}

	/* INT use EP3 */
	for (count = 0; count < (reg_buf_len / 4); count++)
  9077fa:	990c      	s32i.n	a9, a0, 48
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9077fc:	02009d        	excw
  9077ff:	e0          	.byte 0xe0
  907800:	09094f        	extui	a9, a9, 0, 16
  907803:	dda0      	mov.n	a13, a10
  907805:	b4aa      	addi.n	a10, a10, 4
  907807:	7c99e9        	bne	a9, a12, 9077f4 <usb_status_in_patch+0x80>
  90780a:	1a69de        	l32r	a10, 8e1f84 <athos_indirection_table_install+0xa10>
  90780d:	0b990a        	addx4	a9, a9, a11
  907810:	99a0      	s32i.n	a9, a10, 0
	{
		iowrite32_usb(ZM_EP3_DATA_OFFSET, *regaddr);
		regaddr++;
	}

	remainder = reg_buf_len % 4;
  907812:	080841        	extui	a8, a8, 0, 2

	if (remainder) {
  907815:	cb84      	beqz.n	a8, 90784d <usb_status_in_patch+0xd9>
  907817:	19693c        	l32r	a9, 8e1d08 <athos_indirection_table_install+0x794>
		switch(remainder) {
  90781a:	688207        	beqi	a8, 2, 907825 <usb_status_in_patch+0xb1>
  90781d:	698309        	bnei	a8, 3, 90782a <usb_status_in_patch+0xb6>
  907820:	c087      	movi.n	a8, 7
  907822:	600006        	j	90782c <usb_status_in_patch+0xb8>
  907825:	c083      	movi.n	a8, 3
  907827:	600001        	j	90782c <usb_status_in_patch+0xb8>
  90782a:	c081      	movi.n	a8, 1
  90782c:	0c0200        	memw
  90782f:	9890      	s32i.n	a8, a9, 0
		case 1:
			iowrite32_usb(ZM_CBUS_FIFO_SIZE_OFFSET, 0x1);
			break;
		}

		iowrite32_usb(ZM_EP3_DATA_OFFSET, *regaddr);
  907831:	1869de        	l32r	a8, 8e1fac <athos_indirection_table_install+0xa38>
  907834:	8880      	l32i.n	a8, a8, 0
  907836:	0c0200        	memw
  907839:	8980      	l32i.n	a9, a8, 0
  90783b:	18695d        	l32r	a8, 8e1db0 <athos_indirection_table_install+0x83c>
  90783e:	0c0200        	memw
  907841:	9980      	s32i.n	a9, a8, 0
  907843:	18693c        	l32r	a8, 8e1d34 <athos_indirection_table_install+0x7c0>
  907846:	c09f      	movi.n	a9, 15
  907848:	0c0200        	memw
  90784b:	9980      	s32i.n	a9, a8, 0

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  90784d:	18695f        	l32r	a8, 8e1dcc <athos_indirection_table_install+0x858>

		/* Restore CBus FIFO size to word size */
		iowrite32_usb(ZM_CBUS_FIFO_SIZE_OFFSET, 0xF);
	}

	mUSB_EP3_XFER_DONE();
  907850:	c0a8      	movi.n	a10, 8
  907852:	298000        	l8ui	a9, a8, 0
  907855:	090947        	extui	a9, a9, 0, 8
  907858:	0a9902        	or	a9, a9, a10
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  90785b:	0c0200        	memw
  90785e:	298400        	s8i	a9, a8, 0

	if (evntbuf != NULL && cmd_end) {
  907861:	1869dd        	l32r	a8, 8e1fd8 <athos_indirection_table_install+0xa64>
  907864:	8a80      	l32i.n	a10, a8, 0
  907866:	c9a2      	beqz.n	a10, 90787c <usb_status_in_patch+0x108>
  907868:	642010        	beqz	a2, 90787c <usb_status_in_patch+0x108>
		usbFifoConf.send_event_done(evntbuf);
  90786b:	1269d9        	l32r	a2, 8e1fd0 <athos_indirection_table_install+0xa5c>
  90786e:	222203        	l32i	a2, a2, 12
  907871:	0b2000        	callx8	a2
		cmd_is_new = TRUE;
  907874:	1269dc        	l32r	a2, 8e1fe4 <athos_indirection_table_install+0xa70>
  907877:	c081      	movi.n	a8, 1
  907879:	282500        	s16i	a8, a2, 0
  90787c:	d10f      	retw.n
	...

00907880 <usb_reg_out_patch>:

/*
 * support more than 64 bytes command on ep4 
 */
void usb_reg_out_patch(void)
{
  907880:	6c1004        	entry	a1, 32

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  907883:	1269e0        	l32r	a2, 8e2004 <athos_indirection_table_install+0xa90>
	static BOOLEAN cmd_is_new = TRUE;

	/* get the size of this transcation */
	usbfifolen = ioread8_usb(ZM_EP4_BYTE_COUNT_LOW_OFFSET);

	if (usbfifolen > USB_EP4_MAX_PKT_SIZE) {
  907886:	230a40        	movi	a3, 64
  907889:	222000        	l8ui	a2, a2, 0
  90788c:	020247        	extui	a2, a2, 0, 8
  90788f:	723b11        	bgeu	a3, a2, 9078a4 <usb_reg_out_patch+0x24>
		A_PRINTF("EP4 FIFO Bug? Buffer is too big: %x\n", usbfifolen);
  907892:	136915        	l32r	a3, 8e1ce8 <athos_indirection_table_install+0x774>
  907895:	1a69e1        	l32r	a10, 8e201c <athos_indirection_table_install+0xaa8>
  907898:	233212        	l32i	a3, a3, 72
  90789b:	022b02        	or	a11, a2, a2
  90789e:	0b3000        	callx8	a3
		cold_reboot();
  9078a1:	5bffab        	call8	907750 <cold_reboot>
	}

	/* check is command is new */
	if(cmd_is_new) {
  9078a4:	1369e2        	l32r	a3, 8e202c <athos_indirection_table_install+0xab8>
  9078a7:	243100        	l16ui	a4, a3, 0
  9078aa:	cb4a      	beqz.n	a4, 9078e8 <usb_reg_out_patch+0x68>

		buf = usbFifoConf.get_command_buf();
  9078ac:	1469d9        	l32r	a4, 8e2010 <athos_indirection_table_install+0xa9c>
  9078af:	8a40      	l32i.n	a10, a4, 0
  9078b1:	0ba000        	callx8	a10
  9078b4:	1469e3        	l32r	a4, 8e2040 <athos_indirection_table_install+0xacc>
		cmd_len = 0;
  9078b7:	c080      	movi.n	a8, 0
	}

	/* check is command is new */
	if(cmd_is_new) {

		buf = usbFifoConf.get_command_buf();
  9078b9:	9a40      	s32i.n	a10, a4, 0
		cmd_len = 0;
  9078bb:	1469e4        	l32r	a4, 8e204c <athos_indirection_table_install+0xad8>
  9078be:	284500        	s16i	a8, a4, 0

		if(!buf) {
  9078c1:	cda5      	bnez.n	a10, 9078da <usb_reg_out_patch+0x5a>
			A_PRINTF("%s: Filed to get new buffer.\n", __func__);
  9078c3:	136915        	l32r	a3, 8e1d18 <athos_indirection_table_install+0x7a4>
  9078c6:	1a69e5        	l32r	a10, 8e205c <athos_indirection_table_install+0xae8>
  9078c9:	233212        	l32i	a3, a3, 72
  9078cc:	1b69e6        	l32r	a11, 8e2064 <athos_indirection_table_install+0xaf0>
  9078cf:	0b3000        	callx8	a3
		usbfifolen = (usbfifolen >> 2) + 1;
	else
		usbfifolen = usbfifolen >> 2;

	/* retrieve the data from fifo */
	for(ii = 0; ii < usbfifolen; ii++) {
  9078d2:	c080      	movi.n	a8, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  9078d4:	1369e9        	l32r	a3, 8e2078 <athos_indirection_table_install+0xb04>
  9078d7:	6000a7        	j	907982 <usb_reg_out_patch+0x102>
			A_PRINTF("%s: Filed to get new buffer.\n", __func__);
			goto err;
		}

		/* copy free, assignment buffer of the address */
		regaddr = (uint32_t *)buf->desc_list->buf_addr;
  9078da:	84a0      	l32i.n	a4, a10, 0

		cmd_is_new = FALSE;
  9078dc:	283500        	s16i	a8, a3, 0
			A_PRINTF("%s: Filed to get new buffer.\n", __func__);
			goto err;
		}

		/* copy free, assignment buffer of the address */
		regaddr = (uint32_t *)buf->desc_list->buf_addr;
  9078df:	294201        	l32i	a9, a4, 4
  9078e2:	1469e7        	l32r	a4, 8e2080 <athos_indirection_table_install+0xb0c>
  9078e5:	294600        	s32i	a9, a4, 0

		cmd_is_new = FALSE;
	}

	/* just in case, suppose should not happen */
	if(!buf)
  9078e8:	1369e3        	l32r	a3, 8e2074 <athos_indirection_table_install+0xb00>
  9078eb:	8a30      	l32i.n	a10, a3, 0
  9078ed:	64afe1        	beqz	a10, 9078d2 <usb_reg_out_patch+0x52>
	 */
	if(usbfifolen < USB_EP4_MAX_PKT_SIZE)
		cmd_is_last = TRUE;

	/* accumulate the size */
	cmd_len += usbfifolen;
  9078f0:	1369e4        	l32r	a3, 8e2080 <athos_indirection_table_install+0xb0c>

	if (cmd_len > buf->desc_list->buf_size) {
  9078f3:	88a0      	l32i.n	a8, a10, 0
	 */
	if(usbfifolen < USB_EP4_MAX_PKT_SIZE)
		cmd_is_last = TRUE;

	/* accumulate the size */
	cmd_len += usbfifolen;
  9078f5:	293100        	l16ui	a9, a3, 0
  9078f8:	a929      	add.n	a9, a2, a9
  9078fa:	09094f        	extui	a9, a9, 0, 16
  9078fd:	293500        	s16i	a9, a3, 0

	if (cmd_len > buf->desc_list->buf_size) {
  907900:	238104        	l16ui	a3, a8, 8
  907903:	793b0b        	bgeu	a3, a9, 907912 <usb_reg_out_patch+0x92>
		A_PRINTF("%s: Data length on EP4 FIFO is bigger as "
  907906:	136915        	l32r	a3, 8e1d5c <athos_indirection_table_install+0x7e8>
  907909:	1a69e8        	l32r	a10, 8e20ac <athos_indirection_table_install+0xb38>
  90790c:	233212        	l32i	a3, a3, 72
  90790f:	63ffb9        	j	9078cc <usb_reg_out_patch+0x4c>
		goto err;
	}

	/* round it to alignment */
	if(usbfifolen % 4)
		usbfifolen = (usbfifolen >> 2) + 1;
  907912:	c031      	movi.n	a3, 1
			 "allocated buffer data! Drop it!\n", __func__);
		goto err;
	}

	/* round it to alignment */
	if(usbfifolen % 4)
  907914:	020441        	extui	a4, a2, 0, 2
		usbfifolen = (usbfifolen >> 2) + 1;
  907917:	c0b0      	movi.n	a11, 0
  907919:	043b39        	movnez	a11, a3, a4
  90791c:	1369e7        	l32r	a3, 8e20b8 <athos_indirection_table_install+0xb44>
	else
		usbfifolen = usbfifolen >> 2;
  90791f:	022c14        	srli	a12, a2, 2
  907922:	8330      	l32i.n	a3, a3, 0
		goto err;
	}

	/* round it to alignment */
	if(usbfifolen % 4)
		usbfifolen = (usbfifolen >> 2) + 1;
  907924:	abcc      	add.n	a12, a12, a11
  907926:	dd30      	mov.n	a13, a3
	else
		usbfifolen = usbfifolen >> 2;

	/* retrieve the data from fifo */
	for(ii = 0; ii < usbfifolen; ii++) {
  907928:	c0b0      	movi.n	a11, 0
  90792a:	1f69e9        	l32r	a15, 8e20d0 <athos_indirection_table_install+0xb5c>
  90792d:	60000f        	j	907940 <usb_reg_out_patch+0xc0>
  907930:	000c02        	or	a12, a0, a0
  907933:	0084f0        	excw
  907936:	b1bb      	addi.n	a11, a11, 1
		/* read fifo data out */
		ep4_data = ioread32_usb(ZM_EP4_DATA_OFFSET);
		*regaddr = ep4_data;
  907938:	0c0200        	memw
  90793b:	94e0      	s32i.n	a4, a14, 0
		usbfifolen = (usbfifolen >> 2) + 1;
	else
		usbfifolen = usbfifolen >> 2;

	/* retrieve the data from fifo */
	for(ii = 0; ii < usbfifolen; ii++) {
  90793d:	0b0b4f        	extui	a11, a11, 0, 16
  907940:	ded0      	mov.n	a14, a13
  907942:	b4dd      	addi.n	a13, a13, 4
  907944:	7cb9e9        	bne	a11, a12, 907931 <usb_reg_out_patch+0xb1>
  907947:	1c69e7        	l32r	a12, 8e20e4 <athos_indirection_table_install+0xb70>
  90794a:	03bb0a        	addx4	a11, a11, a3
  90794d:	9bc0      	s32i.n	a11, a12, 0
		*regaddr = ep4_data;
		regaddr++;
	}

	/* if this is the last command, callback to HTC */
	if (cmd_is_last) {
  90794f:	c33f      	movi.n	a3, 63
  907951:	723330        	bltu	a3, a2, 907985 <usb_reg_out_patch+0x105>
		buf->desc_list->next_desc = NULL;
  907954:	c020      	movi.n	a2, 0
  907956:	9280      	s32i.n	a2, a8, 0
		buf->desc_list->data_offset = 0;
  907958:	228505        	s16i	a2, a8, 10
		buf->desc_list->data_size = cmd_len;
		buf->desc_list->control = 0;
  90795b:	228507        	s16i	a2, a8, 14

	/* if this is the last command, callback to HTC */
	if (cmd_is_last) {
		buf->desc_list->next_desc = NULL;
		buf->desc_list->data_offset = 0;
		buf->desc_list->data_size = cmd_len;
  90795e:	298506        	s16i	a9, a8, 12
		buf->desc_list->control = 0;
		buf->next_buf = NULL;
  907961:	92a1      	s32i.n	a2, a10, 4
		buf->buf_length = cmd_len;

		usbFifoConf.recv_command(buf);
  907963:	1269d9        	l32r	a2, 8e20c8 <athos_indirection_table_install+0xb54>
		buf->desc_list->next_desc = NULL;
		buf->desc_list->data_offset = 0;
		buf->desc_list->data_size = cmd_len;
		buf->desc_list->control = 0;
		buf->next_buf = NULL;
		buf->buf_length = cmd_len;
  907966:	29a504        	s16i	a9, a10, 8

		usbFifoConf.recv_command(buf);
  907969:	8221      	l32i.n	a2, a2, 4

		cmd_is_new = TRUE;
  90796b:	c031      	movi.n	a3, 1
		buf->desc_list->data_size = cmd_len;
		buf->desc_list->control = 0;
		buf->next_buf = NULL;
		buf->buf_length = cmd_len;

		usbFifoConf.recv_command(buf);
  90796d:	0b2000        	callx8	a2

		cmd_is_new = TRUE;
  907970:	1269e2        	l32r	a2, 8e20f8 <athos_indirection_table_install+0xb84>
  907973:	232500        	s16i	a3, a2, 0
  907976:	d10f      	retw.n
	goto done;
err:
	/* we might get no command buffer here?
	 * but if we return here, the ep4 fifo will be lock out,
	 * so that we still read them out but just drop it? */
	for(ii = 0; ii < usbfifolen; ii++)
  907978:	b188      	addi.n	a8, a8, 1
  90797a:	0c0200        	memw
  90797d:	8430      	l32i.n	a4, a3, 0
  90797f:	08084f        	extui	a8, a8, 0, 16
  907982:	7283f2        	bltu	a8, a2, 907978 <usb_reg_out_patch+0xf8>
  907985:	d10f      	retw.n
	...

00907988 <vUSBFIFO_EP6Cfg_FS_patch>:
#define FS_C1_I0_A0_EP6_MAP		\
	 (FS_C1_I0_A0_EP6_FIFO_START | (FS_C1_I0_A0_EP6_FIFO_START << 4) | \
	  (MASK_F0 >> (4*FS_C1_I0_A0_EP6_DIRECTION)))

void vUSBFIFO_EP6Cfg_FS_patch(void)
{
  907988:	6c1004        	entry	a1, 32
#if (FS_C1_I0_A0_EP_NUMBER >= 6)
	int i;

	/* EP0X06 */
	mUsbEPMap(EP6, FS_C1_I0_A0_EP6_MAP);
  90798b:	2b0a6f        	movi	a11, 111
  90798e:	2a0a06        	movi	a10, 6
  907991:	5b73d9        	call8	8e48f8 <mUsbEPMap>
	mUsbFIFOMap(FS_C1_I0_A0_EP6_FIFO_START, FS_C1_I0_A0_EP6_FIFO_MAP);
  907994:	2a0a06        	movi	a10, 6
  907997:	0aab02        	or	a11, a10, a10
  90799a:	5b73de        	call8	8e4914 <mUsbFIFOMap>
	mUsbFIFOConfig(FS_C1_I0_A0_EP6_FIFO_START, FS_C1_I0_A0_EP6_FIFO_CONFIG);
  90799d:	2b0a86        	movi	a11, 134
  9079a0:	c0a6      	movi.n	a10, 6
  9079a2:	5b73e4        	call8	8e4934 <mUsbFIFOConfig>

	for(i = FS_C1_I0_A0_EP6_FIFO_START + 1 ;
            i < FS_C1_I0_A0_EP6_FIFO_START + FS_C1_I0_A0_EP6_FIFO_NO ; i ++)
	{
		mUsbFIFOConfig(i, (FS_C1_I0_A0_EP6_FIFO_CONFIG & (~BIT7)) );
  9079a5:	c0b6      	movi.n	a11, 6
  9079a7:	c0a7      	movi.n	a10, 7
  9079a9:	5b73e2        	call8	8e4934 <mUsbFIFOConfig>
	}

	mUsbEPMxPtSzHigh(EP6, FS_C1_I0_A0_EP6_DIRECTION,
  9079ac:	c0b1      	movi.n	a11, 1
  9079ae:	c4c0      	movi.n	a12, 64
  9079b0:	c0a6      	movi.n	a10, 6
  9079b2:	5b73e8        	call8	8e4954 <mUsbEPMxPtSzHigh>
			 (FS_C1_I0_A0_EP6_MAX_PACKET & 0x7ff));
	mUsbEPMxPtSzLow(EP6, FS_C1_I0_A0_EP6_DIRECTION,
  9079b5:	c0b1      	movi.n	a11, 1
  9079b7:	c4c0      	movi.n	a12, 64
  9079b9:	c0a6      	movi.n	a10, 6
  9079bb:	5b73f0        	call8	8e497c <mUsbEPMxPtSzLow>
			(FS_C1_I0_A0_EP6_MAX_PACKET & 0x7ff));
	mUsbEPinHighBandSet(EP6, FS_C1_I0_A0_EP6_DIRECTION,
  9079be:	c0b1      	movi.n	a11, 1
  9079c0:	c4c0      	movi.n	a12, 64
  9079c2:	2a0a06        	movi	a10, 6
  9079c5:	5b73f6        	call8	8e49a0 <mUsbEPinHighBandSet>
  9079c8:	d10f      	retw.n
	...

009079cc <vUsbFIFO_EPxCfg_FS_patch>:
			    FS_C1_I0_A0_EP6_MAX_PACKET);
#endif
}

void vUsbFIFO_EPxCfg_FS_patch(void)
{
  9079cc:	6c1004        	entry	a1, 32
	switch (u8UsbConfigValue)
  9079cf:	1869ea        	l32r	a8, 8e2178 <athos_indirection_table_install+0xc04>
  9079d2:	288100        	l16ui	a8, a8, 0
  9079d5:	698113        	bnei	a8, 1, 9079ec <vUsbFIFO_EPxCfg_FS_patch+0x20>
	{
#if (FS_CONFIGURATION_NUMBER >= 1)
		/* Configuration 0X01 */
        case 0X01:
		switch (u8UsbInterfaceValue)
  9079d8:	1869eb        	l32r	a8, 8e2184 <athos_indirection_table_install+0xc10>
  9079db:	288100        	l16ui	a8, a8, 0
  9079de:	cc8a      	bnez.n	a8, 9079ec <vUsbFIFO_EPxCfg_FS_patch+0x20>
		{
#if (FS_C1_INTERFACE_NUMBER >= 1)
			/* Interface 0 */
                case 0:
			switch (u8UsbInterfaceAlternateSetting)
  9079e0:	1869ec        	l32r	a8, 8e2190 <athos_indirection_table_install+0xc1c>
  9079e3:	288100        	l16ui	a8, a8, 0
  9079e6:	658002        	bnez	a8, 9079ec <vUsbFIFO_EPxCfg_FS_patch+0x20>
                        case 0:

				/* snapped.... */

				/* patch up this ep6_fs config */
				vUSBFIFO_EP6Cfg_FS_patch();
  9079e9:	5bffe7        	call8	907988 <vUSBFIFO_EP6Cfg_FS_patch>
  9079ec:	d10f      	retw.n
	...

009079f0 <bSet_configuration_patch>:
	}
	/* mCHECK_STACK(); */
}

BOOLEAN bSet_configuration_patch(void)
{
  9079f0:	6c1004        	entry	a1, 32
	/* do some defaul configuration */
	bSet_configuration();
  9079f3:	5b7058        	call8	8e3b54 <bSet_configuration>

	/* overwrite defaul FIFO configuration for FullSpeed USB */
	if ((mLOW_BYTE(mDEV_REQ_VALUE()) != 0) && !mUsbHighSpeedST())
  9079f6:	1269ed        	l32r	a2, 8e21ac <athos_indirection_table_install+0xc38>
  9079f9:	222007        	l8ui	a2, a2, 7
  9079fc:	c82a      	beqz.n	a2, 907a0a <bSet_configuration_patch+0x1a>

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  9079fe:	126937        	l32r	a2, 8e1edc <athos_indirection_table_install+0x968>
  907a01:	222000        	l8ui	a2, a2, 0
  907a04:	792f02        	bbsi	a2, 25, 907a0a <bSet_configuration_patch+0x1a>
			vUsbFIFO_EPxCfg_FS_patch();
  907a07:	5bfff1        	call8	9079cc <vUsbFIFO_EPxCfg_FS_patch>

	eUsbCxFinishAction = ACT_DONE;
  907a0a:	1869ee        	l32r	a8, 8e21c4 <athos_indirection_table_install+0xc50>
  907a0d:	c021      	movi.n	a2, 1
  907a0f:	9280      	s32i.n	a2, a8, 0
	return TRUE;
}
  907a11:	d10f      	retw.n
	...

00907a14 <bStandardCommand_patch>:

extern BOOLEAN bStandardCommand(void);

BOOLEAN bStandardCommand_patch(void)
{
  907a14:	6c1004        	entry	a1, 32
	if (mDEV_REQ_REQ() == USB_SET_CONFIGURATION) {
  907a17:	1869ed        	l32r	a8, 8e21cc <athos_indirection_table_install+0xc58>
  907a1a:	298102        	l16ui	a9, a8, 4
  907a1d:	280a09        	movi	a8, 9
  907a20:	78992d        	bne	a9, a8, 907a51 <bStandardCommand_patch+0x3d>
		A_USB_SET_CONFIG();
  907a23:	186915        	l32r	a8, 8e1e78 <athos_indirection_table_install+0x904>
  907a26:	2a8226        	l32i	a10, a8, 152
  907a29:	0ba000        	callx8	a10

#if ENABLE_SWAP_DATA_MODE
		/* SWAP FUNCTION should be enabled while DMA engine
		 * is not working, the best place to enable it
		 * is before we trigger the DMA */
		MAGPIE_REG_USB_RX0_SWAP_DATA = 0x1;
  907a2c:	186955        	l32r	a8, 8e1f80 <athos_indirection_table_install+0xa0c>
  907a2f:	c0a1      	movi.n	a10, 1
  907a31:	0c0200        	memw
  907a34:	9a80      	s32i.n	a10, a8, 0
		MAGPIE_REG_USB_TX0_SWAP_DATA = 0x1;
  907a36:	186956        	l32r	a8, 8e1f90 <athos_indirection_table_install+0xa1c>
  907a39:	0c0200        	memw
  907a3c:	9a80      	s32i.n	a10, a8, 0

#if SYSTEM_MODULE_HP_EP5
		MAGPIE_REG_USB_RX1_SWAP_DATA = 0x1;
  907a3e:	186957        	l32r	a8, 8e1f9c <athos_indirection_table_install+0xa28>
  907a41:	0c0200        	memw
  907a44:	9a80      	s32i.n	a10, a8, 0
#endif

#if SYSTEM_MODULE_HP_EP6
		MAGPIE_REG_USB_RX2_SWAP_DATA = 0x1;
  907a46:	186958        	l32r	a8, 8e1fa8 <athos_indirection_table_install+0xa34>
  907a49:	0c0200        	memw
  907a4c:	9a80      	s32i.n	a10, a8, 0
#endif

#endif /* ENABLE_SWAP_DATA_MODE */
		return TRUE;
  907a4e:	600002        	j	907a54 <bStandardCommand_patch+0x40>
	} else
		return bStandardCommand();
  907a51:	5b7104        	call8	8e3e64 <bStandardCommand>
}
  907a54:	d2a0      	mov.n	a2, a10
  907a56:	d10f      	retw.n

00907a58 <bGet_descriptor_patch>:
#define EP3_INT_INTERVAL		19
#define EP4_TRANSFER_TYPE_OFFSET	21
#define EP4_INT_INTERVAL		22

BOOLEAN bGet_descriptor_patch(void)
{
  907a58:	6c1004        	entry	a1, 32
	if (mDEV_REQ_VALUE_HIGH() == 1)
  907a5b:	1369ed        	l32r	a3, 8e2210 <athos_indirection_table_install+0xc9c>
  907a5e:	223103        	l16ui	a2, a3, 6
  907a61:	028214        	srli	a2, a2, 8
  907a64:	692120        	bnei	a2, 1, 907a88 <bGet_descriptor_patch+0x30>
	{
		uint8_t *p = (uint8_t *)u8UsbDeviceDescriptor;

		/* Copy Usb Device Descriptor */
		ath_hal_memcpy(UsbDeviceDescriptorPatch, p,
  907a67:	1469f0        	l32r	a4, 8e2228 <athos_indirection_table_install+0xcb4>
  907a6a:	1269ef        	l32r	a2, 8e2228 <athos_indirection_table_install+0xcb4>
  907a6d:	8b40      	l32i.n	a11, a4, 0
  907a6f:	da20      	mov.n	a10, a2
  907a71:	c1c2      	movi.n	a12, 18
  907a73:	580034        	call8	907b44 <ath_hal_memcpy>
				sizeof(UsbDeviceDescriptorPatch));

		/* Change bcdDevice. we need it to detect if FW
		 * was uploaded. */
		UsbDeviceDescriptorPatch[BCD_DEVICE_OFFSET] =
  907a76:	c78f      	movi.n	a8, -1
  907a78:	282506        	s16i	a8, a2, 12
			BCD_DEVICE_FW_SIGNATURE;

		pu8DescriptorEX = UsbDeviceDescriptorPatch;
  907a7b:	1869f1        	l32r	a8, 8e2240 <athos_indirection_table_install+0xccc>
  907a7e:	9280      	s32i.n	a2, a8, 0
		u16TxRxCounter = mTABLE_LEN(u8UsbDeviceDescriptor[0]);
  907a80:	8240      	l32i.n	a2, a4, 0
  907a82:	242001        	l8ui	a4, a2, 1
  907a85:	600024        	j	907aad <bGet_descriptor_patch+0x55>
			u16TxRxCounter = mDEV_REQ_LENGTH();

		A_USB_EP0_TX_DATA();

		return TRUE;
	} else if (mDEV_REQ_VALUE_HIGH() == 2) {
  907a88:	69223d        	bnei	a2, 2, 907ac9 <bGet_descriptor_patch+0x71>
		uint8_t *p = (uint8_t *)u8ConfigDescriptorEX;

		/* Copy ConfigDescriptor */
		ath_hal_memcpy(ConfigDescriptorPatch, p,
  907a8b:	1269f4        	l32r	a2, 8e225c <athos_indirection_table_install+0xce8>
  907a8e:	1469f3        	l32r	a4, 8e225c <athos_indirection_table_install+0xce8>
  907a91:	2b2200        	l32i	a11, a2, 0
  907a94:	044a02        	or	a10, a4, a4
  907a97:	2c0a3c        	movi	a12, 60
  907a9a:	58002a        	call8	907b44 <ath_hal_memcpy>
				sizeof(ConfigDescriptorPatch));

		 /* place holder for EPx patches */

		if (mDEV_REQ_VALUE_LOW() == 0) {
  907a9d:	283007        	l8ui	a8, a3, 7
			/* configuration no: 0 */
			pu8DescriptorEX = ConfigDescriptorPatch;
			u16TxRxCounter = ConfigDescriptorPatch[1];
		} else
			return FALSE;
  907aa0:	c020      	movi.n	a2, 0
		ath_hal_memcpy(ConfigDescriptorPatch, p,
				sizeof(ConfigDescriptorPatch));

		 /* place holder for EPx patches */

		if (mDEV_REQ_VALUE_LOW() == 0) {
  907aa2:	728928        	bne	a8, a2, 907ace <bGet_descriptor_patch+0x76>
			/* configuration no: 0 */
			pu8DescriptorEX = ConfigDescriptorPatch;
  907aa5:	1269f1        	l32r	a2, 8e226c <athos_indirection_table_install+0xcf8>
  907aa8:	9420      	s32i.n	a4, a2, 0
			u16TxRxCounter = ConfigDescriptorPatch[1];
  907aaa:	244101        	l16ui	a4, a4, 2
  907aad:	1269f2        	l32r	a2, 8e2278 <athos_indirection_table_install+0xd04>
		} else
			return FALSE;

		if (u16TxRxCounter > mDEV_REQ_LENGTH())
  907ab0:	233105        	l16ui	a3, a3, 10
		 /* place holder for EPx patches */

		if (mDEV_REQ_VALUE_LOW() == 0) {
			/* configuration no: 0 */
			pu8DescriptorEX = ConfigDescriptorPatch;
			u16TxRxCounter = ConfigDescriptorPatch[1];
  907ab3:	242500        	s16i	a4, a2, 0
		} else
			return FALSE;

		if (u16TxRxCounter > mDEV_REQ_LENGTH())
  907ab6:	743b02        	bgeu	a3, a4, 907abc <bGet_descriptor_patch+0x64>
			u16TxRxCounter = mDEV_REQ_LENGTH();
  907ab9:	232500        	s16i	a3, a2, 0

		A_USB_EP0_TX_DATA();
  907abc:	126915        	l32r	a2, 8e1f10 <athos_indirection_table_install+0x99c>
  907abf:	222235        	l32i	a2, a2, 212
  907ac2:	0b2000        	callx8	a2
		return TRUE;
  907ac5:	c021      	movi.n	a2, 1
  907ac7:	d10f      	retw.n
	} else
		return bGet_descriptor();
  907ac9:	5b6ff4        	call8	8e3a9c <bGet_descriptor>
  907acc:	d2a0      	mov.n	a2, a10
}
  907ace:	d10f      	retw.n

00907ad0 <ath_hal_getuptime>:
#include<ah_internal.h>
#include "ah_osdep.h"

a_uint32_t __ahdecl
ath_hal_getuptime(struct ath_hal *ah)
{
  907ad0:	6c1004        	entry	a1, 32
	return MSEC_TO_TICK(msecs);
}
static inline unsigned long
__adf_os_getuptime(void)
{
    return MSEC_TO_TICK(A_MILLISECONDS());;      
  907ad3:	186915        	l32r	a8, 8e1f28 <athos_indirection_table_install+0x9b4>
  907ad6:	2a823e        	l32i	a10, a8, 248
  907ad9:	0ba000        	callx8	a10
	return adf_os_getuptime();
}
  907adc:	d2a0      	mov.n	a2, a10
  907ade:	d10f      	retw.n

00907ae0 <_ath_hal_attach_tgt>:

struct ath_hal *
_ath_hal_attach_tgt(a_uint32_t devid, HAL_SOFTC sc,
		    adf_os_device_t dev, a_uint32_t flags, void* s)
{
  907ae0:	6c1006        	entry	a1, 48
	HAL_STATUS status;
	struct ath_hal *ah = ath_hal_attach_tgt(devid, sc, dev, flags, &status);
  907ae3:	db30      	mov.n	a11, a3
  907ae5:	dc40      	mov.n	a12, a4
  907ae7:	dd50      	mov.n	a13, a5
  907ae9:	de10      	mov.n	a14, a1
  907aeb:	da20      	mov.n	a10, a2
  907aed:	580c97        	call8	90ad4c <ath_hal_attach_tgt>
	adf_os_print(" ath_hal = %p \n",ah);
  907af0:	186915        	l32r	a8, 8e1f44 <athos_indirection_table_install+0x9d0>
struct ath_hal *
_ath_hal_attach_tgt(a_uint32_t devid, HAL_SOFTC sc,
		    adf_os_device_t dev, a_uint32_t flags, void* s)
{
	HAL_STATUS status;
	struct ath_hal *ah = ath_hal_attach_tgt(devid, sc, dev, flags, &status);
  907af3:	d2a0      	mov.n	a2, a10
	adf_os_print(" ath_hal = %p \n",ah);
  907af5:	288212        	l32i	a8, a8, 72
  907af8:	1a69f5        	l32r	a10, 8e22cc <athos_indirection_table_install+0xd58>
  907afb:	db20      	mov.n	a11, a2
  907afd:	0b8000        	callx8	a8
	*(HAL_STATUS *)s = status;
  907b00:	8810      	l32i.n	a8, a1, 0
  907b02:	9860      	s32i.n	a8, a6, 0
	return ah;
}
  907b04:	d10f      	retw.n
	...

00907b08 <ath_hal_delay>:
/*
 * Delay n microseconds.
 */
void __ahdecl
ath_hal_delay(a_int32_t n)
{
  907b08:	6c1004        	entry	a1, 32
}

static inline void
__adf_os_udelay(int usecs)
{
    A_DELAY_USECS(usecs);
  907b0b:	186915        	l32r	a8, 8e1f60 <athos_indirection_table_install+0x9ec>
  907b0e:	da20      	mov.n	a10, a2
  907b10:	28823b        	l32i	a8, a8, 236
  907b13:	0b8000        	callx8	a8
  907b16:	d10f      	retw.n

00907b18 <ath_hal_malloc>:
/*
 * Allocate/free memory.
 */
void * __ahdecl
ath_hal_malloc(adf_os_size_t size)
{
  907b18:	6c1004        	entry	a1, 32
  907b1b:	146915        	l32r	a4, 8e1f70 <athos_indirection_table_install+0x9fc>
  907b1e:	d320      	mov.n	a3, a2
  907b20:	224252        	l32i	a2, a4, 0x148
  907b23:	c0a0      	movi.n	a10, 0
  907b25:	db30      	mov.n	a11, a3
  907b27:	0b2000        	callx8	a2
  907b2a:	d2a0      	mov.n	a2, a10
	void *p;

	p = adf_os_mem_alloc(size);
	if (p)
  907b2c:	c8a8      	beqz.n	a10, 907b38 <ath_hal_malloc+0x20>
}
/* zero a memory buffer */
static inline void
__adf_os_mem_zero(void *buf, adf_os_size_t size)
{
    A_MEMZERO(buf,size);
  907b2e:	8444      	l32i.n	a4, a4, 16
  907b30:	c0b0      	movi.n	a11, 0
  907b32:	033c02        	or	a12, a3, a3
  907b35:	0b4000        	callx8	a4
		adf_os_mem_zero(p, size);

	return p;
}
  907b38:	d10f      	retw.n
	...

00907b3c <ath_hal_free>:

void __ahdecl
ath_hal_free(void* p)
{
  907b3c:	6c1004        	entry	a1, 32
  907b3f:	d10f      	retw.n
  907b41:	000000        	ill

00907b44 <ath_hal_memcpy>:
	adf_os_mem_free(p);
}

void * __ahdecl
ath_hal_memcpy(void *dst, const void *src, adf_os_size_t n)
{
  907b44:	6c1004        	entry	a1, 32
}

/* move a memory buffer */
static inline void 		__adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    A_MEMCPY(dst,src,size);    
  907b47:	186915        	l32r	a8, 8e1f9c <athos_indirection_table_install+0xa28>
  907b4a:	da20      	mov.n	a10, a2
  907b4c:	8885      	l32i.n	a8, a8, 20
  907b4e:	db30      	mov.n	a11, a3
  907b50:	dc40      	mov.n	a12, a4
  907b52:	0b8000        	callx8	a8
	adf_os_mem_copy(dst, src, n);
	return 0;
}
  907b55:	c020      	movi.n	a2, 0
  907b57:	d10f      	retw.n
  907b59:	000000        	ill

00907b5c <__adf_os_mem_alloc>:

#include "cmnos_api.h"
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
  907b5c:	6c1004        	entry	a1, 32
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  907b5f:	186915        	l32r	a8, 8e1fb4 <athos_indirection_table_install+0xa40>
  907b62:	db20      	mov.n	a11, a2
  907b64:	288252        	l32i	a8, a8, 0x148
  907b67:	c0a0      	movi.n	a10, 0
  907b69:	0b8000        	callx8	a8
}
  907b6c:	d2a0      	mov.n	a2, a10
  907b6e:	d10f      	retw.n

00907b70 <__adf_os_mem_copy>:
    //free(buf,M_DEVBUF);
}

/* move a memory buffer */
static inline void 		__adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
  907b70:	6c1004        	entry	a1, 32
    A_MEMCPY(dst,src,size);    
  907b73:	186915        	l32r	a8, 8e1fc8 <athos_indirection_table_install+0xa54>
  907b76:	da20      	mov.n	a10, a2
  907b78:	8885      	l32i.n	a8, a8, 20
  907b7a:	db30      	mov.n	a11, a3
  907b7c:	dc40      	mov.n	a12, a4
  907b7e:	0b8000        	callx8	a8
  907b81:	d10f      	retw.n
	...

00907b84 <__adf_os_mem_set>:
}

/* set a memory buffer */
static inline void
__adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
  907b84:	6c1004        	entry	a1, 32
	A_MEMSET(buf, b, size);
  907b87:	186915        	l32r	a8, 8e1fdc <athos_indirection_table_install+0xa68>
  907b8a:	da20      	mov.n	a10, a2
  907b8c:	8884      	l32i.n	a8, a8, 16
  907b8e:	db30      	mov.n	a11, a3
  907b90:	dc40      	mov.n	a12, a4
  907b92:	0b8000        	callx8	a8
  907b95:	d10f      	retw.n
	...

00907b98 <tgt_HTCRecv_uapsdhandler>:
	ath_tgt_send_beacon(sc, hdr_buf, buf, EndPt);
}

static void tgt_HTCRecv_uapsdhandler(HTC_ENDPOINT_ID EndPt, adf_nbuf_t hdr_buf,
				     adf_nbuf_t buf, void *ServiceCtx)
{
  907b98:	6c1004        	entry	a1, 32
  907b9b:	d10f      	retw.n
  907b9d:	000000        	ill

00907ba0 <dispatch_magpie_sys_cmds>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void dispatch_magpie_sys_cmds(void *pContext, A_UINT16 Command,
				     A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  907ba0:	6c1004        	entry	a1, 32
	adf_os_assert(0);
  907ba3:	186915        	l32r	a8, 8e1ff8 <athos_indirection_table_install+0xa84>
  907ba6:	1a69f6        	l32r	a10, 8e2380 <athos_indirection_table_install+0xe0c>
  907ba9:	288212        	l32i	a8, a8, 72
  907bac:	1b69f7        	l32r	a11, 8e2388 <athos_indirection_table_install+0xe14>
  907baf:	0b8000        	callx8	a8
  907bb2:	18697a        	l32r	a8, 8e219c <athos_indirection_table_install+0xc28>
  907bb5:	0c0200        	memw
  907bb8:	8880      	l32i.n	a8, a8, 0
  907bba:	d10f      	retw.n

00907bbc <htc_setup_comp>:
/*****************/
/* Init / Deinit */
/*****************/

static void htc_setup_comp(void)
{
  907bbc:	6c1004        	entry	a1, 32
  907bbf:	d10f      	retw.n
  907bc1:	000000        	ill

00907bc4 <tgt_reg_service>:
	return HTC_SERVICE_SUCCESS;
}

static void tgt_reg_service(struct ath_softc_tgt *sc, HTC_SERVICE *svc,
			    int svcId, HTC_SERVICE_ProcessRecvMsg recvMsg)
{
  907bc4:	6c1004        	entry	a1, 32
	svc->ProcessRecvMsg = recvMsg;
	svc->ProcessSendBufferComplete = tgt_HTCSendCompleteHandler;
  907bc7:	1869f8        	l32r	a8, 8e23a8 <athos_indirection_table_install+0xe34>
	svc->ProcessConnect = tgt_ServiceConnect;
	svc->MaxSvcMsgSize = 1600;
	svc->TrailerSpcCheckLimit = 0;
	svc->ServiceID = svcId;
	svc->ServiceCtx = sc;
	HTC_RegisterService(sc->tgt_htc_handle, svc);
  907bca:	8a22      	l32i.n	a10, a2, 8

static void tgt_reg_service(struct ath_softc_tgt *sc, HTC_SERVICE *svc,
			    int svcId, HTC_SERVICE_ProcessRecvMsg recvMsg)
{
	svc->ProcessRecvMsg = recvMsg;
	svc->ProcessSendBufferComplete = tgt_HTCSendCompleteHandler;
  907bcc:	9832      	s32i.n	a8, a3, 8
	svc->ProcessConnect = tgt_ServiceConnect;
  907bce:	1869f9        	l32r	a8, 8e23b4 <athos_indirection_table_install+0xe40>
	return HTC_SERVICE_SUCCESS;
}

static void tgt_reg_service(struct ath_softc_tgt *sc, HTC_SERVICE *svc,
			    int svcId, HTC_SERVICE_ProcessRecvMsg recvMsg)
{
  907bd1:	db30      	mov.n	a11, a3
	svc->ProcessRecvMsg = recvMsg;
	svc->ProcessSendBufferComplete = tgt_HTCSendCompleteHandler;
	svc->ProcessConnect = tgt_ServiceConnect;
  907bd3:	9833      	s32i.n	a8, a3, 12
	svc->MaxSvcMsgSize = 1600;
  907bd5:	286a40        	movi	a8, 0x640
  907bd8:	28350a        	s16i	a8, a3, 20
	svc->TrailerSpcCheckLimit = 0;
  907bdb:	c080      	movi.n	a8, 0
  907bdd:	28350b        	s16i	a8, a3, 22
	svc->ServiceID = svcId;
	svc->ServiceCtx = sc;
	HTC_RegisterService(sc->tgt_htc_handle, svc);
  907be0:	186915        	l32r	a8, 8e2034 <athos_indirection_table_install+0xac0>
}

static void tgt_reg_service(struct ath_softc_tgt *sc, HTC_SERVICE *svc,
			    int svcId, HTC_SERVICE_ProcessRecvMsg recvMsg)
{
	svc->ProcessRecvMsg = recvMsg;
  907be3:	9531      	s32i.n	a5, a3, 4
	svc->ProcessConnect = tgt_ServiceConnect;
	svc->MaxSvcMsgSize = 1600;
	svc->TrailerSpcCheckLimit = 0;
	svc->ServiceID = svcId;
	svc->ServiceCtx = sc;
	HTC_RegisterService(sc->tgt_htc_handle, svc);
  907be5:	288280        	l32i	a8, a8, 0x200
	svc->ProcessRecvMsg = recvMsg;
	svc->ProcessSendBufferComplete = tgt_HTCSendCompleteHandler;
	svc->ProcessConnect = tgt_ServiceConnect;
	svc->MaxSvcMsgSize = 1600;
	svc->TrailerSpcCheckLimit = 0;
	svc->ServiceID = svcId;
  907be8:	243508        	s16i	a4, a3, 16
	svc->ServiceCtx = sc;
  907beb:	9236      	s32i.n	a2, a3, 24
	HTC_RegisterService(sc->tgt_htc_handle, svc);
  907bed:	0b8000        	callx8	a8
  907bf0:	d10f      	retw.n
	...

00907bf4 <tgt_HTCRecv_mgmthandler>:
{
}

static void tgt_HTCRecv_mgmthandler(HTC_ENDPOINT_ID EndPt, adf_nbuf_t hdr_buf,
				    adf_nbuf_t buf, void *ServiceCtx)
{
  907bf4:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)ServiceCtx;

	ath_tgt_send_mgt(sc,hdr_buf,buf,EndPt);
  907bf7:	da50      	mov.n	a10, a5
  907bf9:	db30      	mov.n	a11, a3
  907bfb:	dc40      	mov.n	a12, a4
  907bfd:	dd20      	mov.n	a13, a2
  907bff:	581899        	call8	90de64 <ath_tgt_send_mgt>
  907c02:	d10f      	retw.n

00907c04 <ath_tgt_rx_tasklet>:

	return 0;
}

static void ath_tgt_rx_tasklet(TQUEUE_ARG data)
{
  907c04:	6c1006        	entry	a1, 48
	struct ath_softc_tgt *sc  = (struct ath_softc_tgt *)data;
	struct ath_rx_buf *bf = NULL;
	struct ath_hal *ah = sc->sc_ah;
  907c07:	232d05        	addmi	a3, a2, 0x500
  907c0a:	853b      	l32i.n	a5, a3, 44
			continue;
		}

		asf_tailq_remove(&sc->sc_rxbuf, bf, bf_list);

		bf->bf_skb = NULL;
  907c0c:	c060      	movi.n	a6, 0
	struct rx_frame_header *rxhdr;
	struct ath_rx_status *rxstats;
	adf_nbuf_t skb = ADF_NBUF_NULL;

	do {
		bf = asf_tailq_first(&sc->sc_rxbuf);
  907c0e:	2322d5        	l32i	a3, a2, 0x354
		if (bf == NULL) {
  907c11:	64309c        	beqz	a3, 907cb1 <ath_tgt_rx_tasklet+0xad>
			break;
		}

		if (!(bf->bf_status & ATH_BUFSTATUS_DONE)) {
  907c14:	843f      	l32i.n	a4, a3, 60
  907c16:	7f4f02        	bbsi	a4, 31, 907c1c <ath_tgt_rx_tasklet+0x18>
  907c19:	600094        	j	907cb1 <ath_tgt_rx_tasklet+0xad>
			break;
		}

		skb = bf->bf_skb;
  907c1c:	8938      	l32i.n	a9, a3, 32
		if (skb == NULL) {
  907c1e:	649ff2        	beqz	a9, 907c14 <ath_tgt_rx_tasklet+0x10>
			continue;
		}

		asf_tailq_remove(&sc->sc_rxbuf, bf, bf_list);
  907c21:	8439      	l32i.n	a4, a3, 36
  907c23:	873a      	l32i.n	a7, a3, 40
  907c25:	c844      	beqz.n	a4, 907c2d <ath_tgt_rx_tasklet+0x29>
  907c27:	974a      	s32i.n	a7, a4, 40
  907c29:	600003        	j	907c30 <ath_tgt_rx_tasklet+0x2c>
  907c2c:	002726        	excw
  907c2f:	d687      	excw
  907c31:	3ada90        	excw
  907c34:	9470      	s32i.n	a4, a7, 0

		bf->bf_skb = NULL;
  907c36:	9638      	s32i.n	a6, a3, 32
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  907c38:	2b0a28        	movi	a11, 40
  907c3b:	291600        	s32i	a9, a1, 0
  907c3e:	5bfb3e        	call8	906938 <__adf_nbuf_push_head>
 * @param[in] size    buffer size
 */
static inline void
adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    __adf_os_mem_copy(dst, src, size);
  907c41:	2b3c40        	addi	a11, a3, 64
  907c44:	2c0a28        	movi	a12, 40
  907c47:	0aa702        	or	a7, a10, a10
  907c4a:	5bffc9        	call8	907b70 <__adf_os_mem_copy>
/*
 * Extend a 32 bit TSF to 64 bit, taking wrapping into account.
 */
static u_int64_t ath_extend_tsf(struct ath_softc_tgt *sc, u_int32_t rstamp)
{
	struct ath_hal *ah = sc->sc_ah;
  907c4d:	282d05        	addmi	a8, a2, 0x500
  907c50:	8a8b      	l32i.n	a10, a8, 44
						     sizeof(struct rx_frame_header));
		rxstats = (struct ath_rx_status *)(&rxhdr->rx_stats[0]);
		adf_os_mem_copy(rxstats, &(bf->bf_rx_status),
				sizeof(struct ath_rx_status));

		rxstats->rs_tstamp = ath_extend_tsf(sc, (u_int32_t)rxstats->rs_tstamp);
  907c52:	8471      	l32i.n	a4, a7, 4
	struct ath_hal *ah = sc->sc_ah;
	u_int64_t tsf;
	u_int32_t tsf_low;
	u_int64_t tsf64;

	tsf = ah->ah_getTsf64(ah);
  907c54:	28a21e        	l32i	a8, a10, 120
  907c57:	0b8000        	callx8	a8
	tsf_low = tsf & 0xffffffff;
	tsf64 = (tsf & ~0xffffffffULL) | rstamp;
  907c5a:	d8a0      	mov.n	a8, a10

	if (rstamp > tsf_low && (rstamp - tsf_low > 0x10000000))
  907c5c:	8910      	l32i.n	a9, a1, 0
  907c5e:	74bb0a        	bgeu	a11, a4, 907c6c <ath_tgt_rx_tasklet+0x68>
  907c61:	1c69fa        	l32r	a12, 8e244c <athos_indirection_table_install+0xed8>
  907c64:	0b4a0c        	sub	a10, a4, a11
  907c67:	7acb01        	bgeu	a12, a10, 907c6c <ath_tgt_rx_tasklet+0x68>
		tsf64 -= 0x100000000ULL;
  907c6a:	b088      	addi.n	a8, a8, -1

	if (rstamp < tsf_low && (tsf_low - rstamp > 0x10000000))
  907c6c:	7b4b0a        	bgeu	a4, a11, 907c7a <ath_tgt_rx_tasklet+0x76>
  907c6f:	1a69fa        	l32r	a10, 8e2458 <athos_indirection_table_install+0xee4>
  907c72:	04bb0c        	sub	a11, a11, a4
  907c75:	7bab01        	bgeu	a10, a11, 907c7a <ath_tgt_rx_tasklet+0x76>
		tsf64 += 0x100000000ULL;
  907c78:	b188      	addi.n	a8, a8, 1
						     sizeof(struct rx_frame_header));
		rxstats = (struct ath_rx_status *)(&rxhdr->rx_stats[0]);
		adf_os_mem_copy(rxstats, &(bf->bf_rx_status),
				sizeof(struct ath_rx_status));

		rxstats->rs_tstamp = ath_extend_tsf(sc, (u_int32_t)rxstats->rs_tstamp);
  907c7a:	9471      	s32i.n	a4, a7, 4

		HTC_SendMsg(sc->tgt_htc_handle, RX_ENDPOINT_ID, skb);
  907c7c:	146915        	l32r	a4, 8e20d0 <athos_indirection_table_install+0xb5c>
  907c7f:	8a22      	l32i.n	a10, a2, 8
  907c81:	244284        	l32i	a4, a4, 0x210
						     sizeof(struct rx_frame_header));
		rxstats = (struct ath_rx_status *)(&rxhdr->rx_stats[0]);
		adf_os_mem_copy(rxstats, &(bf->bf_rx_status),
				sizeof(struct ath_rx_status));

		rxstats->rs_tstamp = ath_extend_tsf(sc, (u_int32_t)rxstats->rs_tstamp);
  907c84:	9870      	s32i.n	a8, a7, 0

		HTC_SendMsg(sc->tgt_htc_handle, RX_ENDPOINT_ID, skb);
  907c86:	c0b3      	movi.n	a11, 3
  907c88:	dc90      	mov.n	a12, a9
  907c8a:	0b4000        	callx8	a4
		sc->sc_rx_stats.ast_rx_send++;
  907c8d:	24227d        	l32i	a4, a2, 0x1f4

		bf->bf_status &= ~ATH_BUFSTATUS_DONE;
  907c90:	873f      	l32i.n	a7, a3, 60
				sizeof(struct ath_rx_status));

		rxstats->rs_tstamp = ath_extend_tsf(sc, (u_int32_t)rxstats->rs_tstamp);

		HTC_SendMsg(sc->tgt_htc_handle, RX_ENDPOINT_ID, skb);
		sc->sc_rx_stats.ast_rx_send++;
  907c92:	b144      	addi.n	a4, a4, 1
  907c94:	24267d        	s32i	a4, a2, 0x1f4

		bf->bf_status &= ~ATH_BUFSTATUS_DONE;
  907c97:	c74e      	movi.n	a4, -2
  907c99:	047401        	and	a4, a7, a4
  907c9c:	943f      	s32i.n	a4, a3, 60
		asf_tailq_insert_tail(&sc->sc_rxbuf, bf, bf_list);
  907c9e:	2422d6        	l32i	a4, a2, 0x358
  907ca1:	9639      	s32i.n	a6, a3, 36
  907ca3:	943a      	s32i.n	a4, a3, 40
  907ca5:	9340      	s32i.n	a3, a4, 0
  907ca7:	233c24        	addi	a3, a3, 36
  907caa:	2326d6        	s32i	a3, a2, 0x358
  907cad:	63ff5d        	j	907c0e <ath_tgt_rx_tasklet+0xa>
  907cb0:	002322        	excw

	} while(1);

	sc->sc_imask |= HAL_INT_RX;
  907cb3:	c4c0      	movi.n	a12, 64
  907cb5:	b103      	addi.n	a3, a0, 1
  907cb7:	bb02      	addi.n	a2, a0, 11
  907cb9:	2b26c4        	s32i	a11, a2, 0x310
	ah->ah_setInterrupts(ah, sc->sc_imask);
  907cbc:	225228        	l32i	a2, a5, 160
  907cbf:	da50      	mov.n	a10, a5
  907cc1:	0b2000        	callx8	a2
  907cc4:	d10f      	retw.n
	...

00907cc8 <ath_descdma_cleanup>:
}

static void ath_descdma_cleanup(struct ath_softc_tgt *sc,
				struct ath_descdma *dd,
				ath_bufhead *head, a_int32_t dir)
{
  907cc8:	6c1006        	entry	a1, 48
	struct ath_buf *bf;
	struct ieee80211_node_target *ni;

	asf_tailq_foreach(bf, head, bf_list) {
  907ccb:	8740      	l32i.n	a7, a4, 0
  907ccd:	60007d        	j	907d4e <ath_descdma_cleanup+0x86>
		if (adf_nbuf_queue_len(&bf->bf_skbhead) != 0) {
  907cd0:	267c14        	addi	a6, a7, 20
 * @return length of the queue
 */
static inline a_uint32_t
adf_nbuf_queue_len(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_len(head);
  907cd3:	da60      	mov.n	a10, a6
  907cd5:	5bfbfc        	call8	906cc8 <__adf_nbuf_queue_len>
  907cd8:	d9a0      	mov.n	a9, a10
  907cda:	cbac      	beqz.n	a10, 907d1a <ath_descdma_cleanup+0x52>
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  907cdc:	2a2246        	l32i	a10, a2, 0x118
  907cdf:	2b7200        	l32i	a11, a7, 0
  907ce2:	055c02        	or	a12, a5, a5
  907ce5:	5bfb68        	call8	906a88 <__adf_nbuf_unmap>
  907ce8:	600021        	j	907d0d <ath_descdma_cleanup+0x45>
  907ceb:	000018        	src	a0, a0, a0
			adf_nbuf_unmap(sc->sc_dev, bf->bf_dmamap, dir);
			while(adf_nbuf_queue_len(&bf->bf_skbhead) != 0) {
				ath_free_rx_skb(sc,
  907cee:	69158b        	bnei	a1, 5, 907c7d <ath_tgt_rx_tasklet+0x79>
  907cf1:	202982        	l16si	a0, a2, 0x104
  907cf4:	9eda      	s32i.n	a14, a13, 40
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  907cf6:	609911        	j	91160b <_etext+0x250e>
  907cf9:	9b10      	s32i.n	a11, a1, 0
  907cfb:	5bfb4f        	call8	906a38 <__adf_nbuf_queue_remove>
  907cfe:	8b10      	l32i.n	a11, a1, 0
  907d00:	8911      	l32i.n	a9, a1, 4
  907d02:	0aac02        	or	a12, a10, a10
  907d05:	0bba02        	or	a10, a11, a11
  907d08:	c0b3      	movi.n	a11, 3
  907d0a:	0b9000        	callx8	a9
 * @return length of the queue
 */
static inline a_uint32_t
adf_nbuf_queue_len(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_len(head);
  907d0d:	da60      	mov.n	a10, a6
  907d0f:	5bfbee        	call8	906cc8 <__adf_nbuf_queue_len>
	struct ieee80211_node_target *ni;

	asf_tailq_foreach(bf, head, bf_list) {
		if (adf_nbuf_queue_len(&bf->bf_skbhead) != 0) {
			adf_nbuf_unmap(sc->sc_dev, bf->bf_dmamap, dir);
			while(adf_nbuf_queue_len(&bf->bf_skbhead) != 0) {
  907d12:	65afd7        	bnez	a10, 907ced <ath_descdma_cleanup+0x25>
				ath_free_rx_skb(sc,
					adf_nbuf_queue_remove(&bf->bf_skbhead));
			}
			bf->bf_skb = NULL;
  907d15:	9a78      	s32i.n	a10, a7, 32
  907d17:	600025        	j	907d40 <ath_descdma_cleanup+0x78>
		} else if (bf->bf_skb != NULL) {
  907d1a:	8678      	l32i.n	a6, a7, 32
  907d1c:	ca60      	beqz.n	a6, 907d40 <ath_descdma_cleanup+0x78>
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  907d1e:	2b7200        	l32i	a11, a7, 0
  907d21:	2a2246        	l32i	a10, a2, 0x118
  907d24:	055c02        	or	a12, a5, a5
  907d27:	291601        	s32i	a9, a1, 4
  907d2a:	5bfb57        	call8	906a88 <__adf_nbuf_unmap>
			adf_nbuf_unmap(sc->sc_dev,bf->bf_dmamap, dir);
			ath_free_rx_skb(sc, bf->bf_skb);
  907d2d:	186915        	l32r	a8, 8e2184 <athos_indirection_table_install+0xc10>
  907d30:	8a20      	l32i.n	a10, a2, 0
  907d32:	26829e        	l32i	a6, a8, 0x278
  907d35:	8c78      	l32i.n	a12, a7, 32
  907d37:	c0b3      	movi.n	a11, 3
  907d39:	0b6000        	callx8	a6
			bf->bf_skb = NULL;
  907d3c:	8911      	l32i.n	a9, a1, 4
  907d3e:	9978      	s32i.n	a9, a7, 32
 * @param[in] dmap
 */
static inline void
adf_nbuf_dmamap_destroy(adf_os_device_t osdev, adf_os_dma_map_t dmap)
{
    __adf_nbuf_dmamap_destroy(osdev, dmap);
  907d40:	8b70      	l32i.n	a11, a7, 0
  907d42:	2a2246        	l32i	a10, a2, 0x118
		}

		adf_nbuf_dmamap_destroy(sc->sc_dev, bf->bf_dmamap);

		ni = bf->bf_node;
		bf->bf_node = NULL;
  907d45:	c060      	movi.n	a6, 0
  907d47:	5bfb53        	call8	906a94 <__adf_nbuf_dmamap_destroy>
  907d4a:	9674      	s32i.n	a6, a7, 16
				ath_bufhead *head, a_int32_t dir)
{
	struct ath_buf *bf;
	struct ieee80211_node_target *ni;

	asf_tailq_foreach(bf, head, bf_list) {
  907d4c:	8779      	l32i.n	a7, a7, 36
  907d4e:	657f7e        	bnez	a7, 907cd0 <ath_descdma_cleanup+0x8>
	}

	adf_os_dmamem_free(sc->sc_dev, dd->dd_desc_len,
			   1, dd->dd_desc, dd->dd_desc_dmamap);

	asf_tailq_init(head);
  907d51:	9740      	s32i.n	a7, a4, 0
  907d53:	9441      	s32i.n	a4, a4, 4
 * @param[in] size  buffer size
 */
static inline void
adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
    __adf_os_mem_set(buf, b, size);
  907d55:	da30      	mov.n	a10, a3
  907d57:	db70      	mov.n	a11, a7
  907d59:	c1c8      	movi.n	a12, 24
  907d5b:	5bff8a        	call8	907b84 <__adf_os_mem_set>
  907d5e:	d10f      	retw.n

00907d60 <__adf_os_init_bh$isra$4>:
									  void 				*arg)
{
	__adf_os_init_defer(work, func, arg);
}

static inline void	__adf_os_init_bh(adf_os_handle_t  hdl,
  907d60:	6c1004        	entry	a1, 32
									 __adf_os_bh_t		*bh,
									 adf_os_defer_fn_t	func,
									 void				*arg)
{
	//__adf_os_init_defer(bh, func, arg);
	A_TASKLET_INIT_TASK(func, arg, bh);
  907d63:	186915        	l32r	a8, 8e21b8 <athos_indirection_table_install+0xc44>
  907d66:	da30      	mov.n	a10, a3
  907d68:	28826a        	l32i	a8, a8, 0x1a8
  907d6b:	db40      	mov.n	a11, a4
  907d6d:	dc20      	mov.n	a12, a2
  907d6f:	0b8000        	callx8	a8
  907d72:	d10f      	retw.n

00907d74 <__adf_os_sched_bh$isra$5>:
                                         __adf_os_work_t  * work)
{
    //taskqueue_drain(taskqueue_thread, &work->tsk);
}

static inline void __adf_os_sched_bh(adf_os_handle_t  hdl, 
  907d74:	6c1004        	entry	a1, 32
                                       __adf_os_bh_t  * bh)
{
    A_TASKLET_SCHEDULE(bh);
  907d77:	186915        	l32r	a8, 8e21cc <athos_indirection_table_install+0xc58>
  907d7a:	da20      	mov.n	a10, a2
  907d7c:	28826c        	l32i	a8, a8, 0x1b0
  907d7f:	0b8000        	callx8	a8
  907d82:	d10f      	retw.n

00907d84 <ath_rxdesc_init>:
				       RX_HEADER_SPACE, align);
	return skb;
}

static a_int32_t ath_rxdesc_init(struct ath_softc_tgt *sc, struct ath_rx_desc *ds)
{
  907d84:	6c1006        	entry	a1, 48
	struct ath_hal *ah = sc->sc_ah;
  907d87:	242d05        	addmi	a4, a2, 0x500
  907d8a:	854b      	l32i.n	a5, a4, 44
	struct ath_rx_desc *ds_held;
	a_uint8_t *anbdata;
	a_uint32_t anblen;

	if (!sc->sc_rxdesc_held) {
  907d8c:	2422db        	l32i	a4, a2, 0x36c
		sc->sc_rxdesc_held = ds;
  907d8f:	2326db        	s32i	a3, a2, 0x36c
	struct ath_hal *ah = sc->sc_ah;
	struct ath_rx_desc *ds_held;
	a_uint8_t *anbdata;
	a_uint32_t anblen;

	if (!sc->sc_rxdesc_held) {
  907d92:	cc43      	bnez.n	a4, 907d99 <ath_rxdesc_init+0x15>
  907d94:	60017c        	j	907f14 <ath_rxdesc_init+0x190>
  907d97:	000029        	excw

	ds_held = sc->sc_rxdesc_held;
	sc->sc_rxdesc_held = ds;
	ds = ds_held;

	if (ds->ds_nbuf == ADF_NBUF_NULL) {
  907d9a:	403428        	excw
  907d9d:	403523        	excw
  907da0:	403608        	excw
  907da3:	9910      	s32i.n	a9, a1, 0
  907da5:	008811        	slli	a8, a8, 16
  907da8:	098802        	or	a8, a8, a9
  907dab:	083311        	slli	a3, a3, 8
  907dae:	083302        	or	a3, a3, a8
  907db1:	284037        	l8ui	a8, a4, 55
  907db4:	038302        	or	a3, a8, a3
  907db7:	6530b6        	bnez	a3, 907e71 <ath_rxdesc_init+0xed>
static adf_nbuf_t ath_alloc_skb_align(struct ath_softc_tgt *sc,
				      a_uint32_t size, a_uint32_t align)
{
	adf_nbuf_t skb;

	skb = BUF_Pool_alloc_buf_align(sc->pool_handle, POOL_ID_WLAN_RX_BUF,
  907dba:	136915        	l32r	a3, 8e2210 <athos_indirection_table_install+0xc9c>
  907dbd:	8a20      	l32i.n	a10, a2, 0
  907dbf:	23329d        	l32i	a3, a3, 0x274
  907dc2:	2d2196        	l16ui	a13, a2, 0x12c
  907dc5:	c3c0      	movi.n	a12, 48
  907dc7:	c0b3      	movi.n	a11, 3
  907dc9:	0b3000        	callx8	a3
	ds_held = sc->sc_rxdesc_held;
	sc->sc_rxdesc_held = ds;
	ds = ds_held;

	if (ds->ds_nbuf == ADF_NBUF_NULL) {
		ds->ds_nbuf = ath_alloc_skb_align(sc, sc->sc_rxbufsize, sc->sc_cachelsz);
  907dcc:	0a8357        	extui	a3, a10, 24, 8
  907dcf:	234434        	s8i	a3, a4, 52
  907dd2:	0a0357        	extui	a3, a10, 16, 8
  907dd5:	234435        	s8i	a3, a4, 53
  907dd8:	0a8347        	extui	a3, a10, 8, 8
  907ddb:	234436        	s8i	a3, a4, 54
  907dde:	2a4437        	s8i	a10, a4, 55
static adf_nbuf_t ath_alloc_skb_align(struct ath_softc_tgt *sc,
				      a_uint32_t size, a_uint32_t align)
{
	adf_nbuf_t skb;

	skb = BUF_Pool_alloc_buf_align(sc->pool_handle, POOL_ID_WLAN_RX_BUF,
  907de1:	dca0      	mov.n	a12, a10
	sc->sc_rxdesc_held = ds;
	ds = ds_held;

	if (ds->ds_nbuf == ADF_NBUF_NULL) {
		ds->ds_nbuf = ath_alloc_skb_align(sc, sc->sc_rxbufsize, sc->sc_cachelsz);
		if (ds->ds_nbuf == ADF_NBUF_NULL) {
  907de3:	ccad      	bnez.n	a10, 907df4 <ath_rxdesc_init+0x70>
			sc->sc_rxdesc_held = ds;
			sc->sc_rx_stats.ast_rx_nobuf++;
  907de5:	23227c        	l32i	a3, a2, 0x1f0
	ds = ds_held;

	if (ds->ds_nbuf == ADF_NBUF_NULL) {
		ds->ds_nbuf = ath_alloc_skb_align(sc, sc->sc_rxbufsize, sc->sc_cachelsz);
		if (ds->ds_nbuf == ADF_NBUF_NULL) {
			sc->sc_rxdesc_held = ds;
  907de8:	2426db        	s32i	a4, a2, 0x36c
			sc->sc_rx_stats.ast_rx_nobuf++;
  907deb:	b133      	addi.n	a3, a3, 1
  907ded:	23267c        	s32i	a3, a2, 0x1f0
			return ENOMEM;
  907df0:	c72f      	movi.n	a2, -1
  907df2:	d10f      	retw.n
		}
		adf_nbuf_map(sc->sc_dev, ds->ds_dmap, ds->ds_nbuf, ADF_OS_DMA_FROM_DEVICE);
  907df4:	294038        	l8ui	a9, a4, 56
  907df7:	284039        	l8ui	a8, a4, 57
  907dfa:	23403a        	l8ui	a3, a4, 58
  907dfd:	089910        	slli	a9, a9, 24
  907e00:	008811        	slli	a8, a8, 16
  907e03:	098802        	or	a8, a8, a9
  907e06:	2b403b        	l8ui	a11, a4, 59
  907e09:	083311        	slli	a3, a3, 8
  907e0c:	083302        	or	a3, a3, a8
adf_nbuf_map(adf_os_device_t        osdev, 
             adf_os_dma_map_t       bmap, 
             adf_nbuf_t             buf, 
             adf_os_dma_dir_t       dir)
{
    return __adf_nbuf_map(osdev, bmap, buf, dir);
  907e0f:	2a2246        	l32i	a10, a2, 0x118
  907e12:	03bb02        	or	a11, a11, a3
  907e15:	c0d1      	movi.n	a13, 1
  907e17:	5bfb19        	call8	906a7c <__adf_nbuf_map>
		adf_nbuf_dmamap_info(ds->ds_dmap, &ds->ds_dmap_info);
  907e1a:	294038        	l8ui	a9, a4, 56
  907e1d:	284039        	l8ui	a8, a4, 57
  907e20:	23403a        	l8ui	a3, a4, 58
  907e23:	089910        	slli	a9, a9, 24
  907e26:	008811        	slli	a8, a8, 16
  907e29:	098802        	or	a8, a8, a9
  907e2c:	2a403b        	l8ui	a10, a4, 59
  907e2f:	083311        	slli	a3, a3, 8
  907e32:	083302        	or	a3, a3, a8
 * @param[out] sg   map info
 */
static inline void
adf_nbuf_dmamap_info(adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
    __adf_nbuf_dmamap_info(bmap, sg);
  907e35:	03aa02        	or	a10, a10, a3
  907e38:	2b4c3c        	addi	a11, a4, 60
  907e3b:	5bfb18        	call8	906a9c <__adf_nbuf_dmamap_info>
		ds->ds_data = ds->ds_dmap_info.dma_segs[0].paddr;
  907e3e:	294040        	l8ui	a9, a4, 64
  907e41:	234041        	l8ui	a3, a4, 65
  907e44:	284042        	l8ui	a8, a4, 66
  907e47:	089910        	slli	a9, a9, 24
  907e4a:	003311        	slli	a3, a3, 16
  907e4d:	093302        	or	a3, a3, a9
  907e50:	088811        	slli	a8, a8, 8
  907e53:	038802        	or	a8, a8, a3
  907e56:	234043        	l8ui	a3, a4, 67
  907e59:	083802        	or	a8, a3, a8
  907e5c:	088357        	extui	a3, a8, 24, 8
  907e5f:	234404        	s8i	a3, a4, 4
  907e62:	080357        	extui	a3, a8, 16, 8
  907e65:	234405        	s8i	a3, a4, 5
  907e68:	088347        	extui	a3, a8, 8, 8
  907e6b:	234406        	s8i	a3, a4, 6
  907e6e:	284407        	s8i	a8, a4, 7
	}

	ds->ds_link = 0;
  907e71:	c080      	movi.n	a8, 0
  907e73:	284400        	s8i	a8, a4, 0
  907e76:	284401        	s8i	a8, a4, 1
  907e79:	284402        	s8i	a8, a4, 2
  907e7c:	284403        	s8i	a8, a4, 3
	adf_nbuf_peek_header(ds->ds_nbuf, &anbdata, &anblen);
  907e7f:	294034        	l8ui	a9, a4, 52
  907e82:	284035        	l8ui	a8, a4, 53
  907e85:	234036        	l8ui	a3, a4, 54
  907e88:	089910        	slli	a9, a9, 24
  907e8b:	008811        	slli	a8, a8, 16
  907e8e:	098802        	or	a8, a8, a9
  907e91:	2a4037        	l8ui	a10, a4, 55
  907e94:	083311        	slli	a3, a3, 8
  907e97:	083302        	or	a3, a3, a8
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  907e9a:	03aa02        	or	a10, a10, a3
  907e9d:	b41b      	addi.n	a11, a1, 4
  907e9f:	dc10      	mov.n	a12, a1
  907ea1:	5bfb7f        	call8	906ca0 <__adf_nbuf_peek_header>

	ah->ah_setupRxDesc(ds, adf_nbuf_tailroom(ds->ds_nbuf), 0);
  907ea4:	2a4034        	l8ui	a10, a4, 52
  907ea7:	294035        	l8ui	a9, a4, 53
  907eaa:	284036        	l8ui	a8, a4, 54
  907ead:	08aa10        	slli	a10, a10, 24
  907eb0:	009911        	slli	a9, a9, 16
  907eb3:	0a9902        	or	a9, a9, a10
  907eb6:	088811        	slli	a8, a8, 8
  907eb9:	2a4037        	l8ui	a10, a4, 55
  907ebc:	098802        	or	a8, a8, a9
 * @return amount of tail room 
 */
static inline a_uint32_t
adf_nbuf_tailroom(adf_nbuf_t buf)
{
    return (__adf_nbuf_tailroom(buf));
  907ebf:	08aa02        	or	a10, a10, a8
  907ec2:	235220        	l32i	a3, a5, 128
  907ec5:	5bfb67        	call8	906c64 <__adf_nbuf_tailroom>
  907ec8:	dba0      	mov.n	a11, a10
  907eca:	c0c0      	movi.n	a12, 0
  907ecc:	da40      	mov.n	a10, a4
  907ece:	0b3000        	callx8	a3
  907ed1:	2a4048        	l8ui	a10, a4, 72
  907ed4:	294049        	l8ui	a9, a4, 73

	if (sc->sc_rxlink == NULL) {
		ah->ah_setRxDP(ah, ds->ds_daddr);
  907ed7:	08aa10        	slli	a10, a10, 24
  907eda:	009911        	slli	a9, a9, 16
  907edd:	0a9a02        	or	a10, a9, a10
  907ee0:	29404a        	l8ui	a9, a4, 74
	ds->ds_link = 0;
	adf_nbuf_peek_header(ds->ds_nbuf, &anbdata, &anblen);

	ah->ah_setupRxDesc(ds, adf_nbuf_tailroom(ds->ds_nbuf), 0);

	if (sc->sc_rxlink == NULL) {
  907ee3:	2822ef        	l32i	a8, a2, 0x3bc
		ah->ah_setRxDP(ah, ds->ds_daddr);
  907ee6:	089911        	slli	a9, a9, 8
  907ee9:	0a9902        	or	a9, a9, a10
	ds->ds_link = 0;
	adf_nbuf_peek_header(ds->ds_nbuf, &anbdata, &anblen);

	ah->ah_setupRxDesc(ds, adf_nbuf_tailroom(ds->ds_nbuf), 0);

	if (sc->sc_rxlink == NULL) {
  907eec:	cd81      	bnez.n	a8, 907f01 <ath_rxdesc_init+0x17d>
		ah->ah_setRxDP(ah, ds->ds_daddr);
  907eee:	2b404b        	l8ui	a11, a4, 75
  907ef1:	23521f        	l32i	a3, a5, 124
  907ef4:	da50      	mov.n	a10, a5
  907ef6:	09bb02        	or	a11, a11, a9
  907ef9:	0b3000        	callx8	a3
  907efc:	600009        	j	907f09 <ath_rxdesc_init+0x185>
  907eff:	000023        	excw
	}
	else {
		*sc->sc_rxlink = ds->ds_daddr;
  907f02:	404b09        	excw
  907f05:	390299        	excw
  907f08:	8024      	l32i.n	a0, a2, 16
	}
	sc->sc_rxlink = &ds->ds_link;
  907f0a:	26ef22        	s32ri	a6, a14, 136
	ah->ah_enableReceive(ah);
  907f0d:	5225da        	call0	891678 <_bss_end+0x37e768>
  907f10:	500b20        	call0	90ab94 <zfTurnOffPower_patch+0xd0>
  907f13:	00c020        	excw

	return 0;
}
  907f16:	d10f      	retw.n

00907f18 <ath_pll_reset_ones$isra$9>:
	}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &val[0], datalen);
}

static void ath_pll_reset_ones(struct ath_hal *ah)
  907f18:	6c1004        	entry	a1, 32
{
	static uint8_t reset_pll = 0;

	if(reset_pll == 0) {
  907f1b:	1969fb        	l32r	a9, 8e2708 <athos_indirection_table_install+0x1194>
  907f1e:	289000        	l8ui	a8, a9, 0
  907f21:	ce87      	bnez.n	a8, 907f4c <ath_pll_reset_ones$isra$9+0x34>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  907f23:	1869fc        	l32r	a8, 8e2714 <athos_indirection_table_install+0x11a0>
			 ioread32_mac(0x786c) & (~0x6000000));

		iowrite32(MAGPIE_REG_RST_PWDN_CTRL_ADDR, 0x20);

#elif defined(PROJECT_MAGPIE) && !defined (FPGA)
		iowrite32_mac(0x7890,
  907f26:	1a69fd        	l32r	a10, 8e271c <athos_indirection_table_install+0x11a8>
  907f29:	0c0200        	memw
  907f2c:	8b80      	l32i.n	a11, a8, 0
  907f2e:	0aba02        	or	a10, a11, a10
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  907f31:	0c0200        	memw
  907f34:	9a80      	s32i.n	a10, a8, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  907f36:	0c0200        	memw
  907f39:	8b80      	l32i.n	a11, a8, 0
			 ioread32_mac(0x7890) | 0x1800000);
		iowrite32_mac(0x7890,
  907f3b:	1a69fe        	l32r	a10, 8e2734 <athos_indirection_table_install+0x11c0>
  907f3e:	0aba01        	and	a10, a11, a10
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  907f41:	0c0200        	memw
  907f44:	9a80      	s32i.n	a10, a8, 0
			 ioread32_mac(0x7890) & (~0x1800000));
#endif
		reset_pll = 1;
  907f46:	280a01        	movi	a8, 1
  907f49:	289400        	s8i	a8, a9, 0
  907f4c:	d10f      	retw.n
	...

00907f50 <tgt_ServiceConnect>:
				  HTC_ENDPOINT_ID eid,
				  A_UINT8 *pDataIn,
				  a_int32_t LengthIn,
				  A_UINT8 *pDataOut,
				  a_int32_t *pLengthOut)
{
  907f50:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)pService->ServiceCtx;
  907f53:	8826      	l32i.n	a8, a2, 24

	switch(pService->ServiceID) {
  907f55:	222108        	l16ui	a2, a2, 16
  907f58:	c098      	movi.n	a9, 8
  907f5a:	222dff        	addmi	a2, a2, 0xffffff00
  907f5d:	02024f        	extui	a2, a2, 0, 16
  907f60:	729341        	bltu	a9, a2, 907fa5 <tgt_ServiceConnect+0x55>
  907f63:	1969ff        	l32r	a9, 8e2760 <athos_indirection_table_install+0x11ec>
  907f66:	09220a        	addx4	a2, a2, a9
  907f69:	8220      	l32i.n	a2, a2, 0
  907f6b:	0a2000        	jx	a2
  907f6e:	002386        	excw
	case WMI_CONTROL_SVC:
		sc->wmi_command_ep= eid;
  907f71:	3c6000        	excw
		break;
  907f74:	462386        	excw
	case WMI_BEACON_SVC:
		sc->beacon_ep= eid;
  907f77:	3d6000        	excw
		break;
  907f7a:	402386        	excw
	case WMI_CAB_SVC:
		sc->cab_ep= eid;
  907f7d:	3e6000        	excw
		break;
  907f80:	3a2386        	excw
	case WMI_UAPSD_SVC:
		sc->uapsd_ep= eid;
  907f83:	3f6000        	excw
		break;
  907f86:	342386        	excw
	case WMI_MGMT_SVC:
		sc->mgmt_ep= eid;
  907f89:	406000        	excw
		break;
  907f8c:	2e2386        	excw
	case WMI_DATA_VO_SVC:
		sc->data_VO_ep = eid;
  907f8f:	416000        	excw
		break;
  907f92:	282386        	excw
	case WMI_DATA_VI_SVC:
		sc->data_VI_ep = eid;
  907f95:	426000        	excw
		break;
  907f98:	222386        	excw
	case WMI_DATA_BE_SVC:
		sc->data_BE_ep = eid;
  907f9b:	436000        	excw
		break;
  907f9e:	1c2386        	l32r	a12, 8d0db8 <_bss_end+0x3bdea8>
	case WMI_DATA_BK_SVC:
		sc->data_BK_ep = eid;
  907fa1:	446000        	excw
		break;
  907fa4:	161269        	l32r	a6, 8cc948 <_bss_end+0x3b9a38>
	default:
		adf_os_assert(0);
  907fa7:	151a69        	l32r	a5, 8ce94c <_bss_end+0x3bba3c>
  907faa:	f6          	.byte 0xf6
  907fab:	222212        	l32i	a2, a2, 72
  907fae:	1b6a00        	l32r	a11, 8e27b0 <athos_indirection_table_install+0x123c>
  907fb1:	0b2000        	callx8	a2
  907fb4:	12697a        	l32r	a2, 8e259c <athos_indirection_table_install+0x1028>
  907fb7:	0c0200        	memw
  907fba:	8220      	l32i.n	a2, a2, 0
	}

	return HTC_SERVICE_SUCCESS;
}
  907fbc:	c020      	movi.n	a2, 0
  907fbe:	d10f      	retw.n

00907fc0 <ath_reg_read_filter>:

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static a_int32_t ath_reg_read_filter(struct ath_hal *ah, a_int32_t addr)
{
  907fc0:	6c1004        	entry	a1, 32
	if ((addr & 0xffffe000) == 0x2000) {
  907fc3:	196a01        	l32r	a9, 8e27c8 <athos_indirection_table_install+0x1254>
  907fc6:	186a02        	l32r	a8, 8e27d0 <athos_indirection_table_install+0x125c>
  907fc9:	093901        	and	a9, a3, a9
  907fcc:	789935        	bne	a9, a8, 908005 <ath_reg_read_filter+0x45>
		/* SEEPROM registers */
		ioread32_mac(addr);
  907fcf:	186a03        	l32r	a8, 8e27dc <athos_indirection_table_install+0x1268>
		if (!ath_hal_wait(ah, 0x407c, 0x00030000, 0))
  907fd2:	1b6a04        	l32r	a11, 8e27e4 <athos_indirection_table_install+0x1270>

static a_int32_t ath_reg_read_filter(struct ath_hal *ah, a_int32_t addr)
{
	if ((addr & 0xffffe000) == 0x2000) {
		/* SEEPROM registers */
		ioread32_mac(addr);
  907fd5:	a838      	add.n	a8, a3, a8
		if (!ath_hal_wait(ah, 0x407c, 0x00030000, 0))
  907fd7:	1c6a05        	l32r	a12, 8e27ec <athos_indirection_table_install+0x1278>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  907fda:	0c0200        	memw
  907fdd:	8880      	l32i.n	a8, a8, 0
  907fdf:	022a02        	or	a10, a2, a2
  907fe2:	2d0a00        	movi	a13, 0
  907fe5:	580b9c        	call8	90ae58 <ath_hal_wait>
  907fe8:	ccac      	bnez.n	a10, 907ff8 <ath_reg_read_filter+0x38>
			adf_os_print("SEEPROM Read fail: 0x%08x\n", addr);
  907fea:	126915        	l32r	a2, 8e2440 <athos_indirection_table_install+0xecc>
  907fed:	1a6a06        	l32r	a10, 8e2808 <athos_indirection_table_install+0x1294>
  907ff0:	222212        	l32i	a2, a2, 72
  907ff3:	db30      	mov.n	a11, a3
  907ff5:	0b2000        	callx8	a2
  907ff8:	126a07        	l32r	a2, 8e2814 <athos_indirection_table_install+0x12a0>
  907ffb:	0c0200        	memw
  907ffe:	8220      	l32i.n	a2, a2, 0

		return ioread32_mac(0x407c) & 0x0000ffff;
  908000:	02024f        	extui	a2, a2, 0, 16
  908003:	d10f      	retw.n
	} else if (addr > 0xffff)
  908005:	126a08        	l32r	a2, 8e2828 <athos_indirection_table_install+0x12b4>
  908008:	732a04        	bge	a2, a3, 908010 <ath_reg_read_filter+0x50>
  90800b:	600006        	j	908015 <ath_reg_read_filter+0x55>
  90800e:	000012        	srai	a0, a0, 0
		/* SoC registers */
		return ioread32(addr);
	else
		/* MAC registers */
		return ioread32_mac(addr);
  908011:	6a03a2        	blti	a0, 3, 907fb7 <tgt_ServiceConnect+0x67>
  908014:	330c02        	excw
  908017:	008230        	excw
}
  90801a:	d10f      	retw.n

0090801c <tgt_HTCSendCompleteHandler>:
		asf_tailq_insert_tail(&sc->sc_rxdesc, ds_tmp, ds_list);
	}
}

static void tgt_HTCSendCompleteHandler(HTC_ENDPOINT_ID Endpt, adf_nbuf_t buf, void *ServiceCtx)
{
  90801c:	6c1006        	entry	a1, 48
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)ServiceCtx;

	if (Endpt == RX_ENDPOINT_ID) {
  90801f:	682302        	beqi	a2, 3, 908025 <tgt_HTCSendCompleteHandler+0x9>
  908022:	600124        	j	90814a <tgt_HTCSendCompleteHandler+0x12e>
		sc->sc_rx_stats.ast_rx_done++;
  908025:	22427e        	l32i	a2, a4, 0x1f8
}

static inline void
adf_nbuf_split_to_frag(adf_nbuf_t buf, adf_nbuf_queue_t *qhead)
{
    return __adf_nbuf_split_to_frag(buf, qhead);
  908028:	da30      	mov.n	a10, a3
  90802a:	b122      	addi.n	a2, a2, 1
  90802c:	22467e        	s32i	a2, a4, 0x1f8
  90802f:	db10      	mov.n	a11, a1
  908031:	5bfad3        	call8	906b80 <__adf_nbuf_split_to_frag>
	struct ath_rx_desc *ds;
	adf_nbuf_t buf_tmp;
	adf_nbuf_queue_t nbuf_head;

	adf_nbuf_split_to_frag(buf, &nbuf_head);
	ds = asf_tailq_first(&sc->sc_rxdesc_idle);
  908034:	2242d7        	l32i	a2, a4, 0x35c

		if (buf_tmp == NULL) {
			break;
		}

		BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, buf_tmp);
  908037:	136915        	l32r	a3, 8e248c <athos_indirection_table_install+0xf18>
  90803a:	600109        	j	908147 <tgt_HTCSendCompleteHandler+0x12b>
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  90803d:	da10      	mov.n	a10, a1
  90803f:	5bfa7e        	call8	906a38 <__adf_nbuf_queue_remove>
  908042:	dca0      	mov.n	a12, a10

	while (ds) {
		struct ath_rx_desc *ds_tmp;
		buf_tmp = adf_nbuf_queue_remove(&nbuf_head);

		if (buf_tmp == NULL) {
  908044:	64a102        	beqz	a10, 90814a <tgt_HTCSendCompleteHandler+0x12e>
			break;
		}

		BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, buf_tmp);
  908047:	28329e        	l32i	a8, a3, 0x278
  90804a:	8a40      	l32i.n	a10, a4, 0
  90804c:	c0b3      	movi.n	a11, 3
  90804e:	0b8000        	callx8	a8

		ds_tmp = ds;
		ds = asf_tailq_next(ds, ds_list);
  908051:	29204c        	l8ui	a9, a2, 76
  908054:	28204d        	l8ui	a8, a2, 77
  908057:	25204e        	l8ui	a5, a2, 78
  90805a:	089910        	slli	a9, a9, 24
  90805d:	008811        	slli	a8, a8, 16
  908060:	098802        	or	a8, a8, a9
  908063:	085511        	slli	a5, a5, 8
  908066:	085502        	or	a5, a5, a8
  908069:	28204f        	l8ui	a8, a2, 79

		ath_rxdesc_init(sc, ds_tmp);
  90806c:	044a02        	or	a10, a4, a4
  90806f:	022b02        	or	a11, a2, a2
		}

		BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, buf_tmp);

		ds_tmp = ds;
		ds = asf_tailq_next(ds, ds_list);
  908072:	058502        	or	a5, a8, a5

		ath_rxdesc_init(sc, ds_tmp);
  908075:	5bff43        	call8	907d84 <ath_rxdesc_init>

		asf_tailq_remove(&sc->sc_rxdesc_idle, ds_tmp, ds_list);
  908078:	2a204c        	l8ui	a10, a2, 76
  90807b:	29204d        	l8ui	a9, a2, 77
  90807e:	28204e        	l8ui	a8, a2, 78
  908081:	08aa10        	slli	a10, a10, 24
  908084:	009911        	slli	a9, a9, 16
  908087:	0a9902        	or	a9, a9, a10
  90808a:	088811        	slli	a8, a8, 8
  90808d:	098802        	or	a8, a8, a9
  908090:	29204f        	l8ui	a9, a2, 79
  908093:	2a2051        	l8ui	a10, a2, 81
  908096:	089802        	or	a8, a9, a8
  908099:	292050        	l8ui	a9, a2, 80
  90809c:	00aa11        	slli	a10, a10, 16
  90809f:	089910        	slli	a9, a9, 24
  9080a2:	09aa02        	or	a10, a10, a9
  9080a5:	292052        	l8ui	a9, a2, 82
  9080a8:	089911        	slli	a9, a9, 8
  9080ab:	0a9902        	or	a9, a9, a10
  9080ae:	c98e      	beqz.n	a8, 9080d0 <tgt_HTCSendCompleteHandler+0xb4>
  9080b0:	2a2053        	l8ui	a10, a2, 83
  9080b3:	09a902        	or	a9, a10, a9
  9080b6:	098a57        	extui	a10, a9, 24, 8
  9080b9:	2a8450        	s8i	a10, a8, 80
  9080bc:	090a57        	extui	a10, a9, 16, 8
  9080bf:	2a8451        	s8i	a10, a8, 81
  9080c2:	098a47        	extui	a10, a9, 8, 8
  9080c5:	2a8452        	s8i	a10, a8, 82
  9080c8:	298453        	s8i	a9, a8, 83
  9080cb:	60000a        	j	9080d9 <tgt_HTCSendCompleteHandler+0xbd>
  9080ce:	000028        	mull	a0, a0, a0
  9080d1:	205309        	excw
  9080d4:	8902      	l32i.n	a9, a0, 8
  9080d6:	2946d8        	s32i	a9, a4, 0x360
  9080d9:	2a2050        	l8ui	a10, a2, 80
  9080dc:	292051        	l8ui	a9, a2, 81
  9080df:	282052        	l8ui	a8, a2, 82
  9080e2:	08aa10        	slli	a10, a10, 24
  9080e5:	009911        	slli	a9, a9, 16
  9080e8:	0a9902        	or	a9, a9, a10
  9080eb:	088811        	slli	a8, a8, 8
  9080ee:	098802        	or	a8, a8, a9
  9080f1:	292053        	l8ui	a9, a2, 83
  9080f4:	2b204c        	l8ui	a11, a2, 76
  9080f7:	2a204d        	l8ui	a10, a2, 77
  9080fa:	089802        	or	a8, a9, a8
  9080fd:	29204e        	l8ui	a9, a2, 78
  908100:	08bb10        	slli	a11, a11, 24
  908103:	00aa11        	slli	a10, a10, 16
  908106:	0baa02        	or	a10, a10, a11
  908109:	089911        	slli	a9, a9, 8
  90810c:	0a9902        	or	a9, a9, a10
  90810f:	2a204f        	l8ui	a10, a2, 79
  908112:	09a902        	or	a9, a10, a9
  908115:	9980      	s32i.n	a9, a8, 0
		asf_tailq_insert_tail(&sc->sc_rxdesc, ds_tmp, ds_list);
  908117:	c080      	movi.n	a8, 0
  908119:	28244c        	s8i	a8, a2, 76
  90811c:	28244d        	s8i	a8, a2, 77
  90811f:	28244e        	s8i	a8, a2, 78
  908122:	28244f        	s8i	a8, a2, 79
  908125:	2842da        	l32i	a8, a4, 0x368
  908128:	088957        	extui	a9, a8, 24, 8
  90812b:	292450        	s8i	a9, a2, 80
  90812e:	080957        	extui	a9, a8, 16, 8
  908131:	292451        	s8i	a9, a2, 81
  908134:	088947        	extui	a9, a8, 8, 8
  908137:	292452        	s8i	a9, a2, 82
  90813a:	282453        	s8i	a8, a2, 83
  90813d:	9280      	s32i.n	a2, a8, 0
  90813f:	222c4c        	addi	a2, a2, 76
  908142:	2246da        	s32i	a2, a4, 0x368
		}

		BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, buf_tmp);

		ds_tmp = ds;
		ds = asf_tailq_next(ds, ds_list);
  908145:	d250      	mov.n	a2, a5
	adf_nbuf_queue_t nbuf_head;

	adf_nbuf_split_to_frag(buf, &nbuf_head);
	ds = asf_tailq_first(&sc->sc_rxdesc_idle);

	while (ds) {
  908147:	652ef2        	bnez	a2, 90803d <tgt_HTCSendCompleteHandler+0x21>
  90814a:	d10f      	retw.n

0090814c <ath_desc_free>:

#undef DS2PHYS
}

static void ath_desc_free(struct ath_softc_tgt *sc)
{
  90814c:	6c1004        	entry	a1, 32
	asf_tailq_insert_tail(&sc->sc_txbuf, sc->sc_txbuf_held, bf_list);
  90814f:	2822dc        	l32i	a8, a2, 0x370
  908152:	2922f1        	l32i	a9, a2, 0x3c4
  908155:	c0d0      	movi.n	a13, 0
  908157:	9d89      	s32i.n	a13, a8, 36
  908159:	998a      	s32i.n	a9, a8, 40
  90815b:	9890      	s32i.n	a8, a9, 0
  90815d:	2822dc        	l32i	a8, a2, 0x370

	sc->sc_txbuf_held = NULL;
  908160:	2d26dc        	s32i	a13, a2, 0x370
#undef DS2PHYS
}

static void ath_desc_free(struct ath_softc_tgt *sc)
{
	asf_tailq_insert_tail(&sc->sc_txbuf, sc->sc_txbuf_held, bf_list);
  908163:	288c24        	addi	a8, a8, 36
  908166:	2826f1        	s32i	a8, a2, 0x3c4

	sc->sc_txbuf_held = NULL;

	if (sc->sc_txdma.dd_desc_len != 0)
  908169:	2822e7        	l32i	a8, a2, 0x39c
  90816c:	7d8110        	beq	a8, a13, 908180 <ath_desc_free+0x34>
		ath_descdma_cleanup(sc, &sc->sc_txdma, (ath_bufhead *)&sc->sc_txbuf,
  90816f:	2b3a8c        	movi	a11, 0x38c
  908172:	2c3ac0        	movi	a12, 0x3c0
  908175:	da20      	mov.n	a10, a2
  908177:	0b2b08        	add	a11, a2, a11
  90817a:	0c2c08        	add	a12, a2, a12
  90817d:	5bfed2        	call8	907cc8 <ath_descdma_cleanup>
				    ADF_OS_DMA_TO_DEVICE);
	if (sc->sc_rxdma.dd_desc_len != 0)
  908180:	2822e1        	l32i	a8, a2, 0x384
  908183:	c88f      	beqz.n	a8, 908196 <ath_desc_free+0x4a>
		ath_descdma_cleanup(sc, &sc->sc_rxdma, (ath_bufhead *)&sc->sc_rxbuf,
  908185:	2b3a74        	movi	a11, 0x374
  908188:	2c3a54        	movi	a12, 0x354
  90818b:	da20      	mov.n	a10, a2
  90818d:	ab2b      	add.n	a11, a2, a11
  90818f:	ac2c      	add.n	a12, a2, a12
  908191:	c0d1      	movi.n	a13, 1
  908193:	5bfecd        	call8	907cc8 <ath_descdma_cleanup>
  908196:	d10f      	retw.n

00908198 <ath_descdma_setup$constprop$22>:

/***********************/
/* Descriptor Handling */
/***********************/

static a_int32_t ath_descdma_setup(struct ath_softc_tgt *sc,
  908198:	6c1006        	entry	a1, 48
  90819b:	9210      	s32i.n	a2, a1, 0
	a_int32_t i, bsize, error;
	a_uint8_t *bf_addr;
	a_uint8_t *ds_addr;

	dd->dd_name = name;
	dd->dd_desc_len = descSize * nbuf * ndesc;
  90819d:	821c      	l32i.n	a2, a1, 48
adf_os_dmamem_alloc(adf_os_device_t     osdev, 
                    adf_os_size_t       size, 
                    a_bool_t            coherent, 
                    adf_os_dma_map_t   *dmap)
{
    return __adf_os_dmamem_alloc(osdev, size, coherent, dmap);
  90819f:	8810      	l32i.n	a8, a1, 0
  9081a1:	062b28        	mull	a11, a2, a6
  9081a4:	2a8246        	l32i	a10, a8, 0x118
	struct ath_buf *bf;
	a_int32_t i, bsize, error;
	a_uint8_t *bf_addr;
	a_uint8_t *ds_addr;

	dd->dd_name = name;
  9081a7:	9530      	s32i.n	a5, a3, 0
	dd->dd_desc_len = descSize * nbuf * ndesc;
  9081a9:	9b34      	s32i.n	a11, a3, 16
  9081ab:	c0c1      	movi.n	a12, 1
  9081ad:	b83d      	addi.n	a13, a3, 8

/***********************/
/* Descriptor Handling */
/***********************/

static a_int32_t ath_descdma_setup(struct ath_softc_tgt *sc,
  9081af:	271601        	s32i	a7, a1, 4
  9081b2:	580ad5        	call8	90ad08 <__adf_os_dmamem_alloc>
 * @return the (bus) address
 */
static inline adf_os_dma_addr_t
adf_os_dmamem_map2addr(adf_os_dma_map_t dmap)
{
    return(__adf_os_dmamem_map2addr(dmap));
  9081b5:	8532      	l32i.n	a5, a3, 8
	a_uint8_t *ds_addr;

	dd->dd_name = name;
	dd->dd_desc_len = descSize * nbuf * ndesc;

	dd->dd_desc = adf_os_dmamem_alloc(sc->sc_dev,
  9081b7:	9a31      	s32i.n	a10, a3, 4
				  dd->dd_desc_len, 1, &dd->dd_desc_dmamap);
	dd->dd_desc_paddr = adf_os_dmamem_map2addr(dd->dd_desc_dmamap);
  9081b9:	8551      	l32i.n	a5, a5, 4
  9081bb:	9533      	s32i.n	a5, a3, 12
adf_os_dmamem_alloc(adf_os_device_t     osdev, 
                    adf_os_size_t       size, 
                    a_bool_t            coherent, 
                    adf_os_dma_map_t   *dmap)
{
    return __adf_os_dmamem_alloc(osdev, size, coherent, dmap);
  9081bd:	d2a0      	mov.n	a2, a10
	if (dd->dd_desc == NULL) {
  9081bf:	64a05f        	beqz	a10, 908222 <ath_descdma_setup$constprop$22+0x8a>
		error = -ENOMEM;
		goto fail;
	}
	ds = dd->dd_desc;

	bsize = bfSize * nbuf;
  9081c2:	8811      	l32i.n	a8, a1, 4
  9081c4:	068728        	mull	a7, a8, a6
 * @return Buffer pointer or NULL if there's not enough memory.
 */
static inline void *
adf_os_mem_alloc(adf_os_size_t size)
{
    return __adf_os_mem_alloc(size);
  9081c7:	da70      	mov.n	a10, a7
  9081c9:	5bfe64        	call8	907b5c <__adf_os_mem_alloc>
  9081cc:	d5a0      	mov.n	a5, a10
	bf = adf_os_mem_alloc(bsize);
	if (bf == NULL) {
  9081ce:	64a050        	beqz	a10, 908222 <ath_descdma_setup$constprop$22+0x8a>
 * @param[in] size  buffer size
 */
static inline void
adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
    __adf_os_mem_set(buf, b, size);
  9081d1:	dc70      	mov.n	a12, a7
  9081d3:	c0b0      	movi.n	a11, 0
  9081d5:	5bfe6b        	call8	907b84 <__adf_os_mem_set>
	dd->dd_bufptr = bf;

	bf_addr = (a_uint8_t *)bf;
	ds_addr = (a_uint8_t *)ds;

	asf_tailq_init(head);
  9081d8:	c090      	movi.n	a9, 0
	if (bf == NULL) {
		error = -ENOMEM;
		goto fail2;
	}
	adf_os_mem_set(bf, 0, bsize);
	dd->dd_bufptr = bf;
  9081da:	9535      	s32i.n	a5, a3, 20

	bf_addr = (a_uint8_t *)bf;
	ds_addr = (a_uint8_t *)ds;

	asf_tailq_init(head);
  9081dc:	9940      	s32i.n	a9, a4, 0
  9081de:	9441      	s32i.n	a4, a4, 4

	for (i = 0; i < nbuf; i++) {
  9081e0:	d790      	mov.n	a7, a9
  9081e2:	600035        	j	90821b <ath_descdma_setup$constprop$22+0x83>
  9081e5:	008810        	slli	a8, a8, 32
 */
static inline a_status_t
adf_nbuf_dmamap_create(adf_os_device_t osdev,
                       adf_os_dma_map_t *dmap)
{
    return (__adf_nbuf_dmamap_create(osdev, dmap));
  9081e8:	db50      	mov.n	a11, a5
  9081ea:	2a8246        	l32i	a10, a8, 0x118
  9081ed:	5bfa1c        	call8	906a60 <__adf_nbuf_dmamap_create>
  9081f0:	dba0      	mov.n	a11, a10
		a_int32_t j;

		if (adf_nbuf_dmamap_create( sc->sc_dev, &bf->bf_dmamap) != A_STATUS_OK) {
  9081f2:	ceac      	bnez.n	a10, 908222 <ath_descdma_setup$constprop$22+0x8a>
			goto fail2;
		}

		bf->bf_desc = bf->bf_descarr = bf->bf_lastds = ds;
  9081f4:	925c      	s32i.n	a2, a5, 48
  9081f6:	925e      	s32i.n	a2, a5, 56
  9081f8:	925d      	s32i.n	a2, a5, 52
 * @param[in] head  buf queue head
 */
static inline void
adf_nbuf_queue_init(adf_nbuf_queue_t *head)
{
    __adf_nbuf_queue_init(head);
  9081fa:	2a5c14        	addi	a10, a5, 20
  9081fd:	9b12      	s32i.n	a11, a1, 8
  9081ff:	5bfaae        	call8	906cb8 <__adf_nbuf_queue_init>
			ATH_BUF_SET_DESC_PHY_ADDR_WITH_IDX(bf, j, (ds_addr + (j*descSize)));

		ATH_BUF_SET_DESC_PHY_ADDR(bf, ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, 0));

		adf_nbuf_queue_init(&bf->bf_skbhead);
		asf_tailq_insert_tail(head, bf, bf_list);
  908202:	8a41      	l32i.n	a10, a4, 4
  908204:	8b12      	l32i.n	a11, a1, 8

		bf_addr += bfSize;
  908206:	8811      	l32i.n	a8, a1, 4
			ATH_BUF_SET_DESC_PHY_ADDR_WITH_IDX(bf, j, (ds_addr + (j*descSize)));

		ATH_BUF_SET_DESC_PHY_ADDR(bf, ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, 0));

		adf_nbuf_queue_init(&bf->bf_skbhead);
		asf_tailq_insert_tail(head, bf, bf_list);
  908208:	9a5a      	s32i.n	a10, a5, 40
  90820a:	9b59      	s32i.n	a11, a5, 36
  90820c:	95a0      	s32i.n	a5, a10, 0
  90820e:	2a5c24        	addi	a10, a5, 36

		bf_addr += bfSize;
  908211:	a855      	add.n	a5, a5, a8
		ds_addr += (ndesc * descSize);
  908213:	881c      	l32i.n	a8, a1, 48
			ATH_BUF_SET_DESC_PHY_ADDR_WITH_IDX(bf, j, (ds_addr + (j*descSize)));

		ATH_BUF_SET_DESC_PHY_ADDR(bf, ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, 0));

		adf_nbuf_queue_init(&bf->bf_skbhead);
		asf_tailq_insert_tail(head, bf, bf_list);
  908215:	9a41      	s32i.n	a10, a4, 4

		bf_addr += bfSize;
		ds_addr += (ndesc * descSize);
  908217:	a822      	add.n	a2, a2, a8
	bf_addr = (a_uint8_t *)bf;
	ds_addr = (a_uint8_t *)ds;

	asf_tailq_init(head);

	for (i = 0; i < nbuf; i++) {
  908219:	b177      	addi.n	a7, a7, 1
  90821b:	7672c7        	blt	a7, a6, 9081e6 <ath_descdma_setup$constprop$22+0x4e>
		ds_addr += (ndesc * descSize);
		bf = (struct ath_buf *)bf_addr;
		ds = (struct ath_desc *)ds_addr;
	}

	return 0;
  90821e:	c020      	movi.n	a2, 0
  908220:	d10f      	retw.n
  908222:	da30      	mov.n	a10, a3
  908224:	c1c8      	movi.n	a12, 24
  908226:	2b0a00        	movi	a11, 0
  908229:	5bfe56        	call8	907b84 <__adf_os_mem_set>
fail2:
	adf_os_dmamem_free(sc->sc_dev, dd->dd_desc_len,
			   1, dd->dd_desc, dd->dd_desc_dmamap);
fail:
	adf_os_mem_set(dd, 0, sizeof(*dd));
	adf_os_assert(0);
  90822c:	126915        	l32r	a2, 8e2680 <athos_indirection_table_install+0x110c>
  90822f:	1b6a09        	l32r	a11, 8e2a54 <athos_indirection_table_install+0x14e0>
  908232:	222212        	l32i	a2, a2, 72
  908235:	1a69f6        	l32r	a10, 8e2a10 <athos_indirection_table_install+0x149c>
  908238:	0b2000        	callx8	a2
  90823b:	12697a        	l32r	a2, 8e2824 <athos_indirection_table_install+0x12b0>
  90823e:	0c0200        	memw
  908241:	8220      	l32i.n	a2, a2, 0
	return error;
  908243:	c021      	movi.n	a2, 1

#undef DS2PHYS
}
  908245:	d10f      	retw.n
	...

00908248 <tgt_HTCRecvMessageHandler>:
}

static void tgt_HTCRecvMessageHandler(HTC_ENDPOINT_ID EndPt,
				      adf_nbuf_t hdr_buf, adf_nbuf_t buf,
				      void *ServiceCtx)
{
  908248:	6c1006        	entry	a1, 48
	a_uint32_t len;
	ath_data_hdr_t *dh;
	struct ath_node_target *an;
	struct ath_atx_tid *tid;

	if (!hdr_buf) {
  90824b:	cd32      	bnez.n	a3, 908261 <tgt_HTCRecvMessageHandler+0x19>
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90824d:	da40      	mov.n	a10, a4
  90824f:	b41b      	addi.n	a11, a1, 4
  908251:	dc10      	mov.n	a12, a1
  908253:	5bfa93        	call8	906ca0 <__adf_nbuf_peek_header>
 *         or NULL if there is not sufficient data to pull.
 */
static inline a_uint8_t *
adf_nbuf_pull_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_pull_head(buf, size);
  908256:	da40      	mov.n	a10, a4
  908258:	c0bc      	movi.n	a11, 12
  90825a:	5bf9c2        	call8	906964 <__adf_nbuf_pull_head>
  90825d:	600009        	j	90826a <tgt_HTCRecvMessageHandler+0x22>
  908260:	00da30        	excw
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  908263:	b41b      	addi.n	a11, a1, 4
  908265:	dc10      	mov.n	a12, a1
  908267:	5bfa8e        	call8	906ca0 <__adf_nbuf_peek_header>
		adf_nbuf_pull_head(buf, sizeof(ath_data_hdr_t));
	} else {
		adf_nbuf_peek_header(hdr_buf, &data, &len);
	}

	adf_os_assert(len >= sizeof(ath_data_hdr_t));
  90826a:	8310      	l32i.n	a3, a1, 0
  90826c:	c06b      	movi.n	a6, 11
  90826e:	736316        	bltu	a6, a3, 908288 <tgt_HTCRecvMessageHandler+0x40>
  908271:	136915        	l32r	a3, 8e26c8 <athos_indirection_table_install+0x1154>
  908274:	1a69f6        	l32r	a10, 8e2a4c <athos_indirection_table_install+0x14d8>
  908277:	233212        	l32i	a3, a3, 72
  90827a:	1b6a0a        	l32r	a11, 8e2aa4 <athos_indirection_table_install+0x1530>
  90827d:	0b3000        	callx8	a3
  908280:	13697a        	l32r	a3, 8e2868 <athos_indirection_table_install+0x12f4>
  908283:	0c0200        	memw
  908286:	8330      	l32i.n	a3, a3, 0
	dh = (ath_data_hdr_t *)data;
  908288:	8311      	l32i.n	a3, a1, 4
	an = &sc->sc_sta[dh->ni_index];
	tid = ATH_AN_2_TID(an, dh->tidno);

	sc->sc_tx_stats.tx_tgt++;

	bf = ath_tgt_tx_prepare(sc, buf, dh);
  90828a:	db40      	mov.n	a11, a4
	}

	adf_os_assert(len >= sizeof(ath_data_hdr_t));
	dh = (ath_data_hdr_t *)data;

	an = &sc->sc_sta[dh->ni_index];
  90828c:	283001        	l8ui	a8, a3, 1
	tid = ATH_AN_2_TID(an, dh->tidno);
  90828f:	293003        	l8ui	a9, a3, 3
	}

	adf_os_assert(len >= sizeof(ath_data_hdr_t));
	dh = (ath_data_hdr_t *)data;

	an = &sc->sc_sta[dh->ni_index];
  908292:	0a8611        	slli	a6, a8, 6
  908295:	a866      	add.n	a6, a6, a8
  908297:	086809        	addx2	a8, a6, a8
  90829a:	265a30        	movi	a6, 0x530
  90829d:	06880a        	addx4	a8, a8, a6
	tid = ATH_AN_2_TID(an, dh->tidno);
  9082a0:	0c9611        	slli	a6, a9, 4
	}

	adf_os_assert(len >= sizeof(ath_data_hdr_t));
	dh = (ath_data_hdr_t *)data;

	an = &sc->sc_sta[dh->ni_index];
  9082a3:	a858      	add.n	a8, a5, a8
	tid = ATH_AN_2_TID(an, dh->tidno);
  9082a5:	09660c        	sub	a6, a6, a9
  9082a8:	08660a        	addx4	a6, a6, a8

	sc->sc_tx_stats.tx_tgt++;
  9082ab:	28525b        	l32i	a8, a5, 0x16c

	bf = ath_tgt_tx_prepare(sc, buf, dh);
  9082ae:	da50      	mov.n	a10, a5
	dh = (ath_data_hdr_t *)data;

	an = &sc->sc_sta[dh->ni_index];
	tid = ATH_AN_2_TID(an, dh->tidno);

	sc->sc_tx_stats.tx_tgt++;
  9082b0:	288c01        	addi	a8, a8, 1
  9082b3:	28565b        	s32i	a8, a5, 0x16c

	bf = ath_tgt_tx_prepare(sc, buf, dh);
  9082b6:	033c02        	or	a12, a3, a3
  9082b9:	58162b        	call8	90db68 <ath_tgt_tx_prepare>

	adf_os_assert(len >= sizeof(ath_data_hdr_t));
	dh = (ath_data_hdr_t *)data;

	an = &sc->sc_sta[dh->ni_index];
	tid = ATH_AN_2_TID(an, dh->tidno);
  9082bc:	266c2c        	addi	a6, a6, 44

	sc->sc_tx_stats.tx_tgt++;

	bf = ath_tgt_tx_prepare(sc, buf, dh);
  9082bf:	dba0      	mov.n	a11, a10
	if (!bf) {
  9082c1:	ccaf      	bnez.n	a10, 9082d4 <tgt_HTCRecvMessageHandler+0x8c>
		ath_free_tx_skb(sc->tgt_htc_handle,EndPt,buf);
  9082c3:	136915        	l32r	a3, 8e2718 <athos_indirection_table_install+0x11a4>
  9082c6:	8a52      	l32i.n	a10, a5, 8
  9082c8:	233282        	l32i	a3, a3, 0x208
  9082cb:	db20      	mov.n	a11, a2
  9082cd:	dc40      	mov.n	a12, a4
  9082cf:	0b3000        	callx8	a3
  9082d2:	d10f      	retw.n
		return;
	}

	bf->bf_endpt = EndPt;
  9082d4:	22a623        	s32i	a2, a10, 140
	bf->bf_cookie = dh->cookie;
  9082d7:	22300a        	l8ui	a2, a3, 10
  9082da:	22a492        	s8i	a2, a10, 146

	if (tid->flag & TID_AGGR_ENABLED)
  9082dd:	226036        	l8ui	a2, a6, 54
		ath_tgt_handle_aggr(sc, bf);
  9082e0:	da50      	mov.n	a10, a5
	}

	bf->bf_endpt = EndPt;
	bf->bf_cookie = dh->cookie;

	if (tid->flag & TID_AGGR_ENABLED)
  9082e2:	7e2707        	bbci	a2, 30, 9082ed <tgt_HTCRecvMessageHandler+0xa5>
		ath_tgt_handle_aggr(sc, bf);
  9082e5:	581a81        	call8	90ecec <ath_tgt_handle_aggr>
  9082e8:	d10f      	retw.n
  9082ea:	000000        	ill
	else
		ath_tgt_handle_normal(sc, bf);
  9082ed:	5817e2        	call8	90e278 <ath_tgt_handle_normal>
  9082f0:	d10f      	retw.n
	...

009082f4 <tgt_HTCRecv_cabhandler>:
}

static void tgt_HTCRecv_cabhandler(HTC_ENDPOINT_ID EndPt, adf_nbuf_t hdr_buf,
				   adf_nbuf_t buf, void *ServiceCtx)
{
  9082f4:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)ServiceCtx;
	struct ath_hal *ah = sc->sc_ah;
  9082f7:	285d05        	addmi	a8, a5, 0x500
  9082fa:	8a8b      	l32i.n	a10, a8, 44
	a_uint64_t tsf;
	a_uint32_t tmp;

#ifdef ATH_ENABLE_CABQ
	tsf = ah->ah_getTsf64(ah);
  9082fc:	28a21e        	l32i	a8, a10, 120
  9082ff:	0b8000        	callx8	a8
	tmp = tsf - sc->sc_swba_tsf;
  908302:	285d16        	addmi	a8, a5, 0x1600
  908305:	888d      	l32i.n	a8, a8, 52

	if ( tmp > ATH_CABQ_HANDLING_THRESHOLD ) {
  908307:	196a0b        	l32r	a9, 8e2b34 <athos_indirection_table_install+0x15c0>
	a_uint64_t tsf;
	a_uint32_t tmp;

#ifdef ATH_ENABLE_CABQ
	tsf = ah->ah_getTsf64(ah);
	tmp = tsf - sc->sc_swba_tsf;
  90830a:	08bb0c        	sub	a11, a11, a8

	if ( tmp > ATH_CABQ_HANDLING_THRESHOLD ) {
  90830d:	7b9b11        	bgeu	a9, a11, 908322 <tgt_HTCRecv_cabhandler+0x2e>
		HTC_ReturnBuffers(sc->tgt_htc_handle, EndPt, buf);
  908310:	136915        	l32r	a3, 8e2764 <athos_indirection_table_install+0x11f0>
  908313:	8a52      	l32i.n	a10, a5, 8
  908315:	233282        	l32i	a3, a3, 0x208
  908318:	db20      	mov.n	a11, a2
  90831a:	044c02        	or	a12, a4, a4
  90831d:	0b3000        	callx8	a3
  908320:	d10f      	retw.n
		return;
	}

	tgt_HTCRecvMessageHandler(EndPt, hdr_buf, buf, ServiceCtx);
  908322:	da20      	mov.n	a10, a2
  908324:	db30      	mov.n	a11, a3
  908326:	dc40      	mov.n	a12, a4
  908328:	dd50      	mov.n	a13, a5
  90832a:	5bffc7        	call8	908248 <tgt_HTCRecvMessageHandler>
  90832d:	d10f      	retw.n
	...

00908330 <wmi_event>:

}

void wmi_event(wmi_handle_t handle, WMI_EVENT_ID evt_id,
	       void *buffer, a_int32_t Length)
{
  908330:	6c1004        	entry	a1, 32
	adf_nbuf_t netbuf = ADF_NBUF_NULL;
	a_uint8_t *pData;

	netbuf = WMI_AllocEvent(handle, WMI_EVT_CLASS_CMD_EVENT,
  908333:	176915        	l32r	a7, 8e2788 <athos_indirection_table_install+0x1214>
  908336:	da20      	mov.n	a10, a2
  908338:	26728d        	l32i	a6, a7, 0x234
  90833b:	c0b0      	movi.n	a11, 0
  90833d:	b45c      	addi.n	a12, a5, 4
  90833f:	0b6000        	callx8	a6
  908342:	d6a0      	mov.n	a6, a10
				sizeof(WMI_CMD_HDR) + Length);

	if (netbuf == ADF_NBUF_NULL) {
  908344:	65a00a        	bnez	a10, 908352 <wmi_event+0x22>
		adf_os_print("Buf null\n");
  908347:	227212        	l32i	a2, a7, 72
  90834a:	1a6a0c        	l32r	a10, 8e2b7c <athos_indirection_table_install+0x1608>
  90834d:	0b2000        	callx8	a2
  908350:	d10f      	retw.n
		return;
	}

	if (buffer != NULL && Length != 0 && Length < WMI_SVC_MAX_BUFFERED_EVENT_SIZE) {
  908352:	c952      	beqz.n	a5, 908368 <wmi_event+0x38>
  908354:	c940      	beqz.n	a4, 908368 <wmi_event+0x38>
  908356:	270a63        	movi	a7, 99
  908359:	75720b        	blt	a7, a5, 908368 <wmi_event+0x38>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  90835c:	db50      	mov.n	a11, a5
  90835e:	5bfa34        	call8	906c30 <__adf_nbuf_put_tail>
 * @param[in] size    buffer size
 */
static inline void
adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    __adf_os_mem_copy(dst, src, size);
  908361:	db40      	mov.n	a11, a4
  908363:	dc50      	mov.n	a12, a5
  908365:	5bfe02        	call8	907b70 <__adf_os_mem_copy>
		pData = adf_nbuf_put_tail(netbuf, Length);
		adf_os_mem_copy(pData, buffer, Length);
	}

	WMI_SendEvent(handle, netbuf, evt_id, 0, Length);
  908368:	146915        	l32r	a4, 8e27bc <athos_indirection_table_install+0x1248>
  90836b:	da20      	mov.n	a10, a2
  90836d:	24428e        	l32i	a4, a4, 0x238
  908370:	db60      	mov.n	a11, a6
  908372:	030c4f        	extui	a12, a3, 0, 16
  908375:	c0d0      	movi.n	a13, 0
  908377:	de50      	mov.n	a14, a5
  908379:	0b4000        	callx8	a4
  90837c:	d10f      	retw.n
	...

00908380 <ath_fatal_tasklet>:

	return ADF_OS_IRQ_HANDLED;
}

static void ath_fatal_tasklet(TQUEUE_ARG data )
{
  908380:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)data;

	wmi_event(sc->tgt_wmi_handle, WMI_FATAL_EVENTID, NULL, 0);
  908383:	c0c0      	movi.n	a12, 0
  908385:	8a23      	l32i.n	a10, a2, 12
  908387:	1b6a0d        	l32r	a11, 8e2bbc <athos_indirection_table_install+0x1648>
  90838a:	0ccd02        	or	a13, a12, a12
  90838d:	5bffe8        	call8	908330 <wmi_event>
  908390:	d10f      	retw.n
	...

00908394 <ath_bmiss_tasklet>:
}

static void ath_bmiss_tasklet(TQUEUE_ARG data)
{
  908394:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)data;

	wmi_event(sc->tgt_wmi_handle, WMI_BMISS_EVENTID, NULL, 0);
  908397:	c0c0      	movi.n	a12, 0
  908399:	8a23      	l32i.n	a10, a2, 12
  90839b:	1b6a0e        	l32r	a11, 8e2bd4 <athos_indirection_table_install+0x1660>
  90839e:	0ccd02        	or	a13, a12, a12
  9083a1:	5bffe3        	call8	908330 <wmi_event>
  9083a4:	d10f      	retw.n
	...

009083a8 <ath_intr>:
/**********************/
/* Interrupt Handling */
/**********************/

adf_os_irq_resp_t ath_intr(adf_drv_handle_t hdl)
{
  9083a8:	6c100c        	entry	a1, 96
  9083ab:	d320      	mov.n	a3, a2
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)hdl;
	struct ath_hal *ah = sc->sc_ah;
  9083ad:	222d05        	addmi	a2, a2, 0x500
  9083b0:	822b      	l32i.n	a2, a2, 44
  9083b2:	9218      	s32i.n	a2, a1, 32
	HAL_INT status;

	if (sc->sc_invalid)
  9083b4:	243249        	l32i	a4, a3, 0x124
  9083b7:	126a0f        	l32r	a2, 8e2bf4 <athos_indirection_table_install+0x1680>
  9083ba:	024401        	and	a4, a4, a2
  9083bd:	644005        	beqz	a4, 9083c6 <ath_intr+0x1e>
		return ADF_OS_IRQ_NONE;
  9083c0:	c020      	movi.n	a2, 0
  9083c2:	d10f      	retw.n
  9083c4:	000085        	excw

	if (!ah->ah_isInterruptPending(ah))
  9083c7:	182252        	l32r	a8, 8d0d10 <_bss_end+0x3bde00>
  9083ca:	26da50        	movi	a6, 0xfffffd50
  9083cd:	0b2000        	callx8	a2
  9083d0:	64afec        	beqz	a10, 9083c0 <ath_intr+0x18>
		return ADF_OS_IRQ_NONE;

	ah->ah_getPendingInterrupts(ah, &status);
  9083d3:	225227        	l32i	a2, a5, 156
  9083d6:	8a18      	l32i.n	a10, a1, 32
  9083d8:	2b1c18        	addi	a11, a1, 24
  9083db:	0b2000        	callx8	a2

	status &= sc->sc_imask;
  9083de:	8216      	l32i.n	a2, a1, 24
  9083e0:	2532c4        	l32i	a5, a3, 0x310
  9083e3:	025201        	and	a2, a5, a2
  9083e6:	9216      	s32i.n	a2, a1, 24

	if (status & HAL_INT_FATAL) {
  9083e8:	712619        	bbci	a2, 1, 908405 <ath_intr+0x5d>
		ah->ah_setInterrupts(ah, 0);
  9083eb:	8918      	l32i.n	a9, a1, 32
  9083ed:	db40      	mov.n	a11, a4
  9083ef:	229228        	l32i	a2, a9, 160
  9083f2:	099a02        	or	a10, a9, a9
  9083f5:	0b2000        	callx8	a2
 * @param[in] bh    bottom instance
 */
static inline void 
adf_os_sched_bh(adf_os_handle_t hdl, adf_os_bh_t *bh)
{
    __adf_os_sched_bh(hdl, bh);
  9083f8:	2a3a44        	movi	a10, 0x344
  9083fb:	aa3a      	add.n	a10, a3, a10
  9083fd:	5bfe5d        	call8	907d74 <__adf_os_sched_bh$isra$5>

		if (status & HAL_INT_CST)
			sc->sc_int_stats.ast_cst++;
	}

	return ADF_OS_IRQ_HANDLED;
  908400:	c021      	movi.n	a2, 1
  908402:	d10f      	retw.n
  908404:	007f26        	excw

	if (status & HAL_INT_FATAL) {
		ah->ah_setInterrupts(ah, 0);
		ATH_SCHEDULE_TQUEUE(sc->sc_dev, &sc->sc_fataltq);
	} else {
		if (status & HAL_INT_SWBA) {
  908407:	478418        	excw
			WMI_SWBA_EVENT swbaEvt;
			struct ath_txq *txq = ATH_TXQ(sc, 8);

			swbaEvt.tsf = ah->ah_getTsf64(ah);
  90840a:	22421e        	l32i	a2, a4, 120
  90840d:	da40      	mov.n	a10, a4
  90840f:	0b2000        	callx8	a2
			swbaEvt.beaconPendingCount = ah->ah_numTxPending(ah, sc->sc_bhalq);
  908412:	8518      	l32i.n	a5, a1, 32
	} else {
		if (status & HAL_INT_SWBA) {
			WMI_SWBA_EVENT swbaEvt;
			struct ath_txq *txq = ATH_TXQ(sc, 8);

			swbaEvt.tsf = ah->ah_getTsf64(ah);
  908414:	9a13      	s32i.n	a10, a1, 12
  908416:	9b14      	s32i.n	a11, a1, 16
			swbaEvt.beaconPendingCount = ah->ah_numTxPending(ah, sc->sc_bhalq);
  908418:	243d01        	addmi	a4, a3, 0x100
  90841b:	825b      	l32i.n	a2, a5, 44
  90841d:	2b401c        	l8ui	a11, a4, 28
  908420:	da50      	mov.n	a10, a5
  908422:	0b2000        	callx8	a2
  908425:	2a1414        	s8i	a10, a1, 20
			sc->sc_swba_tsf = ah->ah_getTsf64(ah);
  908428:	22521e        	l32i	a2, a5, 120
  90842b:	2a1208        	l32i	a10, a1, 32
  90842e:	0b2000        	callx8	a2
  908431:	223d16        	addmi	a2, a3, 0x1600
  908434:	9a2c      	s32i.n	a10, a2, 48
  908436:	9b2d      	s32i.n	a11, a2, 52

			wmi_event(sc->tgt_wmi_handle,
  908438:	8a33      	l32i.n	a10, a3, 12
  90843a:	1b6a10        	l32r	a11, 8e2c7c <athos_indirection_table_install+0x1708>
  90843d:	bc1c      	addi.n	a12, a1, 12
  90843f:	c0d9      	movi.n	a13, 9
  908441:	5bffbb        	call8	908330 <wmi_event>
	ah->ah_stopTxDma(ah, txq->axq_qnum);
}

static void owltgt_txq_drain(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	owltgt_tx_processq(sc, txq, OWL_TXQ_STOPPED);
  908444:	2b4acc        	movi	a11, 0x4cc
  908447:	da30      	mov.n	a10, a3
  908449:	ab3b      	add.n	a11, a3, a11
  90844b:	c0c1      	movi.n	a12, 1
  90844d:	5819e4        	call8	90ebe0 <owltgt_tx_processq>
				  sizeof(WMI_SWBA_EVENT));

			ath_tx_draintxq(sc, txq);
		}

		if (status & HAL_INT_RXORN)
  908450:	8216      	l32i.n	a2, a1, 24
  908452:	7a2707        	bbci	a2, 26, 90845d <ath_intr+0xb5>
			sc->sc_int_stats.ast_rxorn++;
  908455:	24324d        	l32i	a4, a3, 0x134
  908458:	b144      	addi.n	a4, a4, 1
  90845a:	24364d        	s32i	a4, a3, 0x134

		if (status & HAL_INT_RXEOL)
  90845d:	7b2708        	bbci	a2, 27, 908469 <ath_intr+0xc1>
			sc->sc_int_stats.ast_rxeol++;
  908460:	24324e        	l32i	a4, a3, 0x138
  908463:	244c01        	addi	a4, a4, 1
  908466:	24364e        	s32i	a4, a3, 0x138

		if (status & (HAL_INT_RX | HAL_INT_RXEOL | HAL_INT_RXORN)) {
  908469:	c341      	movi.n	a4, 49
  90846b:	742802        	bany	a2, a4, 908471 <ath_intr+0xc9>
  90846e:	60062a        	j	908a9c <ath_intr+0x6f4>
			if (status & HAL_INT_RX)
  908471:	7f2707        	bbci	a2, 31, 90847c <ath_intr+0xd4>
				sc->sc_int_stats.ast_rx++;
  908474:	22324c        	l32i	a2, a3, 0x130
  908477:	b122      	addi.n	a2, a2, 1
  908479:	22364c        	s32i	a2, a3, 0x130
	}
}

static void ath_uapsd_processtriggers(struct ath_softc_tgt *sc)
{
	struct ath_hal *ah = sc->sc_ah;
  90847c:	223d05        	addmi	a2, a3, 0x500
  90847f:	862b      	l32i.n	a6, a2, 44

#define	PA2DESC(_sc, _pa)						\
	((struct ath_desc *)((caddr_t)(_sc)->sc_rxdma.dd_desc +		\
			     ((_pa) - (_sc)->sc_rxdma.dd_desc_paddr)))

	tsf = ah->ah_getTsf64(ah);
  908481:	22621e        	l32i	a2, a6, 120
  908484:	da60      	mov.n	a10, a6
  908486:	0b2000        	callx8	a2
	bf = asf_tailq_first(&sc->sc_rxbuf);

	ds = asf_tailq_first(&sc->sc_rxdesc);
  908489:	2f32d9        	l32i	a15, a3, 0x364
#define	PA2DESC(_sc, _pa)						\
	((struct ath_desc *)((caddr_t)(_sc)->sc_rxdma.dd_desc +		\
			     ((_pa) - (_sc)->sc_rxdma.dd_desc_paddr)))

	tsf = ah->ah_getTsf64(ah);
	bf = asf_tailq_first(&sc->sc_rxbuf);
  90848c:	2432d5        	l32i	a4, a3, 0x354

	ds = asf_tailq_first(&sc->sc_rxdesc);
	ds_head = ds;
  90848f:	d8f0      	mov.n	a8, a15
  908491:	6005d2        	j	908a67 <ath_intr+0x6bf>
  908494:	00196a        	excw

	while(ds) {
		++cnt;

		if (cnt == ath_numrxbufs - 1) {
  908497:	11b177        	l32r	a1, 8f4a74 <memset+0xdc2c>
  90849a:	8290      	l32i.n	a2, a9, 0
  90849c:	b022      	addi.n	a2, a2, -1
  90849e:	727102        	beq	a7, a2, 9084a4 <ath_intr+0xfc>
  9084a1:	600268        	j	90870d <ath_intr+0x365>
			adf_os_print("VERY LONG PACKET!!!!!\n");
  9084a4:	126915        	l32r	a2, 8e28f8 <athos_indirection_table_install+0x1384>
  9084a7:	1a6a12        	l32r	a10, 8e2cf0 <athos_indirection_table_install+0x177c>
  9084aa:	242212        	l32i	a4, a2, 72
  9084ad:	981c      	s32i.n	a8, a1, 48
  9084af:	9f1b      	s32i.n	a15, a1, 44
  9084b1:	0b4000        	callx8	a4
  9084b4:	881c      	l32i.n	a8, a1, 48
  9084b6:	8f1b      	l32i.n	a15, a1, 44
  9084b8:	60024a        	j	908706 <ath_intr+0x35e>
  9084bb:	002680        	excw
			ds_tail = ds;
			ds_tmp = ds_head;
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;
				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
  9084be:	382580        	excw
  9084c1:	392480        	excw
  9084c4:	3a0866        	excw
  9084c7:	100055        	l32r	a0, 8c861c <_bss_end+0x3b570c>
  9084ca:	112b80        	l32r	a1, 8d32cc <_bss_end+0x3c03bc>
  9084cd:	3b0655        	excw
  9084d0:	020844        	extui	a8, a2, 0, 5
  9084d3:	110544        	l32r	a1, 8c99e4 <_bss_end+0x3b6ad4>
  9084d6:	022a32        	sext	a10, a2, 9
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  9084d9:	4604bb        	excw
  9084dc:	02c0c1        	excw
  9084df:	981c      	s32i.n	a8, a1, 48
  9084e1:	9f1b      	s32i.n	a15, a1, 44
  9084e3:	5bf969        	call8	906a88 <__adf_nbuf_unmap>
				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  9084e6:	881c      	l32i.n	a8, a1, 48

				if (ds_tmp == NULL) {
  9084e8:	8f1b      	l32i.n	a15, a1, 44
			ds_tmp = ds_head;
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;
				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  9084ea:	26804c        	l8ui	a6, a8, 76
  9084ed:	25804d        	l8ui	a5, a8, 77
  9084f0:	24804e        	l8ui	a4, a8, 78
  9084f3:	086610        	slli	a6, a6, 24
  9084f6:	005511        	slli	a5, a5, 16
  9084f9:	065502        	or	a5, a5, a6
  9084fc:	084411        	slli	a4, a4, 8
  9084ff:	054402        	or	a4, a4, a5
  908502:	25804f        	l8ui	a5, a8, 79
  908505:	045402        	or	a4, a5, a4

				if (ds_tmp == NULL) {
  908508:	654021        	bnez	a4, 90852d <ath_intr+0x185>
					adf_os_print("ds_tmp is NULL\n");
  90850b:	252212        	l32i	a5, a2, 72
  90850e:	1a6a13        	l32r	a10, 8e2d5c <athos_indirection_table_install+0x17e8>
  908511:	0b5000        	callx8	a5
					adf_os_assert(0);
  908514:	1a69f6        	l32r	a10, 8e2cec <athos_indirection_table_install+0x1778>
  908517:	252212        	l32i	a5, a2, 72
  90851a:	1b6a14        	l32r	a11, 8e2d6c <athos_indirection_table_install+0x17f8>
  90851d:	0b5000        	callx8	a5
  908520:	15697a        	l32r	a5, 8e2b08 <athos_indirection_table_install+0x1594>
  908523:	8f1b      	l32i.n	a15, a1, 44
  908525:	0c0200        	memw
  908528:	8550      	l32i.n	a5, a5, 0
  90852a:	28120c        	l32i	a8, a1, 48
				}

				BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ds_rmv->ds_nbuf);
  90852d:	278034        	l8ui	a7, a8, 52
  908530:	258035        	l8ui	a5, a8, 53
  908533:	268036        	l8ui	a6, a8, 54
  908536:	087710        	slli	a7, a7, 24
  908539:	005511        	slli	a5, a5, 16
  90853c:	075502        	or	a5, a5, a7
  90853f:	086611        	slli	a6, a6, 8
  908542:	056602        	or	a6, a6, a5
  908545:	156915        	l32r	a5, 8e299c <athos_indirection_table_install+0x1428>
  908548:	2c8037        	l8ui	a12, a8, 55
  90854b:	25529e        	l32i	a5, a5, 0x278
  90854e:	8a30      	l32i.n	a10, a3, 0
  908550:	06cc02        	or	a12, a12, a6
  908553:	9f1b      	s32i.n	a15, a1, 44
  908555:	c0b3      	movi.n	a11, 3
  908557:	981c      	s32i.n	a8, a1, 48
  908559:	0b5000        	callx8	a5
				ds_rmv->ds_nbuf = ADF_NBUF_NULL;
  90855c:	881c      	l32i.n	a8, a1, 48
  90855e:	c050      	movi.n	a5, 0
  908560:	258434        	s8i	a5, a8, 52
  908563:	258435        	s8i	a5, a8, 53
  908566:	258436        	s8i	a5, a8, 54
  908569:	258437        	s8i	a5, a8, 55

				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  90856c:	db80      	mov.n	a11, a8
  90856e:	da30      	mov.n	a10, a3
  908570:	981c      	s32i.n	a8, a1, 48
  908572:	5bfe04        	call8	907d84 <ath_rxdesc_init>
  908575:	881c      	l32i.n	a8, a1, 48
  908577:	8f1b      	l32i.n	a15, a1, 44
  908579:	25804c        	l8ui	a5, a8, 76
  90857c:	26804d        	l8ui	a6, a8, 77
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  90857f:	085510        	slli	a5, a5, 24
  908582:	006611        	slli	a6, a6, 16
  908585:	056602        	or	a6, a6, a5
  908588:	25804e        	l8ui	a5, a8, 78
  90858b:	278051        	l8ui	a7, a8, 81
  90858e:	085511        	slli	a5, a5, 8
  908591:	065502        	or	a5, a5, a6
  908594:	26804f        	l8ui	a6, a8, 79
  908597:	007711        	slli	a7, a7, 16
  90859a:	056502        	or	a5, a6, a5
  90859d:	268050        	l8ui	a6, a8, 80
  9085a0:	086610        	slli	a6, a6, 24
  9085a3:	067702        	or	a7, a7, a6
  9085a6:	268052        	l8ui	a6, a8, 82
  9085a9:	086611        	slli	a6, a6, 8
  9085ac:	076602        	or	a6, a6, a7
				}

				BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ds_rmv->ds_nbuf);
				ds_rmv->ds_nbuf = ADF_NBUF_NULL;

				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  9085af:	65a099        	bnez	a10, 90864c <ath_intr+0x2a4>
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  9085b2:	c95e      	beqz.n	a5, 9085d4 <ath_intr+0x22c>
  9085b4:	278053        	l8ui	a7, a8, 83
  9085b7:	067602        	or	a6, a7, a6
  9085ba:	068757        	extui	a7, a6, 24, 8
  9085bd:	275450        	s8i	a7, a5, 80
  9085c0:	060757        	extui	a7, a6, 16, 8
  9085c3:	275451        	s8i	a7, a5, 81
  9085c6:	068747        	extui	a7, a6, 8, 8
  9085c9:	275452        	s8i	a7, a5, 82
  9085cc:	265453        	s8i	a6, a5, 83
  9085cf:	60000a        	j	9085dd <ath_intr+0x235>
  9085d2:	000025        	excw
  9085d5:	8053      	l32i.n	a0, a5, 12
  9085d7:	065602        	or	a6, a5, a6
  9085da:	2636da        	s32i	a6, a3, 0x368
  9085dd:	278050        	l8ui	a7, a8, 80
  9085e0:	268051        	l8ui	a6, a8, 81
  9085e3:	258052        	l8ui	a5, a8, 82
  9085e6:	087710        	slli	a7, a7, 24
  9085e9:	006611        	slli	a6, a6, 16
  9085ec:	076602        	or	a6, a6, a7
  9085ef:	085511        	slli	a5, a5, 8
  9085f2:	065502        	or	a5, a5, a6
  9085f5:	268053        	l8ui	a6, a8, 83
  9085f8:	2a804c        	l8ui	a10, a8, 76
  9085fb:	27804d        	l8ui	a7, a8, 77
  9085fe:	056502        	or	a5, a6, a5
  908601:	26804e        	l8ui	a6, a8, 78
  908604:	08aa10        	slli	a10, a10, 24
  908607:	007711        	slli	a7, a7, 16
  90860a:	0a7702        	or	a7, a7, a10
  90860d:	086611        	slli	a6, a6, 8
  908610:	076602        	or	a6, a6, a7
  908613:	27804f        	l8ui	a7, a8, 79
  908616:	067602        	or	a6, a7, a6
  908619:	9650      	s32i.n	a6, a5, 0
					asf_tailq_insert_tail(&sc->sc_rxdesc, ds_rmv, ds_list);
  90861b:	c050      	movi.n	a5, 0
  90861d:	25844c        	s8i	a5, a8, 76
  908620:	25844d        	s8i	a5, a8, 77
  908623:	25844e        	s8i	a5, a8, 78
  908626:	25844f        	s8i	a5, a8, 79
  908629:	2532da        	l32i	a5, a3, 0x368
  90862c:	058657        	extui	a6, a5, 24, 8
  90862f:	268450        	s8i	a6, a8, 80
  908632:	050657        	extui	a6, a5, 16, 8
  908635:	268451        	s8i	a6, a8, 81
  908638:	058647        	extui	a6, a5, 8, 8
  90863b:	258453        	s8i	a5, a8, 83
  90863e:	268452        	s8i	a6, a8, 82
  908641:	9850      	s32i.n	a8, a5, 0
  908643:	258c4c        	addi	a5, a8, 76
  908646:	2536da        	s32i	a5, a3, 0x368
  908649:	600094        	j	9086e1 <ath_intr+0x339>
				}
				else {
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  90864c:	c95c      	beqz.n	a5, 90866c <ath_intr+0x2c4>
  90864e:	278053        	l8ui	a7, a8, 83
  908651:	067602        	or	a6, a7, a6
  908654:	068757        	extui	a7, a6, 24, 8
  908657:	275450        	s8i	a7, a5, 80
  90865a:	060757        	extui	a7, a6, 16, 8
  90865d:	275451        	s8i	a7, a5, 81
  908660:	068747        	extui	a7, a6, 8, 8
  908663:	275452        	s8i	a7, a5, 82
  908666:	265453        	s8i	a6, a5, 83
  908669:	600008        	j	908675 <ath_intr+0x2cd>
  90866c:	258053        	l8ui	a5, a8, 83
  90866f:	065602        	or	a6, a5, a6
  908672:	2636da        	s32i	a6, a3, 0x368
  908675:	278050        	l8ui	a7, a8, 80
  908678:	268051        	l8ui	a6, a8, 81
  90867b:	258052        	l8ui	a5, a8, 82
  90867e:	087710        	slli	a7, a7, 24
  908681:	006611        	slli	a6, a6, 16
  908684:	076602        	or	a6, a6, a7
  908687:	085511        	slli	a5, a5, 8
  90868a:	065502        	or	a5, a5, a6
  90868d:	268053        	l8ui	a6, a8, 83
  908690:	2a804c        	l8ui	a10, a8, 76
  908693:	27804d        	l8ui	a7, a8, 77
  908696:	056502        	or	a5, a6, a5
  908699:	26804e        	l8ui	a6, a8, 78
  90869c:	08aa10        	slli	a10, a10, 24
  90869f:	007711        	slli	a7, a7, 16
  9086a2:	0a7702        	or	a7, a7, a10
  9086a5:	086611        	slli	a6, a6, 8
  9086a8:	076602        	or	a6, a6, a7
  9086ab:	27804f        	l8ui	a7, a8, 79
  9086ae:	067602        	or	a6, a7, a6
  9086b1:	9650      	s32i.n	a6, a5, 0
					asf_tailq_insert_tail(&sc->sc_rxdesc_idle, ds_rmv, ds_list);
  9086b3:	c050      	movi.n	a5, 0
  9086b5:	25844c        	s8i	a5, a8, 76
  9086b8:	25844d        	s8i	a5, a8, 77
  9086bb:	25844e        	s8i	a5, a8, 78
  9086be:	25844f        	s8i	a5, a8, 79
  9086c1:	2532d8        	l32i	a5, a3, 0x360
  9086c4:	058657        	extui	a6, a5, 24, 8
  9086c7:	268450        	s8i	a6, a8, 80
  9086ca:	050657        	extui	a6, a5, 16, 8
  9086cd:	268451        	s8i	a6, a8, 81
  9086d0:	058647        	extui	a6, a5, 8, 8
  9086d3:	258453        	s8i	a5, a8, 83
  9086d6:	268452        	s8i	a6, a8, 82
  9086d9:	9850      	s32i.n	a8, a5, 0
  9086db:	258c4c        	addi	a5, a8, 76
  9086de:	2536d8        	s32i	a5, a3, 0x360
				}

				if (ds_rmv == ds_tail) {
  9086e1:	7f891f        	bne	a8, a15, 908704 <ath_intr+0x35c>
			if (status & HAL_INT_RX)
				sc->sc_int_stats.ast_rx++;

			ath_uapsd_processtriggers(sc);

			sc->sc_imask &= ~HAL_INT_RX;
  9086e4:	2232c4        	l32i	a2, a3, 0x310
			ah->ah_setInterrupts(ah, sc->sc_imask);
  9086e7:	8418      	l32i.n	a4, a1, 32
			if (status & HAL_INT_RX)
				sc->sc_int_stats.ast_rx++;

			ath_uapsd_processtriggers(sc);

			sc->sc_imask &= ~HAL_INT_RX;
  9086e9:	c7be      	movi.n	a11, -2
  9086eb:	02bb01        	and	a11, a11, a2
			ah->ah_setInterrupts(ah, sc->sc_imask);
  9086ee:	224228        	l32i	a2, a4, 160
			if (status & HAL_INT_RX)
				sc->sc_int_stats.ast_rx++;

			ath_uapsd_processtriggers(sc);

			sc->sc_imask &= ~HAL_INT_RX;
  9086f1:	2b36c4        	s32i	a11, a3, 0x310
			ah->ah_setInterrupts(ah, sc->sc_imask);
  9086f4:	da40      	mov.n	a10, a4
  9086f6:	0b2000        	callx8	a2
  9086f9:	2a3a14        	movi	a10, 0x314
  9086fc:	aa3a      	add.n	a10, a3, a10
  9086fe:	5bfd9d        	call8	907d74 <__adf_os_sched_bh$isra$5>
  908701:	600397        	j	908a9c <ath_intr+0x6f4>
			ds_tmp = ds_head;
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;
				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  908704:	d840      	mov.n	a8, a4

		if (cnt == ath_numrxbufs - 1) {
			adf_os_print("VERY LONG PACKET!!!!!\n");
			ds_tail = ds;
			ds_tmp = ds_head;
			while (ds_tmp) {
  908706:	658db2        	bnez	a8, 9084bc <ath_intr+0x114>
  908709:	63ffd7        	j	9086e4 <ath_intr+0x33c>
  90870c:	002af0        	excw
				}
			}
			break;
		}

		if (ds->ds_link == 0) {
  90870f:	0022f0        	excw
  908712:	012ef0        	excw
  908715:	0208aa        	excw
  908718:	100022        	l32r	a0, 8c87a0 <_bss_end+0x3b5890>
  90871b:	110a22        	l32r	a1, 8cafa4 <_bss_end+0x3b8094>
  90871e:	0208ee        	excw
  908721:	1102ee        	l32r	a1, 8c92dc <_bss_end+0x3b63cc>
  908724:	0222f0        	excw
  908727:	030e2e        	excw
  90872a:	0264ef        	excw
  90872d:	b582      	addi.n	a2, a8, 5
			break;
		}

		if (bf->bf_status & ATH_BUFSTATUS_DONE) {
  90872f:	4f7f27        	excw
  908732:	026003        	xor	a0, a6, a2
  908735:	5f2af0        	call12	8d32f8 <_bss_end+0x3c03e8>
			continue;
		}

		retval = ah->ah_procRxDescFast(ah, ds, ds->ds_daddr,
  908738:	4822f0        	excw
  90873b:	4908aa        	excw
  90873e:	100022        	l32r	a0, 8c87c8 <_bss_end+0x3b58b8>
  908741:	110a22        	l32r	a1, 8cafcc <_bss_end+0x3b80bc>
  908744:	022af0        	excw
  908747:	4a2932        	excw
						PA2DESC(sc, ds->ds_link), &bf->bf_rx_status);
  90874a:	e0          	.byte 0xe0
  90874b:	2d32de        	l32i	a13, a3, 0x378

		if (bf->bf_status & ATH_BUFSTATUS_DONE) {
			continue;
		}

		retval = ah->ah_procRxDescFast(ah, ds, ds->ds_daddr,
  90874e:	2cf04b        	l8ui	a12, a15, 75
  908751:	08aa11        	slli	a10, a10, 8
  908754:	02a202        	or	a2, a10, a2
						PA2DESC(sc, ds->ds_link), &bf->bf_rx_status);
  908757:	09dd0c        	sub	a13, a13, a9

		if (bf->bf_status & ATH_BUFSTATUS_DONE) {
			continue;
		}

		retval = ah->ah_procRxDescFast(ah, ds, ds->ds_daddr,
  90875a:	296222        	l32i	a9, a6, 136
  90875d:	dbf0      	mov.n	a11, a15
  90875f:	02cc02        	or	a12, a12, a2
  908762:	aedd      	add.n	a13, a13, a14
  908764:	9f1b      	s32i.n	a15, a1, 44
  908766:	066a02        	or	a10, a6, a6
  908769:	2e4c40        	addi	a14, a4, 64
  90876c:	981c      	s32i.n	a8, a1, 48
  90876e:	0b9000        	callx8	a9
						PA2DESC(sc, ds->ds_link), &bf->bf_rx_status);
		if (HAL_EINPROGRESS == retval) {
  908771:	220a0f        	movi	a2, 15
  908774:	2f120b        	l32i	a15, a1, 44
  908777:	72a902        	bne	a10, a2, 90877d <ath_intr+0x3d5>
  90877a:	63ff66        	j	9086e4 <ath_intr+0x33c>
			break;
		}

		if (adf_nbuf_len(ds->ds_nbuf) == 0) {
  90877d:	2bf034        	l8ui	a11, a15, 52
  908780:	2af035        	l8ui	a10, a15, 53
  908783:	22f036        	l8ui	a2, a15, 54
  908786:	08bb10        	slli	a11, a11, 24
  908789:	00aa11        	slli	a10, a10, 16
  90878c:	0baa02        	or	a10, a10, a11
  90878f:	082211        	slli	a2, a2, 8
  908792:	0a2202        	or	a2, a2, a10
  908795:	2af037        	l8ui	a10, a15, 55
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  908798:	02aa02        	or	a10, a10, a2
  90879b:	5bf939        	call8	906c80 <__adf_nbuf_len>
  90879e:	881c      	l32i.n	a8, a1, 48
  9087a0:	8f1b      	l32i.n	a15, a1, 44
  9087a2:	65a027        	bnez	a10, 9087cd <ath_intr+0x425>
			adf_nbuf_put_tail(ds->ds_nbuf, bf->bf_rx_status.rs_datalen);
  9087a5:	2bf034        	l8ui	a11, a15, 52
  9087a8:	2af035        	l8ui	a10, a15, 53
  9087ab:	22f036        	l8ui	a2, a15, 54
  9087ae:	08bb10        	slli	a11, a11, 24
  9087b1:	00aa11        	slli	a10, a10, 16
  9087b4:	0baa02        	or	a10, a10, a11
  9087b7:	082211        	slli	a2, a2, 8
  9087ba:	0a2202        	or	a2, a2, a10
  9087bd:	2af037        	l8ui	a10, a15, 55
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  9087c0:	2b4124        	l16ui	a11, a4, 72
  9087c3:	02aa02        	or	a10, a10, a2
  9087c6:	5bf91a        	call8	906c30 <__adf_nbuf_put_tail>
  9087c9:	8f1b      	l32i.n	a15, a1, 44
  9087cb:	881c      	l32i.n	a8, a1, 48
		}

		frame_len += bf->bf_rx_status.rs_datalen;
  9087cd:	224124        	l16ui	a2, a4, 72

		if (bf->bf_rx_status.rs_more == 0) {
  9087d0:	2d4056        	l8ui	a13, a4, 86

		if (adf_nbuf_len(ds->ds_nbuf) == 0) {
			adf_nbuf_put_tail(ds->ds_nbuf, bf->bf_rx_status.rs_datalen);
		}

		frame_len += bf->bf_rx_status.rs_datalen;
  9087d3:	a255      	add.n	a5, a5, a2
  9087d5:	05054f        	extui	a5, a5, 0, 16

		if (bf->bf_rx_status.rs_more == 0) {
  9087d8:	65d29c        	bnez	a13, 908a78 <ath_intr+0x6d0>
 * @param[in] head  buf queue head
 */
static inline void
adf_nbuf_queue_init(adf_nbuf_queue_t *head)
{
    __adf_nbuf_queue_init(head);
  9087db:	da10      	mov.n	a10, a1
  9087dd:	981c      	s32i.n	a8, a1, 48
  9087df:	9d1a      	s32i.n	a13, a1, 40
  9087e1:	9f1b      	s32i.n	a15, a1, 44
  9087e3:	5bf935        	call8	906cb8 <__adf_nbuf_queue_init>
			adf_nbuf_queue_init(&nbuf_head);

			cnt = 0;

			ds_tail = ds;
			ds = asf_tailq_next(ds, ds_list);
  9087e6:	8f1b      	l32i.n	a15, a1, 44
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;

				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				adf_nbuf_queue_add(&nbuf_head, ds_tmp->ds_nbuf);
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;
  9087e8:	8d1a      	l32i.n	a13, a1, 40
			adf_nbuf_queue_init(&nbuf_head);

			cnt = 0;

			ds_tail = ds;
			ds = asf_tailq_next(ds, ds_list);
  9087ea:	2af04c        	l8ui	a10, a15, 76
  9087ed:	27f04d        	l8ui	a7, a15, 77
  9087f0:	22f04e        	l8ui	a2, a15, 78
  9087f3:	08aa10        	slli	a10, a10, 24
  9087f6:	007711        	slli	a7, a7, 16
  9087f9:	0a7702        	or	a7, a7, a10
  9087fc:	082211        	slli	a2, a2, 8
  9087ff:	072202        	or	a2, a2, a7
  908802:	27f04f        	l8ui	a7, a15, 79
  908805:	881c      	l32i.n	a8, a1, 48
  908807:	027202        	or	a2, a7, a2
  90880a:	9219      	s32i.n	a2, a1, 36
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;

				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				adf_nbuf_queue_add(&nbuf_head, ds_tmp->ds_nbuf);
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;
  90880c:	d2d0      	mov.n	a2, a13
  90880e:	60025e        	j	908a70 <ath_intr+0x6c8>
			ds_head = asf_tailq_next(ds_tail, ds_list);

			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;

				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
  908811:	2b8038        	l8ui	a11, a8, 56
  908814:	2a8039        	l8ui	a10, a8, 57
  908817:	27803a        	l8ui	a7, a8, 58
  90881a:	08bb10        	slli	a11, a11, 24
  90881d:	00aa11        	slli	a10, a10, 16
  908820:	0baa02        	or	a10, a10, a11
  908823:	087711        	slli	a7, a7, 8
  908826:	2b803b        	l8ui	a11, a8, 59
  908829:	0a7702        	or	a7, a7, a10
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  90882c:	2a3246        	l32i	a10, a3, 0x118
  90882f:	07bb02        	or	a11, a11, a7
  908832:	c0c1      	movi.n	a12, 1
  908834:	2f160b        	s32i	a15, a1, 44
  908837:	28160c        	s32i	a8, a1, 48
  90883a:	5bf893        	call8	906a88 <__adf_nbuf_unmap>
				adf_nbuf_queue_add(&nbuf_head, ds_tmp->ds_nbuf);
  90883d:	881c      	l32i.n	a8, a1, 48
  90883f:	2b8034        	l8ui	a11, a8, 52
  908842:	2a8035        	l8ui	a10, a8, 53
  908845:	278036        	l8ui	a7, a8, 54
  908848:	08bb10        	slli	a11, a11, 24
  90884b:	00aa11        	slli	a10, a10, 16
  90884e:	0baa02        	or	a10, a10, a11
  908851:	087711        	slli	a7, a7, 8
  908854:	2b8037        	l8ui	a11, a8, 55
  908857:	0a7702        	or	a7, a7, a10
 * @param[in] buf   buf
 */
static inline void
adf_nbuf_queue_add(adf_nbuf_queue_t *head, adf_nbuf_t buf)
{
    __adf_nbuf_queue_add(head, buf);
  90885a:	07bb02        	or	a11, a11, a7
  90885d:	da10      	mov.n	a10, a1
  90885f:	5bf86e        	call8	906a18 <__adf_nbuf_queue_add>
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;
  908862:	881c      	l32i.n	a8, a1, 48

				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  908864:	2b804c        	l8ui	a11, a8, 76
  908867:	2a804d        	l8ui	a10, a8, 77
  90886a:	27804e        	l8ui	a7, a8, 78
  90886d:	08bb10        	slli	a11, a11, 24
  908870:	00aa11        	slli	a10, a10, 16
  908873:	0baa02        	or	a10, a10, a11
  908876:	087711        	slli	a7, a7, 8
  908879:	0a7702        	or	a7, a7, a10
  90887c:	2a804f        	l8ui	a10, a8, 79
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;

				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				adf_nbuf_queue_add(&nbuf_head, ds_tmp->ds_nbuf);
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;
  90887f:	228434        	s8i	a2, a8, 52
  908882:	228435        	s8i	a2, a8, 53
  908885:	228436        	s8i	a2, a8, 54
  908888:	228437        	s8i	a2, a8, 55

				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  90888b:	07a702        	or	a7, a10, a7
				if (ds_tmp == NULL) {
  90888e:	8f1b      	l32i.n	a15, a1, 44
  908890:	65701d        	bnez	a7, 9088b1 <ath_intr+0x509>
					adf_os_assert(0);
  908893:	1a6915        	l32r	a10, 8e2ce8 <athos_indirection_table_install+0x1774>
  908896:	1b6a14        	l32r	a11, 8e30e8 <athos_indirection_table_install+0x1b74>
  908899:	2ca212        	l32i	a12, a10, 72
  90889c:	1a69f6        	l32r	a10, 8e3074 <athos_indirection_table_install+0x1b00>
  90889f:	28160c        	s32i	a8, a1, 48
  9088a2:	0bc000        	callx8	a12
  9088a5:	1a697a        	l32r	a10, 8e2e90 <athos_indirection_table_install+0x191c>
  9088a8:	8f1b      	l32i.n	a15, a1, 44
  9088aa:	0c0200        	memw
  9088ad:	8aa0      	l32i.n	a10, a10, 0
  9088af:	881c      	l32i.n	a8, a1, 48
				}

				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  9088b1:	db80      	mov.n	a11, a8
  9088b3:	da30      	mov.n	a10, a3
  9088b5:	981c      	s32i.n	a8, a1, 48
  9088b7:	9f1b      	s32i.n	a15, a1, 44
  9088b9:	5bfd32        	call8	907d84 <ath_rxdesc_init>
  9088bc:	881c      	l32i.n	a8, a1, 48
  9088be:	8f1b      	l32i.n	a15, a1, 44
  9088c0:	2c804c        	l8ui	a12, a8, 76
  9088c3:	2b804d        	l8ui	a11, a8, 77
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  9088c6:	08cc10        	slli	a12, a12, 24
  9088c9:	00bb11        	slli	a11, a11, 16
  9088cc:	0cbb02        	or	a11, a11, a12
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
				if (ds_tmp == NULL) {
					adf_os_assert(0);
				}

				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  9088cf:	65a0bd        	bnez	a10, 908990 <ath_intr+0x5e8>
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  9088d2:	2a804e        	l8ui	a10, a8, 78
  9088d5:	2c8051        	l8ui	a12, a8, 81
  9088d8:	08aa11        	slli	a10, a10, 8
  9088db:	0baa02        	or	a10, a10, a11
  9088de:	2b804f        	l8ui	a11, a8, 79
  9088e1:	00cc11        	slli	a12, a12, 16
  9088e4:	0aba02        	or	a10, a11, a10
  9088e7:	2b8050        	l8ui	a11, a8, 80
  9088ea:	08bb10        	slli	a11, a11, 24
  9088ed:	0bcc02        	or	a12, a12, a11
  9088f0:	2b8052        	l8ui	a11, a8, 82
  9088f3:	08bb11        	slli	a11, a11, 8
  9088f6:	0cbb02        	or	a11, a11, a12
  9088f9:	c9ac      	beqz.n	a10, 908919 <ath_intr+0x571>
  9088fb:	2c8053        	l8ui	a12, a8, 83
  9088fe:	0bcb02        	or	a11, a12, a11
  908901:	0b8c57        	extui	a12, a11, 24, 8
  908904:	2ca450        	s8i	a12, a10, 80
  908907:	0b0c57        	extui	a12, a11, 16, 8
  90890a:	2ca451        	s8i	a12, a10, 81
  90890d:	0b8c47        	extui	a12, a11, 8, 8
  908910:	2ca452        	s8i	a12, a10, 82
  908913:	2ba453        	s8i	a11, a10, 83
  908916:	600008        	j	908922 <ath_intr+0x57a>
  908919:	2a8053        	l8ui	a10, a8, 83
  90891c:	0bab02        	or	a11, a10, a11
  90891f:	2b36da        	s32i	a11, a3, 0x368
  908922:	2c8050        	l8ui	a12, a8, 80
  908925:	2b8051        	l8ui	a11, a8, 81
  908928:	2a8052        	l8ui	a10, a8, 82
  90892b:	08cc10        	slli	a12, a12, 24
  90892e:	00bb11        	slli	a11, a11, 16
  908931:	0cbb02        	or	a11, a11, a12
  908934:	08aa11        	slli	a10, a10, 8
  908937:	0baa02        	or	a10, a10, a11
  90893a:	2b8053        	l8ui	a11, a8, 83
  90893d:	2e804c        	l8ui	a14, a8, 76
  908940:	2c804d        	l8ui	a12, a8, 77
  908943:	0aba02        	or	a10, a11, a10
  908946:	2b804e        	l8ui	a11, a8, 78
  908949:	08ee10        	slli	a14, a14, 24
  90894c:	00cc11        	slli	a12, a12, 16
  90894f:	0ecc02        	or	a12, a12, a14
  908952:	08bb11        	slli	a11, a11, 8
  908955:	0cbb02        	or	a11, a11, a12
  908958:	2c804f        	l8ui	a12, a8, 79
  90895b:	0bcb02        	or	a11, a12, a11
  90895e:	9ba0      	s32i.n	a11, a10, 0
					asf_tailq_insert_tail(&sc->sc_rxdesc, ds_rmv, ds_list);
  908960:	22844c        	s8i	a2, a8, 76
  908963:	22844d        	s8i	a2, a8, 77
  908966:	22844e        	s8i	a2, a8, 78
  908969:	22844f        	s8i	a2, a8, 79
  90896c:	2a32da        	l32i	a10, a3, 0x368
  90896f:	0a8b57        	extui	a11, a10, 24, 8
  908972:	2b8450        	s8i	a11, a8, 80
  908975:	0a0b57        	extui	a11, a10, 16, 8
  908978:	2b8451        	s8i	a11, a8, 81
  90897b:	0a8b47        	extui	a11, a10, 8, 8
  90897e:	2a8453        	s8i	a10, a8, 83
  908981:	2b8452        	s8i	a11, a8, 82
  908984:	98a0      	s32i.n	a8, a10, 0
  908986:	2a8c4c        	addi	a10, a8, 76
  908989:	2a36da        	s32i	a10, a3, 0x368
  90898c:	6000bb        	j	908a4b <ath_intr+0x6a3>
  90898f:	002a80        	excw
				}  else {
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  908992:	4e2c80        	excw
  908995:	5108aa        	call0	94ac40 <_etext+0x3bb43>
  908998:	110baa        	l32r	a1, 8cb840 <_bss_end+0x3b8930>
  90899b:	022b80        	excw
  90899e:	4f00cc        	excw
  9089a1:	110aba        	l32r	a1, 8cb48c <_bss_end+0x3b857c>
  9089a4:	022b80        	excw
  9089a7:	5008bb        	call0	90ac94 <_HIFusb_start_patch+0xc>
  9089aa:	100bcc        	l32r	a0, 8cb8dc <_bss_end+0x3b89cc>
  9089ad:	022b80        	excw
  9089b0:	5208bb        	call0	88aca0 <_bss_end+0x377d90>
  9089b3:	110cbb        	l32r	a1, 8cbca0 <_bss_end+0x3b8d90>
  9089b6:	02c9ad        	excw
  9089b9:	2c8053        	l8ui	a12, a8, 83
  9089bc:	0bcb02        	or	a11, a12, a11
  9089bf:	0b8c57        	extui	a12, a11, 24, 8
  9089c2:	2ca450        	s8i	a12, a10, 80
  9089c5:	0b0c57        	extui	a12, a11, 16, 8
  9089c8:	2ca451        	s8i	a12, a10, 81
  9089cb:	0b8c47        	extui	a12, a11, 8, 8
  9089ce:	2ca452        	s8i	a12, a10, 82
  9089d1:	2ba453        	s8i	a11, a10, 83
  9089d4:	600009        	j	9089e1 <ath_intr+0x639>
  9089d7:	002a80        	excw
  9089da:	530bab        	call0	8cb888 <_bss_end+0x3b8978>
  9089dd:	022b36        	minu	a11, a2, a2
  9089e0:	da2c      	excw
  9089e2:	8050      	l32i.n	a0, a5, 0
  9089e4:	2b8051        	l8ui	a11, a8, 81
  9089e7:	2a8052        	l8ui	a10, a8, 82
  9089ea:	08cc10        	slli	a12, a12, 24
  9089ed:	00bb11        	slli	a11, a11, 16
  9089f0:	0cbb02        	or	a11, a11, a12
  9089f3:	08aa11        	slli	a10, a10, 8
  9089f6:	0baa02        	or	a10, a10, a11
  9089f9:	2b8053        	l8ui	a11, a8, 83
  9089fc:	2e804c        	l8ui	a14, a8, 76
  9089ff:	2c804d        	l8ui	a12, a8, 77
  908a02:	0aba02        	or	a10, a11, a10
  908a05:	2b804e        	l8ui	a11, a8, 78
  908a08:	08ee10        	slli	a14, a14, 24
  908a0b:	00cc11        	slli	a12, a12, 16
  908a0e:	0ecc02        	or	a12, a12, a14
  908a11:	08bb11        	slli	a11, a11, 8
  908a14:	0cbb02        	or	a11, a11, a12
  908a17:	2c804f        	l8ui	a12, a8, 79
  908a1a:	0bcb02        	or	a11, a12, a11
  908a1d:	9ba0      	s32i.n	a11, a10, 0
					asf_tailq_insert_tail(&sc->sc_rxdesc_idle, ds_rmv, ds_list);
  908a1f:	22844c        	s8i	a2, a8, 76
  908a22:	22844d        	s8i	a2, a8, 77
  908a25:	22844e        	s8i	a2, a8, 78
  908a28:	22844f        	s8i	a2, a8, 79
  908a2b:	2a32d8        	l32i	a10, a3, 0x360
  908a2e:	0a8b57        	extui	a11, a10, 24, 8
  908a31:	2b8450        	s8i	a11, a8, 80
  908a34:	0a0b57        	extui	a11, a10, 16, 8
  908a37:	2b8451        	s8i	a11, a8, 81
  908a3a:	0a8b47        	extui	a11, a10, 8, 8
  908a3d:	2a8453        	s8i	a10, a8, 83
  908a40:	2b8452        	s8i	a11, a8, 82
  908a43:	98a0      	s32i.n	a8, a10, 0
  908a45:	2a8c4c        	addi	a10, a8, 76
  908a48:	2a36d8        	s32i	a10, a3, 0x360
				}

				if (ds_rmv == ds_tail) {
  908a4b:	7f891f        	bne	a8, a15, 908a6e <ath_intr+0x6c6>
					break;
				}
			}


			bf->bf_rx_status.rs_datalen = frame_len;
  908a4e:	254524        	s16i	a5, a4, 72
}

static inline adf_nbuf_t
adf_nbuf_create_frm_frag(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_create_frm_frag(head);
  908a51:	da10      	mov.n	a10, a1
  908a53:	5bf821        	call8	906ad8 <__adf_nbuf_create_frm_frag>
			frame_len = 0;

			bf->bf_skb = adf_nbuf_create_frm_frag(&nbuf_head);

			bf->bf_status |= ATH_BUFSTATUS_DONE;
  908a56:	874f      	l32i.n	a7, a4, 60
  908a58:	c051      	movi.n	a5, 1
  908a5a:	057502        	or	a5, a7, a5

			ds_tail = ds;
			ds = asf_tailq_next(ds, ds_list);

			ds_tmp = ds_head;
			ds_head = asf_tailq_next(ds_tail, ds_list);
  908a5d:	8819      	l32i.n	a8, a1, 36


			bf->bf_rx_status.rs_datalen = frame_len;
			frame_len = 0;

			bf->bf_skb = adf_nbuf_create_frm_frag(&nbuf_head);
  908a5f:	9a48      	s32i.n	a10, a4, 32

			bf->bf_status |= ATH_BUFSTATUS_DONE;
  908a61:	954f      	s32i.n	a5, a4, 60

			bf = (struct ath_rx_buf *)asf_tailq_next(bf, bf_list);
  908a63:	8449      	l32i.n	a4, a4, 36
			adf_nbuf_queue_init(&nbuf_head);

			cnt = 0;

			ds_tail = ds;
			ds = asf_tailq_next(ds, ds_list);
  908a65:	df80      	mov.n	a15, a8
				}
			}


			bf->bf_rx_status.rs_datalen = frame_len;
			frame_len = 0;
  908a67:	c050      	movi.n	a5, 0

		if (bf->bf_rx_status.rs_more == 0) {
			adf_nbuf_queue_t nbuf_head;
			adf_nbuf_queue_init(&nbuf_head);

			cnt = 0;
  908a69:	d750      	mov.n	a7, a5
  908a6b:	600027        	j	908a96 <ath_intr+0x6ee>
				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				adf_nbuf_queue_add(&nbuf_head, ds_tmp->ds_nbuf);
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;

				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  908a6e:	d870      	mov.n	a8, a7
			ds = asf_tailq_next(ds, ds_list);

			ds_tmp = ds_head;
			ds_head = asf_tailq_next(ds_tail, ds_list);

			while (ds_tmp) {
  908a70:	658d9d        	bnez	a8, 908811 <ath_intr+0x469>
  908a73:	63ffd7        	j	908a4e <ath_intr+0x6a6>
  908a76:	00002b        	mulsh	a0, a0, a0
			bf->bf_status |= ATH_BUFSTATUS_DONE;

			bf = (struct ath_rx_buf *)asf_tailq_next(bf, bf_list);
		}
		else {
			ds = asf_tailq_next(ds, ds_list);
  908a79:	f0          	.byte 0xf0
  908a7a:	4c2af0        	excw
  908a7d:	4d22f0        	excw
  908a80:	4e08bb        	excw
  908a83:	1000aa        	l32r	a0, 8c8d2c <_bss_end+0x3b5e1c>
  908a86:	110baa        	l32r	a1, 8cb930 <_bss_end+0x3b8a20>
  908a89:	020822        	excw
  908a8c:	112ff0        	l32r	a1, 8d4a4c <_bss_end+0x3c1b3c>
  908a8f:	4f0a22        	excw
  908a92:	0202ff        	excw
  908a95:	0265f9        	excw
	bf = asf_tailq_first(&sc->sc_rxbuf);

	ds = asf_tailq_first(&sc->sc_rxdesc);
	ds_head = ds;

	while(ds) {
  908a98:	fb          	.byte 0xfb
  908a99:	63fc47        	j	9086e4 <ath_intr+0x33c>
			ah->ah_setInterrupts(ah, sc->sc_imask);

			ATH_SCHEDULE_TQUEUE(sc->sc_dev, &sc->sc_rxtq);
		}

		if (status & HAL_INT_TXURN) {
  908a9c:	8216      	l32i.n	a2, a1, 24
  908a9e:	742712        	bbci	a2, 20, 908ab4 <ath_intr+0x70c>
			sc->sc_int_stats.ast_txurn++;
  908aa1:	22324f        	l32i	a2, a3, 0x13c
			ah->ah_updateTxTrigLevel(ah, AH_TRUE);
  908aa4:	8518      	l32i.n	a5, a1, 32

			ATH_SCHEDULE_TQUEUE(sc->sc_dev, &sc->sc_rxtq);
		}

		if (status & HAL_INT_TXURN) {
			sc->sc_int_stats.ast_txurn++;
  908aa6:	b122      	addi.n	a2, a2, 1
  908aa8:	22364f        	s32i	a2, a3, 0x13c
			ah->ah_updateTxTrigLevel(ah, AH_TRUE);
  908aab:	8257      	l32i.n	a2, a5, 28
  908aad:	da50      	mov.n	a10, a5
  908aaf:	c0b1      	movi.n	a11, 1
  908ab1:	0b2000        	callx8	a2
  908ab4:	2a5a1c        	movi	a10, 0x51c
  908ab7:	aa3a      	add.n	a10, a3, a10
  908ab9:	5bfcae        	call8	907d74 <__adf_os_sched_bh$isra$5>
		}

		ATH_SCHEDULE_TQUEUE(sc->sc_dev, &sc->sc_txtq);

		if (status & HAL_INT_BMISS) {
  908abc:	8216      	l32i.n	a2, a1, 24
  908abe:	7d2607        	bbci	a2, 13, 908ac9 <ath_intr+0x721>
  908ac1:	2a3a24        	movi	a10, 0x324
  908ac4:	aa3a      	add.n	a10, a3, a10
  908ac6:	5bfcab        	call8	907d74 <__adf_os_sched_bh$isra$5>
			ATH_SCHEDULE_TQUEUE(sc->sc_dev, &sc->sc_bmisstq);
		}

		if (status & HAL_INT_GTT)
  908ac9:	8416      	l32i.n	a4, a1, 24
  908acb:	724607        	bbci	a4, 2, 908ad6 <ath_intr+0x72e>
			sc->sc_int_stats.ast_txto++;
  908ace:	223250        	l32i	a2, a3, 0x140
  908ad1:	b122      	addi.n	a2, a2, 1
  908ad3:	223650        	s32i	a2, a3, 0x140

		if (status & HAL_INT_CST)
			sc->sc_int_stats.ast_cst++;
	}

	return ADF_OS_IRQ_HANDLED;
  908ad6:	c021      	movi.n	a2, 1
		}

		if (status & HAL_INT_GTT)
			sc->sc_int_stats.ast_txto++;

		if (status & HAL_INT_CST)
  908ad8:	764608        	bbci	a4, 6, 908ae4 <ath_intr+0x73c>
			sc->sc_int_stats.ast_cst++;
  908adb:	243251        	l32i	a4, a3, 0x144
  908ade:	024408        	add	a4, a4, a2
  908ae1:	243651        	s32i	a4, a3, 0x144
	}

	return ADF_OS_IRQ_HANDLED;
}
  908ae4:	d10f      	retw.n
	...

00908ae8 <wmi_cmd_rsp>:
	WMI_SendEvent(handle, netbuf, evt_id, 0, Length);
}

void wmi_cmd_rsp(void *pContext, WMI_COMMAND_ID cmd_id, A_UINT16 SeqNo,
		 void *buffer, a_int32_t Length)
{
  908ae8:	6c1006        	entry	a1, 48
	adf_nbuf_t netbuf = ADF_NBUF_NULL;
	A_UINT8 *pData;

	netbuf = WMI_AllocEvent(pContext, WMI_EVT_CLASS_CMD_REPLY,
  908aeb:	186915        	l32r	a8, 8e2f40 <athos_indirection_table_install+0x19cc>
  908aee:	da20      	mov.n	a10, a2
  908af0:	27828d        	l32i	a7, a8, 0x234
  908af3:	c0b1      	movi.n	a11, 1
  908af5:	9810      	s32i.n	a8, a1, 0
  908af7:	b46c      	addi.n	a12, a6, 4
  908af9:	0b7000        	callx8	a7
	WMI_SendEvent(handle, netbuf, evt_id, 0, Length);
}

void wmi_cmd_rsp(void *pContext, WMI_COMMAND_ID cmd_id, A_UINT16 SeqNo,
		 void *buffer, a_int32_t Length)
{
  908afc:	04044f        	extui	a4, a4, 0, 16
	adf_nbuf_t netbuf = ADF_NBUF_NULL;
	A_UINT8 *pData;

	netbuf = WMI_AllocEvent(pContext, WMI_EVT_CLASS_CMD_REPLY,
  908aff:	d7a0      	mov.n	a7, a10
				sizeof(WMI_CMD_HDR) + Length);

	if (netbuf == ADF_NBUF_NULL) {
  908b01:	8810      	l32i.n	a8, a1, 0
  908b03:	cda5      	bnez.n	a10, 908b1c <wmi_cmd_rsp+0x34>
		adf_os_assert(0);
  908b05:	228212        	l32i	a2, a8, 72
  908b08:	1a69f6        	l32r	a10, 8e32e0 <athos_indirection_table_install+0x1d6c>
  908b0b:	1b6a15        	l32r	a11, 8e3360 <athos_indirection_table_install+0x1dec>
  908b0e:	0b2000        	callx8	a2
  908b11:	12697a        	l32r	a2, 8e30fc <athos_indirection_table_install+0x1b88>
  908b14:	0c0200        	memw
  908b17:	8220      	l32i.n	a2, a2, 0
  908b19:	d10f      	retw.n
  908b1b:	00c86c        	excw
		return;
	}

	if (Length != 0 && buffer != NULL) {
  908b1e:	c85a      	beqz.n	a5, 908b2c <wmi_cmd_rsp+0x44>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  908b20:	db60      	mov.n	a11, a6
  908b22:	5bf843        	call8	906c30 <__adf_nbuf_put_tail>
  908b25:	db50      	mov.n	a11, a5
  908b27:	dc60      	mov.n	a12, a6
  908b29:	5bfc11        	call8	907b70 <__adf_os_mem_copy>
		pData = (A_UINT8 *)adf_nbuf_put_tail(netbuf, Length);
		adf_os_mem_copy(pData, buffer, Length);
	}

	WMI_SendEvent(pContext, netbuf, cmd_id, SeqNo, Length);
  908b2c:	156915        	l32r	a5, 8e2f80 <athos_indirection_table_install+0x1a0c>
  908b2f:	da20      	mov.n	a10, a2
  908b31:	25528e        	l32i	a5, a5, 0x238
  908b34:	db70      	mov.n	a11, a7
  908b36:	030c4f        	extui	a12, a3, 0, 16
  908b39:	dd40      	mov.n	a13, a4
  908b3b:	de60      	mov.n	a14, a6
  908b3d:	0b5000        	callx8	a5
  908b40:	d10f      	retw.n
	...

00908b44 <ath_hal_reg_rmw_tgt>:
}

static void ath_hal_reg_rmw_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data,
				a_int32_t datalen)
{
  908b44:	6c1006        	entry	a1, 48
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  908b47:	272d05        	addmi	a7, a2, 0x500
  908b4a:	887b      	l32i.n	a8, a7, 44
}

static void ath_hal_reg_rmw_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data,
				a_int32_t datalen)
{
  908b4c:	03034f        	extui	a3, a3, 0, 16
  908b4f:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  908b52:	9810      	s32i.n	a8, a1, 0
	struct register_rmw *buf = (struct register_rmw *)data;
	int i;

	for (i = 0; i < datalen;
  908b54:	d750      	mov.n	a7, a5
  908b56:	60003f        	j	908b99 <ath_hal_reg_rmw_tgt+0x55>
	     i += sizeof(struct register_rmw)) {
		a_uint32_t val;
		buf = (struct register_rmw *)(data + i);

		val = ath_reg_read_filter(ah, buf->reg);
  908b59:	8b70      	l32i.n	a11, a7, 0
  908b5b:	8a10      	l32i.n	a10, a1, 0
  908b5d:	5bfd18        	call8	907fc0 <ath_reg_read_filter>
		val &= ~buf->clr;
  908b60:	8972      	l32i.n	a9, a7, 8
  908b62:	c78f      	movi.n	a8, -1
  908b64:	098903        	xor	a9, a8, a9
		val |= buf->set;
  908b67:	8b71      	l32i.n	a11, a7, 4
	     i += sizeof(struct register_rmw)) {
		a_uint32_t val;
		buf = (struct register_rmw *)(data + i);

		val = ath_reg_read_filter(ah, buf->reg);
		val &= ~buf->clr;
  908b69:	09aa01        	and	a10, a10, a9
		val |= buf->set;
  908b6c:	0baa02        	or	a10, a10, a11
		ath_hal_reg_write_filter(ah, buf->reg, val);
  908b6f:	8970      	l32i.n	a9, a7, 0
}

static void ath_hal_reg_write_filter(struct ath_hal *ah,
			a_uint32_t reg, a_uint32_t val)
{
	if(reg > 0xffff) {
  908b71:	1b6a08        	l32r	a11, 8e3394 <athos_indirection_table_install+0x1e20>
  908b74:	79bb04        	bgeu	a11, a9, 908b7c <ath_hal_reg_rmw_tgt+0x38>
  908b77:	600017        	j	908b92 <ath_hal_reg_rmw_tgt+0x4e>
  908b7a:	00001b        	sra	a0, a0
				flg = 1;
			}
		}
#endif
	} else {
		if(reg == 0x7014)
  908b7d:	6a167b        	blti	a1, 6, 908bfc <ath_rc_mask_tgt+0x4c>
  908b80:	990a      	s32i.n	a9, a0, 40
			ath_pll_reset_ones(ah);
  908b82:	9912      	s32i.n	a9, a1, 8
  908b84:	9a11      	s32i.n	a10, a1, 4
  908b86:	5bfce4        	call8	907f18 <ath_pll_reset_ones$isra$9>
  908b89:	8a11      	l32i.n	a10, a1, 4
  908b8b:	8912      	l32i.n	a9, a1, 8

		iowrite32_mac(reg, val);
  908b8d:	1b6a03        	l32r	a11, 8e339c <athos_indirection_table_install+0x1e28>
  908b90:	ab99      	add.n	a9, a9, a11
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  908b92:	0c0200        	memw
  908b95:	9a90      	s32i.n	a10, a9, 0
  908b97:	bc77      	addi.n	a7, a7, 12
	}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_hal_reg_rmw_tgt(void *Context, A_UINT16 Command,
  908b99:	05790c        	sub	a9, a7, a5
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
	struct register_rmw *buf = (struct register_rmw *)data;
	int i;

	for (i = 0; i < datalen;
  908b9c:	7692b9        	blt	a9, a6, 908b59 <ath_hal_reg_rmw_tgt+0x15>
		val = ath_reg_read_filter(ah, buf->reg);
		val &= ~buf->clr;
		val |= buf->set;
		ath_hal_reg_write_filter(ah, buf->reg, val);
	}
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908b9f:	c0d0      	movi.n	a13, 0
  908ba1:	8a23      	l32i.n	a10, a2, 12
  908ba3:	db30      	mov.n	a11, a3
  908ba5:	dc40      	mov.n	a12, a4
  908ba7:	ded0      	mov.n	a14, a13
  908ba9:	5bffcf        	call8	908ae8 <wmi_cmd_rsp>
  908bac:	d10f      	retw.n
	...

00908bb0 <ath_rc_mask_tgt>:
	adf_os_assert(0);
}

static void ath_rc_mask_tgt(void *Context, A_UINT16 Command,
			    A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  908bb0:	6c1004        	entry	a1, 32
	int idx, band, i;

	idx = wmi_data->vap_index;
	band = wmi_data->band;

	sc->sc_vap[idx].av_rate_mask[band] = adf_os_ntohl(wmi_data->mask);
  908bb3:	2e5002        	l8ui	a14, a5, 2
  908bb6:	2d5003        	l8ui	a13, a5, 3
  908bb9:	285004        	l8ui	a8, a5, 4
  908bbc:	08ee10        	slli	a14, a14, 24
  908bbf:	00dd11        	slli	a13, a13, 16
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_rate_mask_cmd *wmi_data = (struct wmi_rc_rate_mask_cmd *)buffer;
	int idx, band, i;

	idx = wmi_data->vap_index;
  908bc2:	295000        	l8ui	a9, a5, 0
	band = wmi_data->band;
  908bc5:	2a5001        	l8ui	a10, a5, 1

	sc->sc_vap[idx].av_rate_mask[band] = adf_os_ntohl(wmi_data->mask);
  908bc8:	0edd02        	or	a13, a13, a14
  908bcb:	255005        	l8ui	a5, a5, 5
  908bce:	088811        	slli	a8, a8, 8
  908bd1:	0d8802        	or	a8, a8, a13
  908bd4:	085802        	or	a8, a5, a8
  908bd7:	0c9511        	slli	a5, a9, 4
  908bda:	a955      	add.n	a5, a5, a9
  908bdc:	aa5e      	add.n	a14, a5, a10
  908bde:	2d5a70        	movi	a13, 0x570
  908be1:	aded      	add.n	a13, a14, a13
  908be3:	02dd0a        	addx4	a13, a13, a2
  908be6:	98d4      	s32i.n	a8, a13, 16
	adf_os_assert(0);
}

static void ath_rc_mask_tgt(void *Context, A_UINT16 Command,
			    A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  908be8:	030b4f        	extui	a11, a3, 0, 16
  908beb:	040c4f        	extui	a12, a4, 0, 16
	idx = wmi_data->vap_index;
	band = wmi_data->band;

	sc->sc_vap[idx].av_rate_mask[band] = adf_os_ntohl(wmi_data->mask);

	if (sc->sc_vap[idx].av_rate_mask[band]) {
  908bee:	ca8a      	beqz.n	a8, 908c1c <ath_rc_mask_tgt+0x6c>
  908bf0:	c050      	movi.n	a5, 0
		for (i = 0; i < RATE_TABLE_SIZE; i++) {
			if ((1 << i) & sc->sc_vap[idx].av_rate_mask[band]) {
  908bf2:	c0d1      	movi.n	a13, 1
  908bf4:	005104        	ssl	a5
  908bf7:	00de1a        	sll	a14, a13
  908bfa:	78e014        	bnone	a14, a8, 908c12 <ath_rc_mask_tgt+0x62>
				sc->sc_vap[idx].av_minrateidx[band] = i;
  908bfd:	0c9811        	slli	a8, a9, 4
  908c00:	a989      	add.n	a9, a8, a9
  908c02:	02990a        	addx4	a9, a9, a2
  908c05:	186a17        	l32r	a8, 8e3464 <athos_indirection_table_install+0x1ef0>
  908c08:	aa9a      	add.n	a10, a9, a10
  908c0a:	a8aa      	add.n	a10, a10, a8
  908c0c:	25a408        	s8i	a5, a10, 8
				break;
  908c0f:	600016        	j	908c29 <ath_rc_mask_tgt+0x79>
	band = wmi_data->band;

	sc->sc_vap[idx].av_rate_mask[band] = adf_os_ntohl(wmi_data->mask);

	if (sc->sc_vap[idx].av_rate_mask[band]) {
		for (i = 0; i < RATE_TABLE_SIZE; i++) {
  908c12:	b155      	addi.n	a5, a5, 1
  908c14:	695cdc        	bnei	a5, 32, 908bf4 <ath_rc_mask_tgt+0x44>
  908c17:	60000e        	j	908c29 <ath_rc_mask_tgt+0x79>
  908c1a:	000002        	or	a0, a0, a0
				sc->sc_vap[idx].av_minrateidx[band] = i;
				break;
			}
		}
	} else {
		sc->sc_vap[idx].av_minrateidx[band] = 0;
  908c1d:	550a19        	call4	94b484 <_etext+0x3c387>
  908c20:	6a17aa        	blti	a1, 7, 908bce <ath_rc_mask_tgt+0x1e>
  908c23:	5aa9aa        	call8	8b32cc <_bss_end+0x3a03bc>
  908c26:	28a408        	s8i	a8, a10, 8
	}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908c29:	c0d0      	movi.n	a13, 0
  908c2b:	8a23      	l32i.n	a10, a2, 12
  908c2d:	ded0      	mov.n	a14, a13
  908c2f:	5bffae        	call8	908ae8 <wmi_cmd_rsp>
  908c32:	d10f      	retw.n

00908c34 <ath_rx_stats_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
}

static void ath_rx_stats_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
			     A_UINT8 *data, a_int32_t datalen)
{
  908c34:	6c1006        	entry	a1, 48
		a_uint32_t   ast_rx_done;
	};

	struct fusion_stats stats;

	stats.ast_rx_nobuf = sc->sc_rx_stats.ast_rx_nobuf;
  908c37:	28227c        	l32i	a8, a2, 0x1f0
	stats.ast_rx_send = sc->sc_rx_stats.ast_rx_send;
	stats.ast_rx_done = sc->sc_rx_stats.ast_rx_done;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c3a:	8a23      	l32i.n	a10, a2, 12
		a_uint32_t   ast_rx_done;
	};

	struct fusion_stats stats;

	stats.ast_rx_nobuf = sc->sc_rx_stats.ast_rx_nobuf;
  908c3c:	9810      	s32i.n	a8, a1, 0
	stats.ast_rx_send = sc->sc_rx_stats.ast_rx_send;
  908c3e:	28227d        	l32i	a8, a2, 0x1f4
	stats.ast_rx_done = sc->sc_rx_stats.ast_rx_done;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c41:	030b4f        	extui	a11, a3, 0, 16
	};

	struct fusion_stats stats;

	stats.ast_rx_nobuf = sc->sc_rx_stats.ast_rx_nobuf;
	stats.ast_rx_send = sc->sc_rx_stats.ast_rx_send;
  908c44:	9811      	s32i.n	a8, a1, 4
	stats.ast_rx_done = sc->sc_rx_stats.ast_rx_done;
  908c46:	28227e        	l32i	a8, a2, 0x1f8

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c49:	040c4f        	extui	a12, a4, 0, 16
  908c4c:	dd10      	mov.n	a13, a1
  908c4e:	c0ec      	movi.n	a14, 12

	struct fusion_stats stats;

	stats.ast_rx_nobuf = sc->sc_rx_stats.ast_rx_nobuf;
	stats.ast_rx_send = sc->sc_rx_stats.ast_rx_send;
	stats.ast_rx_done = sc->sc_rx_stats.ast_rx_done;
  908c50:	9812      	s32i.n	a8, a1, 8

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c52:	5bffa5        	call8	908ae8 <wmi_cmd_rsp>
  908c55:	d10f      	retw.n
	...

00908c58 <ath_tx_stats_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
}

static void ath_tx_stats_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
			     A_UINT8 *data, a_int32_t datalen)
{
  908c58:	6c100a        	entry	a1, 80
		a_uint32_t   tx_nobufs;
	};

	struct fusion_stats stats;

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
  908c5b:	282252        	l32i	a8, a2, 0x148
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c5e:	8a23      	l32i.n	a10, a2, 12
		a_uint32_t   tx_nobufs;
	};

	struct fusion_stats stats;

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
  908c60:	9810      	s32i.n	a8, a1, 0
	stats.ast_tx_fifoerr = sc->sc_tx_stats.ast_tx_fifoerr;
  908c62:	282253        	l32i	a8, a2, 0x14c
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c65:	030b4f        	extui	a11, a3, 0, 16
	};

	struct fusion_stats stats;

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
	stats.ast_tx_fifoerr = sc->sc_tx_stats.ast_tx_fifoerr;
  908c68:	9811      	s32i.n	a8, a1, 4
	stats.ast_tx_filtered = sc->sc_tx_stats.ast_tx_filtered;
  908c6a:	282254        	l32i	a8, a2, 0x150
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c6d:	040c4f        	extui	a12, a4, 0, 16

	struct fusion_stats stats;

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
	stats.ast_tx_fifoerr = sc->sc_tx_stats.ast_tx_fifoerr;
	stats.ast_tx_filtered = sc->sc_tx_stats.ast_tx_filtered;
  908c70:	9812      	s32i.n	a8, a1, 8
	stats.ast_tx_timer_exp = sc->sc_tx_stats.ast_tx_timer_exp;
  908c72:	282255        	l32i	a8, a2, 0x154
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c75:	dd10      	mov.n	a13, a1
	struct fusion_stats stats;

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
	stats.ast_tx_fifoerr = sc->sc_tx_stats.ast_tx_fifoerr;
	stats.ast_tx_filtered = sc->sc_tx_stats.ast_tx_filtered;
	stats.ast_tx_timer_exp = sc->sc_tx_stats.ast_tx_timer_exp;
  908c77:	9813      	s32i.n	a8, a1, 12
	stats.ast_tx_shortretry = sc->sc_tx_stats.ast_tx_shortretry;
  908c79:	282256        	l32i	a8, a2, 0x158
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c7c:	c2e4      	movi.n	a14, 36

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
	stats.ast_tx_fifoerr = sc->sc_tx_stats.ast_tx_fifoerr;
	stats.ast_tx_filtered = sc->sc_tx_stats.ast_tx_filtered;
	stats.ast_tx_timer_exp = sc->sc_tx_stats.ast_tx_timer_exp;
	stats.ast_tx_shortretry = sc->sc_tx_stats.ast_tx_shortretry;
  908c7e:	9814      	s32i.n	a8, a1, 16
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
  908c80:	282257        	l32i	a8, a2, 0x15c
  908c83:	9815      	s32i.n	a8, a1, 20
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
  908c85:	28225c        	l32i	a8, a2, 0x170
  908c88:	9816      	s32i.n	a8, a1, 24
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
  908c8a:	282276        	l32i	a8, a2, 0x1d8
  908c8d:	9817      	s32i.n	a8, a1, 28
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;
  908c8f:	282277        	l32i	a8, a2, 0x1dc
  908c92:	281608        	s32i	a8, a1, 32

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908c95:	5bff94        	call8	908ae8 <wmi_cmd_rsp>
  908c98:	d10f      	retw.n
	...

00908c9c <ath_int_stats_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_int_stats_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
			      A_UINT8 *data, a_int32_t datalen)
{
  908c9c:	6c1008        	entry	a1, 64
		a_uint32_t ast_cst;
	};

	struct fusion_stats stats;

	stats.ast_rx = sc->sc_int_stats.ast_rx;
  908c9f:	28224c        	l32i	a8, a2, 0x130
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
	stats.ast_txto = sc->sc_int_stats.ast_txto;
	stats.ast_cst = sc->sc_int_stats.ast_cst;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908ca2:	8a23      	l32i.n	a10, a2, 12
		a_uint32_t ast_cst;
	};

	struct fusion_stats stats;

	stats.ast_rx = sc->sc_int_stats.ast_rx;
  908ca4:	9810      	s32i.n	a8, a1, 0
	stats.ast_rxorn = sc->sc_int_stats.ast_rxorn;
  908ca6:	28224d        	l32i	a8, a2, 0x134
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
	stats.ast_txto = sc->sc_int_stats.ast_txto;
	stats.ast_cst = sc->sc_int_stats.ast_cst;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908ca9:	030b4f        	extui	a11, a3, 0, 16
	};

	struct fusion_stats stats;

	stats.ast_rx = sc->sc_int_stats.ast_rx;
	stats.ast_rxorn = sc->sc_int_stats.ast_rxorn;
  908cac:	9811      	s32i.n	a8, a1, 4
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
  908cae:	28224e        	l32i	a8, a2, 0x138
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
	stats.ast_txto = sc->sc_int_stats.ast_txto;
	stats.ast_cst = sc->sc_int_stats.ast_cst;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908cb1:	040c4f        	extui	a12, a4, 0, 16

	struct fusion_stats stats;

	stats.ast_rx = sc->sc_int_stats.ast_rx;
	stats.ast_rxorn = sc->sc_int_stats.ast_rxorn;
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
  908cb4:	9812      	s32i.n	a8, a1, 8
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
  908cb6:	28224f        	l32i	a8, a2, 0x13c
	stats.ast_txto = sc->sc_int_stats.ast_txto;
	stats.ast_cst = sc->sc_int_stats.ast_cst;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908cb9:	dd10      	mov.n	a13, a1
	struct fusion_stats stats;

	stats.ast_rx = sc->sc_int_stats.ast_rx;
	stats.ast_rxorn = sc->sc_int_stats.ast_rxorn;
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
  908cbb:	9813      	s32i.n	a8, a1, 12
	stats.ast_txto = sc->sc_int_stats.ast_txto;
  908cbd:	282250        	l32i	a8, a2, 0x140
	stats.ast_cst = sc->sc_int_stats.ast_cst;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908cc0:	c1e8      	movi.n	a14, 24

	stats.ast_rx = sc->sc_int_stats.ast_rx;
	stats.ast_rxorn = sc->sc_int_stats.ast_rxorn;
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
	stats.ast_txto = sc->sc_int_stats.ast_txto;
  908cc2:	9814      	s32i.n	a8, a1, 16
	stats.ast_cst = sc->sc_int_stats.ast_cst;
  908cc4:	282251        	l32i	a8, a2, 0x144
  908cc7:	9815      	s32i.n	a8, a1, 20

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  908cc9:	5bff87        	call8	908ae8 <wmi_cmd_rsp>
  908ccc:	d10f      	retw.n
	...

00908cd0 <ath_node_update_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_update_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  908cd0:	6c1004        	entry	a1, 32

	node->ni_htcap = adf_os_ntohs(node->ni_htcap);
	node->ni_flags = adf_os_ntohs(node->ni_flags);
	node->ni_maxampdu = adf_os_ntohs(node->ni_maxampdu);

	adf_os_mem_copy(&(sc->sc_sta[node_index].ni), node,
  908cd3:	29500c        	l8ui	a9, a5, 12
  908cd6:	265a30        	movi	a6, 0x530
  908cd9:	0a9711        	slli	a7, a9, 6
  908cdc:	a977      	add.n	a7, a7, a9
  908cde:	097909        	addx2	a9, a7, a9
  908ce1:	0e9711        	slli	a7, a9, 2
  908ce4:	a67a      	add.n	a10, a7, a6
  908ce6:	aa2a      	add.n	a10, a2, a10
  908ce8:	db50      	mov.n	a11, a5
  908cea:	b8aa      	addi.n	a10, a10, 8
  908cec:	c1c6      	movi.n	a12, 22
  908cee:	5bfba0        	call8	907b70 <__adf_os_mem_copy>
			NODE_TARGET_SIZE);

	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
  908cf1:	a728      	add.n	a8, a2, a7
	node->ni_maxampdu = adf_os_ntohs(node->ni_maxampdu);

	adf_os_mem_copy(&(sc->sc_sta[node_index].ni), node,
			NODE_TARGET_SIZE);

	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
  908cf3:	a686      	add.n	a6, a8, a6
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
  908cf5:	256015        	l8ui	a5, a6, 21
  908cf8:	275a50        	movi	a7, 0x550
  908cfb:	0c5611        	slli	a6, a5, 4
  908cfe:	a565      	add.n	a5, a6, a5
  908d00:	166a18        	l32r	a6, 8e3560 <_HIFusb_start+0xc0>
  908d03:	a787      	add.n	a7, a8, a7
  908d05:	06550a        	addx4	a5, a5, a6
  908d08:	a525      	add.n	a5, a2, a5
  908d0a:	b855      	addi.n	a5, a5, 8
  908d0c:	9572      	s32i.n	a5, a7, 8

	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
  908d0e:	255a40        	movi	a5, 0x540
  908d11:	a588      	add.n	a8, a8, a5
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
	sc->sc_sta[node_index].ni.ni_iv32 = 0;
  908d13:	c0e0      	movi.n	a14, 0
			NODE_TARGET_SIZE);

	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);

	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
  908d15:	c050      	movi.n	a5, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_update_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  908d17:	03034f        	extui	a3, a3, 0, 16
  908d1a:	04044f        	extui	a4, a4, 0, 16

	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
	sc->sc_sta[node_index].ni.ni_iv32 = 0;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908d1d:	8a23      	l32i.n	a10, a2, 12
			NODE_TARGET_SIZE);

	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);

	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
  908d1f:	258508        	s16i	a5, a8, 16
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
  908d22:	258509        	s16i	a5, a8, 18
	sc->sc_sta[node_index].ni.ni_iv32 = 0;
  908d25:	9e85      	s32i.n	a14, a8, 20

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908d27:	db30      	mov.n	a11, a3
  908d29:	dc40      	mov.n	a12, a4
  908d2b:	dde0      	mov.n	a13, a14
  908d2d:	5bff6e        	call8	908ae8 <wmi_cmd_rsp>
  908d30:	d10f      	retw.n
	...

00908d34 <ath_detach_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_detach_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
				 A_UINT8 *data, a_int32_t datalen)
{
  908d34:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  908d37:	252d05        	addmi	a5, a2, 0x500
  908d3a:	855b      	l32i.n	a5, a5, 44

	ath_desc_free(sc);
  908d3c:	022a02        	or	a10, a2, a2
  908d3f:	5bfd03        	call8	90814c <ath_desc_free>
	ah->ah_detach(ah);
  908d42:	8856      	l32i.n	a8, a5, 24
  908d44:	da50      	mov.n	a10, a5
  908d46:	0b8000        	callx8	a8
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_detach_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
				 A_UINT8 *data, a_int32_t datalen)
{
  908d49:	03034f        	extui	a3, a3, 0, 16
  908d4c:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ath_desc_free(sc);
	ah->ah_detach(ah);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908d4f:	c0d0      	movi.n	a13, 0
  908d51:	8a23      	l32i.n	a10, a2, 12
  908d53:	db30      	mov.n	a11, a3
  908d55:	dc40      	mov.n	a12, a4
  908d57:	ded0      	mov.n	a14, a13
  908d59:	5bff63        	call8	908ae8 <wmi_cmd_rsp>
  908d5c:	d10f      	retw.n
	...

00908d60 <ath_enable_aggr_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
}

static void ath_enable_aggr_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
				A_UINT8 *data, a_int32_t datalen)
{
  908d60:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_aggr_info *aggr = (struct ath_aggr_info *)data;
	a_uint8_t nodeindex = aggr->nodeindex;
  908d63:	2d5000        	l8ui	a13, a5, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
}

static void ath_enable_aggr_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
				A_UINT8 *data, a_int32_t datalen)
{
  908d66:	03034f        	extui	a3, a3, 0, 16
  908d69:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_aggr_info *aggr = (struct ath_aggr_info *)data;
	a_uint8_t nodeindex = aggr->nodeindex;
	a_uint8_t tidno = aggr->tidno;
  908d6c:	285001        	l8ui	a8, a5, 1
	struct ath_node_target *an = NULL ;
	struct ath_atx_tid  *tid = NULL;

	if (nodeindex >= TARGET_NODE_MAX) {
  908d6f:	6fd866        	bgeui	a13, 8, 908dd9 <ath_enable_aggr_tgt+0x79>
		goto done;
	}

	an = &sc->sc_sta[nodeindex];
  908d72:	0adb11        	slli	a11, a13, 6
  908d75:	adbb      	add.n	a11, a11, a13
  908d77:	295a30        	movi	a9, 0x530
  908d7a:	0dbb09        	addx2	a11, a11, a13
  908d7d:	09bb0a        	addx4	a11, a11, a9
  908d80:	ab2b      	add.n	a11, a2, a11
  908d82:	b8bb      	addi.n	a11, a11, 8
	if (!an->an_valid) {
  908d84:	29bd02        	addmi	a9, a11, 0x200
  908d87:	299004        	l8ui	a9, a9, 4
  908d8a:	64904b        	beqz	a9, 908dd9 <ath_enable_aggr_tgt+0x79>
		goto done;
	}

	if (tidno >= WME_NUM_TID) {
  908d8d:	6e8813        	bltui	a8, 8, 908da4 <ath_enable_aggr_tgt+0x44>
		adf_os_print("[%s] enable_aggr with invalid tid %d(node = %d)\n",
  908d90:	156915        	l32r	a5, 8e31e4 <athos_indirection_table_install+0x1c70>
  908d93:	1b6a1a        	l32r	a11, 8e35fc <_HIFusb_start+0x15c>
  908d96:	255212        	l32i	a5, a5, 72
  908d99:	1a6a19        	l32r	a10, 8e3600 <_HIFusb_start+0x160>
  908d9c:	dc80      	mov.n	a12, a8
  908d9e:	0b5000        	callx8	a5
			     __FUNCTION__, tidno, nodeindex);
		goto done;
  908da1:	600034        	j	908dd9 <ath_enable_aggr_tgt+0x79>
	}

	tid = ATH_AN_2_TID(an, tidno);
  908da4:	0c8c11        	slli	a12, a8, 4
  908da7:	08cc0c        	sub	a12, a12, a8

	if (aggr->aggr_enable) {
  908daa:	255002        	l8ui	a5, a5, 2
		adf_os_print("[%s] enable_aggr with invalid tid %d(node = %d)\n",
			     __FUNCTION__, tidno, nodeindex);
		goto done;
	}

	tid = ATH_AN_2_TID(an, tidno);
  908dad:	0bcc0a        	addx4	a12, a12, a11
  908db0:	2ccc24        	addi	a12, a12, 36
  908db3:	c082      	movi.n	a8, 2

	if (aggr->aggr_enable) {
  908db5:	c85b      	beqz.n	a5, 908dc4 <ath_enable_aggr_tgt+0x64>
		tid->flag |= TID_AGGR_ENABLED;
  908db7:	25c036        	l8ui	a5, a12, 54
  908dba:	085802        	or	a8, a5, a8
  908dbd:	28c436        	s8i	a8, a12, 54
  908dc0:	600015        	j	908dd9 <ath_enable_aggr_tgt+0x79>
  908dc3:	0025c0        	excw
	} else if ( tid->flag & TID_AGGR_ENABLED ) {
  908dc6:	367850        	excw
  908dc9:	0ec78d        	excw
		tid->flag &= ~TID_AGGR_ENABLED;
  908dcc:	085501        	and	a5, a5, a8
  908dcf:	25c436        	s8i	a5, a12, 54
		ath_tgt_tx_cleanup(sc, an, tid, 1);
  908dd2:	da20      	mov.n	a10, a2
  908dd4:	c0d1      	movi.n	a13, 1
  908dd6:	5817ee        	call8	90ed90 <ath_tgt_tx_cleanup>
	}
done:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908dd9:	c0d0      	movi.n	a13, 0
  908ddb:	8a23      	l32i.n	a10, a2, 12
  908ddd:	db30      	mov.n	a11, a3
  908ddf:	dc40      	mov.n	a12, a4
  908de1:	ded0      	mov.n	a14, a13
  908de3:	5bff41        	call8	908ae8 <wmi_cmd_rsp>
  908de6:	d10f      	retw.n

00908de8 <ath_ic_update_tgt>:
}

static void ath_ic_update_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
			      A_UINT8 *data, a_int32_t datalen)
{
  908de8:	6c1004        	entry	a1, 32
  908deb:	1a6a1b        	l32r	a10, 8e3658 <_HIFusb_start+0x1b8>
  908dee:	db50      	mov.n	a11, a5
  908df0:	0a2a08        	add	a10, a2, a10
  908df3:	c0c8      	movi.n	a12, 8
  908df5:	5bfb5e        	call8	907b70 <__adf_os_mem_copy>
	struct ieee80211com_target *ic = (struct ieee80211com_target * )data;
	struct ieee80211com_target *ictgt = &sc->sc_ic ;

	adf_os_mem_copy(ictgt, ic, sizeof(struct  ieee80211com_target));

	ictgt->ic_ampdu_limit         = adf_os_ntohl(ic->ic_ampdu_limit);
  908df8:	8850      	l32i.n	a8, a5, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_ic_update_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
			      A_UINT8 *data, a_int32_t datalen)
{
  908dfa:	03034f        	extui	a3, a3, 0, 16
  908dfd:	04044f        	extui	a4, a4, 0, 16
	struct ieee80211com_target *ic = (struct ieee80211com_target * )data;
	struct ieee80211com_target *ictgt = &sc->sc_ic ;

	adf_os_mem_copy(ictgt, ic, sizeof(struct  ieee80211com_target));

	ictgt->ic_ampdu_limit         = adf_os_ntohl(ic->ic_ampdu_limit);
  908e00:	252d16        	addmi	a5, a2, 0x1600

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908e03:	c0d0      	movi.n	a13, 0
  908e05:	8a23      	l32i.n	a10, a2, 12
	struct ieee80211com_target *ic = (struct ieee80211com_target * )data;
	struct ieee80211com_target *ictgt = &sc->sc_ic ;

	adf_os_mem_copy(ictgt, ic, sizeof(struct  ieee80211com_target));

	ictgt->ic_ampdu_limit         = adf_os_ntohl(ic->ic_ampdu_limit);
  908e07:	9858      	s32i.n	a8, a5, 32

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908e09:	db30      	mov.n	a11, a3
  908e0b:	dc40      	mov.n	a12, a4
  908e0d:	ded0      	mov.n	a14, a13
  908e0f:	5bff36        	call8	908ae8 <wmi_cmd_rsp>
  908e12:	d10f      	retw.n

00908e14 <handle_rc_rate_update_cmd>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void handle_rc_rate_update_cmd(void *Context, A_UINT16 Command,
				      A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  908e14:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_rate_update_cmd *wmi_data = (struct wmi_rc_rate_update_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);

	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  908e17:	285000        	l8ui	a8, a5, 0
				      A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_rate_update_cmd *wmi_data = (struct wmi_rc_rate_update_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908e1a:	2a5004        	l8ui	a10, a5, 4

	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  908e1d:	0a8b11        	slli	a11, a8, 6
  908e20:	a8bb      	add.n	a11, a11, a8
  908e22:	08bb09        	addx2	a11, a11, a8
  908e25:	295a30        	movi	a9, 0x530
				      A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_rate_update_cmd *wmi_data = (struct wmi_rc_rate_update_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908e28:	285005        	l8ui	a8, a5, 5

	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  908e2b:	09bb0a        	addx4	a11, a11, a9
				      A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_rate_update_cmd *wmi_data = (struct wmi_rc_rate_update_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908e2e:	295006        	l8ui	a9, a5, 6
  908e31:	08aa10        	slli	a10, a10, 24
  908e34:	008811        	slli	a8, a8, 16
  908e37:	0a8802        	or	a8, a8, a10
  908e3a:	2d5007        	l8ui	a13, a5, 7
  908e3d:	089911        	slli	a9, a9, 8
  908e40:	089902        	or	a9, a9, a8

	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  908e43:	2c5001        	l8ui	a12, a5, 1
  908e46:	ab2b      	add.n	a11, a2, a11
  908e48:	09dd02        	or	a13, a13, a9
  908e4b:	b85e      	addi.n	a14, a5, 8
  908e4d:	da20      	mov.n	a10, a2
  908e4f:	2bbc08        	addi	a11, a11, 8
  908e52:	581001        	call8	90ce58 <ath_rate_node_update>
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void handle_rc_rate_update_cmd(void *Context, A_UINT16 Command,
				      A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  908e55:	03034f        	extui	a3, a3, 0, 16
  908e58:	04044f        	extui	a4, a4, 0, 16
	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
			     wmi_data->isNew,
			     capflag,
			     &wmi_data->rs);

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908e5b:	c0d0      	movi.n	a13, 0
  908e5d:	8a23      	l32i.n	a10, a2, 12
  908e5f:	db30      	mov.n	a11, a3
  908e61:	dc40      	mov.n	a12, a4
  908e63:	ded0      	mov.n	a14, a13
  908e65:	5bff20        	call8	908ae8 <wmi_cmd_rsp>
  908e68:	d10f      	retw.n
	...

00908e6c <handle_rc_state_change_cmd>:
}

static void handle_rc_state_change_cmd(void *Context, A_UINT16 Command,
				       A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)

{
  908e6c:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_state_change_cmd *wmi_data = (struct wmi_rc_state_change_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);

	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
  908e6f:	285000        	l8ui	a8, a5, 0
  908e72:	196a18        	l32r	a9, 8e36d4 <_HIFusb_start+0x234>
  908e75:	0c8b11        	slli	a11, a8, 4

{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_state_change_cmd *wmi_data = (struct wmi_rc_state_change_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908e78:	2a5004        	l8ui	a10, a5, 4

	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
  908e7b:	a8bb      	add.n	a11, a11, a8

{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_state_change_cmd *wmi_data = (struct wmi_rc_state_change_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908e7d:	285005        	l8ui	a8, a5, 5

	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
  908e80:	09bb0a        	addx4	a11, a11, a9

{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_state_change_cmd *wmi_data = (struct wmi_rc_state_change_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  908e83:	295006        	l8ui	a9, a5, 6
  908e86:	08aa10        	slli	a10, a10, 24
  908e89:	008811        	slli	a8, a8, 16
  908e8c:	0a8802        	or	a8, a8, a10
  908e8f:	2d5007        	l8ui	a13, a5, 7
  908e92:	089911        	slli	a9, a9, 8
  908e95:	089902        	or	a9, a9, a8

	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
  908e98:	2c5001        	l8ui	a12, a5, 1
  908e9b:	ab2b      	add.n	a11, a2, a11
  908e9d:	09dd02        	or	a13, a13, a9
  908ea0:	b85e      	addi.n	a14, a5, 8
  908ea2:	da20      	mov.n	a10, a2
  908ea4:	b8bb      	addi.n	a11, a11, 8
  908ea6:	580ff1        	call8	90ce6c <ath_rate_newstate>
}

static void handle_rc_state_change_cmd(void *Context, A_UINT16 Command,
				       A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)

{
  908ea9:	03034f        	extui	a3, a3, 0, 16
  908eac:	04044f        	extui	a4, a4, 0, 16
	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
			  wmi_data->vap_state,
			  capflag,
			  &wmi_data->rs);

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908eaf:	c0d0      	movi.n	a13, 0
  908eb1:	8a23      	l32i.n	a10, a2, 12
  908eb3:	db30      	mov.n	a11, a3
  908eb5:	dc40      	mov.n	a12, a4
  908eb7:	ded0      	mov.n	a14, a13
  908eb9:	5bff0b        	call8	908ae8 <wmi_cmd_rsp>
  908ebc:	d10f      	retw.n
	...

00908ec0 <ath_hal_reg_write_tgt>:
	}
}

static void ath_hal_reg_write_tgt(void *Context, A_UINT16 Command,
				  A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  908ec0:	6c1006        	entry	a1, 48
  908ec3:	030b4f        	extui	a11, a3, 0, 16
  908ec6:	040c4f        	extui	a12, a4, 0, 16
	struct registerWrite {
		a_uint32_t reg;
		a_uint32_t val;
	}*t;

	for (i = 0; i < datalen; i += sizeof(struct registerWrite)) {
  908ec9:	d750      	mov.n	a7, a5
  908ecb:	60002a        	j	908ef9 <ath_hal_reg_write_tgt+0x39>
		t = (struct registerWrite *)(data+i);

		ath_hal_reg_write_filter(ah, t->reg, t->val);
  908ece:	8370      	l32i.n	a3, a7, 0
}

static void ath_hal_reg_write_filter(struct ath_hal *ah,
			a_uint32_t reg, a_uint32_t val)
{
	if(reg > 0xffff) {
  908ed0:	186a08        	l32r	a8, 8e36f0 <_HIFusb_isr_handler+0xc>
	}*t;

	for (i = 0; i < datalen; i += sizeof(struct registerWrite)) {
		t = (struct registerWrite *)(data+i);

		ath_hal_reg_write_filter(ah, t->reg, t->val);
  908ed3:	8471      	l32i.n	a4, a7, 4
}

static void ath_hal_reg_write_filter(struct ath_hal *ah,
			a_uint32_t reg, a_uint32_t val)
{
	if(reg > 0xffff) {
  908ed5:	738b03        	bgeu	a8, a3, 908edc <ath_hal_reg_write_tgt+0x1c>
  908ed8:	600016        	j	908ef2 <ath_hal_reg_write_tgt+0x32>
  908edb:	00186a        	excw
				flg = 1;
			}
		}
#endif
	} else {
		if(reg == 0x7014)
  908ede:	167839        	l32r	a6, 8e6fc4 <memset+0x17c>
  908ee1:	0a9b10        	slli	a11, a9, 22
			ath_pll_reset_ones(ah);
  908ee4:	9c11      	s32i.n	a12, a1, 4
  908ee6:	5bfc0c        	call8	907f18 <ath_pll_reset_ones$isra$9>
  908ee9:	8c11      	l32i.n	a12, a1, 4
  908eeb:	8b10      	l32i.n	a11, a1, 0

		iowrite32_mac(reg, val);
  908eed:	186a03        	l32r	a8, 8e36fc <_HIFusb_isr_handler+0x18>
  908ef0:	a833      	add.n	a3, a3, a8
  908ef2:	0c0200        	memw
  908ef5:	9430      	s32i.n	a4, a3, 0
  908ef7:	b877      	addi.n	a7, a7, 8
	}
}

static void ath_hal_reg_write_tgt(void *Context, A_UINT16 Command,
  908ef9:	05730c        	sub	a3, a7, a5
	struct registerWrite {
		a_uint32_t reg;
		a_uint32_t val;
	}*t;

	for (i = 0; i < datalen; i += sizeof(struct registerWrite)) {
  908efc:	7632ce        	blt	a3, a6, 908ece <ath_hal_reg_write_tgt+0xe>
		t = (struct registerWrite *)(data+i);

		ath_hal_reg_write_filter(ah, t->reg, t->val);
	}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908eff:	c0d0      	movi.n	a13, 0
  908f01:	8a23      	l32i.n	a10, a2, 12
  908f03:	ded0      	mov.n	a14, a13
  908f05:	5bfef8        	call8	908ae8 <wmi_cmd_rsp>
  908f08:	d10f      	retw.n
	...

00908f0c <ath_hal_reg_read_tgt>:
		return ioread32_mac(addr);
}

static void ath_hal_reg_read_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  908f0c:	6c1016        	entry	a1, 176
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  908f0f:	272d05        	addmi	a7, a2, 0x500
  908f12:	887b      	l32i.n	a8, a7, 44
		return ioread32_mac(addr);
}

static void ath_hal_reg_read_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  908f14:	03034f        	extui	a3, a3, 0, 16
  908f17:	04044f        	extui	a4, a4, 0, 16
	struct ath_hal *ah = sc->sc_ah;
	a_uint32_t addr;
	a_uint32_t val[32];
	int i;

	for (i = 0; i < datalen; i += sizeof(a_int32_t)) {
  908f1a:	c070      	movi.n	a7, 0
  908f1c:	600019        	j	908f39 <ath_hal_reg_read_tgt+0x2d>
  908f1f:	00a759        	extui	a7, a0, 26, 10
		addr = *(a_uint32_t *)(data + i);
		addr = adf_os_ntohl(addr);

		val[i/sizeof(a_int32_t)] =
			adf_os_ntohl(ath_reg_read_filter(ah, addr));
  908f22:	8b90      	l32i.n	a11, a9, 0
  908f24:	da80      	mov.n	a10, a8
  908f26:	281620        	s32i	a8, a1, 128
  908f29:	5bfc25        	call8	907fc0 <ath_reg_read_filter>

	for (i = 0; i < datalen; i += sizeof(a_int32_t)) {
		addr = *(a_uint32_t *)(data + i);
		addr = adf_os_ntohl(addr);

		val[i/sizeof(a_int32_t)] =
  908f2c:	072914        	srli	a9, a7, 2
  908f2f:	01990a        	addx4	a9, a9, a1
	else
		/* MAC registers */
		return ioread32_mac(addr);
}

static void ath_hal_reg_read_tgt(void *Context, A_UINT16 Command,
  908f32:	281220        	l32i	a8, a1, 128

	for (i = 0; i < datalen; i += sizeof(a_int32_t)) {
		addr = *(a_uint32_t *)(data + i);
		addr = adf_os_ntohl(addr);

		val[i/sizeof(a_int32_t)] =
  908f35:	9a90      	s32i.n	a10, a9, 0
	else
		/* MAC registers */
		return ioread32_mac(addr);
}

static void ath_hal_reg_read_tgt(void *Context, A_UINT16 Command,
  908f37:	b477      	addi.n	a7, a7, 4
	struct ath_hal *ah = sc->sc_ah;
	a_uint32_t addr;
	a_uint32_t val[32];
	int i;

	for (i = 0; i < datalen; i += sizeof(a_int32_t)) {
  908f39:	7672e3        	blt	a7, a6, 908f20 <ath_hal_reg_read_tgt+0x14>

		val[i/sizeof(a_int32_t)] =
			adf_os_ntohl(ath_reg_read_filter(ah, addr));
	}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &val[0], datalen);
  908f3c:	8a23      	l32i.n	a10, a2, 12
  908f3e:	db30      	mov.n	a11, a3
  908f40:	dc40      	mov.n	a12, a4
  908f42:	dd10      	mov.n	a13, a1
  908f44:	de60      	mov.n	a14, a6
  908f46:	5bfee8        	call8	908ae8 <wmi_cmd_rsp>
  908f49:	d10f      	retw.n
	...

00908f4c <ath_vap_create_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_create_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
			       A_UINT8 *data, a_int32_t datalen)
{
  908f4c:	6c1004        	entry	a1, 32
	vap->iv_rtsthreshold    = adf_os_ntohs(vap->iv_rtsthreshold);
	vap->iv_opmode          = adf_os_ntohl(vap->iv_opmode);

	vap_index = vap->iv_vapindex;

	adf_os_assert(sc->sc_vap[vap_index].av_valid == 0);
  908f4f:	265000        	l8ui	a6, a5, 0
  908f52:	196a17        	l32r	a9, 8e37b0 <_HIFusb_isr_handler+0xcc>
  908f55:	0c6811        	slli	a8, a6, 4
  908f58:	a688      	add.n	a8, a8, a6
  908f5a:	02880a        	addx4	a8, a8, a2
  908f5d:	a988      	add.n	a8, a8, a9
  908f5f:	28800a        	l8ui	a8, a8, 10
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_create_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
			       A_UINT8 *data, a_int32_t datalen)
{
  908f62:	03034f        	extui	a3, a3, 0, 16
  908f65:	04044f        	extui	a4, a4, 0, 16
	vap->iv_rtsthreshold    = adf_os_ntohs(vap->iv_rtsthreshold);
	vap->iv_opmode          = adf_os_ntohl(vap->iv_opmode);

	vap_index = vap->iv_vapindex;

	adf_os_assert(sc->sc_vap[vap_index].av_valid == 0);
  908f68:	c985      	beqz.n	a8, 908f81 <ath_vap_create_tgt+0x35>
  908f6a:	186915        	l32r	a8, 8e33c0 <athos_indirection_table_install+0x1e4c>
  908f6d:	1a69f6        	l32r	a10, 8e3748 <_HIFusb_isr_handler+0x64>
  908f70:	288212        	l32i	a8, a8, 72
  908f73:	1b6a1c        	l32r	a11, 8e37e4 <_HIFusb_isr_handler+0x100>
  908f76:	0b8000        	callx8	a8
  908f79:	18697a        	l32r	a8, 8e3564 <_HIFusb_start+0xc4>
  908f7c:	0c0200        	memw
  908f7f:	8880      	l32i.n	a8, a8, 0

	adf_os_mem_copy(&(sc->sc_vap[vap_index].av_vap), vap,
  908f81:	0c6811        	slli	a8, a6, 4
  908f84:	a686      	add.n	a6, a8, a6
  908f86:	1a6a18        	l32r	a10, 8e37e8 <HIFusb_DescTraceDump>
  908f89:	0e6611        	slli	a6, a6, 2
  908f8c:	aa6a      	add.n	a10, a6, a10
  908f8e:	aa2a      	add.n	a10, a2, a10
  908f90:	db50      	mov.n	a11, a5
  908f92:	b8aa      	addi.n	a10, a10, 8
  908f94:	c0cc      	movi.n	a12, 12
  908f96:	5bfaf6        	call8	907b70 <__adf_os_mem_copy>
			VAP_TARGET_SIZE);

	sc->sc_vap[vap_index].av_bcbuf = asf_tailq_first(&(sc->sc_bbuf));
  908f99:	282d16        	addmi	a8, a2, 0x1600
  908f9c:	156a1d        	l32r	a5, 8e3810 <HIFusb_DescTraceDump+0x28>
  908f9f:	a626      	add.n	a6, a2, a6
  908fa1:	888a      	l32i.n	a8, a8, 40
  908fa3:	a565      	add.n	a5, a6, a5
  908fa5:	9853      	s32i.n	a8, a5, 12
	sc->sc_vap[vap_index].av_valid = 1;
  908fa7:	156a17        	l32r	a5, 8e3804 <HIFusb_DescTraceDump+0x1c>

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908faa:	c0d0      	movi.n	a13, 0

	adf_os_mem_copy(&(sc->sc_vap[vap_index].av_vap), vap,
			VAP_TARGET_SIZE);

	sc->sc_vap[vap_index].av_bcbuf = asf_tailq_first(&(sc->sc_bbuf));
	sc->sc_vap[vap_index].av_valid = 1;
  908fac:	a566      	add.n	a6, a6, a5
  908fae:	c051      	movi.n	a5, 1
  908fb0:	25640a        	s8i	a5, a6, 10

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  908fb3:	8a23      	l32i.n	a10, a2, 12
  908fb5:	db30      	mov.n	a11, a3
  908fb7:	dc40      	mov.n	a12, a4
  908fb9:	ded0      	mov.n	a14, a13
  908fbb:	5bfecb        	call8	908ae8 <wmi_cmd_rsp>
  908fbe:	d10f      	retw.n

00908fc0 <ath_vap_delete_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
			       A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  908fc0:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint8_t vap_index;

	vap_index = *(a_uint8_t *)data;
  908fc3:	295000        	l8ui	a9, a5, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
			       A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  908fc6:	030b4f        	extui	a11, a3, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint8_t vap_index;

	vap_index = *(a_uint8_t *)data;

	sc->sc_vap[vap_index].av_valid = 0;
  908fc9:	0c9811        	slli	a8, a9, 4
  908fcc:	a988      	add.n	a8, a8, a9
  908fce:	136a17        	l32r	a3, 8e382c <HIFusb_DescTraceDump+0x44>
  908fd1:	02880a        	addx4	a8, a8, a2
  908fd4:	a383      	add.n	a3, a8, a3
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
			       A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  908fd6:	040c4f        	extui	a12, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint8_t vap_index;

	vap_index = *(a_uint8_t *)data;

	sc->sc_vap[vap_index].av_valid = 0;
  908fd9:	c040      	movi.n	a4, 0
  908fdb:	24340a        	s8i	a4, a3, 10
	sc->sc_vap[vap_index].av_bcbuf = NULL;
  908fde:	136a1d        	l32r	a3, 8e3854 <HIFusb_DescTraceDump+0x6c>

static void ath_node_vdelete_tgt(struct ath_softc_tgt *sc, a_uint8_t vap_index)
{
	a_int32_t i;

	for (i = 0; i < TARGET_NODE_MAX; i++) {
  908fe1:	1d6a1e        	l32r	a13, 8e385c <HIFusb_DescTraceDump+0x74>
	a_uint8_t vap_index;

	vap_index = *(a_uint8_t *)data;

	sc->sc_vap[vap_index].av_valid = 0;
	sc->sc_vap[vap_index].av_bcbuf = NULL;
  908fe4:	a383      	add.n	a3, a8, a3
  908fe6:	c080      	movi.n	a8, 0
  908fe8:	9833      	s32i.n	a8, a3, 12
		ath_hal_reg_write_filter(ah, buf->reg, val);
	}
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
  908fea:	2f5a45        	movi	a15, 0x545
  908fed:	237a3c        	movi	a3, 0x73c
{
	a_int32_t i;

	for (i = 0; i < TARGET_NODE_MAX; i++) {
		if(sc->sc_sta[i].ni.ni_vapindex == vap_index)
			sc->sc_sta[i].an_valid = 0;
  908ff0:	d480      	mov.n	a4, a8
  908ff2:	2e2a0c        	movi	a14, 0x20c
		ath_hal_reg_write_filter(ah, buf->reg, val);
	}
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
  908ff5:	a82a      	add.n	a10, a2, a8
  908ff7:	afa5      	add.n	a5, a10, a15
static void ath_node_vdelete_tgt(struct ath_softc_tgt *sc, a_uint8_t vap_index)
{
	a_int32_t i;

	for (i = 0; i < TARGET_NODE_MAX; i++) {
		if(sc->sc_sta[i].ni.ni_vapindex == vap_index)
  908ff9:	255000        	l8ui	a5, a5, 0
  908ffc:	795904        	bne	a5, a9, 909004 <ath_vap_delete_tgt+0x44>
		ath_hal_reg_write_filter(ah, buf->reg, val);
	}
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
  908fff:	a3aa      	add.n	a10, a10, a3
{
	a_int32_t i;

	for (i = 0; i < TARGET_NODE_MAX; i++) {
		if(sc->sc_sta[i].ni.ni_vapindex == vap_index)
			sc->sc_sta[i].an_valid = 0;
  909001:	24a400        	s8i	a4, a10, 0
  909004:	ae88      	add.n	a8, a8, a14

static void ath_node_vdelete_tgt(struct ath_softc_tgt *sc, a_uint8_t vap_index)
{
	a_int32_t i;

	for (i = 0; i < TARGET_NODE_MAX; i++) {
  909006:	7d89eb        	bne	a8, a13, 908ff5 <ath_vap_delete_tgt+0x35>
	vap_index = *(a_uint8_t *)data;

	sc->sc_vap[vap_index].av_valid = 0;
	sc->sc_vap[vap_index].av_bcbuf = NULL;
	ath_node_vdelete_tgt(sc, vap_index);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909009:	c0d0      	movi.n	a13, 0
  90900b:	8a23      	l32i.n	a10, a2, 12
  90900d:	ded0      	mov.n	a14, a13
  90900f:	5bfeb6        	call8	908ae8 <wmi_cmd_rsp>
  909012:	d10f      	retw.n

00909014 <ath_node_cleanup_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_cleanup_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909014:	6c1004        	entry	a1, 32
	a_uint8_t node_index;
	a_uint8_t *nodedata;

	nodedata = (a_uint8_t *)data;
	node_index = *nodedata;
	sc->sc_sta[node_index].an_valid = 0;
  909017:	285000        	l8ui	a8, a5, 0

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90901a:	c0d0      	movi.n	a13, 0
	a_uint8_t node_index;
	a_uint8_t *nodedata;

	nodedata = (a_uint8_t *)data;
	node_index = *nodedata;
	sc->sc_sta[node_index].an_valid = 0;
  90901c:	0a8911        	slli	a9, a8, 6
  90901f:	a899      	add.n	a9, a9, a8
  909021:	089809        	addx2	a8, a9, a8
  909024:	02880a        	addx4	a8, a8, a2
  909027:	297a30        	movi	a9, 0x730
  90902a:	a988      	add.n	a8, a8, a9
  90902c:	c090      	movi.n	a9, 0
  90902e:	29840c        	s8i	a9, a8, 12

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909031:	8a23      	l32i.n	a10, a2, 12
  909033:	030b4f        	extui	a11, a3, 0, 16
  909036:	040c4f        	extui	a12, a4, 0, 16
  909039:	ded0      	mov.n	a14, a13
  90903b:	5bfeab        	call8	908ae8 <wmi_cmd_rsp>
  90903e:	d10f      	retw.n

00909040 <ath_node_create_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_create_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909040:	6c1004        	entry	a1, 32
	a_uint8_t vap_index;
	a_uint8_t node_index;

	node = (struct ieee80211_node_target *)data;

	node_index = node->ni_nodeindex;
  909043:	26500c        	l8ui	a6, a5, 12
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_create_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909046:	db50      	mov.n	a11, a5

	node->ni_htcap = adf_os_ntohs(node->ni_htcap);
	node->ni_flags = adf_os_ntohs(node->ni_flags);
	node->ni_maxampdu = adf_os_ntohs(node->ni_maxampdu);

	adf_os_mem_copy(&(sc->sc_sta[node_index].ni), node,
  909048:	0a6511        	slli	a5, a6, 6
  90904b:	a655      	add.n	a5, a5, a6
  90904d:	065509        	addx2	a5, a5, a6
  909050:	0e5511        	slli	a5, a5, 2
  909053:	275a30        	movi	a7, 0x530
  909056:	a75a      	add.n	a10, a5, a7
  909058:	aa2a      	add.n	a10, a2, a10
  90905a:	b8aa      	addi.n	a10, a10, 8
			NODE_TARGET_SIZE);

    	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
  90905c:	a525      	add.n	a5, a2, a5
  90905e:	2c0a16        	movi	a12, 22
  909061:	5bfac3        	call8	907b70 <__adf_os_mem_copy>
  909064:	a757      	add.n	a7, a5, a7
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
  909066:	287015        	l8ui	a8, a7, 21
  909069:	295a50        	movi	a9, 0x550
  90906c:	a955      	add.n	a5, a5, a9
  90906e:	0c8911        	slli	a9, a8, 4
  909071:	a899      	add.n	a9, a9, a8
  909073:	186a18        	l32r	a8, 8e38d4 <HIFusb_DescTraceDump+0xec>
  909076:	0e9911        	slli	a9, a9, 2
  909079:	a89a      	add.n	a10, a9, a8
  90907b:	aa2a      	add.n	a10, a2, a10
  90907d:	b8aa      	addi.n	a10, a10, 8
  90907f:	9a52      	s32i.n	a10, a5, 8
	if(sc->sc_sta[node_index].ni.ni_is_vapnode == 1)
  909081:	257016        	l8ui	a5, a7, 22
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_create_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909084:	03034f        	extui	a3, a3, 0, 16
  909087:	04044f        	extui	a4, a4, 0, 16
	adf_os_mem_copy(&(sc->sc_sta[node_index].ni), node,
			NODE_TARGET_SIZE);

    	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
	if(sc->sc_sta[node_index].ni.ni_is_vapnode == 1)
  90908a:	695106        	bnei	a5, 1, 909094 <ath_node_create_tgt+0x54>
		sc->sc_vap[vap_index].av_vap.iv_nodeindex = node_index;
  90908d:	a929      	add.n	a9, a2, a9
  90908f:	a898      	add.n	a8, a9, a8
  909091:	268415        	s8i	a6, a8, 21

	sc->sc_sta[node_index].an_valid = 1;
  909094:	0a6511        	slli	a5, a6, 6
  909097:	a655      	add.n	a5, a5, a6
  909099:	065609        	addx2	a6, a5, a6
  90909c:	0e6611        	slli	a6, a6, 2
  90909f:	a625      	add.n	a5, a2, a6
  9090a1:	277a30        	movi	a7, 0x730
  9090a4:	a757      	add.n	a7, a5, a7
  9090a6:	c081      	movi.n	a8, 1
  9090a8:	28740c        	s8i	a8, a7, 12
	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
	sc->sc_sta[node_index].ni.ni_iv32 = 0;

	owl_tgt_node_init(&sc->sc_sta[node_index]);
  9090ab:	2a5a30        	movi	a10, 0x530
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
	if(sc->sc_sta[node_index].ni.ni_is_vapnode == 1)
		sc->sc_vap[vap_index].av_vap.iv_nodeindex = node_index;

	sc->sc_sta[node_index].an_valid = 1;
	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
  9090ae:	285a40        	movi	a8, 0x540
  9090b1:	a858      	add.n	a8, a5, a8
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
	sc->sc_sta[node_index].ni.ni_iv32 = 0;

	owl_tgt_node_init(&sc->sc_sta[node_index]);
  9090b3:	aa66      	add.n	a6, a6, a10
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
	if(sc->sc_sta[node_index].ni.ni_is_vapnode == 1)
		sc->sc_vap[vap_index].av_vap.iv_nodeindex = node_index;

	sc->sc_sta[node_index].an_valid = 1;
	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
  9090b5:	c050      	movi.n	a5, 0
  9090b7:	258508        	s16i	a5, a8, 16
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
  9090ba:	258509        	s16i	a5, a8, 18
	sc->sc_sta[node_index].ni.ni_iv32 = 0;

	owl_tgt_node_init(&sc->sc_sta[node_index]);
  9090bd:	a62a      	add.n	a10, a2, a6
		sc->sc_vap[vap_index].av_vap.iv_nodeindex = node_index;

	sc->sc_sta[node_index].an_valid = 1;
	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
	sc->sc_sta[node_index].ni.ni_iv32 = 0;
  9090bf:	c050      	movi.n	a5, 0
  9090c1:	9585      	s32i.n	a5, a8, 20

	owl_tgt_node_init(&sc->sc_sta[node_index]);
  9090c3:	b8aa      	addi.n	a10, a10, 8
  9090c5:	5811d2        	call8	90d810 <owl_tgt_node_init>

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9090c8:	8a23      	l32i.n	a10, a2, 12
  9090ca:	db30      	mov.n	a11, a3
  9090cc:	dc40      	mov.n	a12, a4
  9090ce:	dd50      	mov.n	a13, a5
  9090d0:	de50      	mov.n	a14, a5
  9090d2:	5bfe85        	call8	908ae8 <wmi_cmd_rsp>
  9090d5:	d10f      	retw.n
	...

009090d8 <ath_setcurmode_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_setcurmode_tgt(void *Context, A_UINT16 Command,
			       A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9090d8:	6c1004        	entry	a1, 32
	a_uint16_t mode;

	mode= *((a_uint16_t *)data);
	mode = adf_os_ntohs(mode);

	ath_setcurmode(sc, mode);
  9090db:	265100        	l16ui	a6, a5, 0
 * @param[in] size  buffer size
 */
static inline void
adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
    __adf_os_mem_set(buf, b, size);
  9090de:	2a2a08        	movi	a10, 0x208
  9090e1:	0a2a08        	add	a10, a2, a10
  9090e4:	2b0aff        	movi	a11, 255
  9090e7:	2c1a00        	movi	a12, 0x100
	const HAL_RATE_TABLE *rt;
	a_int32_t i;

	adf_os_mem_set(sc->sc_rixmap, 0xff, sizeof(sc->sc_rixmap));

	rt = sc->sc_rates[mode];
  9090ea:	02650a        	addx4	a5, a6, a2
  9090ed:	5bfaa5        	call8	907b84 <__adf_os_mem_set>
  9090f0:	25527f        	l32i	a5, a5, 0x1fc
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_setcurmode_tgt(void *Context, A_UINT16 Command,
			       A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9090f3:	03034f        	extui	a3, a3, 0, 16
  9090f6:	04044f        	extui	a4, a4, 0, 16
	a_int32_t i;

	adf_os_mem_set(sc->sc_rixmap, 0xff, sizeof(sc->sc_rixmap));

	rt = sc->sc_rates[mode];
	adf_os_assert(rt != NULL);
  9090f9:	cd55      	bnez.n	a5, 909112 <ath_setcurmode_tgt+0x3a>
  9090fb:	186915        	l32r	a8, 8e3550 <_HIFusb_start+0xb0>
  9090fe:	1a69f6        	l32r	a10, 8e38d8 <HIFusb_DescTraceDump+0xf0>
  909101:	288212        	l32i	a8, a8, 72
  909104:	1b6a1f        	l32r	a11, 8e3980 <HIFusb_DescTraceDump+0x198>
  909107:	0b8000        	callx8	a8
  90910a:	18697a        	l32r	a8, 8e36f4 <_HIFusb_isr_handler+0x10>
  90910d:	0c0200        	memw
  909110:	8880      	l32i.n	a8, a8, 0
  909112:	d950      	mov.n	a9, a5
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_setcurmode_tgt(void *Context, A_UINT16 Command,
			       A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909114:	c080      	movi.n	a8, 0
  909116:	60000c        	j	909126 <ath_setcurmode_tgt+0x4e>

	rt = sc->sc_rates[mode];
	adf_os_assert(rt != NULL);

	for (i = 0; i < rt->rateCount; i++) {
		sc->sc_rixmap[rt->info[i].rateCode] = i;
  909119:	2a9020        	l8ui	a10, a9, 32
  90911c:	aa2a      	add.n	a10, a2, a10
  90911e:	2aad02        	addmi	a10, a10, 0x200
  909121:	28a408        	s8i	a8, a10, 8
	adf_os_mem_set(sc->sc_rixmap, 0xff, sizeof(sc->sc_rixmap));

	rt = sc->sc_rates[mode];
	adf_os_assert(rt != NULL);

	for (i = 0; i < rt->rateCount; i++) {
  909124:	b188      	addi.n	a8, a8, 1
  909126:	8a50      	l32i.n	a10, a5, 0
  909128:	299c14        	addi	a9, a9, 20
  90912b:	7a82ea        	blt	a8, a10, 909119 <ath_setcurmode_tgt+0x41>
		sc->sc_rixmap[rt->info[i].rateCode] = i;
	}

	sc->sc_currates = rt;
	sc->sc_curmode = mode;
	sc->sc_protrix = ((mode == IEEE80211_MODE_11NG) ? 3 : 0);
  90912e:	c0e0      	movi.n	a14, 0

	for (i = 0; i < rt->rateCount; i++) {
		sc->sc_rixmap[rt->info[i].rateCode] = i;
	}

	sc->sc_currates = rt;
  909130:	252681        	s32i	a5, a2, 0x204
	sc->sc_curmode = mode;
  909133:	2626c2        	s32i	a6, a2, 0x308
	sc->sc_protrix = ((mode == IEEE80211_MODE_11NG) ? 3 : 0);
  909136:	c053      	movi.n	a5, 3
  909138:	b066      	addi.n	a6, a6, -1
  90913a:	06e539        	movnez	a5, a14, a6
	mode= *((a_uint16_t *)data);
	mode = adf_os_ntohs(mode);

	ath_setcurmode(sc, mode);

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90913d:	8a23      	l32i.n	a10, a2, 12
		sc->sc_rixmap[rt->info[i].rateCode] = i;
	}

	sc->sc_currates = rt;
	sc->sc_curmode = mode;
	sc->sc_protrix = ((mode == IEEE80211_MODE_11NG) ? 3 : 0);
  90913f:	262d03        	addmi	a6, a2, 0x300
  909142:	25640c        	s8i	a5, a6, 12
	mode= *((a_uint16_t *)data);
	mode = adf_os_ntohs(mode);

	ath_setcurmode(sc, mode);

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909145:	db30      	mov.n	a11, a3
  909147:	dc40      	mov.n	a12, a4
  909149:	dde0      	mov.n	a13, a14
  90914b:	5bfe67        	call8	908ae8 <wmi_cmd_rsp>
  90914e:	d10f      	retw.n

00909150 <ath_flushrecv_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo,NULL, 0);
}

static void ath_flushrecv_tgt(void *Context, A_UINT16 Command,
			      A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909150:	6c1004        	entry	a1, 32
  909153:	03034f        	extui	a3, a3, 0, 16
  909156:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_rx_buf *bf;

	asf_tailq_foreach(bf, &sc->sc_rxbuf, bf_list)
  909159:	2522d5        	l32i	a5, a2, 0x354
  90915c:	60002e        	j	90918e <ath_flushrecv_tgt+0x3e>
  90915f:	000000        	ill
		if (bf->bf_skb != NULL) {
  909162:	8658      	l32i.n	a6, a5, 32
  909164:	ca64      	beqz.n	a6, 90918c <ath_flushrecv_tgt+0x3c>
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  909166:	8b50      	l32i.n	a11, a5, 0
  909168:	2a2246        	l32i	a10, a2, 0x118
  90916b:	c0c1      	movi.n	a12, 1
  90916d:	5bf646        	call8	906a88 <__adf_nbuf_unmap>
			adf_nbuf_unmap(sc->sc_dev, bf->bf_dmamap,
				       ADF_OS_DMA_FROM_DEVICE);
			ath_free_rx_skb(sc, adf_nbuf_queue_remove(&bf->bf_skbhead));
  909170:	186915        	l32r	a8, 8e35c4 <_HIFusb_start+0x124>
  909173:	8720      	l32i.n	a7, a2, 0
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  909175:	2a5c14        	addi	a10, a5, 20
  909178:	26829e        	l32i	a6, a8, 0x278
  90917b:	5bf62f        	call8	906a38 <__adf_nbuf_queue_remove>
  90917e:	dca0      	mov.n	a12, a10
  909180:	2b0a03        	movi	a11, 3
  909183:	da70      	mov.n	a10, a7
  909185:	0b6000        	callx8	a6
			bf->bf_skb = NULL;
  909188:	c060      	movi.n	a6, 0
  90918a:	9658      	s32i.n	a6, a5, 32
			      A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_rx_buf *bf;

	asf_tailq_foreach(bf, &sc->sc_rxbuf, bf_list)
  90918c:	8559      	l32i.n	a5, a5, 36
  90918e:	655fd0        	bnez	a5, 909162 <ath_flushrecv_tgt+0x12>
				       ADF_OS_DMA_FROM_DEVICE);
			ath_free_rx_skb(sc, adf_nbuf_queue_remove(&bf->bf_skbhead));
			bf->bf_skb = NULL;
		}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909191:	8a23      	l32i.n	a10, a2, 12
  909193:	db30      	mov.n	a11, a3
  909195:	dc40      	mov.n	a12, a4
  909197:	dd50      	mov.n	a13, a5
  909199:	de50      	mov.n	a14, a5
  90919b:	5bfe53        	call8	908ae8 <wmi_cmd_rsp>
  90919e:	d10f      	retw.n

009091a0 <ath_stoprecv_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_stoprecv_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9091a0:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  9091a3:	252d05        	addmi	a5, a2, 0x500
  9091a6:	855b      	l32i.n	a5, a5, 44
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_stoprecv_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9091a8:	03034f        	extui	a3, a3, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_stopPcuReceive(ah);
  9091ab:	285224        	l32i	a8, a5, 144
  9091ae:	055a02        	or	a10, a5, a5
  9091b1:	0b8000        	callx8	a8
	ah->ah_setRxFilter(ah, 0);
  9091b4:	8859      	l32i.n	a8, a5, 36
  9091b6:	da50      	mov.n	a10, a5
  9091b8:	c0b0      	movi.n	a11, 0
  9091ba:	0b8000        	callx8	a8
	ah->ah_stopDmaReceive(ah);
  9091bd:	285223        	l32i	a8, a5, 140
  9091c0:	da50      	mov.n	a10, a5
  9091c2:	0b8000        	callx8	a8

	sc->sc_rxlink = NULL;
  9091c5:	c0e0      	movi.n	a14, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_stoprecv_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9091c7:	04044f        	extui	a4, a4, 0, 16
	ah->ah_stopPcuReceive(ah);
	ah->ah_setRxFilter(ah, 0);
	ah->ah_stopDmaReceive(ah);

	sc->sc_rxlink = NULL;
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9091ca:	8a23      	l32i.n	a10, a2, 12

	ah->ah_stopPcuReceive(ah);
	ah->ah_setRxFilter(ah, 0);
	ah->ah_stopDmaReceive(ah);

	sc->sc_rxlink = NULL;
  9091cc:	2e26ef        	s32i	a14, a2, 0x3bc
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9091cf:	db30      	mov.n	a11, a3
  9091d1:	dc40      	mov.n	a12, a4
  9091d3:	dde0      	mov.n	a13, a14
  9091d5:	5bfe44        	call8	908ae8 <wmi_cmd_rsp>
  9091d8:	d10f      	retw.n
	...

009091dc <ath_startrecv_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_startrecv_tgt(void *Context, A_UINT16 Command,
			      A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9091dc:	6c1004        	entry	a1, 32
#undef PA2DESC
}

static a_int32_t ath_startrecv(struct ath_softc_tgt *sc)
{
	struct ath_hal *ah = sc->sc_ah;
  9091df:	252d05        	addmi	a5, a2, 0x500
  9091e2:	865b      	l32i.n	a6, a5, 44
	struct ath_rx_desc *ds;

	sc->sc_rxbufsize = 1024+512+128;
  9091e4:	256a80        	movi	a5, 0x680
  9091e7:	25264a        	s32i	a5, a2, 0x128
	sc->sc_rxlink = NULL;
  9091ea:	c050      	movi.n	a5, 0
  9091ec:	2526ef        	s32i	a5, a2, 0x3bc

	sc->sc_rxdesc_held = NULL;
  9091ef:	2526db        	s32i	a5, a2, 0x36c
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_startrecv_tgt(void *Context, A_UINT16 Command,
			      A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9091f2:	03034f        	extui	a3, a3, 0, 16
  9091f5:	04044f        	extui	a4, a4, 0, 16
	sc->sc_rxbufsize = 1024+512+128;
	sc->sc_rxlink = NULL;

	sc->sc_rxdesc_held = NULL;

	asf_tailq_foreach(ds, &sc->sc_rxdesc, ds_list) {
  9091f8:	2522d9        	l32i	a5, a2, 0x364
  9091fb:	600027        	j	909226 <ath_startrecv_tgt+0x4a>
		a_int32_t error = ath_rxdesc_init(sc, ds);
  9091fe:	da20      	mov.n	a10, a2
  909200:	db50      	mov.n	a11, a5
  909202:	5bfae0        	call8	907d84 <ath_rxdesc_init>
		if (error != 0) {
  909205:	65a049        	bnez	a10, 909252 <ath_startrecv_tgt+0x76>
	sc->sc_rxbufsize = 1024+512+128;
	sc->sc_rxlink = NULL;

	sc->sc_rxdesc_held = NULL;

	asf_tailq_foreach(ds, &sc->sc_rxdesc, ds_list) {
  909208:	2a504c        	l8ui	a10, a5, 76
  90920b:	29504d        	l8ui	a9, a5, 77
  90920e:	28504e        	l8ui	a8, a5, 78
  909211:	08aa10        	slli	a10, a10, 24
  909214:	009911        	slli	a9, a9, 16
  909217:	0a9902        	or	a9, a9, a10
  90921a:	088811        	slli	a8, a8, 8
  90921d:	25504f        	l8ui	a5, a5, 79
  909220:	098802        	or	a8, a8, a9
  909223:	085502        	or	a5, a5, a8
  909226:	655fd4        	bnez	a5, 9091fe <ath_startrecv_tgt+0x22>
			return error;
		}
	}

	ds = asf_tailq_first(&sc->sc_rxdesc);
	ah->ah_setRxDP(ah, ds->ds_daddr);
  909229:	2522d9        	l32i	a5, a2, 0x364
  90922c:	2a5048        	l8ui	a10, a5, 72
  90922f:	295049        	l8ui	a9, a5, 73
  909232:	28504a        	l8ui	a8, a5, 74
  909235:	08aa10        	slli	a10, a10, 24
  909238:	009911        	slli	a9, a9, 16
  90923b:	0a9902        	or	a9, a9, a10
  90923e:	2b504b        	l8ui	a11, a5, 75
  909241:	088811        	slli	a8, a8, 8
  909244:	098802        	or	a8, a8, a9
  909247:	25621f        	l32i	a5, a6, 124
  90924a:	da60      	mov.n	a10, a6
  90924c:	08bb02        	or	a11, a11, a8
  90924f:	0b5000        	callx8	a5
{

	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;

	ath_startrecv(sc);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909252:	c0d0      	movi.n	a13, 0
  909254:	8a23      	l32i.n	a10, a2, 12
  909256:	db30      	mov.n	a11, a3
  909258:	dc40      	mov.n	a12, a4
  90925a:	0dde02        	or	a14, a13, a13
  90925d:	5bfe22        	call8	908ae8 <wmi_cmd_rsp>
  909260:	d10f      	retw.n
	...

00909264 <ath_draintxq_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_draintxq_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909264:	6c1004        	entry	a1, 32
	owltgt_txq_drain(sc, txq);
}

static void ath_draintxq(struct ath_softc_tgt *sc, HAL_BOOL drain_softq)
{
	struct ath_hal *ah = sc->sc_ah;
  909267:	262d05        	addmi	a6, a2, 0x500
	a_uint16_t i;
	struct ath_txq *txq = NULL;
	struct ath_atx_tid *tid = NULL;

	ath_tx_status_clear(sc);
  90926a:	da20      	mov.n	a10, a2
	sc->sc_tx_draining = 1;
  90926c:	252d01        	addmi	a5, a2, 0x100
	owltgt_txq_drain(sc, txq);
}

static void ath_draintxq(struct ath_softc_tgt *sc, HAL_BOOL drain_softq)
{
	struct ath_hal *ah = sc->sc_ah;
  90926f:	27620b        	l32i	a7, a6, 44
	a_uint16_t i;
	struct ath_txq *txq = NULL;
	struct ath_atx_tid *tid = NULL;

	ath_tx_status_clear(sc);
  909272:	581178        	call8	90d854 <ath_tx_status_clear>
	sc->sc_tx_draining = 1;
  909275:	295024        	l8ui	a9, a5, 36
  909278:	c480      	movi.n	a8, 64
  90927a:	089802        	or	a8, a9, a8
  90927d:	285424        	s8i	a8, a5, 36

	ah->ah_stopTxDma(ah, sc->sc_bhalq);
  909280:	2b501c        	l8ui	a11, a5, 28
  909283:	28720d        	l32i	a8, a7, 52
  909286:	077a02        	or	a10, a7, a7
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_draintxq_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909289:	03034f        	extui	a3, a3, 0, 16
  90928c:	04044f        	extui	a4, a4, 0, 16
	struct ath_atx_tid *tid = NULL;

	ath_tx_status_clear(sc);
	sc->sc_tx_draining = 1;

	ah->ah_stopTxDma(ah, sc->sc_bhalq);
  90928f:	0b8000        	callx8	a8
  909292:	c050      	movi.n	a5, 0

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i))
  909294:	272d03        	addmi	a7, a2, 0x300
  909297:	2770c8        	l8ui	a7, a7, 200
  90929a:	005004        	ssr	a5
  90929d:	07071b        	sra	a7, a7
  9092a0:	7f7710        	bbci	a7, 31, 9092b4 <ath_draintxq_tgt+0x50>
			ath_tx_stopdma(sc, ATH_TXQ(sc, i));
  9092a3:	285c1e        	addi	a8, a5, 30
/* TX */
/******/

static void ath_tx_stopdma(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	struct ath_hal *ah = sc->sc_ah;
  9092a6:	8a6b      	l32i.n	a10, a6, 44

	ah->ah_stopTxDma(ah, sc->sc_bhalq);

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i))
			ath_tx_stopdma(sc, ATH_TXQ(sc, i));
  9092a8:	0b8811        	slli	a8, a8, 5

static void ath_tx_stopdma(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_stopTxDma(ah, txq->axq_qnum);
  9092ab:	a828      	add.n	a8, a2, a8
  9092ad:	87ad      	l32i.n	a7, a10, 52
  9092af:	8b83      	l32i.n	a11, a8, 12
  9092b1:	0b7000        	callx8	a7
  9092b4:	b155      	addi.n	a5, a5, 1
	ath_tx_status_clear(sc);
	sc->sc_tx_draining = 1;

	ah->ah_stopTxDma(ah, sc->sc_bhalq);

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
  9092b6:	6959da        	bnei	a5, 10, 909294 <ath_draintxq_tgt+0x30>
  9092b9:	c050      	movi.n	a5, 0
			txq = ATH_TXQ(sc,i);
			while (!asf_tailq_empty(&txq->axq_tidq)){
				TAILQ_DEQ(&txq->axq_tidq, tid, tid_qelem);
				if(tid == NULL)
					break;
				tid->sched = AH_FALSE;
  9092bb:	d650      	mov.n	a6, a5
	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i))
			ath_tx_stopdma(sc, ATH_TXQ(sc, i));

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i)) {
  9092bd:	272d03        	addmi	a7, a2, 0x300
  9092c0:	2770c8        	l8ui	a7, a7, 200
  9092c3:	005004        	ssr	a5
  9092c6:	07071b        	sra	a7, a7
  9092c9:	7f7f08        	bbsi	a7, 31, 9092d5 <ath_draintxq_tgt+0x71>
  9092cc:	b155      	addi.n	a5, a5, 1

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i))
			ath_tx_stopdma(sc, ATH_TXQ(sc, i));

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
  9092ce:	6959eb        	bnei	a5, 10, 9092bd <ath_draintxq_tgt+0x59>
  9092d1:	600039        	j	90930e <ath_draintxq_tgt+0xaa>
  9092d4:	00275c        	extui	a7, a0, 18, 13
		if (ATH_TXQ_SETUP(sc, i)) {
			owltgt_tx_processq(sc, ATH_TXQ(sc,i), OWL_TXQ_STOPPED);
  9092d7:	1e0b77        	l32r	a14, 8cc0b4 <_bss_end+0x3b91a4>
  9092da:	11a727        	l32r	a1, 8f2f78 <memset+0xc130>
  9092dd:	bc77      	addi.n	a7, a7, 12
  9092df:	da20      	mov.n	a10, a2
  9092e1:	db70      	mov.n	a11, a7
  9092e3:	c0c1      	movi.n	a12, 1
  9092e5:	58163e        	call8	90ebe0 <owltgt_tx_processq>
  9092e8:	60001a        	j	909306 <ath_draintxq_tgt+0xa2>
  9092eb:	0089b9        	excw

			txq = ATH_TXQ(sc,i);
			while (!asf_tailq_empty(&txq->axq_tidq)){
				TAILQ_DEQ(&txq->axq_tidq, tid, tid_qelem);
  9092ee:	8aba      	l32i.n	a10, a11, 40
  9092f0:	c894      	beqz.n	a9, 9092f8 <ath_draintxq_tgt+0x94>
  9092f2:	9a9a      	s32i.n	a10, a9, 40
  9092f4:	600002        	j	9092fa <ath_draintxq_tgt+0x96>
  9092f7:	009a77        	excw
  9092fa:	8aba      	l32i.n	a10, a11, 40
  9092fc:	99a0      	s32i.n	a9, a10, 0
				if(tid == NULL)
					break;
				tid->sched = AH_FALSE;
  9092fe:	26b435        	s8i	a6, a11, 53
				ath_tgt_tid_drain(sc,tid);
  909301:	da20      	mov.n	a10, a2
  909303:	58120d        	call8	90db38 <ath_tgt_tid_drain>
	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i)) {
			owltgt_tx_processq(sc, ATH_TXQ(sc,i), OWL_TXQ_STOPPED);

			txq = ATH_TXQ(sc,i);
			while (!asf_tailq_empty(&txq->axq_tidq)){
  909306:	8b76      	l32i.n	a11, a7, 24
  909308:	65bfe0        	bnez	a11, 9092ec <ath_draintxq_tgt+0x88>
  90930b:	63ffbd        	j	9092cc <ath_draintxq_tgt+0x68>
				tid->sched = AH_FALSE;
				ath_tgt_tid_drain(sc,tid);
			}
		}

	sc->sc_tx_draining = 0;
  90930e:	252d01        	addmi	a5, a2, 0x100
  909311:	275024        	l8ui	a7, a5, 36
  909314:	26fabf        	movi	a6, -65
  909317:	067601        	and	a6, a7, a6
  90931a:	265424        	s8i	a6, a5, 36
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	HAL_BOOL b = (HAL_BOOL) *(a_int32_t *)data;

	ath_draintxq(Context, b);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90931d:	c0d0      	movi.n	a13, 0
  90931f:	8a23      	l32i.n	a10, a2, 12
  909321:	db30      	mov.n	a11, a3
  909323:	dc40      	mov.n	a12, a4
  909325:	ded0      	mov.n	a14, a13
  909327:	5bfdf0        	call8	908ae8 <wmi_cmd_rsp>
  90932a:	d10f      	retw.n

0090932c <ath_tx_draintxq_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_tx_draintxq_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
				A_UINT8 *data, a_int32_t datalen)
{
  90932c:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint32_t q = *(a_uint32_t *)data;
	struct ath_txq *txq = NULL;

	q = adf_os_ntohl(q);
	txq = ATH_TXQ(sc, q);
  90932f:	8b50      	l32i.n	a11, a5, 0
	ah->ah_stopTxDma(ah, txq->axq_qnum);
}

static void owltgt_txq_drain(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	owltgt_tx_processq(sc, txq, OWL_TXQ_STOPPED);
  909331:	da20      	mov.n	a10, a2
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint32_t q = *(a_uint32_t *)data;
	struct ath_txq *txq = NULL;

	q = adf_os_ntohl(q);
	txq = ATH_TXQ(sc, q);
  909333:	2bbc1e        	addi	a11, a11, 30
  909336:	0bbb11        	slli	a11, a11, 5
  909339:	ab2b      	add.n	a11, a2, a11
	ah->ah_stopTxDma(ah, txq->axq_qnum);
}

static void owltgt_txq_drain(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	owltgt_tx_processq(sc, txq, OWL_TXQ_STOPPED);
  90933b:	2bbc0c        	addi	a11, a11, 12
  90933e:	2c0a01        	movi	a12, 1
  909341:	581627        	call8	90ebe0 <owltgt_tx_processq>
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_tx_draintxq_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
				A_UINT8 *data, a_int32_t datalen)
{
  909344:	03034f        	extui	a3, a3, 0, 16
  909347:	04044f        	extui	a4, a4, 0, 16

	q = adf_os_ntohl(q);
	txq = ATH_TXQ(sc, q);

	ath_tx_draintxq(sc, txq);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90934a:	c0d0      	movi.n	a13, 0
  90934c:	8a23      	l32i.n	a10, a2, 12
  90934e:	db30      	mov.n	a11, a3
  909350:	dc40      	mov.n	a12, a4
  909352:	0dde02        	or	a14, a13, a13
  909355:	5bfde4        	call8	908ae8 <wmi_cmd_rsp>
  909358:	d10f      	retw.n
	...

0090935c <ath_aborttx_dma_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_aborttx_dma_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  90935c:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  90935f:	282d05        	addmi	a8, a2, 0x500
  909362:	8a8b      	l32i.n	a10, a8, 44
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_aborttx_dma_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909364:	03034f        	extui	a3, a3, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_abortTxDma(sc->sc_ah);
  909367:	28a20e        	l32i	a8, a10, 56
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_aborttx_dma_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  90936a:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_abortTxDma(sc->sc_ah);
  90936d:	0b8000        	callx8	a8
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909370:	c0d0      	movi.n	a13, 0
  909372:	8a23      	l32i.n	a10, a2, 12
  909374:	db30      	mov.n	a11, a3
  909376:	dc40      	mov.n	a12, a4
  909378:	ded0      	mov.n	a14, a13
  90937a:	5bfddb        	call8	908ae8 <wmi_cmd_rsp>
  90937d:	d10f      	retw.n
	...

00909380 <ath_stop_tx_dma_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_stop_tx_dma_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909380:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  909383:	292d05        	addmi	a9, a2, 0x500
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_stop_tx_dma_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909386:	03034f        	extui	a3, a3, 0, 16
  909389:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  90938c:	8a9b      	l32i.n	a10, a9, 44
	a_uint32_t q;

	if (data)
  90938e:	c850      	beqz.n	a5, 909392 <ath_stop_tx_dma_tgt+0x12>
		q = *(a_uint32_t *)data;
  909390:	8b50      	l32i.n	a11, a5, 0

	q = adf_os_ntohl(q);
	ah->ah_stopTxDma(ah, q);
  909392:	85ad      	l32i.n	a5, a10, 52
  909394:	0b5000        	callx8	a5
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909397:	c0d0      	movi.n	a13, 0
  909399:	8a23      	l32i.n	a10, a2, 12
  90939b:	db30      	mov.n	a11, a3
  90939d:	dc40      	mov.n	a12, a4
  90939f:	ded0      	mov.n	a14, a13
  9093a1:	5bfdd1        	call8	908ae8 <wmi_cmd_rsp>
  9093a4:	d10f      	retw.n
	...

009093a8 <ath_aborttxq_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_aborttxq_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9093a8:	6c1004        	entry	a1, 32
  9093ab:	03034f        	extui	a3, a3, 0, 16
  9093ae:	04044f        	extui	a4, a4, 0, 16
  9093b1:	250a00        	movi	a5, 0

	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint16_t i;

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++) {
		if (ATH_TXQ_SETUP(sc, i))
  9093b4:	282d03        	addmi	a8, a2, 0x300
  9093b7:	2880c8        	l8ui	a8, a8, 200
  9093ba:	005004        	ssr	a5
  9093bd:	08081b        	sra	a8, a8
  9093c0:	7f8710        	bbci	a8, 31, 9093d4 <ath_aborttxq_tgt+0x2c>
			ath_tx_draintxq(sc, ATH_TXQ(sc,i));
  9093c3:	2b5c1e        	addi	a11, a5, 30
  9093c6:	0bbb11        	slli	a11, a11, 5
  9093c9:	ab2b      	add.n	a11, a2, a11
	ah->ah_stopTxDma(ah, txq->axq_qnum);
}

static void owltgt_txq_drain(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	owltgt_tx_processq(sc, txq, OWL_TXQ_STOPPED);
  9093cb:	da20      	mov.n	a10, a2
  9093cd:	bcbb      	addi.n	a11, a11, 12
  9093cf:	c0c1      	movi.n	a12, 1
  9093d1:	581603        	call8	90ebe0 <owltgt_tx_processq>
  9093d4:	b155      	addi.n	a5, a5, 1
{

	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint16_t i;

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++) {
  9093d6:	6959da        	bnei	a5, 10, 9093b4 <ath_aborttxq_tgt+0xc>
		if (ATH_TXQ_SETUP(sc, i))
			ath_tx_draintxq(sc, ATH_TXQ(sc,i));
	}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9093d9:	c0d0      	movi.n	a13, 0
  9093db:	8a23      	l32i.n	a10, a2, 12
  9093dd:	db30      	mov.n	a11, a3
  9093df:	dc40      	mov.n	a12, a4
  9093e1:	ded0      	mov.n	a14, a13
  9093e3:	5bfdc1        	call8	908ae8 <wmi_cmd_rsp>
  9093e6:	d10f      	retw.n

009093e8 <ath_init_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo,NULL, 0);
}

static void ath_init_tgt(void *Context, A_UINT16 Command,
			 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9093e8:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  9093eb:	252d05        	addmi	a5, a2, 0x500
  9093ee:	855b      	l32i.n	a5, a5, 44

	sc->sc_imask = HAL_INT_RX | HAL_INT_TX
		| HAL_INT_RXEOL | HAL_INT_RXORN
		| HAL_INT_FATAL | HAL_INT_GLOBAL;

	sc->sc_imask |= HAL_INT_GTT;
  9093f0:	186a20        	l32r	a8, 8e3c70 <bSet_configuration+0x11c>

	if (ath_hal_getcapability(ah, HAL_CAP_HT))
  9093f3:	055a02        	or	a10, a5, a5

	sc->sc_imask = HAL_INT_RX | HAL_INT_TX
		| HAL_INT_RXEOL | HAL_INT_RXORN
		| HAL_INT_FATAL | HAL_INT_GLOBAL;

	sc->sc_imask |= HAL_INT_GTT;
  9093f6:	2826c4        	s32i	a8, a2, 0x310

	if (ath_hal_getcapability(ah, HAL_CAP_HT))
  9093f9:	c0b5      	movi.n	a11, 5
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo,NULL, 0);
}

static void ath_init_tgt(void *Context, A_UINT16 Command,
			 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9093fb:	03034f        	extui	a3, a3, 0, 16
  9093fe:	04044f        	extui	a4, a4, 0, 16
		| HAL_INT_RXEOL | HAL_INT_RXORN
		| HAL_INT_FATAL | HAL_INT_GLOBAL;

	sc->sc_imask |= HAL_INT_GTT;

	if (ath_hal_getcapability(ah, HAL_CAP_HT))
  909401:	580656        	call8	90ad5c <ath_hal_getcapability>
  909404:	c8aa      	beqz.n	a10, 909412 <ath_init_tgt+0x2a>
		sc->sc_imask |= HAL_INT_CST;
  909406:	2922c4        	l32i	a9, a2, 0x310
  909409:	186a21        	l32r	a8, 8e3c90 <bSet_configuration+0x13c>
  90940c:	089802        	or	a8, a9, a8
  90940f:	2826c4        	s32i	a8, a2, 0x310
#include <adf_os_irq_pvt.h>

static inline int
adf_os_setup_intr(adf_os_device_t  osdev, adf_os_drv_intr fn)
{
    return __adf_os_setup_intr(osdev, fn);
  909412:	2a2246        	l32i	a10, a2, 0x118
  909415:	1b6a22        	l32r	a11, 8e3ca0 <bSet_configuration+0x14c>
  909418:	580646        	call8	90ad34 <__adf_os_setup_intr>

	adf_os_setup_intr(sc->sc_dev, ath_intr);
	ah->ah_setInterrupts(ah, sc->sc_imask);
  90941b:	2b22c4        	l32i	a11, a2, 0x310
  90941e:	285228        	l32i	a8, a5, 160
  909421:	da50      	mov.n	a10, a5
  909423:	0b8000        	callx8	a8

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  909426:	c0d0      	movi.n	a13, 0
  909428:	8a23      	l32i.n	a10, a2, 12
  90942a:	db30      	mov.n	a11, a3
  90942c:	dc40      	mov.n	a12, a4
  90942e:	0dde02        	or	a14, a13, a13
  909431:	5bfdad        	call8	908ae8 <wmi_cmd_rsp>
  909434:	d10f      	retw.n
	...

00909438 <ath_enable_intr_tgt>:
/* WMI Commands */
/****************/

static void ath_enable_intr_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  909438:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  90943b:	292d05        	addmi	a9, a2, 0x500
/* WMI Commands */
/****************/

static void ath_enable_intr_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  90943e:	03034f        	extui	a3, a3, 0, 16
  909441:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  909444:	8a9b      	l32i.n	a10, a9, 44
	a_uint32_t intr;

	if (data)
  909446:	645002        	beqz	a5, 90944c <ath_enable_intr_tgt+0x14>
		intr = (*(a_uint32_t *)data);
  909449:	285200        	l32i	a8, a5, 0

	intr = adf_os_ntohl(intr);

	if (intr & HAL_INT_SWBA) {
  90944c:	196953        	l32r	a9, 8e3998 <HIFusb_DescTraceDump+0x1b0>
  90944f:	2522c4        	l32i	a5, a2, 0x310
  909452:	798006        	bnone	a8, a9, 90945c <ath_enable_intr_tgt+0x24>
		sc->sc_imask |= HAL_INT_SWBA;
  909455:	095502        	or	a5, a5, a9
  909458:	600006        	j	909462 <ath_enable_intr_tgt+0x2a>
  90945b:	00196a        	excw
	} else {
		sc->sc_imask &= ~HAL_INT_SWBA;
  90945e:	230955        	l16si	a3, a0, 170
  909461:	012526        	excw
  909464:	c415      	movi.n	a1, 69
	}

	if (intr & HAL_INT_BMISS) {
  909466:	6a2475        	blti	a2, 4, 9094df <handle_echo_command+0xb>
  909469:	8008      	l32i.n	a0, a0, 32
		sc->sc_imask |= HAL_INT_BMISS;
  90946b:	2822c4        	l32i	a8, a2, 0x310
  90946e:	058502        	or	a5, a8, a5
  909471:	2526c4        	s32i	a5, a2, 0x310
	}

	ah->ah_setInterrupts(ah, sc->sc_imask);
  909474:	2b22c4        	l32i	a11, a2, 0x310
  909477:	25a228        	l32i	a5, a10, 160
  90947a:	0b5000        	callx8	a5
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo,NULL, 0);
  90947d:	c0d0      	movi.n	a13, 0
  90947f:	8a23      	l32i.n	a10, a2, 12
  909481:	db30      	mov.n	a11, a3
  909483:	dc40      	mov.n	a12, a4
  909485:	ded0      	mov.n	a14, a13
  909487:	5bfd98        	call8	908ae8 <wmi_cmd_rsp>
  90948a:	d10f      	retw.n

0090948c <ath_disable_intr_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_disable_intr_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  90948c:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  90948f:	282d05        	addmi	a8, a2, 0x500
  909492:	8a8b      	l32i.n	a10, a8, 44

	ah->ah_setInterrupts(ah, 0);
  909494:	2b0a00        	movi	a11, 0
  909497:	28a228        	l32i	a8, a10, 160
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_disable_intr_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  90949a:	03034f        	extui	a3, a3, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_setInterrupts(ah, 0);
  90949d:	0b8000        	callx8	a8
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_disable_intr_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9094a0:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_setInterrupts(ah, 0);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo,NULL, 0);
  9094a3:	c0d0      	movi.n	a13, 0
  9094a5:	8a23      	l32i.n	a10, a2, 12
  9094a7:	db30      	mov.n	a11, a3
  9094a9:	dc40      	mov.n	a12, a4
  9094ab:	ded0      	mov.n	a14, a13
  9094ad:	5bfd8e        	call8	908ae8 <wmi_cmd_rsp>
  9094b0:	d10f      	retw.n
	...

009094b4 <ath_get_tgt_version>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
}

static void ath_get_tgt_version(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
				A_UINT8 *data, a_int32_t datalen)
{
  9094b4:	6c1006        	entry	a1, 48
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_fw_version ver;

	ver.major = ATH_VERSION_MAJOR;
  9094b7:	c081      	movi.n	a8, 1
	ver.minor = ATH_VERSION_MINOR;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
  9094b9:	8a23      	l32i.n	a10, a2, 12
				A_UINT8 *data, a_int32_t datalen)
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_fw_version ver;

	ver.major = ATH_VERSION_MAJOR;
  9094bb:	281500        	s16i	a8, a1, 0
	ver.minor = ATH_VERSION_MINOR;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
  9094be:	030b4f        	extui	a11, a3, 0, 16
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_fw_version ver;

	ver.major = ATH_VERSION_MAJOR;
	ver.minor = ATH_VERSION_MINOR;
  9094c1:	c084      	movi.n	a8, 4

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
  9094c3:	040c4f        	extui	a12, a4, 0, 16
  9094c6:	dd10      	mov.n	a13, a1
  9094c8:	c0e4      	movi.n	a14, 4
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_fw_version ver;

	ver.major = ATH_VERSION_MAJOR;
	ver.minor = ATH_VERSION_MINOR;
  9094ca:	281501        	s16i	a8, a1, 2

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
  9094cd:	5bfd86        	call8	908ae8 <wmi_cmd_rsp>
  9094d0:	d10f      	retw.n
	...

009094d4 <handle_echo_command>:
	adf_os_mem_free(sc);
}

static void handle_echo_command(void *pContext, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  9094d4:	6c1004        	entry	a1, 32
	wmi_cmd_rsp(pContext, WMI_ECHO_CMDID, SeqNo, buffer, Length);
  9094d7:	da20      	mov.n	a10, a2
  9094d9:	c0b1      	movi.n	a11, 1
  9094db:	040c4f        	extui	a12, a4, 0, 16
  9094de:	dd50      	mov.n	a13, a5
  9094e0:	de60      	mov.n	a14, a6
  9094e2:	5bfd81        	call8	908ae8 <wmi_cmd_rsp>
  9094e5:	d10f      	retw.n
	...

009094e8 <ath_get_minrateidx>:
			sc->sc_sta[i].an_valid = 0;
	}
}

a_uint8_t ath_get_minrateidx(struct ath_softc_tgt *sc, struct ath_vap_target *avp)
{
  9094e8:	6c1004        	entry	a1, 32
	if (sc->sc_curmode == IEEE80211_MODE_11NG)
  9094eb:	2822c2        	l32i	a8, a2, 0x308
  9094ee:	698104        	bnei	a8, 1, 9094f6 <ath_get_minrateidx+0xe>
		return avp->av_minrateidx[0];
  9094f1:	223040        	l8ui	a2, a3, 64
  9094f4:	d10f      	retw.n
	else if (sc->sc_curmode == IEEE80211_MODE_11NA)
		return avp->av_minrateidx[1];

	return 0;
  9094f6:	c020      	movi.n	a2, 0

a_uint8_t ath_get_minrateidx(struct ath_softc_tgt *sc, struct ath_vap_target *avp)
{
	if (sc->sc_curmode == IEEE80211_MODE_11NG)
		return avp->av_minrateidx[0];
	else if (sc->sc_curmode == IEEE80211_MODE_11NA)
  9094f8:	728902        	bne	a8, a2, 9094fe <ath_get_minrateidx+0x16>
		return avp->av_minrateidx[1];
  9094fb:	223041        	l8ui	a2, a3, 65

	return 0;
}
  9094fe:	d10f      	retw.n

00909500 <tgt_HTCRecv_beaconhandler>:
#undef N
}

static void tgt_HTCRecv_beaconhandler(HTC_ENDPOINT_ID EndPt, adf_nbuf_t hdr_buf,
				      adf_nbuf_t buf, void *ServiceCtx)
{
  909500:	6c101c        	entry	a1, 224
}

static void ath_tgt_send_beacon(struct ath_softc_tgt *sc, adf_nbuf_t bc_hdr,
				adf_nbuf_t nbuf, HTC_ENDPOINT_ID EndPt)
{
	struct ath_hal *ah = sc->sc_ah;
  909503:	265d05        	addmi	a6, a5, 0x500
  909506:	866b      	l32i.n	a6, a6, 44
	ath_beacon_hdr_t *bhdr;
	struct ieee80211vap_target  *vap;
	a_uint32_t anblen;
	struct ieee80211_frame *wh;

	if (!bc_hdr) {
  909508:	cd35      	bnez.n	a3, 909521 <tgt_HTCRecv_beaconhandler+0x21>
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90950a:	231c20        	addi	a3, a1, 32
  90950d:	da40      	mov.n	a10, a4
  90950f:	2b3c74        	addi	a11, a3, 116
  909512:	2c3c70        	addi	a12, a3, 112
  909515:	5bf5e2        	call8	906ca0 <__adf_nbuf_peek_header>
		adf_nbuf_peek_header(nbuf, &anbdata, &anblen);
		bhdr = (ath_beacon_hdr_t *)anbdata;
  909518:	271225        	l32i	a7, a1, 148
  90951b:	600011        	j	909530 <tgt_HTCRecv_beaconhandler+0x30>
  90951e:	000000        	ill
	} else {
		adf_os_print("found bc_hdr! 0x%x\n", bc_hdr);
  909521:	186915        	l32r	a8, 8e3978 <HIFusb_DescTraceDump+0x190>
  909524:	1a6a25        	l32r	a10, 8e3db8 <bSet_configuration+0x264>
  909527:	288212        	l32i	a8, a8, 72
  90952a:	033b02        	or	a11, a3, a3
  90952d:	0b8000        	callx8	a8
	}

	vap_index = bhdr->vap_index;
  909530:	277000        	l8ui	a7, a7, 0
	adf_os_assert(vap_index < TARGET_VAP_MAX);
  909533:	6e7216        	bltui	a7, 2, 90954d <tgt_HTCRecv_beaconhandler+0x4d>
  909536:	136915        	l32r	a3, 8e398c <HIFusb_DescTraceDump+0x1a4>
  909539:	1a69f6        	l32r	a10, 8e3d14 <bSet_configuration+0x1c0>
  90953c:	233212        	l32i	a3, a3, 72
  90953f:	1b6a26        	l32r	a11, 8e3dd8 <bSet_configuration+0x284>
  909542:	0b3000        	callx8	a3
  909545:	13697a        	l32r	a3, 8e3b30 <bGet_descriptor+0x94>
  909548:	0c0200        	memw
  90954b:	8330      	l32i.n	a3, a3, 0
 *         or NULL if there is not sufficient data to pull.
 */
static inline a_uint8_t *
adf_nbuf_pull_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_pull_head(buf, size);
  90954d:	da40      	mov.n	a10, a4
  90954f:	c0b4      	movi.n	a11, 4
  909551:	5bf504        	call8	906964 <__adf_nbuf_pull_head>
	vap = &sc->sc_vap[vap_index].av_vap;

	wh = (struct ieee80211_frame *)adf_nbuf_pull_head(nbuf,
						  sizeof(ath_beacon_hdr_t));

	bf = sc->sc_vap[vap_index].av_bcbuf;
  909554:	0c7311        	slli	a3, a7, 4
  909557:	a733      	add.n	a3, a3, a7
  909559:	186a1d        	l32r	a8, 8e3dd0 <bSet_configuration+0x27c>
  90955c:	05330a        	addx4	a3, a3, a5
  90955f:	a833      	add.n	a3, a3, a8
  909561:	8333      	l32i.n	a3, a3, 12
	adf_os_assert(bf);
  909563:	cd35      	bnez.n	a3, 90957c <tgt_HTCRecv_beaconhandler+0x7c>
  909565:	186915        	l32r	a8, 8e39bc <HIFusb_DescTraceDump+0x1d4>
  909568:	1a69f6        	l32r	a10, 8e3d40 <bSet_configuration+0x1ec>
  90956b:	288212        	l32i	a8, a8, 72
  90956e:	1b6a26        	l32r	a11, 8e3e08 <bSet_configuration+0x2b4>
  909571:	0b8000        	callx8	a8
  909574:	18697a        	l32r	a8, 8e3b5c <bSet_configuration+0x8>
  909577:	0c0200        	memw
  90957a:	8880      	l32i.n	a8, a8, 0
	bf->bf_endpt = EndPt;
  90957c:	223623        	s32i	a2, a3, 140

	if (bf->bf_skb) {
  90957f:	8238      	l32i.n	a2, a3, 32
  909581:	c92f      	beqz.n	a2, 9095a4 <tgt_HTCRecv_beaconhandler+0xa4>
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  909583:	2a5246        	l32i	a10, a5, 0x118
  909586:	8b30      	l32i.n	a11, a3, 0
  909588:	c0c0      	movi.n	a12, 0
  90958a:	5bf53f        	call8	906a88 <__adf_nbuf_unmap>
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  90958d:	8a38      	l32i.n	a10, a3, 32
  90958f:	c0b4      	movi.n	a11, 4
  909591:	5bf4e9        	call8	906938 <__adf_nbuf_push_head>
		adf_nbuf_unmap(sc->sc_dev, bf->bf_dmamap, ADF_OS_DMA_TO_DEVICE);
		adf_nbuf_push_head(bf->bf_skb, sizeof(ath_beacon_hdr_t));
		ath_free_tx_skb(sc->tgt_htc_handle, bf->bf_endpt, bf->bf_skb);
  909594:	126915        	l32r	a2, 8e39e8 <HIFusb_DescTraceDump+0x200>
  909597:	8a52      	l32i.n	a10, a5, 8
  909599:	222282        	l32i	a2, a2, 0x208
  90959c:	2b3223        	l32i	a11, a3, 140
  90959f:	8c38      	l32i.n	a12, a3, 32
  9095a1:	0b2000        	callx8	a2
adf_nbuf_map(adf_os_device_t        osdev, 
             adf_os_dma_map_t       bmap, 
             adf_nbuf_t             buf, 
             adf_os_dma_dir_t       dir)
{
    return __adf_nbuf_map(osdev, bmap, buf, dir);
  9095a4:	8b30      	l32i.n	a11, a3, 0
  9095a6:	2a5246        	l32i	a10, a5, 0x118
  9095a9:	c0d0      	movi.n	a13, 0
  9095ab:	dc40      	mov.n	a12, a4
	}

	bf->bf_skb = nbuf;
  9095ad:	9438      	s32i.n	a4, a3, 32
  9095af:	5bf533        	call8	906a7c <__adf_nbuf_map>
 * @param[out] sg   map info
 */
static inline void
adf_nbuf_dmamap_info(adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
    __adf_nbuf_dmamap_info(bmap, sg);
  9095b2:	8a30      	l32i.n	a10, a3, 0
  9095b4:	b43b      	addi.n	a11, a3, 4
static void ath_beacon_setup(struct ath_softc_tgt *sc,
			     struct ath_tx_buf *bf,
			     struct ath_vap_target *avp)
{
	adf_nbuf_t skb = bf->bf_skb;
	struct ath_hal *ah = sc->sc_ah;
  9095b6:	225d05        	addmi	a2, a5, 0x500
  9095b9:	5bf538        	call8	906a9c <__adf_nbuf_dmamap_info>
  9095bc:	822b      	l32i.n	a2, a2, 44
	struct ath_tx_desc *ds;
	a_int32_t flags;
	const HAL_RATE_TABLE *rt;
	a_uint8_t rix, rate;
	HAL_11N_RATE_SERIES series[4] = {{ 0 }};
  9095be:	2c0a70        	movi	a12, 112
  9095c1:	2a1c20        	addi	a10, a1, 32
  9095c4:	c0b0      	movi.n	a11, 0
 */
static void ath_beacon_setup(struct ath_softc_tgt *sc,
			     struct ath_tx_buf *bf,
			     struct ath_vap_target *avp)
{
	adf_nbuf_t skb = bf->bf_skb;
  9095c6:	8438      	l32i.n	a4, a3, 32
	struct ath_hal *ah = sc->sc_ah;
  9095c8:	22162d        	s32i	a2, a1, 180
	struct ath_tx_desc *ds;
	a_int32_t flags;
	const HAL_RATE_TABLE *rt;
	a_uint8_t rix, rate;
	HAL_11N_RATE_SERIES series[4] = {{ 0 }};
  9095cb:	5b761f        	call8	8e6e48 <memset>

	flags = HAL_TXDESC_NOACK;

	ds = bf->bf_desc;
  9095ce:	883c      	l32i.n	a8, a3, 48
	ds->ds_link = 0;
  9095d0:	c090      	movi.n	a9, 0
  9095d2:	c0a0      	movi.n	a10, 0
  9095d4:	298400        	s8i	a9, a8, 0
  9095d7:	2a8401        	s8i	a10, a8, 1
  9095da:	2a8402        	s8i	a10, a8, 2
  9095dd:	2a8403        	s8i	a10, a8, 3
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;
  9095e0:	2a3008        	l8ui	a10, a3, 8
	bf->bf_skb = nbuf;

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, nbuf, ADF_OS_DMA_TO_DEVICE);
	adf_nbuf_dmamap_info(bf->bf_dmamap,&bf->bf_dmamap_info);

	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
  9095e3:	0c7b11        	slli	a11, a7, 4

	flags = HAL_TXDESC_NOACK;

	ds = bf->bf_desc;
	ds->ds_link = 0;
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;
  9095e6:	2a8404        	s8i	a10, a8, 4
  9095e9:	2a3009        	l8ui	a10, a3, 9
	bf->bf_skb = nbuf;

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, nbuf, ADF_OS_DMA_TO_DEVICE);
	adf_nbuf_dmamap_info(bf->bf_dmamap,&bf->bf_dmamap_info);

	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
  9095ec:	a7bb      	add.n	a11, a11, a7

	flags = HAL_TXDESC_NOACK;

	ds = bf->bf_desc;
	ds->ds_link = 0;
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;
  9095ee:	2a8405        	s8i	a10, a8, 5
  9095f1:	2a300a        	l8ui	a10, a3, 10
  9095f4:	2a8406        	s8i	a10, a8, 6
  9095f7:	2a300b        	l8ui	a10, a3, 11
  9095fa:	2a8407        	s8i	a10, a8, 7
	bf->bf_skb = nbuf;

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, nbuf, ADF_OS_DMA_TO_DEVICE);
	adf_nbuf_dmamap_info(bf->bf_dmamap,&bf->bf_dmamap_info);

	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
  9095fd:	1a6a18        	l32r	a10, 8e3e60 <bSet_configuration+0x30c>

	ds = bf->bf_desc;
	ds->ds_link = 0;
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;

	rix = ath_get_minrateidx(sc, avp);
  909600:	28162b        	s32i	a8, a1, 172
	bf->bf_skb = nbuf;

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, nbuf, ADF_OS_DMA_TO_DEVICE);
	adf_nbuf_dmamap_info(bf->bf_dmamap,&bf->bf_dmamap_info);

	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
  909603:	0abb0a        	addx4	a11, a11, a10
  909606:	0b5b08        	add	a11, a5, a11

	ds = bf->bf_desc;
	ds->ds_link = 0;
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;

	rix = ath_get_minrateidx(sc, avp);
  909609:	b8bb      	addi.n	a11, a11, 8
  90960b:	055a02        	or	a10, a5, a5
  90960e:	29162c        	s32i	a9, a1, 176
  909611:	5bffb5        	call8	9094e8 <ath_get_minrateidx>
	rt  = sc->sc_currates;
	rate = rt->info[rix].rateCode;
  909614:	275281        	l32i	a7, a5, 0x204
  909617:	0aaa0a        	addx4	a10, a10, a10
  90961a:	07a70a        	addx4	a7, a10, a7
  90961d:	227034        	l8ui	a2, a7, 52
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  909620:	da40      	mov.n	a10, a4
  909622:	221628        	s32i	a2, a1, 160

	ah->ah_setupTxDesc(ds
  909625:	22122d        	l32i	a2, a1, 180
  909628:	c071      	movi.n	a7, 1
  90962a:	222217        	l32i	a2, a2, 92
  90962d:	5bf594        	call8	906c80 <__adf_nbuf_len>
  909630:	29122c        	l32i	a9, a1, 176
  909633:	28122b        	l32i	a8, a1, 172
  909636:	b4ab      	addi.n	a11, a10, 4
  909638:	2a0aff        	movi	a10, 255
  90963b:	9a11      	s32i.n	a10, a1, 4
  90963d:	2f1228        	l32i	a15, a1, 160
  909640:	c0a2      	movi.n	a10, 2
  909642:	9913      	s32i.n	a9, a1, 12
  909644:	9914      	s32i.n	a9, a1, 16
  909646:	9a12      	s32i.n	a10, a1, 8
  909648:	c1c8      	movi.n	a12, 24
  90964a:	da80      	mov.n	a10, a8
  90964c:	c0d3      	movi.n	a13, 3
  90964e:	c3ef      	movi.n	a14, 63
  909650:	9710      	s32i.n	a7, a1, 0
  909652:	0b2000        	callx8	a2
			    , HAL_TXKEYIX_INVALID
			    , flags
			    , 0
			    , 0);

	ah->ah_fillTxDesc(ds
  909655:	22122d        	l32i	a2, a1, 180
  909658:	044a02        	or	a10, a4, a4
  90965b:	2f2218        	l32i	a15, a2, 96
  90965e:	2f162a        	s32i	a15, a1, 168
  909661:	5bf587        	call8	906c80 <__adf_nbuf_len>
  909664:	28122b        	l32i	a8, a1, 172
			   , asf_roundup(adf_nbuf_len(skb), 4)
  909667:	b3aa      	addi.n	a10, a10, 3
			    , HAL_TXKEYIX_INVALID
			    , flags
			    , 0
			    , 0);

	ah->ah_fillTxDesc(ds
  909669:	2f122a        	l32i	a15, a1, 168
			   , asf_roundup(adf_nbuf_len(skb), 4)
  90966c:	0a2b14        	srli	a11, a10, 2
			    , HAL_TXKEYIX_INVALID
			    , flags
			    , 0
			    , 0);

	ah->ah_fillTxDesc(ds
  90966f:	dc70      	mov.n	a12, a7
  909671:	dd70      	mov.n	a13, a7
  909673:	de80      	mov.n	a14, a8
  909675:	da80      	mov.n	a10, a8
  909677:	0ebb11        	slli	a11, a11, 2
  90967a:	0bf000        	callx8	a15
			   , AH_TRUE
			   , AH_TRUE
			   , ds);

	series[0].Tries = 1;
	series[0].Rate = rate;
  90967d:	241228        	l32i	a4, a1, 160
	series[0].ChSel = sc->sc_ic.ic_tx_chainmask;
	series[0].RateFlags = 0;
  909680:	29122c        	l32i	a9, a1, 176
			   , AH_TRUE
			   , AH_TRUE
			   , ds);

	series[0].Tries = 1;
	series[0].Rate = rate;
  909683:	9419      	s32i.n	a4, a1, 36
	series[0].ChSel = sc->sc_ic.ic_tx_chainmask;
  909685:	245d16        	addmi	a4, a5, 0x1600
  909688:	244026        	l8ui	a4, a4, 38
	series[0].RateFlags = 0;
	ah->ah_set11nRateScenario(ds, 0, 0, series, 4, 0);
  90968b:	28122b        	l32i	a8, a1, 172
			   , AH_TRUE
			   , ds);

	series[0].Tries = 1;
	series[0].Rate = rate;
	series[0].ChSel = sc->sc_ic.ic_tx_chainmask;
  90968e:	941b      	s32i.n	a4, a1, 44
	series[0].RateFlags = 0;
	ah->ah_set11nRateScenario(ds, 0, 0, series, 4, 0);
  909690:	24122d        	l32i	a4, a1, 180
  909693:	da80      	mov.n	a10, a8
  909695:	224210        	l32i	a2, a4, 64
  909698:	db90      	mov.n	a11, a9
  90969a:	dc90      	mov.n	a12, a9
			   , ds);

	series[0].Tries = 1;
	series[0].Rate = rate;
	series[0].ChSel = sc->sc_ic.ic_tx_chainmask;
	series[0].RateFlags = 0;
  90969c:	991c      	s32i.n	a9, a1, 48
	ah->ah_set11nRateScenario(ds, 0, 0, series, 4, 0);
  90969e:	2d1c20        	addi	a13, a1, 32
  9096a1:	2e0a04        	movi	a14, 4
  9096a4:	df90      	mov.n	a15, a9
			   , asf_roundup(adf_nbuf_len(skb), 4)
			   , AH_TRUE
			   , AH_TRUE
			   , ds);

	series[0].Tries = 1;
  9096a6:	271608        	s32i	a7, a1, 32
	series[0].Rate = rate;
	series[0].ChSel = sc->sc_ic.ic_tx_chainmask;
	series[0].RateFlags = 0;
	ah->ah_set11nRateScenario(ds, 0, 0, series, 4, 0);
  9096a9:	0b2000        	callx8	a2

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, nbuf, ADF_OS_DMA_TO_DEVICE);
	adf_nbuf_dmamap_info(bf->bf_dmamap,&bf->bf_dmamap_info);

	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
	ah->ah_stopTxDma(ah, sc->sc_bhalq);
  9096ac:	255d01        	addmi	a5, a5, 0x100
  9096af:	826d      	l32i.n	a2, a6, 52
  9096b1:	2b501c        	l8ui	a11, a5, 28
  9096b4:	da60      	mov.n	a10, a6
  9096b6:	0b2000        	callx8	a2
	ah->ah_setTxDP(ah, sc->sc_bhalq, ATH_BUF_GET_DESC_PHY_ADDR(bf));
  9096b9:	2b501c        	l8ui	a11, a5, 28
  9096bc:	826a      	l32i.n	a2, a6, 40
  9096be:	8c3c      	l32i.n	a12, a3, 48
  9096c0:	da60      	mov.n	a10, a6
  9096c2:	0b2000        	callx8	a2
	ah->ah_startTxDma(ah, sc->sc_bhalq);
  9096c5:	2b501c        	l8ui	a11, a5, 28
  9096c8:	826c      	l32i.n	a2, a6, 48
  9096ca:	066a02        	or	a10, a6, a6
  9096cd:	0b2000        	callx8	a2
  9096d0:	d10f      	retw.n
	...

009096d4 <ath_tgt_attach>:
	/* Start HTC messages exchange */
	HTC_Ready(sc->tgt_htc_handle);
}

a_int32_t ath_tgt_attach(a_uint32_t devid, struct ath_softc_tgt *sc, adf_os_device_t osdev)
{
  9096d4:	6c100e        	entry	a1, 112
 * @return int
 */
static inline int 
__adf_os_pci_config_read8(adf_os_device_t osdev, int offset, a_uint8_t *val)
{
    (*val) = wlan_pci_config_read(offset, 1);
  9096d7:	2b0a01        	movi	a11, 1
  9096da:	2a0a0c        	movi	a10, 12
  9096dd:	580130        	call8	909ba0 <wlan_pci_config_read>
  9096e0:	0a0a47        	extui	a10, a10, 0, 8
	a_uint8_t csz;

	adf_os_pci_config_read8(osdev, ATH_PCI_CACHE_LINE_SIZE, &csz);

	if (csz == 0)
		csz = 16;
  9096e3:	c160      	movi.n	a6, 16
  9096e5:	0a6a38        	moveqz	a10, a6, a10
	sc->sc_cachelsz = csz << 2;
  9096e8:	0ea511        	slli	a5, a10, 2
 */
static inline void 
adf_os_init_bh(adf_os_handle_t  hdl, adf_os_bh_t  *bh,
               adf_os_defer_fn_t  func,void  *arg)
{
    __adf_os_init_bh(hdl, bh, func, arg);
  9096eb:	1b6a27        	l32r	a11, 8e3f88 <bStandardCommand+0x124>
  9096ee:	2a3a14        	movi	a10, 0x314

	sc->sc_dev = osdev;
  9096f1:	243646        	s32i	a4, a3, 0x118
	sc->sc_hdl = osdev;
  9096f4:	243645        	s32i	a4, a3, 0x114
  9096f7:	aa3a      	add.n	a10, a3, a10
  9096f9:	dc30      	mov.n	a12, a3

	adf_os_pci_config_read8(osdev, ATH_PCI_CACHE_LINE_SIZE, &csz);

	if (csz == 0)
		csz = 16;
	sc->sc_cachelsz = csz << 2;
  9096fb:	253596        	s16i	a5, a3, 0x12c
  9096fe:	5bf998        	call8	907d60 <__adf_os_init_bh$isra$4>
  909701:	1b6a28        	l32r	a11, 8e3fa4 <bStandardCommand+0x140>
  909704:	2a5a1c        	movi	a10, 0x51c
  909707:	0a3a08        	add	a10, a3, a10
  90970a:	033c02        	or	a12, a3, a3
  90970d:	5bf994        	call8	907d60 <__adf_os_init_bh$isra$4>
  909710:	1b6a29        	l32r	a11, 8e3fb4 <bStandardCommand+0x150>
  909713:	2a3a24        	movi	a10, 0x324
  909716:	aa3a      	add.n	a10, a3, a10
  909718:	dc30      	mov.n	a12, a3
  90971a:	5bf991        	call8	907d60 <__adf_os_init_bh$isra$4>
  90971d:	1b6a2a        	l32r	a11, 8e3fc8 <bStandardCommand+0x164>
  909720:	2a3a44        	movi	a10, 0x344
  909723:	0a3a08        	add	a10, a3, a10
  909726:	033c02        	or	a12, a3, a3
  909729:	5bf98d        	call8	907d60 <__adf_os_init_bh$isra$4>
	ATH_INIT_TQUEUE(sc->sc_dev, &sc->sc_txtq, owl_tgt_tx_tasklet, sc);
	ATH_INIT_TQUEUE(sc->sc_dev, &sc->sc_bmisstq, ath_bmiss_tasklet, sc);
	ATH_INIT_TQUEUE(sc->sc_dev, &sc->sc_fataltq, ath_fatal_tasklet, sc);

	flags |= AH_USE_EEPROM;
	ah = _ath_hal_attach_tgt(devid, sc, sc->sc_dev, flags, &status);
  90972c:	2c3246        	l32i	a12, a3, 0x118
  90972f:	da20      	mov.n	a10, a2
  909731:	033b02        	or	a11, a3, a3
  909734:	c0d1      	movi.n	a13, 1
  909736:	2e1c34        	addi	a14, a1, 52
  909739:	5bf8e9        	call8	907ae0 <_ath_hal_attach_tgt>
  90973c:	0aa402        	or	a4, a10, a10
	if (ah == NULL) {
  90973f:	64a3d7        	beqz	a10, 909b1a <ath_tgt_attach+0x446>
	HTC_CONFIG htc_conf;
	WMI_SVC_CONFIG wmiConfig;
	WMI_DISPATCH_TABLE *Magpie_Sys_Commands_Tbl;

	/* Init dynamic buf pool */
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);
  909742:	126915        	l32r	a2, 8e3b98 <bSet_configuration+0x44>
	ah = _ath_hal_attach_tgt(devid, sc, sc->sc_dev, flags, &status);
	if (ah == NULL) {
		error = ENXIO;
		goto bad;
	}
	sc->sc_ah = ah;
  909745:	273d05        	addmi	a7, a3, 0x500
	HTC_CONFIG htc_conf;
	WMI_SVC_CONFIG wmiConfig;
	WMI_DISPATCH_TABLE *Magpie_Sys_Commands_Tbl;

	/* Init dynamic buf pool */
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);
  909748:	252299        	l32i	a5, a2, 0x264
	ah = _ath_hal_attach_tgt(devid, sc, sc->sc_dev, flags, &status);
	if (ah == NULL) {
		error = ENXIO;
		goto bad;
	}
	sc->sc_ah = ah;
  90974b:	2a760b        	s32i	a10, a7, 44
	HTC_CONFIG htc_conf;
	WMI_SVC_CONFIG wmiConfig;
	WMI_DISPATCH_TABLE *Magpie_Sys_Commands_Tbl;

	/* Init dynamic buf pool */
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);
  90974e:	2a3245        	l32i	a10, a3, 0x114
  909751:	0b5000        	callx8	a5

	/* Init target-side HIF */
	sc->tgt_hif_handle = HIF_init(0);
  909754:	252270        	l32i	a5, a2, 0x1c0
	HTC_CONFIG htc_conf;
	WMI_SVC_CONFIG wmiConfig;
	WMI_DISPATCH_TABLE *Magpie_Sys_Commands_Tbl;

	/* Init dynamic buf pool */
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);
  909757:	2a3600        	s32i	a10, a3, 0

	/* Init target-side HIF */
	sc->tgt_hif_handle = HIF_init(0);
  90975a:	2a0a00        	movi	a10, 0
  90975d:	0b5000        	callx8	a5

	/* Init target-side HTC */
	htc_conf.HIFHandle = sc->tgt_hif_handle;
	htc_conf.CreditSize = 320;
  909760:	251a40        	movi	a5, 0x140
  909763:	9514      	s32i.n	a5, a1, 16
	htc_conf.CreditNumber = ATH_TXBUF;
  909765:	c25d      	movi.n	a5, 45
  909767:	9515      	s32i.n	a5, a1, 20
	htc_conf.OSHandle = sc->sc_hdl;
  909769:	253245        	l32i	a5, a3, 0x114

	/* Init dynamic buf pool */
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);

	/* Init target-side HIF */
	sc->tgt_hif_handle = HIF_init(0);
  90976c:	9a31      	s32i.n	a10, a3, 4

	/* Init target-side HTC */
	htc_conf.HIFHandle = sc->tgt_hif_handle;
	htc_conf.CreditSize = 320;
	htc_conf.CreditNumber = ATH_TXBUF;
	htc_conf.OSHandle = sc->sc_hdl;
  90976e:	9516      	s32i.n	a5, a1, 24
	htc_conf.PoolHandle = sc->pool_handle;
  909770:	8530      	l32i.n	a5, a3, 0

	/* Init target-side HIF */
	sc->tgt_hif_handle = HIF_init(0);

	/* Init target-side HTC */
	htc_conf.HIFHandle = sc->tgt_hif_handle;
  909772:	9a17      	s32i.n	a10, a1, 28
	htc_conf.CreditSize = 320;
	htc_conf.CreditNumber = ATH_TXBUF;
	htc_conf.OSHandle = sc->sc_hdl;
	htc_conf.PoolHandle = sc->pool_handle;
  909774:	9518      	s32i.n	a5, a1, 32
	sc->tgt_htc_handle = HTC_init(htc_setup_comp, &htc_conf);
  909776:	1a6a2b        	l32r	a10, 8e4024 <bStandardCommand+0x1c0>
  909779:	25227e        	l32i	a5, a2, 0x1f8
  90977c:	a61b      	add.n	a11, a1, a6
  90977e:	0b5000        	callx8	a5
#if defined(PROJECT_MAGPIE)
	init_htc_handle = sc->tgt_htc_handle;
  909781:	156969        	l32r	a5, 8e3d28 <bSet_configuration+0x1d4>
#endif

	tgt_reg_service(sc, &sc->htc_beacon_service, WMI_BEACON_SVC, tgt_HTCRecv_beaconhandler);
  909784:	1d6a2c        	l32r	a13, 8e4034 <bStandardCommand+0x1d0>
	htc_conf.CreditNumber = ATH_TXBUF;
	htc_conf.OSHandle = sc->sc_hdl;
	htc_conf.PoolHandle = sc->pool_handle;
	sc->tgt_htc_handle = HTC_init(htc_setup_comp, &htc_conf);
#if defined(PROJECT_MAGPIE)
	init_htc_handle = sc->tgt_htc_handle;
  909787:	9a50      	s32i.n	a10, a5, 0
#endif

	tgt_reg_service(sc, &sc->htc_beacon_service, WMI_BEACON_SVC, tgt_HTCRecv_beaconhandler);
  909789:	a63b      	add.n	a11, a3, a6
	htc_conf.HIFHandle = sc->tgt_hif_handle;
	htc_conf.CreditSize = 320;
	htc_conf.CreditNumber = ATH_TXBUF;
	htc_conf.OSHandle = sc->sc_hdl;
	htc_conf.PoolHandle = sc->pool_handle;
	sc->tgt_htc_handle = HTC_init(htc_setup_comp, &htc_conf);
  90978b:	9a32      	s32i.n	a10, a3, 8
#if defined(PROJECT_MAGPIE)
	init_htc_handle = sc->tgt_htc_handle;
#endif

	tgt_reg_service(sc, &sc->htc_beacon_service, WMI_BEACON_SVC, tgt_HTCRecv_beaconhandler);
  90978d:	2c1a01        	movi	a12, 0x101
  909790:	da30      	mov.n	a10, a3
  909792:	5bf90c        	call8	907bc4 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_cab_service, WMI_CAB_SVC, tgt_HTCRecv_cabhandler);
  909795:	1d6a2d        	l32r	a13, 8e404c <bStandardCommand+0x1e8>
  909798:	033a02        	or	a10, a3, a3
  90979b:	2b3c2c        	addi	a11, a3, 44
  90979e:	2c1a02        	movi	a12, 0x102
  9097a1:	5bf908        	call8	907bc4 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_uapsd_service, WMI_UAPSD_SVC, tgt_HTCRecv_uapsdhandler);
  9097a4:	1d6a2e        	l32r	a13, 8e405c <bStandardCommand+0x1f8>
  9097a7:	da30      	mov.n	a10, a3
  9097a9:	2b3c48        	addi	a11, a3, 72
  9097ac:	2c1a03        	movi	a12, 0x103
  9097af:	5bf905        	call8	907bc4 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_mgmt_service, WMI_MGMT_SVC, tgt_HTCRecv_mgmthandler);
  9097b2:	1d6a2f        	l32r	a13, 8e4070 <bStandardCommand+0x20c>
  9097b5:	033a02        	or	a10, a3, a3
  9097b8:	2b3c64        	addi	a11, a3, 100
  9097bb:	2c1a04        	movi	a12, 0x104
  9097be:	5bf901        	call8	907bc4 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_data_BE_service, WMI_DATA_BE_SVC, tgt_HTCRecvMessageHandler);
  9097c1:	156a30        	l32r	a5, 8e4084 <bStandardCommand+0x220>
  9097c4:	2b0ab8        	movi	a11, 184
  9097c7:	dd50      	mov.n	a13, a5
  9097c9:	da30      	mov.n	a10, a3
  9097cb:	0b3b08        	add	a11, a3, a11
  9097ce:	2c1a07        	movi	a12, 0x107
  9097d1:	5bf8fc        	call8	907bc4 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_data_BK_service, WMI_DATA_BK_SVC, tgt_HTCRecvMessageHandler);
  9097d4:	2b0ad4        	movi	a11, 212
  9097d7:	dd50      	mov.n	a13, a5
  9097d9:	da30      	mov.n	a10, a3
  9097db:	0b3b08        	add	a11, a3, a11
  9097de:	2c1a08        	movi	a12, 0x108
  9097e1:	5bf8f8        	call8	907bc4 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_data_VI_service, WMI_DATA_VI_SVC, tgt_HTCRecvMessageHandler);
  9097e4:	2b0a9c        	movi	a11, 156
  9097e7:	dd50      	mov.n	a13, a5
  9097e9:	da30      	mov.n	a10, a3
  9097eb:	0b3b08        	add	a11, a3, a11
  9097ee:	2c1a06        	movi	a12, 0x106
  9097f1:	5bf8f4        	call8	907bc4 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_data_VO_service, WMI_DATA_VO_SVC, tgt_HTCRecvMessageHandler);
  9097f4:	2b0a80        	movi	a11, 128
  9097f7:	dd50      	mov.n	a13, a5
  9097f9:	ab3b      	add.n	a11, a3, a11
  9097fb:	2c1a05        	movi	a12, 0x105
  9097fe:	033a02        	or	a10, a3, a3
  909801:	5bf8f0        	call8	907bc4 <tgt_reg_service>
 * @return Buffer pointer or NULL if there's not enough memory.
 */
static inline void *
adf_os_mem_alloc(adf_os_size_t size)
{
    return __adf_os_mem_alloc(size);
  909804:	da60      	mov.n	a10, a6
  909806:	5bf8d5        	call8	907b5c <__adf_os_mem_alloc>
}
/* zero a memory buffer */
static inline void
__adf_os_mem_zero(void *buf, adf_os_size_t size)
{
    A_MEMZERO(buf,size);
  909809:	8824      	l32i.n	a8, a2, 16
  90980b:	dc60      	mov.n	a12, a6
  90980d:	c0b0      	movi.n	a11, 0
  90980f:	d5a0      	mov.n	a5, a10
  909811:	0b8000        	callx8	a8

	/* Init target-side WMI */
	Magpie_Sys_Commands_Tbl = (WMI_DISPATCH_TABLE *)adf_os_mem_alloc(sizeof(WMI_DISPATCH_TABLE));
	adf_os_mem_zero(Magpie_Sys_Commands_Tbl, sizeof(WMI_DISPATCH_TABLE));
	Magpie_Sys_Commands_Tbl->NumberOfEntries = WMI_DISPATCH_ENTRY_COUNT(Magpie_Sys_DispatchEntries);
  909814:	c280      	movi.n	a8, 32
  909816:	9852      	s32i.n	a8, a5, 8
	Magpie_Sys_Commands_Tbl->pTable = Magpie_Sys_DispatchEntries;
  909818:	186a31        	l32r	a8, 8e40dc <bStandardCommand+0x278>
  90981b:	dc60      	mov.n	a12, a6
  90981d:	9853      	s32i.n	a8, a5, 12
  90981f:	8824      	l32i.n	a8, a2, 16
  909821:	c0b0      	movi.n	a11, 0
  909823:	2a1c24        	addi	a10, a1, 36
  909826:	0b8000        	callx8	a8

	adf_os_mem_zero(&wmiConfig, sizeof(WMI_SVC_CONFIG));
	wmiConfig.HtcHandle = sc->tgt_htc_handle;
  909829:	8632      	l32i.n	a6, a3, 8
	wmiConfig.PoolHandle = sc->pool_handle;
	wmiConfig.MaxCmdReplyEvts = ATH_WMI_MAX_CMD_REPLY;
	wmiConfig.MaxEventEvts = ATH_WMI_MAX_EVENTS;

	sc->tgt_wmi_handle = WMI_Init(&wmiConfig);
  90982b:	2a1c24        	addi	a10, a1, 36
	adf_os_mem_zero(Magpie_Sys_Commands_Tbl, sizeof(WMI_DISPATCH_TABLE));
	Magpie_Sys_Commands_Tbl->NumberOfEntries = WMI_DISPATCH_ENTRY_COUNT(Magpie_Sys_DispatchEntries);
	Magpie_Sys_Commands_Tbl->pTable = Magpie_Sys_DispatchEntries;

	adf_os_mem_zero(&wmiConfig, sizeof(WMI_SVC_CONFIG));
	wmiConfig.HtcHandle = sc->tgt_htc_handle;
  90982e:	9619      	s32i.n	a6, a1, 36
	wmiConfig.PoolHandle = sc->pool_handle;
  909830:	8630      	l32i.n	a6, a3, 0
  909832:	961a      	s32i.n	a6, a1, 40
	wmiConfig.MaxCmdReplyEvts = ATH_WMI_MAX_CMD_REPLY;
  909834:	c062      	movi.n	a6, 2
  909836:	961b      	s32i.n	a6, a1, 44
	wmiConfig.MaxEventEvts = ATH_WMI_MAX_EVENTS;
  909838:	c068      	movi.n	a6, 8
  90983a:	961c      	s32i.n	a6, a1, 48

	sc->tgt_wmi_handle = WMI_Init(&wmiConfig);
  90983c:	26228b        	l32i	a6, a2, 0x22c
  90983f:	0b6000        	callx8	a6
  909842:	9a33      	s32i.n	a10, a3, 12
	Magpie_Sys_Commands_Tbl->pContext = sc;
	WMI_RegisterDispatchTable(sc->tgt_wmi_handle, Magpie_Sys_Commands_Tbl);
  909844:	26228c        	l32i	a6, a2, 0x230
  909847:	db50      	mov.n	a11, a5
	wmiConfig.PoolHandle = sc->pool_handle;
	wmiConfig.MaxCmdReplyEvts = ATH_WMI_MAX_CMD_REPLY;
	wmiConfig.MaxEventEvts = ATH_WMI_MAX_EVENTS;

	sc->tgt_wmi_handle = WMI_Init(&wmiConfig);
	Magpie_Sys_Commands_Tbl->pContext = sc;
  909849:	9351      	s32i.n	a3, a5, 4
	WMI_RegisterDispatchTable(sc->tgt_wmi_handle, Magpie_Sys_Commands_Tbl);
  90984b:	0b6000        	callx8	a6

	HTC_NotifyTargetInserted(sc->tgt_htc_handle);

	/* Start HTC messages exchange */
	HTC_Ready(sc->tgt_htc_handle);
  90984e:	8a32      	l32i.n	a10, a3, 8
  909850:	222281        	l32i	a2, a2, 0x204
	}
	sc->sc_ah = ah;

	tgt_hif_htc_wmi_init(sc);

	sc->sc_bhalq = HAL_NUM_TX_QUEUES - 1;
  909853:	c059      	movi.n	a5, 9
	WMI_RegisterDispatchTable(sc->tgt_wmi_handle, Magpie_Sys_Commands_Tbl);

	HTC_NotifyTargetInserted(sc->tgt_htc_handle);

	/* Start HTC messages exchange */
	HTC_Ready(sc->tgt_htc_handle);
  909855:	0b2000        	callx8	a2
	return tsf64;
}

static a_int32_t ath_rate_setup(struct ath_softc_tgt *sc, a_uint32_t mode)
{
	struct ath_hal *ah = sc->sc_ah;
  909858:	8a7b      	l32i.n	a10, a7, 44
	}
	sc->sc_ah = ah;

	tgt_hif_htc_wmi_init(sc);

	sc->sc_bhalq = HAL_NUM_TX_QUEUES - 1;
  90985a:	223d01        	addmi	a2, a3, 0x100
  90985d:	25241c        	s8i	a5, a2, 28
	struct ath_hal *ah = sc->sc_ah;
	const HAL_RATE_TABLE *rt;

	switch (mode) {
	case IEEE80211_MODE_11NA:
		sc->sc_rates[mode] = ah->ah_getRateTable(ah, HAL_MODE_11NA);
  909860:	82a5      	l32i.n	a2, a10, 20
  909862:	1b6a32        	l32r	a11, 8e412c <bStandardCommand+0x2c8>
  909865:	0b2000        	callx8	a2
  909868:	2a367f        	s32i	a10, a3, 0x1fc
	return tsf64;
}

static a_int32_t ath_rate_setup(struct ath_softc_tgt *sc, a_uint32_t mode)
{
	struct ath_hal *ah = sc->sc_ah;
  90986b:	8a7b      	l32i.n	a10, a7, 44
	switch (mode) {
	case IEEE80211_MODE_11NA:
		sc->sc_rates[mode] = ah->ah_getRateTable(ah, HAL_MODE_11NA);
		break;
	case IEEE80211_MODE_11NG:
		sc->sc_rates[mode] = ah->ah_getRateTable(ah, HAL_MODE_11NG);
  90986d:	1b6a33        	l32r	a11, 8e413c <bStandardCommand+0x2d8>
  909870:	82a5      	l32i.n	a2, a10, 20
  909872:	0b2000        	callx8	a2
  909875:	2a3680        	s32i	a10, a3, 0x200
	sc->sc_bhalq = HAL_NUM_TX_QUEUES - 1;

	ath_rate_setup(sc, IEEE80211_MODE_11NA);
	ath_rate_setup(sc, IEEE80211_MODE_11NG);

	sc->sc_rc = ath_rate_attach(sc);
  909878:	da30      	mov.n	a10, a3
  90987a:	580d4d        	call8	90cdb0 <ath_rate_attach>
  90987d:	2a3648        	s32i	a10, a3, 0x120
	if (sc->sc_rc == NULL) {
  909880:	64a296        	beqz	a10, 909b1a <ath_tgt_attach+0x446>

	/* Start HTC messages exchange */
	HTC_Ready(sc->tgt_htc_handle);
}

a_int32_t ath_tgt_attach(a_uint32_t devid, struct ath_softc_tgt *sc, adf_os_device_t osdev)
  909883:	156a1e        	l32r	a5, 8e40fc <bStandardCommand+0x298>
  909886:	d230      	mov.n	a2, a3
  909888:	a535      	add.n	a5, a3, a5
  90988a:	277a40        	movi	a7, 0x740
		error = EIO;
		goto bad2;
	}

	for (i=0; i < TARGET_NODE_MAX; i++) {
		sc->sc_sta[i].an_rcnode = adf_os_mem_alloc(sc->sc_rc->arc_space);
  90988d:	263248        	l32i	a6, a3, 0x120
  909890:	2a6200        	l32i	a10, a6, 0

	/* Start HTC messages exchange */
	HTC_Ready(sc->tgt_htc_handle);
}

a_int32_t ath_tgt_attach(a_uint32_t devid, struct ath_softc_tgt *sc, adf_os_device_t osdev)
  909893:	a726      	add.n	a6, a2, a7
  909895:	5bf8b1        	call8	907b5c <__adf_os_mem_alloc>
		error = EIO;
		goto bad2;
	}

	for (i=0; i < TARGET_NODE_MAX; i++) {
		sc->sc_sta[i].an_rcnode = adf_os_mem_alloc(sc->sc_rc->arc_space);
  909898:	9a60      	s32i.n	a10, a6, 0
  90989a:	262a0c        	movi	a6, 0x20c
  90989d:	a622      	add.n	a2, a2, a6
	if (sc->sc_rc == NULL) {
		error = EIO;
		goto bad2;
	}

	for (i=0; i < TARGET_NODE_MAX; i++) {
  90989f:	7529ea        	bne	a2, a5, 90988d <ath_tgt_attach+0x1b9>
	((_dd)->dd_desc_paddr + ((caddr_t)(_ds) - (caddr_t)(_dd)->dd_desc))

	a_int32_t error;
	struct ath_tx_buf *bf;

	if(ath_numrxbufs == -1)
  9098a2:	126a11        	l32r	a2, 8e40e8 <bStandardCommand+0x284>
  9098a5:	8520      	l32i.n	a5, a2, 0
  9098a7:	695005        	bnei	a5, -1, 9098b0 <ath_tgt_attach+0x1dc>
		ath_numrxbufs = ATH_RXBUF;
  9098aa:	250a14        	movi	a5, 20
  9098ad:	252600        	s32i	a5, a2, 0

	if (ath_numrxdescs == -1)
  9098b0:	126a34        	l32r	a2, 8e4180 <bStandardCommand+0x31c>
  9098b3:	8520      	l32i.n	a5, a2, 0
  9098b5:	695003        	bnei	a5, -1, 9098bc <ath_tgt_attach+0x1e8>
		ath_numrxdescs = ATH_RXDESC;
  9098b8:	c154      	movi.n	a5, 20
  9098ba:	9520      	s32i.n	a5, a2, 0

	error = ath_descdma_setup(sc, &sc->sc_rxdma, (ath_bufhead *)&sc->sc_rxbuf,
  9098bc:	176a34        	l32r	a7, 8e418c <bStandardCommand+0x328>
  9098bf:	c524      	movi.n	a2, 84
  9098c1:	263a74        	movi	a6, 0x374
  9098c4:	253a54        	movi	a5, 0x354
  9098c7:	9210      	s32i.n	a2, a1, 0
  9098c9:	a636      	add.n	a6, a3, a6
  9098cb:	a535      	add.n	a5, a3, a5
  9098cd:	1d6a35        	l32r	a13, 8e41a4 <bStandardCommand+0x340>
  9098d0:	8e70      	l32i.n	a14, a7, 0
  9098d2:	da30      	mov.n	a10, a3
  9098d4:	066b02        	or	a11, a6, a6
  9098d7:	055c02        	or	a12, a5, a5
  9098da:	2f0a68        	movi	a15, 104
  9098dd:	5bfa2e        	call8	908198 <ath_descdma_setup$constprop$22>
				  "rx", ath_numrxdescs, 1,
				  sizeof(struct ath_rx_buf),
				  sizeof(struct ath_rx_desc));
	if (error != 0)
  9098e0:	65a236        	bnez	a10, 909b1a <ath_tgt_attach+0x446>
	a_uint32_t i;
	struct ath_descdma *dd = &sc->sc_rxdma;
	struct ath_rx_desc *ds = (struct ath_rx_desc *)dd->dd_desc;
	struct ath_rx_desc *ds_prev = NULL;

	asf_tailq_init(&sc->sc_rxdesc);
  9098e3:	283a64        	movi	a8, 0x364
  9098e6:	a838      	add.n	a8, a3, a8
  9098e8:	2836da        	s32i	a8, a3, 0x368
	asf_tailq_init(&sc->sc_rxdesc_idle);
  9098eb:	283a5c        	movi	a8, 0x35c
  9098ee:	a838      	add.n	a8, a3, a8
  9098f0:	2836d8        	s32i	a8, a3, 0x360
	if (error != 0)
		return error;

	a_uint32_t i;
	struct ath_descdma *dd = &sc->sc_rxdma;
	struct ath_rx_desc *ds = (struct ath_rx_desc *)dd->dd_desc;
  9098f3:	2232de        	l32i	a2, a3, 0x378
	struct ath_rx_desc *ds_prev = NULL;

	asf_tailq_init(&sc->sc_rxdesc);
  9098f6:	2a36d9        	s32i	a10, a3, 0x364
	asf_tailq_init(&sc->sc_rxdesc_idle);
  9098f9:	2a36d7        	s32i	a10, a3, 0x35c
		return error;

	a_uint32_t i;
	struct ath_descdma *dd = &sc->sc_rxdma;
	struct ath_rx_desc *ds = (struct ath_rx_desc *)dd->dd_desc;
	struct ath_rx_desc *ds_prev = NULL;
  9098fc:	d8a0      	mov.n	a8, a10

	asf_tailq_init(&sc->sc_rxdesc);
	asf_tailq_init(&sc->sc_rxdesc_idle);

	for (i = 0; i < ath_numrxdescs; i++, ds++) {
  9098fe:	dca0      	mov.n	a12, a10
  909900:	6000d9        	j	9099dd <ath_tgt_attach+0x309>
  909903:	00002b        	mulsh	a0, a0, a0

		if (ds->ds_nbuf != ADF_NBUF_NULL) {
  909906:	20342a        	s8i	a0, a3, 42
  909909:	203529        	s16i	a0, a3, 82
  90990c:	203608        	s32i	a0, a3, 32
  90990f:	bb10      	addi.n	a0, a1, 11
  909911:	00aa11        	slli	a10, a10, 16
  909914:	0baa02        	or	a10, a10, a11
  909917:	089911        	slli	a9, a9, 8
  90991a:	0a9902        	or	a9, a9, a10
  90991d:	2a2037        	l8ui	a10, a2, 55
  909920:	09a902        	or	a9, a10, a9
  909923:	64900e        	beqz	a9, 909935 <ath_tgt_attach+0x261>
			ds->ds_nbuf = ADF_NBUF_NULL;
  909926:	290a00        	movi	a9, 0
  909929:	292434        	s8i	a9, a2, 52
  90992c:	292435        	s8i	a9, a2, 53
  90992f:	292436        	s8i	a9, a2, 54
  909932:	292437        	s8i	a9, a2, 55
 */
static inline a_status_t
adf_nbuf_dmamap_create(adf_os_device_t osdev,
                       adf_os_dma_map_t *dmap)
{
    return (__adf_nbuf_dmamap_create(osdev, dmap));
  909935:	2a3246        	l32i	a10, a3, 0x118
  909938:	2b2c38        	addi	a11, a2, 56
  90993b:	281611        	s32i	a8, a1, 68
  90993e:	2c1610        	s32i	a12, a1, 64
  909941:	5bf447        	call8	906a60 <__adf_nbuf_dmamap_create>
		}

		if (adf_nbuf_dmamap_create(sc->sc_dev, &ds->ds_dmap) != A_STATUS_OK) {
  909944:	281211        	l32i	a8, a1, 68
  909947:	2c1210        	l32i	a12, a1, 64
  90994a:	64a01c        	beqz	a10, 90996a <ath_tgt_attach+0x296>
			adf_os_assert(0);
  90994d:	196915        	l32r	a9, 8e3da4 <bSet_configuration+0x250>
  909950:	1a69f6        	l32r	a10, 8e4128 <bStandardCommand+0x2c4>
  909953:	299212        	l32i	a9, a9, 72
  909956:	1b6a36        	l32r	a11, 8e4230 <bStandardCommand+0x3cc>
  909959:	0b9000        	callx8	a9
  90995c:	19697a        	l32r	a9, 8e3f44 <bStandardCommand+0xe0>
  90995f:	2c1210        	l32i	a12, a1, 64
  909962:	0c0200        	memw
  909965:	8990      	l32i.n	a9, a9, 0
  909967:	281211        	l32i	a8, a1, 68
		}

		ds->ds_daddr = DS2PHYS(&sc->sc_rxdma, ds);
  90996a:	2932de        	l32i	a9, a3, 0x378
  90996d:	2a32e0        	l32i	a10, a3, 0x380
  909970:	09290c        	sub	a9, a2, a9
  909973:	aa99      	add.n	a9, a9, a10
  909975:	098d57        	extui	a13, a9, 24, 8
  909978:	090b57        	extui	a11, a9, 16, 8
  90997b:	098a47        	extui	a10, a9, 8, 8
  90997e:	090947        	extui	a9, a9, 0, 8
  909981:	2d2448        	s8i	a13, a2, 72
  909984:	2b2449        	s8i	a11, a2, 73
  909987:	2a244a        	s8i	a10, a2, 74
  90998a:	29244b        	s8i	a9, a2, 75

		if (ds_prev) {
  90998d:	64800b        	beqz	a8, 90999c <ath_tgt_attach+0x2c8>
			ds_prev->ds_link = ds->ds_daddr;
  909990:	2d8400        	s8i	a13, a8, 0
  909993:	2b8401        	s8i	a11, a8, 1
  909996:	2a8402        	s8i	a10, a8, 2
  909999:	298403        	s8i	a9, a8, 3
		}

		ds->ds_link = 0;
  90999c:	c080      	movi.n	a8, 0
  90999e:	282400        	s8i	a8, a2, 0
  9099a1:	282401        	s8i	a8, a2, 1
  9099a4:	282402        	s8i	a8, a2, 2
  9099a7:	282403        	s8i	a8, a2, 3
		ds_prev = ds;

		asf_tailq_insert_tail(&sc->sc_rxdesc, ds, ds_list);
  9099aa:	28244c        	s8i	a8, a2, 76
  9099ad:	28244d        	s8i	a8, a2, 77
  9099b0:	28244e        	s8i	a8, a2, 78
  9099b3:	28244f        	s8i	a8, a2, 79
  9099b6:	2832da        	l32i	a8, a3, 0x368
	struct ath_rx_desc *ds_prev = NULL;

	asf_tailq_init(&sc->sc_rxdesc);
	asf_tailq_init(&sc->sc_rxdesc_idle);

	for (i = 0; i < ath_numrxdescs; i++, ds++) {
  9099b9:	b1cc      	addi.n	a12, a12, 1
		}

		ds->ds_link = 0;
		ds_prev = ds;

		asf_tailq_insert_tail(&sc->sc_rxdesc, ds, ds_list);
  9099bb:	088957        	extui	a9, a8, 24, 8
  9099be:	292450        	s8i	a9, a2, 80
  9099c1:	080957        	extui	a9, a8, 16, 8
  9099c4:	292451        	s8i	a9, a2, 81
  9099c7:	088947        	extui	a9, a8, 8, 8
  9099ca:	282453        	s8i	a8, a2, 83
  9099cd:	292452        	s8i	a9, a2, 82
  9099d0:	9280      	s32i.n	a2, a8, 0
  9099d2:	282c4c        	addi	a8, a2, 76
  9099d5:	2836da        	s32i	a8, a3, 0x368
	struct ath_rx_desc *ds_prev = NULL;

	asf_tailq_init(&sc->sc_rxdesc);
	asf_tailq_init(&sc->sc_rxdesc_idle);

	for (i = 0; i < ath_numrxdescs; i++, ds++) {
  9099d8:	d820      	mov.n	a8, a2
  9099da:	222c54        	addi	a2, a2, 84
  9099dd:	8970      	l32i.n	a9, a7, 0
  9099df:	79cb02        	bgeu	a12, a9, 9099e5 <ath_tgt_attach+0x311>
  9099e2:	63ff1f        	j	909905 <ath_tgt_attach+0x231>
		ds_prev = ds;

		asf_tailq_insert_tail(&sc->sc_rxdesc, ds, ds_list);
	}

	error = ath_descdma_setup(sc, &sc->sc_txdma, (ath_bufhead *)&sc->sc_txbuf,
  9099e5:	273a8c        	movi	a7, 0x38c
  9099e8:	223ac0        	movi	a2, 0x3c0
  9099eb:	290a88        	movi	a9, 136
  9099ee:	a737      	add.n	a7, a3, a7
  9099f0:	a232      	add.n	a2, a3, a2
  9099f2:	1d6a37        	l32r	a13, 8e42d0 <bStandardCommand+0x46c>
  9099f5:	9910      	s32i.n	a9, a1, 0
  9099f7:	da30      	mov.n	a10, a3
  9099f9:	db70      	mov.n	a11, a7
  9099fb:	dc20      	mov.n	a12, a2
  9099fd:	c2ee      	movi.n	a14, 46
  9099ff:	2f0a94        	movi	a15, 148
  909a02:	291610        	s32i	a9, a1, 64
  909a05:	5bf9e4        	call8	908198 <ath_descdma_setup$constprop$22>
  909a08:	d8a0      	mov.n	a8, a10
				  "tx", ATH_TXBUF + 1, ATH_TXDESC,
				  sizeof(struct ath_tx_buf),
				  sizeof(struct ath_tx_desc));
	if (error != 0) {
  909a0a:	291210        	l32i	a9, a1, 64
  909a0d:	c8a4      	beqz.n	a10, 909a15 <ath_tgt_attach+0x341>
  909a0f:	60002e        	j	909a41 <ath_tgt_attach+0x36d>
  909a12:	000000        	ill
		ath_descdma_cleanup(sc, &sc->sc_rxdma, (ath_bufhead *)&sc->sc_rxbuf,
				    ADF_OS_DMA_FROM_DEVICE);
		return error;
	}

	error = ath_descdma_setup(sc, &sc->sc_bdma, (ath_bufhead *)&sc->sc_bbuf,
  909a15:	1c6a38        	l32r	a12, 8e42f8 <bStandardCommand+0x494>
  909a18:	2b3aa4        	movi	a11, 0x3a4
  909a1b:	1d6a39        	l32r	a13, 8e4300 <bStandardCommand+0x49c>
  909a1e:	9910      	s32i.n	a9, a1, 0
  909a20:	da30      	mov.n	a10, a3
  909a22:	ab3b      	add.n	a11, a3, a11
  909a24:	ac3c      	add.n	a12, a3, a12
  909a26:	c0e1      	movi.n	a14, 1
  909a28:	2f0a94        	movi	a15, 148
  909a2b:	281611        	s32i	a8, a1, 68
  909a2e:	5bf9da        	call8	908198 <ath_descdma_setup$constprop$22>
				  "beacon", ATH_BCBUF, 1,
				  sizeof(struct ath_tx_buf),
				  sizeof(struct ath_tx_desc));
	if (error != 0) {
  909a31:	281211        	l32i	a8, a1, 68
  909a34:	c9a8      	beqz.n	a10, 909a50 <ath_tgt_attach+0x37c>
		ath_descdma_cleanup(sc, &sc->sc_txdma, (ath_bufhead *)&sc->sc_txbuf,
  909a36:	da30      	mov.n	a10, a3
  909a38:	db70      	mov.n	a11, a7
  909a3a:	dc20      	mov.n	a12, a2
  909a3c:	dd80      	mov.n	a13, a8
  909a3e:	5bf8a2        	call8	907cc8 <ath_descdma_cleanup>
				    ADF_OS_DMA_TO_DEVICE);
		ath_descdma_cleanup(sc, &sc->sc_rxdma, (ath_bufhead *)&sc->sc_rxbuf,
  909a41:	da30      	mov.n	a10, a3
  909a43:	db60      	mov.n	a11, a6
  909a45:	dc50      	mov.n	a12, a5
  909a47:	c0d1      	movi.n	a13, 1
  909a49:	5bf89f        	call8	907cc8 <ath_descdma_cleanup>
  909a4c:	6000ca        	j	909b1a <ath_tgt_attach+0x446>
  909a4f:	002232        	sext	a2, a2, 7
				    ADF_OS_DMA_FROM_DEVICE);
		return error;
	}

	bf = asf_tailq_first(&sc->sc_txbuf);
  909a52:	f0          	.byte 0xf0
	bf->bf_isaggr = bf->bf_isretried = bf->bf_retries = 0;
  909a53:	c65f      	movi.n	a5, -17
  909a55:	262087        	l8ui	a6, a2, 135
  909a58:	2a2486        	s8i	a10, a2, 134
  909a5b:	056501        	and	a5, a6, a5
  909a5e:	26fadf        	movi	a6, -33
  909a61:	065501        	and	a5, a5, a6
  909a64:	252487        	s8i	a5, a2, 135
	asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  909a67:	8529      	l32i.n	a5, a2, 36
  909a69:	862a      	l32i.n	a6, a2, 40
  909a6b:	c856      	beqz.n	a5, 909a75 <ath_tgt_attach+0x3a1>
  909a6d:	965a      	s32i.n	a6, a5, 40
  909a6f:	600005        	j	909a78 <ath_tgt_attach+0x3a4>
  909a72:	000000        	ill
  909a75:	2636f1        	s32i	a6, a3, 0x3c4
  909a78:	862a      	l32i.n	a6, a2, 40
	error = ath_desc_alloc(sc);
	if (error != 0) {
		goto bad;
	}

	BUF_Pool_create_pool(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ath_numrxdescs, 1664);
  909a7a:	c0b3      	movi.n	a11, 3
		return error;
	}

	bf = asf_tailq_first(&sc->sc_txbuf);
	bf->bf_isaggr = bf->bf_isretried = bf->bf_retries = 0;
	asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  909a7c:	9560      	s32i.n	a5, a6, 0

	sc->sc_txbuf_held = bf;
  909a7e:	2236dc        	s32i	a2, a3, 0x370
	error = ath_desc_alloc(sc);
	if (error != 0) {
		goto bad;
	}

	BUF_Pool_create_pool(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ath_numrxdescs, 1664);
  909a81:	156a34        	l32r	a5, 8e4354 <bStandardCommand+0x4f0>
  909a84:	126915        	l32r	a2, 8e3ed8 <bStandardCommand+0x74>
  909a87:	2a3200        	l32i	a10, a3, 0
  909a8a:	22229b        	l32i	a2, a2, 0x26c
  909a8d:	2c5200        	l32i	a12, a5, 0
  909a90:	2d6a80        	movi	a13, 0x680
  909a93:	0b2000        	callx8	a2
static void ath_tgt_txq_setup(struct ath_softc_tgt *sc)
{
	a_int32_t qnum;
	struct ath_txq *txq;

	sc->sc_txqsetup=0;
  909a96:	c050      	movi.n	a5, 0
  909a98:	223d03        	addmi	a2, a3, 0x300
  909a9b:	2524c8        	s8i	a5, a2, 200

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
  909a9e:	c050      	movi.n	a5, 0
		txq= &sc->sc_txq[qnum];
		txq->axq_qnum = qnum;
		txq->axq_link = NULL;
  909aa0:	d750      	mov.n	a7, a5
		asf_tailq_init(&txq->axq_q);
		txq->axq_depth = 0;
		txq->axq_linkbuf = NULL;
		asf_tailq_init(&txq->axq_tidq);
		sc->sc_txqsetup |= 1<<qnum;
  909aa2:	2a0a01        	movi	a10, 1
	struct ath_txq *txq;

	sc->sc_txqsetup=0;

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
		txq= &sc->sc_txq[qnum];
  909aa5:	285c1e        	addi	a8, a5, 30
  909aa8:	0b8811        	slli	a8, a8, 5
  909aab:	a838      	add.n	a8, a3, a8
		txq->axq_qnum = qnum;
		txq->axq_link = NULL;
		asf_tailq_init(&txq->axq_q);
  909aad:	298c14        	addi	a9, a8, 20

	sc->sc_txqsetup=0;

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
		txq= &sc->sc_txq[qnum];
		txq->axq_qnum = qnum;
  909ab0:	9583      	s32i.n	a5, a8, 12
		txq->axq_link = NULL;
		asf_tailq_init(&txq->axq_q);
  909ab2:	9986      	s32i.n	a9, a8, 24
	struct ath_txq *txq;

	sc->sc_txqsetup=0;

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
		txq= &sc->sc_txq[qnum];
  909ab4:	bc86      	addi.n	a6, a8, 12
		txq->axq_qnum = qnum;
		txq->axq_link = NULL;
  909ab6:	9784      	s32i.n	a7, a8, 16
		asf_tailq_init(&txq->axq_q);
  909ab8:	9785      	s32i.n	a7, a8, 20
		txq->axq_depth = 0;
  909aba:	9787      	s32i.n	a7, a8, 28
		txq->axq_linkbuf = NULL;
  909abc:	9788      	s32i.n	a7, a8, 32
		asf_tailq_init(&txq->axq_tidq);
  909abe:	9789      	s32i.n	a7, a8, 36
  909ac0:	288c24        	addi	a8, a8, 36
  909ac3:	9867      	s32i.n	a8, a6, 28
		sc->sc_txqsetup |= 1<<qnum;
  909ac5:	263d03        	addmi	a6, a3, 0x300
  909ac8:	2860c8        	l8ui	a8, a6, 200
  909acb:	005104        	ssl	a5
  909ace:	00a91a        	sll	a9, a10
  909ad1:	089802        	or	a8, a9, a8
  909ad4:	2864c8        	s8i	a8, a6, 200
	a_int32_t qnum;
	struct ath_txq *txq;

	sc->sc_txqsetup=0;

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
  909ad7:	b155      	addi.n	a5, a5, 1
		txq= &sc->sc_txq[qnum];
		txq->axq_qnum = qnum;
		txq->axq_link = NULL;
  909ad9:	c020      	movi.n	a2, 0
	a_int32_t qnum;
	struct ath_txq *txq;

	sc->sc_txqsetup=0;

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
  909adb:	6959c6        	bnei	a5, 10, 909aa5 <ath_tgt_attach+0x3d1>
		txq->axq_linkbuf = NULL;
		asf_tailq_init(&txq->axq_tidq);
		sc->sc_txqsetup |= 1<<qnum;
	}

	sc->sc_uapsdq  = &sc->sc_txq[UAPSDQ_NUM];
  909ade:	264aec        	movi	a6, 0x4ec
  909ae1:	253d05        	addmi	a5, a3, 0x500
  909ae4:	a636      	add.n	a6, a3, a6
  909ae6:	965d      	s32i.n	a6, a5, 52
	sc->sc_cabq    = &sc->sc_txq[CABQ_NUM];
  909ae8:	264acc        	movi	a6, 0x4cc
  909aeb:	a636      	add.n	a6, a3, a6
  909aed:	965c      	s32i.n	a6, a5, 48

	sc->sc_ac2q[WME_AC_BE]  = &sc->sc_txq[0];
  909aef:	263acc        	movi	a6, 0x3cc
  909af2:	a636      	add.n	a6, a3, a6
  909af4:	9653      	s32i.n	a6, a5, 12
	sc->sc_ac2q[WME_AC_BK]  = &sc->sc_txq[1];
  909af6:	263aec        	movi	a6, 0x3ec
  909af9:	a636      	add.n	a6, a3, a6
  909afb:	9654      	s32i.n	a6, a5, 16
	sc->sc_ac2q[WME_AC_VI]  = &sc->sc_txq[2];
  909afd:	264a0c        	movi	a6, 0x40c
  909b00:	a636      	add.n	a6, a3, a6
  909b02:	9655      	s32i.n	a6, a5, 20
	sc->sc_ac2q[WME_AC_VO]  = &sc->sc_txq[3];
  909b04:	264a2c        	movi	a6, 0x42c
  909b07:	a636      	add.n	a6, a3, a6
	}

	BUF_Pool_create_pool(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ath_numrxdescs, 1664);

	ath_tgt_txq_setup(sc);
	sc->sc_imask =0;
  909b09:	2236c4        	s32i	a2, a3, 0x310
	ah->ah_setInterrupts(ah, 0);
  909b0c:	234228        	l32i	a3, a4, 160
	sc->sc_cabq    = &sc->sc_txq[CABQ_NUM];

	sc->sc_ac2q[WME_AC_BE]  = &sc->sc_txq[0];
	sc->sc_ac2q[WME_AC_BK]  = &sc->sc_txq[1];
	sc->sc_ac2q[WME_AC_VI]  = &sc->sc_txq[2];
	sc->sc_ac2q[WME_AC_VO]  = &sc->sc_txq[3];
  909b0f:	9656      	s32i.n	a6, a5, 24

	BUF_Pool_create_pool(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ath_numrxdescs, 1664);

	ath_tgt_txq_setup(sc);
	sc->sc_imask =0;
	ah->ah_setInterrupts(ah, 0);
  909b11:	da40      	mov.n	a10, a4
  909b13:	db20      	mov.n	a11, a2
  909b15:	0b3000        	callx8	a3
  909b18:	d10f      	retw.n

	return 0;
bad:
bad2:
	ath_desc_free(sc);
  909b1a:	da30      	mov.n	a10, a3
  909b1c:	5bf98b        	call8	90814c <ath_desc_free>
	if (ah)
  909b1f:	c845      	beqz.n	a4, 909b28 <ath_tgt_attach+0x454>
		ah->ah_detach(ah);
  909b21:	8246      	l32i.n	a2, a4, 24
  909b23:	da40      	mov.n	a10, a4
  909b25:	0b2000        	callx8	a2
}
  909b28:	d10f      	retw.n
	...

00909b2c <ath_detach>:
	HIF_shutdown(sc->tgt_hif_handle);
	BUF_Pool_shutdown(sc->pool_handle);
}

a_int32_t ath_detach(struct ath_softc_tgt *sc)
{
  909b2c:	6c1004        	entry	a1, 32

static void tgt_hif_htc_wmi_shutdown(struct ath_softc_tgt *sc)
{
	HTC_NotifyTargetDetached(sc->tgt_htc_handle);

	WMI_Shutdown(sc->tgt_wmi_handle);
  909b2f:	136915        	l32r	a3, 8e3f84 <bStandardCommand+0x120>
  909b32:	8a23      	l32i.n	a10, a2, 12
  909b34:	283292        	l32i	a8, a3, 0x248
  909b37:	0b8000        	callx8	a8
	HTC_Shutdown(sc->tgt_htc_handle);
  909b3a:	8a22      	l32i.n	a10, a2, 8
  909b3c:	28327f        	l32i	a8, a3, 0x1fc
  909b3f:	0b8000        	callx8	a8
	HIF_shutdown(sc->tgt_hif_handle);
  909b42:	8a21      	l32i.n	a10, a2, 4
  909b44:	283271        	l32i	a8, a3, 0x1c4
  909b47:	0b8000        	callx8	a8
	BUF_Pool_shutdown(sc->pool_handle);
  909b4a:	8a20      	l32i.n	a10, a2, 0
  909b4c:	23329a        	l32i	a3, a3, 0x268
  909b4f:	0b3000        	callx8	a3
}

a_int32_t ath_detach(struct ath_softc_tgt *sc)
{
	tgt_hif_htc_wmi_shutdown(sc);
}
  909b52:	d10f      	retw.n

00909b54 <wlan_pci_module_init>:
adf_drv_info_t* g_wlan_drv = NULL;
adf_drv_handle_t g_wlan_drv_handle = NULL;
adf_os_drv_intr g_wlan_intr = NULL;

void wlan_pci_module_init(void)
{
  909b54:	6c1004        	entry	a1, 32
	if (g_pci_init_func != NULL) {
  909b57:	186a3a        	l32r	a8, 8e4440 <bStandardCommand+0x5dc>
  909b5a:	8a80      	l32i.n	a10, a8, 0
  909b5c:	c8a1      	beqz.n	a10, 909b61 <wlan_pci_module_init+0xd>
		g_pci_init_func();
  909b5e:	0ba000        	callx8	a10
  909b61:	d10f      	retw.n
	...

00909b64 <wlan_pci_register_drv>:
	}
}

void wlan_pci_register_drv(adf_drv_info_t *drv)
{
  909b64:	6c1004        	entry	a1, 32
	g_wlan_drv = drv;
  909b67:	186a3b        	l32r	a8, 8e4454 <bStandardCommand+0x5f0>
  909b6a:	9280      	s32i.n	a2, a8, 0
  909b6c:	d10f      	retw.n
	...

00909b70 <wlan_pci_config_write>:
mem_fail:
	return;        
}

int wlan_pci_config_write(int offset, a_uint32_t val, int width)
{
  909b70:	6c1006        	entry	a1, 48
#if MAGPIE_ENABLE_PCIE == 1    
	unsigned long addr = ( PCI_CONFIG_BASE_ADDR + offset ) & 0xfffffffc;
  909b73:	1a6a3c        	l32r	a10, 8e4464 <bStandardCommand+0x600>
  909b76:	c78c      	movi.n	a8, -4
  909b78:	aa2a      	add.n	a10, a2, a10
  909b7a:	08aa01        	and	a10, a10, a8
	A_UINT8 *ptr = (A_UINT8 *)addr;   
	A_UINT8 *valptr = (A_UINT8 *)&val; 
	int idx = offset & 0x3;
  909b7d:	020241        	extui	a2, a2, 0, 2
mem_fail:
	return;        
}

int wlan_pci_config_write(int offset, a_uint32_t val, int width)
{
  909b80:	9310      	s32i.n	a3, a1, 0
	return;
mem_fail:
	return;        
}

int wlan_pci_config_write(int offset, a_uint32_t val, int width)
  909b82:	b319      	addi.n	a9, a1, 3
	A_UINT8 *ptr = (A_UINT8 *)addr;   
	A_UINT8 *valptr = (A_UINT8 *)&val; 
	int idx = offset & 0x3;
	int i;
    
	for (i = 0; i < width; i++) {
  909b84:	c080      	movi.n	a8, 0
	return;
mem_fail:
	return;        
}

int wlan_pci_config_write(int offset, a_uint32_t val, int width)
  909b86:	a2a2      	add.n	a2, a10, a2
	A_UINT8 *ptr = (A_UINT8 *)addr;   
	A_UINT8 *valptr = (A_UINT8 *)&val; 
	int idx = offset & 0x3;
	int i;
    
	for (i = 0; i < width; i++) {
  909b88:	60000c        	j	909b98 <wlan_pci_config_write+0x28>
  909b8b:	002b90        	l32e	a0, a2, -20
		ptr[idx + i] = valptr[3-i];
  909b8e:	00a82a        	muluh	a8, a10, a0
  909b91:	2ba400        	s8i	a11, a10, 0
	A_UINT8 *ptr = (A_UINT8 *)addr;   
	A_UINT8 *valptr = (A_UINT8 *)&val; 
	int idx = offset & 0x3;
	int i;
    
	for (i = 0; i < width; i++) {
  909b94:	b188      	addi.n	a8, a8, 1
  909b96:	b099      	addi.n	a9, a9, -1
  909b98:	7482f0        	blt	a8, a4, 909b8c <wlan_pci_config_write+0x1c>
		ptr[idx + i] = valptr[3-i];
	}            
#endif
    
	return 0;    
}
  909b9b:	c020      	movi.n	a2, 0
  909b9d:	d10f      	retw.n
	...

00909ba0 <wlan_pci_config_read>:

int wlan_pci_config_read(int offset, int width)
{
  909ba0:	6c1006        	entry	a1, 48
#if MAGPIE_ENABLE_PCIE == 0    
	return 0;    
#else
	unsigned long addr = ( PCI_CONFIG_BASE_ADDR + offset ) & 0xfffffffc;
  909ba3:	186a3c        	l32r	a8, 8e4494 <bStandardCommand+0x630>
  909ba6:	c79c      	movi.n	a9, -4
  909ba8:	a828      	add.n	a8, a2, a8
  909baa:	098801        	and	a8, a8, a9
	unsigned long value = *((unsigned long *)addr);
  909bad:	8880      	l32i.n	a8, a8, 0
	A_UINT8 *ptr = (A_UINT8 *)&value;   
	int idx = offset & 0x3;
  909baf:	020941        	extui	a9, a2, 0, 2
{
#if MAGPIE_ENABLE_PCIE == 0    
	return 0;    
#else
	unsigned long addr = ( PCI_CONFIG_BASE_ADDR + offset ) & 0xfffffffc;
	unsigned long value = *((unsigned long *)addr);
  909bb2:	9810      	s32i.n	a8, a1, 0
#endif
    
	return 0;    
}

int wlan_pci_config_read(int offset, int width)
  909bb4:	09190c        	sub	a9, a1, a9
	A_UINT8 *ptr = (A_UINT8 *)&value;   
	int idx = offset & 0x3;
	int result = 0;
	int i;
    
	for (i = 0; i < width; i++) {
  909bb7:	c080      	movi.n	a8, 0
#endif
    
	return 0;    
}

int wlan_pci_config_read(int offset, int width)
  909bb9:	b399      	addi.n	a9, a9, 3
#else
	unsigned long addr = ( PCI_CONFIG_BASE_ADDR + offset ) & 0xfffffffc;
	unsigned long value = *((unsigned long *)addr);
	A_UINT8 *ptr = (A_UINT8 *)&value;   
	int idx = offset & 0x3;
	int result = 0;
  909bbb:	d280      	mov.n	a2, a8
	int i;
    
	for (i = 0; i < width; i++) {
  909bbd:	600012        	j	909bd3 <wlan_pci_config_read+0x33>
		result |= (ptr[ 3 - (idx + i)] << (8*i));
  909bc0:	2b9000        	l8ui	a11, a9, 0
#endif
    
	return 0;    
}

int wlan_pci_config_read(int offset, int width)
  909bc3:	0d8a11        	slli	a10, a8, 3
	int idx = offset & 0x3;
	int result = 0;
	int i;
    
	for (i = 0; i < width; i++) {
		result |= (ptr[ 3 - (idx + i)] << (8*i));
  909bc6:	00a104        	ssl	a10
  909bc9:	00ba1a        	sll	a10, a11
  909bcc:	0a2202        	or	a2, a2, a10
	A_UINT8 *ptr = (A_UINT8 *)&value;   
	int idx = offset & 0x3;
	int result = 0;
	int i;
    
	for (i = 0; i < width; i++) {
  909bcf:	b188      	addi.n	a8, a8, 1
  909bd1:	b099      	addi.n	a9, a9, -1
  909bd3:	7382e9        	blt	a8, a3, 909bc0 <wlan_pci_config_read+0x20>
		result |= (ptr[ 3 - (idx + i)] << (8*i));
	}            
    
	return result;    
#endif    
}
  909bd6:	d10f      	retw.n

00909bd8 <wlan_pci_probe>:

#define ATHEROS_VENDOR_ID 0x168c
#define AR5416_DEVID_PCIE 0x24 	

void wlan_pci_probe(void)
{
  909bd8:	6c100a        	entry	a1, 80
	__adf_softc_t           *sc;
	adf_os_resource_t       drv_res = {0};
  909bdb:	c0b0      	movi.n	a11, 0
  909bdd:	2c0a18        	movi	a12, 24
  909be0:	011a02        	or	a10, a1, a1
  909be3:	5b7499        	call8	8e6e48 <memset>
	adf_os_attach_data_t    drv_data = {{0}};   
  909be6:	c1c0      	movi.n	a12, 16
  909be8:	2b0a00        	movi	a11, 0
  909beb:	2a1c18        	addi	a10, a1, 24
  909bee:	5b7496        	call8	8e6e48 <memset>
	int vendor_id;
	int device_id;

	A_PRINTF("<wlan_pci_probe>: Attaching the driver\n");
  909bf1:	126915        	l32r	a2, 8e4048 <bStandardCommand+0x1e4>
  909bf4:	1a6a3d        	l32r	a10, 8e44e8 <bStandardCommand+0x684>
  909bf7:	232212        	l32i	a3, a2, 72
  909bfa:	0b3000        	callx8	a3

#if MAGPIE_ENABLE_PCIE == 0
	vendor_id = ATHEROS_VENDOR_ID;
	device_id = AR5416_DEVID_PCIE;
#else    
	vendor_id = wlan_pci_config_read(0, 2);
  909bfd:	c0b2      	movi.n	a11, 2
  909bff:	c0a0      	movi.n	a10, 0
  909c01:	5bffe7        	call8	909ba0 <wlan_pci_config_read>
  909c04:	d3a0      	mov.n	a3, a10
	device_id = wlan_pci_config_read(2, 2);
  909c06:	c0a2      	movi.n	a10, 2
  909c08:	dba0      	mov.n	a11, a10
  909c0a:	5bffe5        	call8	909ba0 <wlan_pci_config_read>
  909c0d:	0aac02        	or	a12, a10, a10
#endif    
	A_PRINTF("<wlan_pci_probe>: Vendor id 0x%x Dev id 0x%x\n", vendor_id, device_id);    
  909c10:	282212        	l32i	a8, a2, 72
  909c13:	1a6a3e        	l32r	a10, 8e450c <bStandardCommand+0x6a8>
  909c16:	033b02        	or	a11, a3, a3
  909c19:	0b8000        	callx8	a8
    
	if (vendor_id != ATHEROS_VENDOR_ID) {
  909c1c:	186a3f        	l32r	a8, 8e4518 <bStandardCommand+0x6b4>
  909c1f:	783109        	beq	a3, a8, 909c2c <wlan_pci_probe+0x54>
		A_PRINTF("<wlan_pci_probe>: Atheros card not found\n"); 
  909c22:	222212        	l32i	a2, a2, 72
  909c25:	1a6a40        	l32r	a10, 8e4528 <bStandardCommand+0x6c4>
  909c28:	600012        	j	909c3e <wlan_pci_probe+0x66>
  909c2b:	002822        	excw
	}
            
	/**
	 * Allocate the sc & zero down
	 */
	sc = A_ALLOCRAM(sizeof(__adf_softc_t));
  909c2e:	52c0a0        	call0	8b9eb0 <_bss_end+0x3a6fa0>
  909c31:	c0b4      	movi.n	a11, 4
  909c33:	0b8000        	callx8	a8
	if (!sc) {
  909c36:	ccaa      	bnez.n	a10, 909c44 <wlan_pci_probe+0x6c>
		A_PRINTF("Cannot malloc softc\n");
  909c38:	222212        	l32i	a2, a2, 72
  909c3b:	1a6a41        	l32r	a10, 8e4540 <bStandardCommand+0x6dc>
  909c3e:	0b2000        	callx8	a2
  909c41:	d10f      	retw.n
  909c43:	00c224        	excw
		goto mem_fail;
	}
    
#define AR5416_DEVID_PCIE 0x24 		

	drv_data.pci.device    = AR5416_DEVID_PCIE;
  909c46:	9217      	s32i.n	a2, a1, 28
    
	drv_res.start  = (a_uint32_t) 0;
	drv_res.end    = 0;
	drv_res.type   = ADF_OS_RESOURCE_TYPE_MEM;
        
	g_wlan_drv_handle = g_wlan_drv->drv_attach(&drv_res, 1, &drv_data, NULL);
  909c48:	126a3b        	l32r	a2, 8e4534 <bStandardCommand+0x6d0>
    
#define AR5416_DEVID_PCIE 0x24 		

	drv_data.pci.device    = AR5416_DEVID_PCIE;
	drv_data.pci.vendor    = 0x168c;
	drv_data.pci.subvendor = 0;
  909c4b:	c0d0      	movi.n	a13, 0
    
	drv_res.start  = (a_uint32_t) 0;
	drv_res.end    = 0;
	drv_res.type   = ADF_OS_RESOURCE_TYPE_MEM;
        
	g_wlan_drv_handle = g_wlan_drv->drv_attach(&drv_res, 1, &drv_data, NULL);
  909c4d:	8220      	l32i.n	a2, a2, 0
	drv_data.pci.device    = AR5416_DEVID_PCIE;
	drv_data.pci.vendor    = 0x168c;
	drv_data.pci.subvendor = 0;
	drv_data.pci.subdevice = 0;
    
	drv_res.start  = (a_uint32_t) 0;
  909c4f:	186a42        	l32r	a8, 8e4558 <bStandardCommand+0x6f4>
  909c52:	196a42        	l32r	a9, 8e455c <bStandardCommand+0x6f8>
	}
    
#define AR5416_DEVID_PCIE 0x24 		

	drv_data.pci.device    = AR5416_DEVID_PCIE;
	drv_data.pci.vendor    = 0x168c;
  909c55:	9316      	s32i.n	a3, a1, 24
	drv_data.pci.subvendor = 0;
  909c57:	9d18      	s32i.n	a13, a1, 32
	drv_data.pci.subdevice = 0;
  909c59:	9d19      	s32i.n	a13, a1, 36
    
	drv_res.start  = (a_uint32_t) 0;
	drv_res.end    = 0;
	drv_res.type   = ADF_OS_RESOURCE_TYPE_MEM;
        
	g_wlan_drv_handle = g_wlan_drv->drv_attach(&drv_res, 1, &drv_data, NULL);
  909c5b:	8220      	l32i.n	a2, a2, 0
	drv_data.pci.device    = AR5416_DEVID_PCIE;
	drv_data.pci.vendor    = 0x168c;
	drv_data.pci.subvendor = 0;
	drv_data.pci.subdevice = 0;
    
	drv_res.start  = (a_uint32_t) 0;
  909c5d:	9810      	s32i.n	a8, a1, 0
  909c5f:	9911      	s32i.n	a9, a1, 4
	drv_res.end    = 0;
  909c61:	9812      	s32i.n	a8, a1, 8
  909c63:	9913      	s32i.n	a9, a1, 12
	drv_res.type   = ADF_OS_RESOURCE_TYPE_MEM;
  909c65:	9d14      	s32i.n	a13, a1, 16
        
	g_wlan_drv_handle = g_wlan_drv->drv_attach(&drv_res, 1, &drv_data, NULL);
  909c67:	da10      	mov.n	a10, a1
  909c69:	c0b1      	movi.n	a11, 1
  909c6b:	2c1c18        	addi	a12, a1, 24
  909c6e:	0b2000        	callx8	a2
  909c71:	126a43        	l32r	a2, 8e4580 <bStandardCommand+0x71c>
  909c74:	9a20      	s32i.n	a10, a2, 0
  909c76:	d10f      	retw.n

00909c78 <wlan_pci_isr>:
	return result;    
#endif    
}

void wlan_pci_isr()
{
  909c78:	6c1004        	entry	a1, 32
	if (g_wlan_intr != NULL && g_wlan_drv_handle != NULL) {
  909c7b:	186a44        	l32r	a8, 8e458c <bStandardCommand+0x728>
  909c7e:	8880      	l32i.n	a8, a8, 0
  909c80:	c888      	beqz.n	a8, 909c8c <wlan_pci_isr+0x14>
  909c82:	196a43        	l32r	a9, 8e4590 <bStandardCommand+0x72c>
  909c85:	8a90      	l32i.n	a10, a9, 0
  909c87:	c8a1      	beqz.n	a10, 909c8c <wlan_pci_isr+0x14>
		g_wlan_intr(g_wlan_drv_handle);
  909c89:	0b8000        	callx8	a8
  909c8c:	d10f      	retw.n
	...

00909c90 <_HTC_Shutdown>:
    
	return pHTC;
}

LOCAL void _HTC_Shutdown(htc_handle_t htcHandle)
{
  909c90:	6c1004        	entry	a1, 32
  909c93:	d10f      	retw.n
  909c95:	000000        	ill

00909c98 <_HTC_RegisterService>:
    
	adf_os_mem_free(pHTC);
}

LOCAL void _HTC_RegisterService(htc_handle_t htcHandle, HTC_SERVICE *pService)
{
  909c98:	6c1004        	entry	a1, 32
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)htcHandle;
    
        /* add it to the list */
	pService->pNext = pHTC->pServiceList;
  909c9b:	282290        	l32i	a8, a2, 0x240
  909c9e:	9830      	s32i.n	a8, a3, 0
	pHTC->pServiceList = pService;
  909ca0:	232690        	s32i	a3, a2, 0x240
  909ca3:	d10f      	retw.n
  909ca5:	000000        	ill

00909ca8 <_HTC_GetReservedHeadroom>:
void _HTC_ResumeRecv(HTC_ENDPOINT_ID EndpointID)
{
}

int _HTC_GetReservedHeadroom(htc_handle_t htcHandle)
{
  909ca8:	6c1004        	entry	a1, 32
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)htcHandle;  
    
	return HTC_HDR_LENGTH + HIF_get_reserved_headroom(pHTC->hifHandle);
  909cab:	186915        	l32r	a8, 8e4100 <bStandardCommand+0x29c>
  909cae:	2a229a        	l32i	a10, a2, 0x268
  909cb1:	28827a        	l32i	a8, a8, 0x1e8
  909cb4:	0b8000        	callx8	a8
}
  909cb7:	b8a2      	addi.n	a2, a10, 8
  909cb9:	d10f      	retw.n
	...

00909cbc <HTCSendDoneHandler>:
		HTCCheckAndSendCreditReport(pHTC, HTC_ANY_ENDPOINT_MASK,NULL,ENDPOINT_MAX);
	}  
}

LOCAL void HTCSendDoneHandler(adf_nbuf_t buf, void *context)
{
  909cbc:	6c1004        	entry	a1, 32
 * @return data pointer to typecast into your priv structure
 */
static inline a_uint8_t *
adf_nbuf_get_priv(adf_nbuf_t buf)
{
    return (__adf_nbuf_get_priv(buf));
  909cbf:	022a02        	or	a10, a2, a2
  909cc2:	5bf34d        	call8	9069f8 <__adf_nbuf_get_priv>
	A_UINT8 current_eid;
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)context;
	HTC_BUF_CONTEXT *ctx;
      
	ctx = (HTC_BUF_CONTEXT *)adf_nbuf_get_priv(buf);
	current_eid = ctx->end_point;
  909cc5:	24a000        	l8ui	a4, a10, 0
 *         or NULL if there is not sufficient data to pull.
 */
static inline a_uint8_t *
adf_nbuf_pull_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_pull_head(buf, size);
  909cc8:	c0b8      	movi.n	a11, 8
  909cca:	022a02        	or	a10, a2, a2
  909ccd:	5bf325        	call8	906964 <__adf_nbuf_pull_head>
	/* Walk through the buffers and fixup the ones we used for HTC headers.
	 * The buffer list may contain more than one string of HTC buffers comprising of an
	 * HTC message so we need to check every buffer */            
	adf_nbuf_pull_head(buf, HTC_HDR_LENGTH);
                   
	pHTC->Endpoints[current_eid].pService->
  909cd0:	044809        	addx2	a8, a4, a4
  909cd3:	03830b        	addx8	a3, a8, a3
  909cd6:	8832      	l32i.n	a8, a3, 8
		ProcessSendBufferComplete(current_eid, 
  909cd8:	da40      	mov.n	a10, a4
  909cda:	8982      	l32i.n	a9, a8, 8
  909cdc:	8c86      	l32i.n	a12, a8, 24
  909cde:	022b02        	or	a11, a2, a2
  909ce1:	0b9000        	callx8	a9
  909ce4:	d10f      	retw.n
	...

00909ce8 <HTC_AssembleBuffers>:
	if ((pEndpoint)->ConnectionFlags & HTC_CONNECT_FLAGS_REDUCE_CREDIT_DRIBBLE) { \
		AdjustCreditThreshold((pEndpoint));			\
	}    

LOCAL void HTC_AssembleBuffers(HTC_CONTEXT *pHTC, int Count, int Size)
{
  909ce8:	6c1004        	entry	a1, 32
	BUF_Pool_create_pool(pHTC->PoolHandle, POOL_ID_HTC_CONTROL, Count, Size);       
  909ceb:	186915        	l32r	a8, 8e4140 <bStandardCommand+0x2dc>
  909cee:	2a229b        	l32i	a10, a2, 0x26c
  909cf1:	28829b        	l32i	a8, a8, 0x26c
  909cf4:	c0b0      	movi.n	a11, 0
  909cf6:	dc30      	mov.n	a12, a3
  909cf8:	dd40      	mov.n	a13, a4
  909cfa:	0b8000        	callx8	a8
  909cfd:	d10f      	retw.n
	...

00909d00 <_HTC_Init>:
}

LOCAL htc_handle_t _HTC_Init(HTC_SETUP_COMPLETE_CB SetupComplete,
                             HTC_CONFIG *pConfig)
{
  909d00:	6c1006        	entry	a1, 48
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  909d03:	146915        	l32r	a4, 8e4158 <bStandardCommand+0x2f4>
  909d06:	022502        	or	a5, a2, a2
  909d09:	224252        	l32i	a2, a4, 0x148
  909d0c:	2b2a74        	movi	a11, 0x274
  909d0f:	c0a0      	movi.n	a10, 0
  909d11:	0b2000        	callx8	a2
}
/* zero a memory buffer */
static inline void
__adf_os_mem_zero(void *buf, adf_os_size_t size)
{
    A_MEMZERO(buf,size);
  909d14:	8844      	l32i.n	a8, a4, 16
  909d16:	2c2a74        	movi	a12, 0x274
  909d19:	c0b0      	movi.n	a11, 0
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  909d1b:	d2a0      	mov.n	a2, a10
}
/* zero a memory buffer */
static inline void
__adf_os_mem_zero(void *buf, adf_os_size_t size)
{
    A_MEMZERO(buf,size);
  909d1d:	0b8000        	callx8	a8
    
        pHTC = (HTC_CONTEXT *)adf_os_mem_alloc(sizeof(HTC_CONTEXT));
    
	adf_os_mem_zero(pHTC, sizeof(HTC_CONTEXT));

	pHTC->OSHandle = pConfig->OSHandle;
  909d20:	8832      	l32i.n	a8, a3, 8
	pHTC->PoolHandle = pConfig->PoolHandle;
	pHTC->hifHandle = pConfig->HIFHandle;
  909d22:	8a33      	l32i.n	a10, a3, 12
    
        pHTC = (HTC_CONTEXT *)adf_os_mem_alloc(sizeof(HTC_CONTEXT));
    
	adf_os_mem_zero(pHTC, sizeof(HTC_CONTEXT));

	pHTC->OSHandle = pConfig->OSHandle;
  909d24:	9820      	s32i.n	a8, a2, 0
	pHTC->PoolHandle = pConfig->PoolHandle;
  909d26:	8834      	l32i.n	a8, a3, 16
	hifCBConfig.send_buf_done = A_INDIR(htc._HTC_SendDoneHandler);
	hifCBConfig.recv_buf = A_INDIR(htc._HTC_MsgRecvHandler);
	hifCBConfig.context = pHTC;
    
	/* initialize hardware layer */
	HIF_register_callback(pConfig->HIFHandle, &hifCBConfig);
  909d28:	db10      	mov.n	a11, a1
        pHTC = (HTC_CONTEXT *)adf_os_mem_alloc(sizeof(HTC_CONTEXT));
    
	adf_os_mem_zero(pHTC, sizeof(HTC_CONTEXT));

	pHTC->OSHandle = pConfig->OSHandle;
	pHTC->PoolHandle = pConfig->PoolHandle;
  909d2a:	28269b        	s32i	a8, a2, 0x26c
	pHTC->hifHandle = pConfig->HIFHandle;
                        
	hifCBConfig.send_buf_done = A_INDIR(htc._HTC_SendDoneHandler);
  909d2d:	284287        	l32i	a8, a4, 0x21c
    
	adf_os_mem_zero(pHTC, sizeof(HTC_CONTEXT));

	pHTC->OSHandle = pConfig->OSHandle;
	pHTC->PoolHandle = pConfig->PoolHandle;
	pHTC->hifHandle = pConfig->HIFHandle;
  909d30:	2a269a        	s32i	a10, a2, 0x268
                        
	hifCBConfig.send_buf_done = A_INDIR(htc._HTC_SendDoneHandler);
  909d33:	9810      	s32i.n	a8, a1, 0
	hifCBConfig.recv_buf = A_INDIR(htc._HTC_MsgRecvHandler);
  909d35:	284286        	l32i	a8, a4, 0x218
	hifCBConfig.context = pHTC;
  909d38:	9212      	s32i.n	a2, a1, 8
	pHTC->OSHandle = pConfig->OSHandle;
	pHTC->PoolHandle = pConfig->PoolHandle;
	pHTC->hifHandle = pConfig->HIFHandle;
                        
	hifCBConfig.send_buf_done = A_INDIR(htc._HTC_SendDoneHandler);
	hifCBConfig.recv_buf = A_INDIR(htc._HTC_MsgRecvHandler);
  909d3a:	9811      	s32i.n	a8, a1, 4
	hifCBConfig.context = pHTC;
    
	/* initialize hardware layer */
	HIF_register_callback(pConfig->HIFHandle, &hifCBConfig);
  909d3c:	284272        	l32i	a8, a4, 0x1c8
  909d3f:	0b8000        	callx8	a8
        /* see if the host wants us to override the number of ctrl buffers */
	pHTC->NumBuffersForCreditRpts = 0;
    
	if (0 == pHTC->NumBuffersForCreditRpts) {
		/* nothing to override, simply set default */
		pHTC->NumBuffersForCreditRpts = HTC_DEFAULT_NUM_CTRL_BUFFERS; 
  909d42:	c086      	movi.n	a8, 6
  909d44:	282696        	s32i	a8, a2, 0x258
	}    
    
	pHTC->MaxEpPendingCreditRpts = 0;
    
	if (0 == pHTC->MaxEpPendingCreditRpts) {
		pHTC->MaxEpPendingCreditRpts = HTC_DEFAULT_MAX_EP_PENDING_CREDIT_REPORTS;    
  909d47:	c083      	movi.n	a8, 3
  909d49:	282699        	s32i	a8, a2, 0x264
	}
	/* calculate the total allocation size based on the number of credit report buffers */
	pHTC->CtrlBufferAllocSize = MIN_CREDIT_BUFFER_ALLOC_SIZE * pHTC->NumBuffersForCreditRpts;
  909d4c:	280ad8        	movi	a8, 216
  909d4f:	282697        	s32i	a8, a2, 0x25c
	/* we need at least enough buffer space for 1 ctrl message */
	pHTC->CtrlBufferAllocSize = A_MAX(pHTC->CtrlBufferAllocSize,MAX_HTC_SETUP_MSG_SIZE);
    
	/* save the size of each buffer/credit we will receive */
	pHTC->RecvBufferSize = pConfig->CreditSize; //RecvBufferSize;
  909d52:	8830      	l32i.n	a8, a3, 0
	pHTC->TotalCredits = pConfig->CreditNumber;
  909d54:	8331      	l32i.n	a3, a3, 4
	pHTC->CtrlBufferAllocSize = MIN_CREDIT_BUFFER_ALLOC_SIZE * pHTC->NumBuffersForCreditRpts;
	/* we need at least enough buffer space for 1 ctrl message */
	pHTC->CtrlBufferAllocSize = A_MAX(pHTC->CtrlBufferAllocSize,MAX_HTC_SETUP_MSG_SIZE);
    
	/* save the size of each buffer/credit we will receive */
	pHTC->RecvBufferSize = pConfig->CreditSize; //RecvBufferSize;
  909d56:	282691        	s32i	a8, a2, 0x244
	pHTC->TotalCredits = pConfig->CreditNumber;
  909d59:	232694        	s32i	a3, a2, 0x250
	pHTC->TotalCreditsAssigned = 0;
  909d5c:	c030      	movi.n	a3, 0
  909d5e:	232695        	s32i	a3, a2, 0x254
     
	/* setup the pseudo service that handles HTC control messages */
	pHTC->HTCControlService.ProcessRecvMsg = A_INDIR(htc._HTC_ControlSvcProcessMsg);
  909d61:	234288        	l32i	a3, a4, 0x220
	pHTC->HTCControlService.ProcessSendBufferComplete = A_INDIR(htc._HTC_ControlSvcProcessSendComplete);
	pHTC->HTCControlService.TrailerSpcCheckLimit = HTC_CTRL_BUFFER_CHECK_SIZE;
  909d64:	c18c      	movi.n	a8, 28
	pHTC->RecvBufferSize = pConfig->CreditSize; //RecvBufferSize;
	pHTC->TotalCredits = pConfig->CreditNumber;
	pHTC->TotalCreditsAssigned = 0;
     
	/* setup the pseudo service that handles HTC control messages */
	pHTC->HTCControlService.ProcessRecvMsg = A_INDIR(htc._HTC_ControlSvcProcessMsg);
  909d66:	23268a        	s32i	a3, a2, 0x228
	pHTC->HTCControlService.ProcessSendBufferComplete = A_INDIR(htc._HTC_ControlSvcProcessSendComplete);
  909d69:	234289        	l32i	a3, a4, 0x224
	pHTC->HTCControlService.MaxSvcMsgSize = MAX_HTC_SETUP_MSG_SIZE;
	pHTC->HTCControlService.ServiceCtx = pHTC;
    
	/* automatically register this pseudo service to endpoint 1 */
	pHTC->Endpoints[ENDPOINT0].pService = &pHTC->HTCControlService;
	HIF_get_default_pipe(pHTC->hifHandle, &pHTC->Endpoints[ENDPOINT0].UpLinkPipeID, 
  909d6c:	2a229a        	l32i	a10, a2, 0x268
	pHTC->TotalCredits = pConfig->CreditNumber;
	pHTC->TotalCreditsAssigned = 0;
     
	/* setup the pseudo service that handles HTC control messages */
	pHTC->HTCControlService.ProcessRecvMsg = A_INDIR(htc._HTC_ControlSvcProcessMsg);
	pHTC->HTCControlService.ProcessSendBufferComplete = A_INDIR(htc._HTC_ControlSvcProcessSendComplete);
  909d6f:	23268b        	s32i	a3, a2, 0x22c
	pHTC->HTCControlService.TrailerSpcCheckLimit = HTC_CTRL_BUFFER_CHECK_SIZE;
  909d72:	232d02        	addmi	a3, a2, 0x200
  909d75:	28351d        	s16i	a8, a3, 58
	pHTC->HTCControlService.MaxSvcMsgSize = MAX_HTC_SETUP_MSG_SIZE;
  909d78:	c480      	movi.n	a8, 64
  909d7a:	28351c        	s16i	a8, a3, 56
	pHTC->HTCControlService.ServiceCtx = pHTC;
    
	/* automatically register this pseudo service to endpoint 1 */
	pHTC->Endpoints[ENDPOINT0].pService = &pHTC->HTCControlService;
  909d7d:	232a24        	movi	a3, 0x224
  909d80:	032308        	add	a3, a2, a3
  909d83:	9322      	s32i.n	a3, a2, 8
	HIF_get_default_pipe(pHTC->hifHandle, &pHTC->Endpoints[ENDPOINT0].UpLinkPipeID, 
  909d85:	23427c        	l32i	a3, a4, 0x1f0
  909d88:	2b2c19        	addi	a11, a2, 25
  909d8b:	2c2c18        	addi	a12, a2, 24
	/* setup the pseudo service that handles HTC control messages */
	pHTC->HTCControlService.ProcessRecvMsg = A_INDIR(htc._HTC_ControlSvcProcessMsg);
	pHTC->HTCControlService.ProcessSendBufferComplete = A_INDIR(htc._HTC_ControlSvcProcessSendComplete);
	pHTC->HTCControlService.TrailerSpcCheckLimit = HTC_CTRL_BUFFER_CHECK_SIZE;
	pHTC->HTCControlService.MaxSvcMsgSize = MAX_HTC_SETUP_MSG_SIZE;
	pHTC->HTCControlService.ServiceCtx = pHTC;
  909d8e:	22268f        	s32i	a2, a2, 0x23c
    
	/* automatically register this pseudo service to endpoint 1 */
	pHTC->Endpoints[ENDPOINT0].pService = &pHTC->HTCControlService;
	HIF_get_default_pipe(pHTC->hifHandle, &pHTC->Endpoints[ENDPOINT0].UpLinkPipeID, 
  909d91:	0b3000        	callx8	a3
			     &pHTC->Endpoints[ENDPOINT0].DownLinkPipeID);
    
	/* Initialize control pipe so we could receive the HTC control packets */
	// @TODO: msg size!
	HIF_config_pipe(pHTC->hifHandle, pHTC->Endpoints[ENDPOINT0].UpLinkPipeID, 1);    
  909d94:	2a229a        	l32i	a10, a2, 0x268
  909d97:	234275        	l32i	a3, a4, 0x1d4
  909d9a:	2b2019        	l8ui	a11, a2, 25
  909d9d:	c0c1      	movi.n	a12, 1
  909d9f:	0b3000        	callx8	a3
    
	/* set the first free endpoint */
	pHTC->CurrentEpIndex = ENDPOINT1;
  909da2:	c031      	movi.n	a3, 1
  909da4:	232688        	s32i	a3, a2, 0x220
	pHTC->SetupCompleteCb = SetupComplete;
    
        /* setup buffers for just the setup phase, we only need 1 buffer to handle
	 * setup */
	HTC_AssembleBuffers(pHTC, 4, MAX_HTC_SETUP_MSG_SIZE);
  909da7:	da20      	mov.n	a10, a2
	// @TODO: msg size!
	HIF_config_pipe(pHTC->hifHandle, pHTC->Endpoints[ENDPOINT0].UpLinkPipeID, 1);    
    
	/* set the first free endpoint */
	pHTC->CurrentEpIndex = ENDPOINT1;
	pHTC->SetupCompleteCb = SetupComplete;
  909da9:	252693        	s32i	a5, a2, 0x24c
    
        /* setup buffers for just the setup phase, we only need 1 buffer to handle
	 * setup */
	HTC_AssembleBuffers(pHTC, 4, MAX_HTC_SETUP_MSG_SIZE);
  909dac:	c0b4      	movi.n	a11, 4
  909dae:	2c0a40        	movi	a12, 64
  909db1:	5bffcd        	call8	909ce8 <HTC_AssembleBuffers>
   
	/* start hardware layer so that we can queue buffers */
	HIF_start(pHTC->hifHandle);
  909db4:	2a229a        	l32i	a10, a2, 0x268
  909db7:	234274        	l32i	a3, a4, 0x1d0
  909dba:	0b3000        	callx8	a3
    
	return pHTC;
}
  909dbd:	d10f      	retw.n
	...

00909dc0 <_HTC_PauseRecv>:
	pHTCHdr->PayloadLen = adf_os_htons(totsz);  
	HIF_send_buffer(pHTC->hifHandle, pHTC->Endpoints[EndpointID].DownLinkPipeID, pBuffers);       
}

void _HTC_PauseRecv(HTC_ENDPOINT_ID EndpointID)
{
  909dc0:	6c1004        	entry	a1, 32
  909dc3:	d10f      	retw.n
  909dc5:	000000        	ill

00909dc8 <_HTC_ResumeRecv>:
}

void _HTC_ResumeRecv(HTC_ENDPOINT_ID EndpointID)
{
  909dc8:	6c1004        	entry	a1, 32
  909dcb:	d10f      	retw.n
  909dcd:	000000        	ill

00909dd0 <htc_module_install>:
    
	return HTC_HDR_LENGTH + HIF_get_reserved_headroom(pHTC->hifHandle);
}

void htc_module_install(struct htc_apis *pAPIs)
{   
  909dd0:	6c1004        	entry	a1, 32
	pAPIs->_HTC_Init = _HTC_Init;
  909dd3:	186a45        	l32r	a8, 8e46e8 <bStandardCommand+0x884>
  909dd6:	9820      	s32i.n	a8, a2, 0
	pAPIs->_HTC_ReturnBuffers = _HTC_ReturnBuffers;
  909dd8:	186a46        	l32r	a8, 8e46f0 <bStandardCommand+0x88c>
  909ddb:	9824      	s32i.n	a8, a2, 16
	pAPIs->_HTC_ReturnBuffersList = _HTC_ReturnBuffersList;
  909ddd:	186a47        	l32r	a8, 8e46fc <bStandardCommand+0x898>
  909de0:	9825      	s32i.n	a8, a2, 20
	pAPIs->_HTC_Ready = _HTC_Ready;
  909de2:	186a48        	l32r	a8, 8e4704 <bStandardCommand+0x8a0>
  909de5:	9823      	s32i.n	a8, a2, 12
	pAPIs->_HTC_RegisterService = _HTC_RegisterService;
  909de7:	186a49        	l32r	a8, 8e470c <bStandardCommand+0x8a8>
  909dea:	9822      	s32i.n	a8, a2, 8
	pAPIs->_HTC_SendMsg = _HTC_SendMsg;   
  909dec:	186a4a        	l32r	a8, 8e4714 <bStandardCommand+0x8b0>
  909def:	9826      	s32i.n	a8, a2, 24
	pAPIs->_HTC_Shutdown = _HTC_Shutdown;
  909df1:	186a4b        	l32r	a8, 8e4720 <bStandardCommand+0x8bc>
  909df4:	9821      	s32i.n	a8, a2, 4
	pAPIs->_HTC_GetReservedHeadroom = _HTC_GetReservedHeadroom;
  909df6:	186a4c        	l32r	a8, 8e4728 <bStandardCommand+0x8c4>
  909df9:	9827      	s32i.n	a8, a2, 28
	pAPIs->_HTC_MsgRecvHandler = HTCMsgRecvHandler;
  909dfb:	186a4d        	l32r	a8, 8e4730 <bStandardCommand+0x8cc>
  909dfe:	9828      	s32i.n	a8, a2, 32
	pAPIs->_HTC_SendDoneHandler = HTCSendDoneHandler;
  909e00:	186a4e        	l32r	a8, 8e4738 <bStandardCommand+0x8d4>
  909e03:	9829      	s32i.n	a8, a2, 36
	pAPIs->_HTC_ControlSvcProcessMsg = HTCControlSvcProcessMsg;
  909e05:	186a4f        	l32r	a8, 8e4744 <bStandardCommand+0x8e0>
  909e08:	982a      	s32i.n	a8, a2, 40
	pAPIs->_HTC_ControlSvcProcessSendComplete = HTCControlSvcProcessSendComplete;
  909e0a:	186a50        	l32r	a8, 8e474c <bStandardCommand+0x8e8>
  909e0d:	982b      	s32i.n	a8, a2, 44
  909e0f:	d10f      	retw.n
  909e11:	000000        	ill

00909e14 <HTCFreeMsgBuffer>:
}

/* free message to the free list */
LOCAL void HTCFreeMsgBuffer(HTC_CONTEXT *pHTC, adf_nbuf_t buf) 
{
  909e14:	6c1004        	entry	a1, 32
	BUF_Pool_free_buf(pHTC->PoolHandle, POOL_ID_HTC_CONTROL, buf);      
  909e17:	186915        	l32r	a8, 8e426c <bStandardCommand+0x408>
  909e1a:	2a229b        	l32i	a10, a2, 0x26c
  909e1d:	28829e        	l32i	a8, a8, 0x278
  909e20:	c0b0      	movi.n	a11, 0
  909e22:	033c02        	or	a12, a3, a3
  909e25:	0b8000        	callx8	a8
  909e28:	d10f      	retw.n
	...

00909e2c <HTCAllocMsgBuffer>:
}

/* HTC control message allocator (also used for empty frames to send trailer options) */
LOCAL adf_nbuf_t HTCAllocMsgBuffer(HTC_CONTEXT *pHTC)
{
  909e2c:	6c1004        	entry	a1, 32
	return BUF_Pool_alloc_buf(pHTC->PoolHandle,
  909e2f:	186915        	l32r	a8, 8e4284 <bStandardCommand+0x420>
  909e32:	24229b        	l32i	a4, a2, 0x26c
  909e35:	23829c        	l32i	a3, a8, 0x270
  909e38:	288285        	l32i	a8, a8, 0x214
  909e3b:	da20      	mov.n	a10, a2
  909e3d:	0b8000        	callx8	a8
  909e40:	dca0      	mov.n	a12, a10
  909e42:	c0b0      	movi.n	a11, 0
  909e44:	da40      	mov.n	a10, a4
  909e46:	0b3000        	callx8	a3
				  POOL_ID_HTC_CONTROL,
				  HTC_GetReservedHeadroom(pHTC));   
}
  909e49:	d2a0      	mov.n	a2, a10
  909e4b:	d10f      	retw.n
  909e4d:	000000        	ill

00909e50 <_HTC_Ready>:
	pService->pNext = pHTC->pServiceList;
	pHTC->pServiceList = pService;
}

LOCAL void _HTC_Ready(htc_handle_t htcHandle)
{
  909e50:	6c1004        	entry	a1, 32
	adf_nbuf_t pBuffer;
	HTC_READY_MSG *pReady;
	a_uint8_t *addr;
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)htcHandle;
    
	pBuffer = HTCAllocMsgBuffer(pHTC);
  909e53:	022a02        	or	a10, a2, a2
  909e56:	5bfff5        	call8	909e2c <HTCAllocMsgBuffer>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  909e59:	c0b8      	movi.n	a11, 8
  909e5b:	d4a0      	mov.n	a4, a10
  909e5d:	5bf374        	call8	906c30 <__adf_nbuf_put_tail>
	/* an optimization... the header length is chosen to
	 * be aligned on a 16 bit bounday, the fields in the message are designed to
	 * be aligned */
	addr = adf_nbuf_put_tail(pBuffer, sizeof(HTC_READY_MSG));       
	pReady = (HTC_READY_MSG *)addr;     
	A_MEMZERO(pReady,sizeof(HTC_READY_MSG));  
  909e60:	156915        	l32r	a5, 8e42b4 <bStandardCommand+0x450>
  909e63:	c0b0      	movi.n	a11, 0
  909e65:	8854      	l32i.n	a8, a5, 16
  909e67:	c0c8      	movi.n	a12, 8
  909e69:	d3a0      	mov.n	a3, a10
  909e6b:	0b8000        	callx8	a8
	pReady->MessageID = adf_os_htons(HTC_MSG_READY_ID);
  909e6e:	c0b0      	movi.n	a11, 0
  909e70:	c081      	movi.n	a8, 1
  909e72:	2b3400        	s8i	a11, a3, 0
  909e75:	283401        	s8i	a8, a3, 1
	pReady->CreditSize = adf_os_htons((A_UINT16)pHTC->RecvBufferSize);
  909e78:	282291        	l32i	a8, a2, 0x244
	pReady->CreditCount = adf_os_htons((A_UINT16)pHTC->TotalCredits);
	pReady->MaxEndpoints = ENDPOINT_MAX;
       
	/* send out the message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer);
  909e7b:	da20      	mov.n	a10, a2
	 * be aligned */
	addr = adf_nbuf_put_tail(pBuffer, sizeof(HTC_READY_MSG));       
	pReady = (HTC_READY_MSG *)addr;     
	A_MEMZERO(pReady,sizeof(HTC_READY_MSG));  
	pReady->MessageID = adf_os_htons(HTC_MSG_READY_ID);
	pReady->CreditSize = adf_os_htons((A_UINT16)pHTC->RecvBufferSize);
  909e7d:	08084f        	extui	a8, a8, 0, 16
  909e80:	088914        	srli	a9, a8, 8
  909e83:	293404        	s8i	a9, a3, 4
  909e86:	283405        	s8i	a8, a3, 5
	pReady->CreditCount = adf_os_htons((A_UINT16)pHTC->TotalCredits);
  909e89:	282294        	l32i	a8, a2, 0x250
	pReady->MaxEndpoints = ENDPOINT_MAX;
       
	/* send out the message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer);
  909e8c:	dc40      	mov.n	a12, a4
	addr = adf_nbuf_put_tail(pBuffer, sizeof(HTC_READY_MSG));       
	pReady = (HTC_READY_MSG *)addr;     
	A_MEMZERO(pReady,sizeof(HTC_READY_MSG));  
	pReady->MessageID = adf_os_htons(HTC_MSG_READY_ID);
	pReady->CreditSize = adf_os_htons((A_UINT16)pHTC->RecvBufferSize);
	pReady->CreditCount = adf_os_htons((A_UINT16)pHTC->TotalCredits);
  909e8e:	08084f        	extui	a8, a8, 0, 16
  909e91:	088914        	srli	a9, a8, 8
  909e94:	283403        	s8i	a8, a3, 3
	pReady->MaxEndpoints = ENDPOINT_MAX;
  909e97:	c186      	movi.n	a8, 22
	addr = adf_nbuf_put_tail(pBuffer, sizeof(HTC_READY_MSG));       
	pReady = (HTC_READY_MSG *)addr;     
	A_MEMZERO(pReady,sizeof(HTC_READY_MSG));  
	pReady->MessageID = adf_os_htons(HTC_MSG_READY_ID);
	pReady->CreditSize = adf_os_htons((A_UINT16)pHTC->RecvBufferSize);
	pReady->CreditCount = adf_os_htons((A_UINT16)pHTC->TotalCredits);
  909e99:	293402        	s8i	a9, a3, 2
	pReady->MaxEndpoints = ENDPOINT_MAX;
  909e9c:	283406        	s8i	a8, a3, 6
       
	/* send out the message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer);
  909e9f:	235284        	l32i	a3, a5, 0x210
  909ea2:	0b3000        	callx8	a3
  909ea5:	d10f      	retw.n
	...

00909ea8 <HTCCheckAndSendCreditReport>:
				  HTC_GetReservedHeadroom(pHTC));   
}

LOCAL void HTCCheckAndSendCreditReport(HTC_CONTEXT *pHTC, A_UINT32 EpMask,
				       HTC_ENDPOINT *pEndpoint, HTC_ENDPOINT_ID Eid)
{
  909ea8:	6c1004        	entry	a1, 32
	adf_nbuf_t pCredBuffer;
	HTC_BUF_CONTEXT *ctx;    
        
	do {
		/* check if host needs credits */
		if (!(pHTC->EpHostNeedsCreditMap & EpMask)) {
  909eab:	282285        	l32i	a8, a2, 0x214
  909eae:	78305a        	bnone	a3, a8, 909f0c <HTCCheckAndSendCreditReport+0x64>
			/* host does not need any credits for this set */
			break;    
		}
		/* check if any are pending */
		if (!(pHTC->EpCreditPendingMap & EpMask)) {
  909eb1:	282286        	l32i	a8, a2, 0x218
  909eb4:	783054        	bnone	a3, a8, 909f0c <HTCCheckAndSendCreditReport+0x64>
			/* nothing to send up */
			break;    
		}  
		/* was an endpoint specified? */
		if (pEndpoint != NULL) {
  909eb7:	c945      	beqz.n	a4, 909ed0 <HTCCheckAndSendCreditReport+0x28>
			/* see if a threshold is in effect for this endpoint */
			if (pEndpoint->CreditReturnThreshhold != 0) {
  909eb9:	234904        	l16si	a3, a4, 8
  909ebc:	c834      	beqz.n	a3, 909ec4 <HTCCheckAndSendCreditReport+0x1c>
				if (pEndpoint->CreditsToReturn < pEndpoint->CreditReturnThreshhold) {
  909ebe:	284900        	l16si	a8, a4, 0
  909ec1:	738247        	blt	a8, a3, 909f0c <HTCCheckAndSendCreditReport+0x64>
					 * back to the host */
					break;
				}
			}
         
			if (pEndpoint->PendingCreditReports >= pHTC->MaxEpPendingCreditRpts) {
  909ec4:	8844      	l32i.n	a8, a4, 16
  909ec6:	232299        	l32i	a3, a2, 0x264
  909ec9:	738203        	blt	a8, a3, 909ed0 <HTCCheckAndSendCreditReport+0x28>
  909ecc:	600009        	j	909ed9 <HTCCheckAndSendCreditReport+0x31>
  909ecf:	00da20        	excw
		}
        
		/* if we get here we have some credits to send up */
                        
		/* allocate a message buffer for the trailer */
		pCredBuffer = HTCAllocMsgBuffer(pHTC);
  909ed2:	5bffd6        	call8	909e2c <HTCAllocMsgBuffer>
  909ed5:	d3a0      	mov.n	a3, a10
		if (NULL == pCredBuffer) {
  909ed7:	ccae      	bnez.n	a10, 909ee9 <HTCCheckAndSendCreditReport+0x41>
			/* no buffers left to send an empty message with trailers, host will just
			 * have to wait until we get our endpoint 0 messages back.. */
			/* mark that we need to send an update as soon as we can get a buffer back */
			pHTC->StateFlags |= HTC_SEND_CREDIT_UPDATE_SOON;
  909ed9:	242292        	l32i	a4, a2, 0x248
  909edc:	c032      	movi.n	a3, 2
  909ede:	034302        	or	a3, a4, a3
  909ee1:	232692        	s32i	a3, a2, 0x248
  909ee4:	d10f      	retw.n
  909ee6:	000000        	ill
 * @return data pointer to typecast into your priv structure
 */
static inline a_uint8_t *
adf_nbuf_get_priv(adf_nbuf_t buf)
{
    return (__adf_nbuf_get_priv(buf));
  909ee9:	5bf2c3        	call8	9069f8 <__adf_nbuf_get_priv>
			break;    
		}
        
		ctx = (HTC_BUF_CONTEXT *)adf_nbuf_get_priv(pCredBuffer);
		if (pEndpoint != NULL) {
  909eec:	c84d      	beqz.n	a4, 909efd <HTCCheckAndSendCreditReport+0x55>
			/* keep track of pending reports */
			pEndpoint->PendingCreditReports++; 
  909eee:	8844      	l32i.n	a8, a4, 16
  909ef0:	b188      	addi.n	a8, a8, 1
  909ef2:	9844      	s32i.n	a8, a4, 16
			/* save the endpoint in order to decrement the count when the send completes */
			ctx->htc_flags = Eid | HTC_FLAGS_CREDIT_RPT;
  909ef4:	240a20        	movi	a4, 32
  909ef7:	045502        	or	a5, a5, a4
  909efa:	25a401        	s8i	a5, a10, 1
		}   
            
		/* this is an empty message, the HTC_SendMsg will tack on a trailer in the remaining
		 * space, NOTE: no need to flush the cache, the header and trailers are assembled
		 * using uncached addresses */
		HTC_SendMsg(pHTC, ENDPOINT0, pCredBuffer);    
  909efd:	146915        	l32r	a4, 8e4354 <bStandardCommand+0x4f0>
  909f00:	da20      	mov.n	a10, a2
  909f02:	244284        	l32i	a4, a4, 0x210
  909f05:	c0b0      	movi.n	a11, 0
  909f07:	dc30      	mov.n	a12, a3
  909f09:	0b4000        	callx8	a4
  909f0c:	d10f      	retw.n
	...

00909f10 <HTCControlSvcProcessSendComplete>:
}

/* callback when endpoint 0 send buffers are completed */
LOCAL void HTCControlSvcProcessSendComplete(HTC_ENDPOINT_ID EndpointID,
					    adf_nbuf_t pBuffers, void *arg)
{
  909f10:	6c1004        	entry	a1, 32
  909f13:	da30      	mov.n	a10, a3
  909f15:	5bf2b8        	call8	9069f8 <__adf_nbuf_get_priv>
	HTC_ENDPOINT_ID creditRptEndpoint;
    
	ctx = (HTC_BUF_CONTEXT *)adf_nbuf_get_priv(pBuffers);       
    
	/* put them back into the pool */
	if ( ctx->htc_flags & HTC_FLAGS_CREDIT_RPT ) {   
  909f18:	28a001        	l8ui	a8, a10, 1
  909f1b:	7a870e        	bbci	a8, 26, 909f2d <HTCControlSvcProcessSendComplete+0x1d>
		/* extract the endpoint number that requested this credit report */ 
		creditRptEndpoint = ctx->htc_flags & HTC_FLAGS_CRPT_EP_MASK;    
  909f1e:	080844        	extui	a8, a8, 0, 5
		pHTC->Endpoints[creditRptEndpoint].PendingCreditReports--;  
  909f21:	088809        	addx2	a8, a8, a8
  909f24:	04880b        	addx8	a8, a8, a4
  909f27:	8985      	l32i.n	a9, a8, 20
  909f29:	b099      	addi.n	a9, a9, -1
  909f2b:	9985      	s32i.n	a9, a8, 20
	}
    
	HTCFreeMsgBuffer(pHTC, pBuffers);
  909f2d:	db30      	mov.n	a11, a3
  909f2f:	da40      	mov.n	a10, a4
  909f31:	5bffb8        	call8	909e14 <HTCFreeMsgBuffer>
   
	if (pHTC->StateFlags & HTC_SEND_CREDIT_UPDATE_SOON) {
  909f34:	234292        	l32i	a3, a4, 0x248
  909f37:	7e3712        	bbci	a3, 30, 909f4d <HTCControlSvcProcessSendComplete+0x3d>
		/* this flag is set when the host could not send a credit report
		 * because we ran out of HTC control buffers */
		pHTC->StateFlags &= ~HTC_SEND_CREDIT_UPDATE_SOON;
  909f3a:	c78d      	movi.n	a8, -3
  909f3c:	083301        	and	a3, a3, a8
  909f3f:	234692        	s32i	a3, a4, 0x248
		/* send out a report if anything is pending */
		HTCCheckAndSendCreditReport(pHTC, HTC_ANY_ENDPOINT_MASK,NULL,ENDPOINT_MAX);
  909f42:	da40      	mov.n	a10, a4
  909f44:	c7bf      	movi.n	a11, -1
  909f46:	c0c0      	movi.n	a12, 0
  909f48:	c1d6      	movi.n	a13, 22
  909f4a:	5bffd7        	call8	909ea8 <HTCCheckAndSendCreditReport>
  909f4d:	d10f      	retw.n
	...

00909f50 <ReturnBuffers>:
	/* now we need to wait for service connection requests */
}

LOCAL void ReturnBuffers(htc_handle_t htcHandle, HTC_ENDPOINT_ID EndpointID,
			 adf_nbuf_t pBuffers, A_BOOL sendCreditFlag)
{   
  909f50:	6c1004        	entry	a1, 32
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  909f53:	044a02        	or	a10, a4, a4
  909f56:	2b0a08        	movi	a11, 8
  909f59:	5bf277        	call8	906938 <__adf_nbuf_push_head>
    
	/* supply some head-room again */
	adf_nbuf_push_head(pBuffers, HTC_HDR_LENGTH);
              
	/* enqueue all buffers to the single mailbox */
	HIF_return_recv_buf(pHTC->hifHandle, pHTC->Endpoints[EndpointID].UpLinkPipeID, pBuffers);    
  909f5c:	186915        	l32r	a8, 8e43b0 <bStandardCommand+0x54c>
  909f5f:	033609        	addx2	a6, a3, a3
  909f62:	02660b        	addx8	a6, a6, a2
  909f65:	288277        	l32i	a8, a8, 0x1dc
  909f68:	2a229a        	l32i	a10, a2, 0x268
  909f6b:	2b6019        	l8ui	a11, a6, 25
  909f6e:	044c02        	or	a12, a4, a4
  909f71:	0b8000        	callx8	a8
     
	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {       
  909f74:	242292        	l32i	a4, a2, 0x248
  909f77:	7f472d        	bbci	a4, 31, 909fa8 <ReturnBuffers+0x58>
		A_UINT32    epCreditMask = (1 << EndpointID);
		/* we are running normally */
		/* update pending credit counts with the number of buffers that were added */
		pHTC->Endpoints[EndpointID].CreditsToReturn += (A_INT16)nbufs;
  909f7a:	246102        	l16ui	a4, a6, 4
              
	/* enqueue all buffers to the single mailbox */
	HIF_return_recv_buf(pHTC->hifHandle, pHTC->Endpoints[EndpointID].UpLinkPipeID, pBuffers);    
     
	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {       
		A_UINT32    epCreditMask = (1 << EndpointID);
  909f7d:	c0b1      	movi.n	a11, 1
		/* we are running normally */
		/* update pending credit counts with the number of buffers that were added */
		pHTC->Endpoints[EndpointID].CreditsToReturn += (A_INT16)nbufs;
  909f7f:	b144      	addi.n	a4, a4, 1
  909f81:	246502        	s16i	a4, a6, 4
		pHTC->Endpoints[EndpointID].CreditsConsumed -= (A_INT16)nbufs;  
  909f84:	246107        	l16ui	a4, a6, 14
              
	/* enqueue all buffers to the single mailbox */
	HIF_return_recv_buf(pHTC->hifHandle, pHTC->Endpoints[EndpointID].UpLinkPipeID, pBuffers);    
     
	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {       
		A_UINT32    epCreditMask = (1 << EndpointID);
  909f87:	003104        	ssl	a3
  909f8a:	00bb1a        	sll	a11, a11
		/* we are running normally */
		/* update pending credit counts with the number of buffers that were added */
		pHTC->Endpoints[EndpointID].CreditsToReturn += (A_INT16)nbufs;
		pHTC->Endpoints[EndpointID].CreditsConsumed -= (A_INT16)nbufs;  
  909f8d:	b044      	addi.n	a4, a4, -1
  909f8f:	246507        	s16i	a4, a6, 14
		/* update bit map that this endpoint has non-zero credits */
		pHTC->EpCreditPendingMap |= epCreditMask; 
  909f92:	242286        	l32i	a4, a2, 0x218
  909f95:	0b4402        	or	a4, a4, a11
  909f98:	242686        	s32i	a4, a2, 0x218

		if (sendCreditFlag) {
  909f9b:	c951      	beqz.n	a5, 909fb0 <ReturnBuffers+0x60>
			HTCCheckAndSendCreditReport(pHTC, epCreditMask,&pHTC->Endpoints[EndpointID],EndpointID);
  909f9d:	da20      	mov.n	a10, a2
  909f9f:	b46c      	addi.n	a12, a6, 4
  909fa1:	dd30      	mov.n	a13, a3
  909fa3:	5bffc1        	call8	909ea8 <HTCCheckAndSendCreditReport>
  909fa6:	d10f      	retw.n
	} else {
		/* we have not started yet so all return operations are simply adding buffers
		 * to the interface at startup, so we can keep track of how many total 
		 * credits we get */
		/* update global count that will be returned to the host */
		pHTC->TotalCredits += nbufs;
  909fa8:	232294        	l32i	a3, a2, 0x250
  909fab:	b133      	addi.n	a3, a3, 1
  909fad:	232694        	s32i	a3, a2, 0x250
  909fb0:	d10f      	retw.n
	...

00909fb4 <_HTC_ReturnBuffers>:
	HTCCheckAndSendCreditReport(pHTC, (1 << EndpointID),&pHTC->Endpoints[EndpointID],EndpointID);
}

LOCAL void _HTC_ReturnBuffers(htc_handle_t htcHandle, HTC_ENDPOINT_ID EndpointID,
			      adf_nbuf_t pBuffers)
{
  909fb4:	6c1004        	entry	a1, 32
	ReturnBuffers(htcHandle, EndpointID, pBuffers, TRUE);
  909fb7:	da20      	mov.n	a10, a2
  909fb9:	db30      	mov.n	a11, a3
  909fbb:	dc40      	mov.n	a12, a4
  909fbd:	c0d1      	movi.n	a13, 1
  909fbf:	5bffe4        	call8	909f50 <ReturnBuffers>
  909fc2:	d10f      	retw.n

00909fc4 <_HTC_ReturnBuffersList>:
}

LOCAL void _HTC_ReturnBuffersList(htc_handle_t htcHandle,
				  HTC_ENDPOINT_ID EndpointID,
				  adf_nbuf_queue_t bufHead)
{
  909fc4:	6c1006        	entry	a1, 48
 * @return first buffer in queue
 */
static inline adf_nbuf_t 
adf_nbuf_queue_first(adf_nbuf_queue_t *head)
{
    return (__adf_nbuf_queue_first(head));
  909fc7:	da10      	mov.n	a10, a1
  909fc9:	9410      	s32i.n	a4, a1, 0
  909fcb:	9511      	s32i.n	a5, a1, 4
  909fcd:	9612      	s32i.n	a6, a1, 8
  909fcf:	5bf340        	call8	906cd0 <__adf_nbuf_queue_first>
  909fd2:	d4a0      	mov.n	a4, a10
	adf_nbuf_t netbuf, tmpNbuf;

	/* retrieve each nbuf in the queue */
	netbuf = adf_nbuf_queue_first(&bufHead);

	while (netbuf) {
  909fd4:	600014        	j	909fec <_HTC_ReturnBuffersList+0x28>
  909fd7:	00da40        	extui	a10, a0, 13, 1
 * @return next buffer/packet
 */
static inline adf_nbuf_t
adf_nbuf_queue_next(adf_nbuf_t buf)
{
    return (__adf_nbuf_queue_next(buf));
  909fda:	5bf33f        	call8	906cd8 <__adf_nbuf_queue_next>
  909fdd:	d5a0      	mov.n	a5, a10

		tmpNbuf = netbuf;
		netbuf = adf_nbuf_queue_next(netbuf);

		ReturnBuffers(htcHandle, EndpointID, tmpNbuf, FALSE);
  909fdf:	dc40      	mov.n	a12, a4
  909fe1:	da20      	mov.n	a10, a2
  909fe3:	db30      	mov.n	a11, a3
  909fe5:	c0d0      	movi.n	a13, 0
  909fe7:	5bffda        	call8	909f50 <ReturnBuffers>
	netbuf = adf_nbuf_queue_first(&bufHead);

	while (netbuf) {

		tmpNbuf = netbuf;
		netbuf = adf_nbuf_queue_next(netbuf);
  909fea:	d450      	mov.n	a4, a5
	adf_nbuf_t netbuf, tmpNbuf;

	/* retrieve each nbuf in the queue */
	netbuf = adf_nbuf_queue_first(&bufHead);

	while (netbuf) {
  909fec:	654fe8        	bnez	a4, 909fd8 <_HTC_ReturnBuffersList+0x14>
		netbuf = adf_nbuf_queue_next(netbuf);

		ReturnBuffers(htcHandle, EndpointID, tmpNbuf, FALSE);
	}

	HTCCheckAndSendCreditReport(pHTC, (1 << EndpointID),&pHTC->Endpoints[EndpointID],EndpointID);
  909fef:	033c09        	addx2	a12, a3, a3
  909ff2:	02cc0b        	addx8	a12, a12, a2
  909ff5:	c0b1      	movi.n	a11, 1
  909ff7:	da20      	mov.n	a10, a2
  909ff9:	003104        	ssl	a3
  909ffc:	00bb1a        	sll	a11, a11
  909fff:	b4cc      	addi.n	a12, a12, 4
  90a001:	dd30      	mov.n	a13, a3
  90a003:	5bffa9        	call8	909ea8 <HTCCheckAndSendCreditReport>
  90a006:	d10f      	retw.n

0090a008 <HTCProcessConnectMsg>:
	} while (FALSE);      
}
        
/* called in response to the arrival of a service connection message */
LOCAL void HTCProcessConnectMsg(HTC_CONTEXT *pHTC, HTC_CONNECT_SERVICE_MSG *pMsg)
{
  90a008:	6c1008        	entry	a1, 64
	HTC_SERVICE *pService = pHTC->pServiceList;
	A_UINT8 connectStatus = HTC_SERVICE_NOT_FOUND;
	adf_nbuf_t pBuffer;
	HTC_CONNECT_SERVICE_RESPONSE_MSG *pRspMsg;
	int metaDataOutLen = 0;
  90a00b:	c060      	movi.n	a6, 0
  90a00d:	9610      	s32i.n	a6, a1, 0
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
    
	pBuffer = HTCAllocMsgBuffer(pHTC);
  90a00f:	da20      	mov.n	a10, a2
	HTC_SERVICE *pService = pHTC->pServiceList;
	A_UINT8 connectStatus = HTC_SERVICE_NOT_FOUND;
	adf_nbuf_t pBuffer;
	HTC_CONNECT_SERVICE_RESPONSE_MSG *pRspMsg;
	int metaDataOutLen = 0;
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
  90a011:	243003        	l8ui	a4, a3, 3
  90a014:	273002        	l8ui	a7, a3, 2
}
        
/* called in response to the arrival of a service connection message */
LOCAL void HTCProcessConnectMsg(HTC_CONTEXT *pHTC, HTC_CONNECT_SERVICE_MSG *pMsg)
{
	HTC_SERVICE *pService = pHTC->pServiceList;
  90a017:	252290        	l32i	a5, a2, 0x240
	adf_nbuf_t pBuffer;
	HTC_CONNECT_SERVICE_RESPONSE_MSG *pRspMsg;
	int metaDataOutLen = 0;
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
    
	pBuffer = HTCAllocMsgBuffer(pHTC);
  90a01a:	5bff84        	call8	909e2c <HTCAllocMsgBuffer>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  90a01d:	c0ba      	movi.n	a11, 10
  90a01f:	9a14      	s32i.n	a10, a1, 16
  90a021:	5bf303        	call8	906c30 <__adf_nbuf_put_tail>
	/* note : this will be aligned */
	pRspMsg = (HTC_CONNECT_SERVICE_RESPONSE_MSG *)
                adf_nbuf_put_tail(pBuffer, sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
                                 
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
  90a024:	196915        	l32r	a9, 8e4478 <bStandardCommand+0x614>
	HTC_SERVICE *pService = pHTC->pServiceList;
	A_UINT8 connectStatus = HTC_SERVICE_NOT_FOUND;
	adf_nbuf_t pBuffer;
	HTC_CONNECT_SERVICE_RESPONSE_MSG *pRspMsg;
	int metaDataOutLen = 0;
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
  90a027:	087711        	slli	a7, a7, 8
	pBuffer = HTCAllocMsgBuffer(pHTC);
	/* note : this will be aligned */
	pRspMsg = (HTC_CONNECT_SERVICE_RESPONSE_MSG *)
                adf_nbuf_put_tail(pBuffer, sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
                                 
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
  90a02a:	8994      	l32i.n	a9, a9, 16
  90a02c:	db60      	mov.n	a11, a6
  90a02e:	c0ca      	movi.n	a12, 10
	HTC_SERVICE *pService = pHTC->pServiceList;
	A_UINT8 connectStatus = HTC_SERVICE_NOT_FOUND;
	adf_nbuf_t pBuffer;
	HTC_CONNECT_SERVICE_RESPONSE_MSG *pRspMsg;
	int metaDataOutLen = 0;
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
  90a030:	074702        	or	a7, a4, a7
  90a033:	d4a0      	mov.n	a4, a10
	pBuffer = HTCAllocMsgBuffer(pHTC);
	/* note : this will be aligned */
	pRspMsg = (HTC_CONNECT_SERVICE_RESPONSE_MSG *)
                adf_nbuf_put_tail(pBuffer, sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
                                 
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
  90a035:	0b9000        	callx8	a9
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONNECT_SERVICE_RESPONSE_ID);
  90a038:	c083      	movi.n	a8, 3
  90a03a:	284401        	s8i	a8, a4, 1
	/* reflect the service ID for this connect attempt */
	pRspMsg->ServiceID = adf_os_htons(serviceId);
  90a03d:	078814        	srli	a8, a7, 8
  90a040:	284402        	s8i	a8, a4, 2
	/* note : this will be aligned */
	pRspMsg = (HTC_CONNECT_SERVICE_RESPONSE_MSG *)
                adf_nbuf_put_tail(pBuffer, sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
                                 
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONNECT_SERVICE_RESPONSE_ID);
  90a043:	264400        	s8i	a6, a4, 0
	/* reflect the service ID for this connect attempt */
	pRspMsg->ServiceID = adf_os_htons(serviceId);
  90a046:	274403        	s8i	a7, a4, 3

	while (pService) {
        
		if (pHTC->CurrentEpIndex >= ENDPOINT_MAX) {
  90a049:	c185      	movi.n	a8, 21
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONNECT_SERVICE_RESPONSE_ID);
	/* reflect the service ID for this connect attempt */
	pRspMsg->ServiceID = adf_os_htons(serviceId);

	while (pService) {
  90a04b:	600079        	j	90a0c8 <HTCProcessConnectMsg+0xc0>
  90a04e:	00002b        	mulsh	a0, a0, a0
        
		if (pHTC->CurrentEpIndex >= ENDPOINT_MAX) {
  90a051:	22887b        	excw
  90a054:	827b      	l32i.n	a2, a7, 44
			/* no more endpoints */
			connectStatus = HTC_SERVICE_NO_RESOURCES;
			break;    
		}

		if (serviceId == pService->ServiceID) {
  90a056:	295108        	l16ui	a9, a5, 16
  90a059:	779969        	bne	a9, a7, 90a0c6 <HTCProcessConnectMsg+0xbe>
			A_UINT8 *pMetaDataOut;
            
			/* outgoing meta data resides in the space after the response message */
			pMetaDataOut = ((A_UINT8 *)pRspMsg) + sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG);
            
			if (pMsg->ServiceMetaLength != 0) {
  90a05c:	2d3008        	l8ui	a13, a3, 8
				/* the meta data follows the connect service message */
				pMetaDataIN = ((A_UINT8 *)pMsg) + sizeof(HTC_CONNECT_SERVICE_MSG);
  90a05f:	ba37      	addi.n	a7, a3, 10
  90a061:	c0c0      	movi.n	a12, 0
  90a063:	0d7c39        	movnez	a12, a7, a13
			}

			/* call the connect callback with the endpoint to use and pointers to meta data */
			connectStatus = pService->ProcessConnect(pService,
  90a066:	8753      	l32i.n	a7, a5, 12
  90a068:	da50      	mov.n	a10, a5
  90a06a:	ba4e      	addi.n	a14, a4, 10
  90a06c:	df10      	mov.n	a15, a1
  90a06e:	0b7000        	callx8	a7
  90a071:	d8a0      	mov.n	a8, a10
								 pMsg->ServiceMetaLength,
								 pMetaDataOut,
								 &metaDataOutLen);
            
			/* check if the service accepted this connection request */
			if (HTC_SERVICE_SUCCESS == connectStatus) {
  90a073:	65a05d        	bnez	a10, 90a0d4 <HTCProcessConnectMsg+0xcc>
				/* set the length of the response meta data going back to the host */
				pRspMsg->ServiceMetaLength = (A_UINT8)metaDataOutLen;
  90a076:	8710      	l32i.n	a7, a1, 0
  90a078:	274408        	s8i	a7, a4, 8
				/* set the endpoint ID the host will now communicate over */
				pRspMsg->EndpointID = pHTC->CurrentEpIndex;
  90a07b:	272288        	l32i	a7, a2, 0x220
  90a07e:	274405        	s8i	a7, a4, 5
				/* return the maximum message size for this service */
				pRspMsg->MaxMsgSize = adf_os_htons((A_UINT16)pService->MaxSvcMsgSize);
  90a081:	275014        	l8ui	a7, a5, 20
  90a084:	274406        	s8i	a7, a4, 6
  90a087:	275015        	l8ui	a7, a5, 21
  90a08a:	274407        	s8i	a7, a4, 7
				/* assign this endpoint to this service, this will be used in routing messages */
				pHTC->Endpoints[pHTC->CurrentEpIndex].pService = pService;
  90a08d:	272288        	l32i	a7, a2, 0x220
  90a090:	077909        	addx2	a9, a7, a7
  90a093:	02990b        	addx8	a9, a9, a2
  90a096:	9592      	s32i.n	a5, a9, 8
				/* set connection flags */
				pHTC->Endpoints[pHTC->CurrentEpIndex].ConnectionFlags = pMsg->ConnectionFlags;
  90a098:	2a3004        	l8ui	a10, a3, 4
  90a09b:	2b3005        	l8ui	a11, a3, 5
  90a09e:	08aa11        	slli	a10, a10, 8
  90a0a1:	0aba02        	or	a10, a11, a10
  90a0a4:	2a9508        	s16i	a10, a9, 16
                
				pHTC->Endpoints[pHTC->CurrentEpIndex].DownLinkPipeID = pMsg->DownLinkPipeID;
  90a0a7:	2a3006        	l8ui	a10, a3, 6
				pHTC->Endpoints[pHTC->CurrentEpIndex].UpLinkPipeID = pMsg->UpLinkPipeID;
                
				/* mark that we are now connected */
				pService->ServiceFlags |= HTC_SERVICE_FLAGS_CONNECTED;
				/* bump up our index, this EP is now in use */
				pHTC->CurrentEpIndex++;   
  90a0aa:	b177      	addi.n	a7, a7, 1
				/* assign this endpoint to this service, this will be used in routing messages */
				pHTC->Endpoints[pHTC->CurrentEpIndex].pService = pService;
				/* set connection flags */
				pHTC->Endpoints[pHTC->CurrentEpIndex].ConnectionFlags = pMsg->ConnectionFlags;
                
				pHTC->Endpoints[pHTC->CurrentEpIndex].DownLinkPipeID = pMsg->DownLinkPipeID;
  90a0ac:	2a9418        	s8i	a10, a9, 24
				pHTC->Endpoints[pHTC->CurrentEpIndex].UpLinkPipeID = pMsg->UpLinkPipeID;
  90a0af:	233007        	l8ui	a3, a3, 7
  90a0b2:	239419        	s8i	a3, a9, 25
                
				/* mark that we are now connected */
				pService->ServiceFlags |= HTC_SERVICE_FLAGS_CONNECTED;
  90a0b5:	295109        	l16ui	a9, a5, 18
  90a0b8:	c031      	movi.n	a3, 1
  90a0ba:	039302        	or	a3, a9, a3
  90a0bd:	235509        	s16i	a3, a5, 18
				/* bump up our index, this EP is now in use */
				pHTC->CurrentEpIndex++;   
  90a0c0:	272688        	s32i	a7, a2, 0x220
  90a0c3:	60000d        	j	90a0d4 <HTCProcessConnectMsg+0xcc>
			}

			break;
		}       
        
		pService = pService->pNext;   
  90a0c6:	8550      	l32i.n	a5, a5, 0
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONNECT_SERVICE_RESPONSE_ID);
	/* reflect the service ID for this connect attempt */
	pRspMsg->ServiceID = adf_os_htons(serviceId);

	while (pService) {
  90a0c8:	655f84        	bnez	a5, 90a050 <HTCProcessConnectMsg+0x48>
        
/* called in response to the arrival of a service connection message */
LOCAL void HTCProcessConnectMsg(HTC_CONTEXT *pHTC, HTC_CONNECT_SERVICE_MSG *pMsg)
{
	HTC_SERVICE *pService = pHTC->pServiceList;
	A_UINT8 connectStatus = HTC_SERVICE_NOT_FOUND;
  90a0cb:	c081      	movi.n	a8, 1
  90a0cd:	600003        	j	90a0d4 <HTCProcessConnectMsg+0xcc>
  90a0d0:	0000c0        	excw

	while (pService) {
        
		if (pHTC->CurrentEpIndex >= ENDPOINT_MAX) {
			/* no more endpoints */
			connectStatus = HTC_SERVICE_NO_RESOURCES;
  90a0d3:	8313      	l32i.n	a3, a1, 12
	}
                   
	pRspMsg->Status = connectStatus;    
    
	/* send out the response message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer); 
  90a0d5:	691528        	bnei	a1, 5, 90a101 <HTCProcessConfigPipeMsg+0x19>
		}       
        
		pService = pService->pNext;   
	}
                   
	pRspMsg->Status = connectStatus;    
  90a0d8:	440423        	excw
    
	/* send out the response message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer); 
  90a0db:	32848c        	excw
  90a0de:	14da20        	l32r	a4, 900960 <memset+0x19b18>
  90a0e1:	c0b0      	movi.n	a11, 0
  90a0e3:	0b3000        	callx8	a3
  90a0e6:	d10f      	retw.n

0090a0e8 <HTCProcessConfigPipeMsg>:
}

LOCAL void HTCProcessConfigPipeMsg(HTC_CONTEXT *pHTC, HTC_CONFIG_PIPE_MSG *pMsg)
{
  90a0e8:	6c1004        	entry	a1, 32
	adf_nbuf_t pBuffer;
	HTC_CONFIG_PIPE_RESPONSE_MSG *pRspMsg;
        
	pBuffer = HTCAllocMsgBuffer(pHTC);
  90a0eb:	022a02        	or	a10, a2, a2
  90a0ee:	5bff4f        	call8	909e2c <HTCAllocMsgBuffer>
  90a0f1:	c0b4      	movi.n	a11, 4
  90a0f3:	d6a0      	mov.n	a6, a10
  90a0f5:	5bf2ce        	call8	906c30 <__adf_nbuf_put_tail>
       
	/* note : this will be aligned */
	pRspMsg = (HTC_CONFIG_PIPE_RESPONSE_MSG *)
                adf_nbuf_put_tail(pBuffer, sizeof(HTC_CONFIG_PIPE_RESPONSE_MSG));    
              
	A_MEMZERO(pRspMsg,sizeof(HTC_CONFIG_PIPE_RESPONSE_MSG));
  90a0f8:	156915        	l32r	a5, 8e454c <bStandardCommand+0x6e8>
  90a0fb:	c0b0      	movi.n	a11, 0
  90a0fd:	8754      	l32i.n	a7, a5, 16
  90a0ff:	c0c4      	movi.n	a12, 4
  90a101:	d4a0      	mov.n	a4, a10
  90a103:	0b7000        	callx8	a7
    
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONFIG_PIPE_RESPONSE_ID);
  90a106:	c086      	movi.n	a8, 6
  90a108:	c070      	movi.n	a7, 0
  90a10a:	274400        	s8i	a7, a4, 0
  90a10d:	284401        	s8i	a8, a4, 1
	/* reflect the service ID for this connect attempt */
	pRspMsg->PipeID = pMsg->PipeID;
  90a110:	283002        	l8ui	a8, a3, 2
  90a113:	284402        	s8i	a8, a4, 2

	if ( HIF_is_pipe_supported(pHTC->hifHandle, pMsg->PipeID) ) {
  90a116:	285278        	l32i	a8, a5, 0x1e0
  90a119:	2a229a        	l32i	a10, a2, 0x268
  90a11c:	2b3002        	l8ui	a11, a3, 2
  90a11f:	0b8000        	callx8	a8
  90a122:	c9a2      	beqz.n	a10, 90a138 <HTCProcessConfigPipeMsg+0x50>
		pRspMsg->Status = 0;            
  90a124:	274403        	s8i	a7, a4, 3
	} else {
		pRspMsg->Status = 1; 
		goto config_done;
	}

	if ( (pHTC->TotalCreditsAssigned + pMsg->CreditCount) <= pHTC->TotalCredits ) {
  90a127:	283003        	l8ui	a8, a3, 3
  90a12a:	272295        	l32i	a7, a2, 0x254
  90a12d:	a787      	add.n	a7, a8, a7
  90a12f:	282294        	l32i	a8, a2, 0x250
  90a132:	77821e        	blt	a8, a7, 90a154 <HTCProcessConfigPipeMsg+0x6c>
  90a135:	600005        	j	90a13e <HTCProcessConfigPipeMsg+0x56>
	pRspMsg->PipeID = pMsg->PipeID;

	if ( HIF_is_pipe_supported(pHTC->hifHandle, pMsg->PipeID) ) {
		pRspMsg->Status = 0;            
	} else {
		pRspMsg->Status = 1; 
  90a138:	c031      	movi.n	a3, 1
  90a13a:	600018        	j	90a156 <HTCProcessConfigPipeMsg+0x6e>
  90a13d:	002726        	excw
		goto config_done;
	}

	if ( (pHTC->TotalCreditsAssigned + pMsg->CreditCount) <= pHTC->TotalCredits ) {
		pHTC->TotalCreditsAssigned += pMsg->CreditCount;
  90a140:	9524      	s32i.n	a5, a2, 16
	} else {
		pRspMsg->Status = 2;
		goto config_done;
	}
    
	HIF_config_pipe(pHTC->hifHandle, pMsg->PipeID, pMsg->CreditCount);
  90a142:	52752a        	call0	8a75ec <_bss_end+0x3946dc>
  90a145:	229a2b        	movi	a2, 0xfffff92b
  90a148:	30022c        	excw
  90a14b:	30030b        	excw
  90a14e:	400060        	excw
  90a151:	000500        	syscall
	}

	if ( (pHTC->TotalCreditsAssigned + pMsg->CreditCount) <= pHTC->TotalCredits ) {
		pHTC->TotalCreditsAssigned += pMsg->CreditCount;
	} else {
		pRspMsg->Status = 2;
  90a154:	c032      	movi.n	a3, 2
  90a156:	234403        	s8i	a3, a4, 3
    
	HIF_config_pipe(pHTC->hifHandle, pMsg->PipeID, pMsg->CreditCount);
    
config_done:      
	/* send out the response message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer);             
  90a159:	136915        	l32r	a3, 8e45b0 <bStandardCommand+0x74c>
  90a15c:	da20      	mov.n	a10, a2
  90a15e:	233284        	l32i	a3, a3, 0x210
  90a161:	c0b0      	movi.n	a11, 0
  90a163:	dc60      	mov.n	a12, a6
  90a165:	0b3000        	callx8	a3
  90a168:	d10f      	retw.n
	...

0090a16c <HTCControlSvcProcessMsg>:
}

/* process an incomming control message from the host */
LOCAL void HTCControlSvcProcessMsg(HTC_ENDPOINT_ID EndpointID, adf_nbuf_t hdr_buf,
				   adf_nbuf_t pBuffers, void *arg)
{  
  90a16c:	6c1006        	entry	a1, 48
	a_uint8_t *anbdata;
	a_uint32_t anblen;
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)arg;
	HTC_UNKNOWN_MSG  *pMsg;
	
	adf_os_assert(hdr_buf == ADF_NBUF_NULL);
  90a16f:	c935      	beqz.n	a3, 90a188 <HTCControlSvcProcessMsg+0x1c>
  90a171:	136915        	l32r	a3, 8e45c8 <bStandardCommand+0x764>
  90a174:	1a6a51        	l32r	a10, 8e4ab8 <mUsbEPinHighBandSet+0x118>
  90a177:	233212        	l32i	a3, a3, 72
  90a17a:	1b6a52        	l32r	a11, 8e4ac4 <mUsbEPinHighBandSet+0x124>
  90a17d:	0b3000        	callx8	a3
  90a180:	13697a        	l32r	a3, 8e4768 <bStandardCommand+0x904>
  90a183:	0c0200        	memw
  90a186:	8330      	l32i.n	a3, a3, 0
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90a188:	b41b      	addi.n	a11, a1, 4
  90a18a:	da40      	mov.n	a10, a4
  90a18c:	dc10      	mov.n	a12, a1
  90a18e:	5bf2c4        	call8	906ca0 <__adf_nbuf_peek_header>

	/* we assume buffers are aligned such that we can access the message
	 * parameters directly*/
	adf_nbuf_peek_header(pBuffers, &anbdata, &anblen);
	pMsg = (HTC_UNKNOWN_MSG *)anbdata;
  90a191:	8b11      	l32i.n	a11, a1, 4
    
	/* we cannot handle fragmented messages across buffers */
    
	switch ( adf_os_ntohs(pMsg->MessageID) ) {        
  90a193:	28b000        	l8ui	a8, a11, 0
  90a196:	23b001        	l8ui	a3, a11, 1
  90a199:	088811        	slli	a8, a8, 8
  90a19c:	083802        	or	a8, a3, a8
		break;            
        case HTC_MSG_SETUP_COMPLETE_ID:
                /* the host has indicated that it has completed all
		   setup tasks and we can now let the services take over to
		   run the rest of the application */
		setupComplete = TRUE;  
  90a19f:	c031      	movi.n	a3, 1
	adf_nbuf_peek_header(pBuffers, &anbdata, &anblen);
	pMsg = (HTC_UNKNOWN_MSG *)anbdata;
    
	/* we cannot handle fragmented messages across buffers */
    
	switch ( adf_os_ntohs(pMsg->MessageID) ) {        
  90a1a1:	688417        	beqi	a8, 4, 90a1bc <HTCControlSvcProcessMsg+0x50>
  90a1a4:	68850d        	beqi	a8, 5, 90a1b5 <HTCControlSvcProcessMsg+0x49>
  90a1a7:	688202        	beqi	a8, 2, 90a1ad <HTCControlSvcProcessMsg+0x41>
  90a1aa:	60000c        	j	90a1ba <HTCControlSvcProcessMsg+0x4e>
        case HTC_MSG_CONNECT_SERVICE_ID:
		HTCProcessConnectMsg(pHTC, (HTC_CONNECT_SERVICE_MSG *)pMsg); 
  90a1ad:	da50      	mov.n	a10, a5
  90a1af:	5bff96        	call8	90a008 <HTCProcessConnectMsg>
  90a1b2:	600004        	j	90a1ba <HTCControlSvcProcessMsg+0x4e>
		break;
        case HTC_MSG_CONFIG_PIPE_ID:
		HTCProcessConfigPipeMsg(pHTC, (HTC_CONFIG_PIPE_MSG *)pMsg); 
  90a1b5:	da50      	mov.n	a10, a5
  90a1b7:	5bffcc        	call8	90a0e8 <HTCProcessConfigPipeMsg>

/* process an incomming control message from the host */
LOCAL void HTCControlSvcProcessMsg(HTC_ENDPOINT_ID EndpointID, adf_nbuf_t hdr_buf,
				   adf_nbuf_t pBuffers, void *arg)
{  
	A_BOOL setupComplete = FALSE;
  90a1ba:	c030      	movi.n	a3, 0
		break;
        default:
		;
	}  
        
	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {
  90a1bc:	285292        	l32i	a8, a5, 0x248
  90a1bf:	166915        	l32r	a6, 8e4614 <bStandardCommand+0x7b0>
  90a1c2:	7f8710        	bbci	a8, 31, 90a1d6 <HTCControlSvcProcessMsg+0x6a>
		/* recycle buffer only if we are fully running */
		HTC_ReturnBuffers(pHTC, ENDPOINT0,pBuffers);
  90a1c5:	226282        	l32i	a2, a6, 0x208
  90a1c8:	da50      	mov.n	a10, a5
  90a1ca:	c0b0      	movi.n	a11, 0
  90a1cc:	dc40      	mov.n	a12, a4
  90a1ce:	0b2000        	callx8	a2
  90a1d1:	60001c        	j	90a1f1 <HTCControlSvcProcessMsg+0x85>
  90a1d4:	0000c0        	excw
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  90a1d7:	b8da      	addi.n	a10, a13, 8
  90a1d9:	400222        	excw
	} else {
		/* supply some head-room again */
		adf_nbuf_push_head(pBuffers, HTC_HDR_LENGTH);
            
		/* otherwise return the packet back to mbox */
		HIF_return_recv_buf(pHTC->hifHandle, pHTC->Endpoints[EndpointID].UpLinkPipeID, pBuffers);        
  90a1dc:	095bf1        	excw
  90a1df:	d605      	excw
  90a1e1:	220b26        	l32ai	a2, a0, 152
  90a1e4:	62772a        	j	8f1912 <memset+0xaaca>
  90a1e7:	529a2b        	call0	8b0a94 <_bss_end+0x39db84>
  90a1ea:	2019dc        	l16si	a0, a1, 0x1b8
  90a1ed:	400b60        	excw
  90a1f0:	00c931        	excw
	}

	if (setupComplete) {        
		/* mark that setup has completed */
		pHTC->StateFlags |= HTC_STATE_SETUP_COMPLETE; 
  90a1f3:	235292        	l32i	a3, a5, 0x248
  90a1f6:	c021      	movi.n	a2, 1
  90a1f8:	023202        	or	a2, a3, a2
  90a1fb:	225692        	s32i	a2, a5, 0x248
		if (pHTC->SetupCompleteCb != NULL) {
  90a1fe:	225293        	l32i	a2, a5, 0x24c
  90a201:	c821      	beqz.n	a2, 90a206 <HTCControlSvcProcessMsg+0x9a>
			pHTC->SetupCompleteCb();
  90a203:	0b2000        	callx8	a2
  90a206:	d10f      	retw.n

0090a208 <AdjustCreditThreshold>:
					  buf, 
					  pHTC->Endpoints[current_eid].pService->ServiceCtx);
}

LOCAL void AdjustCreditThreshold(HTC_ENDPOINT  *pEndpoint)
{
  90a208:	6c1004        	entry	a1, 32
	A_INT16 creditsOutstanding = pEndpoint->CreditsToReturn + pEndpoint->CreditsConsumed;
  90a20b:	292105        	l16ui	a9, a2, 10
  90a20e:	282100        	l16ui	a8, a2, 0
  90a211:	a898      	add.n	a8, a9, a8
        /* set the new threshold based on the number of credits that have been consumed
         * and which have not been returned by the app.
         * Note: it is okay for this threshold to be zero which indicates no threshold 
         * is in use */    
	switch (pEndpoint->ConnectionFlags & HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_MASK) {
  90a213:	292106        	l16ui	a9, a2, 12
					  pHTC->Endpoints[current_eid].pService->ServiceCtx);
}

LOCAL void AdjustCreditThreshold(HTC_ENDPOINT  *pEndpoint)
{
	A_INT16 creditsOutstanding = pEndpoint->CreditsToReturn + pEndpoint->CreditsConsumed;
  90a216:	088832        	sext	a8, a8, 15
        /* set the new threshold based on the number of credits that have been consumed
         * and which have not been returned by the app.
         * Note: it is okay for this threshold to be zero which indicates no threshold 
         * is in use */    
	switch (pEndpoint->ConnectionFlags & HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_MASK) {
  90a219:	090941        	extui	a9, a9, 0, 2
  90a21c:	689108        	beqi	a9, 1, 90a228 <AdjustCreditThreshold+0x20>
  90a21f:	c89e      	beqz.n	a9, 90a231 <AdjustCreditThreshold+0x29>
  90a221:	69920f        	bnei	a9, 2, 90a234 <AdjustCreditThreshold+0x2c>
  90a224:	600006        	j	90a22e <AdjustCreditThreshold+0x26>
  90a227:	000818        	src	a8, a0, a0
        case HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_ONE_FOURTH :
		creditsOutstanding >>= 2;
		break;                    
        case HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_ONE_HALF :
		creditsOutstanding >>= 1;
  90a22a:	126000        	l32r	a2, 8e222c <athos_indirection_table_install+0xcb8>
		break;
  90a22d:	050888        	excw
        case HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_THREE_FOURTHS :  
		creditsOutstanding = (creditsOutstanding * 3) >> 2;                  
  90a230:	090828        	mull	a8, a0, a9
  90a233:	122825        	l32r	a2, 8d42c8 <_bss_end+0x3c13b8>
		break;
		/* default case is unity */    
	}
    
	pEndpoint->CreditReturnThreshhold = creditsOutstanding;
  90a236:	04d10f        	subx8	a1, a13, a4
  90a239:	000000        	ill

0090a23c <_HTC_SendMsg>:
	ReturnBuffers(htcHandle, EndpointID, pBuffers, TRUE);
}
 
LOCAL void _HTC_SendMsg(htc_handle_t htcHandle, HTC_ENDPOINT_ID EndpointID,
			adf_nbuf_t pBuffers)
{
  90a23c:	6c1008        	entry	a1, 64
 * @return data pointer to typecast into your priv structure
 */
static inline a_uint8_t *
adf_nbuf_get_priv(adf_nbuf_t buf)
{
    return (__adf_nbuf_get_priv(buf));
  90a23f:	044a02        	or	a10, a4, a4
  90a242:	5bf1ed        	call8	9069f8 <__adf_nbuf_get_priv>
  90a245:	d6a0      	mov.n	a6, a10
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  90a247:	da40      	mov.n	a10, a4
  90a249:	5bf28d        	call8	906c80 <__adf_nbuf_len>
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  90a24c:	c0b8      	movi.n	a11, 8
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  90a24e:	d7a0      	mov.n	a7, a10
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  90a250:	da40      	mov.n	a10, a4
  90a252:	5bf1b9        	call8	906938 <__adf_nbuf_push_head>
	 * Note: in HTCSendDoneHandler(), we undo this so that the caller get's it's buffer
	 * back untainted */   
	pHTCHdr = (HTC_FRAME_HDR *)adf_nbuf_push_head(pBuffers, HTC_HDR_LENGTH);
    
	/* flag that this is the header buffer that was modified */
	ctx->htc_flags |= HTC_FLAGS_BUF_HDR;   
  90a255:	296001        	l8ui	a9, a6, 1
  90a258:	c480      	movi.n	a8, 64
  90a25a:	089802        	or	a8, a9, a8
  90a25d:	286401        	s8i	a8, a6, 1
	/* mark where this buffer came from */
	ctx->end_point = EndpointID;      
  90a260:	030847        	extui	a8, a3, 0, 8
  90a263:	286400        	s8i	a8, a6, 0
	/* the header start is ALWAYS aligned since we DMA it directly */

        /* set some fields, the rest of them will be filled below when we check for
	 * trailer space */
	pHTCHdr->Flags = 0;
  90a266:	c060      	movi.n	a6, 0
  90a268:	26a401        	s8i	a6, a10, 1
	pHTCHdr->EndpointID = EndpointID;    
  90a26b:	28a400        	s8i	a8, a10, 0
		HTC_RECORD_HDR    *pRecHdr;
		int               pipeMaxLen;
		A_UINT32          roomForPipeMaxLen;
                          
		/* figure out how much room the last buffer can spare */
		pipeMaxLen = HIF_get_max_msg_len(pHTC->hifHandle,
  90a26e:	166915        	l32r	a6, 8e46c4 <bStandardCommand+0x860>
  90a271:	033809        	addx2	a8, a3, a3
  90a274:	02880b        	addx8	a8, a8, a2
  90a277:	2b8018        	l8ui	a11, a8, 24
  90a27a:	266279        	l32i	a6, a6, 0x1e4
  90a27d:	d5a0      	mov.n	a5, a10
  90a27f:	2a229a        	l32i	a10, a2, 0x268
  90a282:	0b6000        	callx8	a6
  90a285:	d6a0      	mov.n	a6, a10
 * @return amount of head room
 */
static inline a_uint32_t
adf_nbuf_headroom(adf_nbuf_t buf)
{
    return (__adf_nbuf_headroom(buf));
  90a287:	da40      	mov.n	a10, a4
  90a289:	5bf273        	call8	906c58 <__adf_nbuf_headroom>
						 pHTC->Endpoints[EndpointID].DownLinkPipeID);
		roomForPipeMaxLen = pipeMaxLen - adf_nbuf_headroom(pBuffers) - adf_nbuf_len(pBuffers);
  90a28c:	0a660c        	sub	a6, a6, a10
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  90a28f:	da40      	mov.n	a10, a4
  90a291:	5bf27b        	call8	906c80 <__adf_nbuf_len>
  90a294:	0a660c        	sub	a6, a6, a10
 * @return amount of tail room 
 */
static inline a_uint32_t
adf_nbuf_tailroom(adf_nbuf_t buf)
{
    return (__adf_nbuf_tailroom(buf));
  90a297:	da40      	mov.n	a10, a4
  90a299:	5bf272        	call8	906c64 <__adf_nbuf_tailroom>
		if ( roomForPipeMaxLen < 0 ) {
			roomForPipeMaxLen = 0;
		}
                        
		room = adf_os_min( adf_nbuf_tailroom(pBuffers), roomForPipeMaxLen);
  90a29c:	dd60      	mov.n	a13, a6
  90a29e:	76ab06        	bgeu	a10, a6, 90a2a8 <_HTC_SendMsg+0x6c>
  90a2a1:	da40      	mov.n	a10, a4
  90a2a3:	5bf270        	call8	906c64 <__adf_nbuf_tailroom>
  90a2a6:	dda0      	mov.n	a13, a10
		if (room < (int)(sizeof(HTC_CREDIT_REPORT) + sizeof(HTC_RECORD_HDR))) {
  90a2a8:	6bd402        	bgei	a13, 4, 90a2ae <_HTC_SendMsg+0x72>
  90a2ab:	6000bd        	j	90a36c <_HTC_SendMsg+0x130>
		/* note, a record header only has 8 bit fields, so this is safe.
		 * we need an uncached pointer here too */            
		totalReportBytes = 0;
        
		/* get a copy */        
		creditsPendingMap = pHTC->EpCreditPendingMap;   
  90a2ae:	262286        	l32i	a6, a2, 0x218
                           
		/* test pending map to see if we can send a report , if any
		 * credits are available, we might as well send them on the 
		 * unused space in the buffer */
		if (creditsPendingMap) { 
  90a2b1:	6460b7        	beqz	a6, 90a36c <_HTC_SendMsg+0x130>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  90a2b4:	da40      	mov.n	a10, a4
  90a2b6:	c0b2      	movi.n	a11, 2
  90a2b8:	9d15      	s32i.n	a13, a1, 20
  90a2ba:	5bf25d        	call8	906c30 <__adf_nbuf_put_tail>
			pRecHdr = (HTC_RECORD_HDR *)adf_nbuf_put_tail(pBuffers,
							      sizeof(HTC_RECORD_HDR));
            
			/* set the ID, the length will be updated with the number of credit reports we
			 * can fit (see below) */
			pRecHdr->RecordID = HTC_RECORD_CREDITS;
  90a2bd:	c081      	movi.n	a8, 1
  90a2bf:	28a400        	s8i	a8, a10, 0
			pRecHdr->Length = 0;
  90a2c2:	c080      	movi.n	a8, 0
  90a2c4:	28a401        	s8i	a8, a10, 1
			/* the credit report follows the record header */         
			totalReportBytes += sizeof(HTC_RECORD_HDR);
			room -= sizeof(HTC_RECORD_HDR);
  90a2c7:	8d15      	l32i.n	a13, a1, 20
  90a2c9:	dea0      	mov.n	a14, a10
  90a2cb:	2ddcfe        	addi	a13, a13, -2
  90a2ce:	dc20      	mov.n	a12, a2
			/* set the ID, the length will be updated with the number of credit reports we
			 * can fit (see below) */
			pRecHdr->RecordID = HTC_RECORD_CREDITS;
			pRecHdr->Length = 0;
			/* the credit report follows the record header */         
			totalReportBytes += sizeof(HTC_RECORD_HDR);
  90a2d0:	c092      	movi.n	a9, 2
			room -= sizeof(HTC_RECORD_HDR);
            
			/* walkthrough pending credits map and build the records */
			for (i = 0; 
  90a2d2:	c080      	movi.n	a8, 0
  90a2d4:	600077        	j	90a34f <_HTC_SendMsg+0x113>
  90a2d7:	00c0a1        	excw
			     (creditsPendingMap != 0) && (room >= (int)sizeof(HTC_CREDIT_REPORT)); 
			     i++) {                
				compareMask = (1 << i);
  90a2da:	008104        	ssl	a8
  90a2dd:	00af1a        	sll	a15, a10
				if (compareMask & creditsPendingMap) {
  90a2e0:	76f066        	bnone	a15, a6, 90a34a <_HTC_SendMsg+0x10e>
  90a2e3:	c0b2      	movi.n	a11, 2
  90a2e5:	da40      	mov.n	a10, a4
  90a2e7:	9811      	s32i.n	a8, a1, 4
  90a2e9:	9912      	s32i.n	a9, a1, 8
  90a2eb:	9c14      	s32i.n	a12, a1, 16
  90a2ed:	9d15      	s32i.n	a13, a1, 20
  90a2ef:	9e13      	s32i.n	a14, a1, 12
  90a2f1:	9f10      	s32i.n	a15, a1, 0
  90a2f3:	5bf24f        	call8	906c30 <__adf_nbuf_put_tail>
									    sizeof(HTC_CREDIT_REPORT));
                                    
					/* clear pending mask, we are going to return all these credits */
					creditsPendingMap &= ~(compareMask);
					/* add this record */
					pCreditRpt->EndpointID = i;
  90a2f6:	8811      	l32i.n	a8, a1, 4
                        
					pCreditRpt = (HTC_CREDIT_REPORT *)adf_nbuf_put_tail(pBuffers,
									    sizeof(HTC_CREDIT_REPORT));
                                    
					/* clear pending mask, we are going to return all these credits */
					creditsPendingMap &= ~(compareMask);
  90a2f8:	8f10      	l32i.n	a15, a1, 0
					/* add this record */
					pCreditRpt->EndpointID = i;
  90a2fa:	28a400        	s8i	a8, a10, 0
					pCreditRpt->Credits = (A_UINT8)pHTC->Endpoints[i].CreditsToReturn;
  90a2fd:	8c14      	l32i.n	a12, a1, 16
                        
					pCreditRpt = (HTC_CREDIT_REPORT *)adf_nbuf_put_tail(pBuffers,
									    sizeof(HTC_CREDIT_REPORT));
                                    
					/* clear pending mask, we are going to return all these credits */
					creditsPendingMap &= ~(compareMask);
  90a2ff:	c7bf      	movi.n	a11, -1
  90a301:	0fbf03        	xor	a15, a11, a15
					/* add this record */
					pCreditRpt->EndpointID = i;
					pCreditRpt->Credits = (A_UINT8)pHTC->Endpoints[i].CreditsToReturn;
  90a304:	2bc102        	l16ui	a11, a12, 4
                        
					pCreditRpt = (HTC_CREDIT_REPORT *)adf_nbuf_put_tail(pBuffers,
									    sizeof(HTC_CREDIT_REPORT));
                                    
					/* clear pending mask, we are going to return all these credits */
					creditsPendingMap &= ~(compareMask);
  90a307:	0f6601        	and	a6, a6, a15
					/* add this record */
					pCreditRpt->EndpointID = i;
					pCreditRpt->Credits = (A_UINT8)pHTC->Endpoints[i].CreditsToReturn;
  90a30a:	2ba401        	s8i	a11, a10, 1
					/* remove pending credits, we always send deltas */
					pHTC->Endpoints[i].CreditsToReturn = 0; 
  90a30d:	c0a0      	movi.n	a10, 0
  90a30f:	2ac502        	s16i	a10, a12, 4
					/* adjust new threshold for this endpoint if needed */
					CHECK_AND_ADJUST_CREDIT_THRESHOLD(&pHTC->Endpoints[i]);
  90a312:	2ac108        	l16ui	a10, a12, 16
  90a315:	8912      	l32i.n	a9, a1, 8
  90a317:	8d15      	l32i.n	a13, a1, 20
  90a319:	8e13      	l32i.n	a14, a1, 12
  90a31b:	7da71a        	bbci	a10, 29, 90a339 <_HTC_SendMsg+0xfd>
  90a31e:	088a09        	addx2	a10, a8, a8
  90a321:	02aa0b        	addx8	a10, a10, a2
  90a324:	b4aa      	addi.n	a10, a10, 4
  90a326:	9811      	s32i.n	a8, a1, 4
  90a328:	2c1604        	s32i	a12, a1, 16
  90a32b:	5bffb7        	call8	90a208 <AdjustCreditThreshold>
  90a32e:	8e13      	l32i.n	a14, a1, 12
  90a330:	8d15      	l32i.n	a13, a1, 20
  90a332:	8c14      	l32i.n	a12, a1, 16
  90a334:	8912      	l32i.n	a9, a1, 8
  90a336:	281201        	l32i	a8, a1, 4
					/* update this record length */
					pRecHdr->Length += sizeof(HTC_CREDIT_REPORT);
  90a339:	2ae001        	l8ui	a10, a14, 1
					room -= sizeof(HTC_CREDIT_REPORT);
  90a33c:	2ddcfe        	addi	a13, a13, -2
					/* remove pending credits, we always send deltas */
					pHTC->Endpoints[i].CreditsToReturn = 0; 
					/* adjust new threshold for this endpoint if needed */
					CHECK_AND_ADJUST_CREDIT_THRESHOLD(&pHTC->Endpoints[i]);
					/* update this record length */
					pRecHdr->Length += sizeof(HTC_CREDIT_REPORT);
  90a33f:	b2aa      	addi.n	a10, a10, 2
  90a341:	2ae401        	s8i	a10, a14, 1
					room -= sizeof(HTC_CREDIT_REPORT);
					totalReportBytes += sizeof(HTC_CREDIT_REPORT);
  90a344:	299c02        	addi	a9, a9, 2

					if ( room < sizeof(HTC_CREDIT_REPORT) ) {
  90a347:	6ed20a        	bltui	a13, 2, 90a355 <_HTC_SendMsg+0x119>
			room -= sizeof(HTC_RECORD_HDR);
            
			/* walkthrough pending credits map and build the records */
			for (i = 0; 
			     (creditsPendingMap != 0) && (room >= (int)sizeof(HTC_CREDIT_REPORT)); 
			     i++) {                
  90a34a:	b188      	addi.n	a8, a8, 1
  90a34c:	2ccc18        	addi	a12, a12, 24
			totalReportBytes += sizeof(HTC_RECORD_HDR);
			room -= sizeof(HTC_RECORD_HDR);
            
			/* walkthrough pending credits map and build the records */
			for (i = 0; 
			     (creditsPendingMap != 0) && (room >= (int)sizeof(HTC_CREDIT_REPORT)); 
  90a34f:	6ad202        	blti	a13, 2, 90a355 <_HTC_SendMsg+0x119>
			/* the credit report follows the record header */         
			totalReportBytes += sizeof(HTC_RECORD_HDR);
			room -= sizeof(HTC_RECORD_HDR);
            
			/* walkthrough pending credits map and build the records */
			for (i = 0; 
  90a352:	656f82        	bnez	a6, 90a2d8 <_HTC_SendMsg+0x9c>
					}
				}
			}
            
			/* update new pending credits map */       
			pHTC->EpCreditPendingMap = creditsPendingMap;
  90a355:	262686        	s32i	a6, a2, 0x218
		}
        
		if (totalReportBytes <= 0) {
  90a358:	6a9110        	blti	a9, 1, 90a36c <_HTC_SendMsg+0x130>
		 */
        
		/* set header option bytes */ 
		pHTCHdr->ControlBytes[0] = totalReportBytes;
		/* HTC frame contains a trailer */
		pHTCHdr->Flags |= HTC_FLAGS_RECV_TRAILER;
  90a35b:	285001        	l8ui	a8, a5, 1
  90a35e:	c062      	movi.n	a6, 2
  90a360:	068602        	or	a6, a8, a6
		 * The trailer can have at most 1 credit record with up to 32  reports in the record.
		 * The trailer can have at most 1 lookahead record with only 1 lookahead report in the record.
		 */
        
		/* set header option bytes */ 
		pHTCHdr->ControlBytes[0] = totalReportBytes;
  90a363:	295404        	s8i	a9, a5, 4
		/* HTC frame contains a trailer */
		pHTCHdr->Flags |= HTC_FLAGS_RECV_TRAILER;
  90a366:	265401        	s8i	a6, a5, 1
		/* increment total size by the reports we added */
		totsz += totalReportBytes;
  90a369:	097708        	add	a7, a7, a9
          
	if (totsz == 0) {
	}
    
	/* set length for message (this includes any reports that were added above) */
	pHTCHdr->PayloadLen = adf_os_htons(totsz);  
  90a36c:	07074f        	extui	a7, a7, 0, 16
  90a36f:	078614        	srli	a6, a7, 8
  90a372:	265402        	s8i	a6, a5, 2
  90a375:	275403        	s8i	a7, a5, 3
	HIF_send_buffer(pHTC->hifHandle, pHTC->Endpoints[EndpointID].DownLinkPipeID, pBuffers);       
  90a378:	033309        	addx2	a3, a3, a3
  90a37b:	156915        	l32r	a5, 8e47d0 <bStandardCommand+0x96c>
  90a37e:	02330b        	addx8	a3, a3, a2
  90a381:	255276        	l32i	a5, a5, 0x1d8
  90a384:	2a229a        	l32i	a10, a2, 0x268
  90a387:	2b3018        	l8ui	a11, a3, 24
  90a38a:	044c02        	or	a12, a4, a4
  90a38d:	0b5000        	callx8	a5
  90a390:	d10f      	retw.n
	...

0090a394 <HTCMsgRecvHandler>:

}
            
/* callback from the mailbox hardware layer when a full message arrives */
LOCAL void HTCMsgRecvHandler(adf_nbuf_t hdr_buf, adf_nbuf_t buffer, void *context)
{
  90a394:	6c1008        	entry	a1, 64
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)context;
	adf_nbuf_t tmp_nbuf;
                
	if (hdr_buf == ADF_NBUF_NULL) {
		/* HTC hdr is not in the hdr_buf */
		tmp_nbuf = buffer;
  90a397:	d530      	mov.n	a5, a3
  90a399:	022539        	movnez	a5, a2, a2
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90a39c:	da50      	mov.n	a10, a5
  90a39e:	b41b      	addi.n	a11, a1, 4
  90a3a0:	dc10      	mov.n	a12, a1
  90a3a2:	5bf23f        	call8	906ca0 <__adf_nbuf_peek_header>
	else {
		tmp_nbuf = hdr_buf;
	}
                
	adf_nbuf_peek_header(tmp_nbuf, &anbdata, &anblen);        
	pHTCHdr = (HTC_FRAME_HDR *)anbdata; 
  90a3a5:	8911      	l32i.n	a9, a1, 4
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)context;
	adf_nbuf_t tmp_nbuf;
                
	if (hdr_buf == ADF_NBUF_NULL) {
		/* HTC hdr is not in the hdr_buf */
		tmp_nbuf = buffer;
  90a3a7:	d750      	mov.n	a7, a5
	eid = pHTCHdr->EndpointID; 
    
	pEndpoint = &pHTC->Endpoints[eid];
	eidMask = 1 << eid;

	if (pHTCHdr->Flags & HTC_FLAGS_CREDIT_REDISTRIBUTION) {
  90a3a9:	259001        	l8ui	a5, a9, 1
	adf_nbuf_peek_header(tmp_nbuf, &anbdata, &anblen);        
	pHTCHdr = (HTC_FRAME_HDR *)anbdata; 
      
	totsz = adf_os_ntohs(pHTCHdr->PayloadLen); 
    
	eid = pHTCHdr->EndpointID; 
  90a3ac:	269000        	l8ui	a6, a9, 0
    
	pEndpoint = &pHTC->Endpoints[eid];
	eidMask = 1 << eid;

	if (pHTCHdr->Flags & HTC_FLAGS_CREDIT_REDISTRIBUTION) {
  90a3af:	7d5f76        	bbsi	a5, 29, 90a429 <HTCMsgRecvHandler+0x95>
      
	totsz = adf_os_ntohs(pHTCHdr->PayloadLen); 
    
	eid = pHTCHdr->EndpointID; 
    
	pEndpoint = &pHTC->Endpoints[eid];
  90a3b2:	066509        	addx2	a5, a6, a6
		 * Byte 0 */
		RedistributeCredit(tmp_nbuf, pHTCHdr->ControlBytes[0]);
		return;
	}

	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {
  90a3b5:	284292        	l32i	a8, a4, 0x248
      
	totsz = adf_os_ntohs(pHTCHdr->PayloadLen); 
    
	eid = pHTCHdr->EndpointID; 
    
	pEndpoint = &pHTC->Endpoints[eid];
  90a3b8:	04550b        	addx8	a5, a5, a4
  90a3bb:	b455      	addi.n	a5, a5, 4
		 * Byte 0 */
		RedistributeCredit(tmp_nbuf, pHTCHdr->ControlBytes[0]);
		return;
	}

	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {
  90a3bd:	7f8707        	bbci	a8, 31, 90a3c8 <HTCMsgRecvHandler+0x34>
		/* after setup we keep track of credit consumption to allow us to
		 * adjust thresholds to reduce credit dribbling */  
		pEndpoint->CreditsConsumed ++;
  90a3c0:	285105        	l16ui	a8, a5, 10
  90a3c3:	b188      	addi.n	a8, a8, 1
  90a3c5:	285505        	s16i	a8, a5, 10
	/* from the design document, we put the endpoint into a "host-needs-credit" state
	 * when we receive a frame with the NEED_CREDIT_UPDATE flag set .
	 * if the host received credits through an opportunistic path, then it can
	 * issue a another frame with this bit cleared, this signals the target to clear
	 * the "host-needs-credit" state */    
	if (pHTCHdr->Flags & HTC_FLAGS_NEED_CREDIT_UPDATE) {
  90a3c8:	299001        	l8ui	a9, a9, 1
	totsz = adf_os_ntohs(pHTCHdr->PayloadLen); 
    
	eid = pHTCHdr->EndpointID; 
    
	pEndpoint = &pHTC->Endpoints[eid];
	eidMask = 1 << eid;
  90a3cb:	c081      	movi.n	a8, 1
	/* from the design document, we put the endpoint into a "host-needs-credit" state
	 * when we receive a frame with the NEED_CREDIT_UPDATE flag set .
	 * if the host received credits through an opportunistic path, then it can
	 * issue a another frame with this bit cleared, this signals the target to clear
	 * the "host-needs-credit" state */    
	if (pHTCHdr->Flags & HTC_FLAGS_NEED_CREDIT_UPDATE) {
  90a3cd:	090940        	extui	a9, a9, 0, 1
	totsz = adf_os_ntohs(pHTCHdr->PayloadLen); 
    
	eid = pHTCHdr->EndpointID; 
    
	pEndpoint = &pHTC->Endpoints[eid];
	eidMask = 1 << eid;
  90a3d0:	006104        	ssl	a6
  90a3d3:	00881a        	sll	a8, a8
  90a3d6:	2a4285        	l32i	a10, a4, 0x214
	/* from the design document, we put the endpoint into a "host-needs-credit" state
	 * when we receive a frame with the NEED_CREDIT_UPDATE flag set .
	 * if the host received credits through an opportunistic path, then it can
	 * issue a another frame with this bit cleared, this signals the target to clear
	 * the "host-needs-credit" state */    
	if (pHTCHdr->Flags & HTC_FLAGS_NEED_CREDIT_UPDATE) {
  90a3d9:	c997      	beqz.n	a9, 90a3f4 <HTCMsgRecvHandler+0x60>
		/* the host is running low (or is out) of credits on this
		 * endpoint, update mask */
		pHTC->EpHostNeedsCreditMap |= eidMask; 
  90a3db:	08aa02        	or	a10, a10, a8
		/* check and set new threshold since host has reached a low credit situation */
		CHECK_AND_ADJUST_CREDIT_THRESHOLD(pEndpoint);                          
  90a3de:	295106        	l16ui	a9, a5, 12
	 * issue a another frame with this bit cleared, this signals the target to clear
	 * the "host-needs-credit" state */    
	if (pHTCHdr->Flags & HTC_FLAGS_NEED_CREDIT_UPDATE) {
		/* the host is running low (or is out) of credits on this
		 * endpoint, update mask */
		pHTC->EpHostNeedsCreditMap |= eidMask; 
  90a3e1:	2a4685        	s32i	a10, a4, 0x214
		/* check and set new threshold since host has reached a low credit situation */
		CHECK_AND_ADJUST_CREDIT_THRESHOLD(pEndpoint);                          
  90a3e4:	7d971a        	bbci	a9, 29, 90a402 <HTCMsgRecvHandler+0x6e>
  90a3e7:	da50      	mov.n	a10, a5
  90a3e9:	9814      	s32i.n	a8, a1, 16
  90a3eb:	5bff87        	call8	90a208 <AdjustCreditThreshold>
  90a3ee:	8814      	l32i.n	a8, a1, 16
  90a3f0:	60000e        	j	90a402 <HTCMsgRecvHandler+0x6e>
  90a3f3:	00c7bf        	excw
	} else {
		/* clear the flag */
		pHTC->EpHostNeedsCreditMap &= ~(eidMask);       
  90a3f6:	08bb03        	xor	a11, a11, a8
  90a3f9:	0baa01        	and	a10, a10, a11
  90a3fc:	2a4685        	s32i	a10, a4, 0x214
		pEndpoint->CreditReturnThreshhold = 0; 
  90a3ff:	295504        	s16i	a9, a5, 8
 *         or NULL if there is not sufficient data to pull.
 */
static inline a_uint8_t *
adf_nbuf_pull_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_pull_head(buf, size);
  90a402:	da70      	mov.n	a10, a7
  90a404:	c0b8      	movi.n	a11, 8
  90a406:	281604        	s32i	a8, a1, 16
  90a409:	5bf156        	call8	906964 <__adf_nbuf_pull_head>
	 *        as the result of parsing this message.  In either case, if there are
	 *        pending credits and the host needs them, a credit report will be sent either through 
	 *        the response message trailer or a NULL message through HTC_ReturnBuffers().
	 */       
        
	pEndpoint->pService->ProcessRecvMsg(eid, hdr_buf, buffer, pEndpoint->pService->ServiceCtx);
  90a40c:	8751      	l32i.n	a7, a5, 4
  90a40e:	da60      	mov.n	a10, a6
  90a410:	8d76      	l32i.n	a13, a7, 24
  90a412:	8971      	l32i.n	a9, a7, 4
  90a414:	db20      	mov.n	a11, a2
  90a416:	033c02        	or	a12, a3, a3
  90a419:	0b9000        	callx8	a9

	/* Calls to HTC_ReturnBuffers drives the endpoint credit reporting state machine. 
	 * We do not want to delay credits for too long in the event that the application is 
	 * holding onto buffers for excessive periods of time.  This gives us "some" better
	 * opportunities to send up credits. */
	HTCCheckAndSendCreditReport(pHTC, eidMask, pEndpoint, eid); 
  90a41c:	8814      	l32i.n	a8, a1, 16
  90a41e:	da40      	mov.n	a10, a4
  90a420:	db80      	mov.n	a11, a8
  90a422:	dc50      	mov.n	a12, a5
  90a424:	dd60      	mov.n	a13, a6
  90a426:	5bfea0        	call8	909ea8 <HTCCheckAndSendCreditReport>
  90a429:	d10f      	retw.n
	...

0090a42c <RedistributeCredit>:
	pEndpoint->CreditReturnThreshhold = creditsOutstanding;
    
}

LOCAL void RedistributeCredit(adf_nbuf_t buf, int toPipeId)
{
  90a42c:	6c1004        	entry	a1, 32
  90a42f:	d10f      	retw.n
  90a431:	000000        	ill

0090a434 <WMIServiceConnect>:
                                 HTC_ENDPOINT_ID eid, 
                                 A_UINT8 *pDataIn, 
                                 int LengthIn,
                                 A_UINT8 *pDataOut,
                                 int *pLengthOut)
{
  90a434:	6c1004        	entry	a1, 32
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)pService->ServiceCtx;
    
        /* save the eid to use */
	pWMI->ControlEp = eid;
  90a437:	8826      	l32i.n	a8, a2, 24
  90a439:	938a      	s32i.n	a3, a8, 40
	return HTC_SERVICE_SUCCESS;
}
  90a43b:	c020      	movi.n	a2, 0
  90a43d:	d10f      	retw.n
	...

0090a440 <_WMI_GetPendingEventsCount>:
    
	return pWMI;
}

static int _WMI_GetPendingEventsCount(wmi_handle_t handle)
{
  90a440:	6c1004        	entry	a1, 32
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
	return pWMI->PendingEvents;
}
  90a443:	8222      	l32i.n	a2, a2, 8
  90a445:	d10f      	retw.n
	...

0090a448 <_WMI_GetControlEp>:

static int  _WMI_GetControlEp(wmi_handle_t handle)
{
  90a448:	6c1004        	entry	a1, 32
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
	return pWMI->ControlEp;
}
  90a44b:	822a      	l32i.n	a2, a2, 40
  90a44d:	d10f      	retw.n
	...

0090a450 <_WMI_RegisterDispatchTable>:

static void _WMI_RegisterDispatchTable(wmi_handle_t handle,
				       WMI_DISPATCH_TABLE *pDispatchTable)
{
  90a450:	6c1004        	entry	a1, 32
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
    
	if (NULL == pWMI->pDispatchHead) {
  90a453:	882b      	l32i.n	a8, a2, 44
  90a455:	cc83      	bnez.n	a8, 90a45c <_WMI_RegisterDispatchTable+0xc>
		pWMI->pDispatchHead = pDispatchTable;
  90a457:	932b      	s32i.n	a3, a2, 44
  90a459:	600003        	j	90a460 <_WMI_RegisterDispatchTable+0x10>
		pWMI->pDispatchTail = pDispatchTable;        
	} else {
		/* link to the tail */
		pWMI->pDispatchTail->pNext = pDispatchTable;
  90a45c:	882c      	l32i.n	a8, a2, 48
  90a45e:	9380      	s32i.n	a3, a8, 0
		pWMI->pDispatchTail = pDispatchTable;        
  90a460:	932c      	s32i.n	a3, a2, 48
  90a462:	d10f      	retw.n

0090a464 <_WMI_Shutdown>:
	
	HTC_SendMsg(pWMI->HtcHandle, pWMI->ControlEp, pEvt);    
}

static void _WMI_Shutdown(wmi_handle_t handle)
{
  90a464:	6c1004        	entry	a1, 32
  90a467:	d10f      	retw.n
  90a469:	000000        	ill

0090a46c <WMIRecvMessageHandler>:

#include "wmi_internal.h"

static void WMIRecvMessageHandler(HTC_ENDPOINT_ID EndPt, adf_nbuf_t hdr_buf,
				  adf_nbuf_t pHTCBuf, void *arg)
{
  90a46c:	6c1006        	entry	a1, 48
	int length;
	a_uint8_t *anbdata;
	a_uint32_t anblen;
	WMI_CMD_HDR *cmdHdr;
            
	adf_os_assert(hdr_buf == ADF_NBUF_NULL);
  90a46f:	643016        	beqz	a3, 90a489 <WMIRecvMessageHandler+0x1d>
  90a472:	136915        	l32r	a3, 8e48c8 <bStandardCommand+0xa64>
  90a475:	1a6a53        	l32r	a10, 8e4dc4 <mUsbEPinHighBandSet+0x424>
  90a478:	233212        	l32i	a3, a3, 72
  90a47b:	1b6a54        	l32r	a11, 8e4dcc <mUsbEPinHighBandSet+0x42c>
  90a47e:	0b3000        	callx8	a3
  90a481:	13697a        	l32r	a3, 8e4a6c <mUsbEPinHighBandSet+0xcc>
  90a484:	0c0200        	memw
  90a487:	8330      	l32i.n	a3, a3, 0
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  90a489:	da40      	mov.n	a10, a4
  90a48b:	5bf1fd        	call8	906c80 <__adf_nbuf_len>
  90a48e:	d3a0      	mov.n	a3, a10

	do {
		length = adf_nbuf_len(pHTCBuf);
		if (length < sizeof(WMI_CMD_HDR)) {
  90a490:	6ea465        	bltui	a10, 4, 90a4f9 <WMIRecvMessageHandler+0x8d>
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90a493:	b41b      	addi.n	a11, a1, 4
  90a495:	dc10      	mov.n	a12, a1
  90a497:	da40      	mov.n	a10, a4
  90a499:	5bf201        	call8	906ca0 <__adf_nbuf_peek_header>
		adf_nbuf_peek_header(pHTCBuf, &anbdata, &anblen);
        
		pCurrentTable = pWMI->pDispatchHead;
		length = length - sizeof(WMI_CMD_HDR);
        
		cmdHdr = (WMI_CMD_HDR *)anbdata;
  90a49c:	8d11      	l32i.n	a13, a1, 4
		}

		adf_nbuf_peek_header(pHTCBuf, &anbdata, &anblen);
        
		pCurrentTable = pWMI->pDispatchHead;
		length = length - sizeof(WMI_CMD_HDR);
  90a49e:	2e3cfc        	addi	a14, a3, -4
        
		cmdHdr = (WMI_CMD_HDR *)anbdata;
		cmd = adf_os_ntohs(cmdHdr->commandId);
  90a4a1:	2bd000        	l8ui	a11, a13, 0
  90a4a4:	23d001        	l8ui	a3, a13, 1
		seq = adf_os_ntohs(cmdHdr->seqNo);
  90a4a7:	2cd002        	l8ui	a12, a13, 2
        
		pCurrentTable = pWMI->pDispatchHead;
		length = length - sizeof(WMI_CMD_HDR);
        
		cmdHdr = (WMI_CMD_HDR *)anbdata;
		cmd = adf_os_ntohs(cmdHdr->commandId);
  90a4aa:	08bb11        	slli	a11, a11, 8
  90a4ad:	0b3b02        	or	a11, a3, a11
		seq = adf_os_ntohs(cmdHdr->seqNo);
  90a4b0:	23d003        	l8ui	a3, a13, 3
  90a4b3:	08cc11        	slli	a12, a12, 8
			break;    
		}

		adf_nbuf_peek_header(pHTCBuf, &anbdata, &anblen);
        
		pCurrentTable = pWMI->pDispatchHead;
  90a4b6:	885b      	l32i.n	a8, a5, 44
		length = length - sizeof(WMI_CMD_HDR);
        
		cmdHdr = (WMI_CMD_HDR *)anbdata;
		cmd = adf_os_ntohs(cmdHdr->commandId);
		seq = adf_os_ntohs(cmdHdr->seqNo);
  90a4b8:	0c3c02        	or	a12, a3, a12
        
		pCmdBuffer = anbdata + sizeof(WMI_CMD_HDR); 
  90a4bb:	b4dd      	addi.n	a13, a13, 4
		pCmdHandler = NULL;
        
		while (pCurrentTable != NULL) {
  90a4bd:	600035        	j	90a4f6 <WMIRecvMessageHandler+0x8a>
            
			pContext = pCurrentTable->pContext;
  90a4c0:	8a81      	l32i.n	a10, a8, 4
			pCurrentEntry = pCurrentTable->pTable;
  90a4c2:	8983      	l32i.n	a9, a8, 12
        
			/* scan table entries */
			for (i = 0; i < pCurrentTable->NumberOfEntries; i++, pCurrentEntry++) {
  90a4c4:	8382      	l32i.n	a3, a8, 8
  90a4c6:	c0f0      	movi.n	a15, 0
  90a4c8:	600018        	j	90a4e4 <WMIRecvMessageHandler+0x78>
  90a4cb:	002691        	excw
				if (pCurrentEntry->CmdID == cmd) {
  90a4ce:	027b69        	excw
  90a4d1:	0d2391        	excw
					/* found a match */
					pCmdHandler = pCurrentEntry->pCmdHandler;
        
					/* optionally check length */
					if ((pCurrentEntry->CheckLength != 0) &&
  90a4d4:	038f90        	l32e	a3, a8, -4
  90a4d7:	c931      	beqz.n	a3, 90a4ec <WMIRecvMessageHandler+0x80>
  90a4d9:	73e217        	blt	a14, a3, 90a4f4 <WMIRecvMessageHandler+0x88>
  90a4dc:	60000c        	j	90a4ec <WMIRecvMessageHandler+0x80>
  90a4df:	00b1ff        	excw
            
			pContext = pCurrentTable->pContext;
			pCurrentEntry = pCurrentTable->pTable;
        
			/* scan table entries */
			for (i = 0; i < pCurrentTable->NumberOfEntries; i++, pCurrentEntry++) {
  90a4e2:	b899      	addi.n	a9, a9, 8
  90a4e4:	73f2e4        	blt	a15, a3, 90a4cc <WMIRecvMessageHandler+0x60>
  90a4e7:	600009        	j	90a4f4 <WMIRecvMessageHandler+0x88>
  90a4ea:	0000c8        	excw
					/* end search */                
					break;    
				}                        
			} 
            
			if (pCmdHandler != NULL) {
  90a4ed:	f4          	.byte 0xf4
		}
            
		/* if we get here, we have a command handler to dispatch */
                
		/* call dispatch function */
		pCmdHandler(pContext, cmd, seq, pCmdBuffer, length);
  90a4ee:	0bf000        	callx8	a15
  90a4f1:	600004        	j	90a4f9 <WMIRecvMessageHandler+0x8d>
				/* found a handler */
				break;
			}
                
			/* scan next table */
			pCurrentTable = pCurrentTable->pNext;
  90a4f4:	8880      	l32i.n	a8, a8, 0
		seq = adf_os_ntohs(cmdHdr->seqNo);
        
		pCmdBuffer = anbdata + sizeof(WMI_CMD_HDR); 
		pCmdHandler = NULL;
        
		while (pCurrentTable != NULL) {
  90a4f6:	658fc6        	bnez	a8, 90a4c0 <WMIRecvMessageHandler+0x54>
        /* Invalidate the buffer (including HTC header). Note : we only need to invalidate up to the portion
	 * that was used (cache invalidate will also round up to the nearest cache line).  
	 * The rest of the buffer should still be coherent.
	 * */

	HTC_ReturnBuffers(pWMI->HtcHandle, EndPt, pHTCBuf);         
  90a4f9:	136915        	l32r	a3, 8e4950 <mUsbFIFOConfig+0x1c>
  90a4fc:	8a50      	l32i.n	a10, a5, 0
  90a4fe:	233282        	l32i	a3, a3, 0x208
  90a501:	db20      	mov.n	a11, a2
  90a503:	dc40      	mov.n	a12, a4
  90a505:	0b3000        	callx8	a3
  90a508:	d10f      	retw.n
	...

0090a50c <_WMI_SendCompleteHandler>:
}

/* send completion handler when any HTC buffers are returned */
static void _WMI_SendCompleteHandler(HTC_ENDPOINT_ID Endpt, adf_nbuf_t pHTCBuf, void *arg)
{
  90a50c:	6c1004        	entry	a1, 32
 * @return data pointer to typecast into your priv structure
 */
static inline a_uint8_t *
adf_nbuf_get_priv(adf_nbuf_t buf)
{
    return (__adf_nbuf_get_priv(buf));
  90a50f:	da30      	mov.n	a10, a3
  90a511:	5bf139        	call8	9069f8 <__adf_nbuf_get_priv>
		poolId = POOL_ID_WMI_SVC_EVENT;
	} else {
		poolId = POOL_ID_WMI_SVC_CMD_REPLY;
	}
        
	BUF_Pool_free_buf(pWMI->PoolHandle, poolId, pHTCBuf);
  90a514:	186915        	l32r	a8, 8e4968 <mUsbEPMxPtSzHigh+0x14>
	WMI_BUF_CONTEXT *ctx;
	BUF_POOL_ID poolId;
    
	ctx = (WMI_BUF_CONTEXT *)adf_nbuf_get_priv(pHTCBuf);
        
	if ( ctx->EventClass == WMI_EVT_CLASS_CMD_EVENT ) {
  90a517:	8ca1      	l32i.n	a12, a10, 4
		poolId = POOL_ID_WMI_SVC_EVENT;
	} else {
		poolId = POOL_ID_WMI_SVC_CMD_REPLY;
	}
        
	BUF_Pool_free_buf(pWMI->PoolHandle, poolId, pHTCBuf);
  90a519:	c092      	movi.n	a9, 2
  90a51b:	28829e        	l32i	a8, a8, 0x278
  90a51e:	8a41      	l32i.n	a10, a4, 4
  90a520:	c0b1      	movi.n	a11, 1
  90a522:	0c9b38        	moveqz	a11, a9, a12
  90a525:	dc30      	mov.n	a12, a3
  90a527:	0b8000        	callx8	a8
  90a52a:	d10f      	retw.n

0090a52c <_WMI_AllocEvent>:
	}
}

static adf_nbuf_t _WMI_AllocEvent(wmi_handle_t handle, WMI_EVT_CLASS EventClass,
				  int Length)
{     
  90a52c:	6c1004        	entry	a1, 32
		poolId = POOL_ID_WMI_SVC_EVENT;
	} else {
		poolId = POOL_ID_WMI_SVC_CMD_REPLY;
	}
    
	buf = BUF_Pool_alloc_buf(pWMI->PoolHandle, 
  90a52f:	186915        	l32r	a8, 8e4984 <mUsbEPMxPtSzLow+0x8>
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
	adf_nbuf_t buf;
	WMI_BUF_CONTEXT *ctx;
    
	if ( EventClass == WMI_EVT_CLASS_CMD_EVENT ) {
		poolId = POOL_ID_WMI_SVC_EVENT;
  90a532:	c051      	movi.n	a5, 1
  90a534:	c042      	movi.n	a4, 2
  90a536:	035439        	movnez	a4, a5, a3
	} else {
		poolId = POOL_ID_WMI_SVC_CMD_REPLY;
	}
    
	buf = BUF_Pool_alloc_buf(pWMI->PoolHandle, 
  90a539:	8a20      	l32i.n	a10, a2, 0
  90a53b:	25829c        	l32i	a5, a8, 0x270
  90a53e:	288285        	l32i	a8, a8, 0x214
  90a541:	8621      	l32i.n	a6, a2, 4
  90a543:	0b8000        	callx8	a8
  90a546:	b4ac      	addi.n	a12, a10, 4
  90a548:	044b02        	or	a11, a4, a4
  90a54b:	066a02        	or	a10, a6, a6
  90a54e:	0b5000        	callx8	a5
  90a551:	d2a0      	mov.n	a2, a10
				 poolId, 
				 sizeof(WMI_CMD_HDR) + HTC_GetReservedHeadroom(pWMI->HtcHandle));
     
	if ( buf != NULL ) {
  90a553:	c8a3      	beqz.n	a10, 90a55a <_WMI_AllocEvent+0x2e>
  90a555:	5bf128        	call8	9069f8 <__adf_nbuf_get_priv>
		ctx = (WMI_BUF_CONTEXT *)adf_nbuf_get_priv(buf);
		ctx->EventClass = EventClass;
  90a558:	93a1      	s32i.n	a3, a10, 4
	}
	return buf;
}
  90a55a:	d10f      	retw.n

0090a55c <_WMI_SendEvent>:

static void _WMI_SendEvent(wmi_handle_t handle, adf_nbuf_t pEvt, 
                           A_UINT16 EventId, A_UINT16 SeqNo, int Length)
{
  90a55c:	6c1004        	entry	a1, 32
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  90a55f:	033a02        	or	a10, a3, a3
  90a562:	2b0a04        	movi	a11, 4
  90a565:	5bf0f4        	call8	906938 <__adf_nbuf_push_head>
  90a568:	04044f        	extui	a4, a4, 0, 16
  90a56b:	05054f        	extui	a5, a5, 0, 16
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
	A_UINT8 *pBuffer;
        
	pBuffer = adf_nbuf_push_head(pEvt, sizeof(WMI_CMD_HDR));
	A_SET_UINT16_FIELD(pBuffer, WMI_CMD_HDR, commandId, adf_os_htons(EventId));        
  90a56e:	24a401        	s8i	a4, a10, 1
  90a571:	048814        	srli	a8, a4, 8
	A_SET_UINT16_FIELD(pBuffer, WMI_CMD_HDR, seqNo, adf_os_htons(SeqNo));
  90a574:	058414        	srli	a4, a5, 8
  90a577:	24a402        	s8i	a4, a10, 2
	
	HTC_SendMsg(pWMI->HtcHandle, pWMI->ControlEp, pEvt);    
  90a57a:	146915        	l32r	a4, 8e49d0 <mUsbEPinHighBandSet+0x30>
{
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
	A_UINT8 *pBuffer;
        
	pBuffer = adf_nbuf_push_head(pEvt, sizeof(WMI_CMD_HDR));
	A_SET_UINT16_FIELD(pBuffer, WMI_CMD_HDR, commandId, adf_os_htons(EventId));        
  90a57d:	28a400        	s8i	a8, a10, 0
	A_SET_UINT16_FIELD(pBuffer, WMI_CMD_HDR, seqNo, adf_os_htons(SeqNo));
  90a580:	25a403        	s8i	a5, a10, 3
	
	HTC_SendMsg(pWMI->HtcHandle, pWMI->ControlEp, pEvt);    
  90a583:	244284        	l32i	a4, a4, 0x210
  90a586:	8a20      	l32i.n	a10, a2, 0
  90a588:	8b2a      	l32i.n	a11, a2, 40
  90a58a:	033c02        	or	a12, a3, a3
  90a58d:	0b4000        	callx8	a4
  90a590:	d10f      	retw.n
	...

0090a594 <_WMI_Init>:
}

/**************  public APIS ********************************************/
    
static wmi_handle_t _WMI_Init(WMI_SVC_CONFIG *pWmiConfig)
{
  90a594:	6c1004        	entry	a1, 32
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  90a597:	136915        	l32r	a3, 8e49ec <mUsbEPinHighBandSet+0x4c>
  90a59a:	d420      	mov.n	a4, a2
  90a59c:	223252        	l32i	a2, a3, 0x148
  90a59f:	c0a0      	movi.n	a10, 0
  90a5a1:	c3b8      	movi.n	a11, 56
  90a5a3:	0b2000        	callx8	a2
  90a5a6:	d2a0      	mov.n	a2, a10
	WMI_SVC_CONTEXT *pWMI = NULL;
	int eventSize = WMI_SVC_MAX_BUFFERED_EVENT_SIZE + sizeof(WMI_CMD_HDR) + HTC_HDR_SZ;
    
	pWMI = (WMI_SVC_CONTEXT *)adf_os_mem_alloc(sizeof(WMI_SVC_CONTEXT));
	if (pWMI == NULL) {
  90a5a8:	64a055        	beqz	a10, 90a601 <_WMI_Init+0x6d>
		return NULL;    
	}
        
	pWMI->pDispatchHead = NULL;
  90a5ab:	c080      	movi.n	a8, 0
  90a5ad:	98ab      	s32i.n	a8, a10, 44
	pWMI->PoolHandle = pWmiConfig->PoolHandle;
	pWMI->HtcHandle = pWmiConfig->HtcHandle;    
  90a5af:	8840      	l32i.n	a8, a4, 0
	if (pWMI == NULL) {
		return NULL;    
	}
        
	pWMI->pDispatchHead = NULL;
	pWMI->PoolHandle = pWmiConfig->PoolHandle;
  90a5b1:	8a41      	l32i.n	a10, a4, 4
	pWMI->HtcHandle = pWmiConfig->HtcHandle;    
                                         
	BUF_Pool_create_pool(pWmiConfig->PoolHandle, POOL_ID_WMI_SVC_CMD_REPLY, 
  90a5b3:	8c42      	l32i.n	a12, a4, 8
		return NULL;    
	}
        
	pWMI->pDispatchHead = NULL;
	pWMI->PoolHandle = pWmiConfig->PoolHandle;
	pWMI->HtcHandle = pWmiConfig->HtcHandle;    
  90a5b5:	9820      	s32i.n	a8, a2, 0
                                         
	BUF_Pool_create_pool(pWmiConfig->PoolHandle, POOL_ID_WMI_SVC_CMD_REPLY, 
  90a5b7:	28329b        	l32i	a8, a3, 0x26c
	if (pWMI == NULL) {
		return NULL;    
	}
        
	pWMI->pDispatchHead = NULL;
	pWMI->PoolHandle = pWmiConfig->PoolHandle;
  90a5ba:	9a21      	s32i.n	a10, a2, 4
	pWMI->HtcHandle = pWmiConfig->HtcHandle;    
                                         
	BUF_Pool_create_pool(pWmiConfig->PoolHandle, POOL_ID_WMI_SVC_CMD_REPLY, 
  90a5bc:	2b0a01        	movi	a11, 1
  90a5bf:	2d0a70        	movi	a13, 112
  90a5c2:	0b8000        	callx8	a8
			     pWmiConfig->MaxCmdReplyEvts, eventSize);
        
	BUF_Pool_create_pool(pWmiConfig->PoolHandle, POOL_ID_WMI_SVC_EVENT, 
  90a5c5:	28329b        	l32i	a8, a3, 0x26c
  90a5c8:	8a41      	l32i.n	a10, a4, 4
  90a5ca:	8c43      	l32i.n	a12, a4, 12
  90a5cc:	c0b2      	movi.n	a11, 2
  90a5ce:	2d0a70        	movi	a13, 112
  90a5d1:	0b8000        	callx8	a8
            
	/* NOTE: since RAM allocation is zero-initialized, there is nothing to do for the 
	 * direct event pool */
     
        /* register the WMI control service */
	pWMI->WMIControlService.ProcessRecvMsg = A_INDIR(wmi_svc_api._WMI_RecvMessageHandler);
  90a5d4:	283293        	l32i	a8, a3, 0x24c
         * in size.  Any WMI event that supplies a data buffer must insure that the space in the buffer
         * is at least this size. */
	pWMI->WMIControlService.TrailerSpcCheckLimit = WMI_SVC_MAX_BUFFERED_EVENT_SIZE; 
	pWMI->WMIControlService.ServiceID = WMI_CONTROL_SVC;
	pWMI->WMIControlService.ServiceCtx = pWMI;
	HTC_RegisterService(pWmiConfig->HtcHandle, &pWMI->WMIControlService);
  90a5d7:	8a40      	l32i.n	a10, a4, 0
            
	/* NOTE: since RAM allocation is zero-initialized, there is nothing to do for the 
	 * direct event pool */
     
        /* register the WMI control service */
	pWMI->WMIControlService.ProcessRecvMsg = A_INDIR(wmi_svc_api._WMI_RecvMessageHandler);
  90a5d9:	9824      	s32i.n	a8, a2, 16
	pWMI->WMIControlService.ProcessSendBufferComplete = A_INDIR(wmi_svc_api._WMI_SendCompleteHandler);
  90a5db:	283290        	l32i	a8, a3, 0x240
         * in size.  Any WMI event that supplies a data buffer must insure that the space in the buffer
         * is at least this size. */
	pWMI->WMIControlService.TrailerSpcCheckLimit = WMI_SVC_MAX_BUFFERED_EVENT_SIZE; 
	pWMI->WMIControlService.ServiceID = WMI_CONTROL_SVC;
	pWMI->WMIControlService.ServiceCtx = pWMI;
	HTC_RegisterService(pWmiConfig->HtcHandle, &pWMI->WMIControlService);
  90a5de:	bc2b      	addi.n	a11, a2, 12
	/* NOTE: since RAM allocation is zero-initialized, there is nothing to do for the 
	 * direct event pool */
     
        /* register the WMI control service */
	pWMI->WMIControlService.ProcessRecvMsg = A_INDIR(wmi_svc_api._WMI_RecvMessageHandler);
	pWMI->WMIControlService.ProcessSendBufferComplete = A_INDIR(wmi_svc_api._WMI_SendCompleteHandler);
  90a5e0:	9825      	s32i.n	a8, a2, 20
	pWMI->WMIControlService.ProcessConnect = A_INDIR(wmi_svc_api._WMI_ServiceConnect);
  90a5e2:	283294        	l32i	a8, a3, 0x250
         * in size.  Any WMI event that supplies a data buffer must insure that the space in the buffer
         * is at least this size. */
	pWMI->WMIControlService.TrailerSpcCheckLimit = WMI_SVC_MAX_BUFFERED_EVENT_SIZE; 
	pWMI->WMIControlService.ServiceID = WMI_CONTROL_SVC;
	pWMI->WMIControlService.ServiceCtx = pWMI;
	HTC_RegisterService(pWmiConfig->HtcHandle, &pWMI->WMIControlService);
  90a5e5:	233280        	l32i	a3, a3, 0x200
	 * direct event pool */
     
        /* register the WMI control service */
	pWMI->WMIControlService.ProcessRecvMsg = A_INDIR(wmi_svc_api._WMI_RecvMessageHandler);
	pWMI->WMIControlService.ProcessSendBufferComplete = A_INDIR(wmi_svc_api._WMI_SendCompleteHandler);
	pWMI->WMIControlService.ProcessConnect = A_INDIR(wmi_svc_api._WMI_ServiceConnect);
  90a5e8:	9826      	s32i.n	a8, a2, 24
	pWMI->WMIControlService.MaxSvcMsgSize = WMI_SVC_MSG_SIZE + sizeof(WMI_CMD_HDR);
  90a5ea:	286a04        	movi	a8, 0x604
  90a5ed:	282510        	s16i	a8, a2, 32
        /* all buffers that are sent through the control endpoint are at least WMI_SVC_MAX_BUFFERED_EVENT_SIZE 
         * in size.  Any WMI event that supplies a data buffer must insure that the space in the buffer
         * is at least this size. */
	pWMI->WMIControlService.TrailerSpcCheckLimit = WMI_SVC_MAX_BUFFERED_EVENT_SIZE; 
  90a5f0:	280a64        	movi	a8, 100
  90a5f3:	282511        	s16i	a8, a2, 34
	pWMI->WMIControlService.ServiceID = WMI_CONTROL_SVC;
  90a5f6:	281a00        	movi	a8, 0x100
  90a5f9:	28250e        	s16i	a8, a2, 28
	pWMI->WMIControlService.ServiceCtx = pWMI;
  90a5fc:	9229      	s32i.n	a2, a2, 36
	HTC_RegisterService(pWmiConfig->HtcHandle, &pWMI->WMIControlService);
  90a5fe:	0b3000        	callx8	a3
    
	return pWMI;
}
  90a601:	d10f      	retw.n
	...

0090a604 <WMI_service_module_install>:

	adf_os_mem_free(pWMI);
}

void WMI_service_module_install(WMI_SVC_APIS *pTbl)
{
  90a604:	6c1004        	entry	a1, 32
	pTbl->_WMI_Init                     = _WMI_Init;
  90a607:	186a55        	l32r	a8, 8e4f5c <mUsbEPinHighBandSet+0x5bc>
  90a60a:	9820      	s32i.n	a8, a2, 0
	pTbl->_WMI_RegisterDispatchTable    = _WMI_RegisterDispatchTable;
  90a60c:	186a56        	l32r	a8, 8e4f64 <vbuf_module_install+0x4>
  90a60f:	9821      	s32i.n	a8, a2, 4
	pTbl->_WMI_AllocEvent               = _WMI_AllocEvent;
  90a611:	186a57        	l32r	a8, 8e4f70 <vbuf_module_install+0x10>
  90a614:	9822      	s32i.n	a8, a2, 8
	pTbl->_WMI_SendEvent                = _WMI_SendEvent;
  90a616:	186a58        	l32r	a8, 8e4f78 <vbuf_module_install+0x18>
  90a619:	9823      	s32i.n	a8, a2, 12
	pTbl->_WMI_SendCompleteHandler      = _WMI_SendCompleteHandler;
  90a61b:	186a59        	l32r	a8, 8e4f80 <vbuf_module_install+0x20>
  90a61e:	9825      	s32i.n	a8, a2, 20
	pTbl->_WMI_GetPendingEventsCount    = _WMI_GetPendingEventsCount;
  90a620:	186a5a        	l32r	a8, 8e4f88 <vbuf_module_install+0x28>
  90a623:	9824      	s32i.n	a8, a2, 16
	pTbl->_WMI_GetControlEp             = _WMI_GetControlEp;
  90a625:	186a5b        	l32r	a8, 8e4f94 <vbuf_module_install+0x34>
  90a628:	9826      	s32i.n	a8, a2, 24
	pTbl->_WMI_Shutdown                 = _WMI_Shutdown;
  90a62a:	186a5c        	l32r	a8, 8e4f9c <vbuf_module_install+0x3c>
  90a62d:	9827      	s32i.n	a8, a2, 28
	pTbl->_WMI_RecvMessageHandler       = WMIRecvMessageHandler;
  90a62f:	186a5d        	l32r	a8, 8e4fa4 <vbuf_module_install+0x44>
  90a632:	9828      	s32i.n	a8, a2, 32
	pTbl->_WMI_ServiceConnect           = WMIServiceConnect;
  90a634:	186a5e        	l32r	a8, 8e4fac <vbuf_module_install+0x4c>
  90a637:	9829      	s32i.n	a8, a2, 36
  90a639:	d10f      	retw.n
	...

0090a63c <io32_rmw>:
	iowrite8(addr, val);
}

static inline void io32_rmw(volatile uint32_t addr,
			    const uint32_t set, const uint32_t clr)
{
  90a63c:	6c1006        	entry	a1, 48
  90a63f:	0c0200        	memw
  90a642:	9210      	s32i.n	a2, a1, 0
	uint32_t val;

	val = ioread32(addr);
  90a644:	0c0200        	memw
  90a647:	8810      	l32i.n	a8, a1, 0
	val &= ~clr;
  90a649:	c79f      	movi.n	a9, -1
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90a64b:	0c0200        	memw
  90a64e:	8880      	l32i.n	a8, a8, 0
			    const uint32_t set, const uint32_t clr)
{
	uint32_t val;

	val = ioread32(addr);
	val &= ~clr;
  90a650:	049403        	xor	a4, a9, a4
  90a653:	084801        	and	a8, a4, a8
	val |= set;
	iowrite32(addr, val);
  90a656:	0c0200        	memw
  90a659:	8a10      	l32i.n	a10, a1, 0
{
	uint32_t val;

	val = ioread32(addr);
	val &= ~clr;
	val |= set;
  90a65b:	038302        	or	a3, a8, a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90a65e:	0c0200        	memw
  90a661:	93a0      	s32i.n	a3, a10, 0
  90a663:	d10f      	retw.n
  90a665:	000000        	ill

0090a668 <_fw_restore_dma_fifo>:
	/* deassert eth_pll bypass mode and trigger update bit */
	io32_clr(MAGPIE_REG_ETH_PLL_BYPASS_ADDR, BIT4 | BIT0);
}

static void _fw_restore_dma_fifo(void)
{
  90a668:	6c1004        	entry	a1, 32
	io32_clr(0x5601C, BIT18);
  90a66b:	1a6a5f        	l32r	a10, 8e4fe8 <vbuf_module_install+0x88>
  90a66e:	1c6a24        	l32r	a12, 8e4f00 <mUsbEPinHighBandSet+0x560>
  90a671:	c0b0      	movi.n	a11, 0
  90a673:	5bfff2        	call8	90a63c <io32_rmw>
    
	/* reset pcie_rc shift */
	io32_clr(0x50010, BIT10 | BIT8 | BIT7);
  90a676:	126943        	l32r	a2, 8e4b84 <mUsbEPinHighBandSet+0x1e4>
  90a679:	2b0a00        	movi	a11, 0
  90a67c:	022a02        	or	a10, a2, a2
  90a67f:	2c5a80        	movi	a12, 0x580
  90a682:	5bffee        	call8	90a63c <io32_rmw>
	A_DELAY_USECS(1);
  90a685:	136915        	l32r	a3, 8e4adc <mUsbEPinHighBandSet+0x13c>
  90a688:	c0a1      	movi.n	a10, 1
  90a68a:	28323b        	l32i	a8, a3, 236
  90a68d:	0b8000        	callx8	a8
	io32_set(0x50010, BIT10 | BIT8 | BIT7);
  90a690:	da20      	mov.n	a10, a2
  90a692:	2b5a80        	movi	a11, 0x580
  90a695:	c0c0      	movi.n	a12, 0
  90a697:	5bffe9        	call8	90a63c <io32_rmw>

	/* reset pci_rc phy */
	io32_set(MAGPIE_REG_RST_RESET_ADDR,
  90a69a:	da20      	mov.n	a10, a2
  90a69c:	2b5ac0        	movi	a11, 0x5c0
  90a69f:	c0c0      	movi.n	a12, 0
  90a6a1:	5bffe6        	call8	90a63c <io32_rmw>
		 PCI_RC_PHY_SHIFT_RESET_BIT
		 | PCI_RC_PLL_RESET_BIT | PCI_RC_PHY_RESET_BIT
		 | PCI_RC_RESET_BIT);
	A_DELAY_USECS(20);
  90a6a4:	22323b        	l32i	a2, a3, 236
  90a6a7:	c1a4      	movi.n	a10, 20
  90a6a9:	0b2000        	callx8	a2

	// enable dma swap function
	MAGPIE_REG_USB_RX0_SWAP_DATA = 0x1;
  90a6ac:	126955        	l32r	a2, 8e4c00 <mUsbEPinHighBandSet+0x260>
  90a6af:	c081      	movi.n	a8, 1
  90a6b1:	0c0200        	memw
  90a6b4:	9820      	s32i.n	a8, a2, 0
	MAGPIE_REG_USB_TX0_SWAP_DATA = 0x1;
  90a6b6:	126956        	l32r	a2, 8e4c10 <mUsbEPinHighBandSet+0x270>
  90a6b9:	0c0200        	memw
  90a6bc:	9820      	s32i.n	a8, a2, 0
	MAGPIE_REG_USB_RX1_SWAP_DATA = 0x1;
  90a6be:	126957        	l32r	a2, 8e4c1c <mUsbEPinHighBandSet+0x27c>
  90a6c1:	0c0200        	memw
  90a6c4:	9820      	s32i.n	a8, a2, 0
	MAGPIE_REG_USB_RX2_SWAP_DATA = 0x1;
  90a6c6:	126958        	l32r	a2, 8e4c28 <mUsbEPinHighBandSet+0x288>
  90a6c9:	0c0200        	memw
  90a6cc:	9820      	s32i.n	a8, a2, 0
  90a6ce:	d10f      	retw.n

0090a6d0 <_fw_reset_dma_fifo>:
	A_PRINTF("0x4088  0x%x ......\n", ioread32(0x10ff4088));
	_fw_reset_dma_fifo();
}

static void _fw_reset_dma_fifo()
{
  90a6d0:	6c1012        	entry	a1, 144
  90a6d3:	126a60        	l32r	a2, 8e5054 <vdesc_module_install+0x44>
{
	uint8_t val;

	val = ioread8(addr);
	val &= ~clr;
	val |= set;
  90a6d6:	c130      	movi.n	a3, 16

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  90a6d8:	242000        	l8ui	a4, a2, 0
	io8_set(0x100ae, 0x10);
	io8_set(0x100af, 0x10);
	A_PRINTF("_fw_reset_dma_fifo\n");
  90a6db:	1a6a62        	l32r	a10, 8e5064 <vdesc_module_install+0x54>
  90a6de:	040447        	extui	a4, a4, 0, 8
{
	uint8_t val;

	val = ioread8(addr);
	val &= ~clr;
	val |= set;
  90a6e1:	034402        	or	a4, a4, a3
  90a6e4:	040447        	extui	a4, a4, 0, 8
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  90a6e7:	0c0200        	memw
  90a6ea:	242400        	s8i	a4, a2, 0
  90a6ed:	126a61        	l32r	a2, 8e5074 <vdesc_module_install+0x64>

	// disable ep3 int enable, so that resume back won't send wdt magic pattern out!!!
	mUSB_STATUS_IN_INT_DISABLE();
  90a6f0:	250ac0        	movi	a5, 192

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  90a6f3:	242000        	l8ui	a4, a2, 0
  90a6f6:	040447        	extui	a4, a4, 0, 8
{
	uint8_t val;

	val = ioread8(addr);
	val &= ~clr;
	val |= set;
  90a6f9:	034302        	or	a3, a4, a3
  90a6fc:	030347        	extui	a3, a3, 0, 8
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  90a6ff:	0c0200        	memw
  90a702:	232400        	s8i	a3, a2, 0

static void _fw_reset_dma_fifo()
{
	io8_set(0x100ae, 0x10);
	io8_set(0x100af, 0x10);
	A_PRINTF("_fw_reset_dma_fifo\n");
  90a705:	126915        	l32r	a2, 8e4b5c <mUsbEPinHighBandSet+0x1bc>
  90a708:	232212        	l32i	a3, a2, 72
  90a70b:	0b3000        	callx8	a3

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  90a70e:	13695c        	l32r	a3, 8e4c80 <mUsbEPinHighBandSet+0x2e0>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90a711:	166a63        	l32r	a6, 8e50a0 <vdesc_module_install+0x90>

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  90a714:	243000        	l8ui	a4, a3, 0
	mUSB_STATUS_IN_INT_DISABLE();

	/* update magic pattern to indicate this is a suspend */
	iowrite32(WATCH_DOG_MAGIC_PATTERN_ADDR, SUS_MAGIC_PATTERN);

	A_PRINTF("org 0x4048  0x%x ......\n", ioread32(0x10ff4048));
  90a717:	1a6a64        	l32r	a10, 8e50a8 <vdesc_module_install+0x98>
  90a71a:	040447        	extui	a4, a4, 0, 8
	io8_set(0x100ae, 0x10);
	io8_set(0x100af, 0x10);
	A_PRINTF("_fw_reset_dma_fifo\n");

	// disable ep3 int enable, so that resume back won't send wdt magic pattern out!!!
	mUSB_STATUS_IN_INT_DISABLE();
  90a71d:	054402        	or	a4, a4, a5
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  90a720:	0c0200        	memw
  90a723:	243400        	s8i	a4, a3, 0
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90a726:	14691e        	l32r	a4, 8e4ba0 <mUsbEPinHighBandSet+0x200>
  90a729:	136919        	l32r	a3, 8e4b90 <mUsbEPinHighBandSet+0x1f0>
  90a72c:	0c0200        	memw
  90a72f:	9430      	s32i.n	a4, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90a731:	0c0200        	memw
  90a734:	8b60      	l32i.n	a11, a6, 0

	/* update magic pattern to indicate this is a suspend */
	iowrite32(WATCH_DOG_MAGIC_PATTERN_ADDR, SUS_MAGIC_PATTERN);

	A_PRINTF("org 0x4048  0x%x ......\n", ioread32(0x10ff4048));
  90a736:	232212        	l32i	a3, a2, 72
  90a739:	0b3000        	callx8	a3
  90a73c:	156a65        	l32r	a5, 8e50d0 <vdesc_module_install+0xc0>
	A_PRINTF("org 0x404C  0x%x ......\n", ioread32(0x10ff404C));
  90a73f:	232212        	l32i	a3, a2, 72
  90a742:	0c0200        	memw
  90a745:	8b50      	l32i.n	a11, a5, 0
  90a747:	1a6a66        	l32r	a10, 8e50e0 <vdesc_module_install+0xd0>
  90a74a:	0b3000        	callx8	a3
  90a74d:	146a67        	l32r	a4, 8e50ec <vdesc_module_install+0xdc>
	A_PRINTF("org 0x4088  0x%x ......\n", ioread32(0x10ff4088));
  90a750:	232212        	l32i	a3, a2, 72
  90a753:	0c0200        	memw
  90a756:	8b40      	l32i.n	a11, a4, 0
  90a758:	1a6a68        	l32r	a10, 8e50f8 <vdesc_module_install+0xe8>
  90a75b:	0b3000        	callx8	a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90a75e:	136a69        	l32r	a3, 8e5104 <vdesc_module_install+0xf4>

	/* 1010.1010.1010.0110.1010 for UB94 */
	iowrite32(0x10ff4088, 0xaaa6a);
	iowrite32(0x10ff404C, 0x0);

	A_DELAY_USECS(1000);
  90a761:	28223b        	l32i	a8, a2, 236
  90a764:	0c0200        	memw
  90a767:	234600        	s32i	a3, a4, 0
  90a76a:	230a00        	movi	a3, 0
  90a76d:	0c0200        	memw
  90a770:	235600        	s32i	a3, a5, 0
  90a773:	2a3ae8        	movi	a10, 0x3e8
  90a776:	0b8000        	callx8	a8
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90a779:	0c0200        	memw
  90a77c:	2b6200        	l32i	a11, a6, 0
	A_PRINTF("0x4048  0x%x ......\n", ioread32(0x10ff4048));
  90a77f:	1a6a6a        	l32r	a10, 8e5128 <vdesc_module_install+0x118>
  90a782:	262212        	l32i	a6, a2, 72
  90a785:	0b6000        	callx8	a6
  90a788:	0c0200        	memw
  90a78b:	8b50      	l32i.n	a11, a5, 0
	A_PRINTF("0x404C  0x%x ......\n", ioread32(0x10ff404C));
  90a78d:	1a6a6b        	l32r	a10, 8e513c <vdesc_module_install+0x12c>
  90a790:	252212        	l32i	a5, a2, 72
  90a793:	0b5000        	callx8	a5
  90a796:	0c0200        	memw
  90a799:	8b40      	l32i.n	a11, a4, 0
	A_PRINTF("0x4088  0x%x ......\n", ioread32(0x10ff4088));
  90a79b:	1a6a6c        	l32r	a10, 8e514c <vdesc_module_install+0x13c>
  90a79e:	242212        	l32i	a4, a2, 72
  90a7a1:	0b4000        	callx8	a4
	volatile uint32_t default_data[9];
	uint32_t i=0;

	if(1)
	{
		A_PRINTF("turn_off_merlin_ep_start ......\n");
  90a7a4:	1a6a6d        	l32r	a10, 8e5158 <vdesc_module_install+0x148>
  90a7a7:	242212        	l32i	a4, a2, 72
  90a7aa:	0b4000        	callx8	a4
		A_DELAY_USECS(measure_time);
  90a7ad:	24223b        	l32i	a4, a2, 236
  90a7b0:	da30      	mov.n	a10, a3
  90a7b2:	0b4000        	callx8	a4
		default_data[0] = 0x9248fd00;
  90a7b5:	146a6e        	l32r	a4, 8e5170 <vdesc_module_install+0x160>
  90a7b8:	0c0200        	memw
  90a7bb:	241612        	s32i	a4, a1, 72
		default_data[1] = 0x24924924;
  90a7be:	146a6f        	l32r	a4, 8e517c <vdesc_module_install+0x16c>
  90a7c1:	0c0200        	memw
  90a7c4:	241613        	s32i	a4, a1, 76
		default_data[2] = 0xa8000019;
  90a7c7:	146a70        	l32r	a4, 8e5188 <vdesc_module_install+0x178>
  90a7ca:	0c0200        	memw
  90a7cd:	241614        	s32i	a4, a1, 80
		default_data[3] = 0x17160820;
  90a7d0:	146a71        	l32r	a4, 8e5194 <vdesc_module_install+0x184>
  90a7d3:	0c0200        	memw
  90a7d6:	241615        	s32i	a4, a1, 84
		default_data[4] = 0x25980560;
  90a7d9:	146a72        	l32r	a4, 8e51a4 <vdesc_module_install+0x194>
  90a7dc:	0c0200        	memw
  90a7df:	241616        	s32i	a4, a1, 88
		default_data[5] = 0xc1c00000;
  90a7e2:	146a73        	l32r	a4, 8e51b0 <vdesc_module_install+0x1a0>
  90a7e5:	0c0200        	memw
  90a7e8:	241617        	s32i	a4, a1, 92
		default_data[6] = 0x1aaabe40;
  90a7eb:	146a74        	l32r	a4, 8e51bc <vdesc_module_install+0x1ac>
  90a7ee:	0c0200        	memw
  90a7f1:	241618        	s32i	a4, a1, 96
		default_data[7] = 0xbe105554;
  90a7f4:	146a75        	l32r	a4, 8e51c8 <vdesc_module_install+0x1b8>
  90a7f7:	0c0200        	memw
  90a7fa:	241619        	s32i	a4, a1, 100
		default_data[8] = 0x00043007;
  90a7fd:	146a76        	l32r	a4, 8e51d8 <vdesc_module_install+0x1c8>
  90a800:	0c0200        	memw
  90a803:	24161a        	s32i	a4, a1, 104
        
		for(i=0; i<9; i++)
		{
			A_DELAY_USECS(10);
  90a806:	24223b        	l32i	a4, a2, 236
  90a809:	c0aa      	movi.n	a10, 10
  90a80b:	0b4000        	callx8	a4
        
			iowrite32(0x10ff4040, default_data[i]);
  90a80e:	01340a        	addx4	a4, a3, a1
  90a811:	0c0200        	memw
  90a814:	254212        	l32i	a5, a4, 72
  90a817:	146a77        	l32r	a4, 8e51f4 <vdesc_module_install+0x1e4>
		default_data[5] = 0xc1c00000;
		default_data[6] = 0x1aaabe40;
		default_data[7] = 0xbe105554;
		default_data[8] = 0x00043007;
        
		for(i=0; i<9; i++)
  90a81a:	b133      	addi.n	a3, a3, 1
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90a81c:	0c0200        	memw
  90a81f:	254600        	s32i	a5, a4, 0
  90a822:	240a09        	movi	a4, 9
  90a825:	7439dd        	bne	a3, a4, 90a806 <_fw_reset_dma_fifo+0x136>
		{
			A_DELAY_USECS(10);
        
			iowrite32(0x10ff4040, default_data[i]);
		}
		A_DELAY_USECS(10);
  90a828:	23223b        	l32i	a3, a2, 236
  90a82b:	2a0a0a        	movi	a10, 10
  90a82e:	0b3000        	callx8	a3
  90a831:	136a78        	l32r	a3, 8e5214 <vdesc_module_install+0x204>
  90a834:	c041      	movi.n	a4, 1
  90a836:	0c0200        	memw
  90a839:	9430      	s32i.n	a4, a3, 0
		iowrite32(0x10ff4044, BIT0);
		A_PRINTF("turn_off_merlin_ep_end ......\n");
  90a83b:	1a6a79        	l32r	a10, 8e5220 <vdesc_module_install+0x210>
  90a83e:	232212        	l32i	a3, a2, 72
  90a841:	0b3000        	callx8	a3
	A_PRINTF("0x4088  0x%x ......\n", ioread32(0x10ff4088));
         
	// turn off merlin
	turn_off_merlin();
	// pcie ep
	A_PRINTF("turn_off_magpie_ep_start ......\n");
  90a844:	1a6a7a        	l32r	a10, 8e522c <vdesc_module_install+0x21c>
  90a847:	232212        	l32i	a3, a2, 72
  90a84a:	0b3000        	callx8	a3
	A_DELAY_USECS(measure_time);
  90a84d:	22223b        	l32i	a2, a2, 236
  90a850:	c0a0      	movi.n	a10, 0
  90a852:	0b2000        	callx8	a2
	io32_set(0x40040, BIT0 | BIT1);
  90a855:	1a6a7b        	l32r	a10, 8e5244 <vdesc_module_install+0x234>
  90a858:	c0b3      	movi.n	a11, 3
  90a85a:	2c0a00        	movi	a12, 0
  90a85d:	5bff77        	call8	90a63c <io32_rmw>
{

	volatile uint32_t default_data[9];
	uint32_t i=0;

	default_data[0] = 0x9248fd00;
  90a860:	126a6e        	l32r	a2, 8e5218 <vdesc_module_install+0x208>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90a863:	146a7c        	l32r	a4, 8e5254 <vdesc_module_install+0x244>
  90a866:	0c0200        	memw
  90a869:	9219      	s32i.n	a2, a1, 36
	default_data[1] = 0x24924924;
  90a86b:	126a6f        	l32r	a2, 8e5228 <vdesc_module_install+0x218>
	default_data[5] = 0xc1c00000;
	default_data[6] = 0x1aaabe40;
	default_data[7] = 0xbe105554;
	default_data[8] = 0x00043007;

	for(i=0; i<9; i++)
  90a86e:	c030      	movi.n	a3, 0

	volatile uint32_t default_data[9];
	uint32_t i=0;

	default_data[0] = 0x9248fd00;
	default_data[1] = 0x24924924;
  90a870:	0c0200        	memw
  90a873:	921a      	s32i.n	a2, a1, 40
	default_data[2] = 0xa8000019;
  90a875:	126a70        	l32r	a2, 8e5238 <vdesc_module_install+0x228>
  90a878:	0c0200        	memw
  90a87b:	921b      	s32i.n	a2, a1, 44
	default_data[3] = 0x17160820;
  90a87d:	126a71        	l32r	a2, 8e5244 <vdesc_module_install+0x234>
  90a880:	0c0200        	memw
  90a883:	921c      	s32i.n	a2, a1, 48
	default_data[4] = 0x25980560;
  90a885:	126a72        	l32r	a2, 8e5250 <vdesc_module_install+0x240>
  90a888:	0c0200        	memw
  90a88b:	921d      	s32i.n	a2, a1, 52
	default_data[5] = 0xc1c00000;
  90a88d:	126a73        	l32r	a2, 8e525c <vdesc_module_install+0x24c>
  90a890:	0c0200        	memw
  90a893:	22160e        	s32i	a2, a1, 56
	default_data[6] = 0x1aaabe40;
  90a896:	126a74        	l32r	a2, 8e5268 <vdesc_module_install+0x258>
  90a899:	0c0200        	memw
  90a89c:	22160f        	s32i	a2, a1, 60
	default_data[7] = 0xbe105554;
  90a89f:	126a75        	l32r	a2, 8e5274 <vdesc_module_install+0x264>
  90a8a2:	0c0200        	memw
  90a8a5:	221610        	s32i	a2, a1, 64
	default_data[8] = 0x00043007;
  90a8a8:	126a76        	l32r	a2, 8e5280 <vdesc_module_install+0x270>
  90a8ab:	0c0200        	memw
  90a8ae:	221611        	s32i	a2, a1, 68
  90a8b1:	0c0200        	memw
  90a8b4:	8240      	l32i.n	a2, a4, 0
	{
		// check for the done bit to be set 

		while (1)
		{
			if (ioread32(0x40028) & BIT31)
  90a8b6:	672ff7        	bgez	a2, 90a8b1 <_fw_reset_dma_fifo+0x1e1>
				break;
		}
        
		A_DELAY_USECS(1);
  90a8b9:	126915        	l32r	a2, 8e4d10 <mUsbEPinHighBandSet+0x370>
  90a8bc:	c0a1      	movi.n	a10, 1
  90a8be:	25223b        	l32i	a5, a2, 236
  90a8c1:	0b5000        	callx8	a5
    
		iowrite32(0x40024, default_data[i]);
  90a8c4:	01350a        	addx4	a5, a3, a1
  90a8c7:	0c0200        	memw
  90a8ca:	8659      	l32i.n	a6, a5, 36
  90a8cc:	156a7d        	l32r	a5, 8e52c0 <vdesc_module_install+0x2b0>
	default_data[5] = 0xc1c00000;
	default_data[6] = 0x1aaabe40;
	default_data[7] = 0xbe105554;
	default_data[8] = 0x00043007;

	for(i=0; i<9; i++)
  90a8cf:	b133      	addi.n	a3, a3, 1
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90a8d1:	0c0200        	memw
  90a8d4:	9650      	s32i.n	a6, a5, 0
  90a8d6:	c059      	movi.n	a5, 9
  90a8d8:	7539d5        	bne	a3, a5, 90a8b1 <_fw_reset_dma_fifo+0x1e1>
	// pcie ep
	A_PRINTF("turn_off_magpie_ep_start ......\n");
	A_DELAY_USECS(measure_time);
	io32_set(0x40040, BIT0 | BIT1);
	turn_off_phy();
	io32_clr(0x40040, BIT0 | BIT1);
  90a8db:	136a7b        	l32r	a3, 8e52c8 <vdesc_module_install+0x2b8>
  90a8de:	c051      	movi.n	a5, 1
  90a8e0:	c0b0      	movi.n	a11, 0
  90a8e2:	2c0a03        	movi	a12, 3
  90a8e5:	033a02        	or	a10, a3, a3
  90a8e8:	0c0200        	memw
  90a8eb:	9540      	s32i.n	a5, a4, 0
  90a8ed:	5bff53        	call8	90a63c <io32_rmw>
	A_PRINTF("turn_off_magpie_ep_end ......\n");
  90a8f0:	1a6a7e        	l32r	a10, 8e52e8 <vdesc_module_install+0x2d8>
  90a8f3:	262212        	l32i	a6, a2, 72
  90a8f6:	0b6000        	callx8	a6

	// pcie rc 
	A_PRINTF("turn_off_magpie_rc_start ......\n");
  90a8f9:	1a6a7f        	l32r	a10, 8e52f8 <vdesc_module_install+0x2e8>
  90a8fc:	262212        	l32i	a6, a2, 72
  90a8ff:	0b6000        	callx8	a6
	A_DELAY_USECS(measure_time);
  90a902:	26223b        	l32i	a6, a2, 236
  90a905:	c0a0      	movi.n	a10, 0
  90a907:	0b6000        	callx8	a6
	io32_clr(0x40040, BIT0);
  90a90a:	da30      	mov.n	a10, a3
  90a90c:	2b0a00        	movi	a11, 0
  90a90f:	055c02        	or	a12, a5, a5
  90a912:	5bff4a        	call8	90a63c <io32_rmw>
{
    
	volatile uint32_t default_data[9];
	uint32_t i=0;
    
	A_PRINTF("turn_off_phy_rc\n");
  90a915:	1a6a80        	l32r	a10, 8e5318 <vdesc_module_install+0x308>
  90a918:	222212        	l32i	a2, a2, 72
	default_data[5] = 0xc1c00000;
	default_data[6] = 0x1aaabe40;
	default_data[7] = 0xbe105554;
	default_data[8] = 0x00043007;
        
	for(i=0; i<9; i++)
  90a91b:	230a00        	movi	a3, 0
{
    
	volatile uint32_t default_data[9];
	uint32_t i=0;
    
	A_PRINTF("turn_off_phy_rc\n");
  90a91e:	0b2000        	callx8	a2
    
	default_data[0] = 0x9248fd00;
  90a921:	126a6e        	l32r	a2, 8e52dc <vdesc_module_install+0x2cc>
  90a924:	0c0200        	memw
  90a927:	9210      	s32i.n	a2, a1, 0
	default_data[1] = 0x24924924;
  90a929:	126a6f        	l32r	a2, 8e52e8 <vdesc_module_install+0x2d8>
  90a92c:	0c0200        	memw
  90a92f:	9211      	s32i.n	a2, a1, 4
	default_data[2] = 0xa8000019;
  90a931:	126a70        	l32r	a2, 8e52f4 <vdesc_module_install+0x2e4>
  90a934:	0c0200        	memw
  90a937:	9212      	s32i.n	a2, a1, 8
	default_data[3] = 0x13160820;//PwdClk1MHz=0
  90a939:	126a81        	l32r	a2, 8e5340 <vdesc_module_install+0x330>
  90a93c:	0c0200        	memw
  90a93f:	9213      	s32i.n	a2, a1, 12
	default_data[4] = 0x25980560;
  90a941:	126a72        	l32r	a2, 8e530c <vdesc_module_install+0x2fc>
  90a944:	0c0200        	memw
  90a947:	9214      	s32i.n	a2, a1, 16
	default_data[5] = 0xc1c00000;
  90a949:	126a73        	l32r	a2, 8e5318 <vdesc_module_install+0x308>
  90a94c:	0c0200        	memw
  90a94f:	9215      	s32i.n	a2, a1, 20
	default_data[6] = 0x1aaabe40;
  90a951:	126a74        	l32r	a2, 8e5324 <vdesc_module_install+0x314>
  90a954:	0c0200        	memw
  90a957:	9216      	s32i.n	a2, a1, 24
	default_data[7] = 0xbe105554;
  90a959:	126a75        	l32r	a2, 8e5330 <vdesc_module_install+0x320>
  90a95c:	0c0200        	memw
  90a95f:	9217      	s32i.n	a2, a1, 28
	default_data[8] = 0x00043007;
  90a961:	126a76        	l32r	a2, 8e533c <vdesc_module_install+0x32c>
  90a964:	0c0200        	memw
  90a967:	9218      	s32i.n	a2, a1, 32
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90a969:	0c0200        	memw
  90a96c:	8240      	l32i.n	a2, a4, 0
	{
		// check for the done bit to be set 
     
		while (1)
		{
			if (ioread32(0x40028) & BIT31)
  90a96e:	672ff7        	bgez	a2, 90a969 <_fw_reset_dma_fifo+0x299>
				break;
		}

		A_DELAY_USECS(1);
  90a971:	126915        	l32r	a2, 8e4dc8 <mUsbEPinHighBandSet+0x428>
  90a974:	2a0a01        	movi	a10, 1
  90a977:	25223b        	l32i	a5, a2, 236
  90a97a:	0b5000        	callx8	a5

		iowrite32(0x40024, default_data[i]);
  90a97d:	01350a        	addx4	a5, a3, a1
  90a980:	0c0200        	memw
  90a983:	8650      	l32i.n	a6, a5, 0
  90a985:	156a7d        	l32r	a5, 8e537c <vdesc_module_install+0x36c>
	default_data[5] = 0xc1c00000;
	default_data[6] = 0x1aaabe40;
	default_data[7] = 0xbe105554;
	default_data[8] = 0x00043007;
        
	for(i=0; i<9; i++)
  90a988:	b133      	addi.n	a3, a3, 1
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90a98a:	0c0200        	memw
  90a98d:	9650      	s32i.n	a6, a5, 0
  90a98f:	c059      	movi.n	a5, 9
  90a991:	7539d4        	bne	a3, a5, 90a969 <_fw_reset_dma_fifo+0x299>
	// pcie rc 
	A_PRINTF("turn_off_magpie_rc_start ......\n");
	A_DELAY_USECS(measure_time);
	io32_clr(0x40040, BIT0);
	turn_off_phy_rc();
	A_PRINTF("turn_off_magpie_rc_end ......down\n");
  90a994:	232212        	l32i	a3, a2, 72
  90a997:	c061      	movi.n	a6, 1
  90a999:	1a6a82        	l32r	a10, 8e53a4 <vdesc_module_install+0x394>
  90a99c:	0c0200        	memw
  90a99f:	9640      	s32i.n	a6, a4, 0
  90a9a1:	0b3000        	callx8	a3
	A_DELAY_USECS(measure_time);
  90a9a4:	23223b        	l32i	a3, a2, 236
  90a9a7:	c0a0      	movi.n	a10, 0
  90a9a9:	0b3000        	callx8	a3
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90a9ac:	136a83        	l32r	a3, 8e53b8 <vdesc_module_install+0x3a8>

	A_PRINTF("0x4001C  %p ......\n", ioread32(0x4001c));
  90a9af:	1a6a84        	l32r	a10, 8e53c0 <vdesc_module_install+0x3b0>
  90a9b2:	0c0200        	memw
  90a9b5:	8b30      	l32i.n	a11, a3, 0
  90a9b7:	232212        	l32i	a3, a2, 72
  90a9ba:	0b3000        	callx8	a3
  90a9bd:	136a7b        	l32r	a3, 8e53ac <vdesc_module_install+0x39c>
	A_PRINTF("0x40040  %p ......\n", ioread32(0x40040));
  90a9c0:	1a6a85        	l32r	a10, 8e53d4 <vdesc_module_install+0x3c4>
  90a9c3:	0c0200        	memw
  90a9c6:	8b30      	l32i.n	a11, a3, 0
  90a9c8:	232212        	l32i	a3, a2, 72
  90a9cb:	0b3000        	callx8	a3
  90a9ce:	136a5f        	l32r	a3, 8e534c <vdesc_module_install+0x33c>
    
	/* turn off pcie_pll - power down (bit16) */
	A_PRINTF(" before pwd PCIE PLL CFG:0x5601C: 0x%08x\n",
  90a9d1:	242212        	l32i	a4, a2, 72
  90a9d4:	0c0200        	memw
  90a9d7:	2b3200        	l32i	a11, a3, 0
  90a9da:	1a6a86        	l32r	a10, 8e53f4 <vdesc_module_install+0x3e4>
  90a9dd:	0b4000        	callx8	a4
		 ioread32(0x5601C));
	io32_set(0x5601C, BIT18);
  90a9e0:	1b6a24        	l32r	a11, 8e5270 <vdesc_module_install+0x260>
  90a9e3:	033a02        	or	a10, a3, a3
  90a9e6:	2c0a00        	movi	a12, 0
  90a9e9:	5bff14        	call8	90a63c <io32_rmw>
  90a9ec:	0c0200        	memw
  90a9ef:	8b30      	l32i.n	a11, a3, 0
	A_PRINTF(" after pwd PCIE PLL CFG:0x5601C:  0x%08x\n",
  90a9f1:	1a6a87        	l32r	a10, 8e5410 <vdesc_module_install+0x400>
  90a9f4:	232212        	l32i	a3, a2, 72
  90a9f7:	0b3000        	callx8	a3
		 ioread32(0x5601C));

	/* set everything to reset state?, requested by Oligo */
	io32_set(0x50010, BIT13 | BIT12
  90a9fa:	146943        	l32r	a4, 8e4f08 <mUsbEPinHighBandSet+0x568>
  90a9fd:	1b6a88        	l32r	a11, 8e5420 <vdesc_module_install+0x410>
  90aa00:	2c0a00        	movi	a12, 0
  90aa03:	da40      	mov.n	a10, a4
  90aa05:	5bff0d        	call8	90a63c <io32_rmw>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90aa08:	156a89        	l32r	a5, 8e542c <vdesc_module_install+0x41c>
  90aa0b:	230a00        	movi	a3, 0
  90aa0e:	0c0200        	memw
  90aa11:	9350      	s32i.n	a3, a5, 0
		 | BIT11 | BIT9 | BIT7 | BIT6);

	iowrite32(0x5C000, 0);

	A_DELAY_USECS(10);
  90aa13:	25223b        	l32i	a5, a2, 236
  90aa16:	2a0a0a        	movi	a10, 10
  90aa19:	0b5000        	callx8	a5
  90aa1c:	156952        	l32r	a5, 8e4f64 <vbuf_module_install+0x4>

	/* reset usb DMA controller */
	iowrite32_usb(ZM_SOC_USB_DMA_RESET_OFFSET, 0x0);

	io32_set(0x50010, BIT4);
  90aa1f:	c1b0      	movi.n	a11, 16
  90aa21:	dc30      	mov.n	a12, a3
  90aa23:	da40      	mov.n	a10, a4
  90aa25:	0c0200        	memw
  90aa28:	9350      	s32i.n	a3, a5, 0
  90aa2a:	5bff04        	call8	90a63c <io32_rmw>
	A_DELAY_USECS(5);
  90aa2d:	22223b        	l32i	a2, a2, 236
  90aa30:	c0a5      	movi.n	a10, 5
  90aa32:	0b2000        	callx8	a2
	io32_clr(0x50010, BIT4);
  90aa35:	da40      	mov.n	a10, a4
  90aa37:	033b02        	or	a11, a3, a3
  90aa3a:	2c0a10        	movi	a12, 16
  90aa3d:	5bfeff        	call8	90a63c <io32_rmw>
  90aa40:	0c0200        	memw
  90aa43:	9650      	s32i.n	a6, a5, 0
  90aa45:	d10f      	retw.n
	...

0090aa48 <_fw_usb_suspend_reboot>:

BOOLEAN bEepromExist = TRUE;
BOOLEAN bJumptoFlash = FALSE;

void _fw_usb_suspend_reboot()
{
  90aa48:	6c1004        	entry	a1, 32
	/* reset usb/wlan dma */
	_fw_reset_dma_fifo();
  90aa4b:	5bff21        	call8	90a6d0 <_fw_reset_dma_fifo>

	/* restore gpio setting and usb/wlan dma state */
	_fw_restore_dma_fifo();
  90aa4e:	5bff06        	call8	90a668 <_fw_restore_dma_fifo>
  90aa51:	12694a        	l32r	a2, 8e4f7c <vbuf_module_install+0x1c>
  90aa54:	c181      	movi.n	a8, 17
  90aa56:	0c0200        	memw
  90aa59:	282600        	s32i	a8, a2, 0

	/* set clock to bypass mode - 40Mhz from XTAL */
	iowrite32(MAGPIE_REG_CPU_PLL_BYPASS_ADDR, BIT0 | BIT4);

	A_DELAY_USECS(100); /* wait for stable */
  90aa5c:	126915        	l32r	a2, 8e4eb0 <mUsbEPinHighBandSet+0x510>
  90aa5f:	2a0a64        	movi	a10, 100
  90aa62:	28223b        	l32i	a8, a2, 236
  90aa65:	0b8000        	callx8	a8
  90aa68:	196953        	l32r	a9, 8e4fb4 <vbuf_module_install+0x54>
  90aa6b:	18694b        	l32r	a8, 8e4f98 <vbuf_module_install+0x38>

	iowrite32(MAGPIE_REG_CPU_PLL_ADDR, BIT16);

	A_DELAY_USECS(100); /* wait for stable */
  90aa6e:	2a0a64        	movi	a10, 100
  90aa71:	0c0200        	memw
  90aa74:	9980      	s32i.n	a9, a8, 0
  90aa76:	28223b        	l32i	a8, a2, 236
  90aa79:	0b8000        	callx8	a8
	A_UART_HWINIT((40*1000*1000), 19200);
  90aa7c:	28221a        	l32i	a8, a2, 104
  90aa7f:	1a6916        	l32r	a10, 8e4ed8 <mUsbEPinHighBandSet+0x538>
  90aa82:	1b69d4        	l32r	a11, 8e51d4 <vdesc_module_install+0x1c4>
  90aa85:	0b8000        	callx8	a8

	A_CLOCK_INIT(40);
  90aa88:	282238        	l32i	a8, a2, 224
  90aa8b:	c2a8      	movi.n	a10, 40
  90aa8d:	0b8000        	callx8	a8

	if (!bEepromExist) { /* jump to flash boot (eeprom data in flash) */
  90aa90:	186918        	l32r	a8, 8e4ef0 <mUsbEPinHighBandSet+0x550>
  90aa93:	288100        	l16ui	a8, a8, 0
  90aa96:	cd86      	bnez.n	a8, 90aab0 <_fw_usb_suspend_reboot+0x68>
		bJumptoFlash = TRUE;
  90aa98:	186917        	l32r	a8, 8e4ef4 <mUsbEPinHighBandSet+0x554>
  90aa9b:	c091      	movi.n	a9, 1
		A_PRINTF("Jump to Flash BOOT\n");
  90aa9d:	222212        	l32i	a2, a2, 72
  90aaa0:	1a6a8a        	l32r	a10, 8e54c8 <vdesc_module_install+0x4b8>
	A_UART_HWINIT((40*1000*1000), 19200);

	A_CLOCK_INIT(40);

	if (!bEepromExist) { /* jump to flash boot (eeprom data in flash) */
		bJumptoFlash = TRUE;
  90aaa3:	298500        	s16i	a9, a8, 0
		A_PRINTF("Jump to Flash BOOT\n");
  90aaa6:	0b2000        	callx8	a2
		app_start();
  90aaa9:	5bed55        	call8	906000 <app_start>
  90aaac:	d10f      	retw.n
  90aaae:	000028        	mull	a0, a0, a0
	} else {
		A_PRINTF("receive the suspend command...\n");
  90aab1:	22121a        	l32i	a2, a1, 104
  90aab4:	6a8b0b        	blti	a8, 16, 90aac3 <_fw_usb_suspend_reboot+0x7b>
  90aab7:	8000      	l32i.n	a0, a0, 0
		/* reboot..... */
		A_USB_JUMP_BOOT();
  90aab9:	22222c        	l32i	a2, a2, 176
  90aabc:	0b2000        	callx8	a2
  90aabf:	d10f      	retw.n
  90aac1:	000000        	ill

0090aac4 <zfTurnOffPower_patch>:
 *
 * . set suspend counter to non-zero value
 * . 
 */
void zfTurnOffPower_patch(void)
{
  90aac4:	6c1004        	entry	a1, 32
	A_PRINTF("+++ goto suspend ......\n");
  90aac7:	126915        	l32r	a2, 8e4f1c <mUsbEPinHighBandSet+0x57c>
  90aaca:	1a6a8c        	l32r	a10, 8e54fc <vdesc_module_install+0x4ec>
  90aacd:	232212        	l32i	a3, a2, 72
  90aad0:	c151      	movi.n	a5, 17
  90aad2:	0b3000        	callx8	a3

	/* setting the go suspend here, power down right away */
	io32_set(0x10000, BIT3);
  90aad5:	136953        	l32r	a3, 8e5024 <vdesc_module_install+0x14>
  90aad8:	c0c0      	movi.n	a12, 0
  90aada:	c0b8      	movi.n	a11, 8
  90aadc:	da30      	mov.n	a10, a3
  90aade:	5bfed7        	call8	90a63c <io32_rmw>

	A_DELAY_USECS(100);
  90aae1:	24223b        	l32i	a4, a2, 236
  90aae4:	2a0a64        	movi	a10, 100
  90aae7:	0b4000        	callx8	a4
  90aaea:	14694a        	l32r	a4, 8e5014 <vdesc_module_install+0x4>
	 *  5. set SUSPEND_ENABLE
	 */

	iowrite32(MAGPIE_REG_CPU_PLL_BYPASS_ADDR, BIT0 | BIT4);

	A_DELAY_USECS(100); // wait for stable
  90aaed:	2a0a64        	movi	a10, 100
  90aaf0:	0c0200        	memw
  90aaf3:	254600        	s32i	a5, a4, 0
  90aaf6:	24223b        	l32i	a4, a2, 236
  90aaf9:	0b4000        	callx8	a4
  90aafc:	14694b        	l32r	a4, 8e5028 <vdesc_module_install+0x18>

	iowrite32(MAGPIE_REG_CPU_PLL_ADDR, BIT16);

	A_DELAY_USECS(100); // wait for stable
  90aaff:	2a0a64        	movi	a10, 100
  90ab02:	0c0200        	memw
  90ab05:	9340      	s32i.n	a3, a4, 0
  90ab07:	24223b        	l32i	a4, a2, 236
  90ab0a:	0b4000        	callx8	a4

	A_UART_HWINIT((40*1000*1000), 19200);
  90ab0d:	1b69d4        	l32r	a11, 8e5260 <vdesc_module_install+0x250>
  90ab10:	24221a        	l32i	a4, a2, 104
  90ab13:	1a6916        	l32r	a10, 8e4f6c <vbuf_module_install+0xc>
  90ab16:	0b4000        	callx8	a4
	A_CLOCK_INIT(40);
  90ab19:	242238        	l32i	a4, a2, 224
  90ab1c:	c2a8      	movi.n	a10, 40
  90ab1e:	0b4000        	callx8	a4

	io32_set(MAGPIE_REG_ETH_PLL_ADDR, BIT16);
  90ab21:	176a8d        	l32r	a7, 8e5558 <vdesc_module_install+0x548>
  90ab24:	db30      	mov.n	a11, a3
  90ab26:	da70      	mov.n	a10, a7
  90ab28:	c0c0      	movi.n	a12, 0
  90ab2a:	5bfec4        	call8	90a63c <io32_rmw>

	io32_set(MAGPIE_REG_ETH_PLL_BYPASS_ADDR, BIT4 | BIT0);
  90ab2d:	166a8e        	l32r	a6, 8e5568 <vdesc_module_install+0x558>
  90ab30:	db50      	mov.n	a11, a5
  90ab32:	da60      	mov.n	a10, a6
  90ab34:	c0c0      	movi.n	a12, 0
  90ab36:	5bfec1        	call8	90a63c <io32_rmw>

	io32_set(MAGPIE_REG_SUSPEND_ENABLE_ADDR, 0x10 << 8);
  90ab39:	146a8f        	l32r	a4, 8e5578 <vdesc_module_install+0x568>
  90ab3c:	1b6a90        	l32r	a11, 8e557c <vdesc_module_install+0x56c>
  90ab3f:	044a02        	or	a10, a4, a4
  90ab42:	2c0a00        	movi	a12, 0
  90ab45:	5bfebd        	call8	90a63c <io32_rmw>

	// TURN OFF ETH PLL
	_fw_power_off();

	//32clk wait for External ETH PLL stable
	A_DELAY_USECS(100);
  90ab48:	22223b        	l32i	a2, a2, 236
  90ab4b:	2a0a64        	movi	a10, 100
  90ab4e:	0b2000        	callx8	a2
  90ab51:	186a92        	l32r	a8, 8e559c <vdesc_module_install+0x58c>
  90ab54:	126a91        	l32r	a2, 8e5598 <vdesc_module_install+0x588>
    
	iowrite32(0x52000, 0x70303); /* read back 0x703f7 */
	iowrite32(0x52008, 0x0e91c); /* read back 0x1e948 */
    
	io32_set(MAGPIE_REG_SUSPEND_ENABLE_ADDR, BIT0);
  90ab57:	da40      	mov.n	a10, a4
  90ab59:	0c0200        	memw
  90ab5c:	9820      	s32i.n	a8, a2, 0
  90ab5e:	186a94        	l32r	a8, 8e55b0 <vdesc_module_install+0x5a0>
  90ab61:	126a93        	l32r	a2, 8e55b0 <vdesc_module_install+0x5a0>
  90ab64:	c0b1      	movi.n	a11, 1
  90ab66:	0c0200        	memw
  90ab69:	9820      	s32i.n	a8, a2, 0
  90ab6b:	c0c0      	movi.n	a12, 0
  90ab6d:	5bfeb3        	call8	90a63c <io32_rmw>
     *  3. turn on ETH PLL
     *  4. disable ETH PLL bypass and update
     *  5. turn on pcie pll
     */    

	io32_clr(MAGPIE_REG_ETH_PLL_ADDR, BIT16);
  90ab70:	da70      	mov.n	a10, a7
  90ab72:	dc30      	mov.n	a12, a3
  90ab74:	c0b0      	movi.n	a11, 0
  90ab76:	5bfeb1        	call8	90a63c <io32_rmw>

	/* deassert eth_pll bypass mode and trigger update bit */
	io32_clr(MAGPIE_REG_ETH_PLL_BYPASS_ADDR, BIT4 | BIT0);
  90ab79:	066a02        	or	a10, a6, a6
  90ab7c:	055c02        	or	a12, a5, a5
  90ab7f:	2b0a00        	movi	a11, 0
  90ab82:	5bfeae        	call8	90a63c <io32_rmw>
	io32_set(MAGPIE_REG_SUSPEND_ENABLE_ADDR, BIT0);

	// wake up, and turn on cpu, eth, pcie and usb pll 
	_fw_power_on();
	// restore gpio and other settings
	_fw_restore_dma_fifo();
  90ab85:	5bfeb8        	call8	90a668 <_fw_restore_dma_fifo>

	/* clear suspend */
	io32_clr(MAGPIE_REG_SUSPEND_ENABLE_ADDR, BIT0);
  90ab88:	da40      	mov.n	a10, a4
  90ab8a:	c0b0      	movi.n	a11, 0
  90ab8c:	c0c1      	movi.n	a12, 1
  90ab8e:	5bfeab        	call8	90a63c <io32_rmw>
	io32_clr(0x52028, BIT8 | BIT12 | BIT16);
  90ab91:	1a6a95        	l32r	a10, 8e55e8 <vdesc_module_install+0x5d8>
  90ab94:	1c6a96        	l32r	a12, 8e55ec <vdesc_module_install+0x5dc>
  90ab97:	c0b0      	movi.n	a11, 0
  90ab99:	5bfea8        	call8	90a63c <io32_rmw>
  90ab9c:	d10f      	retw.n
	...

0090aba0 <zfResetUSBFIFO_patch>:
 * . turn off pcie pll
 * . reset all pcie/gmac related registers
 * . reset usb dma
 */
void zfResetUSBFIFO_patch(void)
{
  90aba0:	6c1004        	entry	a1, 32
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90aba3:	126a97        	l32r	a2, 8e5600 <vdesc_module_install+0x5f0>
	A_PRINTF("0x9808  0x%x ......\n", ioread32(0x10ff9808));
  90aba6:	1a6a98        	l32r	a10, 8e5608 <vdesc_module_install+0x5f8>
  90aba9:	0c0200        	memw
  90abac:	2b2200        	l32i	a11, a2, 0
  90abaf:	126915        	l32r	a2, 8e5004 <vbuf_module_install+0xa4>
  90abb2:	232212        	l32i	a3, a2, 72
  90abb5:	0b3000        	callx8	a3
  90abb8:	1469fc        	l32r	a4, 8e53a8 <vdesc_module_install+0x398>
	A_PRINTF("0x7890  0x%x ......\n", ioread32(0x10ff7890));
  90abbb:	136a99        	l32r	a3, 8e5620 <vdesc_module_install+0x610>
  90abbe:	282212        	l32i	a8, a2, 72
  90abc1:	0c0200        	memw
  90abc4:	2b4200        	l32i	a11, a4, 0
  90abc7:	da30      	mov.n	a10, a3
  90abc9:	0b8000        	callx8	a8
  90abcc:	0c0200        	memw
  90abcf:	8b40      	l32i.n	a11, a4, 0
	A_PRINTF("0x7890  0x%x ......\n", ioread32(0x10ff7890));
  90abd1:	242212        	l32i	a4, a2, 72
  90abd4:	da30      	mov.n	a10, a3
  90abd6:	0b4000        	callx8	a4
  90abd9:	136a67        	l32r	a3, 8e5578 <vdesc_module_install+0x568>
	A_PRINTF("0x4088  0x%x ......\n", ioread32(0x10ff4088));
  90abdc:	222212        	l32i	a2, a2, 72
  90abdf:	0c0200        	memw
  90abe2:	8b30      	l32i.n	a11, a3, 0
  90abe4:	1a6a6c        	l32r	a10, 8e5594 <vdesc_module_install+0x584>
  90abe7:	0b2000        	callx8	a2
	_fw_reset_dma_fifo();
  90abea:	5bfeb9        	call8	90a6d0 <_fw_reset_dma_fifo>
  90abed:	d10f      	retw.n
	...

0090abf0 <cmnos_clock_init_patch>:
extern a_uint32_t cticks;

// clock change 
//
void cmnos_clock_init_patch(a_uint32_t refclk)
{
  90abf0:	6c1004        	entry	a1, 32
    ref_clk = refclk;
  90abf3:	186a9a        	l32r	a8, 8e565c <vdesc_module_install+0x64c>
  90abf6:	9280      	s32i.n	a2, a8, 0
  90abf8:	d10f      	retw.n
	...

0090abfc <cmnos_refclk_speed_get_patch>:
}

// retrieve current clock setting
a_uint32_t cmnos_refclk_speed_get_patch(void)
{
  90abfc:	6c1004        	entry	a1, 32
    return ref_clk;
}
  90abff:	186a9a        	l32r	a8, 8e5668 <vdesc_module_install+0x658>
  90ac02:	8280      	l32i.n	a2, a8, 0
  90ac04:	d10f      	retw.n
	...

0090ac08 <cmnos_delay_us_patch>:


// software emulate delay function
void cmnos_delay_us_patch(int us)
{
  90ac08:	6c1004        	entry	a1, 32
    a_uint32_t start_time = NOW();
  90ac0b:	5b6f53        	call8	8e6958 <xthal_get_ccount>
    unsigned int num_ticks = us*ref_clk; // system_freq == number of ticks per 1us
  90ac0e:	186a9a        	l32r	a8, 8e5678 <vdesc_module_install+0x668>


// software emulate delay function
void cmnos_delay_us_patch(int us)
{
    a_uint32_t start_time = NOW();
  90ac11:	d3a0      	mov.n	a3, a10
    unsigned int num_ticks = us*ref_clk; // system_freq == number of ticks per 1us
  90ac13:	288200        	l32i	a8, a8, 0
  90ac16:	082228        	mull	a2, a2, a8
    
    while ( (NOW() - start_time) < num_ticks) {
  90ac19:	5b6f4f        	call8	8e6958 <xthal_get_ccount>
  90ac1c:	03aa0c        	sub	a10, a10, a3
  90ac1f:	72a3f6        	bltu	a10, a2, 90ac19 <cmnos_delay_us_patch+0x11>
        /* busy spin */
        ;
    }
}
  90ac22:	d10f      	retw.n

0090ac24 <cmnos_tick_patch>:


// software emulate microsecond ticks
void cmnos_tick_patch(void)
{
  90ac24:	6c1004        	entry	a1, 32
    static a_uint32_t last_tick = 0;
    a_uint32_t current_tick = NOW();
  90ac27:	5b6f4c        	call8	8e6958 <xthal_get_ccount>
    a_uint32_t delta_tick;

    delta_tick = (A_UINT32 ) (current_tick - last_tick)/(ref_clk<<10);
  90ac2a:	186a9a        	l32r	a8, 8e5694 <vdesc_module_install+0x684>
  90ac2d:	126a9b        	l32r	a2, 8e569c <vdesc_module_install+0x68c>

// software emulate microsecond ticks
void cmnos_tick_patch(void)
{
    static a_uint32_t last_tick = 0;
    a_uint32_t current_tick = NOW();
  90ac30:	d3a0      	mov.n	a3, a10
    a_uint32_t delta_tick;

    delta_tick = (A_UINT32 ) (current_tick - last_tick)/(ref_clk<<10);
  90ac32:	8b80      	l32i.n	a11, a8, 0
  90ac34:	2a2200        	l32i	a10, a2, 0
  90ac37:	06bb11        	slli	a11, a11, 10
  90ac3a:	0a3a0c        	sub	a10, a3, a10
  90ac3d:	5b6f83        	call8	8e6a4c <__udivsi3>

    if( delta_tick > 0 )
  90ac40:	c8a0      	beqz.n	a10, 90ac44 <cmnos_tick_patch+0x20>
        last_tick = current_tick;
  90ac42:	9320      	s32i.n	a3, a2, 0

    cticks += delta_tick;
  90ac44:	126a9c        	l32r	a2, 8e56b4 <vdesc_module_install+0x6a4>
  90ac47:	8320      	l32i.n	a3, a2, 0
  90ac49:	a3aa      	add.n	a10, a10, a3
  90ac4b:	9a20      	s32i.n	a10, a2, 0
  90ac4d:	d10f      	retw.n
	...

0090ac50 <cmnos_milliseconds_patch>:
}

// get current sysmem up time in milliseconds based
a_uint32_t cmnos_milliseconds_patch(void)
{
  90ac50:	6c1004        	entry	a1, 32
    cmnos_tick_patch();
  90ac53:	5bfff4        	call8	90ac24 <cmnos_tick_patch>
    
    return (cticks);
}
  90ac56:	186a9c        	l32r	a8, 8e56c8 <vdesc_module_install+0x6b8>
  90ac59:	8280      	l32i.n	a2, a8, 0
  90ac5b:	d10f      	retw.n
  90ac5d:	000000        	ill

0090ac60 <_HIFusb_get_max_msg_len_patch>:

/*
 * -- support more than 64 bytes command on ep4 -- 
 */
int _HIFusb_get_max_msg_len_patch(hif_handle_t handle, int pipe)
{
  90ac60:	6c1004        	entry	a1, 32
  90ac63:	233cfd        	addi	a3, a3, -3
    switch(pipe) {
  90ac66:	222a00        	movi	a2, 0x200
  90ac69:	6e3202        	bltui	a3, 2, 90ac6f <_HIFusb_get_max_msg_len_patch+0xf>
  90ac6c:	226a40        	movi	a2, 0x640
            return 512;
            
        default:
            return 1600;
    }
}
  90ac6f:	d10f      	retw.n
  90ac71:	000000        	ill

0090ac74 <_HIFusb_isr_handler_patch>:

/*
 * -- move the usb_task to here --
 */
void _HIFusb_isr_handler_patch(hif_handle_t h)
{
  90ac74:	6c1004        	entry	a1, 32
    A_USB_FW_TASK();
  90ac77:	186915        	l32r	a8, 8e50cc <vdesc_module_install+0xbc>
  90ac7a:	28821e        	l32i	a8, a8, 120
  90ac7d:	0b8000        	callx8	a8

    _HIFusb_isr_handler();
  90ac80:	5b6298        	call8	8e36e4 <_HIFusb_isr_handler>
  90ac83:	d10f      	retw.n
  90ac85:	000000        	ill

0090ac88 <_HIFusb_start_patch>:
 * - update DMA_START bit4 to 1
 * - update DESC_START_ADDR
 * - update DMA_START bit 0
 */
void _HIFusb_start_patch(hif_handle_t handle) 
{
  90ac88:	6c1004        	entry	a1, 32
    MAGPIE_REG_USB_TX0_DMA_START = 0x0;
  90ac8b:	1c6a9d        	l32r	a12, 8e5700 <vdesc_module_install+0x6f0>
  90ac8e:	c080      	movi.n	a8, 0
    MAGPIE_REG_USB_RX0_DMA_START = 0x0;
  90ac90:	1b6a9e        	l32r	a11, 8e5708 <vdesc_module_install+0x6f8>
 * - update DESC_START_ADDR
 * - update DMA_START bit 0
 */
void _HIFusb_start_patch(hif_handle_t handle) 
{
    MAGPIE_REG_USB_TX0_DMA_START = 0x0;
  90ac93:	0c0200        	memw
  90ac96:	98c0      	s32i.n	a8, a12, 0
    MAGPIE_REG_USB_RX0_DMA_START = 0x0;
    MAGPIE_REG_USB_RX1_DMA_START = 0x0;
  90ac98:	1a6a9f        	l32r	a10, 8e5714 <vdesc_module_install+0x704>
 * - update DMA_START bit 0
 */
void _HIFusb_start_patch(hif_handle_t handle) 
{
    MAGPIE_REG_USB_TX0_DMA_START = 0x0;
    MAGPIE_REG_USB_RX0_DMA_START = 0x0;
  90ac9b:	0c0200        	memw
  90ac9e:	98b0      	s32i.n	a8, a11, 0
    MAGPIE_REG_USB_RX1_DMA_START = 0x0;
    MAGPIE_REG_USB_RX2_DMA_START = 0x0;
  90aca0:	196aa0        	l32r	a9, 8e5720 <vdesc_module_install+0x710>
 */
void _HIFusb_start_patch(hif_handle_t handle) 
{
    MAGPIE_REG_USB_TX0_DMA_START = 0x0;
    MAGPIE_REG_USB_RX0_DMA_START = 0x0;
    MAGPIE_REG_USB_RX1_DMA_START = 0x0;
  90aca3:	0c0200        	memw
  90aca6:	98a0      	s32i.n	a8, a10, 0
    MAGPIE_REG_USB_RX2_DMA_START = 0x0;
  90aca8:	0c0200        	memw
  90acab:	9890      	s32i.n	a8, a9, 0
    
    while( 1 )
    {
        if(!MAGPIE_REG_USB_TX0_DMA_START &&
  90acad:	0c0200        	memw
  90acb0:	88c0      	l32i.n	a8, a12, 0
  90acb2:	658ff7        	bnez	a8, 90acad <_HIFusb_start_patch+0x25>
	   !MAGPIE_REG_USB_RX0_DMA_START &&
  90acb5:	0c0200        	memw
  90acb8:	88b0      	l32i.n	a8, a11, 0
    MAGPIE_REG_USB_RX1_DMA_START = 0x0;
    MAGPIE_REG_USB_RX2_DMA_START = 0x0;
    
    while( 1 )
    {
        if(!MAGPIE_REG_USB_TX0_DMA_START &&
  90acba:	658fef        	bnez	a8, 90acad <_HIFusb_start_patch+0x25>
	   !MAGPIE_REG_USB_RX0_DMA_START &&
	   !MAGPIE_REG_USB_RX1_DMA_START &&
  90acbd:	0c0200        	memw
  90acc0:	88a0      	l32i.n	a8, a10, 0
    MAGPIE_REG_USB_RX2_DMA_START = 0x0;
    
    while( 1 )
    {
        if(!MAGPIE_REG_USB_TX0_DMA_START &&
	   !MAGPIE_REG_USB_RX0_DMA_START &&
  90acc2:	658fe7        	bnez	a8, 90acad <_HIFusb_start_patch+0x25>
	   !MAGPIE_REG_USB_RX1_DMA_START &&
	   !MAGPIE_REG_USB_RX2_DMA_START )
  90acc5:	0c0200        	memw
  90acc8:	8890      	l32i.n	a8, a9, 0
    
    while( 1 )
    {
        if(!MAGPIE_REG_USB_TX0_DMA_START &&
	   !MAGPIE_REG_USB_RX0_DMA_START &&
	   !MAGPIE_REG_USB_RX1_DMA_START &&
  90acca:	658fdf        	bnez	a8, 90acad <_HIFusb_start_patch+0x25>
	   !MAGPIE_REG_USB_RX2_DMA_START )
        {
            MAGPIE_REG_USB_TX0_DMA_START = MAGPIE_REG_USB_TX0_DMA_START|BIT4; 
  90accd:	0c0200        	memw
  90acd0:	8dc0      	l32i.n	a13, a12, 0
  90acd2:	c180      	movi.n	a8, 16
  90acd4:	08dd02        	or	a13, a13, a8
  90acd7:	0c0200        	memw
  90acda:	9dc0      	s32i.n	a13, a12, 0
            MAGPIE_REG_USB_RX0_DMA_START = MAGPIE_REG_USB_RX0_DMA_START|BIT4;
  90acdc:	0c0200        	memw
  90acdf:	8cb0      	l32i.n	a12, a11, 0
  90ace1:	08cc02        	or	a12, a12, a8
  90ace4:	0c0200        	memw
  90ace7:	9cb0      	s32i.n	a12, a11, 0
            MAGPIE_REG_USB_RX1_DMA_START = MAGPIE_REG_USB_RX1_DMA_START|BIT4;
  90ace9:	0c0200        	memw
  90acec:	8ba0      	l32i.n	a11, a10, 0
  90acee:	08bb02        	or	a11, a11, a8
  90acf1:	0c0200        	memw
  90acf4:	9ba0      	s32i.n	a11, a10, 0
            MAGPIE_REG_USB_RX2_DMA_START = MAGPIE_REG_USB_RX2_DMA_START|BIT4;
  90acf6:	0c0200        	memw
  90acf9:	8a90      	l32i.n	a10, a9, 0
  90acfb:	08a802        	or	a8, a10, a8
  90acfe:	0c0200        	memw
  90ad01:	9890      	s32i.n	a8, a9, 0
            break;
        }
    }
    _HIFusb_start();
  90ad03:	5b61e7        	call8	8e34a0 <_HIFusb_start>
  90ad06:	d10f      	retw.n

0090ad08 <__adf_os_dmamem_alloc>:
 * @return void* (Virtual address)
 */
inline void*
__adf_os_dmamem_alloc(__adf_os_device_t osdev, adf_os_size_t size, 
                      a_bool_t coherent, __adf_os_dma_map_t *dmap)
{    
  90ad08:	6c1004        	entry	a1, 32
    (*dmap) = A_ALLOCRAM(sizeof(struct __adf_dma_map));
  90ad0b:	146915        	l32r	a4, 8e5160 <vdesc_module_install+0x150>
  90ad0e:	c0a0      	movi.n	a10, 0
  90ad10:	224252        	l32i	a2, a4, 0x148
  90ad13:	c0bc      	movi.n	a11, 12
  90ad15:	0b2000        	callx8	a2
  90ad18:	9a50      	s32i.n	a10, a5, 0
  90ad1a:	d2a0      	mov.n	a2, a10
    
	if((*dmap) == NULL){
  90ad1c:	c9a1      	beqz.n	a10, 90ad31 <__adf_os_dmamem_alloc+0x29>
		goto fail_malloc;
	}
	    
    (*dmap)->ds_addr = A_ALLOCRAM(size);
  90ad1e:	244252        	l32i	a4, a4, 0x148
  90ad21:	c0a0      	movi.n	a10, 0
  90ad23:	db30      	mov.n	a11, a3
  90ad25:	0b4000        	callx8	a4
  90ad28:	9a21      	s32i.n	a10, a2, 4
    (*dmap)->ds_len = size;
  90ad2a:	8250      	l32i.n	a2, a5, 0
  90ad2c:	232504        	s16i	a3, a2, 8
    
    return (*dmap)->ds_addr;
  90ad2f:	8221      	l32i.n	a2, a2, 4
    
fail_malloc: 
    return NULL;            
}
  90ad31:	d10f      	retw.n
	...

0090ad34 <__adf_os_setup_intr>:
 * @return int
 */

int
__adf_os_setup_intr(__adf_os_device_t  osdev, adf_os_drv_intr fn)
{
  90ad34:	6c1004        	entry	a1, 32
    g_wlan_intr = fn;
  90ad37:	186a44        	l32r	a8, 8e5648 <vdesc_module_install+0x638>
    
    return 0;    
}
  90ad3a:	c020      	movi.n	a2, 0
 */

int
__adf_os_setup_intr(__adf_os_device_t  osdev, adf_os_drv_intr fn)
{
    g_wlan_intr = fn;
  90ad3c:	9380      	s32i.n	a3, a8, 0
    
    return 0;    
}
  90ad3e:	d10f      	retw.n

0090ad40 <__adf_os_free_intr>:
 * @param[in] dev
 * @param[in] sc
 */
void
__adf_os_free_intr(__adf_os_device_t osdev)
{
  90ad40:	6c1004        	entry	a1, 32
    g_wlan_intr = NULL;  
  90ad43:	186a44        	l32r	a8, 8e5654 <vdesc_module_install+0x644>
  90ad46:	c090      	movi.n	a9, 0
  90ad48:	9980      	s32i.n	a9, a8, 0
  90ad4a:	d10f      	retw.n

0090ad4c <ath_hal_attach_tgt>:

struct ath_hal*
ath_hal_attach_tgt(a_uint32_t devid,HAL_SOFTC sc,
		   adf_os_device_t dev,
		   a_uint32_t flags, HAL_STATUS *error)
{
  90ad4c:	6c1004        	entry	a1, 32
	struct ath_hal *ah = AH_NULL;

	ah = ar5416Attach(sc, dev, error);
  90ad4f:	da30      	mov.n	a10, a3
  90ad51:	db40      	mov.n	a11, a4
  90ad53:	dc60      	mov.n	a12, a6
  90ad55:	5804ee        	call8	90c110 <ar5416Attach>

	return ah;
}
  90ad58:	d2a0      	mov.n	a2, a10
  90ad5a:	d10f      	retw.n

0090ad5c <ath_hal_getcapability>:

HAL_STATUS
ath_hal_getcapability(struct ath_hal *ah, HAL_CAPABILITY_TYPE type)
{
  90ad5c:	6c1004        	entry	a1, 32
	const HAL_CAPABILITIES *pCap = &AH_PRIVATE(ah)->ah_caps;
	switch (type) {
  90ad5f:	68310d        	beqi	a3, 1, 90ad70 <ath_hal_getcapability+0x14>
  90ad62:	c93e      	beqz.n	a3, 90ad84 <ath_hal_getcapability+0x28>
	case HAL_CAP_BSSIDMASK:
		return pCap->halBssIdMaskSupport ? HAL_OK : HAL_ENOTSUPP;
	case HAL_CAP_VEOL:
		return pCap->halVEOLSupport ? HAL_OK : HAL_ENOTSUPP;
	default:
		return HAL_EINVAL;
  90ad64:	233cfe        	addi	a3, a3, -2
  90ad67:	c08d      	movi.n	a8, 13
  90ad69:	c02c      	movi.n	a2, 12
  90ad6b:	038238        	moveqz	a2, a8, a3
  90ad6e:	d10f      	retw.n
	const HAL_CAPABILITIES *pCap = &AH_PRIVATE(ah)->ah_caps;
	switch (type) {
	case HAL_CAP_TSF_ADJUST:
		return HAL_ENOTSUPP;
	case HAL_CAP_BSSIDMASK:
		return pCap->halBssIdMaskSupport ? HAL_OK : HAL_ENOTSUPP;
  90ad70:	28222b        	l32i	a8, a2, 172
  90ad73:	126a33        	l32r	a2, 8e5640 <vdesc_module_install+0x630>
  90ad76:	c03d      	movi.n	a3, 13
  90ad78:	028801        	and	a8, a8, a2
  90ad7b:	c020      	movi.n	a2, 0
  90ad7d:	083238        	moveqz	a2, a3, a8
  90ad80:	d10f      	retw.n
  90ad82:	000028        	mull	a0, a0, a0
	case HAL_CAP_VEOL:
		return pCap->halVEOLSupport ? HAL_OK : HAL_ENOTSUPP;
  90ad85:	222b12        	l32ai	a2, a2, 72
  90ad88:	6a3202        	blti	a3, 2, 90ad8e <ath_hal_getcapability+0x32>
  90ad8b:	8201      	l32i.n	a2, a0, 4
  90ad8d:	c08d      	movi.n	a8, 13
  90ad8f:	028338        	moveqz	a3, a8, a2
  90ad92:	d230      	mov.n	a2, a3
	default:
		return HAL_EINVAL;
	}
}
  90ad94:	d10f      	retw.n
	...

0090ad98 <ath_hal_computetxtime>:

a_uint16_t
ath_hal_computetxtime(struct ath_hal *ah,
		      const HAL_RATE_TABLE *rates, a_uint32_t frameLen, a_uint16_t rateix,
		      HAL_BOOL shortPreamble)
{
  90ad98:	6c1004        	entry	a1, 32
  90ad9b:	05054f        	extui	a5, a5, 0, 16
	a_uint32_t bitsPerSymbol, numBits, numSymbols, phyTime, txTime;
	a_uint32_t kbps;

	kbps = rates->info[rateix].rateKbps;
  90ad9e:	05550a        	addx4	a5, a5, a5
  90ada1:	03530a        	addx4	a3, a5, a3
  90ada4:	8b3c      	l32i.n	a11, a3, 48

	/*
	 * index can be invalid duting dynamic Turbo transitions.
	 */
	if(kbps == 0) return 0;
  90ada6:	c020      	movi.n	a2, 0
  90ada8:	72b155        	beq	a11, a2, 90ae01 <ath_hal_computetxtime+0x69>
	switch (rates->info[rateix].phy) {
  90adab:	253c20        	addi	a5, a3, 32
  90adae:	285009        	l8ui	a8, a5, 9
  90adb1:	728107        	beq	a8, a2, 90adbc <ath_hal_computetxtime+0x24>
  90adb4:	698246        	bnei	a8, 2, 90adfe <ath_hal_computetxtime+0x66>
  90adb7:	600028        	j	90ade3 <ath_hal_computetxtime+0x4b>
  90adba:	000022        	excw

	case IEEE80211_T_CCK:
		phyTime = CCK_PREAMBLE_BITS + CCK_PLCP_BITS;
  90adbd:	0ac0c8        	excw
		if (shortPreamble && rates->info[rateix].shortPreamble)
  90adc0:	672650        	bgez	a2, 90b414 <ar5416SetupTxDesc_20+0x184>
  90adc3:	15250a        	l32r	a5, 8d41ec <_bss_end+0x3c12dc>
	 */
	if(kbps == 0) return 0;
	switch (rates->info[rateix].phy) {

	case IEEE80211_T_CCK:
		phyTime = CCK_PREAMBLE_BITS + CCK_PLCP_BITS;
  90adc6:	600652        	j	90b41c <ar5416SetupTxDesc_20+0x18c>
  90adc9:	390d45        	excw
		if (shortPreamble && rates->info[rateix].shortPreamble)
			phyTime >>= 1;
		numBits = frameLen << 3;
  90adcc:	110844        	l32r	a1, 8ccedc <_bss_end+0x3b9fcc>
		txTime = phyTime + ((numBits * 1000)/kbps);
  90adcf:	110544        	l32r	a1, 8cc2e0 <_bss_end+0x3b93d0>
  90add2:	0c054a        	extui	a5, a12, 0, 11
  90add5:	0a0daa        	excw
  90add8:	115b6f        	l32r	a1, 8e1b94 <athos_indirection_table_install+0x620>
  90addb:	1cbaaa        	l32r	a12, 8f9884 <memset+0x12a3c>
		/* TODO: make sure the same value of txTime can use in all device */
		if (ath_hal_getcapability(ah, HAL_CAP_HT) != HAL_OK)
			txTime = txTime + CCK_SIFS_TIME;
  90adde:	a2a2      	add.n	a2, a10, a2
  90ade0:	60001a        	j	90adfe <ath_hal_computetxtime+0x66>
		break;
	case IEEE80211_T_OFDM:
		/* full rate channel */
		bitsPerSymbol   = (kbps * OFDM_SYMBOL_TIME) / 1000;
  90ade3:	126aa1        	l32r	a2, 8e5868 <vdesc_module_install+0x858>
  90ade6:	0ebb11        	slli	a11, a11, 2
  90ade9:	02bb2a        	muluh	a11, a11, a2
  90adec:	0b6b14        	srli	a11, a11, 6
		HALASSERT(bitsPerSymbol != 0);

		numBits = OFDM_PLCP_BITS + (frameLen << 3);
		numSymbols = asf_howmany(numBits, bitsPerSymbol);
  90adef:	2abc15        	addi	a10, a11, 21
  90adf2:	0a4a0b        	addx8	a10, a4, a10
  90adf5:	5b6f15        	call8	8e6a4c <__udivsi3>
		txTime = OFDM_PREAMBLE_TIME + (numSymbols * OFDM_SYMBOL_TIME);
  90adf8:	0eaa11        	slli	a10, a10, 2
		/* TODO: make sure the same value of txTime can use in all device */
		if (ath_hal_getcapability(ah, HAL_CAP_HT) != HAL_OK)
			txTime = txTime + OFDM_SIFS_TIME;
  90adfb:	22ac24        	addi	a2, a10, 36
		break;
	default:
		txTime = 0;
		break;
	}
	return txTime;
  90adfe:	02024f        	extui	a2, a2, 0, 16
}
  90ae01:	d10f      	retw.n
	...

0090ae04 <ath_hal_get_curmode>:
#undef OFDM_SYMBOL_TIME

#ifdef MAGPIE_MERLIN
a_uint32_t 
ath_hal_get_curmode(struct ath_hal *ah, HAL_CHANNEL_INTERNAL *chan)
{
  90ae04:	6c1004        	entry	a1, 32
	if (!chan)
		return HAL_MODE_11NG;
  90ae07:	126a33        	l32r	a2, 8e56d4 <vdesc_module_install+0x6c4>

#ifdef MAGPIE_MERLIN
a_uint32_t 
ath_hal_get_curmode(struct ath_hal *ah, HAL_CHANNEL_INTERNAL *chan)
{
	if (!chan)
  90ae0a:	643046        	beqz	a3, 90ae54 <ath_hal_get_curmode+0x50>
		return HAL_MODE_11NG;

	if (IS_CHAN_NA(chan))
  90ae0d:	8831      	l32i.n	a8, a3, 4
  90ae0f:	19693c        	l32r	a9, 8e5300 <vdesc_module_install+0x2f0>
		return HAL_MODE_11NA; 
  90ae12:	126a32        	l32r	a2, 8e56dc <vdesc_module_install+0x6cc>
ath_hal_get_curmode(struct ath_hal *ah, HAL_CHANNEL_INTERNAL *chan)
{
	if (!chan)
		return HAL_MODE_11NG;

	if (IS_CHAN_NA(chan))
  90ae15:	098301        	and	a3, a8, a9
  90ae18:	793138        	beq	a3, a9, 90ae54 <ath_hal_get_curmode+0x50>
		return HAL_MODE_11NA; 

	if (IS_CHAN_A(chan))
  90ae1b:	221a40        	movi	a2, 0x140
  90ae1e:	028301        	and	a3, a8, a2
  90ae21:	72312d        	beq	a3, a2, 90ae52 <ath_hal_get_curmode+0x4e>
		return HAL_MODE_11A;

	if (IS_CHAN_NG(chan))
  90ae24:	196aa2        	l32r	a9, 8e58ac <vdesc_module_install+0x89c>
#ifdef MAGPIE_MERLIN
a_uint32_t 
ath_hal_get_curmode(struct ath_hal *ah, HAL_CHANNEL_INTERNAL *chan)
{
	if (!chan)
		return HAL_MODE_11NG;
  90ae27:	126a33        	l32r	a2, 8e56f4 <vdesc_module_install+0x6e4>
		return HAL_MODE_11NA; 

	if (IS_CHAN_A(chan))
		return HAL_MODE_11A;

	if (IS_CHAN_NG(chan))
  90ae2a:	098301        	and	a3, a8, a9
  90ae2d:	793123        	beq	a3, a9, 90ae54 <ath_hal_get_curmode+0x50>
		return HAL_MODE_11NG;

	if (IS_CHAN_G(chan))
  90ae30:	290ad0        	movi	a9, 208
  90ae33:	098901        	and	a9, a8, a9
  90ae36:	230ac0        	movi	a3, 192
		return HAL_MODE_11G;
  90ae39:	c028      	movi.n	a2, 8
		return HAL_MODE_11A;

	if (IS_CHAN_NG(chan))
		return HAL_MODE_11NG;

	if (IS_CHAN_G(chan))
  90ae3b:	739115        	beq	a9, a3, 90ae54 <ath_hal_get_curmode+0x50>
		return HAL_MODE_11G;

	if (IS_CHAN_B(chan))
  90ae3e:	290aa0        	movi	a9, 160
  90ae41:	098801        	and	a8, a8, a9
		return HAL_MODE_11B;
  90ae44:	136a33        	l32r	a3, 8e5710 <vdesc_module_install+0x700>
  90ae47:	09890c        	sub	a9, a8, a9
  90ae4a:	c024      	movi.n	a2, 4
  90ae4c:	093239        	movnez	a2, a3, a9
  90ae4f:	d10f      	retw.n
  90ae51:	00c021        	excw

	HALASSERT(0);
	return HAL_MODE_11NG;
}
  90ae54:	d10f      	retw.n
	...

0090ae58 <ath_hal_wait>:

#endif

HAL_BOOL
ath_hal_wait(struct ath_hal *ah, a_uint32_t reg, a_uint32_t mask, a_uint32_t val)
{
  90ae58:	6c1004        	entry	a1, 32
				return AH_TRUE;
			OS_DELAY(10);
		}
	} else {
		for (i = 0; i < AH_TIMEOUT_11G; i++) {
			if ((ioread32_mac(reg) & mask) == val)
  90ae5b:	186a03        	l32r	a8, 8e5668 <vdesc_module_install+0x658>

#endif

HAL_BOOL
ath_hal_wait(struct ath_hal *ah, a_uint32_t reg, a_uint32_t mask, a_uint32_t val)
{
  90ae5e:	223ae8        	movi	a2, 0x3e8
				return AH_TRUE;
			OS_DELAY(10);
		}
	} else {
		for (i = 0; i < AH_TIMEOUT_11G; i++) {
			if ((ioread32_mac(reg) & mask) == val)
  90ae61:	083308        	add	a3, a3, a8
  90ae64:	0c0200        	memw
  90ae67:	8830      	l32i.n	a8, a3, 0
  90ae69:	084801        	and	a8, a4, a8
  90ae6c:	75810d        	beq	a8, a5, 90ae7d <ath_hal_wait+0x25>
				return AH_TRUE;
			OS_DELAY(10);
  90ae6f:	2a0a0a        	movi	a10, 10
  90ae72:	222cff        	addi	a2, a2, -1
  90ae75:	5bf324        	call8	907b08 <ath_hal_delay>
			if ((ioread32_mac(reg) & mask) == val)
				return AH_TRUE;
			OS_DELAY(10);
		}
	} else {
		for (i = 0; i < AH_TIMEOUT_11G; i++) {
  90ae78:	652fe8        	bnez	a2, 90ae64 <ath_hal_wait+0xc>
  90ae7b:	d10f      	retw.n
			if ((ioread32_mac(reg) & mask) == val)
				return AH_TRUE;
  90ae7d:	c021      	movi.n	a2, 1
	}
	return AH_FALSE;

#undef AH_TIMEOUT_11N
#undef AH_TIMEOUT_11G
}
  90ae7f:	d10f      	retw.n
  90ae81:	000000        	ill

0090ae84 <ar5416IsInterruptPending>:
/**********************/
/* Interrupt Handling */
/**********************/

HAL_BOOL ar5416IsInterruptPending(struct ath_hal *ah)
{
  90ae84:	6c1004        	entry	a1, 32
  90ae87:	126aa3        	l32r	a2, 8e5914 <vdesc_module_install+0x904>
  90ae8a:	0c0200        	memw
  90ae8d:	8820      	l32i.n	a8, a2, 0
		ioread32_mac(AR_INTR_ASYNC_CAUSE);
	/*
	 * Some platforms trigger our ISR before applying power to
	 * the card, so make sure.
	 */
	return ((host_isr != AR_INTR_SPURIOUS) && (host_isr & AR_INTR_MAC_IRQ));
  90ae8f:	c020      	movi.n	a2, 0
  90ae91:	081940        	extui	a9, a8, 1, 1
  90ae94:	b188      	addi.n	a8, a8, 1
  90ae96:	089239        	movnez	a2, a9, a8
}
  90ae99:	d10f      	retw.n
	...

0090ae9c <ar5416SetInterrupts>:
	return AH_TRUE;
}

HAL_INT
ar5416SetInterrupts(struct ath_hal *ah, HAL_INT ints)
{
  90ae9c:	6c1004        	entry	a1, 32
  90ae9f:	d920      	mov.n	a9, a2
	struct ath_hal_5416 *ahp = AH5416(ah);
	a_uint32_t omask = ahp->ah_maskReg;
  90aea1:	222236        	l32i	a2, a2, 216
	a_uint32_t mask;

	if (omask & HAL_INT_GLOBAL) {
  90aea4:	672011        	bgez	a2, 90aeb9 <ar5416SetInterrupts+0x1d>
  90aea7:	186aa4        	l32r	a8, 8e5938 <vdesc_module_install+0x928>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90aeaa:	2a0a00        	movi	a10, 0
  90aead:	0c0200        	memw
  90aeb0:	2a8600        	s32i	a10, a8, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90aeb3:	0c0200        	memw
  90aeb6:	288200        	l32i	a8, a8, 0
		iowrite32_mac(AR_IER, AR_IER_DISABLE);
		(void) ioread32_mac(AR_IER);
	}

	mask = ints & HAL_INT_COMMON;
  90aeb9:	186aa5        	l32r	a8, 8e5950 <vdesc_module_install+0x940>
  90aebc:	083801        	and	a8, a3, a8
	if (ints & HAL_INT_TX) {
  90aebf:	793705        	bbci	a3, 25, 90aec8 <ar5416SetInterrupts+0x2c>
#else
		mask |= AR_IMR_TXOK;
		mask |= AR_IMR_TXDESC;
#endif
		mask |= AR_IMR_TXERR;
		mask |= AR_IMR_TXEOL;
  90aec2:	2a5ac0        	movi	a10, 0x5c0
  90aec5:	0a8802        	or	a8, a8, a10
	}
	if (ints & HAL_INT_RX) {
  90aec8:	7f3704        	bbci	a3, 31, 90aed0 <ar5416SetInterrupts+0x34>
		mask |= AR_IMR_RXERR;
#ifdef AR5416_INT_MITIGATION
		mask |=  AR_IMR_RXMINTR | AR_IMR_RXINTM;
#else
		mask |= AR_IMR_RXOK | AR_IMR_RXDESC;
  90aecb:	c0a7      	movi.n	a10, 7
  90aecd:	0a8802        	or	a8, a8, a10
#endif
	}

	if (ints & (HAL_INT_GTT | HAL_INT_CST)) {
  90aed0:	1a6aa6        	l32r	a10, 8e5968 <vdesc_module_install+0x958>
  90aed3:	7a3005        	bnone	a3, a10, 90aedc <ar5416SetInterrupts+0x40>
		mask |= AR_IMR_BCNMISC;
  90aed6:	1a6aa7        	l32r	a10, 8e5974 <vdesc_module_install+0x964>
  90aed9:	0a8802        	or	a8, a8, a10
  90aedc:	1a6aa8        	l32r	a10, 8e597c <vdesc_module_install+0x96c>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90aedf:	0c0200        	memw
  90aee2:	98a0      	s32i.n	a8, a10, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90aee4:	0c0200        	memw
  90aee7:	88a0      	l32i.n	a8, a10, 0
	}

	iowrite32_mac(AR_IMR, mask);
	(void) ioread32_mac(AR_IMR);
	ahp->ah_maskReg = ints;
  90aee9:	239636        	s32i	a3, a9, 216

	/* Re-enable interrupts if they were enabled before. */
	if (ints & HAL_INT_GLOBAL) {
  90aeec:	673010        	bgez	a3, 90af00 <ar5416SetInterrupts+0x64>
  90aeef:	136aa4        	l32r	a3, 8e5980 <vdesc_module_install+0x970>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90aef2:	c081      	movi.n	a8, 1
  90aef4:	0c0200        	memw
  90aef7:	283600        	s32i	a8, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90aefa:	0c0200        	memw
  90aefd:	233200        	l32i	a3, a3, 0
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90af00:	186aa9        	l32r	a8, 8e59a4 <vdesc_module_install+0x994>
  90af03:	c032      	movi.n	a3, 2
  90af05:	0c0200        	memw
  90af08:	9380      	s32i.n	a3, a8, 0
  90af0a:	186aaa        	l32r	a8, 8e59b4 <vdesc_module_install+0x9a4>
  90af0d:	0c0200        	memw
  90af10:	9380      	s32i.n	a3, a8, 0
  90af12:	186aac        	l32r	a8, 8e59c4 <vdesc_module_install+0x9b4>
  90af15:	136aab        	l32r	a3, 8e59c4 <vdesc_module_install+0x9b4>
  90af18:	0c0200        	memw
  90af1b:	9830      	s32i.n	a8, a3, 0
	iowrite32_mac(AR_INTR_ASYNC_ENABLE, AR_INTR_MAC_IRQ);
	iowrite32_mac(AR_INTR_ASYNC_MASK, AR_INTR_MAC_IRQ);
	iowrite32_mac(AR_INTR_SYNC_ENABLE, AR_INTR_SYNC_ALL);

	return omask;
}
  90af1d:	d10f      	retw.n
	...

0090af20 <ar5416GetTsf64>:
/****************/
/* TSF Handling */
/****************/

u_int64_t ar5416GetTsf64(struct ath_hal *ah)
{
  90af20:	6c1004        	entry	a1, 32
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90af23:	126aad        	l32r	a2, 8e59d8 <vdesc_module_install+0x9c8>
  90af26:	136aae        	l32r	a3, 8e59e0 <vdesc_module_install+0x9d0>
  90af29:	0c0200        	memw
  90af2c:	8220      	l32i.n	a2, a2, 0
  90af2e:	0c0200        	memw
  90af31:	8330      	l32i.n	a3, a3, 0

	tsf = ioread32_mac(AR_TSF_U32);
	tsf = (tsf << 32) | ioread32_mac(AR_TSF_L32);

        return tsf;
}
  90af33:	d10f      	retw.n
  90af35:	000000        	ill

0090af38 <ar5416SetRxDP>:

/******/
/* RX */
/******/
void ar5416SetRxDP(struct ath_hal *ah, a_uint32_t rxdp)
{
  90af38:	6c1004        	entry	a1, 32
  90af3b:	186aaf        	l32r	a8, 8e59f8 <vdesc_module_install+0x9e8>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90af3e:	0c0200        	memw
  90af41:	9380      	s32i.n	a3, a8, 0
  90af43:	d10f      	retw.n
  90af45:	000000        	ill

0090af48 <ar5416EnableReceive>:
			     & ~AR_RXCFG_ZLFDMA);
	}
}

void ar5416EnableReceive(struct ath_hal *ah)
{
  90af48:	6c1004        	entry	a1, 32
  90af4b:	186ab0        	l32r	a8, 8e5a0c <vdesc_module_install+0x9fc>
  90af4e:	c094      	movi.n	a9, 4
  90af50:	0c0200        	memw
  90af53:	9980      	s32i.n	a9, a8, 0
  90af55:	d10f      	retw.n
	...

0090af58 <ar5416StopPcuReceive>:
	iowrite32_mac(AR_CR, AR_CR_RXE);
}

void ar5416StopPcuReceive(struct ath_hal *ah)
{
  90af58:	6c1004        	entry	a1, 32
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90af5b:	186ab1        	l32r	a8, 8e5a20 <vdesc_module_install+0xa10>
	OS_REG_SET_BIT(ah, AR_DIAG_SW, AR_DIAG_RX_DIS);
  90af5e:	c290      	movi.n	a9, 32
  90af60:	0c0200        	memw
  90af63:	8a80      	l32i.n	a10, a8, 0
  90af65:	09a902        	or	a9, a10, a9
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90af68:	0c0200        	memw
  90af6b:	9980      	s32i.n	a9, a8, 0
  90af6d:	d10f      	retw.n
	...

0090af70 <ar5416SetupRxDesc_20>:
}

HAL_BOOL ar5416SetupRxDesc_20(struct ath_rx_desc *ds,
			      a_uint32_t size, a_uint32_t flags)
{
  90af70:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	HALASSERT((size &~ AR_BufLen) == 0);

	ads->ds_ctl1 = size & AR_BufLen;
  90af73:	03084b        	extui	a8, a3, 0, 12
	if (flags & HAL_RXDESC_INTREQ)
  90af76:	7a4f16        	bbsi	a4, 26, 90af90 <ar5416SetupRxDesc_20+0x20>
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	HALASSERT((size &~ AR_BufLen) == 0);

	ads->ds_ctl1 = size & AR_BufLen;
  90af79:	088957        	extui	a9, a8, 24, 8
  90af7c:	29240c        	s8i	a9, a2, 12
  90af7f:	088814        	srli	a8, a8, 8
  90af82:	c090      	movi.n	a9, 0
  90af84:	29240d        	s8i	a9, a2, 13
  90af87:	28240e        	s8i	a8, a2, 14
  90af8a:	23240f        	s8i	a3, a2, 15
  90af8d:	60001a        	j	90afab <ar5416SetupRxDesc_20+0x3b>
	if (flags & HAL_RXDESC_INTREQ)
		ads->ds_ctl1 |= AR_RxIntrReq;
  90af90:	136a02        	l32r	a3, 8e5798 <vdesc_module_install+0x788>
  90af93:	038802        	or	a8, a8, a3
  90af96:	088357        	extui	a3, a8, 24, 8
  90af99:	23240c        	s8i	a3, a2, 12
  90af9c:	080357        	extui	a3, a8, 16, 8
  90af9f:	23240d        	s8i	a3, a2, 13
  90afa2:	088347        	extui	a3, a8, 8, 8
  90afa5:	23240e        	s8i	a3, a2, 14
  90afa8:	28240f        	s8i	a8, a2, 15

	/* this should be enough */
	ads->ds_rxstatus8 &= ~AR_RxDone;
  90afab:	292030        	l8ui	a9, a2, 48
  90afae:	232031        	l8ui	a3, a2, 49
  90afb1:	282032        	l8ui	a8, a2, 50
  90afb4:	089910        	slli	a9, a9, 24
  90afb7:	003311        	slli	a3, a3, 16
  90afba:	093302        	or	a3, a3, a9
  90afbd:	088811        	slli	a8, a8, 8
  90afc0:	038802        	or	a8, a8, a3
  90afc3:	232033        	l8ui	a3, a2, 51
  90afc6:	083802        	or	a8, a3, a8
  90afc9:	c73e      	movi.n	a3, -2
  90afcb:	038801        	and	a8, a8, a3
  90afce:	088357        	extui	a3, a8, 24, 8
  90afd1:	232430        	s8i	a3, a2, 48
  90afd4:	080357        	extui	a3, a8, 16, 8
  90afd7:	232431        	s8i	a3, a2, 49
  90afda:	088347        	extui	a3, a8, 8, 8
  90afdd:	232432        	s8i	a3, a2, 50
  90afe0:	282433        	s8i	a8, a2, 51

	return AH_TRUE;
}
  90afe3:	c021      	movi.n	a2, 1
  90afe5:	d10f      	retw.n
	...

0090afe8 <ar5416ProcRxDescFast_20>:

HAL_STATUS ar5416ProcRxDescFast_20(struct ath_hal *ah, struct ath_rx_desc *ds,
				   a_uint32_t pa, struct ath_desc *nds,
				   struct ath_rx_status *rx_stats)
{
  90afe8:	6c1004        	entry	a1, 32
	struct ar5416_desc ads;
	struct ar5416_desc *adsp = AR5416DESC(ds);
	struct ar5416_desc *ands = AR5416DESC(nds);

	if ((adsp->ds_rxstatus8 & AR_RxDone) == 0)
  90afeb:	293030        	l8ui	a9, a3, 48
  90afee:	223031        	l8ui	a2, a3, 49
  90aff1:	283032        	l8ui	a8, a3, 50
  90aff4:	089910        	slli	a9, a9, 24
  90aff7:	002211        	slli	a2, a2, 16
  90affa:	092202        	or	a2, a2, a9
  90affd:	088811        	slli	a8, a8, 8
  90b000:	028802        	or	a8, a8, a2
  90b003:	223033        	l8ui	a2, a3, 51
  90b006:	082802        	or	a8, a2, a8
		return HAL_EINPROGRESS;
  90b009:	c02f      	movi.n	a2, 15
{
	struct ar5416_desc ads;
	struct ar5416_desc *adsp = AR5416DESC(ds);
	struct ar5416_desc *ands = AR5416DESC(nds);

	if ((adsp->ds_rxstatus8 & AR_RxDone) == 0)
  90b00b:	7f8f02        	bbsi	a8, 31, 90b011 <ar5416ProcRxDescFast_20+0x29>
  90b00e:	6001be        	j	90b1d0 <ar5416ProcRxDescFast_20+0x1e8>
	/*
	 * Given the use of a self-linked tail be very sure that the hw is
	 * done with this descriptor; the hw may have done this descriptor
	 * once and picked it up again...make sure the hw has moved on.
	 */
	if ((ands->ds_rxstatus8 & AR_RxDone) == 0
  90b011:	255033        	l8ui	a5, a5, 51
  90b014:	7f5f0d        	bbsi	a5, 31, 90b025 <ar5416ProcRxDescFast_20+0x3d>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90b017:	156aaf        	l32r	a5, 8e5ad4 <vdesc_module_install+0xac4>
  90b01a:	0c0200        	memw
  90b01d:	8550      	l32i.n	a5, a5, 0
	    && ioread32_mac(AR_RXDP) == pa)
  90b01f:	745902        	bne	a5, a4, 90b025 <ar5416ProcRxDescFast_20+0x3d>
  90b022:	6001aa        	j	90b1d0 <ar5416ProcRxDescFast_20+0x1e8>
	 * Next we fill in all values in a caller passed stack variable.
	 * This reduces the number of uncached accesses.
	 * Do this copy here, after the check so that when the checks fail, we
	 * dont end up copying the entire stats uselessly.
	 */
	ads.u.rx = adsp->u.rx;
  90b025:	243010        	l8ui	a4, a3, 16
  90b028:	223011        	l8ui	a2, a3, 17
  90b02b:	2a3012        	l8ui	a10, a3, 18
  90b02e:	084410        	slli	a4, a4, 24
  90b031:	002211        	slli	a2, a2, 16
  90b034:	042202        	or	a2, a2, a4
  90b037:	08aa11        	slli	a10, a10, 8
  90b03a:	02aa02        	or	a10, a10, a2
  90b03d:	223013        	l8ui	a2, a3, 19
  90b040:	243014        	l8ui	a4, a3, 20
  90b043:	0a2a02        	or	a10, a2, a10
  90b046:	223015        	l8ui	a2, a3, 21
  90b049:	2b3016        	l8ui	a11, a3, 22
  90b04c:	084410        	slli	a4, a4, 24
  90b04f:	002211        	slli	a2, a2, 16
  90b052:	042202        	or	a2, a2, a4
  90b055:	08bb11        	slli	a11, a11, 8
  90b058:	02bb02        	or	a11, a11, a2
  90b05b:	223017        	l8ui	a2, a3, 23
  90b05e:	243018        	l8ui	a4, a3, 24
  90b061:	0b2b02        	or	a11, a2, a11
  90b064:	223019        	l8ui	a2, a3, 25
  90b067:	2c301a        	l8ui	a12, a3, 26
  90b06a:	084410        	slli	a4, a4, 24
  90b06d:	002211        	slli	a2, a2, 16
  90b070:	042202        	or	a2, a2, a4
  90b073:	08cc11        	slli	a12, a12, 8
  90b076:	02cc02        	or	a12, a12, a2
  90b079:	22301b        	l8ui	a2, a3, 27
  90b07c:	25301c        	l8ui	a5, a3, 28
  90b07f:	24301d        	l8ui	a4, a3, 29
  90b082:	0c2c02        	or	a12, a2, a12
  90b085:	22301e        	l8ui	a2, a3, 30
  90b088:	085510        	slli	a5, a5, 24
  90b08b:	004411        	slli	a4, a4, 16
  90b08e:	054402        	or	a4, a4, a5
  90b091:	082211        	slli	a2, a2, 8
  90b094:	042202        	or	a2, a2, a4
  90b097:	24301f        	l8ui	a4, a3, 31
  90b09a:	253020        	l8ui	a5, a3, 32
  90b09d:	024202        	or	a2, a4, a2
  90b0a0:	243021        	l8ui	a4, a3, 33
  90b0a3:	293022        	l8ui	a9, a3, 34
  90b0a6:	085510        	slli	a5, a5, 24
  90b0a9:	004411        	slli	a4, a4, 16
  90b0ac:	054402        	or	a4, a4, a5
  90b0af:	089911        	slli	a9, a9, 8
  90b0b2:	049902        	or	a9, a9, a4
  90b0b5:	243023        	l8ui	a4, a3, 35
  90b0b8:	2d3024        	l8ui	a13, a3, 36
  90b0bb:	253025        	l8ui	a5, a3, 37
  90b0be:	094902        	or	a9, a4, a9
  90b0c1:	243026        	l8ui	a4, a3, 38
  90b0c4:	08dd10        	slli	a13, a13, 24
  90b0c7:	005511        	slli	a5, a5, 16
  90b0ca:	0d5502        	or	a5, a5, a13
  90b0cd:	084411        	slli	a4, a4, 8
  90b0d0:	054402        	or	a4, a4, a5
  90b0d3:	253027        	l8ui	a5, a3, 39
  90b0d6:	2e3028        	l8ui	a14, a3, 40
  90b0d9:	2d3029        	l8ui	a13, a3, 41
  90b0dc:	045402        	or	a4, a5, a4
  90b0df:	25302a        	l8ui	a5, a3, 42
  90b0e2:	08ee10        	slli	a14, a14, 24
  90b0e5:	00dd11        	slli	a13, a13, 16
  90b0e8:	23302b        	l8ui	a3, a3, 43
  90b0eb:	0edd02        	or	a13, a13, a14
  90b0ee:	085511        	slli	a5, a5, 8
  90b0f1:	0d5502        	or	a5, a5, a13
  90b0f4:	053502        	or	a5, a3, a5

	rx_stats->rs_status = 0;
  90b0f7:	c030      	movi.n	a3, 0
  90b0f9:	23640a        	s8i	a3, a6, 10
	rx_stats->rs_flags = 0;
  90b0fc:	23641a        	s8i	a3, a6, 26

	rx_stats->rs_datalen = ads.ds_rxstatus1 & AR_DataLen;
  90b0ff:	0b034b        	extui	a3, a11, 0, 12
  90b102:	236504        	s16i	a3, a6, 8
	rx_stats->rs_tstamp =  ads.AR_RcvTimestamp;
  90b105:	c030      	movi.n	a3, 0
  90b107:	9360      	s32i.n	a3, a6, 0
  90b109:	9c61      	s32i.n	a12, a6, 4

	/* XXX what about KeyCacheMiss? */
	rx_stats->rs_rssi_combined = 
		MS(ads.ds_rxstatus4, AR_RxRSSICombined);
  90b10b:	098357        	extui	a3, a9, 24, 8

	rx_stats->rs_datalen = ads.ds_rxstatus1 & AR_DataLen;
	rx_stats->rs_tstamp =  ads.AR_RcvTimestamp;

	/* XXX what about KeyCacheMiss? */
	rx_stats->rs_rssi_combined = 
  90b10e:	23640c        	s8i	a3, a6, 12
		MS(ads.ds_rxstatus4, AR_RxRSSICombined);
	rx_stats->rs_rssi_ctl0 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt00);
	rx_stats->rs_rssi_ctl1 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt01);
  90b111:	0a8347        	extui	a3, a10, 8, 8
  90b114:	23640e        	s8i	a3, a6, 14
	rx_stats->rs_rssi_ctl2 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt02);
  90b117:	0a0357        	extui	a3, a10, 16, 8
  90b11a:	23640f        	s8i	a3, a6, 15
	rx_stats->rs_rssi_ext0 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt10);
	rx_stats->rs_rssi_ext1 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt11);
  90b11d:	098347        	extui	a3, a9, 8, 8
  90b120:	236411        	s8i	a3, a6, 17
	rx_stats->rs_rssi_ext2 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt12);
  90b123:	090357        	extui	a3, a9, 16, 8
  90b126:	236412        	s8i	a3, a6, 18
	rx_stats->rs_tstamp =  ads.AR_RcvTimestamp;

	/* XXX what about KeyCacheMiss? */
	rx_stats->rs_rssi_combined = 
		MS(ads.ds_rxstatus4, AR_RxRSSICombined);
	rx_stats->rs_rssi_ctl0 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt00);
  90b129:	2a640d        	s8i	a10, a6, 13
	rx_stats->rs_rssi_ctl1 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt01);
	rx_stats->rs_rssi_ctl2 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt02);
	rx_stats->rs_rssi_ext0 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt10);
  90b12c:	296410        	s8i	a9, a6, 16
	rx_stats->rs_rssi_ext1 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt11);
	rx_stats->rs_rssi_ext2 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt12);
	if (ads.ds_rxstatus8 & AR_RxKeyIdxValid)
		rx_stats->rs_keyix = MS(ads.ds_rxstatus8, AR_KeyIdx);
  90b12f:	089346        	extui	a3, a8, 9, 7
	rx_stats->rs_rssi_ctl1 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt01);
	rx_stats->rs_rssi_ctl2 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt02);
	rx_stats->rs_rssi_ext0 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt10);
	rx_stats->rs_rssi_ext1 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt11);
	rx_stats->rs_rssi_ext2 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt12);
	if (ads.ds_rxstatus8 & AR_RxKeyIdxValid)
  90b132:	778f02        	bbsi	a8, 23, 90b138 <ar5416ProcRxDescFast_20+0x150>
		rx_stats->rs_keyix = MS(ads.ds_rxstatus8, AR_KeyIdx);
	else
		rx_stats->rs_keyix = HAL_RXKEYIX_INVALID;
  90b135:	23faff        	movi	a3, -1
  90b138:	236413        	s8i	a3, a6, 19
	/* NB: caller expected to do rate table mapping */
	rx_stats->rs_rate = RXSTATUS_RATE(ah, (&ads));
	rx_stats->rs_more = (ads.ds_rxstatus1 & AR_RxMore) ? 1 : 0;

	rx_stats->rs_isaggr = (ads.ds_rxstatus8 & AR_RxAggr) ? 1 : 0;
  90b13b:	081350        	extui	a3, a8, 17, 1
  90b13e:	236417        	s8i	a3, a6, 23
	rx_stats->rs_moreaggr = (ads.ds_rxstatus8 & AR_RxMoreAggr) ? 1 : 0;
  90b141:	080350        	extui	a3, a8, 16, 1
	if (ads.ds_rxstatus8 & AR_RxKeyIdxValid)
		rx_stats->rs_keyix = MS(ads.ds_rxstatus8, AR_KeyIdx);
	else
		rx_stats->rs_keyix = HAL_RXKEYIX_INVALID;
	/* NB: caller expected to do rate table mapping */
	rx_stats->rs_rate = RXSTATUS_RATE(ah, (&ads));
  90b144:	0a8a57        	extui	a10, a10, 24, 8
	rx_stats->rs_more = (ads.ds_rxstatus1 & AR_RxMore) ? 1 : 0;
  90b147:	0bcb40        	extui	a11, a11, 12, 1

	rx_stats->rs_isaggr = (ads.ds_rxstatus8 & AR_RxAggr) ? 1 : 0;
	rx_stats->rs_moreaggr = (ads.ds_rxstatus8 & AR_RxMoreAggr) ? 1 : 0;
  90b14a:	236418        	s8i	a3, a6, 24
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_GI) ? HAL_RX_GI : 0;
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_2040) ? HAL_RX_2040 : 0;
  90b14d:	c032      	movi.n	a3, 2
	if (ads.ds_rxstatus8 & AR_RxKeyIdxValid)
		rx_stats->rs_keyix = MS(ads.ds_rxstatus8, AR_KeyIdx);
	else
		rx_stats->rs_keyix = HAL_RXKEYIX_INVALID;
	/* NB: caller expected to do rate table mapping */
	rx_stats->rs_rate = RXSTATUS_RATE(ah, (&ads));
  90b14f:	2a6414        	s8i	a10, a6, 20
	rx_stats->rs_more = (ads.ds_rxstatus1 & AR_RxMore) ? 1 : 0;
  90b152:	2b6416        	s8i	a11, a6, 22

	rx_stats->rs_isaggr = (ads.ds_rxstatus8 & AR_RxAggr) ? 1 : 0;
	rx_stats->rs_moreaggr = (ads.ds_rxstatus8 & AR_RxMoreAggr) ? 1 : 0;
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_GI) ? HAL_RX_GI : 0;
  90b155:	020a40        	extui	a10, a2, 0, 1
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_2040) ? HAL_RX_2040 : 0;
  90b158:	c0b0      	movi.n	a11, 0
  90b15a:	032201        	and	a2, a2, a3
  90b15d:	c038      	movi.n	a3, 8
	rx_stats->rs_rate = RXSTATUS_RATE(ah, (&ads));
	rx_stats->rs_more = (ads.ds_rxstatus1 & AR_RxMore) ? 1 : 0;

	rx_stats->rs_isaggr = (ads.ds_rxstatus8 & AR_RxAggr) ? 1 : 0;
	rx_stats->rs_moreaggr = (ads.ds_rxstatus8 & AR_RxMoreAggr) ? 1 : 0;
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_GI) ? HAL_RX_GI : 0;
  90b15f:	0eaa11        	slli	a10, a10, 2
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_2040) ? HAL_RX_2040 : 0;
  90b162:	02b338        	moveqz	a3, a11, a2
  90b165:	0a3302        	or	a3, a3, a10

	if (ads.ds_rxstatus8 & AR_PreDelimCRCErr)
  90b168:	798f02        	bbsi	a8, 25, 90b16e <ar5416ProcRxDescFast_20+0x186>
  90b16b:	600004        	j	90b173 <ar5416ProcRxDescFast_20+0x18b>
		rx_stats->rs_flags |= HAL_RX_DELIM_CRC_PRE;
  90b16e:	c120      	movi.n	a2, 16
  90b170:	023302        	or	a3, a3, a2
  90b173:	23641a        	s8i	a3, a6, 26
	if (ads.ds_rxstatus8 & AR_PostDelimCRCErr)
  90b176:	7d860a        	bbci	a8, 13, 90b184 <ar5416ProcRxDescFast_20+0x19c>
		rx_stats->rs_flags |= HAL_RX_DELIM_CRC_POST;
  90b179:	23601a        	l8ui	a3, a6, 26
  90b17c:	c220      	movi.n	a2, 32
  90b17e:	023202        	or	a2, a3, a2
  90b181:	22641a        	s8i	a2, a6, 26
	if (ads.ds_rxstatus8 & AR_DecryptBusyErr)
  90b184:	71860a        	bbci	a8, 1, 90b192 <ar5416ProcRxDescFast_20+0x1aa>
		rx_stats->rs_flags |= HAL_RX_DECRYPT_BUSY;
  90b187:	23601a        	l8ui	a3, a6, 26
  90b18a:	c420      	movi.n	a2, 64
  90b18c:	023202        	or	a2, a3, a2
  90b18f:	22641a        	s8i	a2, a6, 26

	if ((ads.ds_rxstatus8 & AR_RxFrameOK) == 0) {
  90b192:	c032      	movi.n	a3, 2
  90b194:	73882f        	bany	a8, a3, 90b1c7 <ar5416ProcRxDescFast_20+0x1df>
		 * when a CRC error is detected, but these are specious.
		 * Consequently we filter them out here so we don't
		 * confuse and/or complicate drivers.
		 */
		if (ads.ds_rxstatus8 & AR_CRCErr)
			rx_stats->rs_status |= HAL_RXERR_CRC;
  90b197:	c021      	movi.n	a2, 1
		 * indicates however that you can also get Michael errors
		 * when a CRC error is detected, but these are specious.
		 * Consequently we filter them out here so we don't
		 * confuse and/or complicate drivers.
		 */
		if (ads.ds_rxstatus8 & AR_CRCErr)
  90b199:	7d8f27        	bbsi	a8, 29, 90b1c4 <ar5416ProcRxDescFast_20+0x1dc>
			rx_stats->rs_status |= HAL_RXERR_CRC;
		else if (ads.ds_rxstatus8 & AR_PHYErr) {
  90b19c:	c120      	movi.n	a2, 16
  90b19e:	728012        	bnone	a8, a2, 90b1b4 <ar5416ProcRxDescFast_20+0x1cc>
			a_uint32_t phyerr;

			rx_stats->rs_status |= HAL_RXERR_PHY;
			phyerr = MS(ads.ds_rxstatus8, AR_PHYErrCode);
  90b1a1:	126ab2        	l32r	a2, 8e5c6c <vdesc_module_install+0xc5c>
		if (ads.ds_rxstatus8 & AR_CRCErr)
			rx_stats->rs_status |= HAL_RXERR_CRC;
		else if (ads.ds_rxstatus8 & AR_PHYErr) {
			a_uint32_t phyerr;

			rx_stats->rs_status |= HAL_RXERR_PHY;
  90b1a4:	23640a        	s8i	a3, a6, 10
			phyerr = MS(ads.ds_rxstatus8, AR_PHYErrCode);
  90b1a7:	028801        	and	a8, a8, a2
  90b1aa:	088814        	srli	a8, a8, 8
			rx_stats->rs_phyerr = phyerr;
  90b1ad:	28640b        	s8i	a8, a6, 11
  90b1b0:	600013        	j	90b1c7 <ar5416ProcRxDescFast_20+0x1df>
  90b1b3:	00c038        	moveqz	a0, a12, a0
		} else if (ads.ds_rxstatus8 & AR_DecryptCRCErr)
  90b1b6:	738007        	bnone	a8, a3, 90b1c1 <ar5416ProcRxDescFast_20+0x1d9>
			rx_stats->rs_status |= HAL_RXERR_DECRYPT;
  90b1b9:	23640a        	s8i	a3, a6, 10
  90b1bc:	600007        	j	90b1c7 <ar5416ProcRxDescFast_20+0x1df>
  90b1bf:	00007a        	excw
		else if (ads.ds_rxstatus8 & AR_MichaelErr)
  90b1c2:	8702      	l32i.n	a7, a0, 8
			rx_stats->rs_status |= HAL_RXERR_MIC;
  90b1c4:	22640a        	s8i	a2, a6, 10
	}
	rx_stats->evm0=ads.AR_RxEVM0;
  90b1c7:	9967      	s32i.n	a9, a6, 28
	rx_stats->evm1=ads.AR_RxEVM1;
  90b1c9:	9468      	s32i.n	a4, a6, 32
	rx_stats->evm2=ads.AR_RxEVM2;
  90b1cb:	9569      	s32i.n	a5, a6, 36

	return HAL_OK;
  90b1cd:	220a00        	movi	a2, 0
}
  90b1d0:	d10f      	retw.n
	...

0090b1d4 <ar5416UpdateTxTrigLevel>:
/******/
/* TX */
/******/

HAL_BOOL ar5416UpdateTxTrigLevel(struct ath_hal *ah, HAL_BOOL bIncTrigLevel)
{
  90b1d4:	6c1004        	entry	a1, 32
        HAL_INT omask;

        /*
         * Disable interrupts while futzing with the fifo level.
         */
        omask = ar5416SetInterrupts(ah, ahp->ah_maskReg &~ HAL_INT_GLOBAL);
  90b1d7:	146ab3        	l32r	a4, 8e5ca4 <vdesc_module_install+0xc94>
  90b1da:	2b2236        	l32i	a11, a2, 216
  90b1dd:	da20      	mov.n	a10, a2
  90b1df:	04bb01        	and	a11, a11, a4
  90b1e2:	5bff2e        	call8	90ae9c <ar5416SetInterrupts>
  90b1e5:	146ab4        	l32r	a4, 8e5cb8 <vdesc_module_install+0xca8>
  90b1e8:	dba0      	mov.n	a11, a10
  90b1ea:	0c0200        	memw
  90b1ed:	8840      	l32i.n	a8, a4, 0

	txcfg = ioread32_mac(AR_TXCFG);
        curLevel = MS(txcfg, AR_FTRIG);
  90b1ef:	084445        	extui	a4, a8, 4, 6
        newLevel = curLevel;

        if (bIncTrigLevel)  {
  90b1f2:	c83a      	beqz.n	a3, 90b200 <ar5416UpdateTxTrigLevel+0x2c>
		if (curLevel < MAX_TX_FIFO_THRESHOLD)
  90b1f4:	c39f      	movi.n	a9, 63
  90b1f6:	d340      	mov.n	a3, a4
  90b1f8:	794128        	beq	a4, a9, 90b224 <ar5416UpdateTxTrigLevel+0x50>
			newLevel ++;
  90b1fb:	b143      	addi.n	a3, a4, 1
  90b1fd:	600006        	j	90b207 <ar5416UpdateTxTrigLevel+0x33>
        } else if (curLevel > MIN_TX_FIFO_THRESHOLD)
  90b200:	d340      	mov.n	a3, a4
  90b202:	6e421e        	bltui	a4, 2, 90b224 <ar5416UpdateTxTrigLevel+0x50>
                newLevel--;
  90b205:	b043      	addi.n	a3, a4, -1
        if (newLevel != curLevel)
  90b207:	743119        	beq	a3, a4, 90b224 <ar5416UpdateTxTrigLevel+0x50>
		iowrite32_mac(AR_TXCFG,
  90b20a:	0c3a11        	slli	a10, a3, 4
  90b20d:	293af0        	movi	a9, 0x3f0
  90b210:	09a901        	and	a9, a10, a9
  90b213:	2aca0f        	movi	a10, 0xfffffc0f
  90b216:	0a8801        	and	a8, a8, a10
  90b219:	089802        	or	a8, a9, a8
  90b21c:	196ab4        	l32r	a9, 8e5cec <vdesc_module_install+0xcdc>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90b21f:	0c0200        	memw
  90b222:	9890      	s32i.n	a8, a9, 0
			     (txcfg & ~AR_FTRIG) | SM(newLevel, AR_FTRIG));

        /* re-enable chip interrupts */
        ar5416SetInterrupts(ah, omask);
  90b224:	da20      	mov.n	a10, a2
  90b226:	5bff1d        	call8	90ae9c <ar5416SetInterrupts>

        return (newLevel != curLevel);
  90b229:	04340c        	sub	a4, a3, a4
  90b22c:	c081      	movi.n	a8, 1
  90b22e:	c020      	movi.n	a2, 0
  90b230:	048239        	movnez	a2, a8, a4
}
  90b233:	d10f      	retw.n
  90b235:	000000        	ill

0090b238 <ar5416SetTxDP>:

HAL_BOOL ar5416SetTxDP(struct ath_hal *ah, a_uint32_t q, a_uint32_t txdp)
{
  90b238:	6c1004        	entry	a1, 32
         * Make sure that TXE is deasserted before setting the TXDP.  If TXE
         * is still asserted, setting TXDP will have no effect.
         */
	HALASSERT((ioread32_mac(AR_Q_TXE) & (1 << q)) == 0);

	iowrite32_mac(AR_QTXDP(q), txdp);
  90b23b:	186ab5        	l32r	a8, 8e5d10 <vdesc_module_install+0xd00>

        return AH_TRUE;
}
  90b23e:	c021      	movi.n	a2, 1
         * Make sure that TXE is deasserted before setting the TXDP.  If TXE
         * is still asserted, setting TXDP will have no effect.
         */
	HALASSERT((ioread32_mac(AR_Q_TXE) & (1 << q)) == 0);

	iowrite32_mac(AR_QTXDP(q), txdp);
  90b240:	08330a        	addx4	a3, a3, a8
  90b243:	0c0200        	memw
  90b246:	9430      	s32i.n	a4, a3, 0

        return AH_TRUE;
}
  90b248:	d10f      	retw.n
	...

0090b24c <ar5416StartTxDma>:

HAL_BOOL ar5416StartTxDma(struct ath_hal *ah, a_uint32_t q)
{
  90b24c:	6c1004        	entry	a1, 32
        HALASSERT(AH5416(ah)->ah_txq[q].tqi_type != HAL_TX_QUEUE_INACTIVE);

        /* Check to be sure we're not enabling a q that has its TXD bit set. */
	HALASSERT((ioread32_mac(AR_Q_TXD) & (1 << q)) == 0);

	iowrite32_mac(AR_Q_TXE, 1 << q);
  90b24f:	c021      	movi.n	a2, 1
  90b251:	186ab6        	l32r	a8, 8e5d2c <vdesc_module_install+0xd1c>
  90b254:	003104        	ssl	a3
  90b257:	00231a        	sll	a3, a2
  90b25a:	0c0200        	memw
  90b25d:	9380      	s32i.n	a3, a8, 0

        return AH_TRUE;
}
  90b25f:	d10f      	retw.n
  90b261:	000000        	ill

0090b264 <ar5416NumTxPending>:

a_uint32_t ar5416NumTxPending(struct ath_hal *ah, a_uint32_t q)
{
  90b264:	6c1004        	entry	a1, 32
        a_uint32_t npend;

        HALASSERT(q < AH_PRIVATE(ah)->ah_caps.halTotalQueues);
        HALASSERT(AH5416(ah)->ah_txq[q].tqi_type != HAL_TX_QUEUE_INACTIVE);

	npend = ioread32_mac(AR_QSTS(q))
  90b267:	126ab7        	l32r	a2, 8e5d44 <vdesc_module_install+0xd34>
  90b26a:	02320a        	addx4	a2, a3, a2
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90b26d:	0c0200        	memw
  90b270:	8220      	l32i.n	a2, a2, 0
  90b272:	020241        	extui	a2, a2, 0, 2
		& AR_Q_STS_PEND_FR_CNT;
        if (npend == 0) {
  90b275:	cd24      	bnez.n	a2, 90b28d <ar5416NumTxPending+0x29>
  90b277:	186ab6        	l32r	a8, 8e5d50 <vdesc_module_install+0xd40>
  90b27a:	0c0200        	memw
  90b27d:	8980      	l32i.n	a9, a8, 0
                /*
                 * Pending frame count (PFC) can momentarily go to zero
                 * while TXE remains asserted.  In other words a PFC of
                 * zero is not sufficient to say that the queue has stopped.
                 */
		if (ioread32_mac(AR_Q_TXE) & (1 << q))
  90b27f:	c081      	movi.n	a8, 1
  90b281:	003104        	ssl	a3
  90b284:	00831a        	sll	a3, a8
  90b287:	093301        	and	a3, a3, a9
  90b28a:	038239        	movnez	a2, a8, a3
			iowrite32_mac(AR_Q_RDYTIMESHDN, 1 << q);
                }
        }
#endif
        return npend;
}
  90b28d:	d10f      	retw.n
	...

0090b290 <ar5416SetupTxDesc_20>:
			      a_uint32_t txRate0, a_uint32_t txTries0,
			      a_uint32_t keyIx,
			      a_uint32_t flags,
			      a_uint32_t rtsctsRate,
			      a_uint32_t rtsctsDuration)
{
  90b290:	6c1004        	entry	a1, 32
  90b293:	d820      	mov.n	a8, a2

        struct ar5416_desc *ads = AR5416DESC(ds);

        (void) hdrLen;

        ads->ds_txstatus9 &= ~AR_TxDone;
  90b295:	2b205c        	l8ui	a11, a2, 92
  90b298:	22205d        	l8ui	a2, a2, 93
  90b29b:	2a805e        	l8ui	a10, a8, 94
  90b29e:	08bb10        	slli	a11, a11, 24
  90b2a1:	002211        	slli	a2, a2, 16
  90b2a4:	0b2202        	or	a2, a2, a11
  90b2a7:	08aa11        	slli	a10, a10, 8
  90b2aa:	02aa02        	or	a10, a10, a2
  90b2ad:	22805f        	l8ui	a2, a8, 95
			      a_uint32_t txRate0, a_uint32_t txTries0,
			      a_uint32_t keyIx,
			      a_uint32_t flags,
			      a_uint32_t rtsctsRate,
			      a_uint32_t rtsctsDuration)
{
  90b2b0:	891a      	l32i.n	a9, a1, 40

        struct ar5416_desc *ads = AR5416DESC(ds);

        (void) hdrLen;

        ads->ds_txstatus9 &= ~AR_TxDone;
  90b2b2:	0a2a02        	or	a10, a2, a10
  90b2b5:	c72e      	movi.n	a2, -2
  90b2b7:	02aa01        	and	a10, a10, a2
  90b2ba:	0a8257        	extui	a2, a10, 24, 8
  90b2bd:	22845c        	s8i	a2, a8, 92
  90b2c0:	0a0257        	extui	a2, a10, 16, 8
  90b2c3:	22845d        	s8i	a2, a8, 93
  90b2c6:	0a8247        	extui	a2, a10, 8, 8
  90b2c9:	22845e        	s8i	a2, a8, 94

        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
		| (txPower << AR_XmitPower_S)
  90b2cc:	c32f      	movi.n	a2, 63
  90b2ce:	026636        	minu	a6, a6, a2
        HALASSERT((flags & RTSCTS) != RTSCTS);

        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  90b2d1:	03034b        	extui	a3, a3, 0, 12
		| (txPower << AR_XmitPower_S)
  90b2d4:	006211        	slli	a2, a6, 16
  90b2d7:	032202        	or	a2, a2, a3
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  90b2da:	c2b0      	movi.n	a11, 32
  90b2dc:	136aa7        	l32r	a3, 8e5d78 <vdesc_module_install+0xd68>

        struct ar5416_desc *ads = AR5416DESC(ds);

        (void) hdrLen;

        ads->ds_txstatus9 &= ~AR_TxDone;
  90b2df:	2a845f        	s8i	a10, a8, 95
        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  90b2e2:	0b9b01        	and	a11, a9, a11
  90b2e5:	c0a0      	movi.n	a10, 0
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  90b2e7:	1e6ab8        	l32r	a14, 8e5dc8 <vdesc_module_install+0xdb8>
        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  90b2ea:	0ba338        	moveqz	a3, a10, a11
  90b2ed:	032b02        	or	a11, a2, a3
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  90b2f0:	090340        	extui	a3, a9, 0, 1
  90b2f3:	d2a0      	mov.n	a2, a10
  90b2f5:	03e239        	movnez	a2, a14, a3
  90b2f8:	02bb02        	or	a11, a11, a2
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);
  90b2fb:	136ab9        	l32r	a3, 8e5de0 <vdesc_module_install+0xdd0>
  90b2fe:	c120      	movi.n	a2, 16
  90b300:	029c01        	and	a12, a9, a2
  90b303:	0ca338        	moveqz	a3, a10, a12
  90b306:	03bb02        	or	a11, a11, a3
        HALASSERT((flags & RTSCTS) != RTSCTS);

        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  90b309:	0b8357        	extui	a3, a11, 24, 8
  90b30c:	238408        	s8i	a3, a8, 8
  90b30f:	0b0357        	extui	a3, a11, 16, 8
  90b312:	238409        	s8i	a3, a8, 9
  90b315:	0b8347        	extui	a3, a11, 8, 8
  90b318:	23840a        	s8i	a3, a8, 10
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);

        ads->ds_ctl1 = (type << AR_FrameType_S)
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
  90b31b:	c032      	movi.n	a3, 2
  90b31d:	039c01        	and	a12, a9, a3
  90b320:	0cae38        	moveqz	a14, a10, a12
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);

        ads->ds_ctl1 = (type << AR_FrameType_S)
  90b323:	0c5510        	slli	a5, a5, 20
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
  90b326:	05ec02        	or	a12, a14, a5
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);

        ads->ds_ctl1 = (type << AR_FrameType_S)
  90b329:	0c8457        	extui	a4, a12, 24, 8
  90b32c:	24840c        	s8i	a4, a8, 12
  90b32f:	0c0457        	extui	a4, a12, 16, 8
  90b332:	24840d        	s8i	a4, a8, 13
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
        ads->ds_ctl2 = SM(txTries0, AR_XmitDataTries0);
  90b335:	8e18      	l32i.n	a14, a1, 32
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);

        ads->ds_ctl1 = (type << AR_FrameType_S)
  90b337:	0c8447        	extui	a4, a12, 8, 8
  90b33a:	24840e        	s8i	a4, a8, 14
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
        ads->ds_ctl2 = SM(txTries0, AR_XmitDataTries0);
  90b33d:	146abb        	l32r	a4, 8e5e2c <vdesc_module_install+0xe1c>
  90b340:	002104        	ssl	a2
  90b343:	00ee1a        	sll	a14, a14
  90b346:	04ee01        	and	a14, a14, a4
  90b349:	0e8457        	extui	a4, a14, 24, 8
  90b34c:	248410        	s8i	a4, a8, 16
  90b34f:	0e0457        	extui	a4, a14, 16, 8
  90b352:	248411        	s8i	a4, a8, 17
        ads->ds_ctl3 = (txRate0 << AR_XmitRate0_S);
  90b355:	078457        	extui	a4, a7, 24, 8
  90b358:	248414        	s8i	a4, a8, 20
  90b35b:	070457        	extui	a4, a7, 16, 8
  90b35e:	248415        	s8i	a4, a8, 21
  90b361:	078447        	extui	a4, a7, 8, 8
        HALASSERT((flags & RTSCTS) != RTSCTS);

        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  90b364:	2b840b        	s8i	a11, a8, 11
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);

        ads->ds_ctl1 = (type << AR_FrameType_S)
  90b367:	2c840f        	s8i	a12, a8, 15
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
        ads->ds_ctl2 = SM(txTries0, AR_XmitDataTries0);
  90b36a:	2a8412        	s8i	a10, a8, 18
  90b36d:	2a8413        	s8i	a10, a8, 19
        ads->ds_ctl3 = (txRate0 << AR_XmitRate0_S);
  90b370:	248416        	s8i	a4, a8, 22
  90b373:	278417        	s8i	a7, a8, 23

        ads->ds_ctl7 = SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel0) 
  90b376:	2a8424        	s8i	a10, a8, 36
			      a_uint32_t txRate0, a_uint32_t txTries0,
			      a_uint32_t keyIx,
			      a_uint32_t flags,
			      a_uint32_t rtsctsRate,
			      a_uint32_t rtsctsDuration)
{
  90b379:	8f19      	l32i.n	a15, a1, 36
  90b37b:	2d120b        	l32i	a13, a1, 44
        ads->ds_ctl1 = (type << AR_FrameType_S)
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
        ads->ds_ctl2 = SM(txTries0, AR_XmitDataTries0);
        ads->ds_ctl3 = (txRate0 << AR_XmitRate0_S);

        ads->ds_ctl7 = SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel0) 
  90b37e:	238425        	s8i	a3, a8, 37
  90b381:	228426        	s8i	a2, a8, 38
  90b384:	22fa84        	movi	a2, -124
  90b387:	228427        	s8i	a2, a8, 39
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel1)
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel2) 
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel3);

        if (keyIx != HAL_TXKEYIX_INVALID) {
  90b38a:	220aff        	movi	a2, 255
  90b38d:	72f13b        	beq	a15, a2, 90b3cc <ar5416SetupTxDesc_20+0x13c>
                /* XXX validate key index */
                ads->ds_ctl1 |= SM(keyIx, AR_DestIdx);
  90b390:	126abc        	l32r	a2, 8e5e80 <vdesc_module_install+0xe70>
  90b393:	03ff11        	slli	a15, a15, 13
  90b396:	02ff01        	and	a15, a15, a2
  90b399:	0fcc02        	or	a12, a12, a15
  90b39c:	0c8257        	extui	a2, a12, 24, 8
  90b39f:	22840c        	s8i	a2, a8, 12
  90b3a2:	0c0257        	extui	a2, a12, 16, 8
  90b3a5:	22840d        	s8i	a2, a8, 13
  90b3a8:	0c8247        	extui	a2, a12, 8, 8
  90b3ab:	22840e        	s8i	a2, a8, 14
                ads->ds_ctl0 |= AR_DestIdxValid;
  90b3ae:	126abd        	l32r	a2, 8e5ea4 <vdesc_module_install+0xe94>
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel2) 
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel3);

        if (keyIx != HAL_TXKEYIX_INVALID) {
                /* XXX validate key index */
                ads->ds_ctl1 |= SM(keyIx, AR_DestIdx);
  90b3b1:	2c840f        	s8i	a12, a8, 15
                ads->ds_ctl0 |= AR_DestIdxValid;
  90b3b4:	02bb02        	or	a11, a11, a2
  90b3b7:	0b8257        	extui	a2, a11, 24, 8
  90b3ba:	228408        	s8i	a2, a8, 8
  90b3bd:	0b0257        	extui	a2, a11, 16, 8
  90b3c0:	228409        	s8i	a2, a8, 9
  90b3c3:	0b8247        	extui	a2, a11, 8, 8
  90b3c6:	22840a        	s8i	a2, a8, 10
  90b3c9:	2b840b        	s8i	a11, a8, 11
        }

        if (flags & RTSCTS) {
  90b3cc:	c03c      	movi.n	a3, 12
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
        }
        return AH_TRUE;
  90b3ce:	c021      	movi.n	a2, 1
                /* XXX validate key index */
                ads->ds_ctl1 |= SM(keyIx, AR_DestIdx);
                ads->ds_ctl0 |= AR_DestIdxValid;
        }

        if (flags & RTSCTS) {
  90b3d0:	739802        	bany	a9, a3, 90b3d6 <ar5416SetupTxDesc_20+0x146>
  90b3d3:	60009d        	j	90b474 <ar5416SetupTxDesc_20+0x1e4>
                if (!isValidTxRate(rtsctsRate)) {
  90b3d6:	1a6abe        	l32r	a10, 8e5ed0 <vdesc_module_install+0xec0>
  90b3d9:	00d004        	ssr	a13
  90b3dc:	0a0a1b        	sra	a10, a10
  90b3df:	02aa01        	and	a10, a10, a2
  90b3e2:	64a08c        	beqz	a10, 90b472 <ar5416SetupTxDesc_20+0x1e2>
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b3e5:	2a8008        	l8ui	a10, a8, 8
  90b3e8:	2b8009        	l8ui	a11, a8, 9
  90b3eb:	23800a        	l8ui	a3, a8, 10
  90b3ee:	08aa10        	slli	a10, a10, 24
  90b3f1:	00bb11        	slli	a11, a11, 16
  90b3f4:	0abb02        	or	a11, a11, a10
  90b3f7:	083311        	slli	a3, a3, 8
  90b3fa:	2a800b        	l8ui	a10, a8, 11
  90b3fd:	0b3302        	or	a3, a3, a11
  90b400:	03a302        	or	a3, a10, a3
  90b403:	1c6a0f        	l32r	a12, 8e5c40 <vdesc_module_install+0xc30>
  90b406:	c0a8      	movi.n	a10, 8
  90b408:	0a9a01        	and	a10, a9, a10
  90b40b:	c0b0      	movi.n	a11, 0
  90b40d:	0abc38        	moveqz	a12, a11, a10
  90b410:	dac0      	mov.n	a10, a12
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
  90b412:	c0c4      	movi.n	a12, 4
  90b414:	0c9901        	and	a9, a9, a12
  90b417:	1c6aba        	l32r	a12, 8e5f00 <vdesc_module_install+0xef0>
  90b41a:	03aa02        	or	a10, a10, a3
  90b41d:	09cb39        	movnez	a11, a12, a9
        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b420:	0baa02        	or	a10, a10, a11
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b423:	891c      	l32i.n	a9, a1, 48
        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b425:	0a8357        	extui	a3, a10, 24, 8
  90b428:	238408        	s8i	a3, a8, 8
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b42b:	09094e        	extui	a9, a9, 0, 15
        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b42e:	0a0357        	extui	a3, a10, 16, 8
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b431:	0e9902        	or	a9, a9, a14
        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b434:	238409        	s8i	a3, a8, 9
  90b437:	0a8347        	extui	a3, a10, 8, 8
  90b43a:	23840a        	s8i	a3, a8, 10
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b43d:	098357        	extui	a3, a9, 24, 8
  90b440:	238410        	s8i	a3, a8, 16
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
  90b443:	0cdd10        	slli	a13, a13, 20
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b446:	090357        	extui	a3, a9, 16, 8
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
  90b449:	07d702        	or	a7, a13, a7
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b44c:	238411        	s8i	a3, a8, 17
  90b44f:	098346        	extui	a3, a9, 8, 7
  90b452:	238412        	s8i	a3, a8, 18
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
  90b455:	078357        	extui	a3, a7, 24, 8
  90b458:	238414        	s8i	a3, a8, 20
  90b45b:	070357        	extui	a3, a7, 16, 8
  90b45e:	238415        	s8i	a3, a8, 21
  90b461:	078347        	extui	a3, a7, 8, 8
        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90b464:	2a840b        	s8i	a10, a8, 11
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90b467:	298413        	s8i	a9, a8, 19
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
  90b46a:	238416        	s8i	a3, a8, 22
  90b46d:	278417        	s8i	a7, a8, 23
  90b470:	d10f      	retw.n
                ads->ds_ctl0 |= AR_DestIdxValid;
        }

        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
  90b472:	d2a0      	mov.n	a2, a10
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
        }
        return AH_TRUE;

#undef RTSCTS
}
  90b474:	d10f      	retw.n
	...

0090b478 <ar5416FillTxDesc_20>:

HAL_BOOL ar5416FillTxDesc_20(struct ath_tx_desc *ds,
			     a_uint32_t segLen, HAL_BOOL firstSeg, HAL_BOOL lastSeg,
			     const struct ath_tx_desc *ds0)
{
  90b478:	6c1004        	entry	a1, 32
        struct ar5416_desc *ads = AR5416DESC(ds);

        HALASSERT((segLen &~ AR_BufLen) == 0);

        if (firstSeg) {
  90b47b:	644045        	beqz	a4, 90b4c4 <ar5416FillTxDesc_20+0x4c>
                /*
                 * First descriptor, don't clobber xmit control data
                 * setup by ar5416SetupTxDesc.
                 */
                ads->ds_ctl1 |= segLen | (lastSeg ? 0 : AR_TxMore);
  90b47e:	28200c        	l8ui	a8, a2, 12
  90b481:	24200d        	l8ui	a4, a2, 13
  90b484:	26200e        	l8ui	a6, a2, 14
  90b487:	088810        	slli	a8, a8, 24
  90b48a:	004411        	slli	a4, a4, 16
  90b48d:	084402        	or	a4, a4, a8
  90b490:	086611        	slli	a6, a6, 8
  90b493:	046602        	or	a6, a6, a4
  90b496:	24200f        	l8ui	a4, a2, 15
  90b499:	186a90        	l32r	a8, 8e5edc <vdesc_module_install+0xecc>
  90b49c:	064602        	or	a6, a4, a6
  90b49f:	c040      	movi.n	a4, 0
  90b4a1:	058438        	moveqz	a4, a8, a5
  90b4a4:	063302        	or	a3, a3, a6
  90b4a7:	043302        	or	a3, a3, a4
  90b4aa:	038457        	extui	a4, a3, 24, 8
  90b4ad:	24240c        	s8i	a4, a2, 12
  90b4b0:	030457        	extui	a4, a3, 16, 8
  90b4b3:	24240d        	s8i	a4, a2, 13
  90b4b6:	038447        	extui	a4, a3, 8, 8
  90b4b9:	24240e        	s8i	a4, a2, 14
  90b4bc:	23240f        	s8i	a3, a2, 15
  90b4bf:	6000cd        	j	90b590 <ar5416FillTxDesc_20+0x118>
  90b4c2:	000064        	excw
        } else if (lastSeg) {
  90b4c5:	508924        	call0	92d958 <_etext+0x1e85b>
                /*
                 * Last descriptor in a multi-descriptor frame,
                 * copy the multi-rate transmit parameters from
                 * the first frame for processing on completion.
                 */
                ads->ds_ctl0 = 0;
  90b4c8:	240824        	excw
  90b4cb:	240924        	l16si	a4, a0, 72
  90b4ce:	240a24        	movi	a4, 36
  90b4d1:	240b03        	l32ai	a4, a0, 12
                ads->ds_ctl1 = segLen;
  90b4d4:	8457      	l32i.n	a4, a5, 28
  90b4d6:	24240c        	s8i	a4, a2, 12
  90b4d9:	030457        	extui	a4, a3, 16, 8
  90b4dc:	24240d        	s8i	a4, a2, 13
  90b4df:	038447        	extui	a4, a3, 8, 8
  90b4e2:	24240e        	s8i	a4, a2, 14
  90b4e5:	23240f        	s8i	a3, a2, 15
                ads->ds_ctl2 = AR5416DESC_CONST(ds0)->ds_ctl2;
  90b4e8:	256010        	l8ui	a5, a6, 16
  90b4eb:	246011        	l8ui	a4, a6, 17
  90b4ee:	236012        	l8ui	a3, a6, 18
  90b4f1:	085510        	slli	a5, a5, 24
  90b4f4:	004411        	slli	a4, a4, 16
  90b4f7:	054402        	or	a4, a4, a5
  90b4fa:	083311        	slli	a3, a3, 8
  90b4fd:	043302        	or	a3, a3, a4
  90b500:	246013        	l8ui	a4, a6, 19
  90b503:	034302        	or	a3, a4, a3
  90b506:	038457        	extui	a4, a3, 24, 8
  90b509:	242410        	s8i	a4, a2, 16
  90b50c:	030457        	extui	a4, a3, 16, 8
  90b50f:	242411        	s8i	a4, a2, 17
  90b512:	038447        	extui	a4, a3, 8, 8
  90b515:	242412        	s8i	a4, a2, 18
  90b518:	232413        	s8i	a3, a2, 19
                ads->ds_ctl3 = AR5416DESC_CONST(ds0)->ds_ctl3;
  90b51b:	256014        	l8ui	a5, a6, 20
  90b51e:	246015        	l8ui	a4, a6, 21
  90b521:	236016        	l8ui	a3, a6, 22
  90b524:	085510        	slli	a5, a5, 24
  90b527:	004411        	slli	a4, a4, 16
  90b52a:	054402        	or	a4, a4, a5
  90b52d:	083311        	slli	a3, a3, 8
  90b530:	043302        	or	a3, a3, a4
  90b533:	246017        	l8ui	a4, a6, 23
  90b536:	034302        	or	a3, a4, a3
  90b539:	038457        	extui	a4, a3, 24, 8
  90b53c:	242414        	s8i	a4, a2, 20
  90b53f:	030457        	extui	a4, a3, 16, 8
  90b542:	242415        	s8i	a4, a2, 21
  90b545:	038447        	extui	a4, a3, 8, 8
  90b548:	242416        	s8i	a4, a2, 22
  90b54b:	232417        	s8i	a3, a2, 23
  90b54e:	60003e        	j	90b590 <ar5416FillTxDesc_20+0x118>
        } else {
                /*
                 * Intermediate descriptor in a multi-descriptor frame.
                 */
                ads->ds_ctl0 = 0;
                ads->ds_ctl1 = segLen | AR_TxMore;
  90b551:	146a90        	l32r	a4, 8e5f94 <vdesc_module_install+0xf84>
                ads->ds_ctl3 = AR5416DESC_CONST(ds0)->ds_ctl3;
        } else {
                /*
                 * Intermediate descriptor in a multi-descriptor frame.
                 */
                ads->ds_ctl0 = 0;
  90b554:	252408        	s8i	a5, a2, 8
                ads->ds_ctl1 = segLen | AR_TxMore;
  90b557:	043302        	or	a3, a3, a4
  90b55a:	038457        	extui	a4, a3, 24, 8
  90b55d:	24240c        	s8i	a4, a2, 12
  90b560:	030457        	extui	a4, a3, 16, 8
  90b563:	24240d        	s8i	a4, a2, 13
  90b566:	038447        	extui	a4, a3, 8, 8
                ads->ds_ctl3 = AR5416DESC_CONST(ds0)->ds_ctl3;
        } else {
                /*
                 * Intermediate descriptor in a multi-descriptor frame.
                 */
                ads->ds_ctl0 = 0;
  90b569:	252409        	s8i	a5, a2, 9
  90b56c:	25240a        	s8i	a5, a2, 10
  90b56f:	25240b        	s8i	a5, a2, 11
                ads->ds_ctl1 = segLen | AR_TxMore;
  90b572:	24240e        	s8i	a4, a2, 14
  90b575:	23240f        	s8i	a3, a2, 15
                ads->ds_ctl2 = 0;
  90b578:	252410        	s8i	a5, a2, 16
  90b57b:	252411        	s8i	a5, a2, 17
  90b57e:	252412        	s8i	a5, a2, 18
  90b581:	252413        	s8i	a5, a2, 19
                ads->ds_ctl3 = 0;
  90b584:	252414        	s8i	a5, a2, 20
  90b587:	252415        	s8i	a5, a2, 21
  90b58a:	252416        	s8i	a5, a2, 22
  90b58d:	252417        	s8i	a5, a2, 23
        }
        ads->ds_txstatus0 = ads->ds_txstatus1 = 0;
  90b590:	c050      	movi.n	a5, 0
  90b592:	25243c        	s8i	a5, a2, 60
  90b595:	25243d        	s8i	a5, a2, 61
  90b598:	25243e        	s8i	a5, a2, 62
  90b59b:	25243f        	s8i	a5, a2, 63
  90b59e:	252438        	s8i	a5, a2, 56
  90b5a1:	252439        	s8i	a5, a2, 57
  90b5a4:	25243a        	s8i	a5, a2, 58
  90b5a7:	25243b        	s8i	a5, a2, 59

        return AH_TRUE;
}
  90b5aa:	c021      	movi.n	a2, 1
  90b5ac:	d10f      	retw.n
	...

0090b5b0 <ar5416FillKeyTxDesc_20>:

HAL_BOOL ar5416FillKeyTxDesc_20(struct ath_tx_desc *ds,
				HAL_KEY_TYPE keyType)
{
  90b5b0:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl6 = SM(keyType, AR_EncrType);
  90b5b3:	186abf        	l32r	a8, 8e60b0 <vdesc_module_install+0x10a0>
  90b5b6:	063310        	slli	a3, a3, 26
  90b5b9:	083801        	and	a8, a3, a8
  90b5bc:	088857        	extui	a8, a8, 24, 8
  90b5bf:	282420        	s8i	a8, a2, 32
  90b5c2:	c080      	movi.n	a8, 0
  90b5c4:	282421        	s8i	a8, a2, 33
  90b5c7:	282422        	s8i	a8, a2, 34
  90b5ca:	282423        	s8i	a8, a2, 35
	return AH_TRUE;
}
  90b5cd:	c021      	movi.n	a2, 1
  90b5cf:	d10f      	retw.n
  90b5d1:	000000        	ill

0090b5d4 <ar5416Set11nTxDesc_20>:

void ar5416Set11nTxDesc_20(struct ath_tx_desc *ds,
			   a_uint32_t pktLen, HAL_PKT_TYPE type, a_uint32_t txPower,
			   a_uint32_t keyIx, HAL_KEY_TYPE keyType,
			   a_uint32_t flags)
{
  90b5d4:	6c1004        	entry	a1, 32
  90b5d7:	8818      	l32i.n	a8, a1, 32
  90b5d9:	c39f      	movi.n	a9, 63

	if (txPower > 63)
                txPower = 63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
		| (flags & HAL_TXDESC_VMF ? AR_VirtMoreFrag : 0)
  90b5db:	2b1a00        	movi	a11, 0x100
  90b5de:	1a6a90        	l32r	a10, 8e6020 <vdesc_module_install+0x1010>
  90b5e1:	095536        	minu	a5, a5, a9
  90b5e4:	0b8b01        	and	a11, a8, a11
  90b5e7:	c090      	movi.n	a9, 0
  90b5e9:	0b9a38        	moveqz	a10, a9, a11
  90b5ec:	dba0      	mov.n	a11, a10
		| SM(txPower, AR_XmitPower)
  90b5ee:	1a6ac1        	l32r	a10, 8e60f4 <vdesc_module_install+0x10e4>
  90b5f1:	005511        	slli	a5, a5, 16
  90b5f4:	0a5501        	and	a5, a5, a10
        HALASSERT(isValidKeyType(keyType));

	if (txPower > 63)
                txPower = 63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  90b5f7:	03034b        	extui	a3, a3, 0, 12
		| (flags & HAL_TXDESC_VMF ? AR_VirtMoreFrag : 0)
  90b5fa:	035502        	or	a5, a5, a3
		| SM(txPower, AR_XmitPower)
  90b5fd:	0b5502        	or	a5, a5, a11
		| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0)
  90b600:	c0a4      	movi.n	a10, 4
  90b602:	1b6aba        	l32r	a11, 8e60ec <vdesc_module_install+0x10dc>
  90b605:	0a8a01        	and	a10, a8, a10
  90b608:	0a9b38        	moveqz	a11, a9, a10
  90b60b:	0b5a02        	or	a10, a5, a11
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  90b60e:	c250      	movi.n	a5, 32
  90b610:	1b6aa7        	l32r	a11, 8e60ac <vdesc_module_install+0x109c>
  90b613:	058501        	and	a5, a8, a5
  90b616:	059b38        	moveqz	a11, a9, a5
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  90b619:	156ab8        	l32r	a5, 8e60fc <vdesc_module_install+0x10ec>

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
		| (flags & HAL_TXDESC_VMF ? AR_VirtMoreFrag : 0)
		| SM(txPower, AR_XmitPower)
		| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  90b61c:	0baa02        	or	a10, a10, a11
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  90b61f:	080b40        	extui	a11, a8, 0, 1
  90b622:	0b9538        	moveqz	a5, a9, a11
  90b625:	05aa02        	or	a10, a10, a5
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0)
  90b628:	1b6ab9        	l32r	a11, 8e610c <vdesc_module_install+0x10fc>
  90b62b:	c150      	movi.n	a5, 16
  90b62d:	058501        	and	a5, a8, a5
  90b630:	059b38        	moveqz	a11, a9, a5
  90b633:	0baa02        	or	a10, a10, a11
		| (keyIx != HAL_TXKEYIX_INVALID ? AR_DestIdxValid : 0)
  90b636:	156abd        	l32r	a5, 8e612c <vdesc_module_install+0x111c>
  90b639:	2b0aff        	movi	a11, 255
  90b63c:	0b6c0c        	sub	a12, a6, a11
  90b63f:	0c9538        	moveqz	a5, a9, a12
  90b642:	05aa02        	or	a10, a10, a5
		| (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0);
  90b645:	1c6a0f        	l32r	a12, 8e5e84 <vdesc_module_install+0xe74>
  90b648:	c058      	movi.n	a5, 8
  90b64a:	058501        	and	a5, a8, a5
  90b64d:	059c38        	moveqz	a12, a9, a5
  90b650:	0caa02        	or	a10, a10, a12
        HALASSERT(isValidKeyType(keyType));

	if (txPower > 63)
                txPower = 63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  90b653:	0a8557        	extui	a5, a10, 24, 8
  90b656:	252408        	s8i	a5, a2, 8
  90b659:	0a0557        	extui	a5, a10, 16, 8
  90b65c:	252409        	s8i	a5, a2, 9
  90b65f:	0a8547        	extui	a5, a10, 8, 8
  90b662:	25240a        	s8i	a5, a2, 10
  90b665:	2a240b        	s8i	a10, a2, 11
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0)
		| (keyIx != HAL_TXKEYIX_INVALID ? AR_DestIdxValid : 0)
		| (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0);

        ads->ds_ctl1 = (keyIx != HAL_TXKEYIX_INVALID ? SM(keyIx, AR_DestIdx) : 0)
  90b668:	7b6108        	beq	a6, a11, 90b674 <ar5416Set11nTxDesc_20+0xa0>
  90b66b:	156abc        	l32r	a5, 8e615c <vdesc_module_install+0x114c>
  90b66e:	036911        	slli	a9, a6, 13
  90b671:	059901        	and	a9, a9, a5
		| SM(type, AR_FrameType)
  90b674:	1569a4        	l32r	a5, 8e5d04 <vdesc_module_install+0xcf4>
  90b677:	0c4410        	slli	a4, a4, 20
  90b67a:	054401        	and	a4, a4, a5
  90b67d:	049902        	or	a9, a9, a4
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0)
  90b680:	c052      	movi.n	a5, 2
  90b682:	146ab8        	l32r	a4, 8e6164 <vdesc_module_install+0x1154>
  90b685:	c0a0      	movi.n	a10, 0
  90b687:	058501        	and	a5, a8, a5
  90b68a:	05a438        	moveqz	a4, a10, a5
  90b68d:	049902        	or	a9, a9, a4
		| (flags & HAL_TXDESC_EXT_ONLY ? AR_ExtOnly : 0)
  90b690:	c450      	movi.n	a5, 64
  90b692:	146ac0        	l32r	a4, 8e6194 <vdesc_module_install+0x1184>
  90b695:	058501        	and	a5, a8, a5
  90b698:	05a438        	moveqz	a4, a10, a5
  90b69b:	049902        	or	a9, a9, a4
  90b69e:	d540      	mov.n	a5, a4
		| (flags & HAL_TXDESC_EXT_AND_CTL ? AR_ExtAndCtl : 0);
  90b6a0:	240a80        	movi	a4, 128
  90b6a3:	048801        	and	a8, a8, a4
  90b6a6:	1469fa        	l32r	a4, 8e5e90 <vdesc_module_install+0xe80>

        ads->ds_ctl6 = SM(keyType, AR_EncrType);
  90b6a9:	067710        	slli	a7, a7, 26

        ads->ds_ctl1 = (keyIx != HAL_TXKEYIX_INVALID ? SM(keyIx, AR_DestIdx) : 0)
		| SM(type, AR_FrameType)
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0)
		| (flags & HAL_TXDESC_EXT_ONLY ? AR_ExtOnly : 0)
		| (flags & HAL_TXDESC_EXT_AND_CTL ? AR_ExtAndCtl : 0);
  90b6ac:	08a438        	moveqz	a4, a10, a8
  90b6af:	049802        	or	a8, a9, a4
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0)
		| (keyIx != HAL_TXKEYIX_INVALID ? AR_DestIdxValid : 0)
		| (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0);

        ads->ds_ctl1 = (keyIx != HAL_TXKEYIX_INVALID ? SM(keyIx, AR_DestIdx) : 0)
  90b6b2:	088457        	extui	a4, a8, 24, 8
  90b6b5:	24240c        	s8i	a4, a2, 12
  90b6b8:	080457        	extui	a4, a8, 16, 8
  90b6bb:	24240d        	s8i	a4, a2, 13
  90b6be:	088447        	extui	a4, a8, 8, 8
  90b6c1:	24240e        	s8i	a4, a2, 14
		| SM(type, AR_FrameType)
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0)
		| (flags & HAL_TXDESC_EXT_ONLY ? AR_ExtOnly : 0)
		| (flags & HAL_TXDESC_EXT_AND_CTL ? AR_ExtAndCtl : 0);

        ads->ds_ctl6 = SM(keyType, AR_EncrType);
  90b6c4:	146abf        	l32r	a4, 8e61c0 <vdesc_module_install+0x11b0>
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0)
		| (keyIx != HAL_TXKEYIX_INVALID ? AR_DestIdxValid : 0)
		| (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0);

        ads->ds_ctl1 = (keyIx != HAL_TXKEYIX_INVALID ? SM(keyIx, AR_DestIdx) : 0)
  90b6c7:	28240f        	s8i	a8, a2, 15
		| SM(type, AR_FrameType)
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0)
		| (flags & HAL_TXDESC_EXT_ONLY ? AR_ExtOnly : 0)
		| (flags & HAL_TXDESC_EXT_AND_CTL ? AR_ExtAndCtl : 0);

        ads->ds_ctl6 = SM(keyType, AR_EncrType);
  90b6ca:	047701        	and	a7, a7, a4
  90b6cd:	078757        	extui	a7, a7, 24, 8
  90b6d0:	272420        	s8i	a7, a2, 32
  90b6d3:	d4a0      	mov.n	a4, a10
  90b6d5:	2a2421        	s8i	a10, a2, 33
  90b6d8:	2a2422        	s8i	a10, a2, 34
  90b6db:	2a2423        	s8i	a10, a2, 35
  90b6de:	d10f      	retw.n

0090b6e0 <ar5416Set11nRateScenario_20>:

void ar5416Set11nRateScenario_20(struct ath_tx_desc *ds,
				 a_uint32_t durUpdateEn, a_uint32_t rtsctsRate,
				 HAL_11N_RATE_SERIES series[], a_uint32_t nseries,
				 a_uint32_t flags)
{
  90b6e0:	6c1008        	entry	a1, 64
	(void)nseries;

	/*
	* Rate control settings override
	*/
	ds_ctl0 = ads->ds_ctl0;
  90b6e3:	282008        	l8ui	a8, a2, 8
  90b6e6:	262009        	l8ui	a6, a2, 9

void ar5416Set11nRateScenario_20(struct ath_tx_desc *ds,
				 a_uint32_t durUpdateEn, a_uint32_t rtsctsRate,
				 HAL_11N_RATE_SERIES series[], a_uint32_t nseries,
				 a_uint32_t flags)
{
  90b6e9:	9414      	s32i.n	a4, a1, 16
	(void)nseries;

	/*
	* Rate control settings override
	*/
	ds_ctl0 = ads->ds_ctl0;
  90b6eb:	24200a        	l8ui	a4, a2, 10
  90b6ee:	088810        	slli	a8, a8, 24
  90b6f1:	006611        	slli	a6, a6, 16
  90b6f4:	086602        	or	a6, a6, a8
  90b6f7:	084411        	slli	a4, a4, 8
  90b6fa:	064402        	or	a4, a4, a6
  90b6fd:	26200b        	l8ui	a6, a2, 11
  90b700:	046402        	or	a4, a6, a4

	if (flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA)) {
  90b703:	c06c      	movi.n	a6, 12
  90b705:	76701f        	bnone	a7, a6, 90b728 <ar5416Set11nRateScenario_20+0x48>
		if (flags & HAL_TXDESC_RTSENA) {
  90b708:	7d770c        	bbci	a7, 29, 90b718 <ar5416Set11nRateScenario_20+0x38>
			ds_ctl0 &= ~AR_CTSEnable;
  90b70b:	166ab3        	l32r	a6, 8e61d8 <vdesc_module_install+0x11c8>
  90b70e:	064401        	and	a4, a4, a6
			ds_ctl0 |= AR_RTSEnable;
  90b711:	166aba        	l32r	a6, 8e61fc <vdesc_module_install+0x11ec>
  90b714:	600009        	j	90b721 <ar5416Set11nRateScenario_20+0x41>
  90b717:	00166a        	excw
		} else {
			ds_ctl0 &= ~AR_RTSEnable;
  90b71a:	c306      	movi.n	a0, 54
  90b71c:	440116        	excw
			ds_ctl0 |= AR_CTSEnable;
  90b71f:	6a0f06        	blti	a0, 0x100, 90b729 <ar5416Set11nRateScenario_20+0x49>
  90b722:	440260        	excw
  90b725:	000600        	rsil	a0, 0
		}
	} else {
		/* this line is only difference between merlin and k2
		 * Current one is for merlin */
		ds_ctl0 = (ds_ctl0 & ~(AR_RTSEnable | AR_CTSEnable));
  90b728:	166ac4        	l32r	a6, 8e6238 <vdesc_module_install+0x1228>
  90b72b:	064401        	and	a4, a4, a6
	}

	ads->ds_ctl0 = ds_ctl0;
  90b72e:	048657        	extui	a6, a4, 24, 8
  90b731:	262408        	s8i	a6, a2, 8
  90b734:	040657        	extui	a6, a4, 16, 8
  90b737:	262409        	s8i	a6, a2, 9
  90b73a:	048647        	extui	a6, a4, 8, 8
  90b73d:	26240a        	s8i	a6, a2, 10
  90b740:	24240b        	s8i	a4, a2, 11

	ads->ds_ctl2 = set11nTries(series, 0)
  90b743:	8650      	l32i.n	a6, a5, 0
  90b745:	176abb        	l32r	a7, 8e6234 <vdesc_module_install+0x1224>
				   | set11nTries(series, 1)
  90b748:	8457      	l32i.n	a4, a5, 28
		ds_ctl0 = (ds_ctl0 & ~(AR_RTSEnable | AR_CTSEnable));
	}

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
  90b74a:	006611        	slli	a6, a6, 16
  90b74d:	076601        	and	a6, a6, a7
				   | set11nTries(series, 1)
  90b750:	1769a4        	l32r	a7, 8e5de0 <vdesc_module_install+0xdd0>
  90b753:	0c4410        	slli	a4, a4, 20
  90b756:	074401        	and	a4, a4, a7
  90b759:	046402        	or	a4, a6, a4
				   | set11nTries(series, 2)
				   | set11nTries(series, 3)
  90b75c:	265215        	l32i	a6, a5, 84

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
  90b75f:	176ac5        	l32r	a7, 8e6274 <vdesc_module_install+0x1264>
				   | set11nTries(series, 3)
  90b762:	046610        	slli	a6, a6, 28

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
  90b765:	064402        	or	a4, a4, a6
  90b768:	865e      	l32i.n	a6, a5, 56
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);
  90b76a:	c080      	movi.n	a8, 0

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
  90b76c:	086610        	slli	a6, a6, 24
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);
  90b76f:	1c6a32        	l32r	a12, 8e6038 <vdesc_module_install+0x1028>

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
  90b772:	076601        	and	a6, a6, a7
				   | set11nTries(series, 3)
  90b775:	064402        	or	a4, a4, a6
				   | (durUpdateEn ? AR_DurUpdateEn : 0);
  90b778:	d680      	mov.n	a6, a8
  90b77a:	03c639        	movnez	a6, a12, a3
  90b77d:	064302        	or	a3, a4, a6
		ds_ctl0 = (ds_ctl0 & ~(AR_RTSEnable | AR_CTSEnable));
	}

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
  90b780:	038457        	extui	a4, a3, 24, 8
  90b783:	242410        	s8i	a4, a2, 16
  90b786:	030457        	extui	a4, a3, 16, 8
  90b789:	242411        	s8i	a4, a2, 17
  90b78c:	038447        	extui	a4, a3, 8, 8
  90b78f:	242412        	s8i	a4, a2, 18
  90b792:	232413        	s8i	a3, a2, 19
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);
  90b795:	235216        	l32i	a3, a5, 88
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
  90b798:	245007        	l8ui	a4, a5, 7
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);
  90b79b:	083310        	slli	a3, a3, 24
				   | set11nTries(series, 2)
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
  90b79e:	043302        	or	a3, a3, a4
  90b7a1:	8458      	l32i.n	a4, a5, 32
				   | set11nRate(series, 2)
  90b7a3:	166ac6        	l32r	a6, 8e62bc <vdesc_module_install+0x12ac>
				   | set11nTries(series, 2)
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
  90b7a6:	084411        	slli	a4, a4, 8
  90b7a9:	04044f        	extui	a4, a4, 0, 16
				   | set11nRate(series, 2)
  90b7ac:	043302        	or	a3, a3, a4
  90b7af:	845f      	l32i.n	a4, a5, 60
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);
  90b7b1:	176ac7        	l32r	a7, 8e62d0 <vdesc_module_install+0x12c0>
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
  90b7b4:	004411        	slli	a4, a4, 16
  90b7b7:	064401        	and	a4, a4, a6
				   | set11nRate(series, 3);
  90b7ba:	043302        	or	a3, a3, a4
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
  90b7bd:	038457        	extui	a4, a3, 24, 8
  90b7c0:	242414        	s8i	a4, a2, 20
  90b7c3:	030457        	extui	a4, a3, 16, 8
  90b7c6:	242415        	s8i	a4, a2, 21
  90b7c9:	038447        	extui	a4, a3, 8, 8
  90b7cc:	242416        	s8i	a4, a2, 22
  90b7cf:	232417        	s8i	a3, a2, 23
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);
  90b7d2:	8359      	l32i.n	a3, a5, 36
	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  90b7d4:	8e54      	l32i.n	a14, a5, 16
  90b7d6:	8a52      	l32i.n	a10, a5, 8
				   | set11nPktDurRTSCTS(series, 1);
  90b7d8:	845b      	l32i.n	a4, a5, 44
  90b7da:	003311        	slli	a3, a3, 16
	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  90b7dd:	0e0940        	extui	a9, a14, 0, 1
  90b7e0:	0a0a4e        	extui	a10, a10, 0, 15
  90b7e3:	db80      	mov.n	a11, a8
				   | set11nPktDurRTSCTS(series, 1);
  90b7e5:	073301        	and	a3, a3, a7
  90b7e8:	1f6a0f        	l32r	a15, 8e6024 <vdesc_module_install+0x1014>
	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  90b7eb:	09cb39        	movnez	a11, a12, a9
				   | set11nPktDurRTSCTS(series, 1);
  90b7ee:	040640        	extui	a6, a4, 0, 1
	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  90b7f1:	0a3302        	or	a3, a3, a10
				   | set11nPktDurRTSCTS(series, 1);
  90b7f4:	068f38        	moveqz	a15, a8, a6
  90b7f7:	0b3302        	or	a3, a3, a11
  90b7fa:	0f3302        	or	a3, a3, a15
	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  90b7fd:	038657        	extui	a6, a3, 24, 8
  90b800:	262418        	s8i	a6, a2, 24
  90b803:	030657        	extui	a6, a3, 16, 8
  90b806:	262419        	s8i	a6, a2, 25
  90b809:	038647        	extui	a6, a3, 8, 8
  90b80c:	26241a        	s8i	a6, a2, 26
  90b80f:	23241b        	s8i	a3, a2, 27
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b812:	235212        	l32i	a3, a5, 72
  90b815:	d680      	mov.n	a6, a8
  90b817:	030b40        	extui	a11, a3, 0, 1
  90b81a:	0bc639        	movnez	a6, a12, a11
  90b81d:	db60      	mov.n	a11, a6
				   | set11nPktDurRTSCTS(series, 3);
  90b81f:	265217        	l32i	a6, a5, 92
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b822:	2d5210        	l32i	a13, a5, 64
				   | set11nPktDurRTSCTS(series, 3);
  90b825:	2a5219        	l32i	a10, a5, 100
  90b828:	006611        	slli	a6, a6, 16
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b82b:	0d0d4e        	extui	a13, a13, 0, 15
				   | set11nPktDurRTSCTS(series, 3);
  90b82e:	076601        	and	a6, a6, a7
  90b831:	1f6a0f        	l32r	a15, 8e6070 <vdesc_module_install+0x1060>
  90b834:	0a0940        	extui	a9, a10, 0, 1
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b837:	0d6602        	or	a6, a6, a13
				   | set11nPktDurRTSCTS(series, 3);
  90b83a:	098f38        	moveqz	a15, a8, a9
  90b83d:	0b6602        	or	a6, a6, a11
  90b840:	0f6602        	or	a6, a6, a15
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b843:	068757        	extui	a7, a6, 24, 8
  90b846:	27241c        	s8i	a7, a2, 28
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  90b849:	c0d2      	movi.n	a13, 2
  90b84b:	c0b4      	movi.n	a11, 4
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b84d:	060757        	extui	a7, a6, 16, 8
  90b850:	27241d        	s8i	a7, a2, 29
  90b853:	26241f        	s8i	a6, a2, 31
  90b856:	068747        	extui	a7, a6, 8, 8
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  90b859:	d9d0      	mov.n	a9, a13
  90b85b:	0be601        	and	a6, a14, a11
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90b85e:	27241e        	s8i	a7, a2, 30
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  90b861:	068938        	moveqz	a9, a8, a6
  90b864:	0e1740        	extui	a7, a14, 1, 1
  90b867:	079602        	or	a6, a9, a7
  90b86a:	c098      	movi.n	a9, 8
  90b86c:	1769fa        	l32r	a7, 8e6054 <vdesc_module_install+0x1044>
  90b86f:	09ee01        	and	a14, a14, a9
  90b872:	0e8738        	moveqz	a7, a8, a14
  90b875:	076602        	or	a6, a6, a7
  90b878:	8753      	l32i.n	a7, a5, 12
  90b87a:	9612      	s32i.n	a6, a1, 8
  90b87c:	00d104        	ssl	a13
  90b87f:	00771a        	sll	a7, a7
  90b882:	c16c      	movi.n	a6, 28
  90b884:	067601        	and	a6, a7, a6
  90b887:	9613      	s32i.n	a6, a1, 12
				   | set11nRateFlags(series, 1)
  90b889:	c2f0      	movi.n	a15, 32
  90b88b:	0d4601        	and	a6, a4, a13
  90b88e:	068f38        	moveqz	a15, a8, a6
  90b891:	c4e0      	movi.n	a14, 64
  90b893:	0b4601        	and	a6, a4, a11
  90b896:	068e38        	moveqz	a14, a8, a6
  90b899:	875a      	l32i.n	a7, a5, 40
  90b89b:	166ab9        	l32r	a6, 8e6380 <_xtos_set_exception_handler+0x38>
  90b89e:	094401        	and	a4, a4, a9
  90b8a1:	048638        	moveqz	a6, a8, a4
  90b8a4:	097711        	slli	a7, a7, 7
  90b8a7:	243a80        	movi	a4, 0x380
  90b8aa:	9e10      	s32i.n	a14, a1, 0
  90b8ac:	047701        	and	a7, a7, a4
				   | set11nRateFlags(series, 2)
  90b8af:	2e4a00        	movi	a14, 0x400
  90b8b2:	0d3401        	and	a4, a3, a13
  90b8b5:	048e38        	moveqz	a14, a8, a4
  90b8b8:	146ac2        	l32r	a4, 8e63c0 <_xtos_set_exception_handler+0x78>

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
  90b8bb:	9611      	s32i.n	a6, a1, 4
				   | set11nRateFlags(series, 2)
  90b8bd:	0b3601        	and	a6, a3, a11
  90b8c0:	068438        	moveqz	a4, a8, a6
  90b8c3:	166abd        	l32r	a6, 8e63b8 <_xtos_set_exception_handler+0x70>
  90b8c6:	093301        	and	a3, a3, a9
  90b8c9:	038638        	moveqz	a6, a8, a3
  90b8cc:	d360      	mov.n	a3, a6
  90b8ce:	265211        	l32i	a6, a5, 68
  90b8d1:	9415      	s32i.n	a4, a1, 20
  90b8d3:	146ac8        	l32r	a4, 8e63f4 <_xtos_set_exception_handler+0xac>
  90b8d6:	046611        	slli	a6, a6, 12
  90b8d9:	046601        	and	a6, a6, a4
				   | set11nRateFlags(series, 3)
  90b8dc:	146a0f        	l32r	a4, 8e6118 <vdesc_module_install+0x1108>
  90b8df:	09a901        	and	a9, a10, a9
  90b8e2:	098438        	moveqz	a4, a8, a9
  90b8e5:	d940      	mov.n	a9, a4
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  90b8e7:	8413      	l32i.n	a4, a1, 12
				   | set11nRateFlags(series, 1)
				   | set11nRateFlags(series, 2)
				   | set11nRateFlags(series, 3)
  90b8e9:	0dad01        	and	a13, a10, a13
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  90b8ec:	047702        	or	a7, a7, a4
				   | set11nRateFlags(series, 1)
  90b8ef:	067602        	or	a6, a7, a6
				   | set11nRateFlags(series, 2)
				   | set11nRateFlags(series, 3)
  90b8f2:	275218        	l32i	a7, a5, 96
  90b8f5:	156ac9        	l32r	a5, 8e641c <_xtos_set_exception_handler+0xd4>
  90b8f8:	0f7710        	slli	a7, a7, 17
  90b8fb:	0d8c38        	moveqz	a12, a8, a13
				   | SM(rtsctsRate, AR_RTSCTSRate);
  90b8fe:	8414      	l32i.n	a4, a1, 16
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
				   | set11nRateFlags(series, 2)
				   | set11nRateFlags(series, 3)
  90b900:	1d6953        	l32r	a13, 8e5e4c <vdesc_module_install+0xe3c>
  90b903:	057501        	and	a5, a7, a5
  90b906:	0bab01        	and	a11, a10, a11

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
  90b909:	056602        	or	a6, a6, a5
				   | set11nRateFlags(series, 2)
				   | set11nRateFlags(series, 3)
				   | SM(rtsctsRate, AR_RTSCTSRate);
  90b90c:	156aca        	l32r	a5, 8e6434 <_xtos_set_exception_handler+0xec>
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
				   | set11nRateFlags(series, 2)
				   | set11nRateFlags(series, 3)
  90b90f:	0b8d38        	moveqz	a13, a8, a11
				   | SM(rtsctsRate, AR_RTSCTSRate);
  90b912:	0c4810        	slli	a8, a4, 20
  90b915:	058801        	and	a8, a8, a5

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
  90b918:	8512      	l32i.n	a5, a1, 8
  90b91a:	086602        	or	a6, a6, a8
  90b91d:	056602        	or	a6, a6, a5
				   | set11nRateFlags(series, 2)
  90b920:	0f6f02        	or	a15, a6, a15
  90b923:	8610      	l32i.n	a6, a1, 0
  90b925:	8411      	l32i.n	a4, a1, 4
  90b927:	06ff02        	or	a15, a15, a6
  90b92a:	04ff02        	or	a15, a15, a4
				   | set11nRateFlags(series, 3)
  90b92d:	8515      	l32i.n	a5, a1, 20
	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
				   | set11nRateFlags(series, 2)
  90b92f:	0efe02        	or	a14, a15, a14
				   | set11nRateFlags(series, 3)
  90b932:	05e402        	or	a4, a14, a5
  90b935:	034302        	or	a3, a4, a3
  90b938:	0c3c02        	or	a12, a3, a12
  90b93b:	0dcb02        	or	a11, a12, a13
				   | SM(rtsctsRate, AR_RTSCTSRate);
  90b93e:	09b902        	or	a9, a11, a9
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  90b941:	098357        	extui	a3, a9, 24, 8
  90b944:	232424        	s8i	a3, a2, 36
  90b947:	090357        	extui	a3, a9, 16, 8
  90b94a:	232425        	s8i	a3, a2, 37
  90b94d:	098347        	extui	a3, a9, 8, 8
  90b950:	232426        	s8i	a3, a2, 38
  90b953:	292427        	s8i	a9, a2, 39
  90b956:	d10f      	retw.n

0090b958 <ar5416Set11nAggrFirst_20>:
				   | SM(rtsctsRate, AR_RTSCTSRate);
}

void ar5416Set11nAggrFirst_20(struct ath_tx_desc *ds, a_uint32_t aggrLen,
			      a_uint32_t numDelims)
{
  90b958:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90b95b:	2a200c        	l8ui	a10, a2, 12
  90b95e:	29200d        	l8ui	a9, a2, 13
  90b961:	28200e        	l8ui	a8, a2, 14
  90b964:	08aa10        	slli	a10, a10, 24
  90b967:	009911        	slli	a9, a9, 16
  90b96a:	0a9902        	or	a9, a9, a10
  90b96d:	088811        	slli	a8, a8, 8
  90b970:	098802        	or	a8, a8, a9
  90b973:	29200f        	l8ui	a9, a2, 15

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  90b976:	2a2020        	l8ui	a10, a2, 32
void ar5416Set11nAggrFirst_20(struct ath_tx_desc *ds, a_uint32_t aggrLen,
			      a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90b979:	089802        	or	a8, a9, a8
  90b97c:	196acb        	l32r	a9, 8e64a8 <_xtos_set_exception_handler+0x160>

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  90b97f:	08aa10        	slli	a10, a10, 24
void ar5416Set11nAggrFirst_20(struct ath_tx_desc *ds, a_uint32_t aggrLen,
			      a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90b982:	098802        	or	a8, a8, a9
  90b985:	088957        	extui	a9, a8, 24, 8
  90b988:	29240c        	s8i	a9, a2, 12
  90b98b:	080957        	extui	a9, a8, 16, 8
  90b98e:	29240d        	s8i	a9, a2, 13
  90b991:	28240f        	s8i	a8, a2, 15
  90b994:	088947        	extui	a9, a8, 8, 8

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  90b997:	282021        	l8ui	a8, a2, 33
void ar5416Set11nAggrFirst_20(struct ath_tx_desc *ds, a_uint32_t aggrLen,
			      a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90b99a:	29240e        	s8i	a9, a2, 14

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  90b99d:	292022        	l8ui	a9, a2, 34
  90b9a0:	008811        	slli	a8, a8, 16
  90b9a3:	0a8802        	or	a8, a8, a10
  90b9a6:	089911        	slli	a9, a9, 8
  90b9a9:	089902        	or	a9, a9, a8
  90b9ac:	282023        	l8ui	a8, a2, 35
	ads->ds_ctl6 |= SM(aggrLen, AR_AggrLen) |
  90b9af:	03034f        	extui	a3, a3, 0, 16
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  90b9b2:	098902        	or	a9, a8, a9
  90b9b5:	186acc        	l32r	a8, 8e64e8 <_xtos_set_exception_handler+0x1a0>
	ads->ds_ctl6 |= SM(aggrLen, AR_AggrLen) |
		SM(numDelims, AR_PadDelim);
  90b9b8:	0e4410        	slli	a4, a4, 18
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  90b9bb:	089901        	and	a9, a9, a8
	ads->ds_ctl6 |= SM(aggrLen, AR_AggrLen) |
  90b9be:	093902        	or	a9, a3, a9
		SM(numDelims, AR_PadDelim);
  90b9c1:	136acd        	l32r	a3, 8e64f8 <_xtos_set_exception_handler+0x1b0>
  90b9c4:	034801        	and	a8, a4, a3
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
	ads->ds_ctl6 |= SM(aggrLen, AR_AggrLen) |
  90b9c7:	089802        	or	a8, a9, a8
  90b9ca:	088357        	extui	a3, a8, 24, 8
  90b9cd:	232420        	s8i	a3, a2, 32
  90b9d0:	080357        	extui	a3, a8, 16, 8
  90b9d3:	232421        	s8i	a3, a2, 33
  90b9d6:	088347        	extui	a3, a8, 8, 8
  90b9d9:	232422        	s8i	a3, a2, 34
  90b9dc:	282423        	s8i	a8, a2, 35
  90b9df:	d10f      	retw.n
  90b9e1:	000000        	ill

0090b9e4 <ar5416Set11nAggrMiddle_20>:
		SM(numDelims, AR_PadDelim);
}

void ar5416Set11nAggrMiddle_20(struct ath_tx_desc *ds, a_uint32_t numDelims)
{
  90b9e4:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);
	a_uint32_t ctl6;

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90b9e7:	2a200c        	l8ui	a10, a2, 12
  90b9ea:	29200d        	l8ui	a9, a2, 13
  90b9ed:	28200e        	l8ui	a8, a2, 14
  90b9f0:	08aa10        	slli	a10, a10, 24
  90b9f3:	009911        	slli	a9, a9, 16
  90b9f6:	0a9902        	or	a9, a9, a10
  90b9f9:	088811        	slli	a8, a8, 8
  90b9fc:	098802        	or	a8, a8, a9
  90b9ff:	29200f        	l8ui	a9, a2, 15

	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
  90ba02:	2a2020        	l8ui	a10, a2, 32
void ar5416Set11nAggrMiddle_20(struct ath_tx_desc *ds, a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);
	a_uint32_t ctl6;

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90ba05:	089802        	or	a8, a9, a8
  90ba08:	196acb        	l32r	a9, 8e6534 <_xtos_set_exception_handler+0x1ec>

	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
  90ba0b:	08aa10        	slli	a10, a10, 24
void ar5416Set11nAggrMiddle_20(struct ath_tx_desc *ds, a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);
	a_uint32_t ctl6;

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90ba0e:	098802        	or	a8, a8, a9
  90ba11:	088957        	extui	a9, a8, 24, 8
  90ba14:	29240c        	s8i	a9, a2, 12
  90ba17:	080957        	extui	a9, a8, 16, 8
  90ba1a:	29240d        	s8i	a9, a2, 13
  90ba1d:	28240f        	s8i	a8, a2, 15
  90ba20:	088947        	extui	a9, a8, 8, 8

	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
  90ba23:	282021        	l8ui	a8, a2, 33
void ar5416Set11nAggrMiddle_20(struct ath_tx_desc *ds, a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);
	a_uint32_t ctl6;

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  90ba26:	29240e        	s8i	a9, a2, 14

	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
  90ba29:	292022        	l8ui	a9, a2, 34
  90ba2c:	008811        	slli	a8, a8, 16
  90ba2f:	0a8802        	or	a8, a8, a10
  90ba32:	089911        	slli	a9, a9, 8
  90ba35:	089902        	or	a9, a9, a8
  90ba38:	282023        	l8ui	a8, a2, 35
	ctl6 &= ~AR_PadDelim;
  90ba3b:	1a6ace        	l32r	a10, 8e6574 <strcmp+0x14>

	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
  90ba3e:	098902        	or	a9, a8, a9
	ctl6 &= ~AR_PadDelim;
	ctl6 |= SM(numDelims, AR_PadDelim);
  90ba41:	186acd        	l32r	a8, 8e6578 <strcmp+0x18>
  90ba44:	0e3310        	slli	a3, a3, 18
	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
	ctl6 &= ~AR_PadDelim;
  90ba47:	0a9901        	and	a9, a9, a10
	ctl6 |= SM(numDelims, AR_PadDelim);
  90ba4a:	083801        	and	a8, a3, a8
  90ba4d:	098802        	or	a8, a8, a9
	ads->ds_ctl6 = ctl6;
  90ba50:	088957        	extui	a9, a8, 24, 8
  90ba53:	292420        	s8i	a9, a2, 32
  90ba56:	080957        	extui	a9, a8, 16, 8
  90ba59:	292421        	s8i	a9, a2, 33
  90ba5c:	088947        	extui	a9, a8, 8, 8
  90ba5f:	292422        	s8i	a9, a2, 34
  90ba62:	282423        	s8i	a8, a2, 35
  90ba65:	d10f      	retw.n
	...

0090ba68 <ar5416Set11nAggrLast_20>:
}

void ar5416Set11nAggrLast_20(struct ath_tx_desc *ds)
{
  90ba68:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= AR_IsAggr;
  90ba6b:	2a200c        	l8ui	a10, a2, 12
  90ba6e:	29200d        	l8ui	a9, a2, 13
  90ba71:	28200e        	l8ui	a8, a2, 14
  90ba74:	08aa10        	slli	a10, a10, 24
  90ba77:	009911        	slli	a9, a9, 16
  90ba7a:	0a9902        	or	a9, a9, a10
  90ba7d:	088811        	slli	a8, a8, 8
  90ba80:	098802        	or	a8, a8, a9
  90ba83:	29200f        	l8ui	a9, a2, 15
	ads->ds_ctl1 &= ~AR_MoreAggr;
	ads->ds_ctl6 &= ~AR_PadDelim;
  90ba86:	2a2020        	l8ui	a10, a2, 32

void ar5416Set11nAggrLast_20(struct ath_tx_desc *ds)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= AR_IsAggr;
  90ba89:	089802        	or	a8, a9, a8
	ads->ds_ctl1 &= ~AR_MoreAggr;
  90ba8c:	196acf        	l32r	a9, 8e65c8 <strcmp+0x68>
	ads->ds_ctl6 &= ~AR_PadDelim;
  90ba8f:	08aa10        	slli	a10, a10, 24
void ar5416Set11nAggrLast_20(struct ath_tx_desc *ds)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= AR_IsAggr;
	ads->ds_ctl1 &= ~AR_MoreAggr;
  90ba92:	098801        	and	a8, a8, a9
  90ba95:	196abd        	l32r	a9, 8e658c <strcmp+0x2c>
  90ba98:	098802        	or	a8, a8, a9
  90ba9b:	088957        	extui	a9, a8, 24, 8
  90ba9e:	29240c        	s8i	a9, a2, 12
  90baa1:	080957        	extui	a9, a8, 16, 8
  90baa4:	29240d        	s8i	a9, a2, 13
  90baa7:	28240f        	s8i	a8, a2, 15
  90baaa:	088947        	extui	a9, a8, 8, 8
	ads->ds_ctl6 &= ~AR_PadDelim;
  90baad:	282021        	l8ui	a8, a2, 33
void ar5416Set11nAggrLast_20(struct ath_tx_desc *ds)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= AR_IsAggr;
	ads->ds_ctl1 &= ~AR_MoreAggr;
  90bab0:	29240e        	s8i	a9, a2, 14
	ads->ds_ctl6 &= ~AR_PadDelim;
  90bab3:	292022        	l8ui	a9, a2, 34
  90bab6:	008811        	slli	a8, a8, 16
  90bab9:	0a8802        	or	a8, a8, a10
  90babc:	089911        	slli	a9, a9, 8
  90babf:	089902        	or	a9, a9, a8
  90bac2:	282023        	l8ui	a8, a2, 35
  90bac5:	098902        	or	a9, a8, a9
  90bac8:	186ace        	l32r	a8, 8e6600 <strcmp+0xa0>
  90bacb:	292423        	s8i	a9, a2, 35
  90bace:	089801        	and	a8, a9, a8
  90bad1:	088a57        	extui	a10, a8, 24, 8
  90bad4:	2a2420        	s8i	a10, a2, 32
  90bad7:	080a57        	extui	a10, a8, 16, 8
  90bada:	088847        	extui	a8, a8, 8, 8
  90badd:	2a2421        	s8i	a10, a2, 33
  90bae0:	282422        	s8i	a8, a2, 34
  90bae3:	d10f      	retw.n
  90bae5:	000000        	ill

0090bae8 <ar5416Clr11nAggr_20>:
}

void ar5416Clr11nAggr_20(struct ath_tx_desc *ds)
{
  90bae8:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 &= (~AR_IsAggr & ~AR_MoreAggr);
  90baeb:	2a200c        	l8ui	a10, a2, 12
  90baee:	28200d        	l8ui	a8, a2, 13
  90baf1:	29200e        	l8ui	a9, a2, 14
  90baf4:	08aa10        	slli	a10, a10, 24
  90baf7:	008811        	slli	a8, a8, 16
  90bafa:	0a8802        	or	a8, a8, a10
  90bafd:	089911        	slli	a9, a9, 8
  90bb00:	089902        	or	a9, a9, a8
  90bb03:	28200f        	l8ui	a8, a2, 15
  90bb06:	098902        	or	a9, a8, a9
  90bb09:	186ad0        	l32r	a8, 8e664c <strcmp+0xec>
  90bb0c:	29240f        	s8i	a9, a2, 15
  90bb0f:	089801        	and	a8, a9, a8
  90bb12:	088a57        	extui	a10, a8, 24, 8
  90bb15:	2a240c        	s8i	a10, a2, 12
  90bb18:	080a57        	extui	a10, a8, 16, 8
  90bb1b:	088847        	extui	a8, a8, 8, 8
  90bb1e:	2a240d        	s8i	a10, a2, 13
  90bb21:	28240e        	s8i	a8, a2, 14
  90bb24:	d10f      	retw.n
	...

0090bb28 <ar5416Set11nBurstDuration_20>:
}

void ar5416Set11nBurstDuration_20(struct ath_tx_desc *ds,
				  a_uint32_t burstDuration)
{
  90bb28:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl2 &= ~AR_BurstDur;
  90bb2b:	2a2010        	l8ui	a10, a2, 16
  90bb2e:	292011        	l8ui	a9, a2, 17
  90bb31:	282012        	l8ui	a8, a2, 18
  90bb34:	08aa10        	slli	a10, a10, 24
  90bb37:	009911        	slli	a9, a9, 16
  90bb3a:	0a9902        	or	a9, a9, a10
  90bb3d:	088811        	slli	a8, a8, 8
  90bb40:	098802        	or	a8, a8, a9
  90bb43:	292013        	l8ui	a9, a2, 19
	ads->ds_ctl2 |= SM(burstDuration, AR_BurstDur);
  90bb46:	03034e        	extui	a3, a3, 0, 15
void ar5416Set11nBurstDuration_20(struct ath_tx_desc *ds,
				  a_uint32_t burstDuration)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl2 &= ~AR_BurstDur;
  90bb49:	089802        	or	a8, a9, a8
  90bb4c:	196ad1        	l32r	a9, 8e6690 <strcmp+0x130>
  90bb4f:	098801        	and	a8, a8, a9
	ads->ds_ctl2 |= SM(burstDuration, AR_BurstDur);
  90bb52:	083802        	or	a8, a3, a8
  90bb55:	088957        	extui	a9, a8, 24, 8
  90bb58:	292410        	s8i	a9, a2, 16
  90bb5b:	080957        	extui	a9, a8, 16, 8
  90bb5e:	292411        	s8i	a9, a2, 17
  90bb61:	088947        	extui	a9, a8, 8, 8
  90bb64:	292412        	s8i	a9, a2, 18
  90bb67:	282413        	s8i	a8, a2, 19
  90bb6a:	d10f      	retw.n

0090bb6c <ar5416Set11nVirtualMoreFrag_20>:
}

void ar5416Set11nVirtualMoreFrag_20(struct ath_tx_desc *ds,
				    a_uint32_t vmf)
{
  90bb6c:	6c1004        	entry	a1, 32
  90bb6f:	282008        	l8ui	a8, a2, 8
  90bb72:	292009        	l8ui	a9, a2, 9
	struct ar5416_desc *ads = AR5416DESC(ds);

	if (vmf) {
		ads->ds_ctl0 |= AR_VirtMoreFrag;
  90bb75:	088810        	slli	a8, a8, 24
  90bb78:	009911        	slli	a9, a9, 16
void ar5416Set11nVirtualMoreFrag_20(struct ath_tx_desc *ds,
				    a_uint32_t vmf)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	if (vmf) {
  90bb7b:	ca3d      	beqz.n	a3, 90bbac <ar5416Set11nVirtualMoreFrag_20+0x40>
		ads->ds_ctl0 |= AR_VirtMoreFrag;
  90bb7d:	089902        	or	a9, a9, a8
  90bb80:	28200a        	l8ui	a8, a2, 10
  90bb83:	1a6a90        	l32r	a10, 8e65c4 <strcmp+0x64>
  90bb86:	088811        	slli	a8, a8, 8
  90bb89:	098802        	or	a8, a8, a9
  90bb8c:	29200b        	l8ui	a9, a2, 11
  90bb8f:	089802        	or	a8, a9, a8
  90bb92:	0a8802        	or	a8, a8, a10
  90bb95:	088957        	extui	a9, a8, 24, 8
  90bb98:	292408        	s8i	a9, a2, 8
  90bb9b:	080957        	extui	a9, a8, 16, 8
  90bb9e:	292409        	s8i	a9, a2, 9
  90bba1:	088947        	extui	a9, a8, 8, 8
  90bba4:	29240a        	s8i	a9, a2, 10
  90bba7:	28240b        	s8i	a8, a2, 11
  90bbaa:	d10f      	retw.n
	} else {
		ads->ds_ctl0 &= ~AR_VirtMoreFrag;
  90bbac:	089802        	or	a8, a9, a8
  90bbaf:	29200a        	l8ui	a9, a2, 10
  90bbb2:	089911        	slli	a9, a9, 8
  90bbb5:	089902        	or	a9, a9, a8
  90bbb8:	28200b        	l8ui	a8, a2, 11
  90bbbb:	098902        	or	a9, a8, a9
  90bbbe:	186ad2        	l32r	a8, 8e6708 <strcmp+0x1a8>
  90bbc1:	29240b        	s8i	a9, a2, 11
  90bbc4:	089801        	and	a8, a9, a8
  90bbc7:	088a57        	extui	a10, a8, 24, 8
  90bbca:	2a2408        	s8i	a10, a2, 8
  90bbcd:	080a57        	extui	a10, a8, 16, 8
  90bbd0:	088847        	extui	a8, a8, 8, 8
  90bbd3:	2a2409        	s8i	a10, a2, 9
  90bbd6:	28240a        	s8i	a8, a2, 10
  90bbd9:	d10f      	retw.n
	...

0090bbdc <ar5416StopTxDma>:

	return AH_TRUE;
}

HAL_BOOL ar5416StopTxDma(struct ath_hal*ah, a_uint32_t q)
{
  90bbdc:	6c1004        	entry	a1, 32
  90bbdf:	146ad3        	l32r	a4, 8e672c <strcmp+0x1cc>
	
        HALASSERT(q < AH_PRIVATE(ah)->ah_caps.halTotalQueues);

        HALASSERT(AH5416(ah)->ah_txq[q].tqi_type != HAL_TX_QUEUE_INACTIVE);

	iowrite32_mac(AR_Q_TXD, 1 << q);
  90bbe2:	c081      	movi.n	a8, 1
  90bbe4:	003104        	ssl	a3
  90bbe7:	00881a        	sll	a8, a8
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bbea:	0c0200        	memw
  90bbed:	9840      	s32i.n	a8, a4, 0
        for (i = 1000; i != 0; i--) {
  90bbef:	243ae8        	movi	a4, 0x3e8
                if (ar5416NumTxPending(ah, q) == 0)
  90bbf2:	da20      	mov.n	a10, a2
  90bbf4:	033b02        	or	a11, a3, a3
  90bbf7:	5bfd9b        	call8	90b264 <ar5416NumTxPending>
  90bbfa:	c8aa      	beqz.n	a10, 90bc08 <ar5416StopTxDma+0x2c>
                        break;
                OS_DELAY(100);        /* XXX get actual value */
  90bbfc:	2a0a64        	movi	a10, 100
        HALASSERT(q < AH_PRIVATE(ah)->ah_caps.halTotalQueues);

        HALASSERT(AH5416(ah)->ah_txq[q].tqi_type != HAL_TX_QUEUE_INACTIVE);

	iowrite32_mac(AR_Q_TXD, 1 << q);
        for (i = 1000; i != 0; i--) {
  90bbff:	244cff        	addi	a4, a4, -1
                if (ar5416NumTxPending(ah, q) == 0)
                        break;
                OS_DELAY(100);        /* XXX get actual value */
  90bc02:	5befc1        	call8	907b08 <ath_hal_delay>
        HALASSERT(q < AH_PRIVATE(ah)->ah_caps.halTotalQueues);

        HALASSERT(AH5416(ah)->ah_txq[q].tqi_type != HAL_TX_QUEUE_INACTIVE);

	iowrite32_mac(AR_Q_TXD, 1 << q);
        for (i = 1000; i != 0; i--) {
  90bc05:	654fe9        	bnez	a4, 90bbf2 <ar5416StopTxDma+0x16>
  90bc08:	126ad3        	l32r	a2, 8e6754 <strcmp+0x1f4>
  90bc0b:	c030      	movi.n	a3, 0
  90bc0d:	0c0200        	memw
  90bc10:	9320      	s32i.n	a3, a2, 0
                        break;
                OS_DELAY(100);        /* XXX get actual value */
        }

	iowrite32_mac(AR_Q_TXD, 0);
        return (i != 0);
  90bc12:	c021      	movi.n	a2, 1
  90bc14:	043238        	moveqz	a2, a3, a4
}
  90bc17:	d10f      	retw.n
  90bc19:	000000        	ill

0090bc1c <ar5416AbortTxDma>:
#endif
        return npend;
}

HAL_BOOL ar5416AbortTxDma(struct ath_hal *ah)
{
  90bc1c:	6c1004        	entry	a1, 32
  90bc1f:	136ad3        	l32r	a3, 8e676c <strcmp+0x20c>
  90bc22:	243aff        	movi	a4, 0x3ff
  90bc25:	0c0200        	memw
  90bc28:	9430      	s32i.n	a4, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90bc2a:	136ad4        	l32r	a3, 8e677c <strcmp+0x21c>
	iowrite32_mac(AR_Q_TXD, AR_Q_TXD_M);

	/*
	 * set tx abort bits
	 */
	OS_REG_SET_BIT(ah, AR_PCU_MISC, (AR_PCU_FORCE_QUIET_COLL | AR_PCU_CLEAR_VMF));
  90bc2d:	146ad5        	l32r	a4, 8e6784 <strcmp+0x224>
  90bc30:	0c0200        	memw
  90bc33:	8830      	l32i.n	a8, a3, 0
  90bc35:	048402        	or	a4, a8, a4
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bc38:	0c0200        	memw
  90bc3b:	9430      	s32i.n	a4, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90bc3d:	136ab1        	l32r	a3, 8e6704 <strcmp+0x1a4>
	OS_REG_SET_BIT(ah, AR_DIAG_SW, AR_DIAG_FORCE_CH_IDLE_HIGH);
  90bc40:	146aba        	l32r	a4, 8e6728 <strcmp+0x1c8>
  90bc43:	0c0200        	memw
  90bc46:	8830      	l32i.n	a8, a3, 0
  90bc48:	048402        	or	a4, a8, a4
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bc4b:	0c0200        	memw
  90bc4e:	9430      	s32i.n	a4, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90bc50:	136ad6        	l32r	a3, 8e67a8 <strcmp+0x248>
	OS_REG_SET_BIT(ah, AR_D_GBL_IFS_MISC, AR_D_GBL_IFS_MISC_IGNORE_BACKOFF);
  90bc53:	1469fa        	l32r	a4, 8e643c <_xtos_set_exception_handler+0xf4>
  90bc56:	0c0200        	memw
  90bc59:	8830      	l32i.n	a8, a3, 0
  90bc5b:	048402        	or	a4, a8, a4
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bc5e:	0c0200        	memw
  90bc61:	9430      	s32i.n	a4, a3, 0

	/*
	 * wait on all tx queues
	 */
	for (q = 0; q < AR_NUM_QCU; q++) {
  90bc63:	c030      	movi.n	a3, 0
  90bc65:	60001b        	j	90bc84 <ar5416AbortTxDma+0x68>
  90bc68:	00da20        	excw
		for (i = 0; i < AR5416_ABORT_LOOPS; i++) {
			if (!ar5416NumTxPending(ah, q))
  90bc6b:	db30      	mov.n	a11, a3
  90bc6d:	5bfd7d        	call8	90b264 <ar5416NumTxPending>
  90bc70:	64a05c        	beqz	a10, 90bcd0 <ar5416AbortTxDma+0xb4>
				break;

			OS_DELAY(AR5416_ABORT_WAIT);
  90bc73:	2a0a05        	movi	a10, 5
  90bc76:	244cff        	addi	a4, a4, -1
  90bc79:	5befa3        	call8	907b08 <ath_hal_delay>

	/*
	 * wait on all tx queues
	 */
	for (q = 0; q < AR_NUM_QCU; q++) {
		for (i = 0; i < AR5416_ABORT_LOOPS; i++) {
  90bc7c:	654fe9        	bnez	a4, 90bc69 <ar5416AbortTxDma+0x4d>
				break;

			OS_DELAY(AR5416_ABORT_WAIT);
		}
		if (i == AR5416_ABORT_LOOPS) {
			return AH_FALSE;
  90bc7f:	d240      	mov.n	a2, a4
  90bc81:	d10f      	retw.n
  90bc83:	00243a        	movltz	a4, a2, a0
#endif
        return npend;
}

HAL_BOOL ar5416AbortTxDma(struct ath_hal *ah)
{
  90bc86:	e8          	.byte 0xe8
  90bc87:	63ffde        	j	90bc69 <ar5416AbortTxDma+0x4d>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90bc8a:	126ad4        	l32r	a2, 8e67dc <strcmp+0x27c>
	}

	/*
	 * clear tx abort bits
	 */
	OS_REG_CLR_BIT(ah, AR_PCU_MISC, (AR_PCU_FORCE_QUIET_COLL | AR_PCU_CLEAR_VMF));
  90bc8d:	136ad7        	l32r	a3, 8e67ec <strcmp+0x28c>
  90bc90:	0c0200        	memw
  90bc93:	8420      	l32i.n	a4, a2, 0
  90bc95:	034301        	and	a3, a4, a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bc98:	0c0200        	memw
  90bc9b:	9320      	s32i.n	a3, a2, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90bc9d:	126ab1        	l32r	a2, 8e6764 <strcmp+0x204>
	OS_REG_CLR_BIT(ah, AR_DIAG_SW, AR_DIAG_FORCE_CH_IDLE_HIGH);
  90bca0:	136ac3        	l32r	a3, 8e67ac <strcmp+0x24c>
  90bca3:	0c0200        	memw
  90bca6:	8420      	l32i.n	a4, a2, 0
  90bca8:	034301        	and	a3, a4, a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bcab:	0c0200        	memw
  90bcae:	9320      	s32i.n	a3, a2, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90bcb0:	126ad6        	l32r	a2, 8e6808 <strcmp+0x2a8>
	OS_REG_CLR_BIT(ah, AR_D_GBL_IFS_MISC, AR_D_GBL_IFS_MISC_IGNORE_BACKOFF);
  90bcb3:	136ad8        	l32r	a3, 8e6814 <strcmp+0x2b4>
  90bcb6:	0c0200        	memw
  90bcb9:	8420      	l32i.n	a4, a2, 0
  90bcbb:	034301        	and	a3, a4, a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bcbe:	0c0200        	memw
  90bcc1:	9320      	s32i.n	a3, a2, 0
  90bcc3:	126ad3        	l32r	a2, 8e6810 <strcmp+0x2b0>
  90bcc6:	0c0200        	memw
  90bcc9:	9a20      	s32i.n	a10, a2, 0
	/*
	 * clear txd
	 */
	iowrite32_mac(AR_Q_TXD, 0);

	return AH_TRUE;
  90bccb:	c021      	movi.n	a2, 1
  90bccd:	d10f      	retw.n
  90bccf:	00b133        	excw
	OS_REG_SET_BIT(ah, AR_D_GBL_IFS_MISC, AR_D_GBL_IFS_MISC_IGNORE_BACKOFF);

	/*
	 * wait on all tx queues
	 */
	for (q = 0; q < AR_NUM_QCU; q++) {
  90bcd2:	6939ae        	bnei	a3, 10, 90bc84 <ar5416AbortTxDma+0x68>
  90bcd5:	63ffb1        	j	90bc8a <ar5416AbortTxDma+0x6e>

0090bcd8 <ar5416StopDmaReceive>:
	iowrite32_mac(AR_RXDP, rxdp);
	HALASSERT(ioread32_mac(AR_RXDP) == rxdp);
}

HAL_BOOL ar5416StopDmaReceive(struct ath_hal *ah)
{
  90bcd8:	6c1004        	entry	a1, 32
  90bcdb:	186ab0        	l32r	a8, 8e679c <strcmp+0x23c>
  90bcde:	c290      	movi.n	a9, 32
  90bce0:	0c0200        	memw
  90bce3:	9980      	s32i.n	a9, a8, 0
	iowrite32_mac(AR_CR, AR_CR_RXD); /* Set receive disable bit */
	if (!ath_hal_wait(ah, AR_CR, AR_CR_RXE, 0)) {
  90bce5:	da20      	mov.n	a10, a2
  90bce7:	c0b8      	movi.n	a11, 8
  90bce9:	c0c4      	movi.n	a12, 4
  90bceb:	c0d0      	movi.n	a13, 0
  90bced:	5bfc5a        	call8	90ae58 <ath_hal_wait>
  90bcf0:	c081      	movi.n	a8, 1
  90bcf2:	c020      	movi.n	a2, 0
  90bcf4:	0a8239        	movnez	a2, a8, a10
		return AH_FALSE;
	} else {
		return AH_TRUE;
	}
}
  90bcf7:	d10f      	retw.n
  90bcf9:	000000        	ill

0090bcfc <ar5416Detach>:
		.ah_setInterrupts        = ar5416SetInterrupts,
	},
};

void ar5416Detach(struct ath_hal *ah)
{
  90bcfc:	6c1004        	entry	a1, 32
	HALASSERT(ah != AH_NULL);
	ath_hal_free(ah);
  90bcff:	da20      	mov.n	a10, a2
  90bd01:	5bef8e        	call8	907b3c <ath_hal_free>
  90bd04:	d10f      	retw.n
	...

0090bd08 <ar5416GetPendingInterrupts>:
	 */
	return ((host_isr != AR_INTR_SPURIOUS) && (host_isr & AR_INTR_MAC_IRQ));
}

HAL_BOOL ar5416GetPendingInterrupts(struct ath_hal *ah, HAL_INT *masked)
{
  90bd08:	6c1004        	entry	a1, 32
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90bd0b:	186aa3        	l32r	a8, 8e6798 <strcmp+0x238>
  90bd0e:	0c0200        	memw
  90bd11:	8980      	l32i.n	a9, a8, 0
#ifndef AR9100
	HAL_BOOL fatal_int = AH_FALSE;
	a_uint32_t sync_cause;

	if (ioread32_mac(AR_INTR_ASYNC_CAUSE)
			& AR_INTR_MAC_IRQ) {
  90bd13:	c082      	movi.n	a8, 2
  90bd15:	089801        	and	a8, a9, a8
	a_uint32_t isr;
#ifndef AR9100
	HAL_BOOL fatal_int = AH_FALSE;
	a_uint32_t sync_cause;

	if (ioread32_mac(AR_INTR_ASYNC_CAUSE)
  90bd18:	c980      	beqz.n	a8, 90bd2c <ar5416GetPendingInterrupts+0x24>
  90bd1a:	186ad9        	l32r	a8, 8e6880 <strcmp+0x320>
  90bd1d:	0c0200        	memw
  90bd20:	8880      	l32i.n	a8, a8, 0
			& AR_INTR_MAC_IRQ) {
		if ((ioread32_mac(AR_RTC_STATUS)
				& AR_RTC_STATUS_M) != AR_RTC_STATUS_ON) {
  90bd22:	080843        	extui	a8, a8, 0, 4
	HAL_BOOL fatal_int = AH_FALSE;
	a_uint32_t sync_cause;

	if (ioread32_mac(AR_INTR_ASYNC_CAUSE)
			& AR_INTR_MAC_IRQ) {
		if ((ioread32_mac(AR_RTC_STATUS)
  90bd25:	68820b        	beqi	a8, 2, 90bd34 <ar5416GetPendingInterrupts+0x2c>
  90bd28:	600013        	j	90bd3f <ar5416GetPendingInterrupts+0x37>
  90bd2b:	009830        	excw
			*masked = 0;
			return AH_FALSE;
		}
	} else {
		*masked = 0;
		return AH_FALSE;
  90bd2e:	d280      	mov.n	a2, a8
  90bd30:	d10f      	retw.n
  90bd32:	000018        	src	a0, a0, a0
  90bd35:	6ada0c        	blti	a13, 12, 90bd45 <ar5416GetPendingInterrupts+0x3d>
  90bd38:	020088        	excw
  90bd3b:	8069      	l32i.n	a0, a6, 36
	}
#endif
	isr = ioread32_mac(AR_ISR_RAC);
	if (isr == 0xffffffff) {
  90bd3d:	8005      	l32i.n	a0, a0, 20
		*masked = 0;
  90bd3f:	c020      	movi.n	a2, 0
  90bd41:	9230      	s32i.n	a2, a3, 0
  90bd43:	d10f      	retw.n
		return AH_FALSE;
	}

	*masked = isr & HAL_INT_COMMON;
  90bd45:	1a6aa5        	l32r	a10, 8e67dc <strcmp+0x27c>
	if (isr & (AR_ISR_TXMINTR | AR_ISR_TXINTM)) {
		*masked |= HAL_INT_TX;
	}
#endif

	if (isr & AR_ISR_BCNMISC) {
  90bd48:	1b6aa7        	l32r	a11, 8e67e4 <strcmp+0x284>
	if (isr == 0xffffffff) {
		*masked = 0;
		return AH_FALSE;
	}

	*masked = isr & HAL_INT_COMMON;
  90bd4b:	0a8a01        	and	a10, a8, a10
  90bd4e:	2a3600        	s32i	a10, a3, 0
	if (isr & (AR_ISR_TXMINTR | AR_ISR_TXINTM)) {
		*masked |= HAL_INT_TX;
	}
#endif

	if (isr & AR_ISR_BCNMISC) {
  90bd51:	7b8021        	bnone	a8, a11, 90bd76 <ar5416GetPendingInterrupts+0x6e>
  90bd54:	196adb        	l32r	a9, 8e68c0 <strcmp+0x360>
  90bd57:	0c0200        	memw
  90bd5a:	8990      	l32i.n	a9, a9, 0
		a_uint32_t s2_s;

		s2_s = ioread32_mac(AR_ISR_S2_S);

		if (s2_s & AR_ISR_S2_GTT) {
  90bd5c:	7b9008        	bnone	a9, a11, 90bd68 <ar5416GetPendingInterrupts+0x60>
			*masked |= HAL_INT_GTT;
  90bd5f:	1b6ab9        	l32r	a11, 8e6844 <strcmp+0x2e4>
  90bd62:	0baa02        	or	a10, a10, a11
  90bd65:	2a3600        	s32i	a10, a3, 0
		}

		if (s2_s & AR_ISR_S2_CST) {
  90bd68:	79960a        	bbci	a9, 9, 90bd76 <ar5416GetPendingInterrupts+0x6e>
			*masked |= HAL_INT_CST;
  90bd6b:	8a30      	l32i.n	a10, a3, 0
  90bd6d:	196a21        	l32r	a9, 8e65f4 <strcmp+0x94>
  90bd70:	09a902        	or	a9, a10, a9
  90bd73:	293600        	s32i	a9, a3, 0
		}
	}

	if (isr & (AR_ISR_RXOK | AR_ISR_RXERR))
  90bd76:	c095      	movi.n	a9, 5
  90bd78:	798009        	bnone	a8, a9, 90bd85 <ar5416GetPendingInterrupts+0x7d>
		*masked |= HAL_INT_RX;
  90bd7b:	8a30      	l32i.n	a10, a3, 0
  90bd7d:	c091      	movi.n	a9, 1
  90bd7f:	09a902        	or	a9, a10, a9
  90bd82:	293600        	s32i	a9, a3, 0
	if (isr & (AR_ISR_TXOK | AR_ISR_TXDESC | AR_ISR_TXERR | AR_ISR_TXEOL)) {
  90bd85:	295ac0        	movi	a9, 0x5c0
  90bd88:	79803c        	bnone	a8, a9, 90bdc8 <ar5416GetPendingInterrupts+0xc0>
		struct ath_hal_5416 *ahp = AH5416(ah);
		a_uint32_t           s0_s, s1_s;

		*masked |= HAL_INT_TX;
  90bd8b:	8930      	l32i.n	a9, a3, 0
  90bd8d:	c480      	movi.n	a8, 64
  90bd8f:	089802        	or	a8, a9, a8
  90bd92:	9830      	s32i.n	a8, a3, 0
  90bd94:	136adc        	l32r	a3, 8e6904 <strcmp+0x3a4>
  90bd97:	0c0200        	memw
  90bd9a:	8930      	l32i.n	a9, a3, 0
  90bd9c:	136add        	l32r	a3, 8e6910 <strcmp+0x3b0>
  90bd9f:	0c0200        	memw
  90bda2:	8830      	l32i.n	a8, a3, 0
		s0_s = ioread32_mac(AR_ISR_S0_S);
		s1_s = ioread32_mac(AR_ISR_S1_S);
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXOK);
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXDESC);
  90bda4:	232239        	l32i	a3, a2, 228
		ahp->ah_intrTxqs |= MS(s1_s, AR_ISR_S1_QCU_TXERR);
  90bda7:	098a02        	or	a10, a8, a9
		a_uint32_t           s0_s, s1_s;

		*masked |= HAL_INT_TX;
		s0_s = ioread32_mac(AR_ISR_S0_S);
		s1_s = ioread32_mac(AR_ISR_S1_S);
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXOK);
  90bdaa:	0a0a49        	extui	a10, a10, 0, 10
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXDESC);
  90bdad:	03aa02        	or	a10, a10, a3
  90bdb0:	136ade        	l32r	a3, 8e6928 <strcmp+0x3c8>
  90bdb3:	039901        	and	a9, a9, a3
		ahp->ah_intrTxqs |= MS(s1_s, AR_ISR_S1_QCU_TXERR);
		ahp->ah_intrTxqs |= MS(s1_s, AR_ISR_S1_QCU_TXEOL);
  90bdb6:	038801        	and	a8, a8, a3

		*masked |= HAL_INT_TX;
		s0_s = ioread32_mac(AR_ISR_S0_S);
		s1_s = ioread32_mac(AR_ISR_S1_S);
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXOK);
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXDESC);
  90bdb9:	09095f        	extui	a9, a9, 16, 16
		ahp->ah_intrTxqs |= MS(s1_s, AR_ISR_S1_QCU_TXERR);
  90bdbc:	09a902        	or	a9, a10, a9
		ahp->ah_intrTxqs |= MS(s1_s, AR_ISR_S1_QCU_TXEOL);
  90bdbf:	08085f        	extui	a8, a8, 16, 16
  90bdc2:	089302        	or	a3, a9, a8
  90bdc5:	232639        	s32i	a3, a2, 228
  90bdc8:	136adf        	l32r	a3, 8e6944 <strcmp+0x3e4>
	if (AH_TRUE == fatal_int) {
		iowrite32_mac(AR_INTR_SYNC_CAUSE_CLR, sync_cause);
		(void) ioread32_mac(AR_INTR_SYNC_CAUSE_CLR);
	}
#endif
	return AH_TRUE;
  90bdcb:	c021      	movi.n	a2, 1
  90bdcd:	0c0200        	memw
  90bdd0:	8830      	l32i.n	a8, a3, 0

#ifndef AR9100
	sync_cause = ioread32_mac(AR_INTR_SYNC_CAUSE);
	fatal_int = ((sync_cause != AR_INTR_SPURIOUS) &&
		     (sync_cause & (AR_INTR_SYNC_HOST1_FATAL
		      | AR_INTR_SYNC_HOST1_PERR))) ? AH_TRUE : AH_FALSE;
  90bdd2:	68800f        	beqi	a8, -1, 90bde5 <ar5416GetPendingInterrupts+0xdd>
  90bdd5:	290a60        	movi	a9, 96
  90bdd8:	798009        	bnone	a8, a9, 90bde5 <ar5416GetPendingInterrupts+0xdd>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bddb:	0c0200        	memw
  90bdde:	9830      	s32i.n	a8, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90bde0:	0c0200        	memw
  90bde3:	8330      	l32i.n	a3, a3, 0
		iowrite32_mac(AR_INTR_SYNC_CAUSE_CLR, sync_cause);
		(void) ioread32_mac(AR_INTR_SYNC_CAUSE_CLR);
	}
#endif
	return AH_TRUE;
}
  90bde5:	d10f      	retw.n
	...

0090bde8 <ar5416SetRxFilter>:
		return AH_TRUE;
	}
}

void ar5416SetRxFilter(struct ath_hal *ah, a_uint32_t bits)
{
  90bde8:	6c1004        	entry	a1, 32
	a_uint32_t phybits;
    
	iowrite32_mac(AR_RX_FILTER, (bits & 0xff) | AR_RX_COMPR_BAR);
  90bdeb:	284a00        	movi	a8, 0x400
  90bdee:	030947        	extui	a9, a3, 0, 8
  90bdf1:	089902        	or	a9, a9, a8
	phybits = 0;
	if (bits & HAL_RX_FILTER_PHYRADAR)
  90bdf4:	1a6a02        	l32r	a10, 8e65fc <strcmp+0x9c>
  90bdf7:	186ae0        	l32r	a8, 8e6978 <xthal_get_ccount+0x20>
  90bdfa:	0a3a01        	and	a10, a3, a10
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90bdfd:	0c0200        	memw
  90be00:	9980      	s32i.n	a9, a8, 0
		phybits |= AR_PHY_ERR_RADAR;
  90be02:	280a20        	movi	a8, 32
  90be05:	290a00        	movi	a9, 0
  90be08:	0a9838        	moveqz	a8, a9, a10
	if (bits & HAL_RX_FILTER_PHYERR)
  90be0b:	773705        	bbci	a3, 23, 90be14 <ar5416SetRxFilter+0x2c>
		phybits |= AR_PHY_ERR_OFDM_TIMING | AR_PHY_ERR_CCK_TIMING;
  90be0e:	136ae1        	l32r	a3, 8e6994 <xthal_get_intenable+0x14>
  90be11:	038802        	or	a8, a8, a3
  90be14:	136ae2        	l32r	a3, 8e699c <__divsi3+0x4>
  90be17:	196ae3        	l32r	a9, 8e69a4 <__divsi3+0xc>
  90be1a:	0c0200        	memw
  90be1d:	9830      	s32i.n	a8, a3, 0
	iowrite32_mac(AR_PHY_ERR, phybits);
	if (phybits) {
  90be1f:	c88d      	beqz.n	a8, 90be30 <ar5416SetRxFilter+0x48>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90be21:	0c0200        	memw
  90be24:	8890      	l32i.n	a8, a9, 0
		iowrite32_mac(AR_RXCFG,
  90be26:	c130      	movi.n	a3, 16
  90be28:	038302        	or	a3, a8, a3
  90be2b:	60000b        	j	90be3a <ar5416SetRxFilter+0x52>
  90be2e:	00000c        	sub	a0, a0, a0
  90be31:	020088        	excw
  90be34:	90c6      	s32i.n	a0, a12, 24
			     ioread32_mac(AR_RXCFG)
			     | AR_RXCFG_ZLFDMA);
	} else {
		iowrite32_mac(AR_RXCFG,
  90be36:	3f0383        	excw
  90be39:	010c02        	or	a12, a0, a1
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90be3c:	009390        	l32e	a0, a9, -52
  90be3f:	d10f      	retw.n
  90be41:	000000        	ill

0090be44 <ar5416ProcTxDesc_20>:
	ads->ds_ctl6 = SM(keyType, AR_EncrType);
	return AH_TRUE;
}

HAL_STATUS ar5416ProcTxDesc_20(struct ath_hal *ah, struct ath_tx_desc *gds)
{
  90be44:	6c1004        	entry	a1, 32
        struct ar5416_desc *ads = AR5416DESC(gds);
        struct ath_tx_desc *ds = (struct ath_tx_desc *)gds;
        
        if ((ads->ds_txstatus9 & AR_TxDone) == 0)
  90be47:	2a305c        	l8ui	a10, a3, 92
  90be4a:	28305d        	l8ui	a8, a3, 93
  90be4d:	29305e        	l8ui	a9, a3, 94
  90be50:	08aa10        	slli	a10, a10, 24
  90be53:	008811        	slli	a8, a8, 16
  90be56:	0a8802        	or	a8, a8, a10
  90be59:	089911        	slli	a9, a9, 8
  90be5c:	089902        	or	a9, a9, a8
  90be5f:	28305f        	l8ui	a8, a3, 95
  90be62:	098902        	or	a9, a8, a9
                return HAL_EINPROGRESS;
  90be65:	c08f      	movi.n	a8, 15
HAL_STATUS ar5416ProcTxDesc_20(struct ath_hal *ah, struct ath_tx_desc *gds)
{
        struct ar5416_desc *ads = AR5416DESC(gds);
        struct ath_tx_desc *ds = (struct ath_tx_desc *)gds;
        
        if ((ads->ds_txstatus9 & AR_TxDone) == 0)
  90be67:	7f9f02        	bbsi	a9, 31, 90be6d <ar5416ProcTxDesc_20+0x29>
  90be6a:	60029b        	j	90c109 <ar5416ProcTxDesc_20+0x2c5>
                return HAL_EINPROGRESS;

        ads->ds_txstatus9 &= ~AR_TxDone;
  90be6d:	c78e      	movi.n	a8, -2
  90be6f:	089801        	and	a8, a9, a8
  90be72:	088b57        	extui	a11, a8, 24, 8
  90be75:	2b345c        	s8i	a11, a3, 92
  90be78:	080b57        	extui	a11, a8, 16, 8
  90be7b:	2b345d        	s8i	a11, a3, 93
  90be7e:	28345f        	s8i	a8, a3, 95
  90be81:	088b47        	extui	a11, a8, 8, 8

        /* Update software copies of the HW status */
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
  90be84:	09184b        	extui	a8, a9, 1, 12
        struct ath_tx_desc *ds = (struct ath_tx_desc *)gds;
        
        if ((ads->ds_txstatus9 & AR_TxDone) == 0)
                return HAL_EINPROGRESS;

        ads->ds_txstatus9 &= ~AR_TxDone;
  90be87:	2b345e        	s8i	a11, a3, 94

        /* Update software copies of the HW status */
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
  90be8a:	088b14        	srli	a11, a8, 8
  90be8d:	2b3464        	s8i	a11, a3, 100
        ds->ds_txstat.ts_tstamp = ads->AR_SendTimestamp;
  90be90:	2c3040        	l8ui	a12, a3, 64
  90be93:	2b3041        	l8ui	a11, a3, 65
                return HAL_EINPROGRESS;

        ads->ds_txstatus9 &= ~AR_TxDone;

        /* Update software copies of the HW status */
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
  90be96:	283465        	s8i	a8, a3, 101
        ds->ds_txstat.ts_tstamp = ads->AR_SendTimestamp;
  90be99:	283042        	l8ui	a8, a3, 66
  90be9c:	08cc10        	slli	a12, a12, 24
  90be9f:	00bb11        	slli	a11, a11, 16
  90bea2:	0cbb02        	or	a11, a11, a12
  90bea5:	088811        	slli	a8, a8, 8
  90bea8:	0b8802        	or	a8, a8, a11
  90beab:	2b3043        	l8ui	a11, a3, 67
        struct ath_tx_desc *ds = (struct ath_tx_desc *)gds;
        
        if ((ads->ds_txstatus9 & AR_TxDone) == 0)
                return HAL_EINPROGRESS;

        ads->ds_txstatus9 &= ~AR_TxDone;
  90beae:	c0a0      	movi.n	a10, 0

        /* Update software copies of the HW status */
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
        ds->ds_txstat.ts_tstamp = ads->AR_SendTimestamp;
  90beb0:	08b802        	or	a8, a11, a8
  90beb3:	088b57        	extui	a11, a8, 24, 8
  90beb6:	2b3460        	s8i	a11, a3, 96
  90beb9:	080b57        	extui	a11, a8, 16, 8
  90bebc:	2b3461        	s8i	a11, a3, 97
  90bebf:	088b47        	extui	a11, a8, 8, 8
  90bec2:	2b3462        	s8i	a11, a3, 98
        ds->ds_txstat.ts_status = 0;
  90bec5:	2a3466        	s8i	a10, a3, 102
        ds->ds_txstat.ts_flags  = 0;
  90bec8:	2a3467        	s8i	a10, a3, 103

        if (ads->ds_txstatus1 & AR_ExcessiveRetries)
  90becb:	2b303c        	l8ui	a11, a3, 60
  90bece:	2a303d        	l8ui	a10, a3, 61

        ads->ds_txstatus9 &= ~AR_TxDone;

        /* Update software copies of the HW status */
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
        ds->ds_txstat.ts_tstamp = ads->AR_SendTimestamp;
  90bed1:	283463        	s8i	a8, a3, 99
        ds->ds_txstat.ts_status = 0;
        ds->ds_txstat.ts_flags  = 0;

        if (ads->ds_txstatus1 & AR_ExcessiveRetries)
  90bed4:	28303e        	l8ui	a8, a3, 62
  90bed7:	08bb10        	slli	a11, a11, 24
  90beda:	00aa11        	slli	a10, a10, 16
  90bedd:	0baa02        	or	a10, a10, a11
  90bee0:	088811        	slli	a8, a8, 8
  90bee3:	0a8802        	or	a8, a8, a10
  90bee6:	2a303f        	l8ui	a10, a3, 63
  90bee9:	08a802        	or	a8, a10, a8
  90beec:	7e8704        	bbci	a8, 30, 90bef4 <ar5416ProcTxDesc_20+0xb0>
                ds->ds_txstat.ts_status |= HAL_TXERR_XRETRY;
  90beef:	c0a1      	movi.n	a10, 1
  90bef1:	2a3466        	s8i	a10, a3, 102
        if (ads->ds_txstatus1 & AR_Filtered)
  90bef4:	7c870a        	bbci	a8, 28, 90bf02 <ar5416ProcTxDesc_20+0xbe>
                ds->ds_txstat.ts_status |= HAL_TXERR_FILT;
  90bef7:	2b3066        	l8ui	a11, a3, 102
  90befa:	c0a2      	movi.n	a10, 2
  90befc:	0aba02        	or	a10, a11, a10
  90beff:	2a3466        	s8i	a10, a3, 102
        if (ads->ds_txstatus1 & AR_FIFOUnderrun)
  90bf02:	c0a4      	movi.n	a10, 4
  90bf04:	7a8008        	bnone	a8, a10, 90bf10 <ar5416ProcTxDesc_20+0xcc>
                ds->ds_txstat.ts_status |= HAL_TXERR_FIFO;
  90bf07:	2b3066        	l8ui	a11, a3, 102
  90bf0a:	0aba02        	or	a10, a11, a10
  90bf0d:	2a3466        	s8i	a10, a3, 102
        if (ads->ds_txstatus9 & AR_TxOpExceeded)
  90bf10:	7e960a        	bbci	a9, 14, 90bf1e <ar5416ProcTxDesc_20+0xda>
		ds->ds_txstat.ts_status |= HAL_TXERR_XTXOP;
  90bf13:	2a3066        	l8ui	a10, a3, 102
  90bf16:	c098      	movi.n	a9, 8
  90bf18:	09a902        	or	a9, a10, a9
  90bf1b:	293466        	s8i	a9, a3, 102
        if (ads->ds_txstatus1 & AR_TxTimerExpired)
  90bf1e:	7c860a        	bbci	a8, 12, 90bf2c <ar5416ProcTxDesc_20+0xe8>
		ds->ds_txstat.ts_status |= HAL_TXERR_TIMER_EXPIRED;
  90bf21:	2a3066        	l8ui	a10, a3, 102
  90bf24:	c190      	movi.n	a9, 16
  90bf26:	09a902        	or	a9, a10, a9
  90bf29:	293466        	s8i	a9, a3, 102

        if (ads->ds_txstatus1 & AR_DescCfgErr)
  90bf2c:	7d8604        	bbci	a8, 13, 90bf34 <ar5416ProcTxDesc_20+0xf0>
		ds->ds_txstat.ts_flags |= HAL_TX_DESC_CFG_ERR;
  90bf2f:	c094      	movi.n	a9, 4
  90bf31:	293467        	s8i	a9, a3, 103
        if (ads->ds_txstatus1 & AR_TxDataUnderrun) {
  90bf34:	7e8611        	bbci	a8, 14, 90bf49 <ar5416ProcTxDesc_20+0x105>
		ds->ds_txstat.ts_flags |= HAL_TX_DATA_UNDERRUN;
  90bf37:	293067        	l8ui	a9, a3, 103
  90bf3a:	c088      	movi.n	a8, 8
  90bf3c:	089802        	or	a8, a9, a8
  90bf3f:	283467        	s8i	a8, a3, 103
		ar5416UpdateTxTrigLevel(ah, AH_TRUE);
  90bf42:	da20      	mov.n	a10, a2
  90bf44:	c0b1      	movi.n	a11, 1
  90bf46:	5bfca3        	call8	90b1d4 <ar5416UpdateTxTrigLevel>
	}
        if (ads->ds_txstatus1 & AR_TxDelimUnderrun) {
  90bf49:	28303d        	l8ui	a8, a3, 61
  90bf4c:	7f8711        	bbci	a8, 31, 90bf61 <ar5416ProcTxDesc_20+0x11d>
		ds->ds_txstat.ts_flags |= HAL_TX_DELIM_UNDERRUN;
  90bf4f:	293067        	l8ui	a9, a3, 103
  90bf52:	c180      	movi.n	a8, 16
  90bf54:	089802        	or	a8, a9, a8
  90bf57:	283467        	s8i	a8, a3, 103
		ar5416UpdateTxTrigLevel(ah, AH_TRUE);
  90bf5a:	da20      	mov.n	a10, a2
  90bf5c:	c0b1      	movi.n	a11, 1
  90bf5e:	5bfc9d        	call8	90b1d4 <ar5416UpdateTxTrigLevel>
	}
        if (ads->ds_txstatus0 & AR_TxBaStatus) {
  90bf61:	283038        	l8ui	a8, a3, 56
  90bf64:	223039        	l8ui	a2, a3, 57
  90bf67:	29303a        	l8ui	a9, a3, 58
  90bf6a:	088810        	slli	a8, a8, 24
  90bf6d:	002211        	slli	a2, a2, 16
  90bf70:	082202        	or	a2, a2, a8
  90bf73:	089911        	slli	a9, a9, 8
  90bf76:	029902        	or	a9, a9, a2
  90bf79:	22303b        	l8ui	a2, a3, 59
  90bf7c:	092902        	or	a9, a2, a9
  90bf7f:	719671        	bbci	a9, 1, 90bff4 <ar5416ProcTxDesc_20+0x1b0>
		ds->ds_txstat.ts_flags |= HAL_TX_BA;
  90bf82:	283067        	l8ui	a8, a3, 103
  90bf85:	220a01        	movi	a2, 1
  90bf88:	028202        	or	a2, a8, a2
  90bf8b:	223467        	s8i	a2, a3, 103
		ds->ds_txstat.ba_low = ads->AR_BaBitmapLow;
  90bf8e:	2a3044        	l8ui	a10, a3, 68
  90bf91:	223045        	l8ui	a2, a3, 69
  90bf94:	283046        	l8ui	a8, a3, 70
  90bf97:	08aa10        	slli	a10, a10, 24
  90bf9a:	002211        	slli	a2, a2, 16
  90bf9d:	0a2202        	or	a2, a2, a10
  90bfa0:	088811        	slli	a8, a8, 8
  90bfa3:	028802        	or	a8, a8, a2
  90bfa6:	223047        	l8ui	a2, a3, 71
		ds->ds_txstat.ba_high = ads->AR_BaBitmapHigh;
  90bfa9:	2a3048        	l8ui	a10, a3, 72
		ds->ds_txstat.ts_flags |= HAL_TX_DELIM_UNDERRUN;
		ar5416UpdateTxTrigLevel(ah, AH_TRUE);
	}
        if (ads->ds_txstatus0 & AR_TxBaStatus) {
		ds->ds_txstat.ts_flags |= HAL_TX_BA;
		ds->ds_txstat.ba_low = ads->AR_BaBitmapLow;
  90bfac:	082802        	or	a8, a2, a8
  90bfaf:	088257        	extui	a2, a8, 24, 8
  90bfb2:	223474        	s8i	a2, a3, 116
  90bfb5:	080257        	extui	a2, a8, 16, 8
  90bfb8:	223475        	s8i	a2, a3, 117
  90bfbb:	088247        	extui	a2, a8, 8, 8
  90bfbe:	223476        	s8i	a2, a3, 118
		ds->ds_txstat.ba_high = ads->AR_BaBitmapHigh;
  90bfc1:	223049        	l8ui	a2, a3, 73
		ds->ds_txstat.ts_flags |= HAL_TX_DELIM_UNDERRUN;
		ar5416UpdateTxTrigLevel(ah, AH_TRUE);
	}
        if (ads->ds_txstatus0 & AR_TxBaStatus) {
		ds->ds_txstat.ts_flags |= HAL_TX_BA;
		ds->ds_txstat.ba_low = ads->AR_BaBitmapLow;
  90bfc4:	283477        	s8i	a8, a3, 119
		ds->ds_txstat.ba_high = ads->AR_BaBitmapHigh;
  90bfc7:	28304a        	l8ui	a8, a3, 74
  90bfca:	08aa10        	slli	a10, a10, 24
  90bfcd:	002211        	slli	a2, a2, 16
  90bfd0:	0a2202        	or	a2, a2, a10
  90bfd3:	088811        	slli	a8, a8, 8
  90bfd6:	028802        	or	a8, a8, a2
  90bfd9:	22304b        	l8ui	a2, a3, 75
  90bfdc:	082802        	or	a8, a2, a8
  90bfdf:	088257        	extui	a2, a8, 24, 8
  90bfe2:	223478        	s8i	a2, a3, 120
  90bfe5:	080257        	extui	a2, a8, 16, 8
  90bfe8:	223479        	s8i	a2, a3, 121
  90bfeb:	088247        	extui	a2, a8, 8, 8
  90bfee:	22347a        	s8i	a2, a3, 122
  90bff1:	28347b        	s8i	a8, a3, 123

        /*
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
  90bff4:	28305c        	l8ui	a8, a3, 92
  90bff7:	22305d        	l8ui	a2, a3, 93
  90bffa:	088810        	slli	a8, a8, 24
  90bffd:	002211        	slli	a2, a2, 16
  90c000:	082202        	or	a2, a2, a8
  90c003:	186ae4        	l32r	a8, 8e6b94 <memcpy+0x30>
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90c006:	2a304c        	l8ui	a10, a3, 76

        /*
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
  90c009:	082201        	and	a2, a2, a8
  90c00c:	02525a        	extui	a2, a2, 21, 11
  90c00f:	223468        	s8i	a2, a3, 104
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90c012:	22304d        	l8ui	a2, a3, 77
  90c015:	08aa10        	slli	a10, a10, 24
  90c018:	28304e        	l8ui	a8, a3, 78
  90c01b:	002211        	slli	a2, a2, 16
  90c01e:	0a2202        	or	a2, a2, a10
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
  90c021:	098a47        	extui	a10, a9, 8, 8
  90c024:	2a346b        	s8i	a10, a3, 107
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90c027:	088811        	slli	a8, a8, 8
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
  90c02a:	1a6ac6        	l32r	a10, 8e6b44 <__udivsi3+0xf8>
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90c02d:	028802        	or	a8, a8, a2
  90c030:	22304f        	l8ui	a2, a3, 79
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
  90c033:	29346a        	s8i	a9, a3, 106
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
  90c036:	0a9901        	and	a9, a9, a10
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90c039:	082802        	or	a8, a2, a8
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
  90c03c:	09095f        	extui	a9, a9, 16, 16
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90c03f:	088257        	extui	a2, a8, 24, 8
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
  90c042:	29346c        	s8i	a9, a3, 108
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
  90c045:	088947        	extui	a9, a8, 8, 8
        /*
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
        ds->ds_txstat.ts_rssi_combined = 
  90c048:	223469        	s8i	a2, a3, 105
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
  90c04b:	29346e        	s8i	a9, a3, 110
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
  90c04e:	22347c        	s8i	a2, a3, 124
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
  90c051:	080957        	extui	a9, a8, 16, 8
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
  90c054:	088247        	extui	a2, a8, 8, 8
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
  90c057:	29346f        	s8i	a9, a3, 111
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
  90c05a:	29347d        	s8i	a9, a3, 125
  90c05d:	22347e        	s8i	a2, a3, 126
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  90c060:	293050        	l8ui	a9, a3, 80
  90c063:	223051        	l8ui	a2, a3, 81
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
  90c066:	28346d        	s8i	a8, a3, 109
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
  90c069:	28347f        	s8i	a8, a3, 127
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  90c06c:	283052        	l8ui	a8, a3, 82
  90c06f:	089910        	slli	a9, a9, 24
  90c072:	002211        	slli	a2, a2, 16
  90c075:	092202        	or	a2, a2, a9
  90c078:	088811        	slli	a8, a8, 8
  90c07b:	028802        	or	a8, a8, a2
  90c07e:	223053        	l8ui	a2, a3, 83
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
  90c081:	293054        	l8ui	a9, a3, 84
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  90c084:	082802        	or	a8, a2, a8
  90c087:	088257        	extui	a2, a8, 24, 8
  90c08a:	223480        	s8i	a2, a3, 128
  90c08d:	080257        	extui	a2, a8, 16, 8
  90c090:	223481        	s8i	a2, a3, 129
  90c093:	088247        	extui	a2, a8, 8, 8
  90c096:	223482        	s8i	a2, a3, 130
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
  90c099:	223055        	l8ui	a2, a3, 85
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  90c09c:	283483        	s8i	a8, a3, 131
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
  90c09f:	283056        	l8ui	a8, a3, 86
  90c0a2:	089910        	slli	a9, a9, 24
  90c0a5:	002211        	slli	a2, a2, 16
  90c0a8:	092202        	or	a2, a2, a9
  90c0ab:	088811        	slli	a8, a8, 8
  90c0ae:	028802        	or	a8, a8, a2
  90c0b1:	223057        	l8ui	a2, a3, 87
  90c0b4:	082802        	or	a8, a2, a8
  90c0b7:	088257        	extui	a2, a8, 24, 8
  90c0ba:	223484        	s8i	a2, a3, 132
  90c0bd:	080257        	extui	a2, a8, 16, 8
  90c0c0:	223485        	s8i	a2, a3, 133
  90c0c3:	088247        	extui	a2, a8, 8, 8
  90c0c6:	223486        	s8i	a2, a3, 134
        ds->ds_txstat.ts_shortretry = MS(ads->ds_txstatus1, AR_RTSFailCnt);
  90c0c9:	29303c        	l8ui	a9, a3, 60
  90c0cc:	22303d        	l8ui	a2, a3, 61
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
  90c0cf:	283487        	s8i	a8, a3, 135
        ds->ds_txstat.ts_shortretry = MS(ads->ds_txstatus1, AR_RTSFailCnt);
  90c0d2:	28303e        	l8ui	a8, a3, 62
  90c0d5:	089910        	slli	a9, a9, 24
  90c0d8:	002211        	slli	a2, a2, 16
  90c0db:	092202        	or	a2, a2, a9
  90c0de:	088811        	slli	a8, a8, 8
  90c0e1:	028802        	or	a8, a8, a2
  90c0e4:	22303f        	l8ui	a2, a3, 63
  90c0e7:	082802        	or	a8, a2, a8
  90c0ea:	084243        	extui	a2, a8, 4, 4
  90c0ed:	223470        	s8i	a2, a3, 112
        ds->ds_txstat.ts_longretry = MS(ads->ds_txstatus1, AR_DataFailCnt);
  90c0f0:	088243        	extui	a2, a8, 8, 4
  90c0f3:	223471        	s8i	a2, a3, 113
        ds->ds_txstat.ts_virtcol = MS(ads->ds_txstatus1, AR_VirtRetryCnt);
  90c0f6:	126ae5        	l32r	a2, 8e6c8c <memcpy+0x128>
  90c0f9:	028801        	and	a8, a8, a2
  90c0fc:	08c814        	srli	a8, a8, 12
        ds->ds_txstat.ts_antenna = 0;		/* ignored for owl */
  90c0ff:	c020      	movi.n	a2, 0
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
        ds->ds_txstat.ts_shortretry = MS(ads->ds_txstatus1, AR_RTSFailCnt);
        ds->ds_txstat.ts_longretry = MS(ads->ds_txstatus1, AR_DataFailCnt);
        ds->ds_txstat.ts_virtcol = MS(ads->ds_txstatus1, AR_VirtRetryCnt);
  90c101:	283472        	s8i	a8, a3, 114
        ds->ds_txstat.ts_antenna = 0;		/* ignored for owl */
  90c104:	223473        	s8i	a2, a3, 115
  90c107:	c080      	movi.n	a8, 0

        return HAL_OK;
}
  90c109:	d280      	mov.n	a2, a8
  90c10b:	d10f      	retw.n
  90c10d:	000000        	ill

0090c110 <ar5416Attach>:
	ath_hal_free(ah);
}

struct ath_hal *
ar5416Attach(HAL_SOFTC sc, adf_os_device_t dev, HAL_STATUS *status)
{
  90c110:	6c1004        	entry	a1, 32
	struct ath_hal_5416 *ahp;
	struct ath_hal *ah;

	ahp = ath_hal_malloc(sizeof (struct ath_hal_5416));
  90c113:	2a1a44        	movi	a10, 0x144
  90c116:	5bee80        	call8	907b18 <ath_hal_malloc>
	ath_hal_free(ah);
}

struct ath_hal *
ar5416Attach(HAL_SOFTC sc, adf_os_device_t dev, HAL_STATUS *status)
{
  90c119:	d520      	mov.n	a5, a2
	struct ath_hal_5416 *ahp;
	struct ath_hal *ah;

	ahp = ath_hal_malloc(sizeof (struct ath_hal_5416));
  90c11b:	d2a0      	mov.n	a2, a10
	if (ahp == AH_NULL) {
  90c11d:	cca4      	bnez.n	a10, 90c125 <ar5416Attach+0x15>
		*status = HAL_ENOMEM;
  90c11f:	c032      	movi.n	a3, 2
  90c121:	9340      	s32i.n	a3, a4, 0
		return AH_NULL;
  90c123:	d10f      	retw.n
	}
	ah = &ahp->ah_priv.h;

	OS_MEMCPY(&ahp->ah_priv, &ar5416hal_10, sizeof(struct ath_hal_private));
  90c125:	1b6ae6        	l32r	a11, 8e6cc0 <memcpy+0x15c>
  90c128:	2c0ad4        	movi	a12, 212
  90c12b:	5bee86        	call8	907b44 <ath_hal_memcpy>

	ah->ah_dev = dev;
  90c12e:	9322      	s32i.n	a3, a2, 8
	ah->ah_sc = sc;

	ah->ah_set11nTxDesc        = ar5416Set11nTxDesc_20;
  90c130:	136ae7        	l32r	a3, 8e6ccc <memcpy+0x168>
	ah = &ahp->ah_priv.h;

	OS_MEMCPY(&ahp->ah_priv, &ar5416hal_10, sizeof(struct ath_hal_private));

	ah->ah_dev = dev;
	ah->ah_sc = sc;
  90c133:	9521      	s32i.n	a5, a2, 4

	ah->ah_set11nTxDesc        = ar5416Set11nTxDesc_20;
  90c135:	932f      	s32i.n	a3, a2, 60
	ah->ah_set11nRateScenario  = ar5416Set11nRateScenario_20;
  90c137:	136ae8        	l32r	a3, 8e6cd8 <memcpy+0x174>
  90c13a:	232610        	s32i	a3, a2, 64
	ah->ah_set11nAggrFirst     = ar5416Set11nAggrFirst_20;
  90c13d:	136ae9        	l32r	a3, 8e6ce4 <memcpy+0x180>
  90c140:	232611        	s32i	a3, a2, 68
	ah->ah_set11nAggrMiddle    = ar5416Set11nAggrMiddle_20;
  90c143:	136aea        	l32r	a3, 8e6cec <memcpy+0x188>
  90c146:	232612        	s32i	a3, a2, 72
	ah->ah_set11nAggrLast      = ar5416Set11nAggrLast_20;
  90c149:	136aeb        	l32r	a3, 8e6cf8 <memcpy+0x194>
  90c14c:	232613        	s32i	a3, a2, 76
	ah->ah_clr11nAggr          = ar5416Clr11nAggr_20;
  90c14f:	136aec        	l32r	a3, 8e6d00 <memcpy+0x19c>
  90c152:	232614        	s32i	a3, a2, 80
	ah->ah_set11nBurstDuration = ar5416Set11nBurstDuration_20;
  90c155:	136aed        	l32r	a3, 8e6d0c <memcpy+0x1a8>
  90c158:	232615        	s32i	a3, a2, 84
	ah->ah_setupRxDesc         = ar5416SetupRxDesc_20;
  90c15b:	136aee        	l32r	a3, 8e6d14 <memcpy+0x1b0>
  90c15e:	232620        	s32i	a3, a2, 128
	ah->ah_procRxDescFast      = ar5416ProcRxDescFast_20;
  90c161:	136aef        	l32r	a3, 8e6d20 <memcpy+0x1bc>
  90c164:	232622        	s32i	a3, a2, 136
	ah->ah_setupTxDesc         = ar5416SetupTxDesc_20;
  90c167:	136af0        	l32r	a3, 8e6d28 <memcpy+0x1c4>
  90c16a:	232617        	s32i	a3, a2, 92
	ah->ah_fillTxDesc          = ar5416FillTxDesc_20;
  90c16d:	136af1        	l32r	a3, 8e6d34 <memcpy+0x1d0>
  90c170:	232618        	s32i	a3, a2, 96
	ah->ah_fillKeyTxDesc       = ar5416FillKeyTxDesc_20;
  90c173:	136af2        	l32r	a3, 8e6d3c <memcpy+0x1d8>
  90c176:	232619        	s32i	a3, a2, 100
	ah->ah_procTxDesc          = ar5416ProcTxDesc_20;
  90c179:	136af3        	l32r	a3, 8e6d48 <memcpy+0x1e4>
  90c17c:	23261a        	s32i	a3, a2, 104
	ah->ah_set11nVirtualMoreFrag = ar5416Set11nVirtualMoreFrag_20;
  90c17f:	136af4        	l32r	a3, 8e6d50 <memcpy+0x1ec>
  90c182:	232616        	s32i	a3, a2, 88

	return ah;
}
  90c185:	d10f      	retw.n
	...

0090c188 <ar5416GetRateTable>:
#undef  HT
#undef  HT_HGI

const HAL_RATE_TABLE *
ar5416GetRateTable(struct ath_hal *ah, a_uint32_t mode)
{
  90c188:	6c1004        	entry	a1, 32
		break;
	case HAL_MODE_11B:
		rt = &ar5416_11b_table;
		break;
	case HAL_MODE_11G:
		rt =  &ar5416_11g_table;
  90c18b:	126af9        	l32r	a2, 8e6d70 <memcpy+0x20c>

const HAL_RATE_TABLE *
ar5416GetRateTable(struct ath_hal *ah, a_uint32_t mode)
{
	HAL_RATE_TABLE *rt;
	switch (mode) {
  90c18e:	683826        	beqi	a3, 8, 90c1b8 <ar5416GetRateTable+0x30>
  90c191:	c028      	movi.n	a2, 8
  90c193:	73230d        	bltu	a2, a3, 90c1a4 <ar5416GetRateTable+0x1c>
	case HAL_MODE_11A:
		rt = &ar5416_11a_table;
  90c196:	126af6        	l32r	a2, 8e6d70 <memcpy+0x20c>

const HAL_RATE_TABLE *
ar5416GetRateTable(struct ath_hal *ah, a_uint32_t mode)
{
	HAL_RATE_TABLE *rt;
	switch (mode) {
  90c199:	68311b        	beqi	a3, 1, 90c1b8 <ar5416GetRateTable+0x30>
	case HAL_MODE_11A:
		rt = &ar5416_11a_table;
		break;
	case HAL_MODE_11B:
		rt = &ar5416_11b_table;
  90c19c:	126af5        	l32r	a2, 8e6d70 <memcpy+0x20c>

const HAL_RATE_TABLE *
ar5416GetRateTable(struct ath_hal *ah, a_uint32_t mode)
{
	HAL_RATE_TABLE *rt;
	switch (mode) {
  90c19f:	693413        	bnei	a3, 4, 90c1b6 <ar5416GetRateTable+0x2e>
  90c1a2:	d10f      	retw.n
  90c1a4:	186a33        	l32r	a8, 8e6a70 <__udivsi3+0x24>
		break;
	case HAL_MODE_11G:
		rt =  &ar5416_11g_table;
		break;
	case HAL_MODE_11NG:
		rt = &ar5416_11ng_table;
  90c1a7:	126af8        	l32r	a2, 8e6d88 <memcpy+0x224>

const HAL_RATE_TABLE *
ar5416GetRateTable(struct ath_hal *ah, a_uint32_t mode)
{
	HAL_RATE_TABLE *rt;
	switch (mode) {
  90c1aa:	78310a        	beq	a3, a8, 90c1b8 <ar5416GetRateTable+0x30>
  90c1ad:	186a32        	l32r	a8, 8e6a78 <__udivsi3+0x2c>
		break;
	case HAL_MODE_11NG:
		rt = &ar5416_11ng_table;
		break;
	case HAL_MODE_11NA:
		rt = &ar5416_11na_table;
  90c1b0:	126af7        	l32r	a2, 8e6d8c <memcpy+0x228>

const HAL_RATE_TABLE *
ar5416GetRateTable(struct ath_hal *ah, a_uint32_t mode)
{
	HAL_RATE_TABLE *rt;
	switch (mode) {
  90c1b3:	783101        	beq	a3, a8, 90c1b8 <ar5416GetRateTable+0x30>
		break;
	case HAL_MODE_11NA:
		rt = &ar5416_11na_table;
		break;
	default:
		return AH_NULL;
  90c1b6:	c020      	movi.n	a2, 0
	}

	return rt;
}
  90c1b8:	d10f      	retw.n
	...

0090c1bc <rcRateSetseries>:
static void
rcRateSetseries(const RATE_TABLE_11N *pRateTable ,
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
  90c1bc:	6c1004        	entry	a1, 32
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
  90c1bf:	c0b0      	movi.n	a11, 0
  90c1c1:	c190      	movi.n	a9, 16
  90c1c3:	06b938        	moveqz	a9, a11, a6
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
  90c1c6:	05560a        	addx4	a6, a5, a5
  90c1c9:	056609        	addx2	a6, a6, a5
  90c1cc:	02660a        	addx4	a6, a6, a2
rcRateSetseries(const RATE_TABLE_11N *pRateTable ,
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
	series->tries = tries;
  90c1cf:	243401        	s8i	a4, a3, 1
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
  90c1d2:	286010        	l8ui	a8, a6, 16
  90c1d5:	c76d      	movi.n	a6, -3
  90c1d7:	068601        	and	a6, a8, a6
static void
rcRateSetseries(const RATE_TABLE_11N *pRateTable ,
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
  90c1da:	2a0a01        	movi	a10, 1
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
  90c1dd:	68650b        	beqi	a6, 5, 90c1ec <rcRateSetseries+0x30>
  90c1e0:	260a09        	movi	a6, 9
  90c1e3:	768105        	beq	a8, a6, 90c1ec <rcRateSetseries+0x30>
  90c1e6:	268cf5        	addi	a6, a8, -11
  90c1e9:	06ba39        	movnez	a10, a11, a6
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
  90c1ec:	09a602        	or	a6, a10, a9
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
		(WLAN_RC_PHY_40(pRateTable->info[rix].phy) ? ATH_RC_CW40_FLAG : 0) | 
  90c1ef:	298cfa        	addi	a9, a8, -6
  90c1f2:	090947        	extui	a9, a9, 0, 8
  90c1f5:	6e9219        	bltui	a9, 2, 90c212 <rcRateSetseries+0x56>
  90c1f8:	c0a0      	movi.n	a10, 0
  90c1fa:	2b8cf6        	addi	a11, a8, -10
  90c1fd:	c091      	movi.n	a9, 1
  90c1ff:	0b9a38        	moveqz	a10, a9, a11
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
  90c202:	ccac      	bnez.n	a10, 90c212 <rcRateSetseries+0x56>
  90c204:	c092      	movi.n	a9, 2
  90c206:	2b8cf5        	addi	a11, a8, -11
  90c209:	0ba939        	movnez	a9, a10, a11
  90c20c:	600004        	j	90c214 <rcRateSetseries+0x58>
  90c20f:	000000        	ill
  90c212:	c092      	movi.n	a9, 2
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
		(WLAN_RC_PHY_40(pRateTable->info[rix].phy) ? ATH_RC_CW40_FLAG : 0) | 
		(WLAN_RC_PHY_SGI(pRateTable->info[rix].phy) ? ATH_RC_HT40_SGI_FLAG : 0);
  90c214:	288cf8        	addi	a8, a8, -8
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
  90c217:	080847        	extui	a8, a8, 0, 8
  90c21a:	096902        	or	a9, a6, a9
  90c21d:	c0b0      	movi.n	a11, 0
  90c21f:	6f8402        	bgeui	a8, 4, 90c225 <rcRateSetseries+0x69>
  90c222:	2b0a04        	movi	a11, 4
  90c225:	0b9902        	or	a9, a9, a11
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
		(WLAN_RC_PHY_40(pRateTable->info[rix].phy) ? ATH_RC_CW40_FLAG : 0) | 
		(WLAN_RC_PHY_SGI(pRateTable->info[rix].phy) ? ATH_RC_HT40_SGI_FLAG : 0);
#ifdef MAGPIE_MERLIN
	if (stbc) {
  90c228:	8618      	l32i.n	a6, a1, 32
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
  90c22a:	293403        	s8i	a9, a3, 3
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
		(WLAN_RC_PHY_40(pRateTable->info[rix].phy) ? ATH_RC_CW40_FLAG : 0) | 
		(WLAN_RC_PHY_SGI(pRateTable->info[rix].phy) ? ATH_RC_HT40_SGI_FLAG : 0);
#ifdef MAGPIE_MERLIN
	if (stbc) {
  90c22d:	c96b      	beqz.n	a6, 90c24c <rcRateSetseries+0x90>
		/* For now, only single stream STBC is supported */
		if (pRateTable->info[rix].rateCode >= 0x80 && 
  90c22f:	05560a        	addx4	a6, a5, a5
  90c232:	056609        	addx2	a6, a6, a5
  90c235:	02660a        	addx4	a6, a6, a2
  90c238:	26601c        	l8ui	a6, a6, 28
  90c23b:	266c80        	addi	a6, a6, -128
  90c23e:	060647        	extui	a6, a6, 0, 8
  90c241:	6f6807        	bgeui	a6, 8, 90c24c <rcRateSetseries+0x90>
		    pRateTable->info[rix].rateCode <= 0x87)
		{
			series->flags |= ATH_RC_TX_STBC_FLAG;
  90c244:	c260      	movi.n	a6, 32
  90c246:	069902        	or	a9, a9, a6
  90c249:	293403        	s8i	a9, a3, 3
		}
	}
#endif
	series->rix = pRateTable->info[rix].baseIndex;
  90c24c:	05560a        	addx4	a6, a5, a5
  90c24f:	056509        	addx2	a5, a6, a5
  90c252:	02550a        	addx4	a5, a5, a2
  90c255:	225022        	l8ui	a2, a5, 34
  90c258:	223400        	s8i	a2, a3, 0
	series->max4msframelen = pRateTable->info[rix].max4msframelen;
  90c25b:	825a      	l32i.n	a2, a5, 40
  90c25d:	9231      	s32i.n	a2, a3, 4
	series->txrateKbps = pRateTable->info[rix].rateKbps;
  90c25f:	8255      	l32i.n	a2, a5, 20
  90c261:	9232      	s32i.n	a2, a3, 8

	/* If the hardware is capable of multiple transmit chains (chainmask is 3, 5 or 7), 
	 * then choose the number of transmit chains dynamically based on entries in the rate table.
	 */
#ifndef ATH_ENABLE_WLAN_FOR_K2
	if(chainmask == 7)
  90c263:	697705        	bnei	a7, 7, 90c26c <rcRateSetseries+0xb0>
		series->tx_chainmask = pRateTable->info[rix].txChainMask_3ch;
  90c266:	225027        	l8ui	a2, a5, 39
  90c269:	60000a        	j	90c277 <rcRateSetseries+0xbb>
	else if(chainmask == 1) 
  90c26c:	697104        	bnei	a7, 1, 90c274 <rcRateSetseries+0xb8>
		series->tx_chainmask = 1;
  90c26f:	273402        	s8i	a7, a3, 2
  90c272:	d10f      	retw.n
	else 
		series->tx_chainmask = pRateTable->info[rix].txChainMask_2ch;  /*Chainmask is 3 or 5*/
  90c274:	225026        	l8ui	a2, a5, 38
  90c277:	223402        	s8i	a2, a3, 2
  90c27a:	d10f      	retw.n

0090c27c <rcIsValidPhyRate>:

/* Return true only for single stream */

static A_BOOL
rcIsValidPhyRate(A_UINT32 phy, A_UINT32 capflag, A_BOOL ignoreCW)
{
  90c27c:	6c1004        	entry	a1, 32
  90c27f:	d820      	mov.n	a8, a2
	if (WLAN_RC_PHY_HT(phy) && !(capflag & WLAN_RC_HT_FLAG)) {
  90c281:	6e2404        	bltui	a2, 4, 90c289 <rcIsValidPhyRate+0xd>
		return FALSE;
  90c284:	c020      	movi.n	a2, 0
/* Return true only for single stream */

static A_BOOL
rcIsValidPhyRate(A_UINT32 phy, A_UINT32 capflag, A_BOOL ignoreCW)
{
	if (WLAN_RC_PHY_HT(phy) && !(capflag & WLAN_RC_HT_FLAG)) {
  90c286:	7c3764        	bbci	a3, 28, 90c2ee <rcIsValidPhyRate+0x72>
		return FALSE;
	}

	if (WLAN_RC_PHY_DS(phy) && !(capflag & WLAN_RC_DS_FLAG))  {
  90c289:	c72d      	movi.n	a2, -3
  90c28b:	028201        	and	a2, a8, a2
  90c28e:	682504        	beqi	a2, 5, 90c296 <rcIsValidPhyRate+0x1a>
  90c291:	c099      	movi.n	a9, 9
  90c293:	792904        	bne	a2, a9, 90c29b <rcIsValidPhyRate+0x1f>

static A_BOOL
rcIsValidPhyRate(A_UINT32 phy, A_UINT32 capflag, A_BOOL ignoreCW)
{
	if (WLAN_RC_PHY_HT(phy) && !(capflag & WLAN_RC_HT_FLAG)) {
		return FALSE;
  90c296:	c020      	movi.n	a2, 0
	}

	if (WLAN_RC_PHY_DS(phy) && !(capflag & WLAN_RC_DS_FLAG))  {
  90c298:	7f3752        	bbci	a3, 31, 90c2ee <rcIsValidPhyRate+0x72>
		return FALSE;
	}
	if (WLAN_RC_PHY_SGI(phy) && !(capflag & WLAN_RC_HT40_SGI_FLAG)) {
  90c29b:	228cf8        	addi	a2, a8, -8
  90c29e:	6f2404        	bgeui	a2, 4, 90c2a6 <rcIsValidPhyRate+0x2a>

static A_BOOL
rcIsValidPhyRate(A_UINT32 phy, A_UINT32 capflag, A_BOOL ignoreCW)
{
	if (WLAN_RC_PHY_HT(phy) && !(capflag & WLAN_RC_HT_FLAG)) {
		return FALSE;
  90c2a1:	c020      	movi.n	a2, 0
	}

	if (WLAN_RC_PHY_DS(phy) && !(capflag & WLAN_RC_DS_FLAG))  {
		return FALSE;
	}
	if (WLAN_RC_PHY_SGI(phy) && !(capflag & WLAN_RC_HT40_SGI_FLAG)) {
  90c2a3:	7d3747        	bbci	a3, 29, 90c2ee <rcIsValidPhyRate+0x72>
		return FALSE;
	}

	if (!ignoreCW && WLAN_RC_PHY_HT(phy)) {
  90c2a6:	c020      	movi.n	a2, 0
  90c2a8:	c0a1      	movi.n	a10, 1
  90c2aa:	d520      	mov.n	a5, a2
  90c2ac:	04a538        	moveqz	a5, a10, a4
  90c2af:	d450      	mov.n	a4, a5
  90c2b1:	725135        	beq	a5, a2, 90c2ea <rcIsValidPhyRate+0x6e>
  90c2b4:	6e8432        	bltui	a8, 4, 90c2ea <rcIsValidPhyRate+0x6e>
		if (WLAN_RC_PHY_40(phy) && !(capflag & WLAN_RC_40_FLAG)) {
  90c2b7:	298cfa        	addi	a9, a8, -6
  90c2ba:	6e920c        	bltui	a9, 2, 90c2ca <rcIsValidPhyRate+0x4e>
  90c2bd:	2b8cf6        	addi	a11, a8, -10
  90c2c0:	0ba238        	moveqz	a2, a10, a11
  90c2c3:	cc23      	bnez.n	a2, 90c2ca <rcIsValidPhyRate+0x4e>
  90c2c5:	c02b      	movi.n	a2, 11
  90c2c7:	728904        	bne	a8, a2, 90c2cf <rcIsValidPhyRate+0x53>
			return FALSE;
  90c2ca:	c020      	movi.n	a2, 0
	if (WLAN_RC_PHY_SGI(phy) && !(capflag & WLAN_RC_HT40_SGI_FLAG)) {
		return FALSE;
	}

	if (!ignoreCW && WLAN_RC_PHY_HT(phy)) {
		if (WLAN_RC_PHY_40(phy) && !(capflag & WLAN_RC_40_FLAG)) {
  90c2cc:	7e371e        	bbci	a3, 30, 90c2ee <rcIsValidPhyRate+0x72>
		if (!WLAN_RC_PHY_40(phy) && (capflag & WLAN_RC_40_FLAG)) {
			return FALSE;
		}
	}
    
	return TRUE;
  90c2cf:	c021      	movi.n	a2, 1
	if (!ignoreCW && WLAN_RC_PHY_HT(phy)) {
		if (WLAN_RC_PHY_40(phy) && !(capflag & WLAN_RC_40_FLAG)) {
			return FALSE;
		}

		if (!WLAN_RC_PHY_40(phy) && (capflag & WLAN_RC_40_FLAG)) {
  90c2d1:	6e9219        	bltui	a9, 2, 90c2ee <rcIsValidPhyRate+0x72>
  90c2d4:	688916        	beqi	a8, 10, 90c2ee <rcIsValidPhyRate+0x72>
  90c2d7:	c09b      	movi.n	a9, 11
  90c2d9:	798111        	beq	a8, a9, 90c2ee <rcIsValidPhyRate+0x72>
  90c2dc:	002004        	ssr	a2
  90c2df:	030319        	srl	a3, a3
  90c2e2:	023203        	xor	a2, a3, a2
  90c2e5:	020240        	extui	a2, a2, 0, 1
  90c2e8:	d10f      	retw.n
			return FALSE;
		}
	}
    
	return TRUE;
  90c2ea:	c021      	movi.n	a2, 1
  90c2ec:	d10f      	retw.n
}
  90c2ee:	d10f      	retw.n

0090c2f0 <rcUpdate_ht$isra$4>:
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  90c2f0:	6c1006        	entry	a1, 48
  90c2f3:	2c1119        	l16ui	a12, a1, 50
  90c2f6:	07094f        	extui	a9, a7, 0, 16
            A_BOOL Xretries, int retries, A_UINT8 curTxAnt, 
            A_UINT16 nFrames, A_UINT16 nBad)
{
	TX_RATE_CTRL *pRc;
	A_UINT32 nowMsec = A_MS_TICKGET();
  90c2f9:	c0a0      	movi.n	a10, 0
  90c2fb:	9912      	s32i.n	a9, a1, 8
  90c2fd:	9510      	s32i.n	a5, a1, 0
  90c2ff:	9c13      	s32i.n	a12, a1, 12
  90c301:	5bedf3        	call8	907ad0 <ath_hal_getuptime>
	A_UINT8 lastPer;
	int rate,count;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c304:	252248        	l32i	a5, a2, 0x120
  90c307:	2222c2        	l32i	a2, a2, 0x308
{
	TX_RATE_CTRL *pRc;
	A_UINT32 nowMsec = A_MS_TICKGET();
	A_UINT8 lastPer;
	int rate,count;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
  90c30a:	233282        	l32i	a3, a3, 0x208
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c30d:	05220a        	addx4	a2, a2, a5
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
            A_BOOL Xretries, int retries, A_UINT8 curTxAnt, 
            A_UINT16 nFrames, A_UINT16 nBad)
{
	TX_RATE_CTRL *pRc;
	A_UINT32 nowMsec = A_MS_TICKGET();
  90c310:	d8a0      	mov.n	a8, a10
	A_UINT8 lastPer;
	int rate,count;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c312:	8521      	l32i.n	a5, a2, 4
		100 * 7 / 8,    // 87.5
		100 * 8 / 9,    // 88.8
		100 * 9 / 10    // 90
	};

	if (!pSib)
  90c314:	8912      	l32i.n	a9, a1, 8
  90c316:	8b10      	l32i.n	a11, a1, 0
  90c318:	8c13      	l32i.n	a12, a1, 12
  90c31a:	6431ce        	beqz	a3, 90c4ec <rcUpdate_ht$isra$4+0x1fc>
	pRc = (TX_RATE_CTRL *)(pSib);

	ASSERT(retries >= 0 && retries < MAX_TX_RETRIES);
	ASSERT(txRate >= 0);
    
	if (txRate < 0) {
  90c31d:	6641cb        	bltz	a4, 90c4ec <rcUpdate_ht$isra$4+0x1fc>
		return;
	}

	lastPer = pRc->state[txRate].per;
  90c320:	a437      	add.n	a7, a3, a4
  90c322:	227000        	l8ui	a2, a7, 0

	if (Xretries) {
  90c325:	cbb0      	beqz.n	a11, 90c359 <rcUpdate_ht$isra$4+0x69>
		/* Update the PER. */
		if (Xretries == 1) {
  90c327:	69b111        	bnei	a11, 1, 90c33c <rcUpdate_ht$isra$4+0x4c>
			pRc->state[txRate].per += 30;
  90c32a:	292c1e        	addi	a9, a2, 30
  90c32d:	090947        	extui	a9, a9, 0, 8
			if (pRc->state[txRate].per > 100) {
  90c330:	260a64        	movi	a6, 100
  90c333:	79630d        	bltu	a6, a9, 90c344 <rcUpdate_ht$isra$4+0x54>
	lastPer = pRc->state[txRate].per;

	if (Xretries) {
		/* Update the PER. */
		if (Xretries == 1) {
			pRc->state[txRate].per += 30;
  90c336:	297400        	s8i	a9, a7, 0
  90c339:	60000a        	j	90c347 <rcUpdate_ht$isra$4+0x57>
			if (retries >= count) {
				retries = count - 1;
			}

			/* new_PER = 7/8*old_PER + 1/8*(currentPER) */
			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90c33c:	bc29      	addi.n	a9, a2, 12
  90c33e:	023614        	srli	a6, a2, 3
  90c341:	06960c        	sub	a6, a9, a6
  90c344:	267400        	s8i	a6, a7, 0
						   (pRc->state[txRate].per / 8) + ((100) / 8));
		}

		/* Xretries == 1 or 2 */

		if (pRc->probeRate == txRate)
  90c347:	26302f        	l8ui	a6, a3, 47
  90c34a:	746102        	beq	a6, a4, 90c350 <rcUpdate_ht$isra$4+0x60>
  90c34d:	6000c3        	j	90c414 <rcUpdate_ht$isra$4+0x124>
			pRc->probeRate = 0;
  90c350:	c060      	movi.n	a6, 0
  90c352:	26342f        	s8i	a6, a3, 47
  90c355:	6000bb        	j	90c414 <rcUpdate_ht$isra$4+0x124>
  90c358:	00c0a9        	excw
  90c35b:	0a6634        	min	a6, a6, a10
		count = sizeof(nRetry2PerLookup) / sizeof(nRetry2PerLookup[0]);
		if (retries >= count) {
			retries = count - 1;
		}

		if (nBad) {
  90c35e:	64c03f        	beqz	a12, 90c3a1 <rcUpdate_ht$isra$4+0xb1>
			 * that part is 100 * nBad / nFrames, and it contributes
			 * 100 * nBad / (nFrames * (retries+1)) to the above
			 * PER.  The expression below is a simplified version
			 * of the sum of these two terms.
			 */
			if (nFrames > 0)
  90c361:	649053        	beqz	a9, 90c3b8 <rcUpdate_ht$isra$4+0xc8>
				pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
  90c364:	096a28        	mull	a10, a6, a9
  90c367:	b16b      	addi.n	a11, a6, 1
  90c369:	acaa      	add.n	a10, a10, a12
  90c36b:	0aaa0a        	addx4	a10, a10, a10
  90c36e:	0b9b28        	mull	a11, a9, a11
			 * 100 * nBad / (nFrames * (retries+1)) to the above
			 * PER.  The expression below is a simplified version
			 * of the sum of these two terms.
			 */
			if (nFrames > 0)
				pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90c371:	023d14        	srli	a13, a2, 3
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
  90c374:	0aaa0a        	addx4	a10, a10, a10
			 * 100 * nBad / (nFrames * (retries+1)) to the above
			 * PER.  The expression below is a simplified version
			 * of the sum of these two terms.
			 */
			if (nFrames > 0)
				pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90c377:	0d2d0c        	sub	a13, a2, a13
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
  90c37a:	0eaa11        	slli	a10, a10, 2
  90c37d:	9810      	s32i.n	a8, a1, 0
  90c37f:	9912      	s32i.n	a9, a1, 8
  90c381:	9c13      	s32i.n	a12, a1, 12
  90c383:	9d11      	s32i.n	a13, a1, 4
  90c385:	5b6984        	call8	8e6998 <__divsi3>
  90c388:	b7ab      	addi.n	a11, a10, 7
			 * 100 * nBad / (nFrames * (retries+1)) to the above
			 * PER.  The expression below is a simplified version
			 * of the sum of these two terms.
			 */
			if (nFrames > 0)
				pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90c38a:	8d11      	l32i.n	a13, a1, 4
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
  90c38c:	0aba3a        	movltz	a10, a11, a10
  90c38f:	0a3a12        	srai	a10, a10, 3
			 * 100 * nBad / (nFrames * (retries+1)) to the above
			 * PER.  The expression below is a simplified version
			 * of the sum of these two terms.
			 */
			if (nFrames > 0)
				pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90c392:	aadd      	add.n	a13, a13, a10
  90c394:	2d7400        	s8i	a13, a7, 0
  90c397:	8810      	l32i.n	a8, a1, 0
  90c399:	8912      	l32i.n	a9, a1, 8
  90c39b:	8c13      	l32i.n	a12, a1, 12
  90c39d:	600017        	j	90c3b8 <rcUpdate_ht$isra$4+0xc8>
  90c3a0:	001a6a        	excw
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
		} else {
			/* new_PER = 7/8*old_PER + 1/8*(currentPER) */

			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
				   (pRc->state[txRate].per / 8) + (nRetry2PerLookup[retries] / 8));
  90c3a3:	fa          	.byte 0xfa
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
		} else {
			/* new_PER = 7/8*old_PER + 1/8*(currentPER) */

			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90c3a4:	023b14        	srli	a11, a2, 3
				   (pRc->state[txRate].per / 8) + (nRetry2PerLookup[retries] / 8));
  90c3a7:	0a6a0a        	addx4	a10, a6, a10
  90c3aa:	8aa0      	l32i.n	a10, a10, 0
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
		} else {
			/* new_PER = 7/8*old_PER + 1/8*(currentPER) */

			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90c3ac:	0b2b0c        	sub	a11, a2, a11
				   (pRc->state[txRate].per / 8) + (nRetry2PerLookup[retries] / 8));
  90c3af:	0a3a14        	srli	a10, a10, 3
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
		} else {
			/* new_PER = 7/8*old_PER + 1/8*(currentPER) */

			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90c3b2:	0aba08        	add	a10, a11, a10
  90c3b5:	2a7400        	s8i	a10, a7, 0
		/*
		 * If we got at most one retry then increase the max rate if
		 * this was a probe.  Otherwise, ignore the probe.
		 */

		if (pRc->probeRate && pRc->probeRate == txRate) {
  90c3b8:	27302f        	l8ui	a7, a3, 47
  90c3bb:	cb79      	beqz.n	a7, 90c3f8 <rcUpdate_ht$isra$4+0x108>
  90c3bd:	747937        	bne	a7, a4, 90c3f8 <rcUpdate_ht$isra$4+0x108>
			if (retries > 0 || 2 * nBad > nFrames) {
  90c3c0:	6b6105        	bgei	a6, 1, 90c3c9 <rcUpdate_ht$isra$4+0xd9>
  90c3c3:	0fcc11        	slli	a12, a12, 1
  90c3c6:	7c9a07        	bge	a9, a12, 90c3d1 <rcUpdate_ht$isra$4+0xe1>
				 * any retries means the probe failed.  Also,
				 * if the attempt worked, but more than half
				 * the subframes were bad then also consider
				 * the probe a failure.
				 */
				pRc->probeRate = 0;
  90c3c9:	c070      	movi.n	a7, 0
  90c3cb:	27342f        	s8i	a7, a3, 47
  90c3ce:	600026        	j	90c3f8 <rcUpdate_ht$isra$4+0x108>
			} else {
				pRc->rateMaxPhy = pRc->probeRate;
  90c3d1:	24346d        	s8i	a4, a3, 109

				if (pRc->state[pRc->probeRate].per > 30) {
  90c3d4:	a436      	add.n	a6, a3, a4
  90c3d6:	276000        	l8ui	a7, a6, 0
  90c3d9:	c19e      	movi.n	a9, 30
  90c3db:	779b05        	bgeu	a9, a7, 90c3e4 <rcUpdate_ht$isra$4+0xf4>
					pRc->state[pRc->probeRate].per = 20;
  90c3de:	270a14        	movi	a7, 20
  90c3e1:	276400        	s8i	a7, a6, 0
				}

				pRc->probeRate = 0;
  90c3e4:	c060      	movi.n	a6, 0
  90c3e6:	26342f        	s8i	a6, a3, 47
				/*
				 * Since this probe succeeded, we allow the next probe
				 * twice as soon.  This allows the maxRate to move up
				 * faster if the probes are succesful.
				 */
				pRc->probeTime = nowMsec - pRateTable->probeInterval / 2;
  90c3e9:	265001        	l8ui	a6, a5, 1
  90c3ec:	061614        	srli	a6, a6, 1
  90c3ef:	06860c        	sub	a6, a8, a6
  90c3f2:	963d      	s32i.n	a6, a3, 52
  90c3f4:	600008        	j	90c400 <rcUpdate_ht$isra$4+0x110>
  90c3f7:	006a61        	excw
			}
		}

		if (retries > 0) {
  90c3fa:	04c060        	excw
			 *
			 * Later: if rssiAck is close to pRc->state[txRate].rssiThres
			 * and we see lots of retries, then we could increase
			 * pRc->state[txRate].rssiThres.
			 */
			pRc->hwMaxRetryPktCnt = 0;
  90c3fd:	600010        	j	90c411 <rcUpdate_ht$isra$4+0x121>
		} else {
			/*
			 * It worked with no retries.  First ignore bogus (small)
			 * rssiAck values.
			 */
			if (txRate == pRc->rateMaxPhy && pRc->hwMaxRetryPktCnt < 255) {
  90c400:	26306d        	l8ui	a6, a3, 109
  90c403:	76490d        	bne	a4, a6, 90c414 <rcUpdate_ht$isra$4+0x124>
  90c406:	263038        	l8ui	a6, a3, 56
  90c409:	270aff        	movi	a7, 255
  90c40c:	776104        	beq	a6, a7, 90c414 <rcUpdate_ht$isra$4+0x124>
				pRc->hwMaxRetryPktCnt++;
  90c40f:	b166      	addi.n	a6, a6, 1
  90c411:	263438        	s8i	a6, a3, 56
    
	/*
	 * If this rate looks bad (high PER) then stop using it for
	 * a while (except if we are probing).
	 */
	if (pRc->state[txRate].per >= 55 && txRate > 0 &&
  90c414:	a436      	add.n	a6, a3, a4
  90c416:	296000        	l8ui	a9, a6, 0
  90c419:	c366      	movi.n	a6, 54
  90c41b:	796b4a        	bgeu	a6, a9, 90c469 <rcUpdate_ht$isra$4+0x179>
  90c41e:	644047        	beqz	a4, 90c469 <rcUpdate_ht$isra$4+0x179>
	    pRateTable->info[txRate].rateKbps <= 
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  90c421:	26306d        	l8ui	a6, a3, 109
	/*
	 * If this rate looks bad (high PER) then stop using it for
	 * a while (except if we are probing).
	 */
	if (pRc->state[txRate].per >= 55 && txRate > 0 &&
	    pRateTable->info[txRate].rateKbps <= 
  90c424:	04470a        	addx4	a7, a4, a4
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  90c427:	066a0a        	addx4	a10, a6, a6
	/*
	 * If this rate looks bad (high PER) then stop using it for
	 * a while (except if we are probing).
	 */
	if (pRc->state[txRate].per >= 55 && txRate > 0 &&
	    pRateTable->info[txRate].rateKbps <= 
  90c42a:	047709        	addx2	a7, a7, a4
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  90c42d:	06a609        	addx2	a6, a10, a6
	/*
	 * If this rate looks bad (high PER) then stop using it for
	 * a while (except if we are probing).
	 */
	if (pRc->state[txRate].per >= 55 && txRate > 0 &&
	    pRateTable->info[txRate].rateKbps <= 
  90c430:	05770a        	addx4	a7, a7, a5
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  90c433:	05660a        	addx4	a6, a6, a5
    
	/*
	 * If this rate looks bad (high PER) then stop using it for
	 * a while (except if we are probing).
	 */
	if (pRc->state[txRate].per >= 55 && txRate > 0 &&
  90c436:	8775      	l32i.n	a7, a7, 20
  90c438:	8665      	l32i.n	a6, a6, 20
  90c43a:	77632b        	bltu	a6, a7, 90c469 <rcUpdate_ht$isra$4+0x179>
  90c43d:	040c47        	extui	a12, a4, 0, 8
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  90c440:	2a3039        	l8ui	a10, a3, 57
  90c443:	d730      	mov.n	a7, a3
  90c445:	c061      	movi.n	a6, 1
  90c447:	600017        	j	90c462 <rcUpdate_ht$isra$4+0x172>
  90c44a:	00002d        	excw
		if (pRc->validRateIndex[i] == curValidTxRate) {
  90c44d:	703bb1        	bgeu	a3, a0, 90c402 <rcUpdate_ht$isra$4+0x112>
  90c450:	66b177        	bltz	a11, 90c5cb <rcSibUpdate_ht$constprop$6+0xdb>
  90c453:	7cd90b        	bne	a13, a12, 90c462 <rcUpdate_ht$isra$4+0x172>
			*pNextIndex = pRc->validRateIndex[i-1];
  90c456:	ab3b      	add.n	a11, a3, a11
  90c458:	26b039        	l8ui	a6, a11, 57
  90c45b:	26346d        	s8i	a6, a3, 109
  90c45e:	600005        	j	90c467 <rcUpdate_ht$isra$4+0x177>
  90c461:	00db60        	excw
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  90c464:	7a62e4        	blt	a6, a10, 90c44c <rcUpdate_ht$isra$4+0x15c>
	{
		rcGetNextLowerValidTxRate(pRateTable, pRc, (A_UINT8) txRate, 
					  &pRc->rateMaxPhy);

		/* Don't probe for a little while. */
		pRc->probeTime = nowMsec;
  90c467:	983d      	s32i.n	a8, a3, 52
	}

	/* Make sure the rates below this have lower PER */
	/* Monotonicity is kept only for rates below the current rate. */
	if (pRc->state[txRate].per < lastPer) {
  90c469:	729307        	bltu	a9, a2, 90c474 <rcUpdate_ht$isra$4+0x184>
			}
		}
	}

	/* Maintain monotonicity for rates above the current rate*/
	for (rate = txRate; rate < pRc->rateTableSize - 1; rate++) {
  90c46c:	26302e        	l8ui	a6, a3, 46
  90c46f:	b069      	addi.n	a9, a6, -1
  90c471:	60004b        	j	90c4c0 <rcUpdate_ht$isra$4+0x1d0>
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  90c474:	04490a        	addx4	a9, a4, a4
  90c477:	049909        	addx2	a9, a9, a4
  90c47a:	05990a        	addx4	a9, a9, a5
	}

	/* Make sure the rates below this have lower PER */
	/* Monotonicity is kept only for rates below the current rate. */
	if (pRc->state[txRate].per < lastPer) {
		for (rate = txRate - 1; rate >= 0; rate--) {
  90c47d:	b042      	addi.n	a2, a4, -1
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  90c47f:	c060      	movi.n	a6, 0

	/* Make sure the rates below this have lower PER */
	/* Monotonicity is kept only for rates below the current rate. */
	if (pRc->state[txRate].per < lastPer) {
		for (rate = txRate - 1; rate >= 0; rate--) {
			if (pRateTable->info[rate].phy != pRateTable->info[txRate].phy) {
  90c481:	db90      	mov.n	a11, a9
  90c483:	600020        	j	90c4a7 <rcUpdate_ht$isra$4+0x1b7>
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  90c486:	a697      	add.n	a7, a9, a6
  90c488:	277ce4        	addi	a7, a7, -28

	/* Make sure the rates below this have lower PER */
	/* Monotonicity is kept only for rates below the current rate. */
	if (pRc->state[txRate].per < lastPer) {
		for (rate = txRate - 1; rate >= 0; rate--) {
			if (pRateTable->info[rate].phy != pRateTable->info[txRate].phy) {
  90c48b:	2a7000        	l8ui	a10, a7, 0
  90c48e:	27b010        	l8ui	a7, a11, 16
  90c491:	77a9d7        	bne	a10, a7, 90c46c <rcUpdate_ht$isra$4+0x17c>
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  90c494:	a237      	add.n	a7, a3, a2
		for (rate = txRate - 1; rate >= 0; rate--) {
			if (pRateTable->info[rate].phy != pRateTable->info[txRate].phy) {
				break;
			}

			if (pRc->state[rate].per > pRc->state[rate+1].per) {
  90c496:	2a7001        	l8ui	a10, a7, 1
  90c499:	2c7000        	l8ui	a12, a7, 0
  90c49c:	7cab02        	bgeu	a10, a12, 90c4a2 <rcUpdate_ht$isra$4+0x1b2>
				pRc->state[rate].per = pRc->state[rate+1].per;
  90c49f:	2a7400        	s8i	a10, a7, 0
	}

	/* Make sure the rates below this have lower PER */
	/* Monotonicity is kept only for rates below the current rate. */
	if (pRc->state[txRate].per < lastPer) {
		for (rate = txRate - 1; rate >= 0; rate--) {
  90c4a2:	b022      	addi.n	a2, a2, -1
  90c4a4:	266cd4        	addi	a6, a6, -44
  90c4a7:	6920db        	bnei	a2, -1, 90c486 <rcUpdate_ht$isra$4+0x196>
  90c4aa:	63ffbe        	j	90c46c <rcUpdate_ht$isra$4+0x17c>
  90c4ad:	00b144        	extui	a1, a0, 11, 5
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  90c4b0:	a432      	add.n	a2, a3, a4
  90c4b2:	b027      	addi.n	a7, a2, -1
		}
	}

	/* Maintain monotonicity for rates above the current rate*/
	for (rate = txRate; rate < pRc->rateTableSize - 1; rate++) {
		if (pRc->state[rate+1].per < pRc->state[rate].per) {
  90c4b4:	277000        	l8ui	a7, a7, 0
  90c4b7:	2a2000        	l8ui	a10, a2, 0
  90c4ba:	77ab02        	bgeu	a10, a7, 90c4c0 <rcUpdate_ht$isra$4+0x1d0>
			pRc->state[rate+1].per = pRc->state[rate].per;
  90c4bd:	272400        	s8i	a7, a2, 0
			}
		}
	}

	/* Maintain monotonicity for rates above the current rate*/
	for (rate = txRate; rate < pRc->rateTableSize - 1; rate++) {
  90c4c0:	7942ea        	blt	a4, a9, 90c4ae <rcUpdate_ht$isra$4+0x1be>
			pRc->state[rate+1].per = pRc->state[rate].per;
		}
	}

	/* Every so often, we reduce the thresholds and PER (different for CCK and OFDM). */
	if (nowMsec - pRc->perDownTime >= pRateTable->rssiReduceInterval) {
  90c4c3:	24321a        	l32i	a4, a3, 104
  90c4c6:	225002        	l8ui	a2, a5, 2
  90c4c9:	04840c        	sub	a4, a8, a4
  90c4cc:	72431c        	bltu	a4, a2, 90c4ec <rcUpdate_ht$isra$4+0x1fc>
  90c4cf:	d230      	mov.n	a2, a3
  90c4d1:	60000e        	j	90c4e3 <rcUpdate_ht$isra$4+0x1f3>
  90c4d4:	002420        	excw
		for (rate = 0; rate < pRc->rateTableSize; rate++) {
			pRc->state[rate].per = 7*pRc->state[rate].per/8;
  90c4d7:	000444        	extui	a4, a0, 0, 5
  90c4da:	0f0434        	min	a4, a0, a15
  90c4dd:	122424        	l32r	a2, 8d5570 <_bss_end+0x3c2660>
  90c4e0:	00b122        	excw
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  90c4e3:	03240c        	sub	a4, a2, a3
		}
	}

	/* Every so often, we reduce the thresholds and PER (different for CCK and OFDM). */
	if (nowMsec - pRc->perDownTime >= pRateTable->rssiReduceInterval) {
		for (rate = 0; rate < pRc->rateTableSize; rate++) {
  90c4e6:	7642eb        	blt	a4, a6, 90c4d5 <rcUpdate_ht$isra$4+0x1e5>
			pRc->state[rate].per = 7*pRc->state[rate].per/8;
		}

		pRc->perDownTime = nowMsec;
  90c4e9:	28361a        	s32i	a8, a3, 104
  90c4ec:	d10f      	retw.n
	...

0090c4f0 <rcSibUpdate_ht$constprop$6>:
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90c4f0:	6c1052        	entry	a1, 0x290
  90c4f3:	d830      	mov.n	a8, a3
  90c4f5:	d350      	mov.n	a3, a5
	TX_RATE_CTRL *pRc = (TX_RATE_CTRL *)(pSib);
	PHY_STATE_CTRL mPhyCtrlState;  

	A_UINT8 i, j, k, hi = 0, htHi = 0;

	pRateTable = (RATE_TABLE_11N*)asc->hwRateTable[sc->sc_curmode];
  90c4f7:	252248        	l32i	a5, a2, 0x120
  90c4fa:	2222c2        	l32i	a2, a2, 0x308
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
	       A_UINT32 capflag, A_BOOL keepState, struct ieee80211_rate  *pRateSet)
{
	RATE_TABLE_11N *pRateTable = 0;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
  90c4fd:	268282        	l32i	a6, a8, 0x208
	TX_RATE_CTRL *pRc = (TX_RATE_CTRL *)(pSib);
	PHY_STATE_CTRL mPhyCtrlState;  

	A_UINT8 i, j, k, hi = 0, htHi = 0;

	pRateTable = (RATE_TABLE_11N*)asc->hwRateTable[sc->sc_curmode];
  90c500:	05220a        	addx4	a2, a2, a5

	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;
  90c503:	c25e      	movi.n	a5, 46
	TX_RATE_CTRL *pRc = (TX_RATE_CTRL *)(pSib);
	PHY_STATE_CTRL mPhyCtrlState;  

	A_UINT8 i, j, k, hi = 0, htHi = 0;

	pRateTable = (RATE_TABLE_11N*)asc->hwRateTable[sc->sc_curmode];
  90c505:	8221      	l32i.n	a2, a2, 4

	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;
  90c507:	25642e        	s8i	a5, a6, 46
  90c50a:	c050      	movi.n	a5, 0

	/* Initialize thresholds according to the global rate table */
	for (i = 0 ; (i < pRc->rateTableSize) && (!keepState); i++) {
		pRc->state[i].per       = 0;
  90c50c:	da50      	mov.n	a10, a5

	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;

	/* Initialize thresholds according to the global rate table */
	for (i = 0 ; (i < pRc->rateTableSize) && (!keepState); i++) {
  90c50e:	c27e      	movi.n	a7, 46
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90c510:	a569      	add.n	a9, a6, a5
	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;

	/* Initialize thresholds according to the global rate table */
	for (i = 0 ; (i < pRc->rateTableSize) && (!keepState); i++) {
		pRc->state[i].per       = 0;
  90c512:	2a9400        	s8i	a10, a9, 0
  90c515:	b155      	addi.n	a5, a5, 1

	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;

	/* Initialize thresholds according to the global rate table */
	for (i = 0 ; (i < pRc->rateTableSize) && (!keepState); i++) {
  90c517:	7759f5        	bne	a5, a7, 90c510 <rcSibUpdate_ht$constprop$6+0x20>
  90c51a:	d760      	mov.n	a7, a6
rcInitValidTxMask(TX_RATE_CTRL *pRc)
{
	A_UINT8 i;

	for (i = 0; i < pRc->rateTableSize; i++) {
		pRc->validRateIndex[i] = FALSE;
  90c51c:	c090      	movi.n	a9, 0
  90c51e:	b055      	addi.n	a5, a5, -1
  90c520:	29743a        	s8i	a9, a7, 58
  90c523:	050547        	extui	a5, a5, 0, 8
  90c526:	b177      	addi.n	a7, a7, 1
static void
rcInitValidTxMask(TX_RATE_CTRL *pRc)
{
	A_UINT8 i;

	for (i = 0; i < pRc->rateTableSize; i++) {
  90c528:	655ff2        	bnez	a5, 90c51e <rcSibUpdate_ht$constprop$6+0x2e>
  90c52b:	211692        	s32i	a1, a1, 0x248
  90c52e:	d910      	mov.n	a9, a1
	/* Determine the valid rates */
	rcInitValidTxMask(pRc);

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < MAX_TX_RATE_TBL; j++) {
			mPhyCtrlState.validPhyRateIndex[i][j] = 0;
  90c530:	da50      	mov.n	a10, a5

	/* Determine the valid rates */
	rcInitValidTxMask(pRc);

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < MAX_TX_RATE_TBL; j++) {
  90c532:	c2be      	movi.n	a11, 46
			mPhyCtrlState.validPhyRateIndex[i][j] = 0;
  90c534:	dc50      	mov.n	a12, a5
  90c536:	600016        	j	90c550 <rcSibUpdate_ht$constprop$6+0x60>
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90c539:	a79d      	add.n	a13, a9, a7
	/* Determine the valid rates */
	rcInitValidTxMask(pRc);

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < MAX_TX_RATE_TBL; j++) {
			mPhyCtrlState.validPhyRateIndex[i][j] = 0;
  90c53b:	2ad40c        	s8i	a10, a13, 12
  90c53e:	b177      	addi.n	a7, a7, 1

	/* Determine the valid rates */
	rcInitValidTxMask(pRc);

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < MAX_TX_RATE_TBL; j++) {
  90c540:	7b79f5        	bne	a7, a11, 90c539 <rcSibUpdate_ht$constprop$6+0x49>
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90c543:	a517      	add.n	a7, a1, a5

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < MAX_TX_RATE_TBL; j++) {
			mPhyCtrlState.validPhyRateIndex[i][j] = 0;
		}   
		mPhyCtrlState.validPhyRateCount[i] = 0;
  90c545:	2c7400        	s8i	a12, a7, 0
  90c548:	b155      	addi.n	a5, a5, 1
  90c54a:	299c2e        	addi	a9, a9, 46
	}

	/* Determine the valid rates */
	rcInitValidTxMask(pRc);

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
  90c54d:	685a04        	beqi	a5, 12, 90c555 <rcSibUpdate_ht$constprop$6+0x65>

	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;

	/* Initialize thresholds according to the global rate table */
	for (i = 0 ; (i < pRc->rateTableSize) && (!keepState); i++) {
  90c550:	c070      	movi.n	a7, 0
  90c552:	63ffe3        	j	90c539 <rcSibUpdate_ht$constprop$6+0x49>
			mPhyCtrlState.validPhyRateIndex[i][j] = 0;
		}   
		mPhyCtrlState.validPhyRateCount[i] = 0;
	}

	pRc->rcPhyMode = (capflag & WLAN_RC_40_FLAG);
  90c555:	c052      	movi.n	a5, 2
  90c557:	054901        	and	a9, a4, a5
  90c55a:	040d40        	extui	a13, a4, 0, 1
  90c55d:	291690        	s32i	a9, a1, 0x240
  90c560:	29646c        	s8i	a9, a6, 108
  90c563:	2d1693        	s32i	a13, a1, 0x24c

	if (pRateSet == NULL || !pRateSet->rates.rs_nrates) {
  90c566:	c834      	beqz.n	a3, 90c56e <rcSibUpdate_ht$constprop$6+0x7e>
  90c568:	273000        	l8ui	a7, a3, 0
  90c56b:	657071        	bnez	a7, 90c5e0 <rcSibUpdate_ht$constprop$6+0xf0>
static A_UINT8 rcSibInitValidRates(const RATE_TABLE_11N *pRateTable,
				   TX_RATE_CTRL *pRc,
				   A_UINT32 capflag,
				   PHY_STATE_CTRL *pPhyStateCtrl)
{
	A_UINT8 i, hi = 0;
  90c56e:	c050      	movi.n	a5, 0
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	for (i = 0; i < pRateTable->rateCount; i++) {
  90c570:	d350      	mov.n	a3, a5
  90c572:	600060        	j	90c5d6 <rcSibUpdate_ht$constprop$6+0xe6>
  90c575:	0e3711        	slli	a7, a3, 2
		if (singleStream) {
			valid = pRateTable->info[i].validSingleStream;
  90c578:	a377      	add.n	a7, a7, a3
	A_UINT8 i, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	for (i = 0; i < pRateTable->rateCount; i++) {
		if (singleStream) {
  90c57a:	281293        	l32i	a8, a1, 0x24c
			valid = pRateTable->info[i].validSingleStream;
  90c57d:	037709        	addx2	a7, a7, a3
  90c580:	02770a        	addx4	a7, a7, a2
	A_UINT8 i, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	for (i = 0; i < pRateTable->rateCount; i++) {
		if (singleStream) {
  90c583:	cc85      	bnez.n	a8, 90c58c <rcSibUpdate_ht$constprop$6+0x9c>
			valid = pRateTable->info[i].validSingleStream;
  90c585:	28700b        	l8ui	a8, a7, 11
  90c588:	600003        	j	90c58f <rcSibUpdate_ht$constprop$6+0x9f>
  90c58b:	002870        	excw
		} else {
			valid = pRateTable->info[i].valid;
  90c58e:	076981        	excw
		}
            
		if (valid == TRUE) {
  90c591:	3e0337        	excw
			A_UINT32 phy = pRateTable->info[i].phy;
  90c594:	0a0377        	excw
  90c597:	090277        	excw
  90c59a:	0a2770        	excw
  90c59d:	10044b        	l32r	a0, 8cd6cc <_bss_end+0x3ba7bc>

			if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
  90c5a0:	02da70        	excw
  90c5a3:	2c0a00        	movi	a12, 0
  90c5a6:	281699        	s32i	a8, a1, 0x264
  90c5a9:	5bff34        	call8	90c27c <rcIsValidPhyRate>
  90c5ac:	281299        	l32i	a8, a1, 0x264
  90c5af:	c9ae      	beqz.n	a10, 90c5d1 <rcSibUpdate_ht$constprop$6+0xe1>
				continue;

			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = i;
  90c5b1:	a719      	add.n	a9, a1, a7
  90c5b3:	2a9000        	l8ui	a10, a9, 0
  90c5b6:	077b09        	addx2	a11, a7, a7
  90c5b9:	07b70f        	subx8	a7, a11, a7
  90c5bc:	0a7709        	addx2	a7, a7, a10
  90c5bf:	a717      	add.n	a7, a1, a7
  90c5c1:	23740c        	s8i	a3, a7, 12
			pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c5c4:	b1aa      	addi.n	a10, a10, 1

static INLINE void
rcSetValidTxMask(TX_RATE_CTRL *pRc, A_UINT8 index, A_BOOL validTxRate)
{
	ASSERT(index < pRc->rateTableSize);
	pRc->validRateIndex[index] = validTxRate ? TRUE : FALSE;
  90c5c6:	a367      	add.n	a7, a6, a3

			if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
				continue;

			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = i;
			pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c5c8:	2a9400        	s8i	a10, a9, 0

static INLINE void
rcSetValidTxMask(TX_RATE_CTRL *pRc, A_UINT8 index, A_BOOL validTxRate)
{
	ASSERT(index < pRc->rateTableSize);
	pRc->validRateIndex[index] = validTxRate ? TRUE : FALSE;
  90c5cb:	28743a        	s8i	a8, a7, 58
			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = i;
			pPhyStateCtrl->validPhyRateCount[phy] += 1;

			rcSetValidTxMask(pRc, i, TRUE);

			hi = A_MAX(hi, i);
  90c5ce:	035537        	maxu	a5, a5, a3
{
	A_UINT8 i, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	for (i = 0; i < pRateTable->rateCount; i++) {
  90c5d1:	b133      	addi.n	a3, a3, 1
  90c5d3:	030347        	extui	a3, a3, 0, 8
  90c5d6:	272000        	l8ui	a7, a2, 0
  90c5d9:	773398        	bltu	a3, a7, 90c575 <rcSibUpdate_ht$constprop$6+0x85>
  90c5dc:	6001de        	j	90c7be <rcSibUpdate_ht$constprop$6+0x2ce>
  90c5df:	002a12        	srai	a10, a0, 2
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
			     (pRateTable->info[j].dot11Rate & 0x7F))
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) == 
  90c5e2:	90c0      	s32i.n	a0, a12, 0
                   struct ieee80211_rateset *pRateSet,
		   A_UINT32 capflag,
		   struct ath_node_target *an,
		   PHY_STATE_CTRL *pPhyStateCtrl)
{
	A_UINT8 i, j, hi = 0;
  90c5e4:	90c0      	s32i.n	a0, a12, 0
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
			     (pRateTable->info[j].dot11Rate & 0x7F))
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) == 
  90c5e6:	e8          	.byte 0xe8
  90c5e7:	c0d4      	movi.n	a13, 4
                   struct ieee80211_rateset *pRateSet,
		   A_UINT32 capflag,
		   struct ath_node_target *an,
		   PHY_STATE_CTRL *pPhyStateCtrl)
{
	A_UINT8 i, j, hi = 0;
  90c5e9:	291691        	s32i	a9, a1, 0x244
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
			     (pRateTable->info[j].dot11Rate & 0x7F))
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) == 
  90c5ec:	0e4e01        	and	a14, a4, a14
  90c5ef:	0a5d38        	moveqz	a13, a5, a10
  90c5f2:	6000c3        	j	90c6b9 <rcSibUpdate_ht$constprop$6+0x1c9>
		for (j = 0; j < pRateTable->rateCount; j++) {
			A_UINT32 phy = pRateTable->info[j].phy;
#ifdef MAGPIE_MERLIN
			struct atheros_node *pSib = ATH_NODE_ATHEROS(an);

			if (pSib->stbc) {
  90c5f5:	2b8282        	l32i	a11, a8, 0x208
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
			A_UINT32 phy = pRateTable->info[j].phy;
  90c5f8:	077a0a        	addx4	a10, a7, a7
  90c5fb:	07aa09        	addx2	a10, a10, a7
#ifdef MAGPIE_MERLIN
			struct atheros_node *pSib = ATH_NODE_ATHEROS(an);

			if (pSib->stbc) {
  90c5fe:	2bb21d        	l32i	a11, a11, 116
  90c601:	1c6acb        	l32r	a12, 8e7130 <memset+0x2e8>
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
			A_UINT32 phy = pRateTable->info[j].phy;
  90c604:	02aa0a        	addx4	a10, a10, a2
  90c607:	25a010        	l8ui	a5, a10, 16
#ifdef MAGPIE_MERLIN
			struct atheros_node *pSib = ATH_NODE_ATHEROS(an);

			if (pSib->stbc) {
  90c60a:	7cb006        	bnone	a11, a12, 90c614 <rcSibUpdate_ht$constprop$6+0x124>
				valid = pRateTable->info[j].validSTBC;
  90c60d:	8ba3      	l32i.n	a11, a10, 12
  90c60f:	60000d        	j	90c620 <rcSibUpdate_ht$constprop$6+0x130>
  90c612:	00002b        	mulsh	a0, a0, a0
			} else if (singleStream) {
  90c615:	1293cc        	l32r	a2, 8f1548 <memset+0xa700>
  90c618:	b38b      	addi.n	a11, a8, 3
#else
			if (singleStream) {
#endif            
				valid = pRateTable->info[j].validSingleStream;
  90c61a:	a260      	add.n	a0, a6, a2
  90c61c:	00018b        	excw
			} else {
				valid = pRateTable->info[j].valid;
  90c61f:	a107      	add.n	a7, a0, a1
			 * We allow a rate only if its valid and the capflag matches one of
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
			     (pRateTable->info[j].dot11Rate & 0x7F))
  90c621:	7a0a07        	bge	a0, a10, 90c62c <rcSibUpdate_ht$constprop$6+0x13c>
  90c624:	aa09      	add.n	a9, a0, a10
  90c626:	02aa0a        	addx4	a10, a10, a2
			/*
			 * We allow a rate only if its valid and the capflag matches one of
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
  90c629:	2cf000        	l8ui	a12, a15, 0
  90c62c:	2aa01e        	l8ui	a10, a10, 30
  90c62f:	0aca03        	xor	a10, a12, a10
  90c632:	0a0a46        	extui	a10, a10, 0, 7
  90c635:	65a064        	bnez	a10, 90c69d <rcSibUpdate_ht$constprop$6+0x1ad>
			     (pRateTable->info[j].dot11Rate & 0x7F))
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) == 
  90c638:	c0a1      	movi.n	a10, 1
  90c63a:	0eda39        	movnez	a10, a13, a14
  90c63d:	0bab01        	and	a11, a10, a11
  90c640:	c0a1      	movi.n	a10, 1
  90c642:	0eda39        	movnez	a10, a13, a14
  90c645:	7ab954        	bne	a11, a10, 90c69d <rcSibUpdate_ht$constprop$6+0x1ad>
				WLAN_RC_CAP_MODE(capflag)) && !WLAN_RC_PHY_HT(phy)) {
  90c648:	6f5451        	bgeui	a5, 4, 90c69d <rcSibUpdate_ht$constprop$6+0x1ad>
				if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
  90c64b:	da50      	mov.n	a10, a5
  90c64d:	db40      	mov.n	a11, a4
  90c64f:	2c0a00        	movi	a12, 0
  90c652:	281699        	s32i	a8, a1, 0x264
  90c655:	291696        	s32i	a9, a1, 0x258
  90c658:	2d1695        	s32i	a13, a1, 0x254
  90c65b:	2e1698        	s32i	a14, a1, 0x260
  90c65e:	2f1697        	s32i	a15, a1, 0x25c
  90c661:	5bff06        	call8	90c27c <rcIsValidPhyRate>
  90c664:	281299        	l32i	a8, a1, 0x264
  90c667:	291296        	l32i	a9, a1, 0x258
  90c66a:	2d1295        	l32i	a13, a1, 0x254
  90c66d:	2e1298        	l32i	a14, a1, 0x260
  90c670:	2f1297        	l32i	a15, a1, 0x25c
  90c673:	caa6      	beqz.n	a10, 90c69d <rcSibUpdate_ht$constprop$6+0x1ad>
					continue;

				pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
  90c675:	a51a      	add.n	a10, a1, a5
  90c677:	2ba000        	l8ui	a11, a10, 0
  90c67a:	055c09        	addx2	a12, a5, a5
  90c67d:	05c50f        	subx8	a5, a12, a5
  90c680:	0b5509        	addx2	a5, a5, a11
  90c683:	a515      	add.n	a5, a1, a5
  90c685:	27540c        	s8i	a7, a5, 12

static INLINE void
rcSetValidTxMask(TX_RATE_CTRL *pRc, A_UINT8 index, A_BOOL validTxRate)
{
	ASSERT(index < pRc->rateTableSize);
	pRc->validRateIndex[index] = validTxRate ? TRUE : FALSE;
  90c688:	c0c1      	movi.n	a12, 1
  90c68a:	a765      	add.n	a5, a6, a7
  90c68c:	2c543a        	s8i	a12, a5, 58

				pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
				pPhyStateCtrl->validPhyRateCount[phy] += 1;

				rcSetValidTxMask(pRc, j, TRUE);
				hi = A_MAX(hi, j);
  90c68f:	251291        	l32i	a5, a1, 0x244
				WLAN_RC_CAP_MODE(capflag)) && !WLAN_RC_PHY_HT(phy)) {
				if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
					continue;

				pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
				pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c692:	b1bb      	addi.n	a11, a11, 1

				rcSetValidTxMask(pRc, j, TRUE);
				hi = A_MAX(hi, j);
  90c694:	075537        	maxu	a5, a5, a7
				WLAN_RC_CAP_MODE(capflag)) && !WLAN_RC_PHY_HT(phy)) {
				if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
					continue;

				pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
				pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c697:	2ba400        	s8i	a11, a10, 0

				rcSetValidTxMask(pRc, j, TRUE);
				hi = A_MAX(hi, j);
  90c69a:	251691        	s32i	a5, a1, 0x244
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
  90c69d:	b177      	addi.n	a7, a7, 1
  90c69f:	070747        	extui	a7, a7, 0, 8
  90c6a2:	600005        	j	90c6ab <rcSibUpdate_ht$constprop$6+0x1bb>
			/*
			 * We allow a rate only if its valid and the capflag matches one of
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
  90c6a5:	a93f      	add.n	a15, a3, a9
	A_UINT8 i, j, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
  90c6a7:	c070      	movi.n	a7, 0
			/*
			 * We allow a rate only if its valid and the capflag matches one of
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
  90c6a9:	b1ff      	addi.n	a15, a15, 1
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
  90c6ab:	252000        	l8ui	a5, a2, 0
  90c6ae:	757b02        	bgeu	a7, a5, 90c6b4 <rcSibUpdate_ht$constprop$6+0x1c4>
  90c6b1:	63ff40        	j	90c5f5 <rcSibUpdate_ht$constprop$6+0x105>
	A_UINT8 i, j, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
  90c6b4:	b199      	addi.n	a9, a9, 1
  90c6b6:	090947        	extui	a9, a9, 0, 8
  90c6b9:	253000        	l8ui	a5, a3, 0
  90c6bc:	7593e5        	bltu	a9, a5, 90c6a5 <rcSibUpdate_ht$constprop$6+0x1b5>
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	A_UINT8 *phtMcs = (A_UINT8*)&pRateSet->htrates;
	TX_RATE_CTRL *pRc = (TX_RATE_CTRL *)(pSib);
	PHY_STATE_CTRL mPhyCtrlState;  

	A_UINT8 i, j, k, hi = 0, htHi = 0;
  90c6bf:	c090      	movi.n	a9, 0
	} else {
		/* Use intersection of working rates and valid rates */
		hi = rcSibSetValidRates(pRateTable, pRc, &(pRateSet->rates),
					capflag, an, &mPhyCtrlState);

		if (capflag & WLAN_RC_HT_FLAG) {
  90c6c1:	7c4f02        	bbsi	a4, 28, 90c6c7 <rcSibUpdate_ht$constprop$6+0x1d7>
  90c6c4:	6000f0        	j	90c7b8 <rcSibUpdate_ht$constprop$6+0x2c8>
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
			    || !WLAN_RC_PHY_HT(phy) 
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
			    || ((pRateTable->info[j].dot11Rate == 15) && 
				(valid & TRUE_20) && 
				(capflag & WLAN_RC_WEP_TKIP_FLAG)) )
  90c6c7:	251a00        	movi	a5, 0x100
	       A_UINT32 capflag, A_BOOL keepState, struct ieee80211_rate  *pRateSet)
{
	RATE_TABLE_11N *pRateTable = 0;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	A_UINT8 *phtMcs = (A_UINT8*)&pRateSet->htrates;
  90c6ca:	233c1f        	addi	a3, a3, 31
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
			    || !WLAN_RC_PHY_HT(phy) 
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
			    || ((pRateTable->info[j].dot11Rate == 15) && 
				(valid & TRUE_20) && 
				(capflag & WLAN_RC_WEP_TKIP_FLAG)) )
  90c6cd:	054501        	and	a5, a4, a5
	       A_UINT32 capflag, A_BOOL keepState, struct ieee80211_rate  *pRateSet)
{
	RATE_TABLE_11N *pRateTable = 0;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	A_UINT8 *phtMcs = (A_UINT8*)&pRateSet->htrates;
  90c6d0:	23169a        	s32i	a3, a1, 0x268
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
			    || !WLAN_RC_PHY_HT(phy) 
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
			    || ((pRateTable->info[j].dot11Rate == 15) && 
				(valid & TRUE_20) && 
				(capflag & WLAN_RC_WEP_TKIP_FLAG)) )
  90c6d3:	251694        	s32i	a5, a1, 0x250
	       A_UINT32 capflag, A_BOOL keepState, struct ieee80211_rate  *pRateSet)
{
	RATE_TABLE_11N *pRateTable = 0;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	A_UINT8 *phtMcs = (A_UINT8*)&pRateSet->htrates;
  90c6d6:	d390      	mov.n	a3, a9
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
			    || !WLAN_RC_PHY_HT(phy) 
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
			    || ((pRateTable->info[j].dot11Rate == 15) && 
  90c6d8:	c0ef      	movi.n	a14, 15
  90c6da:	6000d1        	j	90c7af <rcSibUpdate_ht$constprop$6+0x2bf>
		for (j = 0; j < pRateTable->rateCount; j++) {
			A_UINT32 phy = pRateTable->info[j].phy;
#ifdef MAGPIE_MERLIN
			struct atheros_node *pSib = ATH_NODE_ATHEROS(an);

			if (pSib->stbc) {
  90c6dd:	2b8282        	l32i	a11, a8, 0x208
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
			A_UINT32 phy = pRateTable->info[j].phy;
  90c6e0:	077a0a        	addx4	a10, a7, a7
  90c6e3:	07aa09        	addx2	a10, a10, a7
#ifdef MAGPIE_MERLIN
			struct atheros_node *pSib = ATH_NODE_ATHEROS(an);

			if (pSib->stbc) {
  90c6e6:	2bb21d        	l32i	a11, a11, 116
  90c6e9:	1c6acb        	l32r	a12, 8e7218 <memset+0x3d0>
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
			A_UINT32 phy = pRateTable->info[j].phy;
  90c6ec:	02aa0a        	addx4	a10, a10, a2
  90c6ef:	25a010        	l8ui	a5, a10, 16
#ifdef MAGPIE_MERLIN
			struct atheros_node *pSib = ATH_NODE_ATHEROS(an);

			if (pSib->stbc) {
  90c6f2:	7cb006        	bnone	a11, a12, 90c6fc <rcSibUpdate_ht$constprop$6+0x20c>
				valid = pRateTable->info[j].validSTBC;
  90c6f5:	2aa00f        	l8ui	a10, a10, 15
  90c6f8:	600010        	j	90c70c <rcSibUpdate_ht$constprop$6+0x21c>
  90c6fb:	002d12        	srai	a13, a0, 2
			} else if (singleStream) {
  90c6fe:	93cc      	s32i.n	a3, a12, 48
  90c700:	d62a      	excw
#else
			if (singleStream) {
#endif
				valid = pRateTable->info[j].validSingleStream;
  90c702:	a00b      	add.n	a11, a0, a0
  90c704:	600004        	j	90c70c <rcSibUpdate_ht$constprop$6+0x21c>
  90c707:	00002a        	muluh	a0, a0, a0
			} else {
				valid = pRateTable->info[j].valid;
  90c70a:	a007      	add.n	a7, a0, a0
			}
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
  90c70c:	077b0a        	addx4	a11, a7, a7
  90c70f:	07bb09        	addx2	a11, a11, a7
  90c712:	02bb0a        	addx4	a11, a11, a2
  90c715:	2bb01e        	l8ui	a11, a11, 30
  90c718:	2cf000        	l8ui	a12, a15, 0
  90c71b:	0cbc03        	xor	a12, a11, a12
				valid = pRateTable->info[j].validSingleStream;
			} else {
				valid = pRateTable->info[j].valid;
			}
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
  90c71e:	0c0c46        	extui	a12, a12, 0, 7
  90c721:	65c06b        	bnez	a12, 90c790 <rcSibUpdate_ht$constprop$6+0x2a0>
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
			    || !WLAN_RC_PHY_HT(phy) 
  90c724:	6e5468        	bltui	a5, 4, 90c790 <rcSibUpdate_ht$constprop$6+0x2a0>
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
  90c727:	c0d2      	movi.n	a13, 2
  90c729:	0dac01        	and	a12, a10, a13
  90c72c:	c8c4      	beqz.n	a12, 90c734 <rcSibUpdate_ht$constprop$6+0x244>
  90c72e:	2d1290        	l32i	a13, a1, 0x240
  90c731:	64d148        	beqz	a13, 90c87d <rcSibUpdate_ht$constprop$6+0x38d>
  90c734:	c0d4      	movi.n	a13, 4
  90c736:	7da056        	bnone	a10, a13, 90c790 <rcSibUpdate_ht$constprop$6+0x2a0>
  90c739:	2d1290        	l32i	a13, a1, 0x240
  90c73c:	64d050        	beqz	a13, 90c790 <rcSibUpdate_ht$constprop$6+0x2a0>
			    || ((pRateTable->info[j].dot11Rate == 15) && 
  90c73f:	7eb907        	bne	a11, a14, 90c74a <rcSibUpdate_ht$constprop$6+0x25a>
  90c742:	c8c4      	beqz.n	a12, 90c74a <rcSibUpdate_ht$constprop$6+0x25a>
				(valid & TRUE_20) && 
  90c744:	2d1294        	l32i	a13, a1, 0x250
  90c747:	65d045        	bnez	a13, 90c790 <rcSibUpdate_ht$constprop$6+0x2a0>
				(capflag & WLAN_RC_WEP_TKIP_FLAG)) )
			{
				continue;
			}
    
			if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
  90c74a:	da50      	mov.n	a10, a5
  90c74c:	db40      	mov.n	a11, a4
  90c74e:	2c0a00        	movi	a12, 0
  90c751:	281699        	s32i	a8, a1, 0x264
  90c754:	291696        	s32i	a9, a1, 0x258
  90c757:	2e1698        	s32i	a14, a1, 0x260
  90c75a:	2f1697        	s32i	a15, a1, 0x25c
  90c75d:	5bfec7        	call8	90c27c <rcIsValidPhyRate>
  90c760:	281299        	l32i	a8, a1, 0x264
  90c763:	291296        	l32i	a9, a1, 0x258
  90c766:	2e1298        	l32i	a14, a1, 0x260
  90c769:	2f1297        	l32i	a15, a1, 0x25c
  90c76c:	caa0      	beqz.n	a10, 90c790 <rcSibUpdate_ht$constprop$6+0x2a0>
				continue;
    
			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
  90c76e:	a51a      	add.n	a10, a1, a5
  90c770:	2ba000        	l8ui	a11, a10, 0
  90c773:	055c09        	addx2	a12, a5, a5
  90c776:	05c50f        	subx8	a5, a12, a5
  90c779:	0b5509        	addx2	a5, a5, a11
  90c77c:	a515      	add.n	a5, a1, a5
			pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c77e:	b1bb      	addi.n	a11, a11, 1
			}
    
			if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
				continue;
    
			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
  90c780:	27540c        	s8i	a7, a5, 12
			pPhyStateCtrl->validPhyRateCount[phy] += 1;
  90c783:	2ba400        	s8i	a11, a10, 0

static INLINE void
rcSetValidTxMask(TX_RATE_CTRL *pRc, A_UINT8 index, A_BOOL validTxRate)
{
	ASSERT(index < pRc->rateTableSize);
	pRc->validRateIndex[index] = validTxRate ? TRUE : FALSE;
  90c786:	a765      	add.n	a5, a6, a7
  90c788:	c0a1      	movi.n	a10, 1
  90c78a:	2a543a        	s8i	a10, a5, 58
    
			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
			pPhyStateCtrl->validPhyRateCount[phy] += 1;

			rcSetValidTxMask(pRc, j, TRUE);
			hi = A_MAX(hi, j);
  90c78d:	079937        	maxu	a9, a9, a7
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
  90c790:	b177      	addi.n	a7, a7, 1
  90c792:	070747        	extui	a7, a7, 0, 8
  90c795:	600008        	j	90c7a1 <rcSibUpdate_ht$constprop$6+0x2b1>
				valid = pRateTable->info[j].validSingleStream;
			} else {
				valid = pRateTable->info[j].valid;
			}
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
  90c798:	2d129a        	l32i	a13, a1, 0x268
	A_UINT8 i, j, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
  90c79b:	c070      	movi.n	a7, 0
				valid = pRateTable->info[j].validSingleStream;
			} else {
				valid = pRateTable->info[j].valid;
			}
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
  90c79d:	a3df      	add.n	a15, a13, a3
  90c79f:	b1ff      	addi.n	a15, a15, 1
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
  90c7a1:	252000        	l8ui	a5, a2, 0
  90c7a4:	757b02        	bgeu	a7, a5, 90c7aa <rcSibUpdate_ht$constprop$6+0x2ba>
  90c7a7:	63ff32        	j	90c6dd <rcSibUpdate_ht$constprop$6+0x1ed>
	A_UINT8 i, j, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
  90c7aa:	b133      	addi.n	a3, a3, 1
  90c7ac:	030347        	extui	a3, a3, 0, 8
  90c7af:	2d129a        	l32i	a13, a1, 0x268
  90c7b2:	25d000        	l8ui	a5, a13, 0
  90c7b5:	7533df        	bltu	a3, a5, 90c798 <rcSibUpdate_ht$constprop$6+0x2a8>
		if (capflag & WLAN_RC_HT_FLAG) {
			htHi = rcSibSetValidHtRates(pRateTable, pRc, phtMcs,
						    capflag, an, &mPhyCtrlState);
		}

		hi = A_MAX(hi, htHi);
  90c7b8:	231291        	l32i	a3, a1, 0x244
  90c7bb:	039537        	maxu	a5, a9, a3
	}

	pRc->rateTableSize = hi + 1;
	pRc->rateMaxPhy    = 0;
  90c7be:	c030      	movi.n	a3, 0
		}

		hi = A_MAX(hi, htHi);
	}

	pRc->rateTableSize = hi + 1;
  90c7c0:	b155      	addi.n	a5, a5, 1
	pRc->rateMaxPhy    = 0;
  90c7c2:	23646d        	s8i	a3, a6, 109
  90c7c5:	c030      	movi.n	a3, 0
		}

		hi = A_MAX(hi, htHi);
	}

	pRc->rateTableSize = hi + 1;
  90c7c7:	25642e        	s8i	a5, a6, 46
	pRc->rateMaxPhy    = 0;
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);

	for (i = 0, k = 0; i < WLAN_RC_PHY_MAX; i++) {
  90c7ca:	d430      	mov.n	a4, a3
  90c7cc:	60004e        	j	90c81e <rcSibUpdate_ht$constprop$6+0x32e>
  90c7cf:	002d12        	srai	a13, a0, 2
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90c7d2:	92a9      	s32i.n	a2, a10, 36
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);

	for (i = 0, k = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < mPhyCtrlState.validPhyRateCount[i]; j++) {
			pRc->validRateIndex[k++] = mPhyCtrlState.validPhyRateIndex[i][j];
  90c7d4:	69a7d8        	bnei	a10, 7, 90c7b0 <rcSibUpdate_ht$constprop$6+0x2c0>
  90c7d7:	28800c        	l8ui	a8, a8, 12
  90c7da:	b177      	addi.n	a7, a7, 1
  90c7dc:	28943a        	s8i	a8, a9, 58
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90c7df:	070847        	extui	a8, a7, 0, 8
  90c7e2:	a489      	add.n	a9, a8, a4
  90c7e4:	090947        	extui	a9, a9, 0, 8
	pRc->rateMaxPhy    = 0;
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);

	for (i = 0, k = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < mPhyCtrlState.validPhyRateCount[i]; j++) {
  90c7e7:	7583e5        	bltu	a8, a5, 90c7d0 <rcSibUpdate_ht$constprop$6+0x2e0>
			pRc->validRateIndex[k++] = mPhyCtrlState.validPhyRateIndex[i][j];
		}   

		if (!rcIsValidPhyRate(i, pRateTable->initialRateMax, TRUE) ||
  90c7ea:	2b2003        	l8ui	a11, a2, 3
  90c7ed:	a454      	add.n	a4, a5, a4
  90c7ef:	da30      	mov.n	a10, a3
  90c7f1:	c0c1      	movi.n	a12, 1
  90c7f3:	040447        	extui	a4, a4, 0, 8
  90c7f6:	5bfea1        	call8	90c27c <rcIsValidPhyRate>
  90c7f9:	c9a3      	beqz.n	a10, 90c810 <rcSibUpdate_ht$constprop$6+0x320>
  90c7fb:	645011        	beqz	a5, 90c810 <rcSibUpdate_ht$constprop$6+0x320>
		    !mPhyCtrlState.validPhyRateCount[i]) 
			continue;

		pRc->rateMaxPhy = mPhyCtrlState.validPhyRateIndex[i][j-1];	
  90c7fe:	033709        	addx2	a7, a3, a3
  90c801:	03770f        	subx8	a7, a7, a3
  90c804:	017709        	addx2	a7, a7, a1
  90c807:	057508        	add	a5, a7, a5
  90c80a:	25500b        	l8ui	a5, a5, 11
  90c80d:	25646d        	s8i	a5, a6, 109
  90c810:	251292        	l32i	a5, a1, 0x248
  90c813:	b133      	addi.n	a3, a3, 1
  90c815:	255c2e        	addi	a5, a5, 46
  90c818:	251692        	s32i	a5, a1, 0x248
	pRc->rateTableSize = hi + 1;
	pRc->rateMaxPhy    = 0;
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);

	for (i = 0, k = 0; i < WLAN_RC_PHY_MAX; i++) {
  90c81b:	683a09        	beqi	a3, 12, 90c828 <rcSibUpdate_ht$constprop$6+0x338>
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90c81e:	a315      	add.n	a5, a1, a3
	pRc->rateMaxPhy    = 0;
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);

	for (i = 0, k = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < mPhyCtrlState.validPhyRateCount[i]; j++) {
  90c820:	255000        	l8ui	a5, a5, 0
  90c823:	c070      	movi.n	a7, 0
  90c825:	63ffb6        	j	90c7df <rcSibUpdate_ht$constprop$6+0x2ef>
	}
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);
	ASSERT(k <= MAX_TX_RATE_TBL);

	pRc->rateMaxPhy = pRc->validRateIndex[k-4];
  90c828:	a463      	add.n	a3, a6, a4
  90c82a:	233036        	l8ui	a3, a3, 54
	pRc->maxValidRate = k;
  90c82d:	246439        	s8i	a4, a6, 57
	}
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);
	ASSERT(k <= MAX_TX_RATE_TBL);

	pRc->rateMaxPhy = pRc->validRateIndex[k-4];
  90c830:	23646d        	s8i	a3, a6, 109
  90c833:	60003c        	j	90c873 <rcSibUpdate_ht$constprop$6+0x383>
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
		for (j=0; j <= i-1; j++) {
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c836:	a369      	add.n	a9, a6, a3
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c838:	b133      	addi.n	a3, a3, 1
  90c83a:	a368      	add.n	a8, a6, a3
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
		for (j=0; j <= i-1; j++) {
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c83c:	25903a        	l8ui	a5, a9, 58
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c83f:	27803a        	l8ui	a7, a8, 58
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
		for (j=0; j <= i-1; j++) {
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c842:	055a0a        	addx4	a10, a5, a5
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c845:	077b0a        	addx4	a11, a7, a7
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
		for (j=0; j <= i-1; j++) {
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c848:	05aa09        	addx2	a10, a10, a5
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c84b:	07bb09        	addx2	a11, a11, a7
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
		for (j=0; j <= i-1; j++) {
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c84e:	02aa0a        	addx4	a10, a10, a2
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c851:	02bb0a        	addx4	a11, a11, a2
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
		for (j=0; j <= i-1; j++) {
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c854:	8aa5      	l32i.n	a10, a10, 20
  90c856:	2bb205        	l32i	a11, a11, 20
  90c859:	299c30        	addi	a9, a9, 48
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
  90c85c:	288c30        	addi	a8, a8, 48
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
		for (j=0; j <= i-1; j++) {
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
  90c85f:	7abb05        	bgeu	a11, a10, 90c868 <rcSibUpdate_ht$constprop$6+0x378>
				    pRateTable->info[pRc->validRateIndex[j+1]].userRateKbps)
#endif
				{
					A_UINT8 tmp=0;
					tmp = pRc->validRateIndex[j];
					pRc->validRateIndex[j] = pRc->validRateIndex[j+1];
  90c862:	27940a        	s8i	a7, a9, 10
					pRc->validRateIndex[j+1] = tmp;
  90c865:	25840a        	s8i	a5, a8, 10
rcSortValidRates(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc)
{
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
		for (j=0; j <= i-1; j++) {
  90c868:	030347        	extui	a3, a3, 0, 8
  90c86b:	600001        	j	90c870 <rcSibUpdate_ht$constprop$6+0x380>
static void
rcSortValidRates(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc)
{
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
  90c86e:	c030      	movi.n	a3, 0
		for (j=0; j <= i-1; j++) {
  90c870:	7432c2        	blt	a3, a4, 90c836 <rcSibUpdate_ht$constprop$6+0x346>
static void
rcSortValidRates(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc)
{
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
  90c873:	b044      	addi.n	a4, a4, -1
  90c875:	040447        	extui	a4, a4, 0, 8
  90c878:	654ff2        	bnez	a4, 90c86e <rcSibUpdate_ht$constprop$6+0x37e>
  90c87b:	d10f      	retw.n
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
			    || !WLAN_RC_PHY_HT(phy) 
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
			    || ((pRateTable->info[j].dot11Rate == 15) && 
  90c87d:	7eb102        	beq	a11, a14, 90c883 <rcSibUpdate_ht$constprop$6+0x393>
  90c880:	63fec6        	j	90c74a <rcSibUpdate_ht$constprop$6+0x25a>
  90c883:	63febd        	j	90c744 <rcSibUpdate_ht$constprop$6+0x254>
	...

0090c888 <ath_rate_newassoc_11n>:
}

static void
ath_rate_newassoc_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, int isnew, 
		      unsigned int capflag, struct ieee80211_rate *rs)
{
  90c888:	6c1004        	entry	a1, 32
  90c88b:	da20      	mov.n	a10, a2
  90c88d:	db30      	mov.n	a11, a3
  90c88f:	dc50      	mov.n	a12, a5
  90c891:	dd60      	mov.n	a13, a6
	if (isnew) {
  90c893:	c949      	beqz.n	a4, 90c8b0 <ath_rate_newassoc_11n+0x28>
#ifdef MAGPIE_MERLIN
		struct atheros_node *oan = ATH_NODE_ATHEROS(an);
  90c895:	283282        	l32i	a8, a3, 0x208
		/* Only MERLIN can send STBC */
		oan->stbc = (capflag & ATH_RC_TX_STBC_FLAG) ? 1 : 0;
  90c898:	055e40        	extui	a14, a5, 5, 1
  90c89b:	2f8074        	l8ui	a15, a8, 116
  90c89e:	29fa9f        	movi	a9, -97
  90c8a1:	0bee11        	slli	a14, a14, 5
  90c8a4:	09f901        	and	a9, a15, a9
  90c8a7:	0e9902        	or	a9, a9, a14
  90c8aa:	298474        	s8i	a9, a8, 116
#endif
		rcSibUpdate_ht(sc, an, capflag, 0, rs);
  90c8ad:	5bff10        	call8	90c4f0 <rcSibUpdate_ht$constprop$6>
  90c8b0:	d10f      	retw.n
	...

0090c8b4 <rcRateFind_11n>:
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
  90c8b4:	6c100c        	entry	a1, 96
  90c8b7:	9217      	s32i.n	a2, a1, 28
	A_UINT8 i = 0; 
	A_UINT8 tryPerRate  = 0;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
  90c8b9:	222248        	l32i	a2, a2, 0x120
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c8bc:	8817      	l32i.n	a8, a1, 28
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
	A_UINT8 i = 0; 
	A_UINT8 tryPerRate  = 0;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
  90c8be:	9218      	s32i.n	a2, a1, 32
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c8c0:	8918      	l32i.n	a9, a1, 32
  90c8c2:	2282c2        	l32i	a2, a8, 0x308
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
  90c8c5:	971c      	s32i.n	a7, a1, 48
  90c8c7:	931a      	s32i.n	a3, a1, 40
	A_UINT8 i = 0; 
	A_UINT8 tryPerRate  = 0;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c8c9:	09220a        	addx4	a2, a2, a9
  90c8cc:	8221      	l32i.n	a2, a2, 4
	struct atheros_node *asn = ATH_NODE_ATHEROS(an);
  90c8ce:	881a      	l32i.n	a8, a1, 40
	A_UINT8 rix, nrix;
	A_UINT8 dot11Rate;
	WLAN_PHY phy;

	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0, 
  90c8d0:	891c      	l32i.n	a9, a1, 48
	A_INT8               index;
	TX_RATE_CTRL         *pRc = NULL;

	pRc = (TX_RATE_CTRL *)(pSib ? (pSib) : NULL);

	*isProbing = FALSE;
  90c8d2:	2d1219        	l32i	a13, a1, 100
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
  90c8d5:	9419      	s32i.n	a4, a1, 36
	A_INT8               index;
	TX_RATE_CTRL         *pRc = NULL;

	pRc = (TX_RATE_CTRL *)(pSib ? (pSib) : NULL);

	*isProbing = FALSE;
  90c8d7:	c040      	movi.n	a4, 0
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
	A_UINT8 i = 0; 
	A_UINT8 tryPerRate  = 0;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90c8d9:	9214      	s32i.n	a2, a1, 16
	struct atheros_node *asn = ATH_NODE_ATHEROS(an);
	A_UINT8 rix, nrix;
	A_UINT8 dot11Rate;
	WLAN_PHY phy;

	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0, 
  90c8db:	090940        	extui	a9, a9, 0, 1
{
	A_UINT8 i = 0; 
	A_UINT8 tryPerRate  = 0;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
	struct atheros_node *asn = ATH_NODE_ATHEROS(an);
  90c8de:	228282        	l32i	a2, a8, 0x208
	 *   0msec   <= dt <= 25msec:   don't derate
	 *   25msec  <= dt <= 185msec:  derate linearly from 0 to 10dB
	 *   185msec <= dt:             derate by 10dB
	 */

	nowMsec = A_MS_TICKGET();
  90c8e1:	da40      	mov.n	a10, a4
	A_INT8               index;
	TX_RATE_CTRL         *pRc = NULL;

	pRc = (TX_RATE_CTRL *)(pSib ? (pSib) : NULL);

	*isProbing = FALSE;
  90c8e3:	94d0      	s32i.n	a4, a13, 0
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
  90c8e5:	951b      	s32i.n	a5, a1, 44
  90c8e7:	961d      	s32i.n	a6, a1, 52
  90c8e9:	231218        	l32i	a3, a1, 96
	struct atheros_node *asn = ATH_NODE_ATHEROS(an);
	A_UINT8 rix, nrix;
	A_UINT8 dot11Rate;
	WLAN_PHY phy;

	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0, 
  90c8ec:	9916      	s32i.n	a9, a1, 24
	 *   0msec   <= dt <= 25msec:   don't derate
	 *   25msec  <= dt <= 185msec:  derate linearly from 0 to 10dB
	 *   185msec <= dt:             derate by 10dB
	 */

	nowMsec = A_MS_TICKGET();
  90c8ee:	5bec78        	call8	907ad0 <ath_hal_getuptime>
	 * Now look up the rate in the rssi table and return it.
	 * If no rates match then we return 0 (lowest rate)
	 */

	bestThruput = 0;
	maxIndex = pRc->maxValidRate-1;
  90c8f1:	2e2039        	l8ui	a14, a2, 57
  90c8f4:	b0ef      	addi.n	a15, a14, -1
  90c8f6:	0f0f47        	extui	a15, a15, 0, 8
	}

	return rix;
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
  90c8f9:	00f532        	sext	a5, a15, 7
    
	/*
	 * Try the higher rate first. It will reduce memory moving time
	 * if we have very good channel characteristics.
	 */
	for (index = maxIndex; index >= minIndex ; index--) {
  90c8fc:	d840      	mov.n	a8, a4

	bestThruput = 0;
	maxIndex = pRc->maxValidRate-1;

	minIndex = 0;
	bestRate = minIndex;
  90c8fe:	db40      	mov.n	a11, a4
	/*
	 * Now look up the rate in the rssi table and return it.
	 * If no rates match then we return 0 (lowest rate)
	 */

	bestThruput = 0;
  90c900:	dc40      	mov.n	a12, a4
	}

	return rix;
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
  90c902:	a525      	add.n	a5, a2, a5
		 * used to next lower rate, its PER would grow to
		 * 10-15 and we would be worse off then staying
		 * at the current rate.
		 */
		perThres = pRc->state[rate].per;
		if ( perThres < 12 ) {
  90c904:	c06b      	movi.n	a6, 11
			perThres = 12;
		}

		thisThruput = pRateTable->info[rate].userRateKbps * (100 - perThres);
  90c906:	270a64        	movi	a7, 100
  90c909:	60003e        	j	90c94b <rcRateFind_11n+0x97>
	}

	return rix;
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
  90c90c:	a854      	add.n	a4, a5, a8
	 * if we have very good channel characteristics.
	 */
	for (index = maxIndex; index >= minIndex ; index--) {
		A_UINT8 perThres;
    
		rate = pRc->validRateIndex[index];
  90c90e:	29403a        	l8ui	a9, a4, 58
		if (rate > pRc->rateMaxPhy) {
  90c911:	24206d        	l8ui	a4, a2, 109
  90c914:	794331        	bltu	a4, a9, 90c949 <rcRateFind_11n+0x95>
		}

		/* if the best throughput is already larger than the userRateKbps..
		 * then we could skip of rest of calculation.. 
		 */
		if( bestThruput >= pRateTable->info[rate].userRateKbps)
  90c917:	09940a        	addx4	a4, a9, a9
  90c91a:	8d14      	l32i.n	a13, a1, 16
  90c91c:	094409        	addx2	a4, a4, a9
  90c91f:	0d440a        	addx4	a4, a4, a13
  90c922:	8446      	l32i.n	a4, a4, 24
  90c924:	74c30a        	bltu	a12, a4, 90c932 <rcRateFind_11n+0x7e>
	/*
	 * Must check the actual rate (rateKbps) to account for non-monoticity of
	 * 11g's rate table
	 */

	if (rate >= pRc->rateMaxPhy && probeAllowed) {
  90c927:	24206d        	l8ui	a4, a2, 109
  90c92a:	74bb26        	bgeu	a11, a4, 90c954 <rcRateFind_11n+0xa0>
  90c92d:	600027        	j	90c958 <rcRateFind_11n+0xa4>
  90c930:	0000a9        	excw
		 * rate whose PER has decayed close to 0.  If we
		 * used to next lower rate, its PER would grow to
		 * 10-15 and we would be worse off then staying
		 * at the current rate.
		 */
		perThres = pRc->state[rate].per;
  90c933:	2d2dd0        	addmi	a13, a2, 0xffffd000
  90c936:	007d63        	excw
		if ( perThres < 12 ) {
  90c939:	01c0dc        	excw
			perThres = 12;
		}

		thisThruput = pRateTable->info[rate].userRateKbps * (100 - perThres);
  90c93c:	0d7d0c        	sub	a13, a7, a13
  90c93f:	04dd28        	mull	a13, a13, a4
		if (bestThruput <= thisThruput) {
  90c942:	7cd303        	bltu	a13, a12, 90c949 <rcRateFind_11n+0x95>
  90c945:	db90      	mov.n	a11, a9
  90c947:	dcd0      	mov.n	a12, a13
  90c949:	b088      	addi.n	a8, a8, -1
	}

	return rix;
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
  90c94b:	a8f4      	add.n	a4, a15, a8
    
	/*
	 * Try the higher rate first. It will reduce memory moving time
	 * if we have very good channel characteristics.
	 */
	for (index = maxIndex; index >= minIndex ; index--) {
  90c94d:	7847bb        	bbci	a4, 24, 90c90c <rcRateFind_11n+0x58>
  90c950:	63ffd3        	j	90c927 <rcRateFind_11n+0x73>
  90c953:	008516        	excw
	/*
	 * Must check the actual rate (rateKbps) to account for non-monoticity of
	 * 11g's rate table
	 */

	if (rate >= pRc->rateMaxPhy && probeAllowed) {
  90c956:	ce56      	bnez.n	a5, 90c980 <rcRateFind_11n+0xcc>
  90c958:	d4b0      	mov.n	a4, a11
  90c95a:	600047        	j	90c9a5 <rcRateFind_11n+0xf1>
                     A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_UINT8 i;

	for (i = 0; i < pRc->maxValidRate-1; i++) {
		if (pRc->validRateIndex[i] == curValidTxRate) {
  90c95d:	a526      	add.n	a6, a2, a5
  90c95f:	27603a        	l8ui	a7, a6, 58
  90c962:	747912        	bne	a7, a4, 90c978 <rcRateFind_11n+0xc4>
		rate = pRc->rateMaxPhy;

		/* Probe the next allowed phy state */
		/* FIXME: Check to make sure ratMax is checked properly */
		if (rcGetNextValidTxRate( pRateTable, pRc, rate, &nextRate) && 
		    (nowMsec - pRc->probeTime > pRateTable->probeInterval) &&
  90c965:	8814      	l32i.n	a8, a1, 16
{
	A_UINT8 i;

	for (i = 0; i < pRc->maxValidRate-1; i++) {
		if (pRc->validRateIndex[i] == curValidTxRate) {
			*pNextIndex = pRc->validRateIndex[i+1];
  90c967:	25603b        	l8ui	a5, a6, 59
		rate = pRc->rateMaxPhy;

		/* Probe the next allowed phy state */
		/* FIXME: Check to make sure ratMax is checked properly */
		if (rcGetNextValidTxRate( pRateTable, pRc, rate, &nextRate) && 
		    (nowMsec - pRc->probeTime > pRateTable->probeInterval) &&
  90c96a:	862d      	l32i.n	a6, a2, 52
  90c96c:	278001        	l8ui	a7, a8, 1
  90c96f:	06a60c        	sub	a6, a10, a6
	if (rate >= pRc->rateMaxPhy && probeAllowed) {
		rate = pRc->rateMaxPhy;

		/* Probe the next allowed phy state */
		/* FIXME: Check to make sure ratMax is checked properly */
		if (rcGetNextValidTxRate( pRateTable, pRc, rate, &nextRate) && 
  90c972:	767316        	bltu	a7, a6, 90c98c <rcRateFind_11n+0xd8>
  90c975:	60002c        	j	90c9a5 <rcRateFind_11n+0xf1>
rcGetNextValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc, 
                     A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_UINT8 i;

	for (i = 0; i < pRc->maxValidRate-1; i++) {
  90c978:	b155      	addi.n	a5, a5, 1
  90c97a:	050547        	extui	a5, a5, 0, 8
  90c97d:	600003        	j	90c984 <rcRateFind_11n+0xd0>
	/*
	 * Must check the actual rate (rateKbps) to account for non-monoticity of
	 * 11g's rate table
	 */

	if (rate >= pRc->rateMaxPhy && probeAllowed) {
  90c980:	c050      	movi.n	a5, 0
rcGetNextValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc, 
                     A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_UINT8 i;

	for (i = 0; i < pRc->maxValidRate-1; i++) {
  90c982:	b0ee      	addi.n	a14, a14, -1
  90c984:	7e52d5        	blt	a5, a14, 90c95d <rcRateFind_11n+0xa9>
  90c987:	60001a        	j	90c9a5 <rcRateFind_11n+0xf1>
  90c98a:	000026        	excw
		rate = pRc->rateMaxPhy;

		/* Probe the next allowed phy state */
		/* FIXME: Check to make sure ratMax is checked properly */
		if (rcGetNextValidTxRate( pRateTable, pRc, rate, &nextRate) && 
		    (nowMsec - pRc->probeTime > pRateTable->probeInterval) &&
  90c98d:	2038c9        	excw
  90c990:	62c040        	j	8f89d4 <memset+0x11b8c>
		{
			rate                  = nextRate;
			pRc->probeRate        = rate;
			pRc->probeTime        = nowMsec;
			pRc->hwMaxRetryPktCnt = 0;
			*isProbing            = TRUE;
  90c993:	291219        	l32i	a9, a1, 100
		    (pRc->hwMaxRetryPktCnt >= 1))
		{
			rate                  = nextRate;
			pRc->probeRate        = rate;
			pRc->probeTime        = nowMsec;
			pRc->hwMaxRetryPktCnt = 0;
  90c996:	242438        	s8i	a4, a2, 56
		if (rcGetNextValidTxRate( pRateTable, pRc, rate, &nextRate) && 
		    (nowMsec - pRc->probeTime > pRateTable->probeInterval) &&
		    (pRc->hwMaxRetryPktCnt >= 1))
		{
			rate                  = nextRate;
			pRc->probeRate        = rate;
  90c999:	25242f        	s8i	a5, a2, 47
			pRc->probeTime        = nowMsec;
			pRc->hwMaxRetryPktCnt = 0;
			*isProbing            = TRUE;
  90c99c:	c041      	movi.n	a4, 1
		    (nowMsec - pRc->probeTime > pRateTable->probeInterval) &&
		    (pRc->hwMaxRetryPktCnt >= 1))
		{
			rate                  = nextRate;
			pRc->probeRate        = rate;
			pRc->probeTime        = nowMsec;
  90c99e:	9a2d      	s32i.n	a10, a2, 52
			pRc->hwMaxRetryPktCnt = 0;
			*isProbing            = TRUE;
  90c9a0:	9490      	s32i.n	a4, a9, 0
{
	A_UINT8 i;

	for (i = 0; i < pRc->maxValidRate-1; i++) {
		if (pRc->validRateIndex[i] == curValidTxRate) {
			*pNextIndex = pRc->validRateIndex[i+1];
  90c9a2:	055402        	or	a4, a5, a5
	 * Make sure rate is not higher than the allowed maximum.
	 * We should also enforce the min, but I suspect the min is
	 * normally 1 rather than 0 because of the rate 9 vs 6 issue
	 * in the old code.
	 */
	if (rate > (pRc->rateTableSize - 1)) {
  90c9a5:	25202e        	l8ui	a5, a2, 46
  90c9a8:	754204        	blt	a4, a5, 90c9b0 <rcRateFind_11n+0xfc>
		rate = pRc->rateTableSize - 1;
  90c9ab:	b054      	addi.n	a4, a5, -1
  90c9ad:	040447        	extui	a4, a4, 0, 8
	}

	/* record selected rate, which is used to decide if we want to do fast frame */
	if (!(*isProbing) && pSib) {
  90c9b0:	2d1219        	l32i	a13, a1, 100
  90c9b3:	85d0      	l32i.n	a5, a13, 0
  90c9b5:	cd57      	bnez.n	a5, 90c9d0 <rcRateFind_11n+0x11c>
		pSib->lastRateKbps = pRateTable->info[rate].rateKbps;
  90c9b7:	8614      	l32i.n	a6, a1, 16
  90c9b9:	04450a        	addx4	a5, a4, a4
  90c9bc:	045509        	addx2	a5, a5, a4
  90c9bf:	06550a        	addx4	a5, a5, a6
		((struct atheros_softc*)sc->sc_rc)->currentTxRateKbps = pSib->lastRateKbps;
  90c9c2:	8817      	l32i.n	a8, a1, 28
		rate = pRc->rateTableSize - 1;
	}

	/* record selected rate, which is used to decide if we want to do fast frame */
	if (!(*isProbing) && pSib) {
		pSib->lastRateKbps = pRateTable->info[rate].rateKbps;
  90c9c4:	8655      	l32i.n	a6, a5, 20
		((struct atheros_softc*)sc->sc_rc)->currentTxRateKbps = pSib->lastRateKbps;
  90c9c6:	258248        	l32i	a5, a8, 0x120
		rate = pRc->rateTableSize - 1;
	}

	/* record selected rate, which is used to decide if we want to do fast frame */
	if (!(*isProbing) && pSib) {
		pSib->lastRateKbps = pRateTable->info[rate].rateKbps;
  90c9c9:	26261c        	s32i	a6, a2, 112
		((struct atheros_softc*)sc->sc_rc)->currentTxRateKbps = pSib->lastRateKbps;
  90c9cc:	9654      	s32i.n	a6, a5, 16
		((struct atheros_softc*)sc->sc_rc)->currentTxRateIndex = rate;
  90c9ce:	9455      	s32i.n	a4, a5, 20

	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0, 
			    isProbe);
	nrix = rix;

	if ((rcflag & ATH_RC_PROBE_ALLOWED) && (*isProbe)) {
  90c9d0:	8916      	l32i.n	a9, a1, 24
  90c9d2:	649050        	beqz	a9, 90ca26 <rcRateFind_11n+0x172>
  90c9d5:	2d1219        	l32i	a13, a1, 100

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
	A_UINT8 i = 0; 
  90c9d8:	c0e0      	movi.n	a14, 0

	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0, 
			    isProbe);
	nrix = rix;

	if ((rcflag & ATH_RC_PROBE_ALLOWED) && (*isProbe)) {
  90c9da:	85d0      	l32i.n	a5, a13, 0
  90c9dc:	d640      	mov.n	a6, a4
  90c9de:	7e5148        	beq	a5, a14, 90ca2a <rcRateFind_11n+0x176>
		/* set one try for probe rates. For the probes don't enable rts */
		rcRateSetseries(pRateTable, &series[i++], 1, nrix,
				FALSE, asc->tx_chainmask, asn->stbc);
  90c9e1:	25221d        	l32i	a5, a2, 116
			    isProbe);
	nrix = rix;

	if ((rcflag & ATH_RC_PROBE_ALLOWED) && (*isProbe)) {
		/* set one try for probe rates. For the probes don't enable rts */
		rcRateSetseries(pRateTable, &series[i++], 1, nrix,
  90c9e4:	8a14      	l32i.n	a10, a1, 16
  90c9e6:	05d551        	extui	a5, a5, 29, 2
  90c9e9:	9510      	s32i.n	a5, a1, 0
  90c9eb:	8518      	l32i.n	a5, a1, 32
  90c9ed:	db30      	mov.n	a11, a3
  90c9ef:	8f53      	l32i.n	a15, a5, 12
  90c9f1:	c0c1      	movi.n	a12, 1
  90c9f3:	dd40      	mov.n	a13, a4
  90c9f5:	5bfdf1        	call8	90c1bc <rcRateSetseries>
               const RATE_TABLE_11N *pRateTable , 
               A_UINT8 rix, A_UINT16 stepDown, A_UINT16 minRate)
{
	A_UINT32                j;
	A_UINT8                 nextIndex;
	struct atheros_node     *pSib = ATH_NODE_ATHEROS(an);
  90c9f8:	881a      	l32i.n	a8, a1, 40
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  90c9fa:	c051      	movi.n	a5, 1
               const RATE_TABLE_11N *pRateTable , 
               A_UINT8 rix, A_UINT16 stepDown, A_UINT16 minRate)
{
	A_UINT32                j;
	A_UINT8                 nextIndex;
	struct atheros_node     *pSib = ATH_NODE_ATHEROS(an);
  90c9fc:	268282        	l32i	a6, a8, 0x208
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  90c9ff:	286039        	l8ui	a8, a6, 57
  90ca02:	d760      	mov.n	a7, a6
  90ca04:	600012        	j	90ca1a <rcRateFind_11n+0x166>
  90ca07:	002a70        	excw
		if (pRc->validRateIndex[i] == curValidTxRate) {
  90ca0a:	3bb155        	excw
  90ca0d:	b177      	addi.n	a7, a7, 1
  90ca0f:	74a907        	bne	a10, a4, 90ca1a <rcRateFind_11n+0x166>
			*pNextIndex = pRc->validRateIndex[i-1];
  90ca12:	a966      	add.n	a6, a6, a9
  90ca14:	266039        	l8ui	a6, a6, 57
  90ca17:	600006        	j	90ca21 <rcRateFind_11n+0x16d>
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  90ca1a:	d950      	mov.n	a9, a5
  90ca1c:	7852e8        	blt	a5, a8, 90ca08 <rcRateFind_11n+0x154>
  90ca1f:	d640      	mov.n	a6, a4
			    isProbe);
	nrix = rix;

	if ((rcflag & ATH_RC_PROBE_ALLOWED) && (*isProbe)) {
		/* set one try for probe rates. For the probes don't enable rts */
		rcRateSetseries(pRateTable, &series[i++], 1, nrix,
  90ca21:	c0e1      	movi.n	a14, 1
  90ca23:	600003        	j	90ca2a <rcRateFind_11n+0x176>

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
	A_UINT8 i = 0; 
  90ca26:	8e16      	l32i.n	a14, a1, 24

	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0, 
			    isProbe);
	nrix = rix;

	if ((rcflag & ATH_RC_PROBE_ALLOWED) && (*isProbe)) {
  90ca28:	d640      	mov.n	a6, a4
		 * after the probe rate
		 */
		nrix = rcRateGetIndex( sc, an, pRateTable, nrix, 1, FALSE);
	}

	tryPerRate = (numTries/numRates);
  90ca2a:	8b1b      	l32i.n	a11, a1, 44
  90ca2c:	2a1209        	l32i	a10, a1, 36
  90ca2f:	9e1e      	s32i.n	a14, a1, 56
  90ca31:	5b67d9        	call8	8e6998 <__divsi3>

	/* Set the choosen rate. No RTS for first series entry. */
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
  90ca34:	8e1e      	l32i.n	a14, a1, 56
		 * after the probe rate
		 */
		nrix = rcRateGetIndex( sc, an, pRateTable, nrix, 1, FALSE);
	}

	tryPerRate = (numTries/numRates);
  90ca36:	0a0947        	extui	a9, a10, 0, 8
  90ca39:	9916      	s32i.n	a9, a1, 24

	/* Set the choosen rate. No RTS for first series entry. */
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
  90ca3b:	0fe811        	slli	a8, a14, 1
  90ca3e:	ae8b      	add.n	a11, a8, a14
			nrix, FALSE, asc->tx_chainmask, asn->stbc);
  90ca40:	28221d        	l32i	a8, a2, 116
		 * after the probe rate
		 */
		nrix = rcRateGetIndex( sc, an, pRateTable, nrix, 1, FALSE);
	}

	tryPerRate = (numTries/numRates);
  90ca43:	d7a0      	mov.n	a7, a10

	/* Set the choosen rate. No RTS for first series entry. */
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
  90ca45:	08d851        	extui	a8, a8, 29, 2
  90ca48:	9810      	s32i.n	a8, a1, 0
  90ca4a:	8818      	l32i.n	a8, a1, 32
  90ca4c:	8a14      	l32i.n	a10, a1, 16
  90ca4e:	8f83      	l32i.n	a15, a8, 12
  90ca50:	b1e5      	addi.n	a5, a14, 1
  90ca52:	dc90      	mov.n	a12, a9
  90ca54:	03bb0a        	addx4	a11, a11, a3
  90ca57:	066d02        	or	a13, a6, a6
  90ca5a:	2e0a00        	movi	a14, 0
  90ca5d:	5bfdd7        	call8	90c1bc <rcRateSetseries>
  90ca60:	050547        	extui	a5, a5, 0, 8
  90ca63:	8919      	l32i.n	a9, a1, 36
	}

	return rix;
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
  90ca65:	07571c        	mul16u	a7, a5, a7
  90ca68:	07970c        	sub	a7, a9, a7
	for (; i < numRates; i++) {
		A_UINT8 tryNum;
		A_UINT8 minRate;

		tryNum  = ((i + 1) == numRates) ? numTries - (tryPerRate * i) : tryPerRate ;
		minRate = (((i + 1) == numRates) && (rcflag & ATH_RC_MINRATE_LASTRATE)) ? 1 : 0;
  90ca6b:	891c      	l32i.n	a9, a1, 48
  90ca6d:	070847        	extui	a8, a7, 0, 8
  90ca70:	c072      	movi.n	a7, 2
  90ca72:	079901        	and	a9, a9, a7
  90ca75:	9815      	s32i.n	a8, a1, 20
  90ca77:	9919      	s32i.n	a9, a1, 36
	/* Set the choosen rate. No RTS for first series entry. */
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
			nrix, FALSE, asc->tx_chainmask, asn->stbc);

	/* Fill in the other rates for multirate retry */
	for (; i < numRates; i++) {
  90ca79:	6000a4        	j	90cb21 <rcRateFind_11n+0x26d>
		A_UINT8 tryNum;
		A_UINT8 minRate;

		tryNum  = ((i + 1) == numRates) ? numTries - (tryPerRate * i) : tryPerRate ;
  90ca7c:	891b      	l32i.n	a9, a1, 44
  90ca7e:	b157      	addi.n	a7, a5, 1
  90ca80:	8c16      	l32i.n	a12, a1, 24
		minRate = (((i + 1) == numRates) && (rcflag & ATH_RC_MINRATE_LASTRATE)) ? 1 : 0;
  90ca82:	c080      	movi.n	a8, 0
	/* Fill in the other rates for multirate retry */
	for (; i < numRates; i++) {
		A_UINT8 tryNum;
		A_UINT8 minRate;

		tryNum  = ((i + 1) == numRates) ? numTries - (tryPerRate * i) : tryPerRate ;
  90ca84:	79790a        	bne	a7, a9, 90ca92 <rcRateFind_11n+0x1de>
		minRate = (((i + 1) == numRates) && (rcflag & ATH_RC_MINRATE_LASTRATE)) ? 1 : 0;
  90ca87:	8919      	l32i.n	a9, a1, 36
  90ca89:	c081      	movi.n	a8, 1
  90ca8b:	c0a0      	movi.n	a10, 0
  90ca8d:	8c15      	l32i.n	a12, a1, 20
  90ca8f:	09a838        	moveqz	a8, a10, a9
               const RATE_TABLE_11N *pRateTable , 
               A_UINT8 rix, A_UINT16 stepDown, A_UINT16 minRate)
{
	A_UINT32                j;
	A_UINT8                 nextIndex;
	struct atheros_node     *pSib = ATH_NODE_ATHEROS(an);
  90ca92:	891a      	l32i.n	a9, a1, 40
  90ca94:	279282        	l32i	a7, a9, 0x208
	TX_RATE_CTRL            *pRc = (TX_RATE_CTRL *)(pSib);
    
	if (minRate) {
  90ca97:	ca89      	beqz.n	a8, 90cac4 <rcRateFind_11n+0x210>
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  90ca99:	2b7039        	l8ui	a11, a7, 57
  90ca9c:	c490      	movi.n	a9, 64
  90ca9e:	da70      	mov.n	a10, a7
  90caa0:	c081      	movi.n	a8, 1
  90caa2:	600016        	j	90cabc <rcRateFind_11n+0x208>
		if (pRc->validRateIndex[i] == curValidTxRate) {
  90caa5:	2ea03b        	l8ui	a14, a10, 59
  90caa8:	b188      	addi.n	a8, a8, 1
  90caaa:	b1aa      	addi.n	a10, a10, 1
  90caac:	76e90c        	bne	a14, a6, 90cabc <rcRateFind_11n+0x208>
			*pNextIndex = pRc->validRateIndex[i-1];
  90caaf:	ad7d      	add.n	a13, a7, a13
  90cab1:	b099      	addi.n	a9, a9, -1
  90cab3:	26d039        	l8ui	a6, a13, 57
	A_UINT8                 nextIndex;
	struct atheros_node     *pSib = ATH_NODE_ATHEROS(an);
	TX_RATE_CTRL            *pRc = (TX_RATE_CTRL *)(pSib);
    
	if (minRate) {
		for (j = RATE_TABLE_11N_SIZE; j > 0; j-- ) {
  90cab6:	659fe4        	bnez	a9, 90ca9e <rcRateFind_11n+0x1ea>
  90cab9:	600038        	j	90caf5 <rcRateFind_11n+0x241>
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  90cabc:	dd80      	mov.n	a13, a8
  90cabe:	7b82e3        	blt	a8, a11, 90caa5 <rcRateFind_11n+0x1f1>
  90cac1:	600030        	j	90caf5 <rcRateFind_11n+0x241>
		A_UINT8 minRate;

		tryNum  = ((i + 1) == numRates) ? numTries - (tryPerRate * i) : tryPerRate ;
		minRate = (((i + 1) == numRates) && (rcflag & ATH_RC_MINRATE_LASTRATE)) ? 1 : 0;

		nrix = rcRateGetIndex(sc, an, pRateTable, nrix, stepDnInc, minRate);
  90cac4:	881d      	l32i.n	a8, a1, 52
  90cac6:	080a4f        	extui	a10, a8, 0, 16
  90cac9:	60001c        	j	90cae9 <rcRateFind_11n+0x235>
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
		if (pRc->validRateIndex[i] == curValidTxRate) {
  90cacc:	2e903b        	l8ui	a14, a9, 59
  90cacf:	b188      	addi.n	a8, a8, 1
  90cad1:	b199      	addi.n	a9, a9, 1
  90cad3:	76e909        	bne	a14, a6, 90cae0 <rcRateFind_11n+0x22c>
			*pNextIndex = pRc->validRateIndex[i-1];
  90cad6:	ad7d      	add.n	a13, a7, a13
  90cad8:	26d039        	l8ui	a6, a13, 57
			} else {
				break;
			}
		}
	} else {
		for (j = stepDown; j > 0; j-- ) {
  90cadb:	b0aa      	addi.n	a10, a10, -1
  90cadd:	600008        	j	90cae9 <rcRateFind_11n+0x235>
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  90cae0:	dd80      	mov.n	a13, a8
  90cae2:	7b82e6        	blt	a8, a11, 90cacc <rcRateFind_11n+0x218>
  90cae5:	60000c        	j	90caf5 <rcRateFind_11n+0x241>
  90cae8:	00c8a8        	excw
  90caeb:	2b7039        	l8ui	a11, a7, 57
  90caee:	d970      	mov.n	a9, a7
  90caf0:	c081      	movi.n	a8, 1
  90caf2:	63ffea        	j	90cae0 <rcRateFind_11n+0x22c>

		nrix = rcRateGetIndex(sc, an, pRateTable, nrix, stepDnInc, minRate);

		/* All other rates in the series have RTS enabled */
		rcRateSetseries(pRateTable, &series[i], tryNum,
				nrix, TRUE, asc->tx_chainmask, asn->stbc);
  90caf5:	27221d        	l32i	a7, a2, 116
		minRate = (((i + 1) == numRates) && (rcflag & ATH_RC_MINRATE_LASTRATE)) ? 1 : 0;

		nrix = rcRateGetIndex(sc, an, pRateTable, nrix, stepDnInc, minRate);

		/* All other rates in the series have RTS enabled */
		rcRateSetseries(pRateTable, &series[i], tryNum,
  90caf8:	8918      	l32i.n	a9, a1, 32
  90cafa:	07d751        	extui	a7, a7, 29, 2
  90cafd:	9710      	s32i.n	a7, a1, 0
  90caff:	055b09        	addx2	a11, a5, a5
  90cb02:	8f93      	l32i.n	a15, a9, 12
  90cb04:	8a14      	l32i.n	a10, a1, 16
  90cb06:	03bb0a        	addx4	a11, a11, a3
  90cb09:	dd60      	mov.n	a13, a6
  90cb0b:	c0e1      	movi.n	a14, 1
  90cb0d:	5bfdab        	call8	90c1bc <rcRateSetseries>
  90cb10:	8815      	l32i.n	a8, a1, 20
  90cb12:	8916      	l32i.n	a9, a1, 24
	/* Set the choosen rate. No RTS for first series entry. */
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
			nrix, FALSE, asc->tx_chainmask, asn->stbc);

	/* Fill in the other rates for multirate retry */
	for (; i < numRates; i++) {
  90cb14:	b155      	addi.n	a5, a5, 1
  90cb16:	09870c        	sub	a7, a8, a9
  90cb19:	070847        	extui	a8, a7, 0, 8
  90cb1c:	050547        	extui	a5, a5, 0, 8
  90cb1f:	9815      	s32i.n	a8, a1, 20
  90cb21:	891b      	l32i.n	a9, a1, 44
  90cb23:	795a02        	bge	a5, a9, 90cb29 <rcRateFind_11n+0x275>
  90cb26:	63ff52        	j	90ca7c <rcRateFind_11n+0x1c8>
	 *    {MCS2, MCS1, MCS0, MCS0}.
	 * When first rate in series is MCS3 in HT20 @ 2.4GHz, series should look like:
	 *    {MCS3, MCS2, MCS1, MCS1}
	 * So, set fourth rate in series to be same as third one for above conditions.
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
  90cb29:	8817      	l32i.n	a8, a1, 28
  90cb2b:	2282c2        	l32i	a2, a8, 0x308
  90cb2e:	69215a        	bnei	a2, 1, 90cb8c <rcRateFind_11n+0x2d8>
		dot11Rate = pRateTable->info[rix].dot11Rate;
  90cb31:	04470a        	addx4	a7, a4, a4
  90cb34:	8914      	l32i.n	a9, a1, 16
  90cb36:	047709        	addx2	a7, a7, a4
  90cb39:	09770a        	addx4	a7, a7, a9
  90cb3c:	26701e        	l8ui	a6, a7, 30
		phy = pRateTable->info[rix].phy;
  90cb3f:	277010        	l8ui	a7, a7, 16
		if (i == 4 &&
  90cb42:	695446        	bnei	a5, 4, 90cb8c <rcRateFind_11n+0x2d8>
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) || 
  90cb45:	c050      	movi.n	a5, 0
  90cb47:	287cfa        	addi	a8, a7, -6
  90cb4a:	da50      	mov.n	a10, a5
  90cb4c:	082a38        	moveqz	a10, a2, a8
	 * So, set fourth rate in series to be same as third one for above conditions.
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
		dot11Rate = pRateTable->info[rix].dot11Rate;
		phy = pRateTable->info[rix].phy;
		if (i == 4 &&
  90cb4f:	0a0847        	extui	a8, a10, 0, 8
  90cb52:	75810b        	beq	a8, a5, 90cb61 <rcRateFind_11n+0x2ad>
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) || 
  90cb55:	286cfe        	addi	a8, a6, -2
  90cb58:	085239        	movnez	a2, a5, a8
	 * So, set fourth rate in series to be same as third one for above conditions.
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
		dot11Rate = pRateTable->info[rix].dot11Rate;
		phy = pRateTable->info[rix].phy;
		if (i == 4 &&
  90cb5b:	020247        	extui	a2, a2, 0, 8
  90cb5e:	75291a        	bne	a2, a5, 90cb7c <rcRateFind_11n+0x2c8>
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) || 
		     (dot11Rate == 3 && phy == WLAN_RC_PHY_HT_20_SS))) 
  90cb61:	c020      	movi.n	a2, 0
  90cb63:	277cfc        	addi	a7, a7, -4
  90cb66:	c051      	movi.n	a5, 1
  90cb68:	dd20      	mov.n	a13, a2
  90cb6a:	075d38        	moveqz	a13, a5, a7
  90cb6d:	0dd702        	or	a7, a13, a13
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
		dot11Rate = pRateTable->info[rix].dot11Rate;
		phy = pRateTable->info[rix].phy;
		if (i == 4 &&
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) || 
  90cb70:	72d118        	beq	a13, a2, 90cb8c <rcRateFind_11n+0x2d8>
		     (dot11Rate == 3 && phy == WLAN_RC_PHY_HT_20_SS))) 
  90cb73:	266cfd        	addi	a6, a6, -3
  90cb76:	065238        	moveqz	a2, a5, a6
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
		dot11Rate = pRateTable->info[rix].dot11Rate;
		phy = pRateTable->info[rix].phy;
		if (i == 4 &&
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) || 
  90cb79:	64200f        	beqz	a2, 90cb8c <rcRateFind_11n+0x2d8>
		     (dot11Rate == 3 && phy == WLAN_RC_PHY_HT_20_SS))) 
		{
			series[3].rix = series[2].rix;
  90cb7c:	223018        	l8ui	a2, a3, 24
  90cb7f:	223424        	s8i	a2, a3, 36
			series[3].flags = series[2].flags;
  90cb82:	22301b        	l8ui	a2, a3, 27
  90cb85:	223427        	s8i	a2, a3, 39
			series[3].max4msframelen = series[2].max4msframelen;
  90cb88:	8237      	l32i.n	a2, a3, 28
  90cb8a:	923a      	s32i.n	a2, a3, 40
	/*
	 * 2009/02/06
	 * AP91 Kite: NetGear OTA location-4 downlink.
	 *            Enable RTS/CTS at MCS 3-0 for downlink throughput.
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
  90cb8c:	8817      	l32i.n	a8, a1, 28
  90cb8e:	2282c2        	l32i	a2, a8, 0x308
  90cb91:	69211b        	bnei	a2, 1, 90cbb0 <rcRateFind_11n+0x2fc>
		dot11Rate = pRateTable->info[rix].dot11Rate;
  90cb94:	04420a        	addx4	a2, a4, a4
  90cb97:	8914      	l32i.n	a9, a1, 16
  90cb99:	042409        	addx2	a4, a2, a4
  90cb9c:	09440a        	addx4	a4, a4, a9
		if (dot11Rate <= 3 ) {
  90cb9f:	22401e        	l8ui	a2, a4, 30
  90cba2:	6f240a        	bgeui	a2, 4, 90cbb0 <rcRateFind_11n+0x2fc>
			series[0].flags |= ATH_RC_RTSCTS_FLAG;         
  90cba5:	243003        	l8ui	a4, a3, 3
  90cba8:	c120      	movi.n	a2, 16
  90cbaa:	024202        	or	a2, a4, a2
  90cbad:	223403        	s8i	a2, a3, 3
  90cbb0:	d10f      	retw.n
	...

0090cbb4 <rcUpdate_11n>:
void rcUpdate_11n(struct ath_softc_tgt *sc, struct ath_node_target *an,
		  A_UINT8 curTxAnt, 
		  int finalTSIdx, int Xretries,
		  struct ath_rc_series rcs[], int nFrames, 
		  int nBad, int long_retry)
{
  90cbb4:	6c1008        	entry	a1, 64
  90cbb7:	d920      	mov.n	a9, a2
	A_UINT32 series = 0;
	A_UINT32 rix;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90cbb9:	2492c2        	l32i	a4, a9, 0x308
  90cbbc:	222248        	l32i	a2, a2, 0x120
void rcUpdate_11n(struct ath_softc_tgt *sc, struct ath_node_target *an,
		  A_UINT8 curTxAnt, 
		  int finalTSIdx, int Xretries,
		  struct ath_rc_series rcs[], int nFrames, 
		  int nBad, int long_retry)
{
  90cbbf:	d870      	mov.n	a8, a7
	A_UINT32 series = 0;
	A_UINT32 rix;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90cbc1:	02420a        	addx4	a2, a4, a2
  90cbc4:	8421      	l32i.n	a4, a2, 4
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
  90cbc6:	223282        	l32i	a2, a3, 0x208
  90cbc9:	9215      	s32i.n	a2, a1, 20

	/*
	 * If the first rate is not the final index, there are intermediate rate failures
	 * to be processed.
	 */
	if (finalTSIdx != 0) {
  90cbcb:	6450aa        	beqz	a5, 90cc79 <rcUpdate_11n+0xc5>
				} else {
					rix = pRateTable->info[rcs[series].rix].baseIndex;
				}

				/* FIXME:XXXX, too many args! */
				rcUpdate_ht(sc, an, rix, Xretries? 1 : 2, rcs[series].tries, 
  90cbce:	c0a1      	movi.n	a10, 1
  90cbd0:	9a14      	s32i.n	a10, a1, 16
  90cbd2:	8b14      	l32i.n	a11, a1, 16
  90cbd4:	c0a2      	movi.n	a10, 2
  90cbd6:	06ab38        	moveqz	a11, a10, a6

	/*
	 * If the first rate is not the final index, there are intermediate rate failures
	 * to be processed.
	 */
	if (finalTSIdx != 0) {
  90cbd9:	c020      	movi.n	a2, 0
				} else {
					rix = pRateTable->info[rcs[series].rix].baseIndex;
				}

				/* FIXME:XXXX, too many args! */
				rcUpdate_ht(sc, an, rix, Xretries? 1 : 2, rcs[series].tries, 
  90cbdb:	9b14      	s32i.n	a11, a1, 16
  90cbdd:	60008c        	j	90cc6d <rcUpdate_11n+0xb9>
  90cbe0:	002e70        	excw
	 */
	if (finalTSIdx != 0) {

		/* Process intermediate rates that failed.*/
		for (series = 0; series < finalTSIdx ; series++) {
			if (rcs[series].tries != 0) {
  90cbe3:	0164e0        	excw
  90cbe6:	812b      	l32i.n	a1, a2, 44
				flags = rcs[series].flags;
  90cbe8:	7003c0        	bltu	a0, a0, 90cbac <rcRateFind_11n+0x2f8>
				/* If HT40 and we have switched mode from 40 to 20 => don't update */
				if ((flags & ATH_RC_CW40_FLAG) && 
  90cbeb:	c20c      	movi.n	a0, 44
  90cbed:	ba01      	addi.n	a1, a0, 10
  90cbef:	c8a9      	beqz.n	a10, 90cbfc <rcUpdate_11n+0x48>
				    (pRc->rcPhyMode != (flags & ATH_RC_CW40_FLAG))) {
  90cbf1:	8d15      	l32i.n	a13, a1, 20
  90cbf3:	2cd06c        	l8ui	a12, a13, 108
		/* Process intermediate rates that failed.*/
		for (series = 0; series < finalTSIdx ; series++) {
			if (rcs[series].tries != 0) {
				flags = rcs[series].flags;
				/* If HT40 and we have switched mode from 40 to 20 => don't update */
				if ((flags & ATH_RC_CW40_FLAG) && 
  90cbf6:	7ac102        	beq	a12, a10, 90cbfc <rcUpdate_11n+0x48>
  90cbf9:	60010d        	j	90cd0a <rcUpdate_11n+0x156>
				    (pRc->rcPhyMode != (flags & ATH_RC_CW40_FLAG))) {
					return;
				}
				if ((flags & ATH_RC_CW40_FLAG) && (flags & ATH_RC_HT40_SGI_FLAG)) {
  90cbfc:	c0c6      	movi.n	a12, 6
  90cbfe:	0cbc01        	and	a12, a11, a12
  90cc01:	69c613        	bnei	a12, 6, 90cc18 <rcUpdate_11n+0x64>
					rix = pRateTable->info[rcs[series].rix].htIndex;
  90cc04:	2a7000        	l8ui	a10, a7, 0
  90cc07:	0aab0a        	addx4	a11, a10, a10
  90cc0a:	0aba09        	addx2	a10, a11, a10
  90cc0d:	04aa0a        	addx4	a10, a10, a4
  90cc10:	2ca025        	l8ui	a12, a10, 37
  90cc13:	600039        	j	90cc50 <rcUpdate_11n+0x9c>
  90cc16:	00007d        	excw
				} else if (flags & ATH_RC_HT40_SGI_FLAG) {
  90cc19:	b711      	addi.n	a1, a1, 7
					rix = pRateTable->info[rcs[series].rix].sgiIndex;
  90cc1b:	2a7000        	l8ui	a10, a7, 0
  90cc1e:	0aab0a        	addx4	a11, a10, a10
  90cc21:	0aba09        	addx2	a10, a11, a10
  90cc24:	04aa0a        	addx4	a10, a10, a4
  90cc27:	2ca024        	l8ui	a12, a10, 36
  90cc2a:	600022        	j	90cc50 <rcUpdate_11n+0x9c>
				} else if (flags & ATH_RC_CW40_FLAG) {
  90cc2d:	c9a0      	beqz.n	a10, 90cc41 <rcUpdate_11n+0x8d>
					rix = pRateTable->info[rcs[series].rix].cw40Index;
  90cc2f:	2a7000        	l8ui	a10, a7, 0
  90cc32:	0aab0a        	addx4	a11, a10, a10
  90cc35:	0aba09        	addx2	a10, a11, a10
  90cc38:	04aa0a        	addx4	a10, a10, a4
  90cc3b:	2ca023        	l8ui	a12, a10, 35
  90cc3e:	60000e        	j	90cc50 <rcUpdate_11n+0x9c>
				} else {
					rix = pRateTable->info[rcs[series].rix].baseIndex;
  90cc41:	2a7000        	l8ui	a10, a7, 0
  90cc44:	0aab0a        	addx4	a11, a10, a10
  90cc47:	0aba09        	addx2	a10, a11, a10
  90cc4a:	04aa0a        	addx4	a10, a10, a4
  90cc4d:	2ca022        	l8ui	a12, a10, 34
				}

				/* FIXME:XXXX, too many args! */
				rcUpdate_ht(sc, an, rix, Xretries? 1 : 2, rcs[series].tries, 
  90cc50:	2a1210        	l32i	a10, a1, 64
  90cc53:	8d14      	l32i.n	a13, a1, 16
  90cc55:	0a0f4f        	extui	a15, a10, 0, 16
  90cc58:	9f10      	s32i.n	a15, a1, 0
  90cc5a:	da90      	mov.n	a10, a9
  90cc5c:	db30      	mov.n	a11, a3
  90cc5e:	9817      	s32i.n	a8, a1, 28
  90cc60:	9916      	s32i.n	a9, a1, 24
  90cc62:	5bfda3        	call8	90c2f0 <rcUpdate_ht$isra$4>
  90cc65:	8916      	l32i.n	a9, a1, 24
  90cc67:	8817      	l32i.n	a8, a1, 28
	 * to be processed.
	 */
	if (finalTSIdx != 0) {

		/* Process intermediate rates that failed.*/
		for (series = 0; series < finalTSIdx ; series++) {
  90cc69:	b122      	addi.n	a2, a2, 1
  90cc6b:	bc77      	addi.n	a7, a7, 12
  90cc6d:	752b02        	bgeu	a2, a5, 90cc73 <rcUpdate_11n+0xbf>
  90cc70:	63ff6d        	j	90cbe1 <rcUpdate_11n+0x2d>
  90cc73:	600011        	j	90cc88 <rcUpdate_11n+0xd4>
  90cc76:	000000        	ill
		/*
		 * Handle the special case of MIMO PS burst, where the second aggregate is sent
		 *  out with only one rate and one try. Treating it as an excessive retry penalizes
		 * the rate inordinately.
		 */
		if (rcs[0].tries == 1 && Xretries == 1) {
  90cc79:	277001        	l8ui	a7, a7, 1
		  A_UINT8 curTxAnt, 
		  int finalTSIdx, int Xretries,
		  struct ath_rc_series rcs[], int nFrames, 
		  int nBad, int long_retry)
{
	A_UINT32 series = 0;
  90cc7c:	d250      	mov.n	a2, a5
		/*
		 * Handle the special case of MIMO PS burst, where the second aggregate is sent
		 *  out with only one rate and one try. Treating it as an excessive retry penalizes
		 * the rate inordinately.
		 */
		if (rcs[0].tries == 1 && Xretries == 1) {
  90cc7e:	697106        	bnei	a7, 1, 90cc88 <rcUpdate_11n+0xd4>
			Xretries = 2;
  90cc81:	b067      	addi.n	a7, a6, -1
  90cc83:	c052      	movi.n	a5, 2
  90cc85:	075638        	moveqz	a6, a5, a7
		}
	}

	flags = rcs[series].flags;
  90cc88:	022209        	addx2	a2, a2, a2
  90cc8b:	08280a        	addx4	a8, a2, a8
  90cc8e:	278003        	l8ui	a7, a8, 3
	/* If HT40 and we have switched mode from 40 to 20 => don't update */
	if ((flags & ATH_RC_CW40_FLAG) && 
  90cc91:	c052      	movi.n	a5, 2
  90cc93:	057501        	and	a5, a7, a5
  90cc96:	c856      	beqz.n	a5, 90cca0 <rcUpdate_11n+0xec>
	    (pRc->rcPhyMode != (flags & ATH_RC_CW40_FLAG))) {
  90cc98:	8b15      	l32i.n	a11, a1, 20
  90cc9a:	22b06c        	l8ui	a2, a11, 108
		}
	}

	flags = rcs[series].flags;
	/* If HT40 and we have switched mode from 40 to 20 => don't update */
	if ((flags & ATH_RC_CW40_FLAG) && 
  90cc9d:	752969        	bne	a2, a5, 90cd0a <rcUpdate_11n+0x156>
	    (pRc->rcPhyMode != (flags & ATH_RC_CW40_FLAG))) {
		return;
	}
	if ((flags & ATH_RC_CW40_FLAG) && (flags & ATH_RC_HT40_SGI_FLAG)) {
  90cca0:	c026      	movi.n	a2, 6
  90cca2:	027201        	and	a2, a7, a2
  90cca5:	692613        	bnei	a2, 6, 90ccbc <rcUpdate_11n+0x108>
		rix = pRateTable->info[rcs[series].rix].htIndex;
  90cca8:	228000        	l8ui	a2, a8, 0
  90ccab:	02250a        	addx4	a5, a2, a2
  90ccae:	025209        	addx2	a2, a5, a2
  90ccb1:	04240a        	addx4	a4, a2, a4
  90ccb4:	2c4025        	l8ui	a12, a4, 37
  90ccb7:	600035        	j	90ccf0 <rcUpdate_11n+0x13c>
  90ccba:	000022        	excw
  90ccbd:	8000      	l32i.n	a0, a0, 0
	} else if (flags & ATH_RC_HT40_SGI_FLAG) {
  90ccbf:	7d770e        	bbci	a7, 29, 90ccd1 <rcUpdate_11n+0x11d>
		rix = pRateTable->info[rcs[series].rix].sgiIndex;
  90ccc2:	02250a        	addx4	a5, a2, a2
  90ccc5:	025209        	addx2	a2, a5, a2
  90ccc8:	04240a        	addx4	a4, a2, a4
  90cccb:	2c4024        	l8ui	a12, a4, 36
  90ccce:	60001e        	j	90ccf0 <rcUpdate_11n+0x13c>
	} else if (flags & ATH_RC_CW40_FLAG) {
  90ccd1:	c85f      	beqz.n	a5, 90cce4 <rcUpdate_11n+0x130>
		rix = pRateTable->info[rcs[series].rix].cw40Index;
  90ccd3:	02250a        	addx4	a5, a2, a2
  90ccd6:	025209        	addx2	a2, a5, a2
  90ccd9:	04240a        	addx4	a4, a2, a4
  90ccdc:	2c4023        	l8ui	a12, a4, 35
  90ccdf:	60000d        	j	90ccf0 <rcUpdate_11n+0x13c>
  90cce2:	000002        	or	a0, a0, a0
	} else {
		rix = pRateTable->info[rcs[series].rix].baseIndex;
  90cce5:	250a02        	movi	a5, 2
  90cce8:	520904        	call0	88f0fc <_bss_end+0x37c1ec>
  90cceb:	240a2c        	movi	a4, 44
  90ccee:	402222        	excw
	}

	/* FIXME:XXXX, too many args! */
	rcUpdate_ht(sc, an, rix, Xretries, long_retry, curTxAnt, 
  90ccf1:	12112e        	l32r	a2, 8d11ac <_bss_end+0x3be29c>
  90ccf4:	121202        	l32r	a2, 8d14fc <_bss_end+0x3be5ec>
  90ccf7:	024f92        	excw
  90ccfa:	102212        	l32r	a0, 8d5544 <_bss_end+0x3c2634>
  90ccfd:	10da90        	l32r	a0, 903740 <memset+0x1c8f8>
  90cd00:	db30      	mov.n	a11, a3
  90cd02:	dd60      	mov.n	a13, a6
  90cd04:	020f4f        	extui	a15, a2, 0, 16
  90cd07:	5bfd7a        	call8	90c2f0 <rcUpdate_ht$isra$4>
  90cd0a:	d10f      	retw.n

0090cd0c <ath_tx_status_update_rate>:

void ath_tx_status_update_rate(struct ath_softc_tgt *sc,
			       struct ath_rc_series rcs[],
			       int series,
			       WMI_TXSTATUS_EVENT *txs)
{
  90cd0c:	6c1004        	entry	a1, 32
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];

	/* HT Rate */
	if (pRateTable->info[rcs[series].rix].rateCode & 0x80) {
  90cd0f:	044409        	addx2	a4, a4, a4
			       struct ath_rc_series rcs[],
			       int series,
			       WMI_TXSTATUS_EVENT *txs)
{
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90cd12:	282248        	l32i	a8, a2, 0x120

	/* HT Rate */
	if (pRateTable->info[rcs[series].rix].rateCode & 0x80) {
  90cd15:	03430a        	addx4	a3, a4, a3
			       struct ath_rc_series rcs[],
			       int series,
			       WMI_TXSTATUS_EVENT *txs)
{
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90cd18:	2222c2        	l32i	a2, a2, 0x308

	/* HT Rate */
	if (pRateTable->info[rcs[series].rix].rateCode & 0x80) {
  90cd1b:	293000        	l8ui	a9, a3, 0
			       struct ath_rc_series rcs[],
			       int series,
			       WMI_TXSTATUS_EVENT *txs)
{
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90cd1e:	08220a        	addx4	a2, a2, a8
  90cd21:	8821      	l32i.n	a8, a2, 4

	/* HT Rate */
	if (pRateTable->info[rcs[series].rix].rateCode & 0x80) {
  90cd23:	09920a        	addx4	a2, a9, a9
  90cd26:	092209        	addx2	a2, a2, a9
  90cd29:	08220a        	addx4	a2, a2, a8
  90cd2c:	24201c        	l8ui	a4, a2, 28
  90cd2f:	285000        	l8ui	a8, a5, 0
  90cd32:	004432        	sext	a4, a4, 7
  90cd35:	222c10        	addi	a2, a2, 16
  90cd38:	674045        	bgez	a4, 90cd81 <ath_tx_status_update_rate+0x75>
		txs->txstatus[txs->cnt].ts_rate |= SM(pRateTable->info[rcs[series].rix].dot11Rate,
  90cd3b:	088909        	addx2	a9, a8, a8
  90cd3e:	a959      	add.n	a9, a5, a9
  90cd40:	22200e        	l8ui	a2, a2, 14
  90cd43:	249002        	l8ui	a4, a9, 2
  90cd46:	020243        	extui	a2, a2, 0, 4
  90cd49:	042202        	or	a2, a2, a4
  90cd4c:	229402        	s8i	a2, a9, 2
								       ATH9K_HTC_TXSTAT_RATE);
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_MCS;
  90cd4f:	229003        	l8ui	a2, a9, 3
  90cd52:	c048      	movi.n	a4, 8
  90cd54:	042402        	or	a4, a2, a4
  90cd57:	249403        	s8i	a4, a9, 3

		if (rcs[series].flags & ATH_RC_CW40_FLAG)
  90cd5a:	243003        	l8ui	a4, a3, 3
  90cd5d:	7e4707        	bbci	a4, 30, 90cd68 <ath_tx_status_update_rate+0x5c>
			txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_CW40;
  90cd60:	c148      	movi.n	a4, 24
  90cd62:	042202        	or	a2, a2, a4
  90cd65:	229403        	s8i	a2, a9, 3

		if (rcs[series].flags & ATH_RC_HT40_SGI_FLAG)
  90cd68:	223003        	l8ui	a2, a3, 3
  90cd6b:	7d2723        	bbci	a2, 29, 90cd92 <ath_tx_status_update_rate+0x86>
			txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_SGI;
  90cd6e:	088809        	addx2	a8, a8, a8
  90cd71:	a858      	add.n	a8, a5, a8
  90cd73:	248003        	l8ui	a4, a8, 3
  90cd76:	c220      	movi.n	a2, 32
  90cd78:	024202        	or	a2, a4, a2
  90cd7b:	228403        	s8i	a2, a8, 3
  90cd7e:	600010        	j	90cd92 <ath_tx_status_update_rate+0x86>

	} else {
		txs->txstatus[txs->cnt].ts_rate |= SM(rcs[series].rix, ATH9K_HTC_TXSTAT_RATE);
  90cd81:	088809        	addx2	a8, a8, a8
  90cd84:	a858      	add.n	a8, a5, a8
  90cd86:	228002        	l8ui	a2, a8, 2
  90cd89:	090943        	extui	a9, a9, 0, 4
  90cd8c:	029902        	or	a9, a9, a2
  90cd8f:	298402        	s8i	a9, a8, 2
	}

	if (rcs[series].flags & ATH_RC_RTSCTS_FLAG)
  90cd92:	223003        	l8ui	a2, a3, 3
  90cd95:	7b2713        	bbci	a2, 27, 90cdac <ath_tx_status_update_rate+0xa0>
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_RTC_CTS;
  90cd98:	225000        	l8ui	a2, a5, 0
  90cd9b:	022209        	addx2	a2, a2, a2
  90cd9e:	a255      	add.n	a5, a5, a2
  90cda0:	235003        	l8ui	a3, a5, 3
  90cda3:	220a04        	movi	a2, 4
  90cda6:	023202        	or	a2, a3, a2
  90cda9:	225403        	s8i	a2, a5, 3
  90cdac:	d10f      	retw.n
	...

0090cdb0 <ath_rate_attach>:

}

struct ath_ratectrl *
ath_rate_attach(struct ath_softc_tgt *sc)
{
  90cdb0:	6c1004        	entry	a1, 32
  90cdb3:	136915        	l32r	a3, 8e7208 <memset+0x3c0>
  90cdb6:	c0a0      	movi.n	a10, 0
  90cdb8:	223252        	l32i	a2, a3, 0x148
  90cdbb:	c1b8      	movi.n	a11, 24
  90cdbd:	0b2000        	callx8	a2
  90cdc0:	d2a0      	mov.n	a2, a10
	struct atheros_softc *asc;

	asc = adf_os_mem_alloc(sizeof(struct atheros_softc));
	if (asc == NULL)
  90cdc2:	c9a6      	beqz.n	a10, 90cddc <ath_rate_attach+0x2c>

/* set a memory buffer */
static inline void
__adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
	A_MEMSET(buf, b, size);
  90cdc4:	8334      	l32i.n	a3, a3, 16
  90cdc6:	c0b0      	movi.n	a11, 0
  90cdc8:	c1c8      	movi.n	a12, 24
  90cdca:	0b3000        	callx8	a3
		return NULL;

	adf_os_mem_set(asc, 0, sizeof(struct atheros_softc));
	asc->arc.arc_space = sizeof(struct atheros_node);
  90cdcd:	230a78        	movi	a3, 120
  90cdd0:	9320      	s32i.n	a3, a2, 0

	ar5416AttachRateTables(asc);
  90cdd2:	da20      	mov.n	a10, a2

	asc->tx_chainmask = 1;
  90cdd4:	230a01        	movi	a3, 1
		return NULL;

	adf_os_mem_set(asc, 0, sizeof(struct atheros_softc));
	asc->arc.arc_space = sizeof(struct atheros_node);

	ar5416AttachRateTables(asc);
  90cdd7:	580887        	call8	90eff4 <ar5416AttachRateTables>

	asc->tx_chainmask = 1;
  90cdda:	9323      	s32i.n	a3, a2, 12
    
	return &asc->arc;
}
  90cddc:	d10f      	retw.n
	...

0090cde0 <ath_rate_findrate>:
                  int numRates,
                  int stepDnInc,
                  unsigned int rcflag,
                  struct ath_rc_series series[],
                  int *isProbe)
{
  90cde0:	6c1006        	entry	a1, 48
  90cde3:	881f      	l32i.n	a8, a1, 60
	*isProbe = 0;
  90cde5:	c0e0      	movi.n	a14, 0

	if (!numRates || !numTries) {
  90cde7:	c091      	movi.n	a9, 1
                  int stepDnInc,
                  unsigned int rcflag,
                  struct ath_rc_series series[],
                  int *isProbe)
{
	*isProbe = 0;
  90cde9:	9e80      	s32i.n	a14, a8, 0

	if (!numRates || !numTries) {
  90cdeb:	079e38        	moveqz	a14, a9, a7
                  int numRates,
                  int stepDnInc,
                  unsigned int rcflag,
                  struct ath_rc_series series[],
                  int *isProbe)
{
  90cdee:	dd70      	mov.n	a13, a7
  90cdf0:	da20      	mov.n	a10, a2
  90cdf2:	db30      	mov.n	a11, a3
  90cdf4:	dc60      	mov.n	a12, a6
	*isProbe = 0;

	if (!numRates || !numTries) {
  90cdf6:	cde0      	bnez.n	a14, 90ce0a <ath_rate_findrate+0x2a>
  90cdf8:	06e939        	movnez	a9, a14, a6
  90cdfb:	cc9b      	bnez.n	a9, 90ce0a <ath_rate_findrate+0x2a>
	*isProbe = 0;
	if (!numRates || !numTries) {
		return;
	}

	rcRateFind_11n(sc, an, numTries, numRates, stepDnInc, rcflag, series, isProbe);
  90cdfd:	891e      	l32i.n	a9, a1, 56
  90cdff:	8e1c      	l32i.n	a14, a1, 48
  90ce01:	8f1d      	l32i.n	a15, a1, 52
  90ce03:	9910      	s32i.n	a9, a1, 0
  90ce05:	9811      	s32i.n	a8, a1, 4
  90ce07:	5bfeab        	call8	90c8b4 <rcRateFind_11n>
  90ce0a:	d10f      	retw.n

0090ce0c <ath_rate_tx_complete>:
ath_rate_tx_complete(struct ath_softc_tgt *sc,
		     struct ath_node_target *an,
		     struct ath_tx_desc *ds,
		     struct ath_rc_series rcs[], 
		     int nframes, int nbad)
{
  90ce0c:	6c1006        	entry	a1, 48
			 int nframes, int nbad)
{
	int finalTSIdx = ds->ds_txstat.ts_rate;
	int tx_status = 0;

	if ((ds->ds_txstat.ts_status & HAL_TXERR_XRETRY) ||
  90ce0f:	294066        	l8ui	a9, a4, 102
  90ce12:	c085      	movi.n	a8, 5
  90ce14:	089801        	and	a8, a9, a8
ath_rate_tx_complete(struct ath_softc_tgt *sc,
		     struct ath_node_target *an,
		     struct ath_tx_desc *ds,
		     struct ath_rc_series rcs[], 
		     int nframes, int nbad)
{
  90ce17:	da20      	mov.n	a10, a2
  90ce19:	db30      	mov.n	a11, a3
  90ce1b:	df50      	mov.n	a15, a5
			 struct ath_node_target *an,
			 struct ath_tx_desc *ds,
			 struct ath_rc_series rcs[], 
			 int nframes, int nbad)
{
	int finalTSIdx = ds->ds_txstat.ts_rate;
  90ce1d:	2d4068        	l8ui	a13, a4, 104

	if ((ds->ds_txstat.ts_status & HAL_TXERR_XRETRY) ||
	    (ds->ds_txstat.ts_status & HAL_TXERR_FIFO) || 
	    (ds->ds_txstat.ts_flags & HAL_TX_DATA_UNDERRUN) ||
	    (ds->ds_txstat.ts_flags & HAL_TX_DELIM_UNDERRUN)) {
		tx_status = 1;
  90ce20:	c0e1      	movi.n	a14, 1
			 int nframes, int nbad)
{
	int finalTSIdx = ds->ds_txstat.ts_rate;
	int tx_status = 0;

	if ((ds->ds_txstat.ts_status & HAL_TXERR_XRETRY) ||
  90ce22:	65800b        	bnez	a8, 90ce31 <ath_rate_tx_complete+0x25>
	    (ds->ds_txstat.ts_status & HAL_TXERR_FIFO) || 
	    (ds->ds_txstat.ts_flags & HAL_TX_DATA_UNDERRUN) ||
  90ce25:	2c4067        	l8ui	a12, a4, 103
  90ce28:	290a18        	movi	a9, 24
  90ce2b:	09c901        	and	a9, a12, a9
  90ce2e:	098e38        	moveqz	a14, a8, a9
	    (ds->ds_txstat.ts_flags & HAL_TX_DELIM_UNDERRUN)) {
		tx_status = 1;
	}

	rcUpdate_11n(sc, an,
  90ce31:	2c4073        	l8ui	a12, a4, 115
  90ce34:	9610      	s32i.n	a6, a1, 0
  90ce36:	9711      	s32i.n	a7, a1, 4
  90ce38:	244071        	l8ui	a4, a4, 113
  90ce3b:	9412      	s32i.n	a4, a1, 8
  90ce3d:	5bff5d        	call8	90cbb4 <rcUpdate_11n>
  90ce40:	d10f      	retw.n
	...

0090ce44 <ath_rate_newassoc>:
}

void
ath_rate_newassoc(struct ath_softc_tgt *sc, struct ath_node_target *an, int isnew, 
		  unsigned int capflag, struct ieee80211_rate *rs)
{
  90ce44:	6c1004        	entry	a1, 32
	ath_rate_newassoc_11n(sc, an, isnew, capflag, rs);
  90ce47:	da20      	mov.n	a10, a2
  90ce49:	db30      	mov.n	a11, a3
  90ce4b:	dc40      	mov.n	a12, a4
  90ce4d:	dd50      	mov.n	a13, a5
  90ce4f:	de60      	mov.n	a14, a6
  90ce51:	5bfe8d        	call8	90c888 <ath_rate_newassoc_11n>
  90ce54:	d10f      	retw.n
	...

0090ce58 <ath_rate_node_update>:
void ath_rate_node_update(struct ath_softc_tgt *sc,
			  struct ath_node_target *an,
			  a_int32_t isnew,
			  a_uint32_t capflag,
			  struct ieee80211_rate *rs)
{
  90ce58:	6c1004        	entry	a1, 32

void
ath_rate_newassoc(struct ath_softc_tgt *sc, struct ath_node_target *an, int isnew, 
		  unsigned int capflag, struct ieee80211_rate *rs)
{
	ath_rate_newassoc_11n(sc, an, isnew, capflag, rs);
  90ce5b:	da20      	mov.n	a10, a2
  90ce5d:	db30      	mov.n	a11, a3
  90ce5f:	dc40      	mov.n	a12, a4
  90ce61:	dd50      	mov.n	a13, a5
  90ce63:	de60      	mov.n	a14, a6
  90ce65:	5bfe88        	call8	90c888 <ath_rate_newassoc_11n>
  90ce68:	d10f      	retw.n
	...

0090ce6c <ath_rate_newstate>:
ath_rate_newstate(struct ath_softc_tgt *sc,
		  struct ieee80211vap_target *vap,
		  enum ieee80211_state state,
		  a_uint32_t capflag,
		  struct ieee80211_rate *rs)
{
  90ce6c:	6c1004        	entry	a1, 32
	struct ieee80211_node_target *ni = vap->iv_bss;
	struct atheros_softc *asc = (struct atheros_softc *) sc->sc_rc;

	asc->tx_chainmask = sc->sc_ic.ic_tx_chainmask;
  90ce6f:	292d16        	addmi	a9, a2, 0x1600
  90ce72:	282248        	l32i	a8, a2, 0x120
  90ce75:	299026        	l8ui	a9, a9, 38
		  struct ieee80211vap_target *vap,
		  enum ieee80211_state state,
		  a_uint32_t capflag,
		  struct ieee80211_rate *rs)
{
	struct ieee80211_node_target *ni = vap->iv_bss;
  90ce78:	8b34      	l32i.n	a11, a3, 16
ath_rate_newstate(struct ath_softc_tgt *sc,
		  struct ieee80211vap_target *vap,
		  enum ieee80211_state state,
		  a_uint32_t capflag,
		  struct ieee80211_rate *rs)
{
  90ce7a:	da20      	mov.n	a10, a2
	struct ieee80211_node_target *ni = vap->iv_bss;
	struct atheros_softc *asc = (struct atheros_softc *) sc->sc_rc;

	asc->tx_chainmask = sc->sc_ic.ic_tx_chainmask;
  90ce7c:	9983      	s32i.n	a9, a8, 12

void
ath_rate_newassoc(struct ath_softc_tgt *sc, struct ath_node_target *an, int isnew, 
		  unsigned int capflag, struct ieee80211_rate *rs)
{
	ath_rate_newassoc_11n(sc, an, isnew, capflag, rs);
  90ce7e:	c0c1      	movi.n	a12, 1
  90ce80:	dd50      	mov.n	a13, a5
  90ce82:	066e02        	or	a14, a6, a6
  90ce85:	5bfe80        	call8	90c888 <ath_rate_newassoc_11n>
  90ce88:	d10f      	retw.n
	...

0090ce8c <__adf_os_mem_copy>:
    //free(buf,M_DEVBUF);
}

/* move a memory buffer */
static inline void 		__adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
  90ce8c:	6c1004        	entry	a1, 32
    A_MEMCPY(dst,src,size);    
  90ce8f:	186915        	l32r	a8, 8e72e4 <memset+0x49c>
  90ce92:	da20      	mov.n	a10, a2
  90ce94:	8885      	l32i.n	a8, a8, 20
  90ce96:	db30      	mov.n	a11, a3
  90ce98:	dc40      	mov.n	a12, a4
  90ce9a:	0b8000        	callx8	a8
  90ce9d:	d10f      	retw.n
	...

0090cea0 <ieee80211_anyhdrsize>:
/*
 * Like ieee80211_hdrsize, but handles any type of frame.
 */
static __inline a_int32_t
ieee80211_anyhdrsize(const void *data)
{
  90cea0:	6c1004        	entry	a1, 32
	const struct ieee80211_frame *wh = data;

	if ((wh->i_fc[0]&IEEE80211_FC0_TYPE_MASK) == IEEE80211_FC0_TYPE_CTL) {
  90cea3:	282000        	l8ui	a8, a2, 0
  90cea6:	c09c      	movi.n	a9, 12
  90cea8:	098901        	and	a9, a8, a9
  90ceab:	699415        	bnei	a9, 4, 90cec4 <ieee80211_anyhdrsize+0x24>
		switch (wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK) {
  90ceae:	22faf0        	movi	a2, -16
  90ceb1:	028801        	and	a8, a8, a2
  90ceb4:	220ac0        	movi	a2, 192
  90ceb7:	728105        	beq	a8, a2, 90cec0 <ieee80211_anyhdrsize+0x20>
  90ceba:	220ad0        	movi	a2, 208
  90cebd:	728927        	bne	a8, a2, 90cee8 <ieee80211_anyhdrsize+0x48>
		case IEEE80211_FC0_SUBTYPE_CTS:
		case IEEE80211_FC0_SUBTYPE_ACK:
			return sizeof(struct ieee80211_frame_ack);
  90cec0:	c02a      	movi.n	a2, 10
  90cec2:	d10f      	retw.n
	const struct ieee80211_frame *wh = data;
	a_int32_t size = sizeof(struct ieee80211_frame);

	/* NB: we don't handle control frames */
	adf_os_assert((wh->i_fc[0]&IEEE80211_FC0_TYPE_MASK) != IEEE80211_FC0_TYPE_CTL);
	if ((wh->i_fc[1] & IEEE80211_FC1_DIR_MASK) == IEEE80211_FC1_DIR_DSTODS)
  90cec4:	2a2001        	l8ui	a10, a2, 1
 */
static __inline a_int32_t
ieee80211_hdrsize(const void *data)
{
	const struct ieee80211_frame *wh = data;
	a_int32_t size = sizeof(struct ieee80211_frame);
  90cec7:	c19e      	movi.n	a9, 30

	/* NB: we don't handle control frames */
	adf_os_assert((wh->i_fc[0]&IEEE80211_FC0_TYPE_MASK) != IEEE80211_FC0_TYPE_CTL);
	if ((wh->i_fc[1] & IEEE80211_FC1_DIR_MASK) == IEEE80211_FC1_DIR_DSTODS)
  90cec9:	0a0a41        	extui	a10, a10, 0, 2
 */
static __inline a_int32_t
ieee80211_hdrsize(const void *data)
{
	const struct ieee80211_frame *wh = data;
	a_int32_t size = sizeof(struct ieee80211_frame);
  90cecc:	2aacfd        	addi	a10, a10, -3
  90cecf:	c128      	movi.n	a2, 24
  90ced1:	0a9238        	moveqz	a2, a9, a10

	/* NB: we don't handle control frames */
	adf_os_assert((wh->i_fc[0]&IEEE80211_FC0_TYPE_MASK) != IEEE80211_FC0_TYPE_CTL);
	if ((wh->i_fc[1] & IEEE80211_FC1_DIR_MASK) == IEEE80211_FC1_DIR_DSTODS)
		size += IEEE80211_ADDR_LEN;
	if (IEEE80211_QOS_HAS_SEQ(wh))
  90ced4:	29fa8c        	movi	a9, -116
  90ced7:	098801        	and	a8, a8, a9
		size += sizeof(a_uint16_t);
  90ceda:	2a0a88        	movi	a10, 136
  90cedd:	b229      	addi.n	a9, a2, 2
  90cedf:	0a880c        	sub	a8, a8, a10
  90cee2:	089238        	moveqz	a2, a9, a8
  90cee5:	d10f      	retw.n
  90cee7:	00c120        	excw
			return sizeof(struct ieee80211_frame_ack);
		}
		return sizeof(struct ieee80211_frame_min);
	} else
		return ieee80211_hdrsize(data);
}
  90ceea:	d10f      	retw.n

0090ceec <owl_tgt_tid_init>:
	ath_rate_findrate(sc, an, 1, frameLen, 10, 4, 1,
			  ATH_RC_PROBE_ALLOWED, series, isProbe);
}

static void owl_tgt_tid_init(struct ath_atx_tid *tid)
{
  90ceec:	6c1004        	entry	a1, 32
	int i;

	tid->seq_start  = tid->seq_next = 0;
  90ceef:	c090      	movi.n	a9, 0
	tid->baw_size   = WME_MAX_BA;
  90cef1:	c480      	movi.n	a8, 64

static void owl_tgt_tid_init(struct ath_atx_tid *tid)
{
	int i;

	tid->seq_start  = tid->seq_next = 0;
  90cef3:	292503        	s16i	a9, a2, 6
  90cef6:	292502        	s16i	a9, a2, 4
	tid->baw_size   = WME_MAX_BA;
  90cef9:	282504        	s16i	a8, a2, 8
	tid->baw_head   = tid->baw_tail = 0;
	tid->paused     = 0;
  90cefc:	292434        	s8i	a9, a2, 52
{
	int i;

	tid->seq_start  = tid->seq_next = 0;
	tid->baw_size   = WME_MAX_BA;
	tid->baw_head   = tid->baw_tail = 0;
  90ceff:	c080      	movi.n	a8, 0
	tid->paused     = 0;
	tid->flag       = 0;
  90cf01:	292436        	s8i	a9, a2, 54
	tid->sched      = AH_FALSE;
  90cf04:	292435        	s8i	a9, a2, 53

	asf_tailq_init(&tid->buf_q);
  90cf07:	292c2c        	addi	a9, a2, 44
{
	int i;

	tid->seq_start  = tid->seq_next = 0;
	tid->baw_size   = WME_MAX_BA;
	tid->baw_head   = tid->baw_tail = 0;
  90cf0a:	9824      	s32i.n	a8, a2, 16
  90cf0c:	9823      	s32i.n	a8, a2, 12
	tid->paused     = 0;
	tid->flag       = 0;
	tid->sched      = AH_FALSE;

	asf_tailq_init(&tid->buf_q);
  90cf0e:	982b      	s32i.n	a8, a2, 44
  90cf10:	992c      	s32i.n	a9, a2, 48

	for (i = 0; i < ATH_TID_MAX_BUFS; i++) {
		TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, i);
  90cf12:	2d0a01        	movi	a13, 1
  90cf15:	2cfaff        	movi	a12, -1
  90cf18:	085912        	srai	a9, a8, 5
  90cf1b:	b499      	addi.n	a9, a9, 4
  90cf1d:	02990a        	addx4	a9, a9, a2
  90cf20:	008104        	ssl	a8
  90cf23:	00da1a        	sll	a10, a13
  90cf26:	8b91      	l32i.n	a11, a9, 4
  90cf28:	0aca03        	xor	a10, a12, a10
  90cf2b:	0baa01        	and	a10, a10, a11
  90cf2e:	9a91      	s32i.n	a10, a9, 4
	tid->flag       = 0;
	tid->sched      = AH_FALSE;

	asf_tailq_init(&tid->buf_q);

	for (i = 0; i < ATH_TID_MAX_BUFS; i++) {
  90cf30:	b188      	addi.n	a8, a8, 1
  90cf32:	698ee2        	bnei	a8, 128, 90cf18 <owl_tgt_tid_init+0x2c>
		TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, i);
	}
}
  90cf35:	d10f      	retw.n
	...

0090cf38 <ath_tgt_txq_add_ucast>:

	return 0;
}

static void ath_tgt_txq_add_ucast(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90cf38:	6c1006        	entry	a1, 48
	struct ath_hal *ah = sc->sc_ah;
  90cf3b:	222d05        	addmi	a2, a2, 0x500
  90cf3e:	842b      	l32i.n	a4, a2, 44
	struct ath_txq *txq;
	HAL_STATUS status;
	volatile a_int32_t txe_val;

	adf_os_assert(bf);
  90cf40:	cd35      	bnez.n	a3, 90cf59 <ath_tgt_txq_add_ucast+0x21>
  90cf42:	126915        	l32r	a2, 8e7398 <memset+0x550>
  90cf45:	1a6afb        	l32r	a10, 8e7b34 <memset+0xcec>
  90cf48:	222212        	l32i	a2, a2, 72
  90cf4b:	1b6afc        	l32r	a11, 8e7b3c <memset+0xcf4>
  90cf4e:	0b2000        	callx8	a2
  90cf51:	12697a        	l32r	a2, 8e753c <memset+0x6f4>
  90cf54:	0c0200        	memw
  90cf57:	8220      	l32i.n	a2, a2, 0

	txq = bf->bf_txq;

	status = ah->ah_procTxDesc(ah, bf->bf_lastds);
  90cf59:	28421a        	l32i	a8, a4, 104
  90cf5c:	8b3e      	l32i.n	a11, a3, 56
  90cf5e:	da40      	mov.n	a10, a4
	HAL_STATUS status;
	volatile a_int32_t txe_val;

	adf_os_assert(bf);

	txq = bf->bf_txq;
  90cf60:	223220        	l32i	a2, a3, 128

	status = ah->ah_procTxDesc(ah, bf->bf_lastds);
  90cf63:	0b8000        	callx8	a8

	ATH_TXQ_INSERT_TAIL(txq, bf, bf_list);
  90cf66:	c080      	movi.n	a8, 0
  90cf68:	9839      	s32i.n	a8, a3, 36
  90cf6a:	8823      	l32i.n	a8, a2, 12
  90cf6c:	983a      	s32i.n	a8, a3, 40
  90cf6e:	9380      	s32i.n	a3, a8, 0
  90cf70:	283c24        	addi	a8, a3, 36
  90cf73:	9823      	s32i.n	a8, a2, 12
  90cf75:	8824      	l32i.n	a8, a2, 16
  90cf77:	9325      	s32i.n	a3, a2, 20
  90cf79:	b188      	addi.n	a8, a8, 1
  90cf7b:	9824      	s32i.n	a8, a2, 16

	if (txq->axq_link == NULL) {
  90cf7d:	8821      	l32i.n	a8, a2, 4
  90cf7f:	cc89      	bnez.n	a8, 90cf8c <ath_tgt_txq_add_ucast+0x54>
		ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
  90cf81:	884a      	l32i.n	a8, a4, 40
  90cf83:	da40      	mov.n	a10, a4
  90cf85:	8b20      	l32i.n	a11, a2, 0
  90cf87:	8c3c      	l32i.n	a12, a3, 48
  90cf89:	600024        	j	90cfb1 <ath_tgt_txq_add_ucast+0x79>
	} else {
		*txq->axq_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
  90cf8c:	8c3c      	l32i.n	a12, a3, 48
  90cf8e:	9c80      	s32i.n	a12, a8, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90cf90:	186ab6        	l32r	a8, 8e7a68 <memset+0xc20>

		txe_val = ioread32_mac(0x0840);
		if (!(txe_val & (1<< txq->axq_qnum)))
  90cf93:	8b20      	l32i.n	a11, a2, 0
  90cf95:	0c0200        	memw
  90cf98:	8880      	l32i.n	a8, a8, 0
	if (txq->axq_link == NULL) {
		ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
	} else {
		*txq->axq_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);

		txe_val = ioread32_mac(0x0840);
  90cf9a:	0c0200        	memw
  90cf9d:	9810      	s32i.n	a8, a1, 0
		if (!(txe_val & (1<< txq->axq_qnum)))
  90cf9f:	0c0200        	memw
  90cfa2:	8810      	l32i.n	a8, a1, 0
  90cfa4:	00b004        	ssr	a11
  90cfa7:	08081b        	sra	a8, a8
  90cfaa:	7f8f06        	bbsi	a8, 31, 90cfb4 <ath_tgt_txq_add_ucast+0x7c>
			ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
  90cfad:	884a      	l32i.n	a8, a4, 40
  90cfaf:	da40      	mov.n	a10, a4
  90cfb1:	0b8000        	callx8	a8
	}

	txq->axq_link = &bf->bf_lastds->ds_link;
  90cfb4:	833e      	l32i.n	a3, a3, 56
	ah->ah_startTxDma(ah, txq->axq_qnum);
  90cfb6:	8b20      	l32i.n	a11, a2, 0
		txe_val = ioread32_mac(0x0840);
		if (!(txe_val & (1<< txq->axq_qnum)))
			ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
	}

	txq->axq_link = &bf->bf_lastds->ds_link;
  90cfb8:	9321      	s32i.n	a3, a2, 4
	ah->ah_startTxDma(ah, txq->axq_qnum);
  90cfba:	834c      	l32i.n	a3, a4, 48
  90cfbc:	da40      	mov.n	a10, a4
  90cfbe:	0b3000        	callx8	a3
  90cfc1:	d10f      	retw.n
	...

0090cfc4 <ath_update_stats>:
			     bf->bf_lastds, bf->bf_rcs, 1, 0);
}

static void
ath_update_stats(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90cfc4:	6c1004        	entry	a1, 32
	struct ath_tx_desc *ds = bf->bf_desc;
  90cfc7:	883c      	l32i.n	a8, a3, 48
	u_int32_t sr, lr;

	if (ds->ds_txstat.ts_status == 0) {
  90cfc9:	298066        	l8ui	a9, a8, 102
  90cfcc:	cd95      	bnez.n	a9, 90cfe5 <ath_update_stats+0x21>
		if (ds->ds_txstat.ts_rate & HAL_TXSTAT_ALTRATE)
  90cfce:	298068        	l8ui	a9, a8, 104
  90cfd1:	009932        	sext	a9, a9, 7
  90cfd4:	679042        	bgez	a9, 90d01a <ath_update_stats+0x56>
			sc->sc_tx_stats.ast_tx_altrate++;
  90cfd7:	292259        	l32i	a9, a2, 0x164
  90cfda:	b199      	addi.n	a9, a9, 1
  90cfdc:	292659        	s32i	a9, a2, 0x164
  90cfdf:	600037        	j	90d01a <ath_update_stats+0x56>
  90cfe2:	000000        	ill
	} else {
		if (ds->ds_txstat.ts_status & HAL_TXERR_XRETRY)
  90cfe5:	7f9707        	bbci	a9, 31, 90cff0 <ath_update_stats+0x2c>
			sc->sc_tx_stats.ast_tx_xretries++;
  90cfe8:	292252        	l32i	a9, a2, 0x148
  90cfeb:	b199      	addi.n	a9, a9, 1
  90cfed:	292652        	s32i	a9, a2, 0x148
		if (ds->ds_txstat.ts_status & HAL_TXERR_FIFO)
  90cff0:	298066        	l8ui	a9, a8, 102
  90cff3:	7d9707        	bbci	a9, 29, 90cffe <ath_update_stats+0x3a>
			sc->sc_tx_stats.ast_tx_fifoerr++;
  90cff6:	292253        	l32i	a9, a2, 0x14c
  90cff9:	b199      	addi.n	a9, a9, 1
  90cffb:	292653        	s32i	a9, a2, 0x14c
		if (ds->ds_txstat.ts_status & HAL_TXERR_FILT)
  90cffe:	298066        	l8ui	a9, a8, 102
  90d001:	7e9707        	bbci	a9, 30, 90d00c <ath_update_stats+0x48>
			sc->sc_tx_stats.ast_tx_filtered++;
  90d004:	292254        	l32i	a9, a2, 0x150
  90d007:	b199      	addi.n	a9, a9, 1
  90d009:	292654        	s32i	a9, a2, 0x150
		if (ds->ds_txstat.ts_status & HAL_TXERR_TIMER_EXPIRED)
  90d00c:	298066        	l8ui	a9, a8, 102
  90d00f:	7b9707        	bbci	a9, 27, 90d01a <ath_update_stats+0x56>
			sc->sc_tx_stats.ast_tx_timer_exp++;
  90d012:	292255        	l32i	a9, a2, 0x154
  90d015:	b199      	addi.n	a9, a9, 1
  90d017:	292655        	s32i	a9, a2, 0x154
	}
	sr = ds->ds_txstat.ts_shortretry;
	lr = ds->ds_txstat.ts_longretry;
  90d01a:	298071        	l8ui	a9, a8, 113
	sc->sc_tx_stats.ast_tx_shortretry += sr;
  90d01d:	2a2256        	l32i	a10, a2, 0x158
		if (ds->ds_txstat.ts_status & HAL_TXERR_FILT)
			sc->sc_tx_stats.ast_tx_filtered++;
		if (ds->ds_txstat.ts_status & HAL_TXERR_TIMER_EXPIRED)
			sc->sc_tx_stats.ast_tx_timer_exp++;
	}
	sr = ds->ds_txstat.ts_shortretry;
  90d020:	288070        	l8ui	a8, a8, 112
	lr = ds->ds_txstat.ts_longretry;
	sc->sc_tx_stats.ast_tx_shortretry += sr;
  90d023:	a8a8      	add.n	a8, a10, a8
  90d025:	282656        	s32i	a8, a2, 0x158
	sc->sc_tx_stats.ast_tx_longretry += lr;
  90d028:	282257        	l32i	a8, a2, 0x15c
  90d02b:	a988      	add.n	a8, a8, a9
  90d02d:	282657        	s32i	a8, a2, 0x15c
  90d030:	d10f      	retw.n
	...

0090d034 <ath_tx_update_baw>:
	ath_tgt_tx_enqueue(txq, tid);
}

static void
ath_tx_update_baw(ath_atx_tid_t *tid, int seqno)
{
  90d034:	6c1004        	entry	a1, 32
	int index;
	int cindex;

	index  = ATH_BA_INDEX(tid->seq_start, seqno);
  90d037:	2a2102        	l16ui	a10, a2, 4
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);
  90d03a:	8823      	l32i.n	a8, a2, 12
ath_tx_update_baw(ath_atx_tid_t *tid, int seqno)
{
	int index;
	int cindex;

	index  = ATH_BA_INDEX(tid->seq_start, seqno);
  90d03c:	0a330c        	sub	a3, a3, a10
  90d03f:	030a4b        	extui	a10, a3, 0, 12
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);
  90d042:	a8aa      	add.n	a10, a10, a8

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);
  90d044:	0a5941        	extui	a9, a10, 5, 2
  90d047:	c081      	movi.n	a8, 1
  90d049:	b499      	addi.n	a9, a9, 4
  90d04b:	02990a        	addx4	a9, a9, a2
  90d04e:	c7bf      	movi.n	a11, -1
  90d050:	00a104        	ssl	a10
  90d053:	008a1a        	sll	a10, a8
  90d056:	0aba03        	xor	a10, a11, a10
  90d059:	8b91      	l32i.n	a11, a9, 4

	while (tid->baw_head != tid->baw_tail &&
  90d05b:	8c24      	l32i.n	a12, a2, 16
	int cindex;

	index  = ATH_BA_INDEX(tid->seq_start, seqno);
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);
  90d05d:	0baa01        	and	a10, a10, a11
  90d060:	9a91      	s32i.n	a10, a9, 4

	while (tid->baw_head != tid->baw_tail &&
	       (!TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head))) {
  90d062:	db80      	mov.n	a11, a8
	index  = ATH_BA_INDEX(tid->seq_start, seqno);
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);

	while (tid->baw_head != tid->baw_tail &&
  90d064:	600012        	j	90d07a <ath_tx_update_baw+0x46>
  90d067:	002921        	excw
	       (!TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head))) {
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90d06a:	02b188        	excw
  90d06d:	b199      	addi.n	a9, a9, 1
  90d06f:	09094b        	extui	a9, a9, 0, 12
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
  90d072:	080846        	extui	a8, a8, 0, 7

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);

	while (tid->baw_head != tid->baw_tail &&
	       (!TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head))) {
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90d075:	292502        	s16i	a9, a2, 4
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
  90d078:	9823      	s32i.n	a8, a2, 12
	index  = ATH_BA_INDEX(tid->seq_start, seqno);
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);

	while (tid->baw_head != tid->baw_tail &&
  90d07a:	8823      	l32i.n	a8, a2, 12
  90d07c:	7c8110        	beq	a8, a12, 90d090 <ath_tx_update_baw+0x5c>
	       (!TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head))) {
  90d07f:	085912        	srai	a9, a8, 5
  90d082:	02990a        	addx4	a9, a9, a2
  90d085:	8995      	l32i.n	a9, a9, 20
  90d087:	008104        	ssl	a8
  90d08a:	00ba1a        	sll	a10, a11
	index  = ATH_BA_INDEX(tid->seq_start, seqno);
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);

	while (tid->baw_head != tid->baw_tail &&
  90d08d:	79a0d7        	bnone	a10, a9, 90d068 <ath_tx_update_baw+0x34>
  90d090:	d10f      	retw.n
	...

0090d094 <ath_dma_unmap>:
	skb = adf_nbuf_queue_first(&bf->bf_skbhead);
	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, skb, ADF_OS_DMA_TO_DEVICE);
}

static void ath_dma_unmap(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d094:	6c1004        	entry	a1, 32
 * @return first buffer in queue
 */
static inline adf_nbuf_t 
adf_nbuf_queue_first(adf_nbuf_queue_t *head)
{
    return (__adf_nbuf_queue_first(head));
  90d097:	2a3c14        	addi	a10, a3, 20
  90d09a:	5be70d        	call8	906cd0 <__adf_nbuf_queue_first>
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  90d09d:	2a2246        	l32i	a10, a2, 0x118
  90d0a0:	8b30      	l32i.n	a11, a3, 0
  90d0a2:	2c0a00        	movi	a12, 0
  90d0a5:	5be678        	call8	906a88 <__adf_nbuf_unmap>
  90d0a8:	d10f      	retw.n
	...

0090d0ac <ath_tgt_skb_free>:
}

static void ath_tgt_skb_free(struct ath_softc_tgt *sc,
			     adf_nbuf_queue_t *head,
			     HTC_ENDPOINT_ID endpt)
{
  90d0ac:	6c1004        	entry	a1, 32
	adf_nbuf_t tskb;

	while (adf_nbuf_queue_len(head) != 0) {
		tskb = adf_nbuf_queue_remove(head);
		ath_free_tx_skb(sc->tgt_htc_handle,endpt,tskb);
  90d0af:	156915        	l32r	a5, 8e7504 <memset+0x6bc>
			     adf_nbuf_queue_t *head,
			     HTC_ENDPOINT_ID endpt)
{
	adf_nbuf_t tskb;

	while (adf_nbuf_queue_len(head) != 0) {
  90d0b2:	600012        	j	90d0c8 <ath_tgt_skb_free+0x1c>
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  90d0b5:	da30      	mov.n	a10, a3
  90d0b7:	5be660        	call8	906a38 <__adf_nbuf_queue_remove>
  90d0ba:	dca0      	mov.n	a12, a10
		tskb = adf_nbuf_queue_remove(head);
		ath_free_tx_skb(sc->tgt_htc_handle,endpt,tskb);
  90d0bc:	285282        	l32i	a8, a5, 0x208
  90d0bf:	2a2202        	l32i	a10, a2, 8
  90d0c2:	044b02        	or	a11, a4, a4
  90d0c5:	0b8000        	callx8	a8
 * @return length of the queue
 */
static inline a_uint32_t
adf_nbuf_queue_len(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_len(head);
  90d0c8:	da30      	mov.n	a10, a3
  90d0ca:	5be6ff        	call8	906cc8 <__adf_nbuf_queue_len>
			     adf_nbuf_queue_t *head,
			     HTC_ENDPOINT_ID endpt)
{
	adf_nbuf_t tskb;

	while (adf_nbuf_queue_len(head) != 0) {
  90d0cd:	65afe4        	bnez	a10, 90d0b5 <ath_tgt_skb_free+0x9>
		tskb = adf_nbuf_queue_remove(head);
		ath_free_tx_skb(sc->tgt_htc_handle,endpt,tskb);
	}
}
  90d0d0:	d10f      	retw.n
	...

0090d0d4 <ath_filltxdesc>:
	skb = adf_nbuf_queue_first(&bf->bf_skbhead);
	adf_nbuf_unmap( sc->sc_dev, bf->bf_dmamap, ADF_OS_DMA_TO_DEVICE);
}

static void ath_filltxdesc(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d0d4:	6c1004        	entry	a1, 32
	struct ath_tx_desc *ds0, *ds = bf->bf_desc;
  90d0d7:	863c      	l32i.n	a6, a3, 48
 * @param[out] sg   map info
 */
static inline void
adf_nbuf_dmamap_info(adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
    __adf_nbuf_dmamap_info(bmap, sg);
  90d0d9:	8a30      	l32i.n	a10, a3, 0
	struct ath_hal *ah = sc->sc_ah;
  90d0db:	222d05        	addmi	a2, a2, 0x500
  90d0de:	b43b      	addi.n	a11, a3, 4
	a_uint8_t i;

	ds0 = ds;
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	for (i = 0; i < bf->bf_dmamap_info.nsegs; i++, ds++) {
  90d0e0:	c040      	movi.n	a4, 0
}

static void ath_filltxdesc(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds0, *ds = bf->bf_desc;
	struct ath_hal *ah = sc->sc_ah;
  90d0e2:	872b      	l32i.n	a7, a2, 44
	ds0 = ds;
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	for (i = 0; i < bf->bf_dmamap_info.nsegs; i++, ds++) {

		ds->ds_data = bf->bf_dmamap_info.dma_segs[i].paddr;
  90d0e4:	d540      	mov.n	a5, a4
  90d0e6:	5be66d        	call8	906a9c <__adf_nbuf_dmamap_info>
	adf_nbuf_unmap( sc->sc_dev, bf->bf_dmamap, ADF_OS_DMA_TO_DEVICE);
}

static void ath_filltxdesc(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds0, *ds = bf->bf_desc;
  90d0e9:	d260      	mov.n	a2, a6
	a_uint8_t i;

	ds0 = ds;
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	for (i = 0; i < bf->bf_dmamap_info.nsegs; i++, ds++) {
  90d0eb:	600081        	j	90d170 <ath_filltxdesc+0x9c>
  90d0ee:	000003        	xor	a0, a0, a0

		ds->ds_data = bf->bf_dmamap_info.dma_segs[i].paddr;
  90d0f1:	480b2a        	excw
  90d0f4:	8008      	l32i.n	a0, a0, 32

		if (i == (bf->bf_dmamap_info.nsegs - 1)) {
  90d0f6:	b099      	addi.n	a9, a9, -1
	ds0 = ds;
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	for (i = 0; i < bf->bf_dmamap_info.nsegs; i++, ds++) {

		ds->ds_data = bf->bf_dmamap_info.dma_segs[i].paddr;
  90d0f8:	2a2404        	s8i	a10, a2, 4
  90d0fb:	2a8009        	l8ui	a10, a8, 9
  90d0fe:	2a2405        	s8i	a10, a2, 5
  90d101:	2a800a        	l8ui	a10, a8, 10
  90d104:	2a2406        	s8i	a10, a2, 6
  90d107:	28800b        	l8ui	a8, a8, 11
  90d10a:	282407        	s8i	a8, a2, 7

		if (i == (bf->bf_dmamap_info.nsegs - 1)) {
  90d10d:	794910        	bne	a4, a9, 90d121 <ath_filltxdesc+0x4d>
			ds->ds_link = 0;
  90d110:	252400        	s8i	a5, a2, 0
  90d113:	252401        	s8i	a5, a2, 1
  90d116:	252402        	s8i	a5, a2, 2
  90d119:	252403        	s8i	a5, a2, 3
			bf->bf_lastds = ds;
  90d11c:	923e      	s32i.n	a2, a3, 56
  90d11e:	600020        	j	90d142 <ath_filltxdesc+0x6e>
		} else
			ds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, i+1);
  90d121:	b148      	addi.n	a8, a4, 1
  90d123:	0c8911        	slli	a9, a8, 4
  90d126:	a898      	add.n	a8, a9, a8
  90d128:	893d      	l32i.n	a9, a3, 52
  90d12a:	09880b        	addx8	a8, a8, a9
  90d12d:	088957        	extui	a9, a8, 24, 8
  90d130:	292400        	s8i	a9, a2, 0
  90d133:	080957        	extui	a9, a8, 16, 8
  90d136:	292401        	s8i	a9, a2, 1
  90d139:	088947        	extui	a9, a8, 8, 8
  90d13c:	292402        	s8i	a9, a2, 2
  90d13f:	282403        	s8i	a8, a2, 3

		ah->ah_fillTxDesc(ds
				   , bf->bf_dmamap_info.dma_segs[i].len
				   , i == 0
				   , i == (bf->bf_dmamap_info.nsegs - 1)
  90d142:	8d31      	l32i.n	a13, a3, 4
			ds->ds_link = 0;
			bf->bf_lastds = ds;
		} else
			ds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, i+1);

		ah->ah_fillTxDesc(ds
  90d144:	c091      	movi.n	a9, 1
				   , bf->bf_dmamap_info.dma_segs[i].len
				   , i == 0
				   , i == (bf->bf_dmamap_info.nsegs - 1)
  90d146:	b0dd      	addi.n	a13, a13, -1
			ds->ds_link = 0;
			bf->bf_lastds = ds;
		} else
			ds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, i+1);

		ah->ah_fillTxDesc(ds
  90d148:	0d4d0c        	sub	a13, a4, a13
  90d14b:	034b0b        	addx8	a11, a4, a3
  90d14e:	c080      	movi.n	a8, 0
  90d150:	dc80      	mov.n	a12, a8
  90d152:	2f7218        	l32i	a15, a7, 96
  90d155:	0d9838        	moveqz	a8, a9, a13
  90d158:	8bb3      	l32i.n	a11, a11, 12
  90d15a:	049c38        	moveqz	a12, a9, a4
  90d15d:	dd80      	mov.n	a13, a8
  90d15f:	da20      	mov.n	a10, a2
  90d161:	de60      	mov.n	a14, a6
  90d163:	0bf000        	callx8	a15
	a_uint8_t i;

	ds0 = ds;
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	for (i = 0; i < bf->bf_dmamap_info.nsegs; i++, ds++) {
  90d166:	b144      	addi.n	a4, a4, 1
  90d168:	280a88        	movi	a8, 136
  90d16b:	040447        	extui	a4, a4, 0, 8
  90d16e:	a822      	add.n	a2, a2, a8
  90d170:	8931      	l32i.n	a9, a3, 4
  90d172:	794b02        	bgeu	a4, a9, 90d178 <ath_filltxdesc+0xa4>
  90d175:	63ff77        	j	90d0f0 <ath_filltxdesc+0x1c>
				   , bf->bf_dmamap_info.dma_segs[i].len
				   , i == 0
				   , i == (bf->bf_dmamap_info.nsegs - 1)
				   , ds0);
	}
}
  90d178:	d10f      	retw.n
	...

0090d17c <ath_tx_tgt_setds>:

static void ath_tx_tgt_setds(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d17c:	6c1006        	entry	a1, 48
	struct ath_tx_desc *ds = bf->bf_desc;
	struct ath_hal *ah = sc->sc_ah;

	switch (bf->bf_protmode) {
  90d17f:	293084        	l8ui	a9, a3, 132
}

static void ath_tx_tgt_setds(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds = bf->bf_desc;
	struct ath_hal *ah = sc->sc_ah;
  90d182:	282d05        	addmi	a8, a2, 0x500
  90d185:	8d8b      	l32i.n	a13, a8, 44
	}
}

static void ath_tx_tgt_setds(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds = bf->bf_desc;
  90d187:	8a3c      	l32i.n	a10, a3, 48
  90d189:	283144        	l16ui	a8, a3, 136
	struct ath_hal *ah = sc->sc_ah;

	switch (bf->bf_protmode) {
  90d18c:	689108        	beqi	a9, 1, 90d198 <ath_tx_tgt_setds+0x1c>
  90d18f:	69920d        	bnei	a9, 2, 90d1a0 <ath_tx_tgt_setds+0x24>
    	case IEEE80211_PROT_RTSCTS:
		bf->bf_flags |= HAL_TXDESC_RTSENA;
  90d192:	c094      	movi.n	a9, 4
  90d194:	600002        	j	90d19a <ath_tx_tgt_setds+0x1e>
  90d197:	00c098        	excw
		break;
    	case IEEE80211_PROT_CTSONLY:
		bf->bf_flags |= HAL_TXDESC_CTSENA;
  90d19a:	098802        	or	a8, a8, a9
  90d19d:	283544        	s16i	a8, a3, 136
		break;
    	default:
		break;
	}

	ah->ah_set11nTxDesc(ds
  90d1a0:	293144        	l16ui	a9, a3, 136
  90d1a3:	c180      	movi.n	a8, 16
  90d1a5:	089802        	or	a8, a9, a8
  90d1a8:	08084f        	extui	a8, a8, 0, 16
  90d1ab:	9810      	s32i.n	a8, a1, 0
  90d1ad:	2b3122        	l16ui	a11, a3, 68
  90d1b0:	88df      	l32i.n	a8, a13, 60
  90d1b2:	2c304a        	l8ui	a12, a3, 74
  90d1b5:	2e3049        	l8ui	a14, a3, 73
  90d1b8:	2f3085        	l8ui	a15, a3, 133
  90d1bb:	2d0a3c        	movi	a13, 60
  90d1be:	0b8000        	callx8	a8
			      , 60
			      , bf->bf_keyix
			      , bf->bf_keytype
			      , bf->bf_flags | HAL_TXDESC_INTREQ);

	ath_filltxdesc(sc, bf);
  90d1c1:	da20      	mov.n	a10, a2
  90d1c3:	db30      	mov.n	a11, a3
  90d1c5:	5bffc3        	call8	90d0d4 <ath_filltxdesc>
  90d1c8:	d10f      	retw.n
	...

0090d1cc <ath_tgt_tx_enqueue>:
	ath_tgt_tx_send_normal(sc, bf);
}

static void
ath_tgt_tx_enqueue(struct ath_txq *txq, struct ath_atx_tid  *tid)
{
  90d1cc:	6c1004        	entry	a1, 32
	if (tid->paused)
  90d1cf:	283034        	l8ui	a8, a3, 52
  90d1d2:	cd88      	bnez.n	a8, 90d1ee <ath_tgt_tx_enqueue+0x22>
		return;

	if (tid->sched)
  90d1d4:	283035        	l8ui	a8, a3, 53
  90d1d7:	008832        	sext	a8, a8, 7
  90d1da:	cd80      	bnez.n	a8, 90d1ee <ath_tgt_tx_enqueue+0x22>
		return;

	tid->sched = AH_TRUE;
  90d1dc:	c091      	movi.n	a9, 1
  90d1de:	293435        	s8i	a9, a3, 53
	asf_tailq_insert_tail(&txq->axq_tidq, tid, tid_qelem);
  90d1e1:	9839      	s32i.n	a8, a3, 36
  90d1e3:	8827      	l32i.n	a8, a2, 28
  90d1e5:	983a      	s32i.n	a8, a3, 40
  90d1e7:	9380      	s32i.n	a3, a8, 0
  90d1e9:	233c24        	addi	a3, a3, 36
  90d1ec:	9327      	s32i.n	a3, a2, 28
  90d1ee:	d10f      	retw.n

0090d1f0 <ath_update_aggr_stats$isra$2>:
	ath_tx_set_retry(sc, bf);
	asf_tailq_insert_tail(bf_q, bf, bf_list);
}

static void
ath_update_aggr_stats(struct ath_softc_tgt *sc,
  90d1f0:	6c1004        	entry	a1, 32
{

	u_int8_t status = ATH_DS_TX_STATUS(ds);
	u_int8_t txflags = ATH_DS_TX_FLAGS(ds);

	__statsn(sc, txaggr_longretries, ds->ds_txstat.ts_longretry);
  90d1f3:	2a3071        	l8ui	a10, a3, 113
  90d1f6:	2b2268        	l32i	a11, a2, 0x1a0
ath_update_aggr_stats(struct ath_softc_tgt *sc,
		      struct ath_tx_desc *ds, int nframes,
		      int nbad)
{

	u_int8_t status = ATH_DS_TX_STATUS(ds);
  90d1f9:	283066        	l8ui	a8, a3, 102
	u_int8_t txflags = ATH_DS_TX_FLAGS(ds);

	__statsn(sc, txaggr_longretries, ds->ds_txstat.ts_longretry);
  90d1fc:	0aba08        	add	a10, a11, a10
		      struct ath_tx_desc *ds, int nframes,
		      int nbad)
{

	u_int8_t status = ATH_DS_TX_STATUS(ds);
	u_int8_t txflags = ATH_DS_TX_FLAGS(ds);
  90d1ff:	293067        	l8ui	a9, a3, 103

	__statsn(sc, txaggr_longretries, ds->ds_txstat.ts_longretry);
  90d202:	2a2668        	s32i	a10, a2, 0x1a0
	__statsn(sc, txaggr_shortretries, ds->ds_txstat.ts_shortretry);
  90d205:	233070        	l8ui	a3, a3, 112
  90d208:	2a226b        	l32i	a10, a2, 0x1ac
  90d20b:	03a308        	add	a3, a10, a3
  90d20e:	23266b        	s32i	a3, a2, 0x1ac

	if (txflags & HAL_TX_DESC_CFG_ERR)
  90d211:	7d9708        	bbci	a9, 29, 90d21d <ath_update_aggr_stats$isra$2+0x2d>
		__stats(sc, txaggr_desc_cfgerr);
  90d214:	232271        	l32i	a3, a2, 0x1c4
  90d217:	233c01        	addi	a3, a3, 1
  90d21a:	232671        	s32i	a3, a2, 0x1c4

	if (txflags & HAL_TX_DATA_UNDERRUN)
  90d21d:	7c9708        	bbci	a9, 28, 90d229 <ath_update_aggr_stats$isra$2+0x39>
		__stats(sc, txaggr_data_urun);
  90d220:	232265        	l32i	a3, a2, 0x194
  90d223:	233c01        	addi	a3, a3, 1
  90d226:	232665        	s32i	a3, a2, 0x194

	if (txflags & HAL_TX_DELIM_UNDERRUN)
  90d229:	7b9707        	bbci	a9, 27, 90d234 <ath_update_aggr_stats$isra$2+0x44>
		__stats(sc, txaggr_delim_urun);
  90d22c:	232266        	l32i	a3, a2, 0x198
  90d22f:	b133      	addi.n	a3, a3, 1
  90d231:	232666        	s32i	a3, a2, 0x198

	if (!status) {
  90d234:	cb88      	beqz.n	a8, 90d270 <ath_update_aggr_stats$isra$2+0x80>
		return;
	}

	if (status & HAL_TXERR_XRETRY)
  90d236:	7f8707        	bbci	a8, 31, 90d241 <ath_update_aggr_stats$isra$2+0x51>
		__stats(sc, txaggr_compxretry);
  90d239:	23226a        	l32i	a3, a2, 0x1a8
  90d23c:	b133      	addi.n	a3, a3, 1
  90d23e:	23266a        	s32i	a3, a2, 0x1a8

	if (status & HAL_TXERR_FILT)
  90d241:	7e8708        	bbci	a8, 30, 90d24d <ath_update_aggr_stats$isra$2+0x5d>
		__stats(sc, txaggr_filtered);
  90d244:	23226e        	l32i	a3, a2, 0x1b8
  90d247:	233c01        	addi	a3, a3, 1
  90d24a:	23266e        	s32i	a3, a2, 0x1b8

	if (status & HAL_TXERR_FIFO)
  90d24d:	7d8708        	bbci	a8, 29, 90d259 <ath_update_aggr_stats$isra$2+0x69>
		__stats(sc, txaggr_fifo);
  90d250:	23226f        	l32i	a3, a2, 0x1bc
  90d253:	233c01        	addi	a3, a3, 1
  90d256:	23266f        	s32i	a3, a2, 0x1bc

	if (status & HAL_TXERR_XTXOP)
  90d259:	7c8708        	bbci	a8, 28, 90d265 <ath_update_aggr_stats$isra$2+0x75>
		__stats(sc, txaggr_xtxop);
  90d25c:	232270        	l32i	a3, a2, 0x1c0
  90d25f:	233c01        	addi	a3, a3, 1
  90d262:	232670        	s32i	a3, a2, 0x1c0

	if (status & HAL_TXERR_TIMER_EXPIRED)
  90d265:	7b8707        	bbci	a8, 27, 90d270 <ath_update_aggr_stats$isra$2+0x80>
		__stats(sc, txaggr_timer_exp);
  90d268:	23226c        	l32i	a3, a2, 0x1b0
  90d26b:	b133      	addi.n	a3, a3, 1
  90d26d:	23266c        	s32i	a3, a2, 0x1b0
  90d270:	d10f      	retw.n
	...

0090d274 <__adf_os_mem_set$constprop$13>:
}

/* set a memory buffer */
static inline void
__adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
  90d274:	6c1004        	entry	a1, 32
{
	A_MEMSET(buf, b, size);
  90d277:	186915        	l32r	a8, 8e76cc <memset+0x884>
  90d27a:	da20      	mov.n	a10, a2
  90d27c:	8884      	l32i.n	a8, a8, 16
  90d27e:	c0b0      	movi.n	a11, 0
  90d280:	dc30      	mov.n	a12, a3
  90d282:	0b8000        	callx8	a8
  90d285:	d10f      	retw.n
	...

0090d288 <ath_buf_set_rate>:
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d288:	6c1016        	entry	a1, 176
    a_uint8_t rix, cix, rtsctsrate;
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
  90d28b:	253144        	l16ui	a5, a3, 136
  90d28e:	c07c      	movi.n	a7, 12
  90d290:	075801        	and	a8, a5, a7
    cix = rt->info[sc->sc_protrix].controlRate;
  90d293:	272d03        	addmi	a7, a2, 0x300
  90d296:	27700c        	l8ui	a7, a7, 12
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
    struct ath_hal *ah = sc->sc_ah;
  90d299:	242d05        	addmi	a4, a2, 0x500
    HAL_11N_RATE_SERIES series[4];
    a_int32_t i, flags;
    a_uint8_t rix, cix, rtsctsrate;
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
  90d29c:	262281        	l32i	a6, a2, 0x204
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
    struct ath_hal *ah = sc->sc_ah;
  90d29f:	844b      	l32i.n	a4, a4, 44
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;
  90d2a1:	07770a        	addx4	a7, a7, a7
  90d2a4:	06770a        	addx4	a7, a7, a6
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
    struct ath_hal *ah = sc->sc_ah;
  90d2a7:	24161e        	s32i	a4, a1, 120
    a_uint8_t rix, cix, rtsctsrate;
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
  90d2aa:	28161c        	s32i	a8, a1, 112

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
    struct ath_hal *ah = sc->sc_ah;
    const HAL_RATE_TABLE *rt;
    struct ath_tx_desc *ds = bf->bf_desc;
  90d2ad:	843c      	l32i.n	a4, a3, 48
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;
  90d2af:	287037        	l8ui	a8, a7, 55

    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
  90d2b2:	273084        	l8ui	a7, a3, 132

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
    struct ath_hal *ah = sc->sc_ah;
    const HAL_RATE_TABLE *rt;
    struct ath_tx_desc *ds = bf->bf_desc;
  90d2b5:	24161f        	s32i	a4, a1, 124
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;
  90d2b8:	28161d        	s32i	a8, a1, 116
    a_int32_t i, flags;
    a_uint8_t rix, cix, rtsctsrate;
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
  90d2bb:	243050        	l8ui	a4, a3, 80
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;

    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
  90d2be:	ca70      	beqz.n	a7, 90d2e2 <ath_buf_set_rate+0x5a>
	(rt->info[rix].phy == IEEE80211_T_OFDM ||
  90d2c0:	04440a        	addx4	a4, a4, a4
  90d2c3:	06440a        	addx4	a4, a4, a6
  90d2c6:	284029        	l8ui	a8, a4, 41
  90d2c9:	c071      	movi.n	a7, 1
  90d2cb:	298cfc        	addi	a9, a8, -4
  90d2ce:	c040      	movi.n	a4, 0
  90d2d0:	097438        	moveqz	a4, a7, a9
    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;

    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
  90d2d3:	cc46      	bnez.n	a4, 90d2dd <ath_buf_set_rate+0x55>
	(rt->info[rix].phy == IEEE80211_T_OFDM ||
  90d2d5:	288cfe        	addi	a8, a8, -2
    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;

    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
  90d2d8:	087438        	moveqz	a4, a7, a8
  90d2db:	c843      	beqz.n	a4, 90d2e2 <ath_buf_set_rate+0x5a>
	(rt->info[rix].phy == IEEE80211_T_OFDM ||
	 rt->info[rix].phy == IEEE80211_T_HT) &&
	(bf->bf_flags & HAL_TXDESC_NOACK) == 0) {
	    cix = rt->info[sc->sc_protrix].controlRate;
	    prot_mode = AH_TRUE;
  90d2dd:	c071      	movi.n	a7, 1
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;

    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
	(rt->info[rix].phy == IEEE80211_T_OFDM ||
	 rt->info[rix].phy == IEEE80211_T_HT) &&
  90d2df:	7e574a        	bbci	a5, 30, 90d32d <ath_buf_set_rate+0xa5>
	(bf->bf_flags & HAL_TXDESC_NOACK) == 0) {
	    cix = rt->info[sc->sc_protrix].controlRate;
	    prot_mode = AH_TRUE;
    } else {
	    if (ath_hal_getcapability(ah, HAL_CAP_HT) && (!bf->bf_ismcast))
  90d2e2:	2a121e        	l32i	a10, a1, 120
  90d2e5:	c0b5      	movi.n	a11, 5
  90d2e7:	5bf69d        	call8	90ad5c <ath_hal_getcapability>
  90d2ea:	c8af      	beqz.n	a10, 90d2fd <ath_buf_set_rate+0x75>
  90d2ec:	253221        	l32i	a5, a3, 132
		    flags = HAL_TXDESC_RTSENA;
  90d2ef:	28121c        	l32i	a8, a1, 112
	 rt->info[rix].phy == IEEE80211_T_HT) &&
	(bf->bf_flags & HAL_TXDESC_NOACK) == 0) {
	    cix = rt->info[sc->sc_protrix].controlRate;
	    prot_mode = AH_TRUE;
    } else {
	    if (ath_hal_getcapability(ah, HAL_CAP_HT) && (!bf->bf_ismcast))
  90d2f2:	057540        	extui	a5, a5, 7, 1
		    flags = HAL_TXDESC_RTSENA;
  90d2f5:	c044      	movi.n	a4, 4
  90d2f7:	054838        	moveqz	a8, a4, a5
  90d2fa:	28161c        	s32i	a8, a1, 112
  90d2fd:	d530      	mov.n	a5, a3

	    for (i = 4; i--;) {
  90d2ff:	c044      	movi.n	a4, 4
  90d301:	600021        	j	90d326 <ath_buf_set_rate+0x9e>
  90d304:	255cf4        	addi	a5, a5, -12
		    if (bf->bf_rcs[i].tries) {
  90d307:	275081        	l8ui	a7, a5, 129
  90d30a:	c978      	beqz.n	a7, 90d326 <ath_buf_set_rate+0x9e>
			    cix = rt->info[bf->bf_rcs[i].rix].controlRate;
  90d30c:	044409        	addx2	a4, a4, a4
  90d30f:	03440a        	addx4	a4, a4, a3
  90d312:	244050        	l8ui	a4, a4, 80
  90d315:	04440a        	addx4	a4, a4, a4
  90d318:	06440a        	addx4	a4, a4, a6
  90d31b:	244037        	l8ui	a4, a4, 55
  90d31e:	24161d        	s32i	a4, a1, 116
  90d321:	600006        	j	90d32b <ath_buf_set_rate+0xa3>
  90d324:	0000b0        	excw
	    prot_mode = AH_TRUE;
    } else {
	    if (ath_hal_getcapability(ah, HAL_CAP_HT) && (!bf->bf_ismcast))
		    flags = HAL_TXDESC_RTSENA;

	    for (i = 4; i--;) {
  90d327:	446940        	excw
  90d32a:	d8c0      	mov.n	a8, a12
    const HAL_RATE_TABLE *rt;
    struct ath_tx_desc *ds = bf->bf_desc;
    HAL_11N_RATE_SERIES series[4];
    a_int32_t i, flags;
    a_uint8_t rix, cix, rtsctsrate;
    a_int32_t prot_mode = AH_FALSE;
  90d32c:	70da10        	bge	a13, a0, 90d340 <ath_buf_set_rate+0xb8>
 * @param[in] size  buffer size
 */
static inline void
adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
    __adf_os_mem_set(buf, b, size);
  90d32f:	2b0a70        	movi	a11, 112
  90d332:	5bffd0        	call8	90d274 <__adf_os_mem_set$constprop$13>
	if (bf != NULL) {
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  90d335:	283c30        	addi	a8, a3, 48
  90d338:	d530      	mov.n	a5, a3
  90d33a:	241c10        	addi	a4, a1, 16
  90d33d:	281620        	s32i	a8, a1, 128
    }

    adf_os_mem_set(series, 0, sizeof(HAL_11N_RATE_SERIES) * 4);

    for (i = 0; i < 4; i++) {
	    if (!bf->bf_rcs[i].tries)
  90d340:	285051        	l8ui	a8, a5, 81
  90d343:	6480f9        	beqz	a8, 90d440 <ath_buf_set_rate+0x1b8>
		    continue;

	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
  90d346:	2d5050        	l8ui	a13, a5, 80
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);
  90d349:	2c3221        	l32i	a12, a3, 132
	    if (!bf->bf_rcs[i].tries)
		    continue;

	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
  90d34c:	0dda0a        	addx4	a10, a13, a13
  90d34f:	06aa0a        	addx4	a10, a10, a6
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);
  90d352:	2e0a40        	movi	a14, 64
	    if (!bf->bf_rcs[i].tries)
		    continue;

	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
  90d355:	2ba034        	l8ui	a11, a10, 52
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);
  90d358:	290a00        	movi	a9, 0
	    if (!bf->bf_rcs[i].tries)
		    continue;

	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
  90d35b:	2aac20        	addi	a10, a10, 32
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);
  90d35e:	7ec002        	bnone	a12, a14, 90d364 <ath_buf_set_rate+0xdc>
  90d361:	29a015        	l8ui	a9, a10, 21
	    if (!bf->bf_rcs[i].tries)
		    continue;

	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
  90d364:	0b9902        	or	a9, a9, a11
	if (bf != NULL) {
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  90d367:	2a4cf4        	addi	a10, a4, -12
	    series[i].Rate = rt->info[rix].rateCode |
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);

	    series[i].Tries = bf->bf_rcs[i].tries;
#ifdef MAGPIE_MERLIN
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
  90d36a:	2e5053        	l8ui	a14, a5, 83
	    if (!bf->bf_rcs[i].tries)
		    continue;

	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
  90d36d:	99a0      	s32i.n	a9, a10, 0
	if (bf != NULL) {
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  90d36f:	294cf0        	addi	a9, a4, -16
	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);

	    series[i].Tries = bf->bf_rcs[i].tries;
  90d372:	9890      	s32i.n	a8, a9, 0
#ifdef MAGPIE_MERLIN
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
				   HAL_RATESERIES_RTS_CTS : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
  90d374:	c0a2      	movi.n	a10, 2
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 ) |
  90d376:	c094      	movi.n	a9, 4
	    series[i].Tries = bf->bf_rcs[i].tries;
#ifdef MAGPIE_MERLIN
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
				   HAL_RATESERIES_RTS_CTS : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
  90d378:	0aea01        	and	a10, a14, a10
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 ) |
  90d37b:	09e901        	and	a9, a14, a9
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);

	    series[i].Tries = bf->bf_rcs[i].tries;
#ifdef MAGPIE_MERLIN
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
				   HAL_RATESERIES_RTS_CTS : 0 ) |
  90d37e:	0e4840        	extui	a8, a14, 4, 1
  90d381:	09ab02        	or	a11, a10, a9
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_TX_STBC_FLAG) ?
		     HAL_RATESERIES_STBC: 0);
  90d384:	c2f0      	movi.n	a15, 32
	    series[i].Tries = bf->bf_rcs[i].tries;
#ifdef MAGPIE_MERLIN
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
				   HAL_RATESERIES_RTS_CTS : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
  90d386:	08bb02        	or	a11, a11, a8
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_TX_STBC_FLAG) ?
		     HAL_RATESERIES_STBC: 0);
  90d389:	0fef01        	and	a15, a14, a15
  90d38c:	c088      	movi.n	a8, 8
  90d38e:	c0e0      	movi.n	a14, 0
  90d390:	0fe838        	moveqz	a8, a14, a15
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
				   HAL_RATESERIES_RTS_CTS : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 ) |
  90d393:	08b802        	or	a8, a11, a8
	    series[i].Rate = rt->info[rix].rateCode |
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);

	    series[i].Tries = bf->bf_rcs[i].tries;
#ifdef MAGPIE_MERLIN
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
  90d396:	9840      	s32i.n	a8, a4, 0

static a_uint32_t ath_pkt_duration(struct ath_softc_tgt *sc,
				   a_uint8_t rix, struct ath_tx_buf *bf,
				   a_int32_t width, a_int32_t half_gi)
{
	const HAL_RATE_TABLE *rt = sc->sc_currates;
  90d398:	2b2281        	l32i	a11, a2, 0x204
	a_uint32_t nbits, nsymbits, duration, nsymbols;
	a_uint8_t rc;
	a_int32_t streams;
	a_int32_t pktlen;

	pktlen = bf->bf_isaggr ? bf->bf_al : bf->bf_pktlen;
  90d39b:	7ac705        	bbci	a12, 26, 90d3a4 <ath_buf_set_rate+0x11c>
  90d39e:	2c3127        	l16ui	a12, a3, 78
  90d3a1:	600002        	j	90d3a7 <ath_buf_set_rate+0x11f>
  90d3a4:	2c3122        	l16ui	a12, a3, 68
	rc = rt->info[rix].rateCode;
  90d3a7:	0dd80a        	addx4	a8, a13, a13
  90d3aa:	0b880a        	addx4	a8, a8, a11
  90d3ad:	288034        	l8ui	a8, a8, 52

	if (!IS_HT_RATE(rc))
  90d3b0:	008e32        	sext	a14, a8, 7
  90d3b3:	66e011        	bltz	a14, 90d3c8 <ath_buf_set_rate+0x140>
		return ath_hal_computetxtime(sc->sc_ah, rt, pktlen, rix,
  90d3b6:	282d05        	addmi	a8, a2, 0x500
					     bf->bf_shpream);
  90d3b9:	2e3221        	l32i	a14, a3, 132

	pktlen = bf->bf_isaggr ? bf->bf_al : bf->bf_pktlen;
	rc = rt->info[rix].rateCode;

	if (!IS_HT_RATE(rc))
		return ath_hal_computetxtime(sc->sc_ah, rt, pktlen, rix,
  90d3bc:	8a8b      	l32i.n	a10, a8, 44
  90d3be:	0e6e40        	extui	a14, a14, 6, 1
  90d3c1:	5bf675        	call8	90ad98 <ath_hal_computetxtime>
  90d3c4:	60004d        	j	90d415 <ath_buf_set_rate+0x18d>
  90d3c7:	00c0d1        	excw
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 );
#endif
	    series[i].PktDuration = ath_pkt_duration(sc, rix, bf,
  90d3ca:	c0b0      	movi.n	a11, 0
  90d3cc:	0adb39        	movnez	a11, a13, a10
	if (!IS_HT_RATE(rc))
		return ath_hal_computetxtime(sc->sc_ah, rt, pktlen, rix,
					     bf->bf_shpream);

	nbits = (pktlen << 3) + OFDM_PLCP_BITS;
	nsymbits = bits_per_symbol[HT_RC_2_MCS(rc)][width];
  90d3cf:	080a43        	extui	a10, a8, 0, 4
  90d3d2:	0bab09        	addx2	a11, a10, a11
  90d3d5:	1a6afd        	l32r	a10, 8e7fcc <memset+0x1184>
	nsymbols = (nbits + nsymbits - 1) / nsymbits;
  90d3d8:	281622        	s32i	a8, a1, 136
	if (!IS_HT_RATE(rc))
		return ath_hal_computetxtime(sc->sc_ah, rt, pktlen, rix,
					     bf->bf_shpream);

	nbits = (pktlen << 3) + OFDM_PLCP_BITS;
	nsymbits = bits_per_symbol[HT_RC_2_MCS(rc)][width];
  90d3db:	0abb09        	addx2	a11, a11, a10
  90d3de:	2bb100        	l16ui	a11, a11, 0
	nsymbols = (nbits + nsymbits - 1) / nsymbits;
  90d3e1:	291621        	s32i	a9, a1, 132

	if (!IS_HT_RATE(rc))
		return ath_hal_computetxtime(sc->sc_ah, rt, pktlen, rix,
					     bf->bf_shpream);

	nbits = (pktlen << 3) + OFDM_PLCP_BITS;
  90d3e4:	0bca0b        	addx8	a10, a12, a11
	nsymbits = bits_per_symbol[HT_RC_2_MCS(rc)][width];
	nsymbols = (nbits + nsymbits - 1) / nsymbits;
  90d3e7:	2aac15        	addi	a10, a10, 21
  90d3ea:	5b6598        	call8	8e6a4c <__udivsi3>

	if (!half_gi)
  90d3ed:	291221        	l32i	a9, a1, 132
  90d3f0:	281222        	l32i	a8, a1, 136
  90d3f3:	cc95      	bnez.n	a9, 90d3fc <ath_buf_set_rate+0x174>
		duration = SYMBOL_TIME(nsymbols);
  90d3f5:	0eaa11        	slli	a10, a10, 2
  90d3f8:	600011        	j	90d40d <ath_buf_set_rate+0x185>
  90d3fb:	000aaa        	excw
	else
		duration = SYMBOL_TIME_HALFGI(nsymbols);
  90d3fe:	0b0faa        	excw
  90d401:	11196a        	l32r	a1, 8d39ac <_bss_end+0x3c0a9c>
  90d404:	fe          	.byte 0xfe
  90d405:	b4aa      	addi.n	a10, a10, 4
  90d407:	09aa2a        	muluh	a10, a10, a9
  90d40a:	0a2a14        	srli	a10, a10, 2

	streams = HT_RC_2_STREAMS(rc);
  90d40d:	083843        	extui	a8, a8, 3, 4
	duration += L_STF + L_LTF + L_SIG + HT_SIG + HT_STF + HT_LTF(streams);
  90d410:	b988      	addi.n	a8, a8, 9
  90d412:	0a8a0a        	addx4	a10, a8, a10
#endif
	    series[i].PktDuration = ath_pkt_duration(sc, rix, bf,
				     (bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) != 0,
				     (bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG));

	    series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90d415:	292d16        	addmi	a9, a2, 0x1600
	if (bf != NULL) {
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  90d418:	284cf8        	addi	a8, a4, -8
#endif
	    series[i].PktDuration = ath_pkt_duration(sc, rix, bf,
				     (bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) != 0,
				     (bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG));

	    series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90d41b:	299026        	l8ui	a9, a9, 38
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 );
#endif
	    series[i].PktDuration = ath_pkt_duration(sc, rix, bf,
  90d41e:	9a80      	s32i.n	a10, a8, 0
	if (bf != NULL) {
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  90d420:	284cfc        	addi	a8, a4, -4
#endif
	    series[i].PktDuration = ath_pkt_duration(sc, rix, bf,
				     (bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) != 0,
				     (bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG));

	    series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90d423:	9980      	s32i.n	a9, a8, 0

	    if (prot_mode)
  90d425:	c878      	beqz.n	a7, 90d431 <ath_buf_set_rate+0x1a9>
		    series[i].RateFlags |= HAL_RATESERIES_RTS_CTS;
  90d427:	8940      	l32i.n	a9, a4, 0
  90d429:	c081      	movi.n	a8, 1
  90d42b:	089802        	or	a8, a9, a8
  90d42e:	284600        	s32i	a8, a4, 0

	    if (bf->bf_rcs[i].flags & ATH_RC_DS_FLAG)
  90d431:	285053        	l8ui	a8, a5, 83
  90d434:	7f8708        	bbci	a8, 31, 90d440 <ath_buf_set_rate+0x1b8>
		    series[i].RateFlags |= HAL_RATESERIES_RTS_CTS;
  90d437:	8940      	l32i.n	a9, a4, 0
  90d439:	c081      	movi.n	a8, 1
  90d43b:	089802        	or	a8, a9, a8
  90d43e:	9840      	s32i.n	a8, a4, 0
	    }
    }

    adf_os_mem_set(series, 0, sizeof(HAL_11N_RATE_SERIES) * 4);

    for (i = 0; i < 4; i++) {
  90d440:	281220        	l32i	a8, a1, 128
  90d443:	bc55      	addi.n	a5, a5, 12
  90d445:	244c1c        	addi	a4, a4, 28
  90d448:	785102        	beq	a5, a8, 90d44e <ath_buf_set_rate+0x1c6>
  90d44b:	63fef1        	j	90d340 <ath_buf_set_rate+0xb8>

	    if (bf->bf_rcs[i].flags & ATH_RC_DS_FLAG)
		    series[i].RateFlags |= HAL_RATESERIES_RTS_CTS;
    }

    rtsctsrate = rt->info[cix].rateCode |
  90d44e:	24121d        	l32i	a4, a1, 116
	    (bf->bf_shpream ? rt->info[cix].shortPreamble : 0);
  90d451:	233221        	l32i	a3, a3, 132

	    if (bf->bf_rcs[i].flags & ATH_RC_DS_FLAG)
		    series[i].RateFlags |= HAL_RATESERIES_RTS_CTS;
    }

    rtsctsrate = rt->info[cix].rateCode |
  90d454:	04420a        	addx4	a2, a4, a4
  90d457:	06260a        	addx4	a6, a2, a6
  90d45a:	2c6034        	l8ui	a12, a6, 52
  90d45d:	c020      	movi.n	a2, 0
  90d45f:	266c20        	addi	a6, a6, 32
  90d462:	793702        	bbci	a3, 25, 90d468 <ath_buf_set_rate+0x1e0>
  90d465:	226015        	l8ui	a2, a6, 21
	    (bf->bf_shpream ? rt->info[cix].shortPreamble : 0);

    ah->ah_set11nRateScenario(ds, 1,
  90d468:	28121e        	l32i	a8, a1, 120
  90d46b:	2a121f        	l32i	a10, a1, 124
  90d46e:	238210        	l32i	a3, a8, 64
  90d471:	2f121c        	l32i	a15, a1, 112
  90d474:	c0b1      	movi.n	a11, 1
  90d476:	0c2c02        	or	a12, a2, a12
  90d479:	dd10      	mov.n	a13, a1
  90d47b:	c0e4      	movi.n	a14, 4
  90d47d:	0b3000        	callx8	a3
  90d480:	d10f      	retw.n
	...

0090d484 <ath_dma_map>:

	return duration;
}

static void ath_dma_map(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d484:	6c1004        	entry	a1, 32
 * @return first buffer in queue
 */
static inline adf_nbuf_t 
adf_nbuf_queue_first(adf_nbuf_queue_t *head)
{
    return (__adf_nbuf_queue_first(head));
  90d487:	2a3c14        	addi	a10, a3, 20
  90d48a:	5be611        	call8	906cd0 <__adf_nbuf_queue_first>
  90d48d:	dca0      	mov.n	a12, a10
adf_nbuf_map(adf_os_device_t        osdev, 
             adf_os_dma_map_t       bmap, 
             adf_nbuf_t             buf, 
             adf_os_dma_dir_t       dir)
{
    return __adf_nbuf_map(osdev, bmap, buf, dir);
  90d48f:	8b30      	l32i.n	a11, a3, 0
  90d491:	2a2246        	l32i	a10, a2, 0x118
  90d494:	c0d0      	movi.n	a13, 0
  90d496:	5be579        	call8	906a7c <__adf_nbuf_map>
  90d499:	d10f      	retw.n
	...

0090d49c <ath_buf_toggle>:
}

static struct ath_tx_buf *ath_buf_toggle(struct ath_softc_tgt *sc,
				      struct ath_tx_buf *bf,
				      a_uint8_t retry)
{
  90d49c:	6c1004        	entry	a1, 32
  90d49f:	d520      	mov.n	a5, a2
	struct ath_tx_buf *tmp = NULL;
	adf_nbuf_t buf = NULL;

	adf_os_assert(sc->sc_txbuf_held != NULL);
  90d4a1:	2222dc        	l32i	a2, a2, 0x370
  90d4a4:	cd25      	bnez.n	a2, 90d4bd <ath_buf_toggle+0x21>
  90d4a6:	126915        	l32r	a2, 8e78fc <memset+0xab4>
  90d4a9:	1a6afb        	l32r	a10, 8e8098 <memset+0x1250>
  90d4ac:	222212        	l32i	a2, a2, 72
  90d4af:	1b6aff        	l32r	a11, 8e80ac <memset+0x1264>
  90d4b2:	0b2000        	callx8	a2
  90d4b5:	12697a        	l32r	a2, 8e7aa0 <memset+0xc58>
  90d4b8:	0c0200        	memw
  90d4bb:	8220      	l32i.n	a2, a2, 0

	tmp = sc->sc_txbuf_held;
  90d4bd:	2252dc        	l32i	a2, a5, 0x370

	if (retry) {
  90d4c0:	6440e0        	beqz	a4, 90d5a4 <ath_buf_toggle+0x108>
		ath_dma_unmap(sc, bf);
  90d4c3:	033b02        	or	a11, a3, a3
  90d4c6:	055a02        	or	a10, a5, a5
  90d4c9:	5bfef2        	call8	90d094 <ath_dma_unmap>
		adf_nbuf_queue_init(&tmp->bf_skbhead);
  90d4cc:	262c14        	addi	a6, a2, 20
 * @param[in] head  buf queue head
 */
static inline void
adf_nbuf_queue_init(adf_nbuf_queue_t *head)
{
    __adf_nbuf_queue_init(head);
  90d4cf:	066a02        	or	a10, a6, a6
  90d4d2:	5be5f9        	call8	906cb8 <__adf_nbuf_queue_init>
		buf = adf_nbuf_queue_remove(&bf->bf_skbhead);
  90d4d5:	243c14        	addi	a4, a3, 20
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  90d4d8:	044a02        	or	a10, a4, a4
  90d4db:	5be557        	call8	906a38 <__adf_nbuf_queue_remove>
  90d4de:	d7a0      	mov.n	a7, a10
		adf_os_assert(buf);
  90d4e0:	cda5      	bnez.n	a10, 90d4f9 <ath_buf_toggle+0x5d>
  90d4e2:	186915        	l32r	a8, 8e7938 <memset+0xaf0>
  90d4e5:	1a6afb        	l32r	a10, 8e80d4 <memset+0x128c>
  90d4e8:	288212        	l32i	a8, a8, 72
  90d4eb:	1b6aff        	l32r	a11, 8e80e8 <memset+0x12a0>
  90d4ee:	0b8000        	callx8	a8
  90d4f1:	18697a        	l32r	a8, 8e7adc <memset+0xc94>
  90d4f4:	0c0200        	memw
  90d4f7:	8880      	l32i.n	a8, a8, 0
 * @param[in] buf   buf
 */
static inline void
adf_nbuf_queue_add(adf_nbuf_queue_t *head, adf_nbuf_t buf)
{
    __adf_nbuf_queue_add(head, buf);
  90d4f9:	da60      	mov.n	a10, a6
  90d4fb:	db70      	mov.n	a11, a7
  90d4fd:	5be546        	call8	906a18 <__adf_nbuf_queue_add>
 * @return length of the queue
 */
static inline a_uint32_t
adf_nbuf_queue_len(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_len(head);
  90d500:	da40      	mov.n	a10, a4
  90d502:	5be5f1        	call8	906cc8 <__adf_nbuf_queue_len>
		adf_nbuf_queue_add(&tmp->bf_skbhead, buf);

		adf_os_assert(adf_nbuf_queue_len(&bf->bf_skbhead) == 0);
  90d505:	c9a5      	beqz.n	a10, 90d51e <ath_buf_toggle+0x82>
  90d507:	146915        	l32r	a4, 8e795c <memset+0xb14>
  90d50a:	1a6afb        	l32r	a10, 8e80f8 <memset+0x12b0>
  90d50d:	244212        	l32i	a4, a4, 72
  90d510:	1b6aff        	l32r	a11, 8e810c <memset+0x12c4>
  90d513:	0b4000        	callx8	a4
  90d516:	14697a        	l32r	a4, 8e7b00 <memset+0xcb8>
  90d519:	0c0200        	memw
  90d51c:	8440      	l32i.n	a4, a4, 0

		tmp->bf_next = bf->bf_next;
  90d51e:	843b      	l32i.n	a4, a3, 44
		tmp->bf_endpt = bf->bf_endpt;
		tmp->bf_tidno = bf->bf_tidno;
		tmp->bf_skb = bf->bf_skb;
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
  90d520:	262087        	l8ui	a6, a2, 135
		adf_os_assert(buf);
		adf_nbuf_queue_add(&tmp->bf_skbhead, buf);

		adf_os_assert(adf_nbuf_queue_len(&bf->bf_skbhead) == 0);

		tmp->bf_next = bf->bf_next;
  90d523:	942b      	s32i.n	a4, a2, 44
		tmp->bf_endpt = bf->bf_endpt;
  90d525:	243223        	l32i	a4, a3, 140
		tmp->bf_tidno = bf->bf_tidno;
		tmp->bf_skb = bf->bf_skb;
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
  90d528:	2b3c3c        	addi	a11, a3, 60
		adf_nbuf_queue_add(&tmp->bf_skbhead, buf);

		adf_os_assert(adf_nbuf_queue_len(&bf->bf_skbhead) == 0);

		tmp->bf_next = bf->bf_next;
		tmp->bf_endpt = bf->bf_endpt;
  90d52b:	242623        	s32i	a4, a2, 140
		tmp->bf_tidno = bf->bf_tidno;
  90d52e:	24304d        	l8ui	a4, a3, 77
		tmp->bf_skb = bf->bf_skb;
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
  90d531:	c4cc      	movi.n	a12, 76

		adf_os_assert(adf_nbuf_queue_len(&bf->bf_skbhead) == 0);

		tmp->bf_next = bf->bf_next;
		tmp->bf_endpt = bf->bf_endpt;
		tmp->bf_tidno = bf->bf_tidno;
  90d533:	24244d        	s8i	a4, a2, 77
		tmp->bf_skb = bf->bf_skb;
  90d536:	8438      	l32i.n	a4, a3, 32
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
  90d538:	2a2c3c        	addi	a10, a2, 60
		adf_os_assert(adf_nbuf_queue_len(&bf->bf_skbhead) == 0);

		tmp->bf_next = bf->bf_next;
		tmp->bf_endpt = bf->bf_endpt;
		tmp->bf_tidno = bf->bf_tidno;
		tmp->bf_skb = bf->bf_skb;
  90d53b:	9428      	s32i.n	a4, a2, 32
		tmp->bf_node = bf->bf_node;
  90d53d:	8434      	l32i.n	a4, a3, 16
  90d53f:	242604        	s32i	a4, a2, 16
		tmp->bf_isaggr = bf->bf_isaggr;
  90d542:	273221        	l32i	a7, a3, 132
  90d545:	24fadf        	movi	a4, -33
  90d548:	075740        	extui	a7, a7, 5, 1
  90d54b:	046601        	and	a6, a6, a4
  90d54e:	0b7711        	slli	a7, a7, 5
  90d551:	076602        	or	a6, a6, a7
  90d554:	262487        	s8i	a6, a2, 135
		tmp->bf_flags = bf->bf_flags;
  90d557:	263144        	l16ui	a6, a3, 136
  90d55a:	262544        	s16i	a6, a2, 136
		tmp->bf_state = bf->bf_state;
  90d55d:	5b6581        	call8	8e6b64 <memcpy>
		tmp->bf_retries = bf->bf_retries;
  90d560:	263086        	l8ui	a6, a3, 134
		tmp->bf_comp = bf->bf_comp;
		tmp->bf_nframes = bf->bf_nframes;
		tmp->bf_cookie = bf->bf_cookie;

		bf->bf_isaggr = 0;
		bf->bf_next = NULL;
  90d563:	c080      	movi.n	a8, 0
		tmp->bf_skb = bf->bf_skb;
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
		tmp->bf_retries = bf->bf_retries;
  90d565:	262486        	s8i	a6, a2, 134
		tmp->bf_comp = bf->bf_comp;
  90d568:	863f      	l32i.n	a6, a3, 60
		bf->bf_comp = NULL;

		bf->bf_retries = 0;
		bf->bf_nframes = 0;

		ath_dma_map(sc, tmp);
  90d56a:	da50      	mov.n	a10, a5
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
		tmp->bf_retries = bf->bf_retries;
		tmp->bf_comp = bf->bf_comp;
  90d56c:	962f      	s32i.n	a6, a2, 60
		tmp->bf_nframes = bf->bf_nframes;
  90d56e:	26304c        	l8ui	a6, a3, 76
		bf->bf_comp = NULL;

		bf->bf_retries = 0;
		bf->bf_nframes = 0;

		ath_dma_map(sc, tmp);
  90d571:	db20      	mov.n	a11, a2
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
		tmp->bf_retries = bf->bf_retries;
		tmp->bf_comp = bf->bf_comp;
		tmp->bf_nframes = bf->bf_nframes;
  90d573:	26244c        	s8i	a6, a2, 76
		tmp->bf_cookie = bf->bf_cookie;
  90d576:	263092        	l8ui	a6, a3, 146

		bf->bf_isaggr = 0;
		bf->bf_next = NULL;
  90d579:	983b      	s32i.n	a8, a3, 44
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
		tmp->bf_retries = bf->bf_retries;
		tmp->bf_comp = bf->bf_comp;
		tmp->bf_nframes = bf->bf_nframes;
		tmp->bf_cookie = bf->bf_cookie;
  90d57b:	262492        	s8i	a6, a2, 146

		bf->bf_isaggr = 0;
  90d57e:	263087        	l8ui	a6, a3, 135
		bf->bf_next = NULL;
		bf->bf_skb = NULL;
  90d581:	9838      	s32i.n	a8, a3, 32
		tmp->bf_retries = bf->bf_retries;
		tmp->bf_comp = bf->bf_comp;
		tmp->bf_nframes = bf->bf_nframes;
		tmp->bf_cookie = bf->bf_cookie;

		bf->bf_isaggr = 0;
  90d583:	046401        	and	a4, a6, a4
  90d586:	243487        	s8i	a4, a3, 135
		bf->bf_next = NULL;
		bf->bf_skb = NULL;
		bf->bf_node = NULL;
  90d589:	9834      	s32i.n	a8, a3, 16
		bf->bf_flags = 0;
  90d58b:	283544        	s16i	a8, a3, 136
		bf->bf_comp = NULL;
  90d58e:	28360f        	s32i	a8, a3, 60

		bf->bf_retries = 0;
  90d591:	283486        	s8i	a8, a3, 134
		bf->bf_nframes = 0;
  90d594:	28344c        	s8i	a8, a3, 76

		bf->bf_isaggr = 0;
		bf->bf_next = NULL;
		bf->bf_skb = NULL;
		bf->bf_node = NULL;
		bf->bf_flags = 0;
  90d597:	088402        	or	a4, a8, a8
		bf->bf_comp = NULL;

		bf->bf_retries = 0;
		bf->bf_nframes = 0;

		ath_dma_map(sc, tmp);
  90d59a:	5bffba        	call8	90d484 <ath_dma_map>
		ath_tx_tgt_setds(sc, tmp);
  90d59d:	da50      	mov.n	a10, a5
  90d59f:	db20      	mov.n	a11, a2
  90d5a1:	5bfef6        	call8	90d17c <ath_tx_tgt_setds>
	}

	sc->sc_txbuf_held = bf;
  90d5a4:	2356dc        	s32i	a3, a5, 0x370

	return tmp;
}
  90d5a7:	d10f      	retw.n
  90d5a9:	000000        	ill

0090d5ac <ath_tx_freebuf>:
	bf->bf_txq_add(sc, bf);
}

static void
ath_tx_freebuf(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d5ac:	6c1004        	entry	a1, 32
	a_int32_t i ;
	struct ath_tx_desc *bfd = NULL;
	struct ath_hal *ah = sc->sc_ah;
  90d5af:	242d05        	addmi	a4, a2, 0x500
  90d5b2:	864b      	l32i.n	a6, a4, 44

	for (bfd = bf->bf_desc, i = 0; i < bf->bf_dmamap_info.nsegs; bfd++, i++) {
  90d5b4:	c050      	movi.n	a5, 0
  90d5b6:	843c      	l32i.n	a4, a3, 48
  90d5b8:	270a88        	movi	a7, 136
  90d5bb:	600023        	j	90d5e2 <ath_tx_freebuf+0x36>
  90d5be:	000028        	mull	a0, a0, a0
		ah->ah_clr11nAggr(bfd);
  90d5c1:	6214da        	j	8eea9f <memset+0x7c57>
  90d5c4:	400b80        	excw
  90d5c7:	002862        	excw
		ah->ah_set11nBurstDuration(bfd, 0);
  90d5ca:	15044a        	l32r	a5, 8ce6f4 <_bss_end+0x3bb7e4>
  90d5cd:	022b0a        	addx4	a11, a2, a2
  90d5d0:	000b80        	excw
  90d5d3:	002862        	excw
		ah->ah_set11nVirtualMoreFrag(bfd, 0);
  90d5d6:	16da40        	l32r	a6, 903ed8 <memset+0x1d090>
  90d5d9:	c0b0      	movi.n	a11, 0
  90d5db:	0b8000        	callx8	a8
{
	a_int32_t i ;
	struct ath_tx_desc *bfd = NULL;
	struct ath_hal *ah = sc->sc_ah;

	for (bfd = bf->bf_desc, i = 0; i < bf->bf_dmamap_info.nsegs; bfd++, i++) {
  90d5de:	a744      	add.n	a4, a4, a7
  90d5e0:	b155      	addi.n	a5, a5, 1
  90d5e2:	283201        	l32i	a8, a3, 4
  90d5e5:	7853d7        	bltu	a5, a8, 90d5c0 <ath_tx_freebuf+0x14>
		ah->ah_clr11nAggr(bfd);
		ah->ah_set11nBurstDuration(bfd, 0);
		ah->ah_set11nVirtualMoreFrag(bfd, 0);
	}

	ath_dma_unmap(sc, bf);
  90d5e8:	033b02        	or	a11, a3, a3
  90d5eb:	022a02        	or	a10, a2, a2
  90d5ee:	5bfea9        	call8	90d094 <ath_dma_unmap>

	ath_tgt_skb_free(sc, &bf->bf_skbhead,bf->bf_endpt);
  90d5f1:	2c3223        	l32i	a12, a3, 140
  90d5f4:	2b3c14        	addi	a11, a3, 20
  90d5f7:	022a02        	or	a10, a2, a2
  90d5fa:	5bfeac        	call8	90d0ac <ath_tgt_skb_free>

	bf->bf_skb = NULL;
  90d5fd:	c040      	movi.n	a4, 0
  90d5ff:	9438      	s32i.n	a4, a3, 32
	bf->bf_comp = NULL;
  90d601:	943f      	s32i.n	a4, a3, 60
	bf->bf_node = NULL;
  90d603:	9434      	s32i.n	a4, a3, 16
	bf->bf_next = NULL;
  90d605:	943b      	s32i.n	a4, a3, 44
	bf = ath_buf_toggle(sc, bf, 0);
  90d607:	db30      	mov.n	a11, a3
  90d609:	dc40      	mov.n	a12, a4
  90d60b:	da20      	mov.n	a10, a2
  90d60d:	5bffa3        	call8	90d49c <ath_buf_toggle>
	bf->bf_retries = 0;
	bf->bf_isretried = 0;
  90d610:	26a087        	l8ui	a6, a10, 135
  90d613:	c65f      	movi.n	a5, -17
  90d615:	056501        	and	a5, a6, a5
	bf->bf_skb = NULL;
	bf->bf_comp = NULL;
	bf->bf_node = NULL;
	bf->bf_next = NULL;
	bf = ath_buf_toggle(sc, bf, 0);
	bf->bf_retries = 0;
  90d618:	24a486        	s8i	a4, a10, 134
	bf->bf_isretried = 0;
  90d61b:	25a487        	s8i	a5, a10, 135

	if (bf != NULL)
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
  90d61e:	94a9      	s32i.n	a4, a10, 36
  90d620:	2422f1        	l32i	a4, a2, 0x3c4
  90d623:	23ac24        	addi	a3, a10, 36
  90d626:	94aa      	s32i.n	a4, a10, 40
  90d628:	9a40      	s32i.n	a10, a4, 0
  90d62a:	2326f1        	s32i	a3, a2, 0x3c4
  90d62d:	d10f      	retw.n
	...

0090d630 <ath_buf_comp>:
		ath_free_tx_skb(sc->tgt_htc_handle,endpt,tskb);
	}
}

static void ath_buf_comp(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d630:	6c1004        	entry	a1, 32
	ath_dma_unmap(sc, bf);
  90d633:	022a02        	or	a10, a2, a2
  90d636:	033b02        	or	a11, a3, a3
  90d639:	5bfe96        	call8	90d094 <ath_dma_unmap>
	ath_tgt_skb_free(sc, &bf->bf_skbhead,bf->bf_endpt);
  90d63c:	2c3223        	l32i	a12, a3, 140
  90d63f:	022a02        	or	a10, a2, a2
  90d642:	2b3c14        	addi	a11, a3, 20
  90d645:	5bfe99        	call8	90d0ac <ath_tgt_skb_free>
	bf->bf_skb = NULL;
  90d648:	c040      	movi.n	a4, 0
  90d64a:	9438      	s32i.n	a4, a3, 32
	bf->bf_node = NULL;
  90d64c:	9434      	s32i.n	a4, a3, 16
	bf = ath_buf_toggle(sc, bf, 0);
  90d64e:	da20      	mov.n	a10, a2
  90d650:	033b02        	or	a11, a3, a3
  90d653:	dc40      	mov.n	a12, a4
  90d655:	5bff91        	call8	90d49c <ath_buf_toggle>
	if (bf != NULL) {
  90d658:	74a10e        	beq	a10, a4, 90d66a <ath_buf_comp+0x3a>
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
  90d65b:	2322f1        	l32i	a3, a2, 0x3c4
  90d65e:	94a9      	s32i.n	a4, a10, 36
  90d660:	93aa      	s32i.n	a3, a10, 40
  90d662:	9a30      	s32i.n	a10, a3, 0
  90d664:	2aac24        	addi	a10, a10, 36
  90d667:	2a26f1        	s32i	a10, a2, 0x3c4
  90d66a:	d10f      	retw.n

0090d66c <ath_bar_tx>:
	ath_buf_comp(sc, bf);
}

static void ath_bar_tx(struct ath_softc_tgt *sc,
		       ath_atx_tid_t *tid, struct ath_tx_buf *bf)
{
  90d66c:	6c101a        	entry	a1, 208
  90d66f:	033702        	or	a7, a3, a3
	adf_nbuf_t skb;
	struct ieee80211_frame_bar *bar;
	u_int8_t min_rate;
	struct ath_tx_desc *ds, *ds0;
	struct ath_hal *ah = sc->sc_ah;
  90d672:	232d05        	addmi	a3, a2, 0x500
  90d675:	23320b        	l32i	a3, a3, 44
  90d678:	2b0a70        	movi	a11, 112
  90d67b:	231628        	s32i	a3, a1, 160
	int i = 0;
	adf_nbuf_queue_t skbhead;
	a_uint8_t *anbdata;
	a_uint32_t anblen;

	__stats(sc, tx_bars);
  90d67e:	232278        	l32i	a3, a2, 0x1e0
  90d681:	2a1c20        	addi	a10, a1, 32
  90d684:	b133      	addi.n	a3, a3, 1
  90d686:	232678        	s32i	a3, a2, 0x1e0
  90d689:	5bfefa        	call8	90d274 <__adf_os_mem_set$constprop$13>

	adf_os_mem_set(&series, 0, sizeof(series));

	ath_aggr_pause_tid(sc, tid);

	skb = adf_nbuf_queue_remove(&bf->bf_skbhead);
  90d68c:	254c14        	addi	a5, a4, 20
}

static inline void
ath_aggr_pause_tid(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
	tid->paused =1;
  90d68f:	c031      	movi.n	a3, 1
  90d691:	237434        	s8i	a3, a7, 52
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  90d694:	da50      	mov.n	a10, a5
  90d696:	5be4e8        	call8	906a38 <__adf_nbuf_queue_remove>
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90d699:	261c20        	addi	a6, a1, 32
  90d69c:	2c6c70        	addi	a12, a6, 112
  90d69f:	2b6c74        	addi	a11, a6, 116
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  90d6a2:	0aa302        	or	a3, a10, a10
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90d6a5:	5be57e        	call8	906ca0 <__adf_nbuf_peek_header>
 * @return none
 */
static inline void
adf_nbuf_trim_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    __adf_nbuf_trim_tail(buf, size);
  90d6a8:	2b1224        	l32i	a11, a1, 144
  90d6ab:	da30      	mov.n	a10, a3
  90d6ad:	5be551        	call8	906bf4 <__adf_nbuf_trim_tail>
	adf_nbuf_trim_tail(skb, anblen);
	bar = (struct ieee80211_frame_bar *) anbdata;

	min_rate =  0x0b;

	ath_dma_unmap(sc, bf);
  90d6b0:	da20      	mov.n	a10, a2
  90d6b2:	db40      	mov.n	a11, a4
	ath_aggr_pause_tid(sc, tid);

	skb = adf_nbuf_queue_remove(&bf->bf_skbhead);
	adf_nbuf_peek_header(skb, &anbdata, &anblen);
	adf_nbuf_trim_tail(skb, anblen);
	bar = (struct ieee80211_frame_bar *) anbdata;
  90d6b4:	261225        	l32i	a6, a1, 148

	min_rate =  0x0b;

	ath_dma_unmap(sc, bf);
  90d6b7:	5bfe77        	call8	90d094 <ath_dma_unmap>
 * @param[in] buf   buf
 */
static inline void
adf_nbuf_queue_add(adf_nbuf_queue_t *head, adf_nbuf_t buf)
{
    __adf_nbuf_queue_add(head, buf);
  90d6ba:	da50      	mov.n	a10, a5
  90d6bc:	033b02        	or	a11, a3, a3
	adf_nbuf_queue_add(&bf->bf_skbhead, skb);

	bar->i_fc[1] = IEEE80211_FC1_DIR_NODS;
  90d6bf:	c050      	movi.n	a5, 0
  90d6c1:	5be4d5        	call8	906a18 <__adf_nbuf_queue_add>
  90d6c4:	256401        	s8i	a5, a6, 1
	bar->i_fc[0] = IEEE80211_FC0_VERSION_0 |
  90d6c7:	25fa84        	movi	a5, -124
  90d6ca:	256400        	s8i	a5, a6, 0
		IEEE80211_FC0_TYPE_CTL |
		IEEE80211_FC0_SUBTYPE_BAR;
	bar->i_ctl = tid->tidno << IEEE80211_BAR_CTL_TID_S |
  90d6cd:	8970      	l32i.n	a9, a7, 0
  90d6cf:	c054      	movi.n	a5, 4
  90d6d1:	049911        	slli	a9, a9, 12
  90d6d4:	059902        	or	a9, a9, a5
  90d6d7:	09094f        	extui	a9, a9, 0, 16
  90d6da:	098a14        	srli	a10, a9, 8
  90d6dd:	2a6410        	s8i	a10, a6, 16
  90d6e0:	296411        	s8i	a9, a6, 17
		IEEE80211_BAR_CTL_COMBA;
	bar->i_seq = adf_os_cpu_to_le16(tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT);
  90d6e3:	297102        	l16ui	a9, a7, 4

	bar->i_fc[1] = IEEE80211_FC1_DIR_NODS;
	bar->i_fc[0] = IEEE80211_FC0_VERSION_0 |
		IEEE80211_FC0_TYPE_CTL |
		IEEE80211_FC0_SUBTYPE_BAR;
	bar->i_ctl = tid->tidno << IEEE80211_BAR_CTL_TID_S |
  90d6e6:	c050      	movi.n	a5, 0
		IEEE80211_BAR_CTL_COMBA;
	bar->i_seq = adf_os_cpu_to_le16(tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT);
  90d6e8:	0c9911        	slli	a9, a9, 4
  90d6eb:	09094f        	extui	a9, a9, 0, 16

#undef adf_os_cpu_to_le16

static a_uint16_t adf_os_cpu_to_le16(a_uint16_t x)
{
	return ((((x) & 0xff00) >> 8) |   (((x) & 0x00ff) << 8));
  90d6ee:	089b11        	slli	a11, a9, 8
  90d6f1:	098a14        	srli	a10, a9, 8
  90d6f4:	0aba02        	or	a10, a11, a10
	bar->i_fc[0] = IEEE80211_FC0_VERSION_0 |
		IEEE80211_FC0_TYPE_CTL |
		IEEE80211_FC0_SUBTYPE_BAR;
	bar->i_ctl = tid->tidno << IEEE80211_BAR_CTL_TID_S |
		IEEE80211_BAR_CTL_COMBA;
	bar->i_seq = adf_os_cpu_to_le16(tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT);
  90d6f7:	0a0a4f        	extui	a10, a10, 0, 16
  90d6fa:	0a8b14        	srli	a11, a10, 8
  90d6fd:	2b6412        	s8i	a11, a6, 18
  90d700:	2a6413        	s8i	a10, a6, 19

	bf->bf_seqno = tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT;
  90d703:	294523        	s16i	a9, a4, 70
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  90d706:	da30      	mov.n	a10, a3
  90d708:	c1b4      	movi.n	a11, 20
  90d70a:	5be549        	call8	906c30 <__adf_nbuf_put_tail>

	adf_nbuf_put_tail(skb, sizeof(struct ieee80211_frame_bar));

	bf->bf_comp = ath_bar_tx_comp;
  90d70d:	166b00        	l32r	a6, 8e8310 <memset+0x14c8>
	bf->bf_tidno = tid->tidno;
	bf->bf_node = &tid->an->ni;
	ath_dma_map(sc, bf);
  90d710:	da20      	mov.n	a10, a2

	bf->bf_seqno = tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT;

	adf_nbuf_put_tail(skb, sizeof(struct ieee80211_frame_bar));

	bf->bf_comp = ath_bar_tx_comp;
  90d712:	964f      	s32i.n	a6, a4, 60
	bf->bf_tidno = tid->tidno;
  90d714:	8670      	l32i.n	a6, a7, 0
	bf->bf_node = &tid->an->ni;
	ath_dma_map(sc, bf);
  90d716:	db40      	mov.n	a11, a4
	bf->bf_seqno = tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT;

	adf_nbuf_put_tail(skb, sizeof(struct ieee80211_frame_bar));

	bf->bf_comp = ath_bar_tx_comp;
	bf->bf_tidno = tid->tidno;
  90d718:	26444d        	s8i	a6, a4, 77
	bf->bf_node = &tid->an->ni;
  90d71b:	867e      	l32i.n	a6, a7, 56
  90d71d:	9644      	s32i.n	a6, a4, 16
	ath_dma_map(sc, bf);
  90d71f:	5bff59        	call8	90d484 <ath_dma_map>
 * @param[out] sg   map info
 */
static inline void
adf_nbuf_dmamap_info(adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
    __adf_nbuf_dmamap_info(bmap, sg);
  90d722:	8a40      	l32i.n	a10, a4, 0
  90d724:	b44b      	addi.n	a11, a4, 4
  90d726:	5be4dd        	call8	906a9c <__adf_nbuf_dmamap_info>
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	ds = bf->bf_desc;
	ah->ah_setupTxDesc(ds
  90d729:	291228        	l32i	a9, a1, 160
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  90d72c:	da30      	mov.n	a10, a3
  90d72e:	289217        	l32i	a8, a9, 92
	bf->bf_tidno = tid->tidno;
	bf->bf_node = &tid->an->ni;
	ath_dma_map(sc, bf);
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	ds = bf->bf_desc;
  90d731:	864c      	l32i.n	a6, a4, 48
  90d733:	281629        	s32i	a8, a1, 164
  90d736:	5be552        	call8	906c80 <__adf_nbuf_len>
	ah->ah_setupTxDesc(ds
  90d739:	234049        	l8ui	a3, a4, 73
  90d73c:	c0fb      	movi.n	a15, 11
  90d73e:	9311      	s32i.n	a3, a1, 4
  90d740:	281229        	l32i	a8, a1, 164
  90d743:	c131      	movi.n	a3, 17
  90d745:	b4ab      	addi.n	a11, a10, 4
  90d747:	9312      	s32i.n	a3, a1, 8
  90d749:	da60      	mov.n	a10, a6
  90d74b:	9f10      	s32i.n	a15, a1, 0
  90d74d:	9513      	s32i.n	a5, a1, 12
  90d74f:	9514      	s32i.n	a5, a1, 16
  90d751:	dc50      	mov.n	a12, a5
  90d753:	055d02        	or	a13, a5, a5
  90d756:	2e0a3c        	movi	a14, 60
  90d759:	0b8000        	callx8	a8
			    , HAL_TXDESC_INTREQ
			    | HAL_TXDESC_CLRDMASK
			    , 0, 0);

	skbhead = bf->bf_skbhead;
	bf->bf_isaggr = 0;
  90d75c:	284087        	l8ui	a8, a4, 135
  90d75f:	23fadf        	movi	a3, -33
  90d762:	038301        	and	a3, a8, a3
  90d765:	234487        	s8i	a3, a4, 135
	bf->bf_next = NULL;
  90d768:	954b      	s32i.n	a5, a4, 44

	for (ds0 = ds, i=0; i < bf->bf_dmamap_info.nsegs; ds0++, i++) {
  90d76a:	d360      	mov.n	a3, a6
  90d76c:	260a88        	movi	a6, 136
  90d76f:	600011        	j	90d784 <ath_bar_tx+0x118>
  90d772:	000000        	ill
		ah->ah_clr11nAggr(ds0);
  90d775:	291228        	l32i	a9, a1, 160
  90d778:	da30      	mov.n	a10, a3
  90d77a:	289214        	l32i	a8, a9, 80

	skbhead = bf->bf_skbhead;
	bf->bf_isaggr = 0;
	bf->bf_next = NULL;

	for (ds0 = ds, i=0; i < bf->bf_dmamap_info.nsegs; ds0++, i++) {
  90d77d:	a633      	add.n	a3, a3, a6
		ah->ah_clr11nAggr(ds0);
  90d77f:	0b8000        	callx8	a8

	skbhead = bf->bf_skbhead;
	bf->bf_isaggr = 0;
	bf->bf_next = NULL;

	for (ds0 = ds, i=0; i < bf->bf_dmamap_info.nsegs; ds0++, i++) {
  90d782:	b155      	addi.n	a5, a5, 1
  90d784:	8841      	l32i.n	a8, a4, 4
  90d786:	7853eb        	bltu	a5, a8, 90d775 <ath_bar_tx+0x109>
		ah->ah_clr11nAggr(ds0);
	}

	ath_filltxdesc(sc, bf);
  90d789:	da20      	mov.n	a10, a2
  90d78b:	db40      	mov.n	a11, a4
  90d78d:	5bfe51        	call8	90d0d4 <ath_filltxdesc>

	for (i = 0 ; i < 4; i++) {
		series[i].Tries = ATH_TXMAXTRY;
		series[i].Rate = min_rate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90d790:	232d16        	addmi	a3, a2, 0x1600
  90d793:	281c20        	addi	a8, a1, 32
  90d796:	263026        	l8ui	a6, a3, 38

	bf->bf_comp = NULL;
	ath_buf_comp(sc, bf);
}

static void ath_bar_tx(struct ath_softc_tgt *sc,
  90d799:	258c70        	addi	a5, a8, 112
	}

	ath_filltxdesc(sc, bf);

	for (i = 0 ; i < 4; i++) {
		series[i].Tries = ATH_TXMAXTRY;
  90d79c:	c03b      	movi.n	a3, 11
  90d79e:	9380      	s32i.n	a3, a8, 0
		series[i].Rate = min_rate;
  90d7a0:	9381      	s32i.n	a3, a8, 4
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90d7a2:	9683      	s32i.n	a6, a8, 12
  90d7a4:	288c1c        	addi	a8, a8, 28
		ah->ah_clr11nAggr(ds0);
	}

	ath_filltxdesc(sc, bf);

	for (i = 0 ; i < 4; i++) {
  90d7a7:	7589f3        	bne	a8, a5, 90d79e <ath_bar_tx+0x132>
		series[i].Tries = ATH_TXMAXTRY;
		series[i].Rate = min_rate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
	}

	ah->ah_set11nRateScenario(bf->bf_desc, 0, 0, series, 4, 4);
  90d7aa:	251228        	l32i	a5, a1, 160
  90d7ad:	8a4c      	l32i.n	a10, a4, 48
  90d7af:	c0b0      	movi.n	a11, 0
  90d7b1:	c0e4      	movi.n	a14, 4
  90d7b3:	235210        	l32i	a3, a5, 64
  90d7b6:	dcb0      	mov.n	a12, a11
  90d7b8:	2d1c20        	addi	a13, a1, 32
  90d7bb:	0eef02        	or	a15, a14, a14
  90d7be:	0b3000        	callx8	a3
	ath_tgt_txq_add_ucast(sc, bf);
  90d7c1:	da20      	mov.n	a10, a2
  90d7c3:	db40      	mov.n	a11, a4
  90d7c5:	5bfddc        	call8	90cf38 <ath_tgt_txq_add_ucast>
  90d7c8:	d10f      	retw.n
	...

0090d7cc <ATH_SKB_2_WH>:
int ath_tgt_tx_add_to_aggr(struct ath_softc_tgt *sc,
			   struct ath_buf *bf,int datatype,
			   ath_atx_tid_t *tid, int is_burst);

struct ieee80211_frame *ATH_SKB_2_WH(adf_nbuf_t skb)
{
  90d7cc:	6c1006        	entry	a1, 48
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90d7cf:	da20      	mov.n	a10, a2
  90d7d1:	b41b      	addi.n	a11, a1, 4
  90d7d3:	dc10      	mov.n	a12, a1
  90d7d5:	5be532        	call8	906ca0 <__adf_nbuf_peek_header>
	a_uint32_t anblen;

	adf_nbuf_peek_header(skb, &anbdata, &anblen);

	return((struct ieee80211_frame *)anbdata);
}
  90d7d8:	8211      	l32i.n	a2, a1, 4
  90d7da:	d10f      	retw.n

0090d7dc <ath_tx_set_retry>:
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
	}
}

static void ath_tx_set_retry(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d7dc:	6c1004        	entry	a1, 32
	struct ieee80211_frame *wh;

	__stats(sc, txaggr_retries);
  90d7df:	282260        	l32i	a8, a2, 0x180

	bf->bf_isretried = 1;
	bf->bf_retries ++;
	wh = ATH_SKB_2_WH(bf->bf_skb);
  90d7e2:	8a38      	l32i.n	a10, a3, 32

static void ath_tx_set_retry(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ieee80211_frame *wh;

	__stats(sc, txaggr_retries);
  90d7e4:	b188      	addi.n	a8, a8, 1
  90d7e6:	282660        	s32i	a8, a2, 0x180

	bf->bf_isretried = 1;
  90d7e9:	283087        	l8ui	a8, a3, 135
  90d7ec:	c120      	movi.n	a2, 16
  90d7ee:	028202        	or	a2, a8, a2
  90d7f1:	223487        	s8i	a2, a3, 135
	bf->bf_retries ++;
  90d7f4:	223086        	l8ui	a2, a3, 134
  90d7f7:	222c01        	addi	a2, a2, 1
  90d7fa:	223486        	s8i	a2, a3, 134
	wh = ATH_SKB_2_WH(bf->bf_skb);
  90d7fd:	5bfff3        	call8	90d7cc <ATH_SKB_2_WH>
	wh->i_fc[1] |= IEEE80211_FC1_RETRY;
  90d800:	23a001        	l8ui	a3, a10, 1
  90d803:	c028      	movi.n	a2, 8
  90d805:	023202        	or	a2, a3, a2
  90d808:	22a401        	s8i	a2, a10, 1
  90d80b:	d10f      	retw.n
  90d80d:	000000        	ill

0090d810 <owl_tgt_node_init>:
		ath_aggr_resume_tid(sc, tid);
	}
}

void owl_tgt_node_init(struct ath_node_target * an)
{
  90d810:	6c1004        	entry	a1, 32
	struct ath_atx_tid *tid;
	int tidno;

	for (tidno = 0, tid = &an->tid[tidno]; tidno < WME_NUM_TID;tidno++, tid++) {
  90d813:	232c24        	addi	a3, a2, 36
  90d816:	240a00        	movi	a4, 0
		tid->tidno = tidno;
		tid->an = an;

		if ( tid->flag & TID_CLEANUP_INPROGRES ) {
			tid->flag |= TID_REINITIALIZE;
  90d819:	250a04        	movi	a5, 4

	for (tidno = 0, tid = &an->tid[tidno]; tidno < WME_NUM_TID;tidno++, tid++) {
		tid->tidno = tidno;
		tid->an = an;

		if ( tid->flag & TID_CLEANUP_INPROGRES ) {
  90d81c:	283036        	l8ui	a8, a3, 54
{
	struct ath_atx_tid *tid;
	int tidno;

	for (tidno = 0, tid = &an->tid[tidno]; tidno < WME_NUM_TID;tidno++, tid++) {
		tid->tidno = tidno;
  90d81f:	9430      	s32i.n	a4, a3, 0
		tid->an = an;
  90d821:	923e      	s32i.n	a2, a3, 56

		if ( tid->flag & TID_CLEANUP_INPROGRES ) {
  90d823:	7f871d        	bbci	a8, 31, 90d844 <owl_tgt_node_init+0x34>
			tid->flag |= TID_REINITIALIZE;
  90d826:	058802        	or	a8, a8, a5
  90d829:	283436        	s8i	a8, a3, 54
			adf_os_print("tid[%p]->incomp is not 0: %d\n",
  90d82c:	186915        	l32r	a8, 8e7c80 <memset+0xe38>
  90d82f:	2c3037        	l8ui	a12, a3, 55
  90d832:	288212        	l32i	a8, a8, 72
  90d835:	1a6b01        	l32r	a10, 8e843c <memset+0x15f4>
  90d838:	db30      	mov.n	a11, a3
  90d83a:	00cc32        	sext	a12, a12, 7
  90d83d:	0b8000        	callx8	a8
  90d840:	600005        	j	90d849 <owl_tgt_node_init+0x39>
  90d843:	00da30        	excw
				     tid, tid->incomp);
		} else {
			owl_tgt_tid_init(tid);
  90d846:	5bfda9        	call8	90ceec <owl_tgt_tid_init>
void owl_tgt_node_init(struct ath_node_target * an)
{
	struct ath_atx_tid *tid;
	int tidno;

	for (tidno = 0, tid = &an->tid[tidno]; tidno < WME_NUM_TID;tidno++, tid++) {
  90d849:	b144      	addi.n	a4, a4, 1
  90d84b:	233c3c        	addi	a3, a3, 60
  90d84e:	6948ca        	bnei	a4, 8, 90d81c <owl_tgt_node_init+0xc>
				     tid, tid->incomp);
		} else {
			owl_tgt_tid_init(tid);
		}
	}
}
  90d851:	d10f      	retw.n
	...

0090d854 <ath_tx_status_clear>:

void ath_tx_status_clear(struct ath_softc_tgt *sc)
{
  90d854:	6c1004        	entry	a1, 32
	int i;

	for (i = 0; i < 2; i++) {
		sc->tx_status[i].cnt = 0;
  90d857:	222d16        	addmi	a2, a2, 0x1600
  90d85a:	c080      	movi.n	a8, 0
  90d85c:	282438        	s8i	a8, a2, 56
  90d85f:	28245d        	s8i	a8, a2, 93
  90d862:	d10f      	retw.n

0090d864 <ath_tx_status_update>:

	return txs;
}

void ath_tx_status_update(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d864:	6c1004        	entry	a1, 32
	struct ath_tx_desc *ds = bf->bf_lastds;
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  90d867:	282249        	l32i	a8, a2, 0x124
  90d86a:	146abd        	l32r	a4, 8e8360 <memset+0x1518>

	return txs;
}

void ath_tx_status_update(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90d86d:	da20      	mov.n	a10, a2
	struct ath_tx_desc *ds = bf->bf_lastds;
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  90d86f:	048401        	and	a4, a8, a4
	return txs;
}

void ath_tx_status_update(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds = bf->bf_lastds;
  90d872:	8c3e      	l32i.n	a12, a3, 56
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  90d874:	654075        	bnez	a4, 90d8ed <ath_tx_status_update+0x89>
{
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
  90d877:	292d16        	addmi	a9, a2, 0x1600
  90d87a:	2b9038        	l8ui	a11, a9, 56
  90d87d:	280a0b        	movi	a8, 11
  90d880:	7b8b08        	bgeu	a8, a11, 90d88c <ath_tx_status_update+0x28>
  90d883:	24905d        	l8ui	a4, a9, 93
  90d886:	748363        	bltu	a8, a4, 90d8ed <ath_tx_status_update+0x89>
static WMI_TXSTATUS_EVENT *ath_tx_status_get(struct ath_softc_tgt *sc)
{
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
  90d889:	240a01        	movi	a4, 1
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  90d88c:	04480b        	addx8	a8, a4, a4
  90d88f:	04840a        	addx4	a4, a8, a4
  90d892:	186b02        	l32r	a8, 8e849c <memset+0x1654>

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  90d895:	2b3092        	l8ui	a11, a3, 146
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  90d898:	a844      	add.n	a4, a4, a8
  90d89a:	a4a4      	add.n	a4, a10, a4

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  90d89c:	284008        	l8ui	a8, a4, 8
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  90d89f:	b84d      	addi.n	a13, a4, 8

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  90d8a1:	088909        	addx2	a9, a8, a8
  90d8a4:	a9d9      	add.n	a9, a13, a9
  90d8a6:	2b9401        	s8i	a11, a9, 1
	txs->txstatus[txs->cnt].ts_rate = SM(bf->bf_endpt, ATH9K_HTC_TXSTAT_EPID);
  90d8a9:	2b3223        	l32i	a11, a3, 140
  90d8ac:	0cbb11        	slli	a11, a11, 4
  90d8af:	2b9402        	s8i	a11, a9, 2

	if (ds->ds_txstat.ts_status & HAL_TXERR_FILT)
  90d8b2:	2ec066        	l8ui	a14, a12, 102
  90d8b5:	2b0a02        	movi	a11, 2
  90d8b8:	7be008        	bnone	a14, a11, 90d8c4 <ath_tx_status_update+0x60>
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_FILT;
  90d8bb:	2e9003        	l8ui	a14, a9, 3
  90d8be:	0beb02        	or	a11, a14, a11
  90d8c1:	2b9403        	s8i	a11, a9, 3

	if (!(ds->ds_txstat.ts_status & HAL_TXERR_XRETRY) &&
  90d8c4:	2bc066        	l8ui	a11, a12, 102
  90d8c7:	c197      	movi.n	a9, 23
  90d8c9:	79b80f        	bany	a11, a9, 90d8dc <ath_tx_status_update+0x78>
	    !(ds->ds_txstat.ts_status & HAL_TXERR_FIFO) &&
	    !(ds->ds_txstat.ts_status & HAL_TXERR_TIMER_EXPIRED) &&
	    !(ds->ds_txstat.ts_status & HAL_TXERR_FILT))
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_ACK;
  90d8cc:	088809        	addx2	a8, a8, a8
  90d8cf:	a8d8      	add.n	a8, a13, a8
  90d8d1:	2b8003        	l8ui	a11, a8, 3
  90d8d4:	c091      	movi.n	a9, 1
  90d8d6:	09b902        	or	a9, a11, a9
  90d8d9:	298403        	s8i	a9, a8, 3

	ath_tx_status_update_rate(sc, bf->bf_rcs, ds->ds_txstat.ts_rate, txs);
  90d8dc:	2cc068        	l8ui	a12, a12, 104
  90d8df:	2b3c50        	addi	a11, a3, 80
  90d8e2:	5bfd0a        	call8	90cd0c <ath_tx_status_update_rate>

	txs->cnt++;
  90d8e5:	234008        	l8ui	a3, a4, 8
  90d8e8:	b133      	addi.n	a3, a3, 1
  90d8ea:	234408        	s8i	a3, a4, 8
  90d8ed:	d10f      	retw.n
	...

0090d8f0 <ath_tx_status_update_aggr>:
}

void ath_tx_status_update_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
			       struct ath_tx_desc *ds, struct ath_rc_series rcs[],
			       int txok)
{
  90d8f0:	6c1004        	entry	a1, 32
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  90d8f3:	282249        	l32i	a8, a2, 0x124
  90d8f6:	176abd        	l32r	a7, 8e83ec <memset+0x15a4>
}

void ath_tx_status_update_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
			       struct ath_tx_desc *ds, struct ath_rc_series rcs[],
			       int txok)
{
  90d8f9:	da20      	mov.n	a10, a2
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  90d8fb:	078701        	and	a7, a8, a7
}

void ath_tx_status_update_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
			       struct ath_tx_desc *ds, struct ath_rc_series rcs[],
			       int txok)
{
  90d8fe:	db50      	mov.n	a11, a5
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  90d900:	657058        	bnez	a7, 90d95c <ath_tx_status_update_aggr+0x6c>
{
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
  90d903:	292d16        	addmi	a9, a2, 0x1600
  90d906:	2c9038        	l8ui	a12, a9, 56
  90d909:	280a0b        	movi	a8, 11
  90d90c:	7c8b08        	bgeu	a8, a12, 90d918 <ath_tx_status_update_aggr+0x28>
  90d90f:	27905d        	l8ui	a7, a9, 93
  90d912:	778346        	bltu	a8, a7, 90d95c <ath_tx_status_update_aggr+0x6c>
static WMI_TXSTATUS_EVENT *ath_tx_status_get(struct ath_softc_tgt *sc)
{
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
  90d915:	270a01        	movi	a7, 1
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  90d918:	07780b        	addx8	a8, a7, a7
  90d91b:	07870a        	addx4	a7, a8, a7
  90d91e:	186b02        	l32r	a8, 8e8528 <memset+0x16e0>

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  90d921:	293092        	l8ui	a9, a3, 146
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  90d924:	a877      	add.n	a7, a7, a8
  90d926:	a7a7      	add.n	a7, a10, a7

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  90d928:	287008        	l8ui	a8, a7, 8
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  90d92b:	b87d      	addi.n	a13, a7, 8

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  90d92d:	088809        	addx2	a8, a8, a8
  90d930:	a8d8      	add.n	a8, a13, a8
  90d932:	298401        	s8i	a9, a8, 1
	txs->txstatus[txs->cnt].ts_rate = SM(bf->bf_endpt, ATH9K_HTC_TXSTAT_EPID);
  90d935:	233223        	l32i	a3, a3, 140
  90d938:	0c3311        	slli	a3, a3, 4
  90d93b:	238402        	s8i	a3, a8, 2

	if (txok)
  90d93e:	c86a      	beqz.n	a6, 90d94c <ath_tx_status_update_aggr+0x5c>
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_ACK;
  90d940:	298003        	l8ui	a9, a8, 3
  90d943:	230a01        	movi	a3, 1
  90d946:	039302        	or	a3, a9, a3
  90d949:	238403        	s8i	a3, a8, 3

	if (rcs)
  90d94c:	c8b4      	beqz.n	a11, 90d954 <ath_tx_status_update_aggr+0x64>
		ath_tx_status_update_rate(sc, rcs, ds->ds_txstat.ts_rate, txs);
  90d94e:	2c4068        	l8ui	a12, a4, 104
  90d951:	5bfcee        	call8	90cd0c <ath_tx_status_update_rate>

	txs->cnt++;
  90d954:	237008        	l8ui	a3, a7, 8
  90d957:	b133      	addi.n	a3, a3, 1
  90d959:	237408        	s8i	a3, a7, 8
  90d95c:	d10f      	retw.n
	...

0090d960 <ath_tx_retry_subframe>:
}

static void
ath_tx_retry_subframe(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
		      ath_tx_bufhead *bf_q, struct ath_tx_buf **bar)
{
  90d960:	6c1006        	entry	a1, 48
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
	int i = 0;

	__stats(sc, txaggr_compretries);
  90d963:	262263        	l32i	a6, a2, 0x18c
}

static void
ath_tx_retry_subframe(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
		      ath_tx_bufhead *bf_q, struct ath_tx_buf **bar)
{
  90d966:	d850      	mov.n	a8, a5
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
	int i = 0;

	__stats(sc, txaggr_compretries);
  90d968:	b166      	addi.n	a6, a6, 1
{

	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
  90d96a:	252d05        	addmi	a5, a2, 0x500
static void
ath_tx_retry_subframe(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
		      ath_tx_bufhead *bf_q, struct ath_tx_buf **bar)
{

	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  90d96d:	8c34      	l32i.n	a12, a3, 16
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90d96f:	29304d        	l8ui	a9, a3, 77
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
  90d972:	855b      	l32i.n	a5, a5, 44
	int i = 0;

	__stats(sc, txaggr_compretries);
  90d974:	262663        	s32i	a6, a2, 0x18c

	for(ds = bf->bf_desc, i = 0; i < bf->bf_dmamap_info.nsegs; ds++, i++) {
  90d977:	c070      	movi.n	a7, 0
  90d979:	863c      	l32i.n	a6, a3, 48
  90d97b:	2d0a88        	movi	a13, 136
  90d97e:	600030        	j	90d9b2 <ath_tx_retry_subframe+0x52>
		ah->ah_clr11nAggr(ds);
  90d981:	2b5214        	l32i	a11, a5, 80
  90d984:	da60      	mov.n	a10, a6
  90d986:	9813      	s32i.n	a8, a1, 12
  90d988:	9911      	s32i.n	a9, a1, 4
  90d98a:	9c10      	s32i.n	a12, a1, 0
  90d98c:	9d12      	s32i.n	a13, a1, 8
  90d98e:	0bb000        	callx8	a11
		ah->ah_set11nBurstDuration(ds, 0);
  90d991:	2e5215        	l32i	a14, a5, 84
  90d994:	066a02        	or	a10, a6, a6
  90d997:	c0b0      	movi.n	a11, 0
  90d999:	0be000        	callx8	a14
		ah->ah_set11nVirtualMoreFrag(ds, 0);
  90d99c:	2e5216        	l32i	a14, a5, 88
  90d99f:	da60      	mov.n	a10, a6
  90d9a1:	c0b0      	movi.n	a11, 0
  90d9a3:	0be000        	callx8	a14
	struct ath_hal *ah = sc->sc_ah;
	int i = 0;

	__stats(sc, txaggr_compretries);

	for(ds = bf->bf_desc, i = 0; i < bf->bf_dmamap_info.nsegs; ds++, i++) {
  90d9a6:	8d12      	l32i.n	a13, a1, 8
  90d9a8:	8c10      	l32i.n	a12, a1, 0
  90d9aa:	8911      	l32i.n	a9, a1, 4
  90d9ac:	8813      	l32i.n	a8, a1, 12
  90d9ae:	ad66      	add.n	a6, a6, a13
  90d9b0:	b177      	addi.n	a7, a7, 1
  90d9b2:	8b31      	l32i.n	a11, a3, 4
  90d9b4:	7b73c9        	bltu	a7, a11, 90d981 <ath_tx_retry_subframe+0x21>
		ah->ah_clr11nAggr(ds);
		ah->ah_set11nBurstDuration(ds, 0);
		ah->ah_set11nVirtualMoreFrag(ds, 0);
	}

	if (bf->bf_retries >= OWLMAX_RETRIES) {
  90d9b7:	253086        	l8ui	a5, a3, 134
  90d9ba:	c069      	movi.n	a6, 9
  90d9bc:	756b40        	bgeu	a6, a5, 90da00 <ath_tx_retry_subframe+0xa0>
		__stats(sc, txaggr_xretries);
  90d9bf:	242274        	l32i	a4, a2, 0x1d0
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90d9c2:	2b3123        	l16ui	a11, a3, 70
		ah->ah_set11nBurstDuration(ds, 0);
		ah->ah_set11nVirtualMoreFrag(ds, 0);
	}

	if (bf->bf_retries >= OWLMAX_RETRIES) {
		__stats(sc, txaggr_xretries);
  90d9c5:	b144      	addi.n	a4, a4, 1
  90d9c7:	242674        	s32i	a4, a2, 0x1d0
ath_tx_retry_subframe(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
		      ath_tx_bufhead *bf_q, struct ath_tx_buf **bar)
{

	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90d9ca:	0c9411        	slli	a4, a9, 4
  90d9cd:	09490c        	sub	a9, a4, a9
  90d9d0:	0c9a0a        	addx4	a10, a9, a12
		ah->ah_set11nVirtualMoreFrag(ds, 0);
	}

	if (bf->bf_retries >= OWLMAX_RETRIES) {
		__stats(sc, txaggr_xretries);
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90d9d3:	2aac24        	addi	a10, a10, 36
  90d9d6:	0b4b14        	srli	a11, a11, 4
  90d9d9:	9813      	s32i.n	a8, a1, 12
  90d9db:	5bfd96        	call8	90d034 <ath_tx_update_baw>
		ath_tx_status_update_aggr(sc, bf, bf->bf_lastds, NULL, 0);
  90d9de:	c0d0      	movi.n	a13, 0
  90d9e0:	8c3e      	l32i.n	a12, a3, 56
  90d9e2:	da20      	mov.n	a10, a2
  90d9e4:	db30      	mov.n	a11, a3
  90d9e6:	0dde02        	or	a14, a13, a13
  90d9e9:	5bffc1        	call8	90d8f0 <ath_tx_status_update_aggr>

		if (!*bar)
  90d9ec:	8813      	l32i.n	a8, a1, 12
  90d9ee:	8480      	l32i.n	a4, a8, 0
  90d9f0:	cc42      	bnez.n	a4, 90d9f6 <ath_tx_retry_subframe+0x96>
			*bar = bf;
  90d9f2:	9380      	s32i.n	a3, a8, 0
  90d9f4:	d10f      	retw.n
		else
			ath_tx_freebuf(sc, bf);
  90d9f6:	da20      	mov.n	a10, a2
  90d9f8:	db30      	mov.n	a11, a3
  90d9fa:	5bfeec        	call8	90d5ac <ath_tx_freebuf>
  90d9fd:	d10f      	retw.n
  90d9ff:	00853b        	movgez	a5, a8, a0
		return;
	}

	if (!bf->bf_next) {
  90da02:	cd54      	bnez.n	a5, 90da1a <ath_tx_retry_subframe+0xba>
		__stats(sc, txaggr_errlast);
  90da04:	252267        	l32i	a5, a2, 0x19c
		bf = ath_buf_toggle(sc, bf, 1);
  90da07:	db30      	mov.n	a11, a3
			ath_tx_freebuf(sc, bf);
		return;
	}

	if (!bf->bf_next) {
		__stats(sc, txaggr_errlast);
  90da09:	b155      	addi.n	a5, a5, 1
  90da0b:	252667        	s32i	a5, a2, 0x19c
		bf = ath_buf_toggle(sc, bf, 1);
  90da0e:	da20      	mov.n	a10, a2
  90da10:	c0c1      	movi.n	a12, 1
  90da12:	5bfea2        	call8	90d49c <ath_buf_toggle>
  90da15:	d3a0      	mov.n	a3, a10
  90da17:	60000d        	j	90da28 <ath_tx_retry_subframe+0xc8>
	} else
		bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs - 1]);
  90da1a:	b0b5      	addi.n	a5, a11, -1
  90da1c:	0c5611        	slli	a6, a5, 4
  90da1f:	a565      	add.n	a5, a6, a5
  90da21:	863d      	l32i.n	a6, a3, 52
  90da23:	06550b        	addx8	a5, a5, a6
  90da26:	953e      	s32i.n	a5, a3, 56

	ath_tx_set_retry(sc, bf);
  90da28:	da20      	mov.n	a10, a2
  90da2a:	db30      	mov.n	a11, a3
	asf_tailq_insert_tail(bf_q, bf, bf_list);
  90da2c:	c020      	movi.n	a2, 0
		__stats(sc, txaggr_errlast);
		bf = ath_buf_toggle(sc, bf, 1);
	} else
		bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs - 1]);

	ath_tx_set_retry(sc, bf);
  90da2e:	5bff6b        	call8	90d7dc <ath_tx_set_retry>
	asf_tailq_insert_tail(bf_q, bf, bf_list);
  90da31:	9239      	s32i.n	a2, a3, 36
  90da33:	8241      	l32i.n	a2, a4, 4
  90da35:	923a      	s32i.n	a2, a3, 40
  90da37:	9320      	s32i.n	a3, a2, 0
  90da39:	233c24        	addi	a3, a3, 36
  90da3c:	9341      	s32i.n	a3, a4, 4
  90da3e:	d10f      	retw.n

0090da40 <ath_tx_comp_aggr_error>:
}

static void
ath_tx_comp_aggr_error(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
		       ath_atx_tid_t *tid)
{
  90da40:	6c1020        	entry	a1, 0x100


	struct ath_tx_desc lastds;
	struct ath_tx_desc *ds = &lastds;
	struct ath_rc_series rcs[4];
	struct ath_tx_buf *bar = NULL;
  90da43:	c060      	movi.n	a6, 0
  90da45:	261630        	s32i	a6, a1, 192
	struct ath_tx_buf *bf_next;
	int nframes = bf->bf_nframes;
	ath_tx_bufhead bf_q;
	struct ath_txq *txq;

	asf_tailq_init(&bf_q);
  90da48:	26162e        	s32i	a6, a1, 184
 * @param[in] size    buffer size
 */
static inline void
adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    __adf_os_mem_copy(dst, src, size);
  90da4b:	8b3e      	l32i.n	a11, a3, 56
  90da4d:	260ab8        	movi	a6, 184
  90da50:	061608        	add	a6, a1, a6
  90da53:	011a02        	or	a10, a1, a1
  90da56:	2c0a88        	movi	a12, 136
	struct ath_tx_desc lastds;
	struct ath_tx_desc *ds = &lastds;
	struct ath_rc_series rcs[4];
	struct ath_tx_buf *bar = NULL;
	struct ath_tx_buf *bf_next;
	int nframes = bf->bf_nframes;
  90da59:	25304c        	l8ui	a5, a3, 76
	ath_tx_bufhead bf_q;
	struct ath_txq *txq;

	asf_tailq_init(&bf_q);
  90da5c:	26162f        	s32i	a6, a1, 188
	txq = bf->bf_txq;
  90da5f:	273220        	l32i	a7, a3, 128
  90da62:	5bfd0a        	call8	90ce8c <__adf_os_mem_copy>
  90da65:	2a0a88        	movi	a10, 136
  90da68:	0a1a08        	add	a10, a1, a10
  90da6b:	2b3c50        	addi	a11, a3, 80
  90da6e:	2c0a30        	movi	a12, 48
  90da71:	5bfd06        	call8	90ce8c <__adf_os_mem_copy>
	adf_os_mem_copy(ds, bf->bf_lastds, sizeof (struct ath_tx_desc));
	adf_os_mem_copy(rcs, bf->bf_rcs, sizeof(rcs));

	while (bf) {
		bf_next = bf->bf_next;
		ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
  90da74:	d860      	mov.n	a8, a6
  90da76:	2d0ac0        	movi	a13, 192

	adf_os_mem_copy(ds, bf->bf_lastds, sizeof (struct ath_tx_desc));
	adf_os_mem_copy(rcs, bf->bf_rcs, sizeof(rcs));

	while (bf) {
		bf_next = bf->bf_next;
  90da79:	863b      	l32i.n	a6, a3, 44
		ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
  90da7b:	db30      	mov.n	a11, a3
  90da7d:	dc80      	mov.n	a12, a8
  90da7f:	da20      	mov.n	a10, a2
  90da81:	a1dd      	add.n	a13, a13, a1
  90da83:	281634        	s32i	a8, a1, 208
  90da86:	5bffb6        	call8	90d960 <ath_tx_retry_subframe>
		bf = bf_next;
  90da89:	d360      	mov.n	a3, a6
	txq = bf->bf_txq;

	adf_os_mem_copy(ds, bf->bf_lastds, sizeof (struct ath_tx_desc));
	adf_os_mem_copy(rcs, bf->bf_rcs, sizeof(rcs));

	while (bf) {
  90da8b:	281234        	l32i	a8, a1, 208
  90da8e:	656fe4        	bnez	a6, 90da76 <ath_tx_comp_aggr_error+0x36>
		bf_next = bf->bf_next;
		ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
		bf = bf_next;
	}

	ath_update_aggr_stats(sc, ds, nframes, nframes);
  90da91:	022a02        	or	a10, a2, a2
  90da94:	011b02        	or	a11, a1, a1
  90da97:	5bfdd6        	call8	90d1f0 <ath_update_aggr_stats$isra$2>
	ath_rate_tx_complete(sc, tid->an, ds, rcs, nframes, nframes);
  90da9a:	8b4e      	l32i.n	a11, a4, 56
  90da9c:	2d0a88        	movi	a13, 136
  90da9f:	dc10      	mov.n	a12, a1
  90daa1:	da20      	mov.n	a10, a2
  90daa3:	ad1d      	add.n	a13, a1, a13
  90daa5:	de50      	mov.n	a14, a5
  90daa7:	df50      	mov.n	a15, a5
  90daa9:	5bfcd8        	call8	90ce0c <ath_rate_tx_complete>

	if (bar) {
  90daac:	2c1230        	l32i	a12, a1, 192
  90daaf:	c8c5      	beqz.n	a12, 90dab8 <ath_tx_comp_aggr_error+0x78>
		ath_bar_tx(sc, tid, bar);
  90dab1:	da20      	mov.n	a10, a2
  90dab3:	db40      	mov.n	a11, a4
  90dab5:	5bfeed        	call8	90d66c <ath_bar_tx>
	}

	if (!asf_tailq_empty(&bf_q)) {
  90dab8:	23122e        	l32i	a3, a1, 184
  90dabb:	ca3d      	beqz.n	a3, 90daec <ath_tx_comp_aggr_error+0xac>
		__stats(sc, txaggr_prepends);
  90dabd:	232264        	l32i	a3, a2, 0x190
  90dac0:	b133      	addi.n	a3, a3, 1
  90dac2:	232664        	s32i	a3, a2, 0x190
		TAILQ_INSERTQ_HEAD(&tid->buf_q, &bf_q, bf_list);
  90dac5:	834b      	l32i.n	a3, a4, 44
  90dac7:	22122f        	l32i	a2, a1, 188
  90daca:	c83b      	beqz.n	a3, 90dad9 <ath_tx_comp_aggr_error+0x99>
  90dacc:	9320      	s32i.n	a3, a2, 0
  90dace:	824b      	l32i.n	a2, a4, 44
  90dad0:	23122f        	l32i	a3, a1, 188
  90dad3:	932a      	s32i.n	a3, a2, 40
  90dad5:	600002        	j	90dadb <ath_tx_comp_aggr_error+0x9b>
  90dad8:	00924c        	extui	a2, a0, 9, 13
  90dadb:	22122e        	l32i	a2, a1, 184
  90dade:	234c2c        	addi	a3, a4, 44
  90dae1:	924b      	s32i.n	a2, a4, 44
  90dae3:	932a      	s32i.n	a3, a2, 40
		ath_tgt_tx_enqueue(txq, tid);
  90dae5:	da70      	mov.n	a10, a7
  90dae7:	db40      	mov.n	a11, a4
  90dae9:	5bfdb8        	call8	90d1cc <ath_tgt_tx_enqueue>
  90daec:	d10f      	retw.n
	...

0090daf0 <ath_tx_status_send>:

	txs->cnt++;
}

void ath_tx_status_send(struct ath_softc_tgt *sc)
{
  90daf0:	6c1004        	entry	a1, 32
	int i;

	if (sc->sc_tx_draining)
  90daf3:	242249        	l32i	a4, a2, 0x124
  90daf6:	136abd        	l32r	a3, 8e85ec <memset+0x17a4>
  90daf9:	034401        	and	a4, a4, a3
  90dafc:	cf44      	bnez.n	a4, 90db34 <ath_tx_status_send+0x44>
		return;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt) {
  90dafe:	232d16        	addmi	a3, a2, 0x1600
  90db01:	283038        	l8ui	a8, a3, 56
  90db04:	c980      	beqz.n	a8, 90db18 <ath_tx_status_send+0x28>
			wmi_event(sc->tgt_wmi_handle, WMI_TXSTATUS_EVENTID,
  90db06:	1c6b04        	l32r	a12, 8e8718 <memset+0x18d0>
  90db09:	8a23      	l32i.n	a10, a2, 12
  90db0b:	1b6b03        	l32r	a11, 8e8718 <memset+0x18d0>
  90db0e:	ac2c      	add.n	a12, a2, a12
  90db10:	c2d5      	movi.n	a13, 37
  90db12:	5bea07        	call8	908330 <wmi_event>
				  &sc->tx_status[i], sizeof(WMI_TXSTATUS_EVENT));
			/* FIXME: Handle failures. */
			sc->tx_status[i].cnt = 0;
  90db15:	243438        	s8i	a4, a3, 56

	if (sc->sc_tx_draining)
		return;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt) {
  90db18:	232d16        	addmi	a3, a2, 0x1600
  90db1b:	24305d        	l8ui	a4, a3, 93
  90db1e:	c942      	beqz.n	a4, 90db34 <ath_tx_status_send+0x44>
			wmi_event(sc->tgt_wmi_handle, WMI_TXSTATUS_EVENTID,
  90db20:	1c6b05        	l32r	a12, 8e8734 <memset+0x18ec>
  90db23:	8a23      	l32i.n	a10, a2, 12
  90db25:	1b6b03        	l32r	a11, 8e8734 <memset+0x18ec>
  90db28:	ac2c      	add.n	a12, a2, a12
  90db2a:	c2d5      	movi.n	a13, 37
				  &sc->tx_status[i], sizeof(WMI_TXSTATUS_EVENT));
			/* FIXME: Handle failures. */
			sc->tx_status[i].cnt = 0;
  90db2c:	c020      	movi.n	a2, 0
	if (sc->sc_tx_draining)
		return;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt) {
			wmi_event(sc->tgt_wmi_handle, WMI_TXSTATUS_EVENTID,
  90db2e:	5bea00        	call8	908330 <wmi_event>
				  &sc->tx_status[i], sizeof(WMI_TXSTATUS_EVENT));
			/* FIXME: Handle failures. */
			sc->tx_status[i].cnt = 0;
  90db31:	22345d        	s8i	a2, a3, 93
  90db34:	d10f      	retw.n
	...

0090db38 <ath_tgt_tid_drain>:
	return((struct ieee80211_frame *)anbdata);
}

void
ath_tgt_tid_drain(struct ath_softc_tgt *sc, struct ath_atx_tid *tid)
{
  90db38:	6c1004        	entry	a1, 32
	struct ath_tx_buf *bf;

	while (!asf_tailq_empty(&tid->buf_q)) {
  90db3b:	600015        	j	90db54 <ath_tgt_tid_drain+0x1c>
		TAILQ_DEQ(&tid->buf_q, bf, bf_list);
  90db3e:	88b9      	l32i.n	a8, a11, 36
  90db40:	89ba      	l32i.n	a9, a11, 40
  90db42:	c883      	beqz.n	a8, 90db49 <ath_tgt_tid_drain+0x11>
  90db44:	998a      	s32i.n	a9, a8, 40
  90db46:	600001        	j	90db4b <ath_tgt_tid_drain+0x13>
  90db49:	993c      	s32i.n	a9, a3, 48
  90db4b:	89ba      	l32i.n	a9, a11, 40
		ath_tx_freebuf(sc, bf);
  90db4d:	da20      	mov.n	a10, a2
ath_tgt_tid_drain(struct ath_softc_tgt *sc, struct ath_atx_tid *tid)
{
	struct ath_tx_buf *bf;

	while (!asf_tailq_empty(&tid->buf_q)) {
		TAILQ_DEQ(&tid->buf_q, bf, bf_list);
  90db4f:	9890      	s32i.n	a8, a9, 0
		ath_tx_freebuf(sc, bf);
  90db51:	5bfe96        	call8	90d5ac <ath_tx_freebuf>
void
ath_tgt_tid_drain(struct ath_softc_tgt *sc, struct ath_atx_tid *tid)
{
	struct ath_tx_buf *bf;

	while (!asf_tailq_empty(&tid->buf_q)) {
  90db54:	8b3b      	l32i.n	a11, a3, 44
  90db56:	65bfe4        	bnez	a11, 90db3e <ath_tgt_tid_drain+0x6>
		TAILQ_DEQ(&tid->buf_q, bf, bf_list);
		ath_tx_freebuf(sc, bf);
	}

	tid->seq_next = tid->seq_start;
  90db59:	223102        	l16ui	a2, a3, 4
  90db5c:	223503        	s16i	a2, a3, 6
	tid->baw_tail = tid->baw_head;
  90db5f:	8233      	l32i.n	a2, a3, 12
  90db61:	9234      	s32i.n	a2, a3, 16
  90db63:	d10f      	retw.n
  90db65:	000000        	ill

0090db68 <ath_tgt_tx_prepare>:
	return  bf;
}

struct ath_tx_buf* ath_tgt_tx_prepare(struct ath_softc_tgt *sc,
				   adf_nbuf_t skb, ath_data_hdr_t *dh)
{
  90db68:	6c1006        	entry	a1, 48
  90db6b:	d520      	mov.n	a5, a2
	struct ath_tx_buf *bf;
	struct ieee80211_node_target *ni;
	struct ath_atx_tid *tid;

	ni = ath_tgt_find_node(sc, dh->ni_index);
  90db6d:	224001        	l8ui	a2, a4, 1
							a_int32_t node_index)
{
	struct ath_node_target *an;
	struct ieee80211_node_target *ni;

	if (node_index > TARGET_NODE_MAX)
  90db70:	c068      	movi.n	a6, 8
  90db72:	726a02        	bge	a6, a2, 90db78 <ath_tgt_tx_prepare+0x10>
  90db75:	600263        	j	90dddc <ath_tgt_tx_prepare+0x274>
	  	return NULL;

	an = &sc->sc_sta[node_index];
  90db78:	0a2611        	slli	a6, a2, 6
  90db7b:	a266      	add.n	a6, a6, a2
  90db7d:	026609        	addx2	a6, a6, a2
  90db80:	275a30        	movi	a7, 0x530
  90db83:	07660a        	addx4	a6, a6, a7
  90db86:	a656      	add.n	a6, a5, a6
  90db88:	b866      	addi.n	a6, a6, 8
	ni = &an->ni;

	if (an->an_valid) {
  90db8a:	226d02        	addmi	a2, a6, 0x200
  90db8d:	222004        	l8ui	a2, a2, 4
  90db90:	002232        	sext	a2, a2, 7
  90db93:	642247        	beqz	a2, 90ddde <ath_tgt_tx_prepare+0x276>
		if (ni->ni_vap == NULL) {
  90db96:	8268      	l32i.n	a2, a6, 32
  90db98:	642242        	beqz	a2, 90ddde <ath_tgt_tx_prepare+0x276>
	struct ieee80211_node_target *ni;
	struct ath_atx_tid *tid;

	ni = ath_tgt_find_node(sc, dh->ni_index);
	if (ni == NULL)
		return NULL;
  90db9b:	c020      	movi.n	a2, 0
	struct ath_tx_buf *bf;
	struct ieee80211_node_target *ni;
	struct ath_atx_tid *tid;

	ni = ath_tgt_find_node(sc, dh->ni_index);
	if (ni == NULL)
  90db9d:	726902        	bne	a6, a2, 90dba3 <ath_tgt_tx_prepare+0x3b>
  90dba0:	60023a        	j	90ddde <ath_tgt_tx_prepare+0x276>
		return NULL;

	tid = ATH_AN_2_TID(ATH_NODE_TARGET(ni), dh->tidno);
  90dba3:	274003        	l8ui	a7, a4, 3
  90dba6:	0c7811        	slli	a8, a7, 4
  90dba9:	07870c        	sub	a7, a8, a7
  90dbac:	06770a        	addx4	a7, a7, a6
	if (tid->flag & TID_REINITIALIZE) {
  90dbaf:	27705a        	l8ui	a7, a7, 90
  90dbb2:	7d770e        	bbci	a7, 29, 90dbc4 <ath_tgt_tx_prepare+0x5c>
		adf_os_print("drop frame due to TID reinit\n");
  90dbb5:	136915        	l32r	a3, 8e800c <memset+0x11c4>
  90dbb8:	1a6b06        	l32r	a10, 8e87d0 <memset+0x1988>
  90dbbb:	233212        	l32i	a3, a3, 72
  90dbbe:	0b3000        	callx8	a3
		return NULL;
  90dbc1:	d10f      	retw.n
  90dbc3:	002252        	extui	a2, a0, 18, 3

static struct ath_tx_buf* ath_tx_buf_alloc(struct ath_softc_tgt *sc)
{
	struct ath_tx_buf *bf = NULL;

	bf = asf_tailq_first(&sc->sc_txbuf);
  90dbc6:	f0          	.byte 0xf0
	if (bf !=  NULL) {
  90dbc7:	cb22      	beqz.n	a2, 90dbfd <ath_tgt_tx_prepare+0x95>
 * @param[in] size  buffer size
 */
static inline void
adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
    __adf_os_mem_set(buf, b, size);
  90dbc9:	2a2c3c        	addi	a10, a2, 60
  90dbcc:	c4bc      	movi.n	a11, 76
  90dbce:	5bfda9        	call8	90d274 <__adf_os_mem_set$constprop$13>
		adf_os_mem_set(&bf->bf_state, 0, sizeof(struct ath_buf_state));
		asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  90dbd1:	8729      	l32i.n	a7, a2, 36
  90dbd3:	882a      	l32i.n	a8, a2, 40
  90dbd5:	c874      	beqz.n	a7, 90dbdd <ath_tgt_tx_prepare+0x75>
  90dbd7:	987a      	s32i.n	a8, a7, 40
  90dbd9:	600003        	j	90dbe0 <ath_tgt_tx_prepare+0x78>
  90dbdc:	002856        	extui	a8, a0, 18, 7
  90dbdf:	f1          	.byte 0xf1
  90dbe0:	882a      	l32i.n	a8, a2, 40
		__stats(sc, tx_nobufs);
		return NULL;
	}

	bf->bf_tidno = dh->tidno;
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
  90dbe2:	c091      	movi.n	a9, 1
	struct ath_tx_buf *bf = NULL;

	bf = asf_tailq_first(&sc->sc_txbuf);
	if (bf !=  NULL) {
		adf_os_mem_set(&bf->bf_state, 0, sizeof(struct ath_buf_state));
		asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  90dbe4:	9780      	s32i.n	a7, a8, 0
	if (!bf) {
		__stats(sc, tx_nobufs);
		return NULL;
	}

	bf->bf_tidno = dh->tidno;
  90dbe6:	284003        	l8ui	a8, a4, 3
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
  90dbe9:	c070      	movi.n	a7, 0
  90dbeb:	2a8cfd        	addi	a10, a8, -3
	if (!bf) {
		__stats(sc, tx_nobufs);
		return NULL;
	}

	bf->bf_tidno = dh->tidno;
  90dbee:	28244d        	s8i	a8, a2, 77
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
  90dbf1:	0a9739        	movnez	a7, a9, a10
  90dbf4:	c870      	beqz.n	a7, 90dbf8 <ath_tgt_tx_prepare+0x90>
  90dbf6:	ce84      	bnez.n	a8, 90dc1e <ath_tgt_tx_prepare+0xb6>
  90dbf8:	c090      	movi.n	a9, 0
  90dbfa:	600036        	j	90dc34 <ath_tgt_tx_prepare+0xcc>
	bf = asf_tailq_first(&sc->sc_txbuf);
	if (bf !=  NULL) {
		adf_os_mem_set(&bf->bf_state, 0, sizeof(struct ath_buf_state));
		asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
	} else {
		adf_os_assert(0);
  90dbfd:	136915        	l32r	a3, 8e8054 <memset+0x120c>
  90dc00:	1b6b07        	l32r	a11, 8e881c <memset+0x19d4>
  90dc03:	233212        	l32i	a3, a3, 72
  90dc06:	1a6afb        	l32r	a10, 8e87f4 <memset+0x19ac>
  90dc09:	0b3000        	callx8	a3
  90dc0c:	13697a        	l32r	a3, 8e81f4 <memset+0x13ac>
  90dc0f:	0c0200        	memw
  90dc12:	8330      	l32i.n	a3, a3, 0
		return NULL;
	}

	bf = ath_tx_buf_alloc(sc);
	if (!bf) {
		__stats(sc, tx_nobufs);
  90dc14:	235277        	l32i	a3, a5, 0x1dc
  90dc17:	b133      	addi.n	a3, a3, 1
  90dc19:	235677        	s32i	a3, a5, 0x1dc
		return NULL;
  90dc1c:	d10f      	retw.n
	}

	bf->bf_tidno = dh->tidno;
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
  90dc1e:	b087      	addi.n	a7, a8, -1
  90dc20:	070747        	extui	a7, a7, 0, 8
  90dc23:	6e720d        	bltui	a7, 2, 90dc34 <ath_tgt_tx_prepare+0xcc>
  90dc26:	288cfc        	addi	a8, a8, -4
  90dc29:	080847        	extui	a8, a8, 0, 8
  90dc2c:	c093      	movi.n	a9, 3
  90dc2e:	6f8202        	bgeui	a8, 2, 90dc34 <ath_tgt_tx_prepare+0xcc>
  90dc31:	290a02        	movi	a9, 2
  90dc34:	05990a        	addx4	a9, a9, a5
  90dc37:	299d05        	addmi	a9, a9, 0x500
  90dc3a:	8793      	l32i.n	a7, a9, 12
 * @param[in] buf   buf
 */
static inline void
adf_nbuf_queue_add(adf_nbuf_queue_t *head, adf_nbuf_t buf)
{
    __adf_nbuf_queue_add(head, buf);
  90dc3c:	db30      	mov.n	a11, a3
  90dc3e:	272620        	s32i	a7, a2, 128
	bf->bf_keytype = dh->keytype;
  90dc41:	274008        	l8ui	a7, a4, 8
  90dc44:	272485        	s8i	a7, a2, 133
	bf->bf_keyix = dh->keyix;
  90dc47:	274009        	l8ui	a7, a4, 9
  90dc4a:	272449        	s8i	a7, a2, 73
	bf->bf_protmode = dh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
  90dc4d:	274007        	l8ui	a7, a4, 7
	bf->bf_node = ni;
  90dc50:	9624      	s32i.n	a6, a2, 16

	bf->bf_tidno = dh->tidno;
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
	bf->bf_keytype = dh->keytype;
	bf->bf_keyix = dh->keyix;
	bf->bf_protmode = dh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
  90dc52:	070741        	extui	a7, a7, 0, 2
	bf->bf_node = ni;

	adf_nbuf_queue_add(&bf->bf_skbhead, skb);
  90dc55:	262c14        	addi	a6, a2, 20
  90dc58:	da60      	mov.n	a10, a6

	bf->bf_tidno = dh->tidno;
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
	bf->bf_keytype = dh->keytype;
	bf->bf_keyix = dh->keyix;
	bf->bf_protmode = dh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
  90dc5a:	272484        	s8i	a7, a2, 132
  90dc5d:	5be36e        	call8	906a18 <__adf_nbuf_queue_add>
 * @return first buffer in queue
 */
static inline adf_nbuf_t 
adf_nbuf_queue_first(adf_nbuf_queue_t *head)
{
    return (__adf_nbuf_queue_first(head));
  90dc60:	da60      	mov.n	a10, a6
  90dc62:	5be41b        	call8	906cd0 <__adf_nbuf_queue_first>
  90dc65:	d3a0      	mov.n	a3, a10
 * @return length of the queue
 */
static inline a_uint32_t
adf_nbuf_queue_len(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_len(head);
  90dc67:	da60      	mov.n	a10, a6
  90dc69:	5be417        	call8	906cc8 <__adf_nbuf_queue_len>
	bf->bf_node = ni;

	adf_nbuf_queue_add(&bf->bf_skbhead, skb);
	skb = adf_nbuf_queue_first(&(bf->bf_skbhead));

	if (adf_nbuf_queue_len(&(bf->bf_skbhead)) == 0) {
  90dc6c:	ccac      	bnez.n	a10, 90dc7c <ath_tgt_tx_prepare+0x114>
		__stats(sc, tx_noskbs);
  90dc6e:	225276        	l32i	a2, a5, 0x1d8
  90dc71:	b122      	addi.n	a2, a2, 1
  90dc73:	225676        	s32i	a2, a5, 0x1d8
		return NULL;
  90dc76:	d2a0      	mov.n	a2, a10
  90dc78:	d10f      	retw.n
  90dc7a:	0000cd        	excw
	}

	adf_os_assert(skb);
  90dc7d:	361769        	excw
  90dc80:	151a6a        	l32r	a5, 8d4628 <_bss_end+0x3c1718>
  90dc83:	fb          	.byte 0xfb
  90dc84:	277212        	l32i	a7, a7, 72
  90dc87:	1b6b08        	l32r	a11, 8e88a8 <memset+0x1a60>
  90dc8a:	0b7000        	callx8	a7
  90dc8d:	17697a        	l32r	a7, 8e8278 <memset+0x1430>
  90dc90:	0c0200        	memw
  90dc93:	277200        	l32i	a7, a7, 0
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90dc96:	da30      	mov.n	a10, a3
  90dc98:	b41b      	addi.n	a11, a1, 4

	bf->bf_skb = skb;
  90dc9a:	9328      	s32i.n	a3, a2, 32
  90dc9c:	dc10      	mov.n	a12, a1
  90dc9e:	5be400        	call8	906ca0 <__adf_nbuf_peek_header>
				     ath_data_hdr_t *dh)

{
	struct ieee80211_frame *wh = ATH_SKB2_WH(bf->bf_skb);
	a_int32_t retval;
	a_uint32_t flags = adf_os_ntohl(dh->flags);
  90dca1:	294004        	l8ui	a9, a4, 4
  90dca4:	284005        	l8ui	a8, a4, 5
  90dca7:	274006        	l8ui	a7, a4, 6
  90dcaa:	089910        	slli	a9, a9, 24
  90dcad:	008811        	slli	a8, a8, 16
  90dcb0:	098802        	or	a8, a8, a9
  90dcb3:	244007        	l8ui	a4, a4, 7
  90dcb6:	087711        	slli	a7, a7, 8

static void ath_tgt_tx_seqno_normal(struct ath_tx_buf *bf)
{
	struct ieee80211_node_target *ni = bf->bf_node;
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
  90dcb9:	8a28      	l32i.n	a10, a2, 32
				     ath_data_hdr_t *dh)

{
	struct ieee80211_frame *wh = ATH_SKB2_WH(bf->bf_skb);
	a_int32_t retval;
	a_uint32_t flags = adf_os_ntohl(dh->flags);
  90dcbb:	087702        	or	a7, a7, a8
{
	a_uint8_t *anbdata;
	a_uint32_t anblen;

	adf_nbuf_peek_header(skb, &anbdata, &anblen);
	return((struct ieee80211_frame *)anbdata);
  90dcbe:	8311      	l32i.n	a3, a1, 4
				     ath_data_hdr_t *dh)

{
	struct ieee80211_frame *wh = ATH_SKB2_WH(bf->bf_skb);
	a_int32_t retval;
	a_uint32_t flags = adf_os_ntohl(dh->flags);
  90dcc0:	074402        	or	a4, a4, a7
	return bf;
}

static void ath_tgt_tx_seqno_normal(struct ath_tx_buf *bf)
{
	struct ieee80211_node_target *ni = bf->bf_node;
  90dcc3:	272204        	l32i	a7, a2, 16
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
  90dcc6:	5bfec1        	call8	90d7cc <ATH_SKB_2_WH>
	struct ath_atx_tid *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90dcc9:	28204d        	l8ui	a8, a2, 77

	u_int8_t fragno = (wh->i_seq[0] & 0xf);

	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90dccc:	2b710c        	l16ui	a11, a7, 24
static void ath_tgt_tx_seqno_normal(struct ath_tx_buf *bf)
{
	struct ieee80211_node_target *ni = bf->bf_node;
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
	struct ath_atx_tid *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90dccf:	0c8911        	slli	a9, a8, 4
  90dcd2:	08980c        	sub	a8, a9, a8
  90dcd5:	07880a        	addx4	a8, a8, a7

	u_int8_t fragno = (wh->i_seq[0] & 0xf);

	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90dcd8:	b1bb      	addi.n	a11, a11, 1
  90dcda:	0b0b4b        	extui	a11, a11, 0, 12
static void ath_tgt_tx_seqno_normal(struct ath_tx_buf *bf)
{
	struct ieee80211_node_target *ni = bf->bf_node;
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
	struct ath_atx_tid *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90dcdd:	288c24        	addi	a8, a8, 36

	u_int8_t fragno = (wh->i_seq[0] & 0xf);
  90dce0:	29a016        	l8ui	a9, a10, 22

	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90dce3:	2b750c        	s16i	a11, a7, 24

	bf->bf_seqno = (tid->seq_next << IEEE80211_SEQ_SEQ_SHIFT);
  90dce6:	278103        	l16ui	a7, a8, 6
	struct ieee80211_node_target *ni = bf->bf_node;
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
	struct ath_atx_tid *tid = ATH_AN_2_TID(an, bf->bf_tidno);

	u_int8_t fragno = (wh->i_seq[0] & 0xf);
  90dce9:	090943        	extui	a9, a9, 0, 4

	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);

	bf->bf_seqno = (tid->seq_next << IEEE80211_SEQ_SEQ_SHIFT);
  90dcec:	0c7711        	slli	a7, a7, 4
  90dcef:	07074f        	extui	a7, a7, 0, 16
  90dcf2:	272523        	s16i	a7, a2, 70

#undef adf_os_cpu_to_le16

static a_uint16_t adf_os_cpu_to_le16(a_uint16_t x)
{
	return ((((x) & 0xff00) >> 8) |   (((x) & 0x00ff) << 8));
  90dcf5:	087b11        	slli	a11, a7, 8
  90dcf8:	078714        	srli	a7, a7, 8
  90dcfb:	07b702        	or	a7, a11, a7

	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);

	bf->bf_seqno = (tid->seq_next << IEEE80211_SEQ_SEQ_SHIFT);

	*(u_int16_t *)wh->i_seq = adf_os_cpu_to_le16(bf->bf_seqno);
  90dcfe:	070b4f        	extui	a11, a7, 0, 16
  90dd01:	27a50b        	s16i	a7, a10, 22
	wh->i_seq[0] |= fragno;
  90dd04:	0b8714        	srli	a7, a11, 8
  90dd07:	079702        	or	a7, a9, a7
  90dd0a:	27a416        	s8i	a7, a10, 22

	if (!(wh->i_fc[1] & IEEE80211_FC1_MORE_FRAG))
  90dd0d:	27a001        	l8ui	a7, a10, 1
  90dd10:	7d7f08        	bbsi	a7, 29, 90dd1c <ath_tgt_tx_prepare+0x1b4>
		INCR(tid->seq_next, IEEE80211_SEQ_MAX);
  90dd13:	278103        	l16ui	a7, a8, 6
  90dd16:	277c01        	addi	a7, a7, 1
  90dd19:	278503        	s16i	a7, a8, 6
  90dd1c:	278103        	l16ui	a7, a8, 6
	a_uint32_t flags = adf_os_ntohl(dh->flags);

	ath_tgt_tx_seqno_normal(bf);

	bf->bf_txq_add  = ath_tgt_txq_add_ucast;
	bf->bf_hdrlen   = ieee80211_anyhdrsize(wh);
  90dd1f:	033a02        	or	a10, a3, a3

	*(u_int16_t *)wh->i_seq = adf_os_cpu_to_le16(bf->bf_seqno);
	wh->i_seq[0] |= fragno;

	if (!(wh->i_fc[1] & IEEE80211_FC1_MORE_FRAG))
		INCR(tid->seq_next, IEEE80211_SEQ_MAX);
  90dd22:	07074b        	extui	a7, a7, 0, 12
  90dd25:	278503        	s16i	a7, a8, 6
	a_int32_t retval;
	a_uint32_t flags = adf_os_ntohl(dh->flags);

	ath_tgt_tx_seqno_normal(bf);

	bf->bf_txq_add  = ath_tgt_txq_add_ucast;
  90dd28:	176b09        	l32r	a7, 8e894c <memset+0x1b04>
  90dd2b:	272610        	s32i	a7, a2, 64
	bf->bf_hdrlen   = ieee80211_anyhdrsize(wh);
  90dd2e:	5bfc5c        	call8	90cea0 <ieee80211_anyhdrsize>
  90dd31:	d7a0      	mov.n	a7, a10
  90dd33:	2a2448        	s8i	a10, a2, 72
 * @return first buffer in queue
 */
static inline adf_nbuf_t 
adf_nbuf_queue_first(adf_nbuf_queue_t *head)
{
    return (__adf_nbuf_queue_first(head));
  90dd36:	066a02        	or	a10, a6, a6
  90dd39:	5be3e5        	call8	906cd0 <__adf_nbuf_queue_first>
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  90dd3c:	5be3d0        	call8	906c80 <__adf_nbuf_len>
	a_int32_t pktlen;

	skb = adf_nbuf_queue_first(&bf->bf_skbhead);
	pktlen = adf_nbuf_len(skb);

	pktlen -= (hdrlen & 3);
  90dd3f:	070741        	extui	a7, a7, 0, 2
  90dd42:	07aa0c        	sub	a10, a10, a7
	pktlen += IEEE80211_CRC_LEN;
  90dd45:	b4a7      	addi.n	a7, a10, 4

	ath_tgt_tx_seqno_normal(bf);

	bf->bf_txq_add  = ath_tgt_txq_add_ucast;
	bf->bf_hdrlen   = ieee80211_anyhdrsize(wh);
	bf->bf_pktlen   = ath_get_pktlen(bf, bf->bf_hdrlen);
  90dd47:	272522        	s16i	a7, a2, 68
	bf->bf_ismcast  = IEEE80211_IS_MULTICAST(wh->i_addr1);
  90dd4a:	263004        	l8ui	a6, a3, 4
  90dd4d:	232087        	l8ui	a3, a2, 135
  90dd50:	096611        	slli	a6, a6, 7
  90dd53:	030346        	extui	a3, a3, 0, 7
  90dd56:	063302        	or	a3, a3, a6
}

static a_int32_t ath_key_setup(struct ieee80211_node_target *ni,
			       struct ath_tx_buf *bf)
{
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
  90dd59:	8a28      	l32i.n	a10, a2, 32
	ath_tgt_tx_seqno_normal(bf);

	bf->bf_txq_add  = ath_tgt_txq_add_ucast;
	bf->bf_hdrlen   = ieee80211_anyhdrsize(wh);
	bf->bf_pktlen   = ath_get_pktlen(bf, bf->bf_hdrlen);
	bf->bf_ismcast  = IEEE80211_IS_MULTICAST(wh->i_addr1);
  90dd5b:	232487        	s8i	a3, a2, 135

	if ((retval = ath_key_setup(bf->bf_node, bf)) < 0)
  90dd5e:	262204        	l32i	a6, a2, 16
}

static a_int32_t ath_key_setup(struct ieee80211_node_target *ni,
			       struct ath_tx_buf *bf)
{
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
  90dd61:	5bfe9a        	call8	90d7cc <ATH_SKB_2_WH>

	if (!(wh->i_fc[1] & IEEE80211_FC1_WEP)) {
  90dd64:	27a001        	l8ui	a7, a10, 1
  90dd67:	c430      	movi.n	a3, 64
  90dd69:	037301        	and	a3, a7, a3
  90dd6c:	030747        	extui	a7, a3, 0, 8
  90dd6f:	cc79      	bnez.n	a7, 90dd7c <ath_tgt_tx_prepare+0x214>
		bf->bf_keytype = HAL_KEY_TYPE_CLEAR;
  90dd71:	232485        	s8i	a3, a2, 133
		bf->bf_keyix = HAL_TXKEYIX_INVALID;
  90dd74:	c73f      	movi.n	a3, -1
  90dd76:	232449        	s8i	a3, a2, 73
  90dd79:	60002d        	j	90ddaa <ath_tgt_tx_prepare+0x242>
		return 0;
	}

	switch (bf->bf_keytype) {
  90dd7c:	2c2085        	l8ui	a12, a2, 133
  90dd7f:	68c209        	beqi	a12, 2, 90dd8c <ath_tgt_tx_prepare+0x224>
  90dd82:	68c30e        	beqi	a12, 3, 90dd94 <ath_tgt_tx_prepare+0x22c>
  90dd85:	69c113        	bnei	a12, 1, 90dd9c <ath_tgt_tx_prepare+0x234>
  90dd88:	600008        	j	90dd94 <ath_tgt_tx_prepare+0x22c>
  90dd8b:	002321        	excw
	case HAL_KEY_TYPE_WEP:
		bf->bf_pktlen += IEEE80211_WEP_ICVLEN;
		break;
	case HAL_KEY_TYPE_AES:
		bf->bf_pktlen += IEEE80211_WEP_MICLEN;
  90dd8e:	22b833        	excw
  90dd91:	600004        	j	90dd99 <ath_tgt_tx_prepare+0x231>
		break;
	case HAL_KEY_TYPE_TKIP:
		bf->bf_pktlen += IEEE80211_WEP_ICVLEN;
  90dd94:	232122        	l16ui	a3, a2, 68
  90dd97:	b433      	addi.n	a3, a3, 4
  90dd99:	232522        	s16i	a3, a2, 68
		break;
	default:
		break;
	}

	if (bf->bf_keytype == HAL_KEY_TYPE_AES ||
  90dd9c:	23ccfe        	addi	a3, a12, -2
  90dd9f:	030347        	extui	a3, a3, 0, 8
  90dda2:	6f3204        	bgeui	a3, 2, 90ddaa <ath_tgt_tx_prepare+0x242>
	    bf->bf_keytype == HAL_KEY_TYPE_TKIP)
		ieee80211_tgt_crypto_encap(wh, ni, bf->bf_keytype);
  90dda5:	db60      	mov.n	a11, a6
  90dda7:	5804a2        	call8	90f030 <ieee80211_tgt_crypto_encap>
  90ddaa:	232087        	l8ui	a3, a2, 135
	bf->bf_ismcast  = IEEE80211_IS_MULTICAST(wh->i_addr1);

	if ((retval = ath_key_setup(bf->bf_node, bf)) < 0)
		return retval;

	if (flags & ATH_SHORT_PREAMBLE)
  90ddad:	7f4707        	bbci	a4, 31, 90ddb8 <ath_tgt_tx_prepare+0x250>
		bf->bf_shpream = AH_TRUE;
  90ddb0:	c440      	movi.n	a4, 64
  90ddb2:	043302        	or	a3, a3, a4
  90ddb5:	600005        	j	90ddbe <ath_tgt_tx_prepare+0x256>
	else
		bf->bf_shpream = AH_FALSE;
  90ddb8:	24fabf        	movi	a4, -65
  90ddbb:	043301        	and	a3, a3, a4
  90ddbe:	232487        	s8i	a3, a2, 135

	bf->bf_flags = HAL_TXDESC_CLRDMASK;
  90ddc1:	c031      	movi.n	a3, 1
  90ddc3:	232544        	s16i	a3, a2, 136
	bf->bf_atype = HAL_PKT_TYPE_NORMAL;
  90ddc6:	c030      	movi.n	a3, 0
	adf_os_assert(skb);

	bf->bf_skb = skb;

	ath_tgt_txbuf_setup(sc, bf, dh);
	ath_dma_map(sc, bf);
  90ddc8:	da50      	mov.n	a10, a5
  90ddca:	db20      	mov.n	a11, a2
		bf->bf_shpream = AH_TRUE;
	else
		bf->bf_shpream = AH_FALSE;

	bf->bf_flags = HAL_TXDESC_CLRDMASK;
	bf->bf_atype = HAL_PKT_TYPE_NORMAL;
  90ddcc:	23244a        	s8i	a3, a2, 74
	adf_os_assert(skb);

	bf->bf_skb = skb;

	ath_tgt_txbuf_setup(sc, bf, dh);
	ath_dma_map(sc, bf);
  90ddcf:	5bfdad        	call8	90d484 <ath_dma_map>
	ath_tx_tgt_setds(sc, bf);
  90ddd2:	da50      	mov.n	a10, a5
  90ddd4:	db20      	mov.n	a11, a2
  90ddd6:	5bfce9        	call8	90d17c <ath_tx_tgt_setds>

	return bf;
  90ddd9:	d10f      	retw.n
  90dddb:	00c020        	excw
}
  90ddde:	d10f      	retw.n

0090dde0 <ath_tgt_tx_send_normal>:
	return pktlen;
}

void
ath_tgt_tx_send_normal(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90dde0:	6c1014        	entry	a1, 160
	struct ath_rc_series rcs[4];
	struct ath_rc_series mrcs[4];
	a_int32_t shortPreamble = 0;
	a_int32_t isProbe = 0;

	adf_os_mem_set(rcs, 0, sizeof(struct ath_rc_series)*4 );
  90dde3:	251c40        	addi	a5, a1, 64
  90dde6:	da50      	mov.n	a10, a5
  90dde8:	c3b0      	movi.n	a11, 48
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	struct ath_rc_series rcs[4];
	struct ath_rc_series mrcs[4];
	a_int32_t shortPreamble = 0;
	a_int32_t isProbe = 0;
  90ddea:	c040      	movi.n	a4, 0
}

void
ath_tgt_tx_send_normal(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  90ddec:	8634      	l32i.n	a6, a3, 16
	struct ath_rc_series rcs[4];
	struct ath_rc_series mrcs[4];
	a_int32_t shortPreamble = 0;
	a_int32_t isProbe = 0;
  90ddee:	24161c        	s32i	a4, a1, 112
  90ddf1:	5bfd20        	call8	90d274 <__adf_os_mem_set$constprop$13>
  90ddf4:	2a1c10        	addi	a10, a1, 16
  90ddf7:	c3b0      	movi.n	a11, 48
  90ddf9:	5bfd1e        	call8	90d274 <__adf_os_mem_set$constprop$13>

	adf_os_mem_set(rcs, 0, sizeof(struct ath_rc_series)*4 );
	adf_os_mem_set(mrcs, 0, sizeof(struct ath_rc_series)*4 );

	if (!bf->bf_ismcast) {
  90ddfc:	283221        	l32i	a8, a3, 132
  90ddff:	2d0a80        	movi	a13, 128
  90de02:	08dd01        	and	a13, a13, a8
  90de05:	74d920        	bne	a13, a4, 90de29 <ath_tgt_tx_send_normal+0x49>
				  a_int32_t stepDnInc,
				  a_uint32_t rcflag,
				  struct ath_rc_series series[],
				  a_int32_t *isProbe)
{
	ath_rate_findrate(sc, an, 1, frameLen, 10, 4, 1,
  90de08:	c0c1      	movi.n	a12, 1

	adf_os_mem_set(rcs, 0, sizeof(struct ath_rc_series)*4 );
	adf_os_mem_set(mrcs, 0, sizeof(struct ath_rc_series)*4 );

	if (!bf->bf_ismcast) {
		ath_tgt_rate_findrate(sc, an, shortPreamble,
  90de0a:	241c70        	addi	a4, a1, 112
				  a_int32_t stepDnInc,
				  a_uint32_t rcflag,
				  struct ath_rc_series series[],
				  a_int32_t *isProbe)
{
	ath_rate_findrate(sc, an, 1, frameLen, 10, 4, 1,
  90de0d:	da20      	mov.n	a10, a2
  90de0f:	db60      	mov.n	a11, a6
  90de11:	9c10      	s32i.n	a12, a1, 0
  90de13:	9c11      	s32i.n	a12, a1, 4
  90de15:	9512      	s32i.n	a5, a1, 8
  90de17:	9413      	s32i.n	a4, a1, 12
  90de19:	c0ea      	movi.n	a14, 10
  90de1b:	c0f4      	movi.n	a15, 4
  90de1d:	5bfbf0        	call8	90cde0 <ath_rate_findrate>

	if (!bf->bf_ismcast) {
		ath_tgt_rate_findrate(sc, an, shortPreamble,
				      0, 0, 0, 0, 0,
				      rcs, &isProbe);
		ath_hal_memcpy(bf->bf_rcs, rcs, sizeof(rcs));
  90de20:	2a3c50        	addi	a10, a3, 80
  90de23:	db50      	mov.n	a11, a5
  90de25:	600023        	j	90de4c <ath_tgt_tx_send_normal+0x6c>
  90de28:	00c051        	extui	a0, a0, 28, 2
	} else {
		mrcs[1].tries = mrcs[2].tries = mrcs[3].tries = 0;
  90de2b:	241435        	s8i	a4, a1, 53
  90de2e:	241429        	s8i	a4, a1, 41
  90de31:	24141d        	s8i	a4, a1, 29
		mrcs[1].rix = mrcs[2].rix = mrcs[3].rix = 0;
  90de34:	241434        	s8i	a4, a1, 52
  90de37:	241428        	s8i	a4, a1, 40
  90de3a:	24141c        	s8i	a4, a1, 28
		mrcs[0].rix   = 0;
  90de3d:	241410        	s8i	a4, a1, 16
		mrcs[0].tries = 1;
  90de40:	251411        	s8i	a5, a1, 17
		mrcs[0].flags = 0;
  90de43:	241413        	s8i	a4, a1, 19
		ath_hal_memcpy(bf->bf_rcs, mrcs, sizeof(mrcs));
  90de46:	2a3c50        	addi	a10, a3, 80
  90de49:	2b1c10        	addi	a11, a1, 16
  90de4c:	c3c0      	movi.n	a12, 48
  90de4e:	5be73d        	call8	907b44 <ath_hal_memcpy>
	}

	ath_buf_set_rate(sc, bf);
  90de51:	da20      	mov.n	a10, a2
  90de53:	db30      	mov.n	a11, a3
  90de55:	5bfd0c        	call8	90d288 <ath_buf_set_rate>
	bf->bf_txq_add(sc, bf);
  90de58:	243210        	l32i	a4, a3, 64
  90de5b:	da20      	mov.n	a10, a2
  90de5d:	db30      	mov.n	a11, a3
  90de5f:	0b4000        	callx8	a4
  90de62:	d10f      	retw.n

0090de64 <ath_tgt_send_mgt>:
}

void
ath_tgt_send_mgt(struct ath_softc_tgt *sc,adf_nbuf_t hdr_buf, adf_nbuf_t skb,
		 HTC_ENDPOINT_ID endpt)
{
  90de64:	6c1024        	entry	a1, 0x120
	struct ieee80211_node_target *ni;
	struct ieee80211vap_target *vap;
	struct ath_vap_target *avp;
	struct ath_hal *ah = sc->sc_ah;
  90de67:	262d05        	addmi	a6, a2, 0x500
  90de6a:	866b      	l32i.n	a6, a6, 44
  90de6c:	2b0aa4        	movi	a11, 164
  90de6f:	261635        	s32i	a6, a1, 212
  90de72:	2c0aa0        	movi	a12, 160
	struct ath_rc_series rcs[4];
	HAL_11N_RATE_SERIES series[4];
	ath_mgt_hdr_t *mh;
	a_int8_t keyix;

	if (!hdr_buf) {
  90de75:	cd37      	bnez.n	a3, 90de90 <ath_tgt_send_mgt+0x2c>
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90de77:	231c20        	addi	a3, a1, 32
  90de7a:	da40      	mov.n	a10, a4
  90de7c:	0b3b08        	add	a11, a3, a11
  90de7f:	0c3c08        	add	a12, a3, a12
  90de82:	5be387        	call8	906ca0 <__adf_nbuf_peek_header>
 *         or NULL if there is not sufficient data to pull.
 */
static inline a_uint8_t *
adf_nbuf_pull_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_pull_head(buf, size);
  90de85:	da40      	mov.n	a10, a4
  90de87:	c0b8      	movi.n	a11, 8
  90de89:	5be2b6        	call8	906964 <__adf_nbuf_pull_head>
  90de8c:	60000c        	j	90de9c <ath_tgt_send_mgt+0x38>
  90de8f:	00261c        	mul16u	a6, a2, a0
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90de92:	20da30        	movi	a0, 0xfffffd30
  90de95:	ab6b      	add.n	a11, a6, a11
  90de97:	ac6c      	add.n	a12, a6, a12
  90de99:	5be381        	call8	906ca0 <__adf_nbuf_peek_header>
		adf_nbuf_pull_head(skb, sizeof(ath_mgt_hdr_t));
	} else {
		adf_nbuf_peek_header(hdr_buf, &data, &len);
	}

	adf_os_assert(len >= sizeof(ath_mgt_hdr_t));
  90de9c:	231230        	l32i	a3, a1, 192
  90de9f:	6f3816        	bgeui	a3, 8, 90deb9 <ath_tgt_send_mgt+0x55>
  90dea2:	136915        	l32r	a3, 8e82f8 <memset+0x14b0>
  90dea5:	1a6afb        	l32r	a10, 8e8a94 <memset+0x1c4c>
  90dea8:	233212        	l32i	a3, a3, 72
  90deab:	1b6b0a        	l32r	a11, 8e8ad4 <memset+0x1c8c>
  90deae:	0b3000        	callx8	a3
  90deb1:	13697a        	l32r	a3, 8e849c <memset+0x1654>
  90deb4:	0c0200        	memw
  90deb7:	8330      	l32i.n	a3, a3, 0
  90deb9:	281c20        	addi	a8, a1, 32
  90debc:	2b0aa4        	movi	a11, 164
  90debf:	2c0aa0        	movi	a12, 160
  90dec2:	0b8b08        	add	a11, a8, a11
  90dec5:	0c8c08        	add	a12, a8, a12
  90dec8:	044a02        	or	a10, a4, a4

	mh = (ath_mgt_hdr_t *)data;
  90decb:	231231        	l32i	a3, a1, 196
  90dece:	5be374        	call8	906ca0 <__adf_nbuf_peek_header>
  90ded1:	2c1c20        	addi	a12, a1, 32
  90ded4:	2acc70        	addi	a10, a12, 112
  90ded7:	2b0a30        	movi	a11, 48
	adf_nbuf_peek_header(skb, &data, &len);
	wh = (struct ieee80211_frame *)data;
  90deda:	261231        	l32i	a6, a1, 196
  90dedd:	5bfce5        	call8	90d274 <__adf_os_mem_set$constprop$13>
  90dee0:	2a1c20        	addi	a10, a1, 32
  90dee3:	2b0a70        	movi	a11, 112
  90dee6:	5bfce3        	call8	90d274 <__adf_os_mem_set$constprop$13>

	adf_os_mem_set(rcs, 0, sizeof(struct ath_rc_series)*4);
	adf_os_mem_set(series, 0, sizeof(HAL_11N_RATE_SERIES)*4);

	bf = asf_tailq_first(&sc->sc_txbuf);
  90dee9:	2722f0        	l32i	a7, a2, 0x3c0
	if (!bf)
  90deec:	647375        	beqz	a7, 90e265 <ath_tgt_send_mgt+0x401>
		goto fail;

	asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  90deef:	8979      	l32i.n	a9, a7, 36
  90def1:	8a7a      	l32i.n	a10, a7, 40
  90def3:	c895      	beqz.n	a9, 90defc <ath_tgt_send_mgt+0x98>
  90def5:	9a9a      	s32i.n	a10, a9, 40
  90def7:	600004        	j	90deff <ath_tgt_send_mgt+0x9b>
  90defa:	00002a        	muluh	a0, a0, a0
  90defd:	26f18a        	l16ui	a6, a15, 0x114
  90df00:	7a99a0        	bne	a9, a10, 90dea4 <ath_tgt_send_mgt+0x40>

	ni = ath_tgt_find_node(sc, mh->ni_index);
  90df03:	293000        	l8ui	a9, a3, 0
							a_int32_t node_index)
{
	struct ath_node_target *an;
	struct ieee80211_node_target *ni;

	if (node_index > TARGET_NODE_MAX)
  90df06:	c0a8      	movi.n	a10, 8
  90df08:	79aa02        	bge	a10, a9, 90df0e <ath_tgt_send_mgt+0xaa>
  90df0b:	600356        	j	90e265 <ath_tgt_send_mgt+0x401>
	  	return NULL;

	an = &sc->sc_sta[node_index];
  90df0e:	0a9e11        	slli	a14, a9, 6
  90df11:	a9ee      	add.n	a14, a14, a9
  90df13:	09ee09        	addx2	a14, a14, a9
  90df16:	2a5a30        	movi	a10, 0x530
  90df19:	0aee0a        	addx4	a14, a14, a10
  90df1c:	ae2e      	add.n	a14, a2, a14
  90df1e:	b8ee      	addi.n	a14, a14, 8
	ni = &an->ni;

	if (an->an_valid) {
  90df20:	29ed02        	addmi	a9, a14, 0x200
  90df23:	299004        	l8ui	a9, a9, 4
  90df26:	64933b        	beqz	a9, 90e265 <ath_tgt_send_mgt+0x401>
		if (ni->ni_vap == NULL) {
  90df29:	29e208        	l32i	a9, a14, 32
  90df2c:	649335        	beqz	a9, 90e265 <ath_tgt_send_mgt+0x401>

	ni = ath_tgt_find_node(sc, mh->ni_index);
	if (!ni)
		goto fail;

	bf->bf_endpt = endpt;
  90df2f:	257623        	s32i	a5, a7, 140
	bf->bf_cookie = mh->cookie;
  90df32:	253006        	l8ui	a5, a3, 6
	bf->bf_protmode = mh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
	hdrlen = ieee80211_anyhdrsize(wh);
  90df35:	066a02        	or	a10, a6, a6
	ni = ath_tgt_find_node(sc, mh->ni_index);
	if (!ni)
		goto fail;

	bf->bf_endpt = endpt;
	bf->bf_cookie = mh->cookie;
  90df38:	257492        	s8i	a5, a7, 146
	bf->bf_protmode = mh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
  90df3b:	253003        	l8ui	a5, a3, 3
  90df3e:	050541        	extui	a5, a5, 0, 2
  90df41:	257484        	s8i	a5, a7, 132
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
  90df44:	296001        	l8ui	a9, a6, 1
  90df47:	250a40        	movi	a5, 64
  90df4a:	059901        	and	a9, a9, a5
  90df4d:	29163a        	s32i	a9, a1, 232
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
  90df50:	256004        	l8ui	a5, a6, 4
	hdrlen = ieee80211_anyhdrsize(wh);
  90df53:	2e163c        	s32i	a14, a1, 240
  90df56:	5bfbd2        	call8	90cea0 <ieee80211_anyhdrsize>
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
	pktlen -= (hdrlen & 3);
  90df59:	0a0941        	extui	a9, a10, 0, 2
	bf->bf_cookie = mh->cookie;
	bf->bf_protmode = mh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
	hdrlen = ieee80211_anyhdrsize(wh);
  90df5c:	2a163b        	s32i	a10, a1, 236
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
	pktlen -= (hdrlen & 3);
  90df5f:	2a1230        	l32i	a10, a1, 192
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
	hdrlen = ieee80211_anyhdrsize(wh);
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
  90df62:	280aff        	movi	a8, 255
	pktlen -= (hdrlen & 3);
  90df65:	09a90c        	sub	a9, a10, a9
	pktlen += IEEE80211_CRC_LEN;
  90df68:	b499      	addi.n	a9, a9, 4
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
	hdrlen = ieee80211_anyhdrsize(wh);
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
  90df6a:	281639        	s32i	a8, a1, 228
	pktlen -= (hdrlen & 3);
	pktlen += IEEE80211_CRC_LEN;

	if (iswep)
  90df6d:	28123a        	l32i	a8, a1, 232
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
	hdrlen = ieee80211_anyhdrsize(wh);
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
	pktlen -= (hdrlen & 3);
	pktlen += IEEE80211_CRC_LEN;
  90df70:	291637        	s32i	a9, a1, 220
	bf->bf_endpt = endpt;
	bf->bf_cookie = mh->cookie;
	bf->bf_protmode = mh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
  90df73:	050540        	extui	a5, a5, 0, 1
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
	pktlen -= (hdrlen & 3);
	pktlen += IEEE80211_CRC_LEN;

	if (iswep)
  90df76:	2e123c        	l32i	a14, a1, 240
  90df79:	c884      	beqz.n	a8, 90df81 <ath_tgt_send_mgt+0x11d>
		keyix = mh->keyix;
  90df7b:	283005        	l8ui	a8, a3, 5
  90df7e:	281639        	s32i	a8, a1, 228
adf_nbuf_map(adf_os_device_t        osdev, 
             adf_os_dma_map_t       bmap, 
             adf_nbuf_t             buf, 
             adf_os_dma_dir_t       dir)
{
    return __adf_nbuf_map(osdev, bmap, buf, dir);
  90df81:	8b70      	l32i.n	a11, a7, 0
  90df83:	2a2246        	l32i	a10, a2, 0x118
  90df86:	dc40      	mov.n	a12, a4
  90df88:	c0d0      	movi.n	a13, 0
  90df8a:	2e163c        	s32i	a14, a1, 240
  90df8d:	5be2bb        	call8	906a7c <__adf_nbuf_map>
 * @param[in] buf   buf
 */
static inline void
adf_nbuf_queue_add(adf_nbuf_queue_t *head, adf_nbuf_t buf)
{
    __adf_nbuf_queue_add(head, buf);
  90df90:	db40      	mov.n	a11, a4

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, skb, ADF_OS_DMA_TO_DEVICE);

	bf->bf_skb = skb;
  90df92:	9478      	s32i.n	a4, a7, 32
  90df94:	2a7c14        	addi	a10, a7, 20
  90df97:	5be2a0        	call8	906a18 <__adf_nbuf_queue_add>
	adf_nbuf_queue_add(&bf->bf_skbhead, skb);

	ds = bf->bf_desc;
  90df9a:	847c      	l32i.n	a4, a7, 48
	rt = sc->sc_currates;
  90df9c:	292281        	l32i	a9, a2, 0x204
	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, skb, ADF_OS_DMA_TO_DEVICE);

	bf->bf_skb = skb;
	adf_nbuf_queue_add(&bf->bf_skbhead, skb);

	ds = bf->bf_desc;
  90df9f:	241638        	s32i	a4, a1, 224
	rt = sc->sc_currates;
	adf_os_assert(rt != NULL);
  90dfa2:	2e123c        	l32i	a14, a1, 240
  90dfa5:	cd9f      	bnez.n	a9, 90dfc8 <ath_tgt_send_mgt+0x164>
  90dfa7:	146915        	l32r	a4, 8e83fc <memset+0x15b4>
  90dfaa:	1a6afb        	l32r	a10, 8e8b98 <memset+0x1d50>
  90dfad:	244212        	l32i	a4, a4, 72
  90dfb0:	1b6b0a        	l32r	a11, 8e8bd8 <memset+0x1d90>
  90dfb3:	29163f        	s32i	a9, a1, 252
  90dfb6:	0b4000        	callx8	a4
  90dfb9:	14697a        	l32r	a4, 8e85a4 <memset+0x175c>
  90dfbc:	2e123c        	l32i	a14, a1, 240
  90dfbf:	0c0200        	memw
  90dfc2:	244200        	l32i	a4, a4, 0
  90dfc5:	29123f        	l32i	a9, a1, 252

	if (mh->flags == ATH_SHORT_PREAMBLE)
  90dfc8:	2a3003        	l8ui	a10, a3, 3
  90dfcb:	c040      	movi.n	a4, 0
  90dfcd:	b0aa      	addi.n	a10, a10, -1
  90dfcf:	c0b1      	movi.n	a11, 1
  90dfd1:	d840      	mov.n	a8, a4
	else
		shortPreamble = AH_FALSE;

	flags = HAL_TXDESC_CLRDMASK;

	switch (wh->i_fc[0] & IEEE80211_FC0_TYPE_MASK) {
  90dfd3:	2c6000        	l8ui	a12, a6, 0

	ds = bf->bf_desc;
	rt = sc->sc_currates;
	adf_os_assert(rt != NULL);

	if (mh->flags == ATH_SHORT_PREAMBLE)
  90dfd6:	0ab838        	moveqz	a8, a11, a10
	else
		shortPreamble = AH_FALSE;

	flags = HAL_TXDESC_CLRDMASK;

	switch (wh->i_fc[0] & IEEE80211_FC0_TYPE_MASK) {
  90dfd9:	c0ac      	movi.n	a10, 12
  90dfdb:	0aca01        	and	a10, a12, a10
  90dfde:	74a91f        	bne	a10, a4, 90e001 <ath_tgt_send_mgt+0x19d>
	case IEEE80211_FC0_TYPE_MGT:
		subtype = wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK;
  90dfe1:	c740      	movi.n	a4, -16
  90dfe3:	04c401        	and	a4, a12, a4

		if (subtype == IEEE80211_FC0_SUBTYPE_PROBE_RESP)
			atype = HAL_PKT_TYPE_PROBE_RESP;
  90dfe6:	c0c4      	movi.n	a12, 4
  90dfe8:	2c1636        	s32i	a12, a1, 216

	switch (wh->i_fc[0] & IEEE80211_FC0_TYPE_MASK) {
	case IEEE80211_FC0_TYPE_MGT:
		subtype = wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK;

		if (subtype == IEEE80211_FC0_SUBTYPE_PROBE_RESP)
  90dfeb:	c5c0      	movi.n	a12, 80
  90dfed:	7c4113        	beq	a4, a12, 90e004 <ath_tgt_send_mgt+0x1a0>
			atype = HAL_PKT_TYPE_PROBE_RESP;
		else if (subtype == IEEE80211_FC0_SUBTYPE_ATIM)
  90dff0:	2cfa70        	movi	a12, -144
  90dff3:	ac44      	add.n	a4, a4, a12
  90dff5:	04ba38        	moveqz	a10, a11, a4
  90dff8:	2a1636        	s32i	a10, a1, 216
  90dffb:	600005        	j	90e004 <ath_tgt_send_mgt+0x1a0>
  90dffe:	000000        	ill
		else
			atype = HAL_PKT_TYPE_NORMAL;

		break;
	default:
		atype = HAL_PKT_TYPE_NORMAL;
  90e001:	241636        	s32i	a4, a1, 216
		break;
	}

	avp = &sc->sc_vap[mh->vap_index];
  90e004:	243001        	l8ui	a4, a3, 1
  90e007:	1a6a18        	l32r	a10, 8e8868 <memset+0x1a20>
  90e00a:	0c4b11        	slli	a11, a4, 4
  90e00d:	a4bb      	add.n	a11, a11, a4
  90e00f:	0abb0a        	addx4	a11, a11, a10
  90e012:	ab2b      	add.n	a11, a2, a11

	rcs[0].rix = ath_get_minrateidx(sc, avp);
  90e014:	2bbc08        	addi	a11, a11, 8
	rcs[0].tries = ATH_TXMAXTRY;
  90e017:	240a0b        	movi	a4, 11
		break;
	}

	avp = &sc->sc_vap[mh->vap_index];

	rcs[0].rix = ath_get_minrateidx(sc, avp);
  90e01a:	da20      	mov.n	a10, a2
  90e01c:	28163e        	s32i	a8, a1, 248
  90e01f:	29163f        	s32i	a9, a1, 252
  90e022:	2e163c        	s32i	a14, a1, 240
  90e025:	5bed30        	call8	9094e8 <ath_get_minrateidx>
	rcs[0].tries = ATH_TXMAXTRY;
  90e028:	241491        	s8i	a4, a1, 145
	rcs[0].flags = 0;
  90e02b:	c040      	movi.n	a4, 0
  90e02d:	241493        	s8i	a4, a1, 147
 * @param[in] size    buffer size
 */
static inline void
adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    __adf_os_mem_copy(dst, src, size);
  90e030:	241c20        	addi	a4, a1, 32
  90e033:	2b4c70        	addi	a11, a4, 112
		break;
	}

	avp = &sc->sc_vap[mh->vap_index];

	rcs[0].rix = ath_get_minrateidx(sc, avp);
  90e036:	2a1490        	s8i	a10, a1, 144
  90e039:	c3c0      	movi.n	a12, 48
  90e03b:	2a7c50        	addi	a10, a7, 80
  90e03e:	5bfb93        	call8	90ce8c <__adf_os_mem_copy>
	rcs[0].flags = 0;

	adf_os_mem_copy(bf->bf_rcs, rcs, sizeof(rcs));
	rix = rcs[0].rix;
	try0 = rcs[0].tries;
	txrate = rt->info[rix].rateCode;
  90e041:	2d1090        	l8ui	a13, a1, 144
  90e044:	29123f        	l32i	a9, a1, 252
  90e047:	0dd40a        	addx4	a4, a13, a13
  90e04a:	09440a        	addx4	a4, a4, a9
  90e04d:	2a4034        	l8ui	a10, a4, 52

	if (shortPreamble){
  90e050:	28123e        	l32i	a8, a1, 248
	rcs[0].flags = 0;

	adf_os_mem_copy(bf->bf_rcs, rcs, sizeof(rcs));
	rix = rcs[0].rix;
	try0 = rcs[0].tries;
	txrate = rt->info[rix].rateCode;
  90e053:	2a1634        	s32i	a10, a1, 208
	rcs[0].tries = ATH_TXMAXTRY;
	rcs[0].flags = 0;

	adf_os_mem_copy(bf->bf_rcs, rcs, sizeof(rcs));
	rix = rcs[0].rix;
	try0 = rcs[0].tries;
  90e056:	2b1091        	l8ui	a11, a1, 145
	txrate = rt->info[rix].rateCode;
  90e059:	244c20        	addi	a4, a4, 32

	if (shortPreamble){
  90e05c:	2e123c        	l32i	a14, a1, 240
  90e05f:	c887      	beqz.n	a8, 90e06a <ath_tgt_send_mgt+0x206>
		txrate |= rt->info[rix].shortPreamble;
  90e061:	244015        	l8ui	a4, a4, 21
  90e064:	04aa02        	or	a10, a10, a4
  90e067:	2a1634        	s32i	a10, a1, 208
	}

	vap = ni->ni_vap;
  90e06a:	84e8      	l32i.n	a4, a14, 32
	bf->bf_node = ni;
  90e06c:	9e74      	s32i.n	a14, a7, 16

	if (ismcast) {
  90e06e:	cd56      	bnez.n	a5, 90e088 <ath_tgt_send_mgt+0x224>
		flags |= HAL_TXDESC_NOACK;
		try0 = 1;
	} else if (pktlen > vap->iv_rtsthreshold) {
  90e070:	244105        	l16ui	a4, a4, 10
  90e073:	251237        	l32i	a5, a1, 220
  90e076:	754a16        	bge	a4, a5, 90e090 <ath_tgt_send_mgt+0x22c>
		flags |= HAL_TXDESC_RTSENA;
		cix = rt->info[rix].controlRate;
  90e079:	0dd40a        	addx4	a4, a13, a13
  90e07c:	09440a        	addx4	a4, a4, a9
  90e07f:	2c4037        	l8ui	a12, a4, 55

	if (ismcast) {
		flags |= HAL_TXDESC_NOACK;
		try0 = 1;
	} else if (pktlen > vap->iv_rtsthreshold) {
		flags |= HAL_TXDESC_RTSENA;
  90e082:	c055      	movi.n	a5, 5
  90e084:	60000d        	j	90e095 <ath_tgt_send_mgt+0x231>
  90e087:	00c0b1        	excw

	vap = ni->ni_vap;
	bf->bf_node = ni;

	if (ismcast) {
		flags |= HAL_TXDESC_NOACK;
  90e08a:	c053      	movi.n	a5, 3
  90e08c:	600002        	j	90e092 <ath_tgt_send_mgt+0x22e>
  90e08f:	00c051        	extui	a0, a0, 28, 2
{
	struct ieee80211_node_target *ni;
	struct ieee80211vap_target *vap;
	struct ath_vap_target *avp;
	struct ath_hal *ah = sc->sc_ah;
	a_uint8_t rix, txrate, ctsrate, cix = 0xff, *data;
  90e092:	2c0aff        	movi	a12, 255
	} else if (pktlen > vap->iv_rtsthreshold) {
		flags |= HAL_TXDESC_RTSENA;
		cix = rt->info[rix].controlRate;
	}

	if ((bf->bf_protmode != IEEE80211_PROT_NONE) &&
  90e095:	247084        	l8ui	a4, a7, 132
  90e098:	ca44      	beqz.n	a4, 90e0c0 <ath_tgt_send_mgt+0x25c>
	    rt->info[rix].phy == IEEE80211_T_OFDM &&
  90e09a:	0dd40a        	addx4	a4, a13, a13
  90e09d:	09440a        	addx4	a4, a4, a9
	} else if (pktlen > vap->iv_rtsthreshold) {
		flags |= HAL_TXDESC_RTSENA;
		cix = rt->info[rix].controlRate;
	}

	if ((bf->bf_protmode != IEEE80211_PROT_NONE) &&
  90e0a0:	244029        	l8ui	a4, a4, 41
  90e0a3:	694219        	bnei	a4, 2, 90e0c0 <ath_tgt_send_mgt+0x25c>
	    rt->info[rix].phy == IEEE80211_T_OFDM &&
  90e0a6:	745816        	bany	a5, a4, 90e0c0 <ath_tgt_send_mgt+0x25c>
	    (flags & HAL_TXDESC_NOACK) == 0) {
		cix = rt->info[sc->sc_protrix].controlRate;
  90e0a9:	242d03        	addmi	a4, a2, 0x300
  90e0ac:	24400c        	l8ui	a4, a4, 12
  90e0af:	04440a        	addx4	a4, a4, a4
  90e0b2:	09440a        	addx4	a4, a4, a9
  90e0b5:	2c4037        	l8ui	a12, a4, 55
		sc->sc_tx_stats.ast_tx_protect++;
  90e0b8:	24225a        	l32i	a4, a2, 0x168
  90e0bb:	b144      	addi.n	a4, a4, 1
  90e0bd:	24265a        	s32i	a4, a2, 0x168
	}

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
  90e0c0:	24e10c        	l16ui	a4, a14, 24
							   IEEE80211_SEQ_SEQ_SHIFT);
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);

	ctsduration = 0;
	if (flags & (HAL_TXDESC_RTSENA|HAL_TXDESC_CTSENA)) {
  90e0c3:	c0fc      	movi.n	a15, 12
	    (flags & HAL_TXDESC_NOACK) == 0) {
		cix = rt->info[sc->sc_protrix].controlRate;
		sc->sc_tx_stats.ast_tx_protect++;
	}

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
  90e0c5:	0c4411        	slli	a4, a4, 4
  90e0c8:	04044f        	extui	a4, a4, 0, 16

#undef adf_os_cpu_to_le16

static a_uint16_t adf_os_cpu_to_le16(a_uint16_t x)
{
	return ((((x) & 0xff00) >> 8) |   (((x) & 0x00ff) << 8));
  90e0cb:	084a11        	slli	a10, a4, 8
  90e0ce:	048414        	srli	a4, a4, 8
  90e0d1:	04a402        	or	a4, a10, a4
	    (flags & HAL_TXDESC_NOACK) == 0) {
		cix = rt->info[sc->sc_protrix].controlRate;
		sc->sc_tx_stats.ast_tx_protect++;
	}

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
  90e0d4:	24650b        	s16i	a4, a6, 22
							   IEEE80211_SEQ_SEQ_SHIFT);
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90e0d7:	24e10c        	l16ui	a4, a14, 24

	ctsduration = 0;
	if (flags & (HAL_TXDESC_RTSENA|HAL_TXDESC_CTSENA)) {
  90e0da:	0f5f01        	and	a15, a5, a15
		sc->sc_tx_stats.ast_tx_protect++;
	}

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
							   IEEE80211_SEQ_SEQ_SHIFT);
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90e0dd:	b144      	addi.n	a4, a4, 1
  90e0df:	04044b        	extui	a4, a4, 0, 12
  90e0e2:	24e50c        	s16i	a4, a14, 24

	ctsduration = 0;
	if (flags & (HAL_TXDESC_RTSENA|HAL_TXDESC_CTSENA)) {
  90e0e5:	64f091        	beqz	a15, 90e17a <ath_tgt_send_mgt+0x316>
		adf_os_assert(cix != 0xff);
  90e0e8:	240aff        	movi	a4, 255
  90e0eb:	74c92e        	bne	a12, a4, 90e11d <ath_tgt_send_mgt+0x2b9>
  90e0ee:	146915        	l32r	a4, 8e8544 <memset+0x16fc>
  90e0f1:	1a6afb        	l32r	a10, 8e8ce0 <memset+0x1e98>
  90e0f4:	244212        	l32i	a4, a4, 72
  90e0f7:	1b6b0a        	l32r	a11, 8e8d20 <memset+0x1ed8>
  90e0fa:	28163e        	s32i	a8, a1, 248
  90e0fd:	29163f        	s32i	a9, a1, 252
  90e100:	2c163c        	s32i	a12, a1, 240
  90e103:	2d163d        	s32i	a13, a1, 244
  90e106:	0b4000        	callx8	a4
  90e109:	14697a        	l32r	a4, 8e86f4 <memset+0x18ac>
  90e10c:	2d123d        	l32i	a13, a1, 244
  90e10f:	0c0200        	memw
  90e112:	8440      	l32i.n	a4, a4, 0
  90e114:	2c123c        	l32i	a12, a1, 240
  90e117:	29123f        	l32i	a9, a1, 252
  90e11a:	28123e        	l32i	a8, a1, 248
		ctsrate = rt->info[cix].rateCode;
  90e11d:	0cca0a        	addx4	a10, a12, a12
  90e120:	09aa0a        	addx4	a10, a10, a9
  90e123:	24a034        	l8ui	a4, a10, 52
  90e126:	c0b4      	movi.n	a11, 4
		if (shortPreamble) {
  90e128:	c98c      	beqz.n	a8, 90e148 <ath_tgt_send_mgt+0x2e4>
			ctsrate |= rt->info[cix].shortPreamble;
  90e12a:	2ea035        	l8ui	a14, a10, 53

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
							   IEEE80211_SEQ_SEQ_SHIFT);
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);

	ctsduration = 0;
  90e12d:	c0f0      	movi.n	a15, 0
	if (flags & (HAL_TXDESC_RTSENA|HAL_TXDESC_CTSENA)) {
		adf_os_assert(cix != 0xff);
		ctsrate = rt->info[cix].rateCode;
		if (shortPreamble) {
			ctsrate |= rt->info[cix].shortPreamble;
  90e12f:	0e4402        	or	a4, a4, a14
			if (flags & HAL_TXDESC_RTSENA)      /* SIFS + CTS */
  90e132:	7b5002        	bnone	a5, a11, 90e138 <ath_tgt_send_mgt+0x2d4>
				ctsduration += rt->info[cix].spAckDuration;
  90e135:	2fa11d        	l16ui	a15, a10, 58
			if ((flags & HAL_TXDESC_NOACK) == 0)    /* SIFS + ACK */
  90e138:	7e5f22        	bbsi	a5, 30, 90e15e <ath_tgt_send_mgt+0x2fa>
				ctsduration += rt->info[cix].spAckDuration;
  90e13b:	0ccc0a        	addx4	a12, a12, a12
  90e13e:	09cc0a        	addx4	a12, a12, a9
  90e141:	2ac11d        	l16ui	a10, a12, 58
  90e144:	600014        	j	90e15c <ath_tgt_send_mgt+0x2f8>
  90e147:	00df80        	excw
		} else {
			if (flags & HAL_TXDESC_RTSENA)      /* SIFS + CTS */
  90e14a:	7b5002        	bnone	a5, a11, 90e150 <ath_tgt_send_mgt+0x2ec>
				ctsduration += rt->info[cix].lpAckDuration;
  90e14d:	2fa11c        	l16ui	a15, a10, 56
			if ((flags & HAL_TXDESC_NOACK) == 0)    /* SIFS + ACK */
  90e150:	7e5f0a        	bbsi	a5, 30, 90e15e <ath_tgt_send_mgt+0x2fa>
				ctsduration += rt->info[cix].lpAckDuration;
  90e153:	0ccc0a        	addx4	a12, a12, a12
  90e156:	09cc0a        	addx4	a12, a12, a9
  90e159:	2ac11c        	l16ui	a10, a12, 56
  90e15c:	aaff      	add.n	a15, a15, a10
		}
		ctsduration += ath_hal_computetxtime(ah,
  90e15e:	2a1235        	l32i	a10, a1, 212
  90e161:	2c1237        	l32i	a12, a1, 220
  90e164:	099b02        	or	a11, a9, a9
  90e167:	088e02        	or	a14, a8, a8
  90e16a:	2f163c        	s32i	a15, a1, 240
  90e16d:	5bf30a        	call8	90ad98 <ath_hal_computetxtime>
  90e170:	2f123c        	l32i	a15, a1, 240
						     rt, pktlen, rix, shortPreamble);
		try0 = 1;
  90e173:	c0b1      	movi.n	a11, 1
			if (flags & HAL_TXDESC_RTSENA)      /* SIFS + CTS */
				ctsduration += rt->info[cix].lpAckDuration;
			if ((flags & HAL_TXDESC_NOACK) == 0)    /* SIFS + ACK */
				ctsduration += rt->info[cix].lpAckDuration;
		}
		ctsduration += ath_hal_computetxtime(ah,
  90e175:	afaa      	add.n	a10, a10, a15
  90e177:	600003        	j	90e17e <ath_tgt_send_mgt+0x31a>

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
							   IEEE80211_SEQ_SEQ_SHIFT);
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);

	ctsduration = 0;
  90e17a:	daf0      	mov.n	a10, a15
		}
		ctsduration += ath_hal_computetxtime(ah,
						     rt, pktlen, rix, shortPreamble);
		try0 = 1;
	} else
		ctsrate = 0;
  90e17c:	d4f0      	mov.n	a4, a15

	flags |= HAL_TXDESC_INTREQ;

	ah->ah_setupTxDesc(ds
  90e17e:	281239        	l32i	a8, a1, 228
						     rt, pktlen, rix, shortPreamble);
		try0 = 1;
	} else
		ctsrate = 0;

	flags |= HAL_TXDESC_INTREQ;
  90e181:	c190      	movi.n	a9, 16
  90e183:	095502        	or	a5, a5, a9

	ah->ah_setupTxDesc(ds
  90e186:	008932        	sext	a9, a8, 7
  90e189:	281235        	l32i	a8, a1, 212
  90e18c:	9b10      	s32i.n	a11, a1, 0
  90e18e:	9512      	s32i.n	a5, a1, 8
  90e190:	9a14      	s32i.n	a10, a1, 16
  90e192:	9911      	s32i.n	a9, a1, 4
  90e194:	9413      	s32i.n	a4, a1, 12
  90e196:	298217        	l32i	a9, a8, 92
  90e199:	2a1238        	l32i	a10, a1, 224
  90e19c:	2b1237        	l32i	a11, a1, 220
  90e19f:	2c123b        	l32i	a12, a1, 236
  90e1a2:	2d1236        	l32i	a13, a1, 216
  90e1a5:	2f1234        	l32i	a15, a1, 208
  90e1a8:	c3ec      	movi.n	a14, 60
  90e1aa:	0b9000        	callx8	a9
			    , keyix
			    , flags
			    , ctsrate
			    , ctsduration);

	bf->bf_flags = flags;
  90e1ad:	257544        	s16i	a5, a7, 136

	/*
	 * Set key type in tx desc while sending the encrypted challenge to AP
	 * in Auth frame 3 of Shared Authentication, owl needs this.
	 */
	if (iswep && (keyix != HAL_TXKEYIX_INVALID) &&
  90e1b0:	25123a        	l32i	a5, a1, 232
  90e1b3:	c95f      	beqz.n	a5, 90e1d6 <ath_tgt_send_mgt+0x372>
			(wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK) == IEEE80211_FC0_SUBTYPE_AUTH)
  90e1b5:	266000        	l8ui	a6, a6, 0
  90e1b8:	250af0        	movi	a5, 240

	/*
	 * Set key type in tx desc while sending the encrypted challenge to AP
	 * in Auth frame 3 of Shared Authentication, owl needs this.
	 */
	if (iswep && (keyix != HAL_TXKEYIX_INVALID) &&
  90e1bb:	056601        	and	a6, a6, a5
  90e1be:	250ab0        	movi	a5, 176
  90e1c1:	756911        	bne	a6, a5, 90e1d6 <ath_tgt_send_mgt+0x372>
			(wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK) == IEEE80211_FC0_SUBTYPE_AUTH)
		ah->ah_fillKeyTxDesc(ds, mh->keytype);
  90e1c4:	261235        	l32i	a6, a1, 212
  90e1c7:	2b3004        	l8ui	a11, a3, 4
  90e1ca:	2a1238        	l32i	a10, a1, 224
  90e1cd:	236219        	l32i	a3, a6, 100
  90e1d0:	00bb32        	sext	a11, a11, 7
  90e1d3:	0b3000        	callx8	a3

	ath_filltxdesc(sc, bf);
  90e1d6:	da20      	mov.n	a10, a2
  90e1d8:	db70      	mov.n	a11, a7
  90e1da:	5bfbbe        	call8	90d0d4 <ath_filltxdesc>

	for (i=0; i<4; i++) {
		series[i].Tries = 2;
		series[i].Rate = txrate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90e1dd:	232d16        	addmi	a3, a2, 0x1600
  90e1e0:	2a3026        	l8ui	a10, a3, 38
  90e1e3:	231c20        	addi	a3, a1, 32
	sc->sc_tx_stats.ast_tx_shortretry += sr;
	sc->sc_tx_stats.ast_tx_longretry += lr;
}

void
ath_tgt_send_mgt(struct ath_softc_tgt *sc,adf_nbuf_t hdr_buf, adf_nbuf_t skb,
  90e1e6:	263c70        	addi	a6, a3, 112
		ah->ah_fillKeyTxDesc(ds, mh->keytype);

	ath_filltxdesc(sc, bf);

	for (i=0; i<4; i++) {
		series[i].Tries = 2;
  90e1e9:	c0b2      	movi.n	a11, 2
		series[i].Rate = txrate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
		series[i].RateFlags = 0;
  90e1eb:	c090      	movi.n	a9, 0

	ath_filltxdesc(sc, bf);

	for (i=0; i<4; i++) {
		series[i].Tries = 2;
		series[i].Rate = txrate;
  90e1ed:	281234        	l32i	a8, a1, 208
		ah->ah_fillKeyTxDesc(ds, mh->keytype);

	ath_filltxdesc(sc, bf);

	for (i=0; i<4; i++) {
		series[i].Tries = 2;
  90e1f0:	9b30      	s32i.n	a11, a3, 0
		series[i].Rate = txrate;
  90e1f2:	9831      	s32i.n	a8, a3, 4
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90e1f4:	9a33      	s32i.n	a10, a3, 12
		series[i].RateFlags = 0;
  90e1f6:	9934      	s32i.n	a9, a3, 16
  90e1f8:	233c1c        	addi	a3, a3, 28
  90e1fb:	c050      	movi.n	a5, 0
			(wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK) == IEEE80211_FC0_SUBTYPE_AUTH)
		ah->ah_fillKeyTxDesc(ds, mh->keytype);

	ath_filltxdesc(sc, bf);

	for (i=0; i<4; i++) {
  90e1fd:	7639ec        	bne	a3, a6, 90e1ed <ath_tgt_send_mgt+0x389>
		series[i].Tries = 2;
		series[i].Rate = txrate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
		series[i].RateFlags = 0;
	}
	ah->ah_set11nRateScenario(ds, 0, ctsrate, series, 4, 0);
  90e200:	261235        	l32i	a6, a1, 212
  90e203:	2a1238        	l32i	a10, a1, 224
  90e206:	236210        	l32i	a3, a6, 64
  90e209:	db50      	mov.n	a11, a5
  90e20b:	dc40      	mov.n	a12, a4
  90e20d:	df50      	mov.n	a15, a5
  90e20f:	2d1c20        	addi	a13, a1, 32
  90e212:	2e0a04        	movi	a14, 4
  90e215:	0b3000        	callx8	a3
static void
ath_tgt_txqaddbuf(struct ath_softc_tgt *sc,
		  struct ath_txq *txq, struct ath_tx_buf *bf,
		  struct ath_tx_desc *lastds)
{
	struct ath_hal *ah = sc->sc_ah;
  90e218:	232d05        	addmi	a3, a2, 0x500
  90e21b:	843b      	l32i.n	a4, a3, 44

	ATH_TXQ_INSERT_TAIL(txq, bf, bf_list);
  90e21d:	233aec        	movi	a3, 0x3ec
  90e220:	a323      	add.n	a3, a2, a3
  90e222:	9579      	s32i.n	a5, a7, 36
  90e224:	8533      	l32i.n	a5, a3, 12
		series[i].Rate = txrate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
		series[i].RateFlags = 0;
	}
	ah->ah_set11nRateScenario(ds, 0, ctsrate, series, 4, 0);
	ath_tgt_txqaddbuf(sc, txq, bf, bf->bf_lastds);
  90e226:	867e      	l32i.n	a6, a7, 56
		  struct ath_txq *txq, struct ath_tx_buf *bf,
		  struct ath_tx_desc *lastds)
{
	struct ath_hal *ah = sc->sc_ah;

	ATH_TXQ_INSERT_TAIL(txq, bf, bf_list);
  90e228:	957a      	s32i.n	a5, a7, 40
  90e22a:	9750      	s32i.n	a7, a5, 0
  90e22c:	257c24        	addi	a5, a7, 36
  90e22f:	9533      	s32i.n	a5, a3, 12
  90e231:	8534      	l32i.n	a5, a3, 16
  90e233:	9735      	s32i.n	a7, a3, 20
  90e235:	b155      	addi.n	a5, a5, 1
  90e237:	9534      	s32i.n	a5, a3, 16

	if (txq->axq_link == NULL) {
  90e239:	8531      	l32i.n	a5, a3, 4
  90e23b:	cc5d      	bnez.n	a5, 90e24c <ath_tgt_send_mgt+0x3e8>
		ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
  90e23d:	854a      	l32i.n	a5, a4, 40
  90e23f:	8b30      	l32i.n	a11, a3, 0
  90e241:	8c7c      	l32i.n	a12, a7, 48
  90e243:	da40      	mov.n	a10, a4
  90e245:	0b5000        	callx8	a5
  90e248:	600004        	j	90e250 <ath_tgt_send_mgt+0x3ec>
  90e24b:	00837c        	excw
	} else {
		*txq->axq_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
  90e24e:	9350      	s32i.n	a3, a5, 0
	}

	txq->axq_link = &lastds->ds_link;
  90e250:	233aec        	movi	a3, 0x3ec
  90e253:	a322      	add.n	a2, a2, a3
	ah->ah_startTxDma(ah, txq->axq_qnum);
  90e255:	8b20      	l32i.n	a11, a2, 0
  90e257:	834c      	l32i.n	a3, a4, 48
		ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
	} else {
		*txq->axq_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
	}

	txq->axq_link = &lastds->ds_link;
  90e259:	9621      	s32i.n	a6, a2, 4
	ah->ah_startTxDma(ah, txq->axq_qnum);
  90e25b:	da40      	mov.n	a10, a4
  90e25d:	0b3000        	callx8	a3
  90e260:	d10f      	retw.n
  90e262:	000000        	ill
	ah->ah_set11nRateScenario(ds, 0, ctsrate, series, 4, 0);
	ath_tgt_txqaddbuf(sc, txq, bf, bf->bf_lastds);

	return;
fail:
	HTC_ReturnBuffers(sc->tgt_htc_handle, endpt, skb);
  90e265:	136915        	l32r	a3, 8e86bc <memset+0x1874>
  90e268:	8a22      	l32i.n	a10, a2, 8
  90e26a:	233282        	l32i	a3, a3, 0x208
  90e26d:	db50      	mov.n	a11, a5
  90e26f:	dc40      	mov.n	a12, a4
  90e271:	0b3000        	callx8	a3
  90e274:	d10f      	retw.n
	...

0090e278 <ath_tgt_handle_normal>:
	txq->axq_link = &lastds->ds_link;
	ah->ah_startTxDma(ah, txq->axq_qnum);
}

void ath_tgt_handle_normal(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90e278:	6c1004        	entry	a1, 32
	ath_atx_tid_t *tid;
	struct ath_node_target *an;

	an = (struct ath_node_target *)bf->bf_node;
  90e27b:	253204        	l32i	a5, a3, 16
	adf_os_assert(an);
  90e27e:	655017        	bnez	a5, 90e299 <ath_tgt_handle_normal+0x21>
  90e281:	146915        	l32r	a4, 8e86d8 <memset+0x1890>
  90e284:	1a6afb        	l32r	a10, 8e8e70 <memset+0x2028>
  90e287:	244212        	l32i	a4, a4, 72
  90e28a:	1b6b0b        	l32r	a11, 8e8eb8 <memset+0x2070>
  90e28d:	0b4000        	callx8	a4
  90e290:	14697a        	l32r	a4, 8e8878 <memset+0x1a30>
  90e293:	0c0200        	memw
  90e296:	244200        	l32i	a4, a4, 0

	tid = &an->tid[bf->bf_tidno];
  90e299:	24304d        	l8ui	a4, a3, 77
  90e29c:	0c4811        	slli	a8, a4, 4
  90e29f:	04840c        	sub	a4, a8, a4
  90e2a2:	05440a        	addx4	a4, a4, a5
  90e2a5:	244c24        	addi	a4, a4, 36
	adf_os_assert(tid);
  90e2a8:	cd45      	bnez.n	a4, 90e2c1 <ath_tgt_handle_normal+0x49>
  90e2aa:	156915        	l32r	a5, 8e8700 <memset+0x18b8>
  90e2ad:	1a6afb        	l32r	a10, 8e8e9c <memset+0x2054>
  90e2b0:	255212        	l32i	a5, a5, 72
  90e2b3:	1b6b0b        	l32r	a11, 8e8ee0 <memset+0x2098>
  90e2b6:	0b5000        	callx8	a5
  90e2b9:	15697a        	l32r	a5, 8e88a4 <memset+0x1a5c>
  90e2bc:	0c0200        	memw
  90e2bf:	8550      	l32i.n	a5, a5, 0

	bf->bf_comp = ath_tgt_tx_comp_normal;
  90e2c1:	156b0c        	l32r	a5, 8e8ef4 <memset+0x20ac>
	INCR(tid->seq_start, IEEE80211_SEQ_MAX);
	ath_tgt_tx_send_normal(sc, bf);
  90e2c4:	da20      	mov.n	a10, a2
	adf_os_assert(an);

	tid = &an->tid[bf->bf_tidno];
	adf_os_assert(tid);

	bf->bf_comp = ath_tgt_tx_comp_normal;
  90e2c6:	953f      	s32i.n	a5, a3, 60
	INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90e2c8:	254102        	l16ui	a5, a4, 4
	ath_tgt_tx_send_normal(sc, bf);
  90e2cb:	db30      	mov.n	a11, a3

	tid = &an->tid[bf->bf_tidno];
	adf_os_assert(tid);

	bf->bf_comp = ath_tgt_tx_comp_normal;
	INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90e2cd:	b155      	addi.n	a5, a5, 1
  90e2cf:	05054b        	extui	a5, a5, 0, 12
  90e2d2:	254502        	s16i	a5, a4, 4
	ath_tgt_tx_send_normal(sc, bf);
  90e2d5:	5bfec2        	call8	90dde0 <ath_tgt_tx_send_normal>
  90e2d8:	d10f      	retw.n
	...

0090e2dc <ath_tx_addto_baw>:

	return ATH_TGT_AGGR_DONE;
}

void ath_tx_addto_baw(ath_atx_tid_t *tid, struct ath_tx_buf *bf)
{
  90e2dc:	6c1004        	entry	a1, 32
	int index, cindex;

	if (bf->bf_isretried) {
  90e2df:	283221        	l32i	a8, a3, 132
  90e2e2:	7b8f3e        	bbsi	a8, 27, 90e324 <ath_tx_addto_baw+0x48>
		return;
	}

	index  = ATH_BA_INDEX(tid->seq_start, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90e2e5:	293123        	l16ui	a9, a3, 70
  90e2e8:	232102        	l16ui	a3, a2, 4
  90e2eb:	094914        	srli	a9, a9, 4
  90e2ee:	03990c        	sub	a9, a9, a3
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);
  90e2f1:	8a23      	l32i.n	a10, a2, 12

	if (bf->bf_isretried) {
		return;
	}

	index  = ATH_BA_INDEX(tid->seq_start, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90e2f3:	09094b        	extui	a9, a9, 0, 12
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);
  90e2f6:	a9ac      	add.n	a12, a10, a9
  90e2f8:	0c0846        	extui	a8, a12, 0, 7

	TX_BUF_BITMAP_SET(tid->tx_buf_bitmap, cindex);
  90e2fb:	085b12        	srai	a11, a8, 5
  90e2fe:	b4bb      	addi.n	a11, a11, 4
  90e300:	02bb0a        	addx4	a11, a11, a2
  90e303:	c031      	movi.n	a3, 1
  90e305:	00c104        	ssl	a12
  90e308:	003c1a        	sll	a12, a3
  90e30b:	83b1      	l32i.n	a3, a11, 4
  90e30d:	0c3c02        	or	a12, a3, a12

	if (index >= ((tid->baw_tail - tid->baw_head) & (ATH_TID_MAX_BUFS - 1))) {
  90e310:	8324      	l32i.n	a3, a2, 16
	}

	index  = ATH_BA_INDEX(tid->seq_start, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);

	TX_BUF_BITMAP_SET(tid->tx_buf_bitmap, cindex);
  90e312:	9cb1      	s32i.n	a12, a11, 4

	if (index >= ((tid->baw_tail - tid->baw_head) & (ATH_TID_MAX_BUFS - 1))) {
  90e314:	0a3a0c        	sub	a10, a3, a10
  90e317:	0a0a46        	extui	a10, a10, 0, 7
  90e31a:	7a9206        	blt	a9, a10, 90e324 <ath_tx_addto_baw+0x48>
		tid->baw_tail = cindex;
		INCR(tid->baw_tail, ATH_TID_MAX_BUFS);
  90e31d:	b188      	addi.n	a8, a8, 1
  90e31f:	080846        	extui	a8, a8, 0, 7
  90e322:	9824      	s32i.n	a8, a2, 16
  90e324:	d10f      	retw.n
	...

0090e328 <ath_tgt_tx_form_aggr>:
	return aggr_limit;
}

int ath_tgt_tx_form_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid,
			 ath_tx_bufhead *bf_q)
{
  90e328:	6c100c        	entry	a1, 96
  90e32b:	9219      	s32i.n	a2, a1, 36
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
	int nframes = 0, rl = 0;;
	struct ath_tx_desc *ds = NULL;
	struct ath_tx_buf *bf;
	struct ath_hal *ah = sc->sc_ah;
  90e32d:	8519      	l32i.n	a5, a1, 36
	return aggr_limit;
}

int ath_tgt_tx_form_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid,
			 ath_tx_bufhead *bf_q)
{
  90e32f:	d230      	mov.n	a2, a3
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
	int nframes = 0, rl = 0;;
	struct ath_tx_desc *ds = NULL;
	struct ath_tx_buf *bf;
	struct ath_hal *ah = sc->sc_ah;
  90e331:	235d05        	addmi	a3, a5, 0x500
  90e334:	833b      	l32i.n	a3, a3, 44
  90e336:	c186      	movi.n	a8, 22
  90e338:	931d      	s32i.n	a3, a1, 52
	u_int16_t aggr_limit =  (64*1024 -1), al = 0, bpad = 0, al_delta;
	u_int16_t h_baw = tid->baw_size/2, prev_al = 0, prev_frames = 0;
  90e33a:	232104        	l16ui	a3, a2, 8
	return aggr_limit;
}

int ath_tgt_tx_form_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid,
			 ath_tx_bufhead *bf_q)
{
  90e33d:	941b      	s32i.n	a4, a1, 44
	int nframes = 0, rl = 0;;
	struct ath_tx_desc *ds = NULL;
	struct ath_tx_buf *bf;
	struct ath_hal *ah = sc->sc_ah;
	u_int16_t aggr_limit =  (64*1024 -1), al = 0, bpad = 0, al_delta;
	u_int16_t h_baw = tid->baw_size/2, prev_al = 0, prev_frames = 0;
  90e33f:	031314        	srli	a3, a3, 1
  90e342:	981c      	s32i.n	a8, a1, 48
  90e344:	c155      	movi.n	a5, 21

	bf_first = asf_tailq_first(&tid->buf_q);
  90e346:	842b      	l32i.n	a4, a2, 44
  90e348:	735301        	bltu	a5, a3, 90e34d <ath_tgt_tx_form_aggr+0x25>
  90e34b:	931c      	s32i.n	a3, a1, 48
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
	int nframes = 0, rl = 0;;
	struct ath_tx_desc *ds = NULL;
	struct ath_tx_buf *bf;
	struct ath_hal *ah = sc->sc_ah;
	u_int16_t aggr_limit =  (64*1024 -1), al = 0, bpad = 0, al_delta;
  90e34d:	196a08        	l32r	a9, 8e8b70 <memset+0x1d28>
  90e350:	c070      	movi.n	a7, 0
  90e352:	d670      	mov.n	a6, a7
  90e354:	991a      	s32i.n	a9, a1, 40

int ath_tgt_tx_form_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid,
			 ath_tx_bufhead *bf_q)
{
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
	int nframes = 0, rl = 0;;
  90e356:	dd70      	mov.n	a13, a7
  90e358:	d570      	mov.n	a5, a7
}

int ath_tgt_tx_form_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid,
			 ath_tx_bufhead *bf_q)
{
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
  90e35a:	9718      	s32i.n	a7, a1, 32
	u_int16_t h_baw = tid->baw_size/2, prev_al = 0, prev_frames = 0;

	bf_first = asf_tailq_first(&tid->buf_q);

	do {
		bf = asf_tailq_first(&tid->buf_q);
  90e35c:	832b      	l32i.n	a3, a2, 44
		adf_os_assert(bf);
  90e35e:	cd3a      	bnez.n	a3, 90e37c <ath_tgt_tx_form_aggr+0x54>
  90e360:	186915        	l32r	a8, 8e87b4 <memset+0x196c>
  90e363:	1a6afb        	l32r	a10, 8e8f50 <memset+0x2108>
  90e366:	2c8212        	l32i	a12, a8, 72
  90e369:	1b6b0d        	l32r	a11, 8e8fa0 <memset+0x2158>
  90e36c:	9d1e      	s32i.n	a13, a1, 56
  90e36e:	0bc000        	callx8	a12
  90e371:	1a697a        	l32r	a10, 8e895c <memset+0x1b14>
  90e374:	8d1e      	l32i.n	a13, a1, 56
  90e376:	0c0200        	memw
  90e379:	2aa200        	l32i	a10, a10, 0

		if (!BAW_WITHIN(tid->seq_start, tid->baw_size,
  90e37c:	2b3123        	l16ui	a11, a3, 70
  90e37f:	2a2102        	l16ui	a10, a2, 4
  90e382:	0b4b14        	srli	a11, a11, 4
  90e385:	0abb0c        	sub	a11, a11, a10
  90e388:	2a2104        	l16ui	a10, a2, 8
  90e38b:	0b0b4b        	extui	a11, a11, 0, 12
  90e38e:	7ab20a        	blt	a11, a10, 90e39c <ath_tgt_tx_form_aggr+0x74>
				SEQNO_FROM_BF_SEQNO(bf->bf_seqno))) {

			bf_first->bf_al= al;
  90e391:	264527        	s16i	a6, a4, 78
			bf_first->bf_nframes = nframes;
  90e394:	25444c        	s8i	a5, a4, 76
			return ATH_TGT_AGGR_BAW_CLOSED;
  90e397:	c021      	movi.n	a2, 1
  90e399:	d10f      	retw.n
  90e39b:	0065d0        	excw
		}

		if (!rl) {
  90e39e:	ad89      	add.n	a9, a8, a13
				 struct ath_tx_buf *bf)
{
	int i, prate;
	u_int32_t max4msframelen, frame_length;
	u_int16_t aggr_limit, legacy=0;
	const HAL_RATE_TABLE  *rt = sc->sc_currates;
  90e3a0:	19882e        	l32r	a9, 8f0458 <memset+0x9610>
  90e3a3:	299281        	l32i	a9, a9, 0x204
  90e3a6:	991a      	s32i.n	a9, a1, 40
	struct ieee80211_node_target *ieee_node = (struct ieee80211_node_target *)an;

	if (bf->bf_ismcast) {
  90e3a8:	2a3221        	l32i	a10, a3, 132
  90e3ab:	78a719        	bbci	a10, 24, 90e3c8 <ath_tgt_tx_form_aggr+0xa0>
		bf->bf_rcs[1].tries = bf->bf_rcs[2].tries = bf->bf_rcs[3].tries = 0;
		bf->bf_rcs[0].rix   = 0xb;
  90e3ae:	c0ab      	movi.n	a10, 11
  90e3b0:	2a3450        	s8i	a10, a3, 80
		bf->bf_rcs[0].tries = ATH_TXMAXTRY - 1;
  90e3b3:	c0aa      	movi.n	a10, 10
	u_int16_t aggr_limit, legacy=0;
	const HAL_RATE_TABLE  *rt = sc->sc_currates;
	struct ieee80211_node_target *ieee_node = (struct ieee80211_node_target *)an;

	if (bf->bf_ismcast) {
		bf->bf_rcs[1].tries = bf->bf_rcs[2].tries = bf->bf_rcs[3].tries = 0;
  90e3b5:	2d3475        	s8i	a13, a3, 117
  90e3b8:	2d3469        	s8i	a13, a3, 105
  90e3bb:	2d345d        	s8i	a13, a3, 93
		bf->bf_rcs[0].rix   = 0xb;
		bf->bf_rcs[0].tries = ATH_TXMAXTRY - 1;
  90e3be:	2a3451        	s8i	a10, a3, 81
		bf->bf_rcs[0].flags = 0;
  90e3c1:	2d3453        	s8i	a13, a3, 83
  90e3c4:	60001f        	j	90e3e7 <ath_tgt_tx_form_aggr+0xbf>
  90e3c7:	002a3c        	excw
	} else {
		ath_tgt_rate_findrate(sc, an, AH_TRUE, 0, ATH_TXMAXTRY-1, 4, 1,
				      ATH_RC_PROBE_ALLOWED, bf->bf_rcs, &prate);
  90e3ca:	509a12        	call0	934c14 <_etext+0x25b17>
				  a_int32_t stepDnInc,
				  a_uint32_t rcflag,
				  struct ath_rc_series series[],
				  a_int32_t *isProbe)
{
	ath_rate_findrate(sc, an, 1, frameLen, 10, 4, 1,
  90e3cd:	2a1c10        	addi	a10, a1, 16
  90e3d0:	c0c1      	movi.n	a12, 1
  90e3d2:	9a13      	s32i.n	a10, a1, 12
  90e3d4:	8a19      	l32i.n	a10, a1, 36
  90e3d6:	db80      	mov.n	a11, a8
  90e3d8:	9c10      	s32i.n	a12, a1, 0
  90e3da:	9c11      	s32i.n	a12, a1, 4
  90e3dc:	c0ea      	movi.n	a14, 10
  90e3de:	c0f4      	movi.n	a15, 4
  90e3e0:	981e      	s32i.n	a8, a1, 56
  90e3e2:	5bfa7f        	call8	90cde0 <ath_rate_findrate>
  90e3e5:	881e      	l32i.n	a8, a1, 56
}

int ath_tgt_tx_form_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid,
			 ath_tx_bufhead *bf_q)
{
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
  90e3e7:	1b6a08        	l32r	a11, 8e8c08 <memset+0x1dc0>
  90e3ea:	033a02        	or	a10, a3, a3
  90e3ed:	2c0a00        	movi	a12, 0
	}

	max4msframelen = IEEE80211_AMPDU_LIMIT_MAX;

	for (i = 0; i < 4; i++) {
		if (bf->bf_rcs[i].tries) {
  90e3f0:	2da051        	l8ui	a13, a10, 81
  90e3f3:	c9d5      	beqz.n	a13, 90e40c <ath_tgt_tx_form_aggr+0xe4>
			frame_length = bf->bf_rcs[i].max4msframelen;

			if (rt->info[bf->bf_rcs[i].rix].phy != IEEE80211_T_HT) {
  90e3f5:	2da050        	l8ui	a13, a10, 80
  90e3f8:	891a      	l32i.n	a9, a1, 40
  90e3fa:	0ddd0a        	addx4	a13, a13, a13
  90e3fd:	09dd0a        	addx4	a13, a13, a9
  90e400:	2dd029        	l8ui	a13, a13, 41

	max4msframelen = IEEE80211_AMPDU_LIMIT_MAX;

	for (i = 0; i < 4; i++) {
		if (bf->bf_rcs[i].tries) {
			frame_length = bf->bf_rcs[i].max4msframelen;
  90e403:	2ea215        	l32i	a14, a10, 84

			if (rt->info[bf->bf_rcs[i].rix].phy != IEEE80211_T_HT) {
  90e406:	69d40f        	bnei	a13, 4, 90e419 <ath_tgt_tx_form_aggr+0xf1>
				legacy = 1;
				break;
			}

			max4msframelen = ATH_MIN(max4msframelen, frame_length);
  90e409:	0ebb36        	minu	a11, a11, a14
				      ATH_RC_PROBE_ALLOWED, bf->bf_rcs, &prate);
	}

	max4msframelen = IEEE80211_AMPDU_LIMIT_MAX;

	for (i = 0; i < 4; i++) {
  90e40c:	b1cc      	addi.n	a12, a12, 1
  90e40e:	bcaa      	addi.n	a10, a10, 12
  90e410:	69c4dc        	bnei	a12, 4, 90e3f0 <ath_tgt_tx_form_aggr+0xc8>
				 struct ath_node_target *an,
				 struct ath_tx_buf *bf)
{
	int i, prate;
	u_int32_t max4msframelen, frame_length;
	u_int16_t aggr_limit, legacy=0;
  90e413:	c0c0      	movi.n	a12, 0
  90e415:	600002        	j	90e41b <ath_tgt_tx_form_aggr+0xf3>
  90e418:	00c0c1        	excw

			max4msframelen = ATH_MIN(max4msframelen, frame_length);
		}
	}

	if (prate || legacy)
  90e41b:	8d14      	l32i.n	a13, a1, 16
		return 0;
  90e41d:	c0a0      	movi.n	a10, 0

			max4msframelen = ATH_MIN(max4msframelen, frame_length);
		}
	}

	if (prate || legacy)
  90e41f:	7ad925        	bne	a13, a10, 90e448 <ath_tgt_tx_form_aggr+0x120>
		return 0;
  90e422:	dad0      	mov.n	a10, a13

			max4msframelen = ATH_MIN(max4msframelen, frame_length);
		}
	}

	if (prate || legacy)
  90e424:	cec0      	bnez.n	a12, 90e448 <ath_tgt_tx_form_aggr+0x120>
		return 0;

	if (sc->sc_ic.ic_enable_coex)
  90e426:	8919      	l32i.n	a9, a1, 36
  90e428:	2a9d16        	addmi	a10, a9, 0x1600
  90e42b:	2ca025        	l8ui	a12, a10, 37
  90e42e:	8aa8      	l32i.n	a10, a10, 32
  90e430:	64c005        	beqz	a12, 90e439 <ath_tgt_tx_form_aggr+0x111>
		aggr_limit = ATH_MIN((max4msframelen*3)/8, sc->sc_ic.ic_ampdu_limit);
  90e433:	0bbb09        	addx2	a11, a11, a11
  90e436:	0b3b14        	srli	a11, a11, 3
	else
		aggr_limit = ATH_MIN(max4msframelen, sc->sc_ic.ic_ampdu_limit);
  90e439:	0aba36        	minu	a10, a11, a10

	if (ieee_node->ni_maxampdu)
  90e43c:	28810a        	l16ui	a8, a8, 20
		return 0;

	if (sc->sc_ic.ic_enable_coex)
		aggr_limit = ATH_MIN((max4msframelen*3)/8, sc->sc_ic.ic_ampdu_limit);
	else
		aggr_limit = ATH_MIN(max4msframelen, sc->sc_ic.ic_ampdu_limit);
  90e43f:	0a0a4f        	extui	a10, a10, 0, 16

	if (ieee_node->ni_maxampdu)
		aggr_limit = ATH_MIN(aggr_limit, ieee_node->ni_maxampdu);
  90e442:	08ab36        	minu	a11, a10, a8
  90e445:	08ba39        	movnez	a10, a11, a8
			bf_first->bf_nframes = nframes;
			return ATH_TGT_AGGR_BAW_CLOSED;
		}

		if (!rl) {
			aggr_limit = ath_lookup_rate(sc, tid->an, bf);
  90e448:	0a0a4f        	extui	a10, a10, 0, 16
  90e44b:	9a1a      	s32i.n	a10, a1, 40
			rl = 1;
		}

		al_delta = ATH_AGGR_DELIM_SZ + bf->bf_pktlen;
  90e44d:	2c3122        	l16ui	a12, a3, 68
  90e450:	b4cc      	addi.n	a12, a12, 4
  90e452:	0c0c4f        	extui	a12, a12, 0, 16

		if (nframes && (aggr_limit < (al + bpad + al_delta + prev_al))) {
  90e455:	c85b      	beqz.n	a5, 90e464 <ath_tgt_tx_form_aggr+0x13c>
  90e457:	a76a      	add.n	a10, a6, a7
  90e459:	881a      	l32i.n	a8, a1, 40
  90e45b:	acaa      	add.n	a10, a10, a12
  90e45d:	7a8a03        	bge	a8, a10, 90e464 <ath_tgt_tx_form_aggr+0x13c>
  90e460:	600005        	j	90e469 <ath_tgt_tx_form_aggr+0x141>
  90e463:	00891c        	mul16u	a9, a8, a0
		}

#ifdef PROJECT_K2
		if ((nframes + prev_frames) >= ATH_MIN((h_baw), 17)) {
#else
		if ((nframes + prev_frames) >= ATH_MIN((h_baw), 22)) {
  90e466:	79520a        	blt	a5, a9, 90e474 <ath_tgt_tx_form_aggr+0x14c>
#endif
			bf_first->bf_al= al;
  90e469:	264527        	s16i	a6, a4, 78
			bf_first->bf_nframes = nframes;
  90e46c:	25444c        	s8i	a5, a4, 76
			return ATH_TGT_AGGR_LIMITED;
  90e46f:	c022      	movi.n	a2, 2
  90e471:	d10f      	retw.n
  90e473:	00da20        	excw
		}

		ath_tx_addto_baw(tid, bf);
  90e476:	db30      	mov.n	a11, a3
  90e478:	9c1f      	s32i.n	a12, a1, 60
  90e47a:	5bff98        	call8	90e2dc <ath_tx_addto_baw>
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
  90e47d:	8a39      	l32i.n	a10, a3, 36
  90e47f:	8b3a      	l32i.n	a11, a3, 40
  90e481:	8c1f      	l32i.n	a12, a1, 60
  90e483:	c8a3      	beqz.n	a10, 90e48a <ath_tgt_tx_form_aggr+0x162>
  90e485:	9baa      	s32i.n	a11, a10, 40
  90e487:	600001        	j	90e48c <ath_tgt_tx_form_aggr+0x164>
  90e48a:	9b2c      	s32i.n	a11, a2, 48
  90e48c:	8b3a      	l32i.n	a11, a3, 40
		asf_tailq_insert_tail(bf_q, bf, bf_list);
  90e48e:	881b      	l32i.n	a8, a1, 44
			bf_first->bf_nframes = nframes;
			return ATH_TGT_AGGR_LIMITED;
		}

		ath_tx_addto_baw(tid, bf);
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
  90e490:	9ab0      	s32i.n	a10, a11, 0
		asf_tailq_insert_tail(bf_q, bf, bf_list);
  90e492:	c0a0      	movi.n	a10, 0
  90e494:	9a39      	s32i.n	a10, a3, 36
  90e496:	8a81      	l32i.n	a10, a8, 4
		nframes ++;
  90e498:	b155      	addi.n	a5, a5, 1
			return ATH_TGT_AGGR_LIMITED;
		}

		ath_tx_addto_baw(tid, bf);
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
		asf_tailq_insert_tail(bf_q, bf, bf_list);
  90e49a:	9a3a      	s32i.n	a10, a3, 40
  90e49c:	93a0      	s32i.n	a3, a10, 0
  90e49e:	2a3c24        	addi	a10, a3, 36
  90e4a1:	9a81      	s32i.n	a10, a8, 4
		nframes ++;

		adf_os_assert(bf);

		adf_os_assert(bf->bf_comp == ath_tgt_tx_comp_aggr);
  90e4a3:	8b3f      	l32i.n	a11, a3, 60
  90e4a5:	1a6b0e        	l32r	a10, 8e90e0 <memset+0x2298>
  90e4a8:	7ab11a        	beq	a11, a10, 90e4c6 <ath_tgt_tx_form_aggr+0x19e>
  90e4ab:	1a6915        	l32r	a10, 8e8900 <memset+0x1ab8>
  90e4ae:	1b6b0d        	l32r	a11, 8e90e4 <memset+0x229c>
  90e4b1:	2da212        	l32i	a13, a10, 72
  90e4b4:	1a6afb        	l32r	a10, 8e90a0 <memset+0x2258>
  90e4b7:	9c1f      	s32i.n	a12, a1, 60
  90e4b9:	0bd000        	callx8	a13
  90e4bc:	1a697a        	l32r	a10, 8e8aa4 <memset+0x1c5c>
  90e4bf:	8c1f      	l32i.n	a12, a1, 60
  90e4c1:	0c0200        	memw
  90e4c4:	8aa0      	l32i.n	a10, a10, 0

		al += bpad + al_delta;
  90e4c6:	a766      	add.n	a6, a6, a7
		bf->bf_ndelim = ATH_AGGR_GET_NDELIM(bf->bf_pktlen);
  90e4c8:	273122        	l16ui	a7, a3, 68

		adf_os_assert(bf);

		adf_os_assert(bf->bf_comp == ath_tgt_tx_comp_aggr);

		al += bpad + al_delta;
  90e4cb:	ac66      	add.n	a6, a6, a12
		bf->bf_ndelim = ATH_AGGR_GET_NDELIM(bf->bf_pktlen);
  90e4cd:	2b0afb        	movi	a11, 251

		adf_os_assert(bf);

		adf_os_assert(bf->bf_comp == ath_tgt_tx_comp_aggr);

		al += bpad + al_delta;
  90e4d0:	06064f        	extui	a6, a6, 0, 16
		bf->bf_ndelim = ATH_AGGR_GET_NDELIM(bf->bf_pktlen);
  90e4d3:	c0a0      	movi.n	a10, 0
  90e4d5:	77b208        	blt	a11, a7, 90e4e1 <ath_tgt_tx_form_aggr+0x1b9>
  90e4d8:	2a0afc        	movi	a10, 252
  90e4db:	07aa0c        	sub	a10, a10, a7
  90e4de:	0a2a47        	extui	a10, a10, 2, 8

		switch (bf->bf_keytype) {
  90e4e1:	2b3085        	l8ui	a11, a3, 133
		adf_os_assert(bf);

		adf_os_assert(bf->bf_comp == ath_tgt_tx_comp_aggr);

		al += bpad + al_delta;
		bf->bf_ndelim = ATH_AGGR_GET_NDELIM(bf->bf_pktlen);
  90e4e4:	2a344b        	s8i	a10, a3, 75

		switch (bf->bf_keytype) {
  90e4e7:	68b212        	beqi	a11, 2, 90e4fd <ath_tgt_tx_form_aggr+0x1d5>
  90e4ea:	6fb306        	bgeui	a11, 3, 90e4f4 <ath_tgt_tx_form_aggr+0x1cc>
  90e4ed:	69b11f        	bnei	a11, 1, 90e510 <ath_tgt_tx_form_aggr+0x1e8>
  90e4f0:	600010        	j	90e504 <ath_tgt_tx_form_aggr+0x1dc>
  90e4f3:	0068b3        	excw
  90e4f6:	0c69b4        	excw
  90e4f9:	156000        	l32r	a5, 8e64fc <_xtos_set_exception_handler+0x1b4>
  90e4fc:	0dbaaa        	excw
		case HAL_KEY_TYPE_AES:
			bf->bf_ndelim += ATH_AGGR_ENCRYPTDELIM;
  90e4ff:	60000a        	j	90e50d <ath_tgt_tx_form_aggr+0x1e5>
  90e502:	00002a        	muluh	a0, a0, a0
			break;
		case HAL_KEY_TYPE_WEP:
		case HAL_KEY_TYPE_TKIP:
			bf->bf_ndelim += 64;
  90e505:	ac40      	add.n	a0, a4, a12
  90e507:	600002        	j	90e50d <ath_tgt_tx_form_aggr+0x1e5>
  90e50a:	00bcaa        	excw
			break;
		case HAL_KEY_TYPE_WAPI:
			bf->bf_ndelim += 12;
  90e50d:	2a344b        	s8i	a10, a3, 75
			break;
		default:
			break;
		}

		bpad = PADBYTES(al_delta) + (bf->bf_ndelim << 2);
  90e510:	0c0c06        	neg	a12, a12
  90e513:	27304b        	l8ui	a7, a3, 75

		if (bf_prev) {
  90e516:	8918      	l32i.n	a9, a1, 32
			break;
		default:
			break;
		}

		bpad = PADBYTES(al_delta) + (bf->bf_ndelim << 2);
  90e518:	0c0c41        	extui	a12, a12, 0, 2
  90e51b:	0c770a        	addx4	a7, a7, a12

		if (bf_prev) {
  90e51e:	c99a      	beqz.n	a9, 90e53c <ath_tgt_tx_form_aggr+0x214>
			bf_prev->bf_next = bf;
			bf_prev->bf_lastds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
  90e520:	2b3030        	l8ui	a11, a3, 48
  90e523:	8a9e      	l32i.n	a10, a9, 56
		}

		bpad = PADBYTES(al_delta) + (bf->bf_ndelim << 2);

		if (bf_prev) {
			bf_prev->bf_next = bf;
  90e525:	939b      	s32i.n	a3, a9, 44
			bf_prev->bf_lastds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
  90e527:	2ba400        	s8i	a11, a10, 0
  90e52a:	2b3031        	l8ui	a11, a3, 49
  90e52d:	2ba401        	s8i	a11, a10, 1
  90e530:	2b3032        	l8ui	a11, a3, 50
  90e533:	2ba402        	s8i	a11, a10, 2
  90e536:	2b3033        	l8ui	a11, a3, 51
  90e539:	2ba403        	s8i	a11, a10, 3
		}
		bf_prev = bf;

		for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90e53c:	8c3c      	l32i.n	a12, a3, 48
  90e53e:	2d0a88        	movi	a13, 136
  90e541:	600016        	j	90e55b <ath_tgt_tx_form_aggr+0x233>
			ah->ah_set11nAggrMiddle(ds, bf->bf_ndelim);
  90e544:	881d      	l32i.n	a8, a1, 52
  90e546:	2b304b        	l8ui	a11, a3, 75
  90e549:	2e8212        	l32i	a14, a8, 72
  90e54c:	dac0      	mov.n	a10, a12
  90e54e:	9c1f      	s32i.n	a12, a1, 60
  90e550:	9d1e      	s32i.n	a13, a1, 56
  90e552:	0be000        	callx8	a14
			bf_prev->bf_next = bf;
			bf_prev->bf_lastds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
		}
		bf_prev = bf;

		for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90e555:	8c1f      	l32i.n	a12, a1, 60
  90e557:	8d1e      	l32i.n	a13, a1, 56
  90e559:	adcc      	add.n	a12, a12, a13
  90e55b:	8a3e      	l32i.n	a10, a3, 56
  90e55d:	7cabe3        	bgeu	a10, a12, 90e544 <ath_tgt_tx_form_aggr+0x21c>
			ah->ah_set11nAggrMiddle(ds, bf->bf_ndelim);

	} while (!asf_tailq_empty(&tid->buf_q));
  90e560:	882b      	l32i.n	a8, a2, 44
  90e562:	9318      	s32i.n	a3, a1, 32
  90e564:	c0d1      	movi.n	a13, 1
  90e566:	658df2        	bnez	a8, 90e35c <ath_tgt_tx_form_aggr+0x34>

	bf_first->bf_al= al;
  90e569:	264527        	s16i	a6, a4, 78
	bf_first->bf_nframes = nframes;
  90e56c:	25444c        	s8i	a5, a4, 76

	return ATH_TGT_AGGR_DONE;
  90e56f:	d280      	mov.n	a2, a8
}
  90e571:	d10f      	retw.n
	...

0090e574 <ath_tgt_txq_schedule>:
	asf_tailq_insert_tail(&txq->axq_tidq, tid, tid_qelem);
}

static void
ath_tgt_txq_schedule(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
  90e574:	6c1008        	entry	a1, 64
	u_int8_t bdone;

	bdone = AH_FALSE;

	do {
		TAILQ_DEQ(&txq->axq_tidq, tid, tid_qelem);
  90e577:	8536      	l32i.n	a5, a3, 24
  90e579:	6451ff        	beqz	a5, 90e77c <ath_tgt_txq_schedule+0x208>
  90e57c:	8459      	l32i.n	a4, a5, 36
  90e57e:	865a      	l32i.n	a6, a5, 40
  90e580:	c844      	beqz.n	a4, 90e588 <ath_tgt_txq_schedule+0x14>
  90e582:	964a      	s32i.n	a6, a4, 40
  90e584:	600002        	j	90e58a <ath_tgt_txq_schedule+0x16>
  90e587:	009637        	maxu	a6, a9, a0
  90e58a:	865a      	l32i.n	a6, a5, 40
  90e58c:	9460      	s32i.n	a4, a6, 0
		if (tid == NULL)
			return;

		tid->sched = AH_FALSE;

		if (tid->paused)
  90e58e:	275034        	l8ui	a7, a5, 52
		TAILQ_DEQ(&txq->axq_tidq, tid, tid_qelem);

		if (tid == NULL)
			return;

		tid->sched = AH_FALSE;
  90e591:	c040      	movi.n	a4, 0
  90e593:	245435        	s8i	a4, a5, 53

		if (tid->paused)
  90e596:	007732        	sext	a7, a7, 7
  90e599:	c040      	movi.n	a4, 0
  90e59b:	747102        	beq	a7, a4, 90e5a1 <ath_tgt_txq_schedule+0x2d>
  90e59e:	6001d3        	j	90e775 <ath_tgt_txq_schedule+0x201>
			continue;

		if (!(tid->flag & TID_AGGR_ENABLED))
  90e5a1:	285036        	l8ui	a8, a5, 54
  90e5a4:	c042      	movi.n	a4, 2
  90e5a6:	048801        	and	a8, a8, a4
  90e5a9:	c061      	movi.n	a6, 1
  90e5ab:	8450      	l32i.n	a4, a5, 0
  90e5ad:	65804f        	bnez	a8, 90e600 <ath_tgt_txq_schedule+0x8c>

static void
ath_tgt_tx_sched_normal(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
	struct ath_tx_buf *bf;
	struct ath_txq *txq =TID_TO_ACTXQ(tid->tidno);;
  90e5b0:	274cfd        	addi	a7, a4, -3
  90e5b3:	d980      	mov.n	a9, a8
  90e5b5:	076939        	movnez	a9, a6, a7
  90e5b8:	c996      	beqz.n	a9, 90e5d2 <ath_tgt_txq_schedule+0x5e>
  90e5ba:	046839        	movnez	a8, a6, a4
  90e5bd:	c981      	beqz.n	a8, 90e5d2 <ath_tgt_txq_schedule+0x5e>
  90e5bf:	b047      	addi.n	a7, a4, -1
  90e5c1:	6e720f        	bltui	a7, 2, 90e5d4 <ath_tgt_txq_schedule+0x60>
  90e5c4:	244cfc        	addi	a4, a4, -4
  90e5c7:	c063      	movi.n	a6, 3
  90e5c9:	6f4207        	bgeui	a4, 2, 90e5d4 <ath_tgt_txq_schedule+0x60>
  90e5cc:	c062      	movi.n	a6, 2
  90e5ce:	600002        	j	90e5d4 <ath_tgt_txq_schedule+0x60>
  90e5d1:	00c060        	excw
  90e5d4:	02660a        	addx4	a6, a6, a2
  90e5d7:	266d05        	addmi	a6, a6, 0x500
  90e5da:	8763      	l32i.n	a7, a6, 12

	do {
		if (asf_tailq_empty(&tid->buf_q))
  90e5dc:	8b5b      	l32i.n	a11, a5, 44
  90e5de:	64b186        	beqz	a11, 90e768 <ath_tgt_txq_schedule+0x1f4>
			break;

		bf = asf_tailq_first(&tid->buf_q);
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
  90e5e1:	84b9      	l32i.n	a4, a11, 36
  90e5e3:	86ba      	l32i.n	a6, a11, 40
  90e5e5:	c844      	beqz.n	a4, 90e5ed <ath_tgt_txq_schedule+0x79>
  90e5e7:	964a      	s32i.n	a6, a4, 40
  90e5e9:	600002        	j	90e5ef <ath_tgt_txq_schedule+0x7b>
  90e5ec:	00965c        	extui	a6, a0, 25, 13
  90e5ef:	86ba      	l32i.n	a6, a11, 40
		ath_tgt_tx_send_normal(sc, bf);
  90e5f1:	da20      	mov.n	a10, a2
	do {
		if (asf_tailq_empty(&tid->buf_q))
			break;

		bf = asf_tailq_first(&tid->buf_q);
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
  90e5f3:	9460      	s32i.n	a4, a6, 0
		ath_tgt_tx_send_normal(sc, bf);
  90e5f5:	5bfdfa        	call8	90dde0 <ath_tgt_tx_send_normal>

	} while (txq->axq_depth < ATH_AGGR_MIN_QDEPTH);
  90e5f8:	8474      	l32i.n	a4, a7, 16
  90e5fa:	644fde        	beqz	a4, 90e5dc <ath_tgt_txq_schedule+0x68>
  90e5fd:	600167        	j	90e768 <ath_tgt_txq_schedule+0x1f4>
ath_tgt_tx_sched_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
	struct ath_tx_buf  *bf, *bf_last;
	ATH_AGGR_STATUS status;
	ath_tx_bufhead bf_q;
	struct ath_txq *txq = TID_TO_ACTXQ(tid->tidno);
  90e600:	284cfd        	addi	a8, a4, -3
  90e603:	d970      	mov.n	a9, a7
  90e605:	086939        	movnez	a9, a6, a8
  90e608:	090847        	extui	a8, a9, 0, 8
  90e60b:	c98b      	beqz.n	a8, 90e62a <ath_tgt_txq_schedule+0xb6>
  90e60d:	046739        	movnez	a7, a6, a4
  90e610:	070747        	extui	a7, a7, 0, 8
  90e613:	c973      	beqz.n	a7, 90e62a <ath_tgt_txq_schedule+0xb6>
  90e615:	b047      	addi.n	a7, a4, -1
  90e617:	6e7211        	bltui	a7, 2, 90e62c <ath_tgt_txq_schedule+0xb8>
  90e61a:	244cfc        	addi	a4, a4, -4
  90e61d:	c063      	movi.n	a6, 3
  90e61f:	6f4209        	bgeui	a4, 2, 90e62c <ath_tgt_txq_schedule+0xb8>
  90e622:	c062      	movi.n	a6, 2
  90e624:	600004        	j	90e62c <ath_tgt_txq_schedule+0xb8>
  90e627:	000000        	ill
  90e62a:	c060      	movi.n	a6, 0
  90e62c:	02660a        	addx4	a6, a6, a2
  90e62f:	266d05        	addmi	a6, a6, 0x500
  90e632:	8663      	l32i.n	a6, a6, 12
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
  90e634:	242d05        	addmi	a4, a2, 0x500
ath_tgt_tx_sched_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
	struct ath_tx_buf  *bf, *bf_last;
	ATH_AGGR_STATUS status;
	ath_tx_bufhead bf_q;
	struct ath_txq *txq = TID_TO_ACTXQ(tid->tidno);
  90e637:	9615      	s32i.n	a6, a1, 20
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
  90e639:	864b      	l32i.n	a6, a4, 44
	int i;


	if (asf_tailq_empty(&tid->buf_q))
  90e63b:	845b      	l32i.n	a4, a5, 44
  90e63d:	644127        	beqz	a4, 90e768 <ath_tgt_txq_schedule+0x1f4>

	do {
		if (asf_tailq_empty(&tid->buf_q))
			break;

		asf_tailq_init(&bf_q);
  90e640:	c040      	movi.n	a4, 0

	if (asf_tailq_empty(&tid->buf_q))
		return;

	do {
		if (asf_tailq_empty(&tid->buf_q))
  90e642:	875b      	l32i.n	a7, a5, 44
  90e644:	647120        	beqz	a7, 90e768 <ath_tgt_txq_schedule+0x1f4>
			break;

		asf_tailq_init(&bf_q);

		status = ath_tgt_tx_form_aggr(sc, tid, &bf_q);
  90e647:	da20      	mov.n	a10, a2
  90e649:	db50      	mov.n	a11, a5
  90e64b:	dc10      	mov.n	a12, a1

	do {
		if (asf_tailq_empty(&tid->buf_q))
			break;

		asf_tailq_init(&bf_q);
  90e64d:	9410      	s32i.n	a4, a1, 0
  90e64f:	9111      	s32i.n	a1, a1, 4

		status = ath_tgt_tx_form_aggr(sc, tid, &bf_q);
  90e651:	5bff35        	call8	90e328 <ath_tgt_tx_form_aggr>

		if (asf_tailq_empty(&bf_q))
  90e654:	8710      	l32i.n	a7, a1, 0
		if (asf_tailq_empty(&tid->buf_q))
			break;

		asf_tailq_init(&bf_q);

		status = ath_tgt_tx_form_aggr(sc, tid, &bf_q);
  90e656:	9a14      	s32i.n	a10, a1, 16

		if (asf_tailq_empty(&bf_q))
  90e658:	64710c        	beqz	a7, 90e768 <ath_tgt_txq_schedule+0x1f4>
			break;

		bf = asf_tailq_first(&bf_q);
		bf_last = asf_tailq_last(&bf_q, ath_tx_bufhead_s);
  90e65b:	8a11      	l32i.n	a10, a1, 4
  90e65d:	8aa1      	l32i.n	a10, a10, 4
  90e65f:	8da0      	l32i.n	a13, a10, 0

		if (bf->bf_nframes == 1) {
  90e661:	2a704c        	l8ui	a10, a7, 76
  90e664:	69a166        	bnei	a10, 1, 90e6ce <ath_tgt_txq_schedule+0x15a>

			if(bf->bf_retries == 0)
  90e667:	2a7086        	l8ui	a10, a7, 134
  90e66a:	cca6      	bnez.n	a10, 90e674 <ath_tgt_txq_schedule+0x100>
				__stats(sc, txaggr_single);
  90e66c:	2a2261        	l32i	a10, a2, 0x184
  90e66f:	b1aa      	addi.n	a10, a10, 1
  90e671:	2a2661        	s32i	a10, a2, 0x184
			bf->bf_isaggr = 0;
  90e674:	2b7087        	l8ui	a11, a7, 135
  90e677:	2afadf        	movi	a10, -33
  90e67a:	0aba01        	and	a10, a11, a10
  90e67d:	2a7487        	s8i	a10, a7, 135
			bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs -1]);
  90e680:	8a71      	l32i.n	a10, a7, 4
			bf->bf_lastds->ds_link = 0;
  90e682:	c080      	movi.n	a8, 0
		if (bf->bf_nframes == 1) {

			if(bf->bf_retries == 0)
				__stats(sc, txaggr_single);
			bf->bf_isaggr = 0;
			bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs -1]);
  90e684:	b0aa      	addi.n	a10, a10, -1
  90e686:	0cab11        	slli	a11, a10, 4
  90e689:	aaba      	add.n	a10, a11, a10
  90e68b:	8b7d      	l32i.n	a11, a7, 52
			bf->bf_lastds->ds_link = 0;
			bf->bf_next = NULL;

			for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90e68d:	2c0a88        	movi	a12, 136
		if (bf->bf_nframes == 1) {

			if(bf->bf_retries == 0)
				__stats(sc, txaggr_single);
			bf->bf_isaggr = 0;
			bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs -1]);
  90e690:	0baa0b        	addx8	a10, a10, a11
  90e693:	9a7e      	s32i.n	a10, a7, 56
			bf->bf_lastds->ds_link = 0;
  90e695:	24a400        	s8i	a4, a10, 0
  90e698:	28a401        	s8i	a8, a10, 1
  90e69b:	28a402        	s8i	a8, a10, 2
  90e69e:	28a403        	s8i	a8, a10, 3
			bf->bf_next = NULL;
  90e6a1:	947b      	s32i.n	a4, a7, 44

			for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90e6a3:	8b7c      	l32i.n	a11, a7, 48
  90e6a5:	600013        	j	90e6bc <ath_tgt_txq_schedule+0x148>
				ah->ah_clr11nAggr(ds);
  90e6a8:	2d6214        	l32i	a13, a6, 80
  90e6ab:	dab0      	mov.n	a10, a11
  90e6ad:	2b1607        	s32i	a11, a1, 28
  90e6b0:	2c1606        	s32i	a12, a1, 24
  90e6b3:	0bd000        	callx8	a13
			bf->bf_isaggr = 0;
			bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs -1]);
			bf->bf_lastds->ds_link = 0;
			bf->bf_next = NULL;

			for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90e6b6:	8b17      	l32i.n	a11, a1, 28
  90e6b8:	8c16      	l32i.n	a12, a1, 24
  90e6ba:	acbb      	add.n	a11, a11, a12
  90e6bc:	8a7e      	l32i.n	a10, a7, 56
  90e6be:	7babe6        	bgeu	a10, a11, 90e6a8 <ath_tgt_txq_schedule+0x134>
				ah->ah_clr11nAggr(ds);

			ath_buf_set_rate(sc, bf);
  90e6c1:	da20      	mov.n	a10, a2
  90e6c3:	db70      	mov.n	a11, a7
  90e6c5:	5bfaf0        	call8	90d288 <ath_buf_set_rate>
  90e6c8:	600084        	j	90e750 <ath_tgt_txq_schedule+0x1dc>
  90e6cb:	000000        	ill

			continue;
		}

		bf_last->bf_next = NULL;
		bf_last->bf_lastds->ds_link = 0;
  90e6ce:	8ade      	l32i.n	a10, a13, 56
			bf->bf_txq_add(sc, bf);

			continue;
		}

		bf_last->bf_next = NULL;
  90e6d0:	94db      	s32i.n	a4, a13, 44
		bf_last->bf_lastds->ds_link = 0;
  90e6d2:	24a400        	s8i	a4, a10, 0
  90e6d5:	24a401        	s8i	a4, a10, 1
  90e6d8:	24a402        	s8i	a4, a10, 2
  90e6db:	24a403        	s8i	a4, a10, 3
		bf_last->bf_ndelim = 0;
  90e6de:	24d44b        	s8i	a4, a13, 75

		bf->bf_isaggr  = 1;
  90e6e1:	2b7087        	l8ui	a11, a7, 135
  90e6e4:	c2a0      	movi.n	a10, 32
  90e6e6:	0aba02        	or	a10, a11, a10
  90e6e9:	2a7487        	s8i	a10, a7, 135
		ath_buf_set_rate(sc, bf);
  90e6ec:	db70      	mov.n	a11, a7
  90e6ee:	da20      	mov.n	a10, a2
  90e6f0:	2d1606        	s32i	a13, a1, 24
  90e6f3:	5bfae5        	call8	90d288 <ath_buf_set_rate>
		ah->ah_set11nAggrFirst(bf->bf_desc, bf->bf_al,
  90e6f6:	8a7c      	l32i.n	a10, a7, 48
  90e6f8:	2b7127        	l16ui	a11, a7, 78
  90e6fb:	2e6211        	l32i	a14, a6, 68
  90e6fe:	2c704b        	l8ui	a12, a7, 75
  90e701:	0be000        	callx8	a14
					  bf->bf_ndelim);
		bf->bf_lastds = bf_last->bf_lastds;
  90e704:	8d16      	l32i.n	a13, a1, 24

		for (i = 0; i < bf_last->bf_dmamap_info.nsegs; i++)
  90e706:	c0b0      	movi.n	a11, 0

		bf->bf_isaggr  = 1;
		ath_buf_set_rate(sc, bf);
		ah->ah_set11nAggrFirst(bf->bf_desc, bf->bf_al,
					  bf->bf_ndelim);
		bf->bf_lastds = bf_last->bf_lastds;
  90e708:	8ade      	l32i.n	a10, a13, 56
  90e70a:	9a7e      	s32i.n	a10, a7, 56
  90e70c:	60001b        	j	90e72b <ath_tgt_txq_schedule+0x1b7>
  90e70f:	00008a        	excw

		for (i = 0; i < bf_last->bf_dmamap_info.nsegs; i++)
			ah->ah_set11nAggrLast(&bf_last->bf_descarr[i]);
  90e712:	dd0c      	excw
	tid->sched = AH_TRUE;
	asf_tailq_insert_tail(&txq->axq_tidq, tid, tid_qelem);
}

static void
ath_tgt_txq_schedule(struct ath_softc_tgt *sc, struct ath_txq *txq)
  90e714:	be11      	addi.n	a1, a1, 14
  90e716:	abee      	add.n	a14, a14, a11
		ah->ah_set11nAggrFirst(bf->bf_desc, bf->bf_al,
					  bf->bf_ndelim);
		bf->bf_lastds = bf_last->bf_lastds;

		for (i = 0; i < bf_last->bf_dmamap_info.nsegs; i++)
			ah->ah_set11nAggrLast(&bf_last->bf_descarr[i]);
  90e718:	2c6213        	l32i	a12, a6, 76
  90e71b:	0aea0b        	addx8	a10, a14, a10
  90e71e:	9b17      	s32i.n	a11, a1, 28
  90e720:	9d16      	s32i.n	a13, a1, 24
  90e722:	0bc000        	callx8	a12
		ath_buf_set_rate(sc, bf);
		ah->ah_set11nAggrFirst(bf->bf_desc, bf->bf_al,
					  bf->bf_ndelim);
		bf->bf_lastds = bf_last->bf_lastds;

		for (i = 0; i < bf_last->bf_dmamap_info.nsegs; i++)
  90e725:	8b17      	l32i.n	a11, a1, 28
  90e727:	8d16      	l32i.n	a13, a1, 24
  90e729:	b1bb      	addi.n	a11, a11, 1
  90e72b:	8ad1      	l32i.n	a10, a13, 4
  90e72d:	7ab3e0        	bltu	a11, a10, 90e711 <ath_tgt_txq_schedule+0x19d>
			ah->ah_set11nAggrLast(&bf_last->bf_descarr[i]);

		if (status == ATH_AGGR_8K_LIMITED) {
  90e730:	8914      	l32i.n	a9, a1, 16
  90e732:	69941a        	bnei	a9, 4, 90e750 <ath_tgt_txq_schedule+0x1dc>
			adf_os_assert(0);
  90e735:	146915        	l32r	a4, 8e8b8c <memset+0x1d44>
  90e738:	1a6afb        	l32r	a10, 8e9324 <memset+0x24dc>
  90e73b:	244212        	l32i	a4, a4, 72
  90e73e:	1b6b0f        	l32r	a11, 8e937c <memset+0x2534>
  90e741:	0b4000        	callx8	a4
  90e744:	14697a        	l32r	a4, 8e8d2c <memset+0x1ee4>
  90e747:	0c0200        	memw
  90e74a:	8440      	l32i.n	a4, a4, 0
  90e74c:	600018        	j	90e768 <ath_tgt_txq_schedule+0x1f4>
  90e74f:	002c72        	excw
			break;
		}

		bf->bf_txq_add(sc, bf);
  90e752:	10da20        	l32r	a0, 904fd4 <memset+0x1e18c>
  90e755:	db70      	mov.n	a11, a7
  90e757:	0bc000        	callx8	a12
	} while (txq->axq_depth < ATH_AGGR_MIN_QDEPTH &&
		 status != ATH_TGT_AGGR_BAW_CLOSED);
  90e75a:	8915      	l32i.n	a9, a1, 20
  90e75c:	8894      	l32i.n	a8, a9, 16
  90e75e:	cc86      	bnez.n	a8, 90e768 <ath_tgt_txq_schedule+0x1f4>
			adf_os_assert(0);
			break;
		}

		bf->bf_txq_add(sc, bf);
	} while (txq->axq_depth < ATH_AGGR_MIN_QDEPTH &&
  90e760:	8814      	l32i.n	a8, a1, 16
  90e762:	688102        	beqi	a8, 1, 90e768 <ath_tgt_txq_schedule+0x1f4>
  90e765:	63fed9        	j	90e642 <ath_tgt_txq_schedule+0xce>
		else
			ath_tgt_tx_sched_aggr(sc,tid);

		bdone = AH_TRUE;

		if (!asf_tailq_empty(&tid->buf_q)) {
  90e768:	865b      	l32i.n	a6, a5, 44
		if (!(tid->flag & TID_AGGR_ENABLED))
			ath_tgt_tx_sched_normal(sc,tid);
		else
			ath_tgt_tx_sched_aggr(sc,tid);

		bdone = AH_TRUE;
  90e76a:	c041      	movi.n	a4, 1

		if (!asf_tailq_empty(&tid->buf_q)) {
  90e76c:	c865      	beqz.n	a6, 90e775 <ath_tgt_txq_schedule+0x201>
			ath_tgt_tx_enqueue(txq, tid);
  90e76e:	da30      	mov.n	a10, a3
  90e770:	db50      	mov.n	a11, a5
  90e772:	5bfa96        	call8	90d1cc <ath_tgt_tx_enqueue>
		}

	} while (!asf_tailq_empty(&txq->axq_tidq) && !bdone);
  90e775:	8636      	l32i.n	a6, a3, 24
  90e777:	c861      	beqz.n	a6, 90e77c <ath_tgt_txq_schedule+0x208>
  90e779:	644dfa        	beqz	a4, 90e577 <ath_tgt_txq_schedule+0x3>
  90e77c:	d10f      	retw.n
	...

0090e780 <ath_aggr_resume_tid>:
	return ((((x) & 0xff00) >> 8) |   (((x) & 0x00ff) << 8));
}

static inline void
ath_aggr_resume_tid(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
  90e780:	6c1004        	entry	a1, 32
	struct ath_txq *txq;

	txq = TID_TO_ACTXQ(tid->tidno);
  90e783:	8930      	l32i.n	a9, a3, 0
  90e785:	c081      	movi.n	a8, 1
  90e787:	249cfd        	addi	a4, a9, -3
  90e78a:	c0b0      	movi.n	a11, 0
  90e78c:	048b39        	movnez	a11, a8, a4
  90e78f:	c9b3      	beqz.n	a11, 90e7a6 <ath_aggr_resume_tid+0x26>
  90e791:	c991      	beqz.n	a9, 90e7a6 <ath_aggr_resume_tid+0x26>
  90e793:	b094      	addi.n	a4, a9, -1
  90e795:	6e420f        	bltui	a4, 2, 90e7a8 <ath_aggr_resume_tid+0x28>
  90e798:	299cfc        	addi	a9, a9, -4
  90e79b:	c083      	movi.n	a8, 3
  90e79d:	6f9207        	bgeui	a9, 2, 90e7a8 <ath_aggr_resume_tid+0x28>
  90e7a0:	c082      	movi.n	a8, 2
  90e7a2:	600002        	j	90e7a8 <ath_aggr_resume_tid+0x28>
  90e7a5:	00c080        	excw
  90e7a8:	02880a        	addx4	a8, a8, a2
  90e7ab:	288d05        	addmi	a8, a8, 0x500
  90e7ae:	8483      	l32i.n	a4, a8, 12
	tid->paused = 0;
  90e7b0:	c080      	movi.n	a8, 0
  90e7b2:	283434        	s8i	a8, a3, 52

	if (asf_tailq_empty(&tid->buf_q))
  90e7b5:	883b      	l32i.n	a8, a3, 44
  90e7b7:	c88d      	beqz.n	a8, 90e7c8 <ath_aggr_resume_tid+0x48>
		return;

	ath_tgt_tx_enqueue(txq, tid);
  90e7b9:	da40      	mov.n	a10, a4
  90e7bb:	033b02        	or	a11, a3, a3
  90e7be:	5bfa83        	call8	90d1cc <ath_tgt_tx_enqueue>
	ath_tgt_txq_schedule(sc, txq);
  90e7c1:	da20      	mov.n	a10, a2
  90e7c3:	db40      	mov.n	a11, a4
  90e7c5:	5bff6b        	call8	90e574 <ath_tgt_txq_schedule>
  90e7c8:	d10f      	retw.n
	...

0090e7cc <owl_tgt_tid_cleanup>:
	}
}

static void owl_tgt_tid_cleanup(struct ath_softc_tgt *sc,
				struct ath_atx_tid *tid)
{
  90e7cc:	6c1004        	entry	a1, 32
	tid->incomp--;
  90e7cf:	283037        	l8ui	a8, a3, 55
	}
}

static void owl_tgt_tid_cleanup(struct ath_softc_tgt *sc,
				struct ath_atx_tid *tid)
{
  90e7d2:	da20      	mov.n	a10, a2
	tid->incomp--;
  90e7d4:	b088      	addi.n	a8, a8, -1
  90e7d6:	080847        	extui	a8, a8, 0, 8
  90e7d9:	283437        	s8i	a8, a3, 55
	if (tid->incomp) {
  90e7dc:	cf85      	bnez.n	a8, 90e815 <owl_tgt_tid_cleanup+0x49>
		return;
	}

	tid->flag &= ~TID_CLEANUP_INPROGRES;
  90e7de:	283036        	l8ui	a8, a3, 54
  90e7e1:	29fafe        	movi	a9, -2
  90e7e4:	098901        	and	a9, a8, a9
  90e7e7:	293436        	s8i	a9, a3, 54

	if (tid->flag & TID_REINITIALIZE) {
  90e7ea:	7d8722        	bbci	a8, 29, 90e810 <owl_tgt_tid_cleanup+0x44>
		adf_os_print("TID REINIT DONE for tid %p\n", tid);
  90e7ed:	186915        	l32r	a8, 8e8c44 <memset+0x1dfc>
  90e7f0:	1a6b10        	l32r	a10, 8e9430 <memset+0x25e8>
  90e7f3:	288212        	l32i	a8, a8, 72
  90e7f6:	033b02        	or	a11, a3, a3
  90e7f9:	0b8000        	callx8	a8
		tid->flag  &= ~TID_REINITIALIZE;
  90e7fc:	293036        	l8ui	a9, a3, 54
  90e7ff:	c78b      	movi.n	a8, -5
  90e801:	089801        	and	a8, a9, a8
  90e804:	283436        	s8i	a8, a3, 54
		owl_tgt_tid_init(tid);
  90e807:	da30      	mov.n	a10, a3
  90e809:	5bf9b8        	call8	90ceec <owl_tgt_tid_init>
  90e80c:	d10f      	retw.n
  90e80e:	0000db        	excw
	} else {
		ath_aggr_resume_tid(sc, tid);
  90e811:	305bff        	excw
  90e814:	dbd1      	excw
  90e816:	0f006c        	excw

0090e818 <ath_tgt_tx_comp_normal>:
	tid->baw_tail = tid->baw_head;
}

static void ath_tgt_tx_comp_normal(struct ath_softc_tgt *sc,
				   struct ath_tx_buf *bf)
{
  90e818:	6c1004        	entry	a1, 32
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90e81b:	28304d        	l8ui	a8, a3, 77
  90e81e:	8934      	l32i.n	a9, a3, 16
  90e820:	0c8b11        	slli	a11, a8, 4
  90e823:	08bb0c        	sub	a11, a11, a8
  90e826:	09bb0a        	addx4	a11, a11, a9
  90e829:	2bbc24        	addi	a11, a11, 36

	if (tid->flag & TID_CLEANUP_INPROGRES) {
  90e82c:	28b036        	l8ui	a8, a11, 54
  90e82f:	7f8705        	bbci	a8, 31, 90e838 <ath_tgt_tx_comp_normal+0x20>
		owl_tgt_tid_cleanup(sc, tid);
  90e832:	022a02        	or	a10, a2, a2
  90e835:	5bffe5        	call8	90e7cc <owl_tgt_tid_cleanup>
	}

	if (bf->bf_node) {
  90e838:	8834      	l32i.n	a8, a3, 16
  90e83a:	c98f      	beqz.n	a8, 90e85d <ath_tgt_tx_comp_normal+0x45>
}

static void
ath_tx_uc_comp(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	ath_tx_status_update(sc, bf);
  90e83c:	da20      	mov.n	a10, a2
  90e83e:	033b02        	or	a11, a3, a3
  90e841:	5bfc08        	call8	90d864 <ath_tx_status_update>
	ath_update_stats(sc, bf);
  90e844:	da20      	mov.n	a10, a2
  90e846:	033b02        	or	a11, a3, a3
  90e849:	5bf9de        	call8	90cfc4 <ath_update_stats>
	ath_rate_tx_complete(sc, ATH_NODE_TARGET(bf->bf_node),
  90e84c:	8b34      	l32i.n	a11, a3, 16
  90e84e:	8c3e      	l32i.n	a12, a3, 56
  90e850:	da20      	mov.n	a10, a2
  90e852:	2d3c50        	addi	a13, a3, 80
  90e855:	c0e1      	movi.n	a14, 1
  90e857:	2f0a00        	movi	a15, 0
  90e85a:	5bf96c        	call8	90ce0c <ath_rate_tx_complete>

	if (bf->bf_node) {
		ath_tx_uc_comp(sc, bf);
	}

	ath_tx_freebuf(sc, bf);
  90e85d:	da20      	mov.n	a10, a2
  90e85f:	db30      	mov.n	a11, a3
  90e861:	5bfb52        	call8	90d5ac <ath_tx_freebuf>
  90e864:	d10f      	retw.n
	...

0090e868 <ath_tgt_tx_comp_aggr>:
		INCR(tid->baw_tail, ATH_TID_MAX_BUFS);
	}
}

void ath_tgt_tx_comp_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90e868:	6c1032        	entry	a1, 0x190
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90e86b:	25304d        	l8ui	a5, a3, 77
	}
}

void ath_tgt_tx_comp_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  90e86e:	8434      	l32i.n	a4, a3, 16
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90e870:	0c5811        	slli	a8, a5, 4
  90e873:	05880c        	sub	a8, a8, a5
  90e876:	04880a        	addx4	a8, a8, a4
  90e879:	258c24        	addi	a5, a8, 36
	struct ath_rc_series rcs[4];
	u_int16_t seq_st;
	u_int32_t *ba;
	int ba_index;
	int nbad = 0;
	int nframes = bf->bf_nframes;
  90e87c:	26304c        	l8ui	a6, a3, 76
	ath_tx_bufhead bf_q;
	int tx_ok = 1;
	struct ath_tx_buf *bar = NULL;
	struct ath_txq *txq;

	txq = bf->bf_txq;
  90e87f:	283220        	l32i	a8, a3, 128

	if (tid->flag & TID_CLEANUP_INPROGRES) {
  90e882:	295036        	l8ui	a9, a5, 54
	struct ath_rc_series rcs[4];
	u_int16_t seq_st;
	u_int32_t *ba;
	int ba_index;
	int nbad = 0;
	int nframes = bf->bf_nframes;
  90e885:	261654        	s32i	a6, a1, 0x150
	struct ath_tx_buf *bf_next;
	ath_tx_bufhead bf_q;
	int tx_ok = 1;
	struct ath_tx_buf *bar = NULL;
  90e888:	c060      	movi.n	a6, 0
  90e88a:	261652        	s32i	a6, a1, 0x148
	struct ath_txq *txq;

	txq = bf->bf_txq;
  90e88d:	281655        	s32i	a8, a1, 0x154

	if (tid->flag & TID_CLEANUP_INPROGRES) {
  90e890:	090640        	extui	a6, a9, 0, 1
  90e893:	6460b1        	beqz	a6, 90e948 <ath_tgt_tx_comp_aggr+0xe0>
  90e896:	8b3e      	l32i.n	a11, a3, 56
  90e898:	da10      	mov.n	a10, a1
  90e89a:	2c0a88        	movi	a12, 136
  90e89d:	5bf97b        	call8	90ce8c <__adf_os_mem_copy>
  90e8a0:	2a1a10        	movi	a10, 0x110
  90e8a3:	a1aa      	add.n	a10, a10, a1
  90e8a5:	2b3c50        	addi	a11, a3, 80
  90e8a8:	c3c0      	movi.n	a12, 48
  90e8aa:	5bf978        	call8	90ce8c <__adf_os_mem_copy>

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
		bf_next  = bf->bf_next;

		ath_tx_status_update_aggr(sc, bf, ds, rcs, 0);
  90e8ad:	281a10        	movi	a8, 0x110

	seq_st = ATH_DS_BA_SEQ(ds);
	ba     = ATH_DS_BA_BITMAP(ds);
	tx_ok  = (ATH_DS_TX_STATUS(ds) == HAL_OK);

	if (!bf->bf_isaggr) {
  90e8b0:	263221        	l32i	a6, a3, 132

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
		bf_next  = bf->bf_next;

		ath_tx_status_update_aggr(sc, bf, ds, rcs, 0);
  90e8b3:	a188      	add.n	a8, a8, a1
  90e8b5:	d780      	mov.n	a7, a8

	seq_st = ATH_DS_BA_SEQ(ds);
	ba     = ATH_DS_BA_BITMAP(ds);
	tx_ok  = (ATH_DS_TX_STATUS(ds) == HAL_OK);

	if (!bf->bf_isaggr) {
  90e8b7:	7a6f2f        	bbsi	a6, 26, 90e8ea <ath_tgt_tx_comp_aggr+0x82>
		ath_update_stats(sc, bf);
  90e8ba:	db30      	mov.n	a11, a3
  90e8bc:	da20      	mov.n	a10, a2
  90e8be:	5bf9c1        	call8	90cfc4 <ath_update_stats>

		__stats(sc, tx_compunaggr);
  90e8c1:	24225e        	l32i	a4, a2, 0x178

		ath_tx_status_update(sc, bf);
  90e8c4:	db30      	mov.n	a11, a3
	tx_ok  = (ATH_DS_TX_STATUS(ds) == HAL_OK);

	if (!bf->bf_isaggr) {
		ath_update_stats(sc, bf);

		__stats(sc, tx_compunaggr);
  90e8c6:	b144      	addi.n	a4, a4, 1

		ath_tx_status_update(sc, bf);
  90e8c8:	022a02        	or	a10, a2, a2
	tx_ok  = (ATH_DS_TX_STATUS(ds) == HAL_OK);

	if (!bf->bf_isaggr) {
		ath_update_stats(sc, bf);

		__stats(sc, tx_compunaggr);
  90e8cb:	24265e        	s32i	a4, a2, 0x178

		ath_tx_status_update(sc, bf);
  90e8ce:	5bfbe5        	call8	90d864 <ath_tx_status_update>

		ath_tx_freebuf(sc, bf);
  90e8d1:	db30      	mov.n	a11, a3
  90e8d3:	da20      	mov.n	a10, a2
  90e8d5:	5bfb35        	call8	90d5ac <ath_tx_freebuf>

		if (tid->flag & TID_CLEANUP_INPROGRES) {
  90e8d8:	235036        	l8ui	a3, a5, 54
  90e8db:	7f3f02        	bbsi	a3, 31, 90e8e1 <ath_tgt_tx_comp_aggr+0x79>
  90e8de:	6002fa        	j	90ebdc <ath_tgt_tx_comp_aggr+0x374>
			owl_tgt_tid_cleanup(sc, tid);
  90e8e1:	da20      	mov.n	a10, a2
  90e8e3:	db50      	mov.n	a11, a5
  90e8e5:	5bffb9        	call8	90e7cc <owl_tgt_tid_cleanup>
  90e8e8:	d10f      	retw.n

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
		bf_next  = bf->bf_next;

		ath_tx_status_update_aggr(sc, bf, ds, rcs, 0);
  90e8ea:	db30      	mov.n	a11, a3
  90e8ec:	da20      	mov.n	a10, a2
  90e8ee:	dc10      	mov.n	a12, a1
  90e8f0:	dd70      	mov.n	a13, a7
  90e8f2:	c0e0      	movi.n	a14, 0
		return;
	}

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
		bf_next  = bf->bf_next;
  90e8f4:	26320b        	l32i	a6, a3, 44

		ath_tx_status_update_aggr(sc, bf, ds, rcs, 0);
  90e8f7:	5bfbfe        	call8	90d8f0 <ath_tx_status_update_aggr>

		ath_tx_freebuf(sc, bf);
  90e8fa:	db30      	mov.n	a11, a3
  90e8fc:	da20      	mov.n	a10, a2
  90e8fe:	5bfb2b        	call8	90d5ac <ath_tx_freebuf>

		tid->incomp--;
  90e901:	235037        	l8ui	a3, a5, 55
  90e904:	b033      	addi.n	a3, a3, -1
  90e906:	030347        	extui	a3, a3, 0, 8
  90e909:	235437        	s8i	a3, a5, 55
		if (!tid->incomp) {
  90e90c:	cd35      	bnez.n	a3, 90e925 <ath_tgt_tx_comp_aggr+0xbd>
			tid->flag  &= ~TID_CLEANUP_INPROGRES;
  90e90e:	265036        	l8ui	a6, a5, 54
  90e911:	c73e      	movi.n	a3, -2
  90e913:	036301        	and	a3, a6, a3
  90e916:	235436        	s8i	a3, a5, 54
			ath_aggr_resume_tid(sc, tid);
  90e919:	da20      	mov.n	a10, a2
  90e91b:	db50      	mov.n	a11, a5
  90e91d:	5bff98        	call8	90e780 <ath_aggr_resume_tid>
  90e920:	600006        	j	90e92a <ath_tgt_tx_comp_aggr+0xc2>
  90e923:	0000d3        	excw
			break;
		}

		bf = bf_next;
  90e926:	60656f        	j	914e99 <_etext+0x5d9c>
		}

		return;
	}

	while (bf) {
  90e929:	bfda      	addi.n	a10, a13, 15
		}

		bf = bf_next;
	}

	ath_update_aggr_stats(sc, ds, nframes, nbad);
  90e92b:	20db10        	l32ai	a0, a13, 64
  90e92e:	5bfa30        	call8	90d1f0 <ath_update_aggr_stats$isra$2>
	ath_rate_tx_complete(sc, an, ds, rcs, nframes, nbad);
  90e931:	2d1a10        	movi	a13, 0x110
  90e934:	2e1254        	l32i	a14, a1, 0x150
  90e937:	da20      	mov.n	a10, a2
  90e939:	db40      	mov.n	a11, a4
  90e93b:	dc10      	mov.n	a12, a1
  90e93d:	ad1d      	add.n	a13, a1, a13
  90e93f:	c0f0      	movi.n	a15, 0
  90e941:	5bf932        	call8	90ce0c <ath_rate_tx_complete>
  90e944:	d10f      	retw.n
  90e946:	00002c        	excw
void ath_tgt_tx_comp_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc lastds;
	struct ath_tx_desc *ds = &lastds;
  90e949:	0a882b        	mulsh	a8, a8, a10
  90e94c:	320e0c        	excw
  90e94f:	1a085b        	l32r	a10, 8d0abc <_bss_end+0x3bdbac>
  90e952:	f9          	.byte 0xf9
  90e953:	4e2d3c        	excw
		ath_tx_comp_cleanup(sc, bf);
		return;
	}

	adf_os_mem_copy(ds, bf->bf_lastds, sizeof (struct ath_tx_desc));
	adf_os_mem_copy(rcs, bf->bf_rcs, sizeof(rcs));
  90e956:	502a1a        	call0	9191c0 <_etext+0xa0c3>
  90e959:	10aa1a        	l32r	a0, 8f91c4 <memset+0x1237c>
  90e95c:	0ddb02        	or	a11, a13, a13
  90e95f:	2c0a30        	movi	a12, 48
  90e962:	2d1658        	s32i	a13, a1, 0x160
  90e965:	5bf949        	call8	90ce8c <__adf_os_mem_copy>

	if (ds->ds_txstat.ts_flags == HAL_TX_SW_FILTERED) {
  90e968:	2a10ef        	l8ui	a10, a1, 239
  90e96b:	2d1258        	l32i	a13, a1, 0x160
  90e96e:	69ae1a        	bnei	a10, 128, 90e98c <ath_tgt_tx_comp_aggr+0x124>
		adf_os_assert(0);
  90e971:	126915        	l32r	a2, 8e8dc8 <memset+0x1f80>
  90e974:	1a6afb        	l32r	a10, 8e9560 <memset+0x2718>
  90e977:	222212        	l32i	a2, a2, 72
  90e97a:	1b6b11        	l32r	a11, 8e95c0 <memset+0x2778>
  90e97d:	0b2000        	callx8	a2
  90e980:	12697a        	l32r	a2, 8e8f68 <memset+0x2120>
  90e983:	0c0200        	memw
  90e986:	8220      	l32i.n	a2, a2, 0
  90e988:	d10f      	retw.n
  90e98a:	000027        	excw
		return;
	}

	if (!bf->bf_isaggr) {
  90e98d:	3221c2        	excw
  90e990:	b007      	addi.n	a7, a0, -1
  90e992:	b701      	addi.n	a1, a0, 7
  90e994:	657104        	bnez	a7, 90ea9c <ath_tgt_tx_comp_aggr+0x234>
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc *ds  = bf->bf_lastds;

	ath_update_stats(sc, bf);
  90e997:	da20      	mov.n	a10, a2
  90e999:	db30      	mov.n	a11, a3
static void
ath_tx_comp_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc *ds  = bf->bf_lastds;
  90e99b:	853e      	l32i.n	a5, a3, 56
}

static void
ath_tx_comp_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  90e99d:	8434      	l32i.n	a4, a3, 16
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90e99f:	26304d        	l8ui	a6, a3, 77
	struct ath_tx_desc *ds  = bf->bf_lastds;

	ath_update_stats(sc, bf);
  90e9a2:	2d1658        	s32i	a13, a1, 0x160
  90e9a5:	5bf987        	call8	90cfc4 <ath_update_stats>
	ath_rate_tx_complete(sc, an, ds, bf->bf_rcs, 1, 0);
  90e9a8:	2d1258        	l32i	a13, a1, 0x160
  90e9ab:	dc50      	mov.n	a12, a5
  90e9ad:	da20      	mov.n	a10, a2
  90e9af:	db40      	mov.n	a11, a4
  90e9b1:	c0e1      	movi.n	a14, 1
  90e9b3:	df70      	mov.n	a15, a7
  90e9b5:	5bf915        	call8	90ce0c <ath_rate_tx_complete>

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90e9b8:	255066        	l8ui	a5, a5, 102
  90e9bb:	7f5f02        	bbsi	a5, 31, 90e9c1 <ath_tgt_tx_comp_aggr+0x159>
  90e9be:	6000ab        	j	90ea6d <ath_tgt_tx_comp_aggr+0x205>

static inline void
ath_tx_retry_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90e9c1:	24304d        	l8ui	a4, a3, 77
	struct ath_txq *txq;

	txq = bf->bf_txq;

	if (bf->bf_retries >= OWLMAX_RETRIES) {
  90e9c4:	c079      	movi.n	a7, 9

static inline void
ath_tx_retry_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90e9c6:	0c4511        	slli	a5, a4, 4
  90e9c9:	04540c        	sub	a4, a5, a4
  90e9cc:	8534      	l32i.n	a5, a3, 16
	struct ath_txq *txq;

	txq = bf->bf_txq;
  90e9ce:	263220        	l32i	a6, a3, 128

static inline void
ath_tx_retry_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90e9d1:	05440a        	addx4	a4, a4, a5
	struct ath_txq *txq;

	txq = bf->bf_txq;

	if (bf->bf_retries >= OWLMAX_RETRIES) {
  90e9d4:	253086        	l8ui	a5, a3, 134

static inline void
ath_tx_retry_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90e9d7:	244c24        	addi	a4, a4, 36
	struct ath_txq *txq;

	txq = bf->bf_txq;

	if (bf->bf_retries >= OWLMAX_RETRIES) {
  90e9da:	757b27        	bgeu	a7, a5, 90ea05 <ath_tgt_tx_comp_aggr+0x19d>
		__stats(sc, txunaggr_xretry);
  90e9dd:	252273        	l32i	a5, a2, 0x1cc
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90e9e0:	2b3123        	l16ui	a11, a3, 70
	struct ath_txq *txq;

	txq = bf->bf_txq;

	if (bf->bf_retries >= OWLMAX_RETRIES) {
		__stats(sc, txunaggr_xretry);
  90e9e3:	b155      	addi.n	a5, a5, 1
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90e9e5:	044a02        	or	a10, a4, a4
	struct ath_txq *txq;

	txq = bf->bf_txq;

	if (bf->bf_retries >= OWLMAX_RETRIES) {
		__stats(sc, txunaggr_xretry);
  90e9e8:	252673        	s32i	a5, a2, 0x1cc
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90e9eb:	0b4b14        	srli	a11, a11, 4
  90e9ee:	5bf991        	call8	90d034 <ath_tx_update_baw>
		ath_tx_status_update(sc, bf);
  90e9f1:	da20      	mov.n	a10, a2
  90e9f3:	db30      	mov.n	a11, a3
  90e9f5:	5bfb9b        	call8	90d864 <ath_tx_status_update>
		ath_bar_tx(sc, tid, bf);
  90e9f8:	da20      	mov.n	a10, a2
  90e9fa:	db40      	mov.n	a11, a4
  90e9fc:	dc30      	mov.n	a12, a3
  90e9fe:	5bfb1b        	call8	90d66c <ath_bar_tx>
  90ea01:	d10f      	retw.n
  90ea03:	000025        	excw
		return;
	}

	__stats(sc, txunaggr_compretries);
  90ea06:	226db1        	addmi	a2, a6, 0xffffb100
  90ea09:	552526        	call4	957ea4 <_etext+0x48da7>
  90ea0c:	6d853e        	excw
	if (!bf->bf_lastds->ds_link) {
  90ea0f:	295000        	l8ui	a9, a5, 0
  90ea12:	285001        	l8ui	a8, a5, 1
  90ea15:	275002        	l8ui	a7, a5, 2
  90ea18:	089910        	slli	a9, a9, 24
  90ea1b:	008811        	slli	a8, a8, 16
  90ea1e:	098802        	or	a8, a8, a9
  90ea21:	087711        	slli	a7, a7, 8
  90ea24:	255003        	l8ui	a5, a5, 3
  90ea27:	087702        	or	a7, a7, a8
  90ea2a:	075502        	or	a5, a5, a7
  90ea2d:	cd54      	bnez.n	a5, 90ea45 <ath_tgt_tx_comp_aggr+0x1dd>
		__stats(sc, txunaggr_errlast);
  90ea2f:	252272        	l32i	a5, a2, 0x1c8
		bf = ath_buf_toggle(sc, bf, 1);
  90ea32:	db30      	mov.n	a11, a3
		return;
	}

	__stats(sc, txunaggr_compretries);
	if (!bf->bf_lastds->ds_link) {
		__stats(sc, txunaggr_errlast);
  90ea34:	b155      	addi.n	a5, a5, 1
  90ea36:	252672        	s32i	a5, a2, 0x1c8
		bf = ath_buf_toggle(sc, bf, 1);
  90ea39:	022a02        	or	a10, a2, a2
  90ea3c:	2c0a01        	movi	a12, 1
  90ea3f:	5bfa97        	call8	90d49c <ath_buf_toggle>
  90ea42:	0aa302        	or	a3, a10, a10
	}

	ath_tx_set_retry(sc, bf);
  90ea45:	da20      	mov.n	a10, a2
  90ea47:	db30      	mov.n	a11, a3
  90ea49:	5bfb64        	call8	90d7dc <ath_tx_set_retry>
	asf_tailq_insert_head(&tid->buf_q, bf, bf_list);
  90ea4c:	824b      	l32i.n	a2, a4, 44
  90ea4e:	253c24        	addi	a5, a3, 36
  90ea51:	9239      	s32i.n	a2, a3, 36
  90ea53:	c823      	beqz.n	a2, 90ea5a <ath_tgt_tx_comp_aggr+0x1f2>
  90ea55:	952a      	s32i.n	a5, a2, 40
  90ea57:	600001        	j	90ea5c <ath_tgt_tx_comp_aggr+0x1f4>
  90ea5a:	954c      	s32i.n	a5, a4, 48
  90ea5c:	934b      	s32i.n	a3, a4, 44
  90ea5e:	224c2c        	addi	a2, a4, 44
  90ea61:	923a      	s32i.n	a2, a3, 40
	ath_tgt_tx_enqueue(txq, tid);
  90ea63:	da60      	mov.n	a10, a6
  90ea65:	db40      	mov.n	a11, a4
  90ea67:	60016e        	j	90ebd9 <ath_tgt_tx_comp_aggr+0x371>
  90ea6a:	000000        	ill

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
		ath_tx_retry_unaggr(sc, bf);
		return;
	}
	__stats(sc, tx_compunaggr);
  90ea6d:	25225e        	l32i	a5, a2, 0x178

	ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90ea70:	2b3123        	l16ui	a11, a3, 70

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
		ath_tx_retry_unaggr(sc, bf);
		return;
	}
	__stats(sc, tx_compunaggr);
  90ea73:	b155      	addi.n	a5, a5, 1
  90ea75:	25265e        	s32i	a5, a2, 0x178

static void
ath_tx_comp_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90ea78:	0c6511        	slli	a5, a6, 4
  90ea7b:	06560c        	sub	a6, a5, a6
  90ea7e:	046a0a        	addx4	a10, a6, a4
		ath_tx_retry_unaggr(sc, bf);
		return;
	}
	__stats(sc, tx_compunaggr);

	ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90ea81:	2aac24        	addi	a10, a10, 36
  90ea84:	0b4b14        	srli	a11, a11, 4
  90ea87:	5bf96b        	call8	90d034 <ath_tx_update_baw>
	ath_tx_status_update(sc, bf);
  90ea8a:	da20      	mov.n	a10, a2
  90ea8c:	db30      	mov.n	a11, a3
  90ea8e:	5bfb75        	call8	90d864 <ath_tx_status_update>
	ath_tx_freebuf(sc, bf);
  90ea91:	da20      	mov.n	a10, a2
  90ea93:	db30      	mov.n	a11, a3
  90ea95:	5bfac5        	call8	90d5ac <ath_tx_freebuf>
  90ea98:	d10f      	retw.n
  90ea9a:	000027        	excw
	if (!bf->bf_isaggr) {
		ath_tx_comp_unaggr(sc, bf);
		return;
	}

	__stats(sc, tx_compaggr);
  90ea9d:	225f26        	s32ri	a2, a5, 152

	asf_tailq_init(&bf_q);
  90eaa0:	1650b1        	l32r	a6, 8e2d64 <athos_indirection_table_install+0x17f0>
	if (!bf->bf_isaggr) {
		ath_tx_comp_unaggr(sc, bf);
		return;
	}

	__stats(sc, tx_compaggr);
  90eaa3:	77261a        	bbci	a2, 7, 90eac1 <ath_tgt_tx_comp_aggr+0x259>

	asf_tailq_init(&bf_q);
  90eaa6:	402726        	excw
	if (!bf->bf_isaggr) {
		ath_tx_comp_unaggr(sc, bf);
		return;
	}

	__stats(sc, tx_compaggr);
  90eaa9:	5fa617        	call12	8f8308 <memset+0x114c0>

	asf_tailq_init(&bf_q);
  90eaac:	271651        	s32i	a7, a1, 0x144

	seq_st =  ATH_DS_BA_SEQ(ds);
  90eaaf:	281176        	l16ui	a8, a1, 236
	ba     =  ATH_DS_BA_BITMAP(ds);
	tx_ok  =  (ATH_DS_TX_STATUS(ds) == HAL_OK);
  90eab2:	2710ee        	l8ui	a7, a1, 238

	__stats(sc, tx_compaggr);

	asf_tailq_init(&bf_q);

	seq_st =  ATH_DS_BA_SEQ(ds);
  90eab5:	281656        	s32i	a8, a1, 0x158
	ba     =  ATH_DS_BA_BITMAP(ds);
	tx_ok  =  (ATH_DS_TX_STATUS(ds) == HAL_OK);

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90eab8:	070f40        	extui	a15, a7, 0, 1
  90eabb:	c8f1      	beqz.n	a15, 90eac0 <ath_tgt_tx_comp_aggr+0x258>
  90eabd:	60001f        	j	90eae0 <ath_tgt_tx_comp_aggr+0x278>

	asf_tailq_init(&bf_q);

	seq_st =  ATH_DS_BA_SEQ(ds);
	ba     =  ATH_DS_BA_BITMAP(ds);
	tx_ok  =  (ATH_DS_TX_STATUS(ds) == HAL_OK);
  90eac0:	c091      	movi.n	a9, 1
  90eac2:	07f939        	movnez	a9, a15, a7
	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	if (tx_ok && !ATH_DS_TX_BA(ds)) {
  90eac5:	ca95      	beqz.n	a9, 90eaee <ath_tgt_tx_comp_aggr+0x286>
  90eac7:	d6f0      	mov.n	a6, a15
  90eac9:	7faf23        	bbsi	a10, 31, 90eaf0 <ath_tgt_tx_comp_aggr+0x288>
		__stats(sc, txaggr_babug);
  90eacc:	242269        	l32i	a4, a2, 0x1a4
		adf_os_print("BA Bug?\n");
  90eacf:	1a6b12        	l32r	a10, 8e9718 <memset+0x28d0>
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	if (tx_ok && !ATH_DS_TX_BA(ds)) {
		__stats(sc, txaggr_babug);
  90ead2:	b144      	addi.n	a4, a4, 1
  90ead4:	242669        	s32i	a4, a2, 0x1a4
		adf_os_print("BA Bug?\n");
  90ead7:	146915        	l32r	a4, 8e8f2c <memset+0x20e4>
  90eada:	244212        	l32i	a4, a4, 72
  90eadd:	0b4000        	callx8	a4
		ath_tx_comp_aggr_error(sc, bf, tid);
  90eae0:	da20      	mov.n	a10, a2
  90eae2:	db30      	mov.n	a11, a3
  90eae4:	dc50      	mov.n	a12, a5
  90eae6:	5bfbd6        	call8	90da40 <ath_tx_comp_aggr_error>
  90eae9:	d10f      	retw.n
  90eaeb:	000000        	ill
	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	if (tx_ok && !ATH_DS_TX_BA(ds)) {
  90eaee:	d690      	mov.n	a6, a9

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
		bf_next  = bf->bf_next;

		if (tx_ok && ATH_BA_ISSET(ba, ba_index)) {
  90eaf0:	270afc        	movi	a7, 252
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90eaf3:	2b3123        	l16ui	a11, a3, 70
  90eaf6:	281256        	l32i	a8, a1, 0x158
  90eaf9:	0b4b14        	srli	a11, a11, 4
  90eafc:	08ba0c        	sub	a10, a11, a8
		bf_next  = bf->bf_next;
  90eaff:	883b      	l32i.n	a8, a3, 44
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90eb01:	0a0c4b        	extui	a12, a10, 0, 12
		bf_next  = bf->bf_next;
  90eb04:	281657        	s32i	a8, a1, 0x15c

		if (tx_ok && ATH_BA_ISSET(ba, ba_index)) {
  90eb07:	c38f      	movi.n	a8, 63
  90eb09:	7c824c        	blt	a8, a12, 90eb59 <ath_tgt_tx_comp_aggr+0x2f1>
  90eb0c:	649049        	beqz	a9, 90eb59 <ath_tgt_tx_comp_aggr+0x2f1>
  90eb0f:	0c5c12        	srai	a12, a12, 5
  90eb12:	01cc0a        	addx4	a12, a12, a1
  90eb15:	a7cc      	add.n	a12, a12, a7
  90eb17:	c0e1      	movi.n	a14, 1
  90eb19:	8cc0      	l32i.n	a12, a12, 0
  90eb1b:	00a104        	ssl	a10
  90eb1e:	00ea1a        	sll	a10, a14
  90eb21:	7ca034        	bnone	a10, a12, 90eb59 <ath_tgt_tx_comp_aggr+0x2f1>
			__stats(sc, txaggr_compgood);
  90eb24:	2a2262        	l32i	a10, a2, 0x188
  90eb27:	aeaa      	add.n	a10, a10, a14
  90eb29:	2a2662        	s32i	a10, a2, 0x188
			ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90eb2c:	055a02        	or	a10, a5, a5
  90eb2f:	291659        	s32i	a9, a1, 0x164
  90eb32:	2e1658        	s32i	a14, a1, 0x160
  90eb35:	5bf93f        	call8	90d034 <ath_tx_update_baw>
			ath_tx_status_update_aggr(sc, bf, ds, rcs, 1);
  90eb38:	2e1258        	l32i	a14, a1, 0x160
  90eb3b:	2c0a88        	movi	a12, 136
  90eb3e:	2d1a10        	movi	a13, 0x110
  90eb41:	da20      	mov.n	a10, a2
  90eb43:	db30      	mov.n	a11, a3
  90eb45:	a1cc      	add.n	a12, a12, a1
  90eb47:	0d1d08        	add	a13, a1, a13
  90eb4a:	5bfb69        	call8	90d8f0 <ath_tx_status_update_aggr>
			ath_tx_freebuf(sc, bf);
  90eb4d:	da20      	mov.n	a10, a2
  90eb4f:	db30      	mov.n	a11, a3
  90eb51:	5bfa96        	call8	90d5ac <ath_tx_freebuf>
  90eb54:	600019        	j	90eb71 <ath_tgt_tx_comp_aggr+0x309>
  90eb57:	00002c        	excw
		} else {
			ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
  90eb5a:	1a402d        	l32r	a10, 8dec10 <_bss_end+0x3cbd00>
  90eb5d:	1a48da        	l32r	a10, 8e0ec8 <_bss_end+0x3cdfb8>
  90eb60:	20db30        	l32ai	a0, a13, 192
  90eb63:	ac1c      	add.n	a12, a1, a12
  90eb65:	0d1d08        	add	a13, a1, a13
  90eb68:	291659        	s32i	a9, a1, 0x164
			nbad ++;
  90eb6b:	266c01        	addi	a6, a6, 1
			__stats(sc, txaggr_compgood);
			ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
			ath_tx_status_update_aggr(sc, bf, ds, rcs, 1);
			ath_tx_freebuf(sc, bf);
		} else {
			ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
  90eb6e:	5bfb7c        	call8	90d960 <ath_tx_retry_subframe>
  90eb71:	231257        	l32i	a3, a1, 0x15c
			nbad ++;
  90eb74:	291259        	l32i	a9, a1, 0x164
		adf_os_print("BA Bug?\n");
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	while (bf) {
  90eb77:	653f78        	bnez	a3, 90eaf3 <ath_tgt_tx_comp_aggr+0x28b>
			nbad ++;
		}
		bf = bf_next;
	}

	ath_update_aggr_stats(sc, ds, nframes, nbad);
  90eb7a:	2b0a88        	movi	a11, 136
  90eb7d:	da20      	mov.n	a10, a2
  90eb7f:	a1bb      	add.n	a11, a11, a1
  90eb81:	5bf99b        	call8	90d1f0 <ath_update_aggr_stats$isra$2>
	ath_rate_tx_complete(sc, an, ds, rcs, nframes, nbad);
  90eb84:	2c0a88        	movi	a12, 136
  90eb87:	2d1a10        	movi	a13, 0x110
  90eb8a:	2e1254        	l32i	a14, a1, 0x150
  90eb8d:	a1cc      	add.n	a12, a12, a1
  90eb8f:	da20      	mov.n	a10, a2
  90eb91:	db40      	mov.n	a11, a4
  90eb93:	0d1d08        	add	a13, a1, a13
  90eb96:	066f02        	or	a15, a6, a6
  90eb99:	5bf89c        	call8	90ce0c <ath_rate_tx_complete>

	if (bar) {
  90eb9c:	2c1252        	l32i	a12, a1, 0x148
  90eb9f:	c8c5      	beqz.n	a12, 90eba8 <ath_tgt_tx_comp_aggr+0x340>
		ath_bar_tx(sc, tid, bar);
  90eba1:	da20      	mov.n	a10, a2
  90eba3:	db50      	mov.n	a11, a5
  90eba5:	5bfab1        	call8	90d66c <ath_bar_tx>
	}

	if (!asf_tailq_empty(&bf_q)) {
  90eba8:	231250        	l32i	a3, a1, 0x140
  90ebab:	ca3d      	beqz.n	a3, 90ebdc <ath_tgt_tx_comp_aggr+0x374>
		__stats(sc, txaggr_prepends);
  90ebad:	232264        	l32i	a3, a2, 0x190
  90ebb0:	b133      	addi.n	a3, a3, 1
  90ebb2:	232664        	s32i	a3, a2, 0x190
		TAILQ_INSERTQ_HEAD(&tid->buf_q, &bf_q, bf_list);
  90ebb5:	835b      	l32i.n	a3, a5, 44
  90ebb7:	221251        	l32i	a2, a1, 0x144
  90ebba:	c83a      	beqz.n	a3, 90ebc8 <ath_tgt_tx_comp_aggr+0x360>
  90ebbc:	9320      	s32i.n	a3, a2, 0
  90ebbe:	825b      	l32i.n	a2, a5, 44
  90ebc0:	231251        	l32i	a3, a1, 0x144
  90ebc3:	932a      	s32i.n	a3, a2, 40
  90ebc5:	600001        	j	90ebca <ath_tgt_tx_comp_aggr+0x362>
  90ebc8:	925c      	s32i.n	a2, a5, 48
  90ebca:	221250        	l32i	a2, a1, 0x140
  90ebcd:	235c2c        	addi	a3, a5, 44
  90ebd0:	925b      	s32i.n	a2, a5, 44
		ath_tgt_tx_enqueue(txq, tid);
  90ebd2:	2a1255        	l32i	a10, a1, 0x154
		ath_bar_tx(sc, tid, bar);
	}

	if (!asf_tailq_empty(&bf_q)) {
		__stats(sc, txaggr_prepends);
		TAILQ_INSERTQ_HEAD(&tid->buf_q, &bf_q, bf_list);
  90ebd5:	932a      	s32i.n	a3, a2, 40
		ath_tgt_tx_enqueue(txq, tid);
  90ebd7:	db50      	mov.n	a11, a5
  90ebd9:	5bf97c        	call8	90d1cc <ath_tgt_tx_enqueue>
  90ebdc:	d10f      	retw.n
	...

0090ebe0 <owltgt_tx_processq>:
	ath_tx_status_send(sc);
}

void owltgt_tx_processq(struct ath_softc_tgt *sc, struct ath_txq *txq,
			owl_txq_state_t txqstate)
{
  90ebe0:	6c1006        	entry	a1, 48
	struct ath_tx_buf *bf;
	struct ath_tx_desc *ds;
	struct ath_hal *ah = sc->sc_ah;
  90ebe3:	252d05        	addmi	a5, a2, 0x500
  90ebe6:	865b      	l32i.n	a6, a5, 44
		bf = asf_tailq_first(&txq->axq_q);

		ds = bf->bf_lastds;
		status = ah->ah_procTxDesc(ah, ds);

		if (status == HAL_EINPROGRESS) {
  90ebe8:	c07f      	movi.n	a7, 15
	struct ath_tx_desc *ds;
	struct ath_hal *ah = sc->sc_ah;
	HAL_STATUS status;

	for (;;) {
		if (asf_tailq_empty(&txq->axq_q)) {
  90ebea:	8532      	l32i.n	a5, a3, 8
  90ebec:	cc54      	bnez.n	a5, 90ebf4 <owltgt_tx_processq+0x14>
			txq->axq_link = NULL;
  90ebee:	9531      	s32i.n	a5, a3, 4
			txq->axq_linkbuf = NULL;
  90ebf0:	9535      	s32i.n	a5, a3, 20
			break;
  90ebf2:	d10f      	retw.n
		}

		bf = asf_tailq_first(&txq->axq_q);

		ds = bf->bf_lastds;
  90ebf4:	885e      	l32i.n	a8, a5, 56
		status = ah->ah_procTxDesc(ah, ds);
  90ebf6:	29621a        	l32i	a9, a6, 104
  90ebf9:	db80      	mov.n	a11, a8
  90ebfb:	9810      	s32i.n	a8, a1, 0
  90ebfd:	da60      	mov.n	a10, a6
  90ebff:	0b9000        	callx8	a9

		if (status == HAL_EINPROGRESS) {
  90ec02:	8810      	l32i.n	a8, a1, 0
  90ec04:	77a91e        	bne	a10, a7, 90ec26 <owltgt_tx_processq+0x46>
			if (txqstate == OWL_TXQ_ACTIVE)
  90ec07:	64406d        	beqz	a4, 90ec78 <owltgt_tx_processq+0x98>
				break;
			else if (txqstate == OWL_TXQ_STOPPED) {
  90ec0a:	694112        	bnei	a4, 1, 90ec20 <owltgt_tx_processq+0x40>
				__stats(sc, tx_stopfiltered);
  90ec0d:	292275        	l32i	a9, a2, 0x1d4
  90ec10:	b199      	addi.n	a9, a9, 1
  90ec12:	292675        	s32i	a9, a2, 0x1d4
				ds->ds_txstat.ts_flags  = 0;
  90ec15:	c090      	movi.n	a9, 0
  90ec17:	298467        	s8i	a9, a8, 103
				ds->ds_txstat.ts_status = HAL_OK;
  90ec1a:	298466        	s8i	a9, a8, 102
  90ec1d:	600005        	j	90ec26 <owltgt_tx_processq+0x46>
			} else {
				ds->ds_txstat.ts_flags  = HAL_TX_SW_FILTERED;
  90ec20:	29fa80        	movi	a9, -128
  90ec23:	298467        	s8i	a9, a8, 103
			}
		}

		ATH_TXQ_REMOVE_HEAD(txq, bf, bf_list);
  90ec26:	8859      	l32i.n	a8, a5, 36
  90ec28:	895a      	l32i.n	a9, a5, 40
  90ec2a:	c883      	beqz.n	a8, 90ec31 <owltgt_tx_processq+0x51>
  90ec2c:	998a      	s32i.n	a9, a8, 40
  90ec2e:	600001        	j	90ec33 <owltgt_tx_processq+0x53>
  90ec31:	9933      	s32i.n	a9, a3, 12
  90ec33:	895a      	l32i.n	a9, a5, 40
  90ec35:	9890      	s32i.n	a8, a9, 0
  90ec37:	8834      	l32i.n	a8, a3, 16
  90ec39:	b088      	addi.n	a8, a8, -1
  90ec3b:	9834      	s32i.n	a8, a3, 16
		if ((asf_tailq_empty(&txq->axq_q))) {
  90ec3d:	8832      	l32i.n	a8, a3, 8
  90ec3f:	cc8a      	bnez.n	a8, 90ec4d <owltgt_tx_processq+0x6d>
			__stats(sc, tx_qnull);
  90ec41:	29225c        	l32i	a9, a2, 0x170
  90ec44:	b199      	addi.n	a9, a9, 1
  90ec46:	29265c        	s32i	a9, a2, 0x170
			txq->axq_link = NULL;
  90ec49:	9831      	s32i.n	a8, a3, 4
			txq->axq_linkbuf = NULL;
  90ec4b:	9835      	s32i.n	a8, a3, 20
		}

		if (bf->bf_comp) {
  90ec4d:	885f      	l32i.n	a8, a5, 60
			bf->bf_comp(sc, bf);
  90ec4f:	da20      	mov.n	a10, a2
  90ec51:	db50      	mov.n	a11, a5
			__stats(sc, tx_qnull);
			txq->axq_link = NULL;
			txq->axq_linkbuf = NULL;
		}

		if (bf->bf_comp) {
  90ec53:	c886      	beqz.n	a8, 90ec5d <owltgt_tx_processq+0x7d>
			bf->bf_comp(sc, bf);
  90ec55:	0b8000        	callx8	a8
  90ec58:	60000c        	j	90ec68 <owltgt_tx_processq+0x88>
  90ec5b:	00005b        	extui	a0, a0, 16, 12
		} else {
			ath_tx_status_update(sc, bf);
  90ec5e:	fb          	.byte 0xfb
  90ec5f:	01022a        	muluh	a2, a0, a1
			ath_buf_comp(sc, bf);
  90ec62:	02db50        	extui	a11, a2, 29, 1
  90ec65:	5bfa72        	call8	90d630 <ath_buf_comp>
		}

		if (txqstate == OWL_TXQ_ACTIVE) {
  90ec68:	654f7e        	bnez	a4, 90ebea <owltgt_tx_processq+0xa>
			ath_tgt_txq_schedule(sc, txq);
  90ec6b:	022a02        	or	a10, a2, a2
  90ec6e:	033b02        	or	a11, a3, a3
  90ec71:	5bfe40        	call8	90e574 <ath_tgt_txq_schedule>
  90ec74:	63ff72        	j	90ebea <owltgt_tx_processq+0xa>
  90ec77:	00d10f        	subx8	a1, a13, a0
	...

0090ec7c <owl_tgt_tx_tasklet>:
	owltgt_tx_processq(sc, txq, OWL_TXQ_ACTIVE);
	ah->ah_setInterrupts(ah, sc->sc_imask);
}

void owl_tgt_tx_tasklet(TQUEUE_ARG data)
{
  90ec7c:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)data;
	a_int32_t i;
	struct ath_txq *txq;

	ath_tx_status_clear(sc);
  90ec7f:	da20      	mov.n	a10, a2
  90ec81:	5bfaf4        	call8	90d854 <ath_tx_status_clear>

	for (i = 0; i < (HAL_NUM_TX_QUEUES - 6); i++) {
  90ec84:	c030      	movi.n	a3, 0
		txq = ATH_TXQ(sc, i);

		if (ATH_TXQ_SETUP(sc, i)) {
			if (txq == sc->sc_cabq)
  90ec86:	262d05        	addmi	a6, a2, 0x500
	ath_tx_status_clear(sc);

	for (i = 0; i < (HAL_NUM_TX_QUEUES - 6); i++) {
		txq = ATH_TXQ(sc, i);

		if (ATH_TXQ_SETUP(sc, i)) {
  90ec89:	242d03        	addmi	a4, a2, 0x300
  90ec8c:	2440c8        	l8ui	a4, a4, 200
  90ec8f:	003004        	ssr	a3
  90ec92:	04041b        	sra	a4, a4
  90ec95:	7f4745        	bbci	a4, 31, 90ecde <owl_tgt_tx_tasklet+0x62>
	struct ath_txq *txq;

	ath_tx_status_clear(sc);

	for (i = 0; i < (HAL_NUM_TX_QUEUES - 6); i++) {
		txq = ATH_TXQ(sc, i);
  90ec98:	253c1e        	addi	a5, a3, 30
  90ec9b:	0b5511        	slli	a5, a5, 5
  90ec9e:	a525      	add.n	a5, a2, a5

		if (ATH_TXQ_SETUP(sc, i)) {
			if (txq == sc->sc_cabq)
  90eca0:	846c      	l32i.n	a4, a6, 48
	struct ath_txq *txq;

	ath_tx_status_clear(sc);

	for (i = 0; i < (HAL_NUM_TX_QUEUES - 6); i++) {
		txq = ATH_TXQ(sc, i);
  90eca2:	bc55      	addi.n	a5, a5, 12

		if (ATH_TXQ_SETUP(sc, i)) {
			if (txq == sc->sc_cabq)
  90eca4:	74592d        	bne	a5, a4, 90ecd5 <owl_tgt_tx_tasklet+0x59>
	}
}

static void owltgt_tx_process_cabq(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	struct ath_hal *ah = sc->sc_ah;
  90eca7:	846b      	l32i.n	a4, a6, 44
	ah->ah_setInterrupts(ah, sc->sc_imask & ~HAL_INT_SWBA);
  90eca9:	196a23        	l32r	a9, 8e9538 <memset+0x26f0>
  90ecac:	2b22c4        	l32i	a11, a2, 0x310
  90ecaf:	284228        	l32i	a8, a4, 160
  90ecb2:	09bb01        	and	a11, a11, a9
  90ecb5:	da40      	mov.n	a10, a4
  90ecb7:	0b8000        	callx8	a8
	owltgt_tx_processq(sc, txq, OWL_TXQ_ACTIVE);
  90ecba:	da20      	mov.n	a10, a2
  90ecbc:	db50      	mov.n	a11, a5
  90ecbe:	2c0a00        	movi	a12, 0
  90ecc1:	5bffc7        	call8	90ebe0 <owltgt_tx_processq>
	ah->ah_setInterrupts(ah, sc->sc_imask);
  90ecc4:	2b22c4        	l32i	a11, a2, 0x310
  90ecc7:	254228        	l32i	a5, a4, 160
  90ecca:	044a02        	or	a10, a4, a4
  90eccd:	0b5000        	callx8	a5
  90ecd0:	60000a        	j	90ecde <owl_tgt_tx_tasklet+0x62>
  90ecd3:	0000da        	excw

		if (ATH_TXQ_SETUP(sc, i)) {
			if (txq == sc->sc_cabq)
				owltgt_tx_process_cabq(sc, txq);
			else
				owltgt_tx_processq(sc, txq, OWL_TXQ_ACTIVE);
  90ecd6:	20db50        	l32ai	a0, a13, 0x140
  90ecd9:	c0c0      	movi.n	a12, 0
  90ecdb:	5bffc1        	call8	90ebe0 <owltgt_tx_processq>
	a_int32_t i;
	struct ath_txq *txq;

	ath_tx_status_clear(sc);

	for (i = 0; i < (HAL_NUM_TX_QUEUES - 6); i++) {
  90ecde:	b133      	addi.n	a3, a3, 1
  90ece0:	6934a5        	bnei	a3, 4, 90ec89 <owl_tgt_tx_tasklet+0xd>
			else
				owltgt_tx_processq(sc, txq, OWL_TXQ_ACTIVE);
		}
	}

	ath_tx_status_send(sc);
  90ece3:	da20      	mov.n	a10, a2
  90ece5:	5bfb82        	call8	90daf0 <ath_tx_status_send>
  90ece8:	d10f      	retw.n
	...

0090ecec <ath_tgt_handle_aggr>:
	} while (!asf_tailq_empty(&txq->axq_tidq) && !bdone);
}

void
ath_tgt_handle_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90ecec:	6c1004        	entry	a1, 32
	ath_atx_tid_t *tid;
	struct ath_node_target *an;
	struct ath_txq *txq = bf->bf_txq;
	a_bool_t queue_frame, within_baw;

	an = (struct ath_node_target *)bf->bf_node;
  90ecef:	8634      	l32i.n	a6, a3, 16
void
ath_tgt_handle_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	ath_atx_tid_t *tid;
	struct ath_node_target *an;
	struct ath_txq *txq = bf->bf_txq;
  90ecf1:	253220        	l32i	a5, a3, 128
	a_bool_t queue_frame, within_baw;

	an = (struct ath_node_target *)bf->bf_node;
	adf_os_assert(an);
  90ecf4:	cd65      	bnez.n	a6, 90ed0d <ath_tgt_handle_aggr+0x21>
  90ecf6:	146915        	l32r	a4, 8e914c <memset+0x2304>
  90ecf9:	1a6afb        	l32r	a10, 8e98e8 <memset+0x2aa0>
  90ecfc:	244212        	l32i	a4, a4, 72
  90ecff:	1b6b13        	l32r	a11, 8e994c <memset+0x2b04>
  90ed02:	0b4000        	callx8	a4
  90ed05:	14697a        	l32r	a4, 8e92f0 <memset+0x24a8>
  90ed08:	0c0200        	memw
  90ed0b:	8440      	l32i.n	a4, a4, 0

	tid = &an->tid[bf->bf_tidno];
  90ed0d:	24304d        	l8ui	a4, a3, 77
  90ed10:	0c4811        	slli	a8, a4, 4
  90ed13:	04840c        	sub	a4, a8, a4
  90ed16:	06440a        	addx4	a4, a4, a6
  90ed19:	244c24        	addi	a4, a4, 36
	adf_os_assert(tid);
  90ed1c:	cd45      	bnez.n	a4, 90ed35 <ath_tgt_handle_aggr+0x49>
  90ed1e:	166915        	l32r	a6, 8e9174 <memset+0x232c>
  90ed21:	1a6afb        	l32r	a10, 8e9910 <memset+0x2ac8>
  90ed24:	266212        	l32i	a6, a6, 72
  90ed27:	1b6b13        	l32r	a11, 8e9974 <memset+0x2b2c>
  90ed2a:	0b6000        	callx8	a6
  90ed2d:	16697a        	l32r	a6, 8e9318 <memset+0x24d0>
  90ed30:	0c0200        	memw
  90ed33:	8660      	l32i.n	a6, a6, 0

	bf->bf_comp = ath_tgt_tx_comp_aggr;
  90ed35:	166b0e        	l32r	a6, 8e9970 <memset+0x2b28>
	within_baw = BAW_WITHIN(tid->seq_start, tid->baw_size,
				SEQNO_FROM_BF_SEQNO(bf->bf_seqno));

	queue_frame = ( (txq->axq_depth >= ATH_AGGR_MIN_QDEPTH) ||
			(!asf_tailq_empty(&tid->buf_q)) ||
			(tid->paused) || (!within_baw) );
  90ed38:	8a54      	l32i.n	a10, a5, 16
	adf_os_assert(an);

	tid = &an->tid[bf->bf_tidno];
	adf_os_assert(tid);

	bf->bf_comp = ath_tgt_tx_comp_aggr;
  90ed3a:	963f      	s32i.n	a6, a3, 60

	within_baw = BAW_WITHIN(tid->seq_start, tid->baw_size,
  90ed3c:	283123        	l16ui	a8, a3, 70
  90ed3f:	294102        	l16ui	a9, a4, 4
  90ed42:	264104        	l16ui	a6, a4, 8
				SEQNO_FROM_BF_SEQNO(bf->bf_seqno));

	queue_frame = ( (txq->axq_depth >= ATH_AGGR_MIN_QDEPTH) ||
			(!asf_tailq_empty(&tid->buf_q)) ||
			(tid->paused) || (!within_baw) );
  90ed45:	cda3      	bnez.n	a10, 90ed5c <ath_tgt_handle_aggr+0x70>
	bf->bf_comp = ath_tgt_tx_comp_aggr;

	within_baw = BAW_WITHIN(tid->seq_start, tid->baw_size,
				SEQNO_FROM_BF_SEQNO(bf->bf_seqno));

	queue_frame = ( (txq->axq_depth >= ATH_AGGR_MIN_QDEPTH) ||
  90ed47:	8a4b      	l32i.n	a10, a4, 44
  90ed49:	ccaf      	bnez.n	a10, 90ed5c <ath_tgt_handle_aggr+0x70>
			(!asf_tailq_empty(&tid->buf_q)) ||
  90ed4b:	2a4034        	l8ui	a10, a4, 52
  90ed4e:	ccaa      	bnez.n	a10, 90ed5c <ath_tgt_handle_aggr+0x70>
	tid = &an->tid[bf->bf_tidno];
	adf_os_assert(tid);

	bf->bf_comp = ath_tgt_tx_comp_aggr;

	within_baw = BAW_WITHIN(tid->seq_start, tid->baw_size,
  90ed50:	084814        	srli	a8, a8, 4
  90ed53:	09880c        	sub	a8, a8, a9
  90ed56:	08084b        	extui	a8, a8, 0, 12
				SEQNO_FROM_BF_SEQNO(bf->bf_seqno));

	queue_frame = ( (txq->axq_depth >= ATH_AGGR_MIN_QDEPTH) ||
			(!asf_tailq_empty(&tid->buf_q)) ||
			(tid->paused) || (!within_baw) );
  90ed59:	768219        	blt	a8, a6, 90ed76 <ath_tgt_handle_aggr+0x8a>

	if (queue_frame) {
		asf_tailq_insert_tail(&tid->buf_q, bf, bf_list);
  90ed5c:	c020      	movi.n	a2, 0
  90ed5e:	9239      	s32i.n	a2, a3, 36
  90ed60:	824c      	l32i.n	a2, a4, 48
		ath_tgt_tx_enqueue(txq, tid);
  90ed62:	da50      	mov.n	a10, a5
	queue_frame = ( (txq->axq_depth >= ATH_AGGR_MIN_QDEPTH) ||
			(!asf_tailq_empty(&tid->buf_q)) ||
			(tid->paused) || (!within_baw) );

	if (queue_frame) {
		asf_tailq_insert_tail(&tid->buf_q, bf, bf_list);
  90ed64:	923a      	s32i.n	a2, a3, 40
  90ed66:	9320      	s32i.n	a3, a2, 0
  90ed68:	233c24        	addi	a3, a3, 36
  90ed6b:	934c      	s32i.n	a3, a4, 48
		ath_tgt_tx_enqueue(txq, tid);
  90ed6d:	db40      	mov.n	a11, a4
  90ed6f:	5bf917        	call8	90d1cc <ath_tgt_tx_enqueue>
  90ed72:	d10f      	retw.n
  90ed74:	0000da        	excw
	} else {
		ath_tx_addto_baw(tid, bf);
  90ed77:	40db30        	excw
  90ed7a:	5bfd58        	call8	90e2dc <ath_tx_addto_baw>
		__stats(sc, txaggr_nframes);
  90ed7d:	24225d        	l32i	a4, a2, 0x174
		ath_tgt_tx_send_normal(sc, bf);
  90ed80:	da20      	mov.n	a10, a2
	if (queue_frame) {
		asf_tailq_insert_tail(&tid->buf_q, bf, bf_list);
		ath_tgt_tx_enqueue(txq, tid);
	} else {
		ath_tx_addto_baw(tid, bf);
		__stats(sc, txaggr_nframes);
  90ed82:	b144      	addi.n	a4, a4, 1
  90ed84:	24265d        	s32i	a4, a2, 0x174
		ath_tgt_tx_send_normal(sc, bf);
  90ed87:	db30      	mov.n	a11, a3
  90ed89:	5bfc15        	call8	90dde0 <ath_tgt_tx_send_normal>
  90ed8c:	d10f      	retw.n
	...

0090ed90 <ath_tgt_tx_cleanup>:
	wh->i_fc[1] |= IEEE80211_FC1_RETRY;
}

void ath_tgt_tx_cleanup(struct ath_softc_tgt *sc, struct ath_node_target *an,
			ath_atx_tid_t *tid, a_uint8_t discard_all)
{
  90ed90:	6c1004        	entry	a1, 32
  90ed93:	050547        	extui	a5, a5, 0, 8
	struct ath_tx_buf *bf_next;
	struct ath_txq *txq;

	txq = TID_TO_ACTXQ(tid->tidno);

	bf = asf_tailq_first(&tid->buf_q);
  90ed96:	834b      	l32i.n	a3, a4, 44

	while (bf) {
		if (discard_all || bf->bf_isretried) {
			bf_next = asf_tailq_next(bf, bf_list);
			TAILQ_DEQ(&tid->buf_q, bf, bf_list);
			if (bf->bf_isretried)
  90ed98:	c160      	movi.n	a6, 16

	txq = TID_TO_ACTXQ(tid->tidno);

	bf = asf_tailq_first(&tid->buf_q);

	while (bf) {
  90ed9a:	600042        	j	90ede0 <ath_tgt_tx_cleanup+0x50>
		if (discard_all || bf->bf_isretried) {
  90ed9d:	cc54      	bnez.n	a5, 90eda5 <ath_tgt_tx_cleanup+0x15>
  90ed9f:	273221        	l32i	a7, a3, 132
  90eda2:	776033        	bnone	a6, a7, 90edd9 <ath_tgt_tx_cleanup+0x49>
			bf_next = asf_tailq_next(bf, bf_list);
  90eda5:	8739      	l32i.n	a7, a3, 36
			TAILQ_DEQ(&tid->buf_q, bf, bf_list);
  90eda7:	834b      	l32i.n	a3, a4, 44
  90eda9:	c83f      	beqz.n	a3, 90edbc <ath_tgt_tx_cleanup+0x2c>
  90edab:	8839      	l32i.n	a8, a3, 36
  90edad:	893a      	l32i.n	a9, a3, 40
  90edaf:	c883      	beqz.n	a8, 90edb6 <ath_tgt_tx_cleanup+0x26>
  90edb1:	998a      	s32i.n	a9, a8, 40
  90edb3:	600001        	j	90edb8 <ath_tgt_tx_cleanup+0x28>
  90edb6:	994c      	s32i.n	a9, a4, 48
  90edb8:	893a      	l32i.n	a9, a3, 40
  90edba:	9890      	s32i.n	a8, a9, 0
			if (bf->bf_isretried)
  90edbc:	283221        	l32i	a8, a3, 132
  90edbf:	78600a        	bnone	a6, a8, 90edcd <ath_tgt_tx_cleanup+0x3d>
				ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90edc2:	2b3123        	l16ui	a11, a3, 70
  90edc5:	da40      	mov.n	a10, a4
  90edc7:	0b4b14        	srli	a11, a11, 4
  90edca:	5bf89a        	call8	90d034 <ath_tx_update_baw>
			ath_tx_freebuf(sc, bf);
  90edcd:	db30      	mov.n	a11, a3
  90edcf:	da20      	mov.n	a10, a2
  90edd1:	5bf9f6        	call8	90d5ac <ath_tx_freebuf>
			bf = bf_next;
  90edd4:	d370      	mov.n	a3, a7
			continue;
  90edd6:	600006        	j	90ede0 <ath_tgt_tx_cleanup+0x50>
		}
		bf->bf_comp = ath_tgt_tx_comp_normal;
  90edd9:	176b0c        	l32r	a7, 8e9a0c <memset+0x2bc4>
  90eddc:	973f      	s32i.n	a7, a3, 60
		bf = asf_tailq_next(bf, bf_list);
  90edde:	8339      	l32i.n	a3, a3, 36

	txq = TID_TO_ACTXQ(tid->tidno);

	bf = asf_tailq_first(&tid->buf_q);

	while (bf) {
  90ede0:	653fb9        	bnez	a3, 90ed9d <ath_tgt_tx_cleanup+0xd>
}

static inline void
ath_aggr_pause_tid(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
	tid->paused =1;
  90ede3:	c031      	movi.n	a3, 1
  90ede5:	234434        	s8i	a3, a4, 52
		bf = asf_tailq_next(bf, bf_list);
	}

	ath_aggr_pause_tid(sc, tid);

	while (tid->baw_head != tid->baw_tail) {
  90ede8:	8944      	l32i.n	a9, a4, 16
		if (TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head)) {
  90edea:	c051      	movi.n	a5, 1
			tid->incomp++;
			tid->flag |= TID_CLEANUP_INPROGRES;
			TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, tid->baw_head);
  90edec:	c7af      	movi.n	a10, -1
  90edee:	60003d        	j	90ee2f <ath_tgt_tx_cleanup+0x9f>
	}

	ath_aggr_pause_tid(sc, tid);

	while (tid->baw_head != tid->baw_tail) {
		if (TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head)) {
  90edf1:	035612        	srai	a6, a3, 5
  90edf4:	b466      	addi.n	a6, a6, 4
  90edf6:	04660a        	addx4	a6, a6, a4
  90edf9:	8761      	l32i.n	a7, a6, 4
  90edfb:	003104        	ssl	a3
  90edfe:	00581a        	sll	a8, a5
  90ee01:	778018        	bnone	a8, a7, 90ee1d <ath_tgt_tx_cleanup+0x8d>
			tid->incomp++;
  90ee04:	2b4037        	l8ui	a11, a4, 55
			tid->flag |= TID_CLEANUP_INPROGRES;
			TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, tid->baw_head);
  90ee07:	08a803        	xor	a8, a10, a8

	ath_aggr_pause_tid(sc, tid);

	while (tid->baw_head != tid->baw_tail) {
		if (TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head)) {
			tid->incomp++;
  90ee0a:	b1bb      	addi.n	a11, a11, 1
  90ee0c:	2b4437        	s8i	a11, a4, 55
			tid->flag |= TID_CLEANUP_INPROGRES;
  90ee0f:	2b4036        	l8ui	a11, a4, 54
			TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, tid->baw_head);
  90ee12:	078701        	and	a7, a8, a7
	ath_aggr_pause_tid(sc, tid);

	while (tid->baw_head != tid->baw_tail) {
		if (TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head)) {
			tid->incomp++;
			tid->flag |= TID_CLEANUP_INPROGRES;
  90ee15:	05bb02        	or	a11, a11, a5
  90ee18:	2b4436        	s8i	a11, a4, 54
			TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, tid->baw_head);
  90ee1b:	9761      	s32i.n	a7, a6, 4
		}
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
  90ee1d:	b133      	addi.n	a3, a3, 1
  90ee1f:	030346        	extui	a3, a3, 0, 7
  90ee22:	9343      	s32i.n	a3, a4, 12
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90ee24:	234102        	l16ui	a3, a4, 4
  90ee27:	b133      	addi.n	a3, a3, 1
  90ee29:	03034b        	extui	a3, a3, 0, 12
  90ee2c:	234502        	s16i	a3, a4, 4
		bf = asf_tailq_next(bf, bf_list);
	}

	ath_aggr_pause_tid(sc, tid);

	while (tid->baw_head != tid->baw_tail) {
  90ee2f:	8343      	l32i.n	a3, a4, 12
  90ee31:	7939bc        	bne	a3, a9, 90edf1 <ath_tgt_tx_cleanup+0x61>
		}
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
	}

	if (!(tid->flag & TID_CLEANUP_INPROGRES)) {
  90ee34:	234036        	l8ui	a3, a4, 54
  90ee37:	7f3f06        	bbsi	a3, 31, 90ee41 <ath_tgt_tx_cleanup+0xb1>
		ath_aggr_resume_tid(sc, tid);
  90ee3a:	da20      	mov.n	a10, a2
  90ee3c:	db40      	mov.n	a11, a4
  90ee3e:	5bfe50        	call8	90e780 <ath_aggr_resume_tid>
  90ee41:	d10f      	retw.n
	...

0090ee44 <ath_bar_tx_comp>:
	ath_tx_set_retry(sc, bf);
	ath_tgt_txq_add_ucast(sc, bf);
}

static void ath_bar_tx_comp(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90ee44:	6c1006        	entry	a1, 48
	struct ath_node_target *an;
	ath_atx_tid_t *tid;
	struct ath_txq *txq;

	an = (struct ath_node_target *)bf->bf_node;
	tid = &an->tid[bf->bf_tidno];
  90ee47:	25304d        	l8ui	a5, a3, 77
	ath_tgt_txq_add_ucast(sc, bf);
}

static void ath_bar_tx_comp(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds = bf->bf_lastds;
  90ee4a:	883e      	l32i.n	a8, a3, 56
	struct ath_node_target *an;
	ath_atx_tid_t *tid;
	struct ath_txq *txq;

	an = (struct ath_node_target *)bf->bf_node;
	tid = &an->tid[bf->bf_tidno];
  90ee4c:	0c5911        	slli	a9, a5, 4
	struct ath_tx_desc *ds = bf->bf_lastds;
	struct ath_node_target *an;
	ath_atx_tid_t *tid;
	struct ath_txq *txq;

	an = (struct ath_node_target *)bf->bf_node;
  90ee4f:	8434      	l32i.n	a4, a3, 16
	tid = &an->tid[bf->bf_tidno];
	txq = TID_TO_ACTXQ(tid->tidno);

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90ee51:	268066        	l8ui	a6, a8, 102
	struct ath_node_target *an;
	ath_atx_tid_t *tid;
	struct ath_txq *txq;

	an = (struct ath_node_target *)bf->bf_node;
	tid = &an->tid[bf->bf_tidno];
  90ee54:	05990c        	sub	a9, a9, a5
  90ee57:	04990a        	addx4	a9, a9, a4
	txq = TID_TO_ACTXQ(tid->tidno);

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90ee5a:	060640        	extui	a6, a6, 0, 1
	struct ath_node_target *an;
	ath_atx_tid_t *tid;
	struct ath_txq *txq;

	an = (struct ath_node_target *)bf->bf_node;
	tid = &an->tid[bf->bf_tidno];
  90ee5d:	259c24        	addi	a5, a9, 36
  90ee60:	299c20        	addi	a9, a9, 32
	txq = TID_TO_ACTXQ(tid->tidno);

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90ee63:	6460bf        	beqz	a6, 90ef26 <ath_bar_tx_comp+0xe2>
static void ath_bar_retry(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);

	if (bf->bf_retries >= OWLMAX_BAR_RETRIES) {
  90ee66:	263086        	l8ui	a6, a3, 134
  90ee69:	c0a9      	movi.n	a10, 9
  90ee6b:	76ab5a        	bgeu	a10, a6, 90eec9 <ath_bar_tx_comp+0x85>
		ath_tgt_delba_send(sc, bf->bf_node, tid->tidno, 1,
  90ee6e:	269007        	l8ui	a6, a9, 7
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, tidno);
	struct wmi_data_delba wmi_delba;

	tid->flag &= ~TID_AGGR_ENABLED;

	ath_tgt_tx_cleanup(sc, an, tid, 1);
  90ee71:	db40      	mov.n	a11, a4
			       struct ieee80211_node_target *ni,
			       a_uint8_t tidno, a_uint8_t initiator,
			       a_uint16_t reasoncode)
{
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, tidno);
  90ee73:	0c6811        	slli	a8, a6, 4
  90ee76:	06860c        	sub	a6, a8, a6
  90ee79:	04660a        	addx4	a6, a6, a4
  90ee7c:	2c6c24        	addi	a12, a6, 36
	struct wmi_data_delba wmi_delba;

	tid->flag &= ~TID_AGGR_ENABLED;
  90ee7f:	29c036        	l8ui	a9, a12, 54
  90ee82:	c78d      	movi.n	a8, -3
  90ee84:	089801        	and	a8, a9, a8
  90ee87:	28c436        	s8i	a8, a12, 54

	ath_tgt_tx_cleanup(sc, an, tid, 1);
  90ee8a:	da20      	mov.n	a10, a2
  90ee8c:	c0d1      	movi.n	a13, 1
  90ee8e:	5bffc0        	call8	90ed90 <ath_tgt_tx_cleanup>

	wmi_delba.ni_nodeindex = ni->ni_nodeindex;
  90ee91:	24400c        	l8ui	a4, a4, 12
	wmi_delba.tidno = tid->tidno;
	wmi_delba.initiator = 1;
	wmi_delba.reasoncode = IEEE80211_REASON_UNSPECIFIED;

	__stats(sc, txbar_xretry);
	wmi_event(sc->tgt_wmi_handle,
  90ee94:	1b6b14        	l32r	a11, 8e9ae4 <memset+0x2c9c>

	tid->flag &= ~TID_AGGR_ENABLED;

	ath_tgt_tx_cleanup(sc, an, tid, 1);

	wmi_delba.ni_nodeindex = ni->ni_nodeindex;
  90ee97:	241400        	s8i	a4, a1, 0
	wmi_delba.tidno = tid->tidno;
  90ee9a:	8469      	l32i.n	a4, a6, 36
	wmi_delba.initiator = 1;
	wmi_delba.reasoncode = IEEE80211_REASON_UNSPECIFIED;

	__stats(sc, txbar_xretry);
	wmi_event(sc->tgt_wmi_handle,
  90ee9c:	8a23      	l32i.n	a10, a2, 12
	tid->flag &= ~TID_AGGR_ENABLED;

	ath_tgt_tx_cleanup(sc, an, tid, 1);

	wmi_delba.ni_nodeindex = ni->ni_nodeindex;
	wmi_delba.tidno = tid->tidno;
  90ee9e:	241401        	s8i	a4, a1, 1
	wmi_delba.initiator = 1;
  90eea1:	c041      	movi.n	a4, 1
  90eea3:	241402        	s8i	a4, a1, 2
	wmi_delba.reasoncode = IEEE80211_REASON_UNSPECIFIED;
  90eea6:	241403        	s8i	a4, a1, 3

	__stats(sc, txbar_xretry);
  90eea9:	242279        	l32i	a4, a2, 0x1e4
	wmi_event(sc->tgt_wmi_handle,
  90eeac:	dc10      	mov.n	a12, a1
	wmi_delba.ni_nodeindex = ni->ni_nodeindex;
	wmi_delba.tidno = tid->tidno;
	wmi_delba.initiator = 1;
	wmi_delba.reasoncode = IEEE80211_REASON_UNSPECIFIED;

	__stats(sc, txbar_xretry);
  90eeae:	b144      	addi.n	a4, a4, 1
  90eeb0:	242679        	s32i	a4, a2, 0x1e4
	wmi_event(sc->tgt_wmi_handle,
  90eeb3:	c0d4      	movi.n	a13, 4
  90eeb5:	5be51e        	call8	908330 <wmi_event>
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);

	if (bf->bf_retries >= OWLMAX_BAR_RETRIES) {
		ath_tgt_delba_send(sc, bf->bf_node, tid->tidno, 1,
				   IEEE80211_REASON_UNSPECIFIED);
		ath_tgt_tid_drain(sc, tid);
  90eeb8:	da20      	mov.n	a10, a2
  90eeba:	db50      	mov.n	a11, a5

		bf->bf_comp = NULL;
  90eebc:	c040      	movi.n	a4, 0
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);

	if (bf->bf_retries >= OWLMAX_BAR_RETRIES) {
		ath_tgt_delba_send(sc, bf->bf_node, tid->tidno, 1,
				   IEEE80211_REASON_UNSPECIFIED);
		ath_tgt_tid_drain(sc, tid);
  90eebe:	5bfb1e        	call8	90db38 <ath_tgt_tid_drain>
			       struct ieee80211_node_target *ni,
			       a_uint8_t tidno, a_uint8_t initiator,
			       a_uint16_t reasoncode)
{
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, tidno);
  90eec1:	266c20        	addi	a6, a6, 32
	if (bf->bf_retries >= OWLMAX_BAR_RETRIES) {
		ath_tgt_delba_send(sc, bf->bf_node, tid->tidno, 1,
				   IEEE80211_REASON_UNSPECIFIED);
		ath_tgt_tid_drain(sc, tid);

		bf->bf_comp = NULL;
  90eec4:	943f      	s32i.n	a4, a3, 60
  90eec6:	600065        	j	90ef2f <ath_bar_tx_comp+0xeb>
		ath_buf_comp(sc, bf);
		return;
	}

	__stats(sc, txbar_compretries);
  90eec9:	24227a        	l32i	a4, a2, 0x1e8
  90eecc:	b144      	addi.n	a4, a4, 1
  90eece:	24267a        	s32i	a4, a2, 0x1e8

	if (!bf->bf_lastds->ds_link) {
  90eed1:	268000        	l8ui	a6, a8, 0
  90eed4:	258001        	l8ui	a5, a8, 1
  90eed7:	248002        	l8ui	a4, a8, 2
  90eeda:	086610        	slli	a6, a6, 24
  90eedd:	005511        	slli	a5, a5, 16
  90eee0:	065502        	or	a5, a5, a6
  90eee3:	084411        	slli	a4, a4, 8
  90eee6:	054402        	or	a4, a4, a5
  90eee9:	258003        	l8ui	a5, a8, 3
  90eeec:	045402        	or	a4, a5, a4
  90eeef:	cd43      	bnez.n	a4, 90ef06 <ath_bar_tx_comp+0xc2>
		__stats(sc, txbar_errlast);
  90eef1:	24227b        	l32i	a4, a2, 0x1ec
		bf = ath_buf_toggle(sc, bf, 1);
  90eef4:	db30      	mov.n	a11, a3
	}

	__stats(sc, txbar_compretries);

	if (!bf->bf_lastds->ds_link) {
		__stats(sc, txbar_errlast);
  90eef6:	b144      	addi.n	a4, a4, 1
  90eef8:	24267b        	s32i	a4, a2, 0x1ec
		bf = ath_buf_toggle(sc, bf, 1);
  90eefb:	022a02        	or	a10, a2, a2
  90eefe:	2c0a01        	movi	a12, 1
  90ef01:	5bf966        	call8	90d49c <ath_buf_toggle>
  90ef04:	d3a0      	mov.n	a3, a10
	}

	bf->bf_lastds->ds_link = 0;
  90ef06:	843e      	l32i.n	a4, a3, 56
  90ef08:	c080      	movi.n	a8, 0

	ath_tx_set_retry(sc, bf);
  90ef0a:	da20      	mov.n	a10, a2
  90ef0c:	db30      	mov.n	a11, a3
	if (!bf->bf_lastds->ds_link) {
		__stats(sc, txbar_errlast);
		bf = ath_buf_toggle(sc, bf, 1);
	}

	bf->bf_lastds->ds_link = 0;
  90ef0e:	284400        	s8i	a8, a4, 0
  90ef11:	284401        	s8i	a8, a4, 1
  90ef14:	284402        	s8i	a8, a4, 2
  90ef17:	284403        	s8i	a8, a4, 3

	ath_tx_set_retry(sc, bf);
  90ef1a:	5bfa30        	call8	90d7dc <ath_tx_set_retry>
	ath_tgt_txq_add_ucast(sc, bf);
  90ef1d:	da20      	mov.n	a10, a2
  90ef1f:	db30      	mov.n	a11, a3
  90ef21:	5bf805        	call8	90cf38 <ath_tgt_txq_add_ucast>
  90ef24:	d10f      	retw.n
	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
		ath_bar_retry(sc, bf);
		return;
	}

	ath_aggr_resume_tid(sc, tid);
  90ef26:	da20      	mov.n	a10, a2
  90ef28:	db50      	mov.n	a11, a5
  90ef2a:	5bfe15        	call8	90e780 <ath_aggr_resume_tid>

	bf->bf_comp = NULL;
  90ef2d:	963f      	s32i.n	a6, a3, 60
	ath_buf_comp(sc, bf);
  90ef2f:	da20      	mov.n	a10, a2
  90ef31:	db30      	mov.n	a11, a3
  90ef33:	5bf9bf        	call8	90d630 <ath_buf_comp>
  90ef36:	d10f      	retw.n

0090ef38 <ath_pci_suspend>:
	adf_os_free_intr(sc->sc_dev);
}

static void
ath_pci_suspend(adf_drv_handle_t hdl, adf_os_pm_t pm)
{
  90ef38:	6c1004        	entry	a1, 32
  90ef3b:	d10f      	retw.n
  90ef3d:	000000        	ill

0090ef40 <ath_pci_resume>:
}

static void
ath_pci_resume(adf_drv_handle_t hdl)
{
  90ef40:	6c1004        	entry	a1, 32
  90ef43:	d10f      	retw.n
  90ef45:	000000        	ill

0090ef48 <ath_pci_remove>:
	return NULL;
}

static void
ath_pci_remove(adf_drv_handle_t hdl)
{
  90ef48:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = hdl;

	ath_detach((struct ath_softc_tgt *)hdl);
  90ef4b:	da20      	mov.n	a10, a2
  90ef4d:	5beaf7        	call8	909b2c <ath_detach>
}

static inline void
adf_os_free_intr(adf_os_device_t osdev)
{
    __adf_os_free_intr(osdev);
  90ef50:	2a2246        	l32i	a10, a2, 0x118
  90ef53:	5bef7b        	call8	90ad40 <__adf_os_free_intr>
  90ef56:	d10f      	retw.n

0090ef58 <init_ath_pci>:

static adf_drv_info_t ath_drv_info = adf_os_pci_set_drv_info(ath_pci_tgt,&ath_pci_id_table[0], ath_pci_probe, ath_pci_remove, ath_pci_suspend, ath_pci_resume);

a_int32_t
init_ath_pci(void)
{
  90ef58:	6c1004        	entry	a1, 32
 * @return status of operation
 */
static inline a_status_t 
adf_net_register_drv(adf_drv_info_t *drv)
{
    return(__adf_net_register_drv(drv));
  90ef5b:	1a6b15        	l32r	a10, 8e9bb0 <memset+0x2d68>
  90ef5e:	580063        	call8	90f0ec <__adf_net_register_drv>
	return adf_net_register_drv( &ath_drv_info );
}
  90ef61:	d2a0      	mov.n	a2, a10
  90ef63:	d10f      	retw.n
  90ef65:	000000        	ill

0090ef68 <ath_pci_probe>:
a_int32_t init_ath_pci(void);

static adf_drv_handle_t
ath_pci_probe(adf_os_resource_t *res,a_int32_t count, adf_os_attach_data_t *data,
	      adf_os_device_t osdev)
{
  90ef68:	6c1004        	entry	a1, 32
}

static inline int 
__adf_os_pci_config_write8(adf_os_device_t osdev, int offset, a_uint8_t val)
{
    wlan_pci_config_write(offset, val, 1);
  90ef6b:	c2b0      	movi.n	a11, 32
  90ef6d:	c0c1      	movi.n	a12, 1
  90ef6f:	c0ac      	movi.n	a10, 12
  90ef71:	5beaff        	call8	909b70 <wlan_pci_config_write>
  90ef74:	2b0aa8        	movi	a11, 168
  90ef77:	2c0a01        	movi	a12, 1
  90ef7a:	2a0a0d        	movi	a10, 13
  90ef7d:	5beafc        	call8	909b70 <wlan_pci_config_write>
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  90ef80:	166915        	l32r	a6, 8e93d4 <memset+0x258c>
  90ef83:	136b16        	l32r	a3, 8e9bdc <memset+0x2d94>
  90ef86:	226252        	l32i	a2, a6, 0x148
  90ef89:	c0a0      	movi.n	a10, 0
  90ef8b:	db30      	mov.n	a11, a3
  90ef8d:	0b2000        	callx8	a2
  90ef90:	d2a0      	mov.n	a2, a10
	adf_os_pci_config_write8(osdev, ATH_PCI_CACHE_LINE_SIZE, csz);
	adf_os_pci_config_write8(osdev, ATH_PCI_LATENCY_TIMER, 0xa8);

	sc = adf_os_mem_alloc(sizeof(struct ath_pci_softc));

	if (sc == NULL) {
  90ef92:	ccaa      	bnez.n	a10, 90efa0 <ath_pci_probe+0x38>
		adf_os_print("ath_pci: no memory for device state\n");
  90ef94:	236212        	l32i	a3, a6, 72
  90ef97:	1a6b17        	l32r	a10, 8e9bf4 <memset+0x2dac>
  90ef9a:	0b3000        	callx8	a3
  90ef9d:	d10f      	retw.n
  90ef9f:	008864        	excw

/* set a memory buffer */
static inline void
__adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
	A_MEMSET(buf, b, size);
  90efa2:	dc30      	mov.n	a12, a3
  90efa4:	c0b0      	movi.n	a11, 0
  90efa6:	0b8000        	callx8	a8

	/*
	 * Mark the device as detached to avoid processing
	 * interrupts until setup is complete.
	 */
	sc->aps_sc.sc_invalid = 1;
  90efa9:	232d01        	addmi	a3, a2, 0x100
  90efac:	293024        	l8ui	a9, a3, 36
  90efaf:	28fa80        	movi	a8, -128
  90efb2:	089802        	or	a8, a9, a8
  90efb5:	283424        	s8i	a8, a3, 36

	adf_os_print("ath_pci_probe %x\n",id->device);
  90efb8:	2b4201        	l32i	a11, a4, 4
  90efbb:	266212        	l32i	a6, a6, 72
  90efbe:	1a6b18        	l32r	a10, 8e9c20 <memset+0x2dd8>
  90efc1:	0b6000        	callx8	a6

	if (ath_tgt_attach(id->device, &sc->aps_sc, osdev) != 0)
  90efc4:	8a41      	l32i.n	a10, a4, 4
  90efc6:	db20      	mov.n	a11, a2
  90efc8:	dc50      	mov.n	a12, a5
  90efca:	5be9c2        	call8	9096d4 <ath_tgt_attach>
  90efcd:	cda1      	bnez.n	a10, 90efe2 <ath_pci_probe+0x7a>
		goto bad3;

	/* ready to process interrupts */
	sc->aps_sc.sc_invalid = 0;
  90efcf:	243024        	l8ui	a4, a3, 36
#include <adf_os_irq_pvt.h>

static inline int
adf_os_setup_intr(adf_os_device_t  osdev, adf_os_drv_intr fn)
{
    return __adf_os_setup_intr(osdev, fn);
  90efd2:	1b6a22        	l32r	a11, 8e985c <memset+0x2a14>
  90efd5:	040446        	extui	a4, a4, 0, 7
  90efd8:	243424        	s8i	a4, a3, 36
  90efdb:	da50      	mov.n	a10, a5
  90efdd:	5bef55        	call8	90ad34 <__adf_os_setup_intr>
  90efe0:	d10f      	retw.n
	adf_os_setup_intr(osdev, ath_intr);
	return (adf_drv_handle_t)sc;
bad3:
bad2:
	return NULL;
  90efe2:	c020      	movi.n	a2, 0
}
  90efe4:	d10f      	retw.n
	...

0090efe8 <exit_ath_pci>:
	return adf_net_register_drv( &ath_drv_info );
}

void
exit_ath_pci(void)
{
  90efe8:	6c1004        	entry	a1, 32
 * @see adf_net_register_drv()
 */
static inline void
adf_net_unregister_drv(a_uint8_t *drv_name)
{
    __adf_net_unregister_drv(drv_name);
  90efeb:	1a6b19        	l32r	a10, 8e9c50 <memset+0x2e08>
  90efee:	580042        	call8	90f0f8 <__adf_net_unregister_drv>
  90eff1:	d10f      	retw.n
	...

0090eff4 <ar5416AttachRateTables>:

#endif //#ifdef MAGPIE_MERLIN // MAGPIE_MERLIN 

void
ar5416AttachRateTables(struct atheros_softc *sc)
{
  90eff4:	6c1004        	entry	a1, 32
    sc->hwRateTable[WIRELESS_MODE_11NG]  = &ar5416_11ngRateTable;
  90eff7:	186b1a        	l32r	a8, 8e9c60 <memset+0x2e18>
  90effa:	9822      	s32i.n	a8, a2, 8
#ifdef ATH_SUPPORT_A_MODE
    sc->hwRateTable[WIRELESS_MODE_11NA]  = &ar5416_11naRateTable;
  90effc:	186b1b        	l32r	a8, 8e9c68 <memset+0x2e20>
  90efff:	9821      	s32i.n	a8, a2, 4
  90f001:	d10f      	retw.n
	...

0090f004 <io32_rmw>:
	iowrite8(addr, val);
}

static inline void io32_rmw(volatile uint32_t addr,
			    const uint32_t set, const uint32_t clr)
{
  90f004:	6c1006        	entry	a1, 48
  90f007:	0c0200        	memw
  90f00a:	9210      	s32i.n	a2, a1, 0
	uint32_t val;

	val = ioread32(addr);
  90f00c:	0c0200        	memw
  90f00f:	8810      	l32i.n	a8, a1, 0
	val &= ~clr;
  90f011:	c79f      	movi.n	a9, -1
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90f013:	0c0200        	memw
  90f016:	8880      	l32i.n	a8, a8, 0
			    const uint32_t set, const uint32_t clr)
{
	uint32_t val;

	val = ioread32(addr);
	val &= ~clr;
  90f018:	049403        	xor	a4, a9, a4
  90f01b:	084801        	and	a8, a4, a8
	val |= set;
	iowrite32(addr, val);
  90f01e:	0c0200        	memw
  90f021:	8a10      	l32i.n	a10, a1, 0
{
	uint32_t val;

	val = ioread32(addr);
	val &= ~clr;
	val |= set;
  90f023:	038302        	or	a3, a8, a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90f026:	0c0200        	memw
  90f029:	93a0      	s32i.n	a3, a10, 0
  90f02b:	d10f      	retw.n
  90f02d:	000000        	ill

0090f030 <ieee80211_tgt_crypto_encap>:

a_status_t
ieee80211_tgt_crypto_encap(struct ieee80211_frame *wh,
			   struct ieee80211_node_target *ni,
			   a_uint8_t keytype)
{
  90f030:	6c1004        	entry	a1, 32
	a_uint16_t tmp;
	a_uint16_t offset = IEEE80211_WLAN_HDR_LEN;
	a_uint8_t b1, b2;
	struct ieee80211_qosframe_addr4 *wh_mesh;

	if (IEEE80211_QOS_HAS_SEQ(wh))
  90f033:	2a2000        	l8ui	a10, a2, 0
  90f036:	280a8c        	movi	a8, 140
  90f039:	08aa01        	and	a10, a10, a8
#define CRYPTO_KEY_TYPE_WAPI         4
#define IEEE80211_WLAN_HDR_LEN      24

	a_uint8_t *iv = NULL;
	a_uint16_t tmp;
	a_uint16_t offset = IEEE80211_WLAN_HDR_LEN;
  90f03c:	290a88        	movi	a9, 136
  90f03f:	09aa0c        	sub	a10, a10, a9
  90f042:	c188      	movi.n	a8, 24
  90f044:	c19c      	movi.n	a9, 28
  90f046:	0a9838        	moveqz	a8, a9, a10
	if (IEEE80211_QOS_HAS_SEQ(wh))
		offset += 4;  // pad for 4 byte alignment

	/* set the offset to 32 if the mesh control field is present */
	wh_mesh = (struct ieee80211_qosframe_addr4 *)wh;
	if (wh_mesh->i_qos[1] == 0x01)
  90f049:	2a201f        	l8ui	a10, a2, 31
		offset = 32;
  90f04c:	c290      	movi.n	a9, 32
  90f04e:	b0aa      	addi.n	a10, a10, -1
  90f050:	0a9838        	moveqz	a8, a9, a10

a_status_t
ieee80211_tgt_crypto_encap(struct ieee80211_frame *wh,
			   struct ieee80211_node_target *ni,
			   a_uint8_t keytype)
{
  90f053:	040447        	extui	a4, a4, 0, 8
	wh_mesh = (struct ieee80211_qosframe_addr4 *)wh;
	if (wh_mesh->i_qos[1] == 0x01)
		offset = 32;

	iv = (a_uint8_t *) wh;
	iv = iv + offset;
  90f056:	a822      	add.n	a2, a2, a8

	switch (keytype) {
  90f058:	684209        	beqi	a4, 2, 90f065 <ieee80211_tgt_crypto_encap+0x35>
  90f05b:	684302        	beqi	a4, 3, 90f061 <ieee80211_tgt_crypto_encap+0x31>
  90f05e:	600083        	j	90f0e5 <ieee80211_tgt_crypto_encap+0xb5>
  90f061:	600032        	j	90f097 <ieee80211_tgt_crypto_encap+0x67>
  90f064:	002831        	excw
	case CRYPTO_KEY_TYPE_AES:
		ni->ni_iv16++;
  90f067:	0db188        	excw
  90f06a:	08084f        	extui	a8, a8, 0, 16
  90f06d:	28350d        	s16i	a8, a3, 26
		if (ni->ni_iv16 == 0)
  90f070:	cc84      	bnez.n	a8, 90f078 <ieee80211_tgt_crypto_encap+0x48>
		{
			ni->ni_iv32++;
  90f072:	8437      	l32i.n	a4, a3, 28
  90f074:	b144      	addi.n	a4, a4, 1
  90f076:	9437      	s32i.n	a4, a3, 28
		}

		*iv++ = (a_uint8_t) ni->ni_iv16;
  90f078:	282400        	s8i	a8, a2, 0
		*iv++ = (a_uint8_t) (ni->ni_iv16 >> 8);
  90f07b:	24310d        	l16ui	a4, a3, 26
		*iv++ = 0x00;
		*iv++ |= 0x20;
  90f07e:	282003        	l8ui	a8, a2, 3
		{
			ni->ni_iv32++;
		}

		*iv++ = (a_uint8_t) ni->ni_iv16;
		*iv++ = (a_uint8_t) (ni->ni_iv16 >> 8);
  90f081:	048414        	srli	a4, a4, 8
  90f084:	242401        	s8i	a4, a2, 1
		*iv++ = 0x00;
  90f087:	c040      	movi.n	a4, 0
  90f089:	242402        	s8i	a4, a2, 2
		*iv++ |= 0x20;
  90f08c:	c240      	movi.n	a4, 32
  90f08e:	048402        	or	a4, a8, a4
  90f091:	242403        	s8i	a4, a2, 3
  90f094:	600036        	j	90f0ce <ieee80211_tgt_crypto_encap+0x9e>
		tmp = (a_uint16_t) (ni->ni_iv32 >> 16);
		*iv++ = (a_uint8_t) tmp;
		*iv = (a_uint8_t) (tmp >> 8);
		break;
	case CRYPTO_KEY_TYPE_TKIP:
		ni->ni_iv16++;
  90f097:	28310d        	l16ui	a8, a3, 26
  90f09a:	b188      	addi.n	a8, a8, 1
  90f09c:	08084f        	extui	a8, a8, 0, 16
  90f09f:	28350d        	s16i	a8, a3, 26
		if (ni->ni_iv16 == 0)
  90f0a2:	cc86      	bnez.n	a8, 90f0ac <ieee80211_tgt_crypto_encap+0x7c>
		{
			ni->ni_iv32++;
  90f0a4:	243207        	l32i	a4, a3, 28
  90f0a7:	b144      	addi.n	a4, a4, 1
  90f0a9:	243607        	s32i	a4, a3, 28
		}

		b1 = (a_uint8_t) (ni->ni_iv16 >> 8);
  90f0ac:	088814        	srli	a8, a8, 8
		b2 = (b1 | 0x20) & 0x7f;
  90f0af:	c54f      	movi.n	a4, 95
		if (ni->ni_iv16 == 0)
		{
			ni->ni_iv32++;
		}

		b1 = (a_uint8_t) (ni->ni_iv16 >> 8);
  90f0b1:	282400        	s8i	a8, a2, 0
		b2 = (b1 | 0x20) & 0x7f;
  90f0b4:	c290      	movi.n	a9, 32
  90f0b6:	048801        	and	a8, a8, a4
  90f0b9:	098802        	or	a8, a8, a9
  90f0bc:	282401        	s8i	a8, a2, 1

		*iv++ = b1;
		*iv++ = b2;

		*iv++ = (a_uint8_t) ni->ni_iv16;
  90f0bf:	24310d        	l16ui	a4, a3, 26
  90f0c2:	242402        	s8i	a4, a2, 2
		*iv++ |= 0x20;
  90f0c5:	242003        	l8ui	a4, a2, 3
  90f0c8:	094902        	or	a9, a4, a9
  90f0cb:	292403        	s8i	a9, a2, 3

		tmp = (a_uint16_t) ni->ni_iv32;
  90f0ce:	8837      	l32i.n	a8, a3, 28
		*iv++ = (a_uint8_t) tmp;
  90f0d0:	282404        	s8i	a8, a2, 4
		*iv++ = (a_uint8_t) (tmp >> 8);
  90f0d3:	088847        	extui	a8, a8, 8, 8
  90f0d6:	282405        	s8i	a8, a2, 5

		tmp = (a_uint16_t) (ni->ni_iv32 >> 16);
  90f0d9:	23310e        	l16ui	a3, a3, 28
		*iv++ = (a_uint8_t) tmp;
  90f0dc:	232406        	s8i	a3, a2, 6
		*iv = (a_uint8_t) (tmp >> 8);
  90f0df:	038314        	srli	a3, a3, 8
  90f0e2:	232407        	s8i	a3, a2, 7

#undef CRYPTO_KEY_TYPE_TKIP
#undef CRYPTO_KEY_TYPE_AES
#undef CRYPTO_KEY_TYPE_WAPI
#undef IEEE80211_WLAN_HDR_LEN
}
  90f0e5:	c021      	movi.n	a2, 1
  90f0e7:	d10f      	retw.n
  90f0e9:	000000        	ill

0090f0ec <__adf_net_register_drv>:
 * 
 * @return a_status_t
 */
a_status_t
__adf_net_register_drv(adf_drv_info_t *drv)
{
  90f0ec:	6c1004        	entry	a1, 32
    wlan_pci_register_drv(drv);    
  90f0ef:	da20      	mov.n	a10, a2
  90f0f1:	5bea9c        	call8	909b64 <wlan_pci_register_drv>
    return A_STATUS_OK;
}
  90f0f4:	c020      	movi.n	a2, 0
  90f0f6:	d10f      	retw.n

0090f0f8 <__adf_net_unregister_drv>:
 * @brief unregister the driver from the shim
 * @param[in] name
 */
void
__adf_net_unregister_drv(a_uint8_t *name)
{
  90f0f8:	6c1004        	entry	a1, 32
  90f0fb:	d10f      	retw.n
