
/home/lex/tmp/my/ath9k-htc-firmware-blob/k2/fw.elf:     Dateiformat elf32-xtensa-be
/home/lex/tmp/my/ath9k-htc-firmware-blob/k2/fw.elf
Architektur: xtensa, Flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
Startadresse 0x00903000

Xtensa header:

Machine     = Base
Insn tables = true
Literal tables = true

Programm-Header:
    LOAD off    0x00501000 vaddr 0x00501000 paddr 0x00501000 align 2**29
         filesz 0x00000b38 memsz 0x00000b38 flags r--
    LOAD off    0x0050cb40 vaddr 0x0050cb40 paddr 0x0050cb40 align 2**29
         filesz 0x00000bfc memsz 0x00000cc8 flags rw-
    LOAD off    0x00903000 vaddr 0x00903000 paddr 0x00903000 align 2**29
         filesz 0x00007e99 memsz 0x00007e99 flags r-x

Sektionen:
Idx Name          Größe     VMA       LMA       Datei-Off Ausr.
  0 .lit4         0001be00  004e5200  004e5200  00000000  2**0
                  ALLOC
  1 .rodata       00000600  00501000  00501000  00501000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .literals     00000538  00501600  00501600  00501600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000bfc  0050cb40  0050cb40  0050cb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000000cc  0050d73c  0050d73c  0050d73c  2**2
                  ALLOC
  5 .boot         00000236  00903000  00903000  00903000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text         00007c61  00903238  00903238  00903238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .debug_aranges 00000348  00000000  00000000  0090ae99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00056e1e  00000000  00000000  0090b1e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005920  00000000  00000000  00961fff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0001126f  00000000  00000000  0096791f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001ce8  00000000  00000000  00978b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00007f23  00000000  00000000  0097a878  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000db8b  00000000  00000000  0098279b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .xt.prop      00004be4  00000000  00000000  00990326  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00001360  00000000  00000000  00994f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000006d  00000000  00000000  0099626a  2**0
                  CONTENTS, READONLY
 17 .xtensa.info  00000038  00000000  00000000  009962d7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
004e5200 l    d  .lit4	00000000 .lit4
00501000 l    d  .rodata	00000000 .rodata
00501600 l    d  .literals	00000000 .literals
0050cb40 l    d  .data	00000000 .data
0050d73c l    d  .bss	00000000 .bss
00903000 l    d  .boot	00000000 .boot
00903238 l    d  .text	00000000 .text
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .xt.prop	00000000 .xt.prop
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .xtensa.info	00000000 .xtensa.info
00000000 l    df *ABS*	00000000 magpie.c
00501000 l     O .rodata	0000000d __FUNCTION__$3683
00000000 l    df *ABS*	00000000 usb_api_main_patch.c
0050cb40 l     O .data	00000002 cmd_is_new$3658
0050d750 l     O .bss	00000004 evntbuf$3656
0050d754 l     O .bss	00000004 regaddr$3657
0050d758 l     O .bss	00000002 buf_len$3655
0050cb42 l     O .data	00000002 cmd_is_new$3677
0050d75c l     O .bss	00000004 buf$3675
0050d760 l     O .bss	00000002 cmd_len$3674
00501010 l     O .rodata	00000012 __func__$3678
0050d764 l     O .bss	00000004 regaddr$3673
00000000 l    df *ABS*	00000000 ar5416_hw.c
00501024 l     O .rodata	000000d0 ar5416hal_10
00000000 l    df *ABS*	00000000 if_ath.c
009063e4 l     F .text	00000014 __adf_os_mem_alloc
009063f8 l     F .text	00000013 __adf_os_mem_copy
0090640c l     F .text	00000013 __adf_os_mem_set
00906420 l     F .text	00000005 tgt_HTCRecv_uapsdhandler
00906428 l     F .text	00000006 dispatch_magpie_sys_cmds
00906430 l     F .text	00000005 htc_setup_comp
00906438 l     F .text	0000005b tgt_ServiceConnect
00906a90 l     F .text	00000130 tgt_HTCSendCompleteHandler
00906494 l     F .text	0000002e tgt_reg_service
009064c4 l     F .text	00000010 tgt_HTCRecv_mgmthandler
009064d4 l     F .text	000000c2 ath_tgt_rx_tasklet
00906598 l     F .text	00000098 ath_descdma_cleanup
00906630 l     F .text	00000014 __adf_os_init_bh$isra$4
00906644 l     F .text	00000010 __adf_os_sched_bh$isra$5
0050d77c l     O .bss	00000001 flg$7201
0050d77d l     O .bss	00000001 reset_pll$7195
00906654 l     F .text	0000008e ath_hal_reg_write_filter$isra$10
009066e4 l     F .text	0000005c ath_reg_read_filter
00906740 l     F .text	0000004c ath_desc_free
0090678c l     F .text	0000009b ath_descdma_setup$constprop$20
00906828 l     F .text	00000096 tgt_HTCRecvMessageHandler
009068c0 l     F .text	0000003b tgt_HTCRecv_cabhandler
009068fc l     F .text	00000194 ath_rxdesc_init
00906c10 l     F .text	00000012 ath_fatal_tasklet
00906c24 l     F .text	00000012 ath_bmiss_tasklet
0050cdc0 l     O .data	00000004 ath_numrxbufs
00907370 l     F .text	0000004e ath_hal_reg_rmw_tgt
009073c0 l     F .text	00000084 ath_rc_mask_tgt
00907444 l     F .text	00000023 ath_rx_stats_tgt
00907468 l     F .text	00000042 ath_tx_stats_tgt
009074ac l     F .text	00000032 ath_int_stats_tgt
009074e0 l     F .text	00000062 ath_node_update_tgt
00907544 l     F .text	0000002a ath_detach_tgt
00501118 l     O .rodata	00000014 __FUNCTION__$7117
00907570 l     F .text	00000088 ath_enable_aggr_tgt
009075f8 l     F .text	0000002c ath_ic_update_tgt
00907624 l     F .text	00000056 handle_rc_rate_update_cmd
0090767c l     F .text	00000052 handle_rc_state_change_cmd
009076d0 l     F .text	0000002e ath_hal_reg_write_tgt
00907700 l     F .text	0000003f ath_hal_reg_read_tgt
00907740 l     F .text	0000005e ath_vap_create_tgt
009077a0 l     F .text	00000054 ath_vap_delete_tgt
009077f4 l     F .text	0000002c ath_node_cleanup_tgt
00907820 l     F .text	00000097 ath_node_create_tgt
009078b8 l     F .text	00000063 ath_setcurmode_tgt
0090791c l     F .text	00000050 ath_flushrecv_tgt
0090796c l     F .text	0000003a ath_stoprecv_tgt
009079a8 l     F .text	00000086 ath_startrecv_tgt
00907a30 l     F .text	000000c8 ath_draintxq_tgt
00907af8 l     F .text	0000002e ath_tx_draintxq_tgt
00907b28 l     F .text	00000023 ath_aborttx_dma_tgt
00907b4c l     F .text	00000026 ath_stop_tx_dma_tgt
00907b74 l     F .text	00000040 ath_aborttxq_tgt
00907bb4 l     F .text	0000004e ath_init_tgt
00907c04 l     F .text	00000054 ath_enable_intr_tgt
00907c58 l     F .text	00000026 ath_disable_intr_tgt
00907c80 l     F .text	0000001e ath_get_tgt_version
00907ca0 l     F .text	00000013 handle_echo_command
00907ccc l     F .text	00000196 tgt_HTCRecv_beaconhandler
0050cdc8 l     O .data	00000100 Magpie_Sys_DispatchEntries
0050cdc4 l     O .data	00000004 ath_numrxdescs
00000000 l    df *ABS*	00000000 ratectrl_11n_ln.c
009082ec l     F .text	00000074 rcIsValidPhyRate
00908360 l     F .text	00000085 rcRateSetseries$isra$5
0050112c l     O .rodata	00000028 nRetry2PerLookup$7037
009083e8 l     F .text	000001f6 rcUpdate_ht$isra$7
009085e0 l     F .text	00000351 rcSibUpdate_ht$constprop$9
00000000 l    df *ABS*	00000000 if_owl.c
00908e94 l     F .text	00000013 __adf_os_mem_copy
00501194 l     O .rodata	00000011 CSWTCH$54
00908ea8 l     F .text	0000004f ieee80211_anyhdrsize
00908ef8 l     F .text	0000004b owl_tgt_tid_init
00908f44 l     F .text	00000077 ath_tgt_txq_add_ucast
00908fbc l     F .text	0000006e ath_update_stats
0090902c l     F .text	0000005e ath_tx_update_baw
0090908c l     F .text	00000016 ath_dma_unmap
009090a4 l     F .text	00000026 ath_tgt_skb_free
009090cc l     F .text	000000a6 ath_filltxdesc
00909174 l     F .text	0000004e ath_tx_tgt_setds
009091c4 l     F .text	00000024 ath_tgt_tx_enqueue
009091e8 l     F .text	00000082 ath_update_aggr_stats$isra$2
0090926c l     F .text	00000013 __adf_os_mem_set$constprop$13
00501154 l     O .rodata	00000040 bits_per_symbol
00909280 l     F .text	000001ea ath_buf_set_rate
0090946c l     F .text	00000017 ath_dma_map
00909484 l     F .text	000000cd ath_buf_toggle
0090aca0 l     F .text	000000f4 ath_bar_tx_comp
00909554 l     F .text	0000015b ath_bar_tx
009096b0 l     F .text	0000003c ath_buf_comp
009096ec l     F .text	00000086 ath_tx_freebuf
00909784 l     F .text	00000031 ath_tx_set_retry
00909908 l     F .text	000000e0 ath_tx_retry_subframe
009099e8 l     F .text	000000ae ath_tx_comp_aggr_error
0090a6bc l     F .text	0000004e ath_tgt_tx_comp_normal
0090a430 l     F .text	000001f3 ath_tgt_txq_schedule
0090a624 l     F .text	0000004a ath_aggr_resume_tid
0090a670 l     F .text	0000004b owl_tgt_tid_cleanup
00000000 l    df *ABS*	00000000 app_start.c
0090ada0 l     F .text	00000029 io32_rmw
00000000 l    df *ABS*	00000000 ah_osdep.c
00000000 l    df *ABS*	00000000 wlan_pci.c
00000000 l    df *ABS*	00000000 usb_api_k2_patch.c
00904680 l     F .text	0000002b io8_rmw
009046ac l     F .text	00000021 io32_rmw$constprop$0
00000000 l    df *ABS*	00000000 k2_fw_cmnos_printf.c
00904ab8 l     F .text	00000055 _cvt
00904b10 l     F .text	0000002a cmnos_write_char
00000000 l    df *ABS*	00000000 if_ath_pci.c
00906310 l     F .text	00000005 ath_pci_suspend
00906318 l     F .text	00000005 ath_pci_resume
00906320 l     F .text	00000010 ath_pci_remove
0050cd80 l     O .data	00000020 ath_drv_info
00906340 l     F .text	0000007e ath_pci_probe
0050cda0 l     O .data	00000020 ath_pci_id_table
00000000 l    df *ABS*	00000000 init.c
0050d744 l     O .bss	00000004 loop_high
0050d748 l     O .bss	00000004 loop_low
00000000 l    df *ABS*	00000000 adf_nbuf.c
00000000 l    df *ABS*	00000000 buf_pool_static.c
00000000 l    df *ABS*	00000000 htc.c
00000000 l    df *ABS*	00000000 wmi_svc.c
00904464 l     F .text	0000000b WMIServiceConnect
00904470 l     F .text	00000007 _WMI_GetPendingEventsCount
00904478 l     F .text	00000007 _WMI_GetControlEp
00904480 l     F .text	00000014 _WMI_RegisterDispatchTable
00904494 l     F .text	00000005 _WMI_Shutdown
0090449c l     F .text	0000008a WMIRecvMessageHandler
00904528 l     F .text	00000020 _WMI_SendCompleteHandler
00904548 l     F .text	00000030 _WMI_AllocEvent
00904578 l     F .text	00000036 _WMI_SendEvent
009045b0 l     F .text	0000006f _WMI_Init
00000000 l    df *ABS*	00000000 k2_HIF_usb_patch.c
00000000 l    df *ABS*	00000000 k2_cmnos_clock_patch.c
0050d778 l     O .bss	00000004 last_tick$3599
00000000 l    df *ABS*	00000000 ah.c
00000000 l    df *ABS*	00000000 ar5416_phy.c
00000000 l    df *ABS*	00000000 adf_net.c
00000000 l    df *ABS*	00000000 adf_os_irq_pvt.c
00000000 l    df *ABS*	00000000 adf_os_dma.c
00000000 l    df *ABS*	00000000 ar5416Phy.c
00000000 l    df *ABS*	00000000 ieee80211_output.c
00000000 l    df *ABS*	00000000 
005009e4 g       *ABS*	00000000 u16TxRxCounter
00903238 g     F .text	00000032 init_mem
00908e18 g     F .text	00000036 ath_rate_tx_complete
004e5200 g       *ABS*	00000000 _rom_literal_start
009034e4 g     F .text	0000002b __adf_nbuf_dmamap_info
00903b0c g     F .text	00000078 bGet_descriptor_patch
00909ae0 g     F .text	0000002d ath_tgt_tid_drain
009035e0 g     F .text	00000011 __adf_nbuf_last
0050d784 g     O .bss	00000004 save_cmnos_printf
005009f8 g       *ABS*	00000000 u8UsbInterfaceValue
00903414 g     F .text	0000000c __adf_nbuf_copy
0050d780 g     O .bss	00000004 _assfail_ori
009034c4 g     F .text	00000009 __adf_nbuf_map
00501600 g       *ABS*	00000000 _bss_table_end
0090adcc g     F .text	0000000c __adf_net_register_drv
0050d768 g     O .bss	00000004 g_wlan_intr
009034a8 g     F .text	0000001c __adf_nbuf_dmamap_create
009041b0 g     F .text	00000088 HTCControlSvcProcessMsg
0050cec8 g     O .data	00000004 ar5416_11ngRateTable
00903c10 g     F .text	0000000f wlan_pci_module_init
00500000 g       *ABS*	00000000 _indir_tbl
00904f18 g     F .text	00000010 ath_hal_attach_tgt
0090379c g     F .text	00000023 buf_pool_module_install
00501000 g       *ABS*	00000000 _lit4_end
00903680 g     F .text	00000007 __adf_nbuf_is_cloned
00903934 g     F .text	00000107 usb_reg_out_patch
00903510 g     F .text	00000005 __adf_nbuf_set_rx_cksum
00905d94 g     F .text	000000bc ar5416AbortTxDma
0090ae99 g       *ABS*	00000000 _text_end
0090a70c g     F .text	0000035e ath_tgt_tx_comp_aggr
0090466c g     F .text	00000011 _HIFusb_isr_handler_patch
00908dbc g     F .text	0000002e ath_rate_attach
00905ca0 g     F .text	00000044 ar5416Set11nBurstDuration_20
00903a80 g     F .text	00000022 vUsbFIFO_EPxCfg_FS_patch
00903520 g     F .text	00000071 __adf_nbuf_create_frm_frag
00903804 g     F .text	00000022 cold_reboot
00501000 g       *ABS*	00000000 _lit4_start
00501b38 g       *ABS*	00000000 _dram0_literal_end
00904238 g     F .text	00000031 AdjustCreditThreshold
00501b38 g       *ABS*	00000000 _dram0_literal_start
00904fd4 g     F .text	00000029 ath_hal_wait
0090ae99 g       .text	00000000 _etext
00905ce4 g     F .text	0000006f ar5416Set11nVirtualMoreFrag_20
008e408c g       *ABS*	00000000 vbuf_module_install
0050d740 g     O .bss	00000004 idle_cnt
009097b8 g     F .text	00000043 owl_tgt_node_init
00903828 g     F .text	0000010a usb_status_in_patch
00903c20 g     F .text	0000000a wlan_pci_register_drv
009033bc g     F .text	0000002a __adf_nbuf_push_head
009037c0 g     F .text	00000022 _fw_usbfifo_recv_command
0090ad94 g     F .text	0000000a ar5416AttachRateTables
00903d44 g     F .text	000000bf _HTC_Init
009033a4 g     F .text	00000006 __adf_nbuf_realloc_headroom
00905ad0 g     F .text	00000089 ar5416Set11nAggrFirst_20
009034dc g     F .text	00000005 __adf_nbuf_dmamap_destroy
00909dd8 g     F .text	000003ae ath_tgt_send_mgt
00906300 g     F .text	00000010 ar5416GetRateTable
009036a0 g     F .text	0000000d __adf_nbuf_queue_init
008e4eb8 g       *ABS*	00000000 memcpy
00908e50 g     F .text	00000012 ath_rate_newassoc
00501600 g       *ABS*	00000000 _rodata_end
00903518 g     F .text	00000007 __adf_nbuf_get_vlan_info
00908be8 g     F .text	00000133 rcUpdate_11n
00904f64 g     F .text	0000006f ath_hal_computetxtime
00500a00 g       *ABS*	00000000 u8UsbDeviceDescriptor
00908d1c g     F .text	000000a0 ath_tx_status_update_rate
009036b8 g     F .text	00000007 __adf_nbuf_queue_first
0050d788 g     O .bss	00000004 htc_handle
00909774 g     F .text	00000010 ATH_SKB_2_WH
0090ade0 g     F .text	000000b9 ieee80211_tgt_crypto_encap
008e4da0 g       *ABS*	00000000 __udivsi3
00903e94 g     F .text	00000057 _HTC_Ready
00903b84 g     F .text	00000010 ath_hal_getuptime
009035f4 g     F .text	00000024 __adf_nbuf_trim_tail
0050d740 g       *ABS*	00000000 _bss_start
0050cb40 g       *ABS*	00000000 _dram0_data_end
00903f94 g     F .text	00000062 ReturnBuffers
00909d54 g     F .text	00000084 ath_tgt_tx_send_normal
005009fa g       *ABS*	00000000 u8UsbInterfaceAlternateSetting
0050d73c g       *ABS*	00000000 __XT_EXCEPTION_DESCS__
0090ab78 g     F .text	00000072 ath_tgt_handle_aggr
00903238 g       *ABS*	00000000 _text_start
009037e4 g     F .text	00000020 _fw_usbfifo_init
0090aa6c g     F .text	0000009a owltgt_tx_processq
009033ac g     F .text	00000006 __adf_nbuf_realloc_tailroom
0090a188 g     F .text	00000032 ath_tgt_handle_normal
009053c8 g     F .text	00000015 ar5416StartTxDma
00905f60 g     F .text	00000059 ar5416SetRxFilter
00903bf0 g     F .text	00000005 ath_hal_free
0090426c g     F .text	00000156 _HTC_SendMsg
00906288 g     F .text	00000077 ar5416Attach
00903678 g     F .text	00000005 __adf_nbuf_cat
009053b4 g     F .text	00000012 ar5416SetTxDP
00908e64 g     F .text	00000012 ath_rate_node_update
0090364c g     F .text	00000019 __adf_nbuf_tailroom
00903670 g     F .text	00000007 __adf_nbuf_clone
008e3ca4 g       *ABS*	00000000 mUsbFIFOConfig
00904a48 g     F .text	0000000a cmnos_clock_init_patch
008e2b58 g       *ABS*	00000000 _HIFusb_isr_handler
009036f8 g     F .text	00000057 _buf_pool_static_create_pool
009036b0 g     F .text	00000007 __adf_nbuf_queue_len
00501000 g       *ABS*	00000000 _dport0_literal_start
009063c0 g     F .text	0000000b exit_ath_pci
0050d808 g       *ABS*	00000000 _bss_end
009036f0 g     F .text	00000005 _buf_pool_static_shutdown
00905350 g     F .text	00000061 ar5416UpdateTxTrigLevel
0050d78c g     O .bss	0000002c g_poolCtx
00903454 g     F .text	0000000c __adf_nbuf_get_priv
0090412c g     F .text	00000082 HTCProcessConfigPipeMsg
00903750 g     F .text	00000022 _buf_pool_static_alloc_buf
00905e74 g     F .text	0000000a ar5416Detach
009050c4 g     F .text	0000000f ar5416EnableReceive
005009cc g       *ABS*	00000000 usbFifoConf
005009e0 g       *ABS*	00000000 pu8DescriptorEX
00904a54 g     F .text	0000000a cmnos_refclk_speed_get_patch
00905750 g     F .text	0000010c ar5416Set11nTxDesc_20
0050cb40 g       *ABS*	00000000 _dram0_data_start
00906330 g     F .text	0000000d init_ath_pci
008e2ec4 g       *ABS*	00000000 bGet_descriptor
009053e0 g     F .text	0000002b ar5416NumTxPending
00907e64 g     F .text	00000432 ath_tgt_attach
00903cec g     F .text	00000013 _HTC_GetReservedHeadroom
00903320 g     F .text	0000003c Magpie_init
0050d73c g       *ABS*	00000000 __XT_EXCEPTION_DESCS_END__
00903594 g     F .text	0000004c __adf_nbuf_split_to_frag
005009f0 g       *ABS*	00000000 eUsbCxCommand
00904620 g     F .text	00000037 WMI_service_module_install
00903774 g     F .text	00000010 _buf_pool_static_alloc_buf_align
008e4df0 g       *ABS*	00000000 __umodsi3
00501000 g       *ABS*	00000000 _dport0_rodata_start
0050cb40 g       *ABS*	00000000 _dport0_data_start
008e4cac g       *ABS*	00000000 xthal_get_ccount
009033b4 g     F .text	00000006 __adf_nbuf_expand
00905018 g     F .text	00000083 ar5416SetInterrupts
009050b4 g     F .text	0000000d ar5416SetRxDP
009097fc g     F .text	00000010 ath_tx_status_clear
0050d76c g     O .bss	00000004 g_wlan_drv_handle
008e2bd4 g       *ABS*	00000000 hif_module_install
00903d00 g     F .text	0000002a HTCSendDoneHandler
009046d0 g     F .text	000001d0 _fw_usb_suspend_reboot
008e3cec g       *ABS*	00000000 mUsbEPMxPtSzLow
0090509c g     F .text	00000015 ar5416GetTsf64
0050d774 g     O .bss	00000004 ref_clk
00903eec g     F .text	00000066 HTCCheckAndSendCreditReport
005009c0 g       *ABS*	00000000 ControlCmd
0050cb40 g       *ABS*	00000000 _data_start
005009f6 g       *ABS*	00000000 u8UsbConfigValue
00903bcc g     F .text	00000022 ath_hal_malloc
00905e50 g     F .text	00000021 ar5416StopDmaReceive
00903e04 g     F .text	00000005 _HTC_PauseRecv
0090add8 g     F .text	00000005 __adf_net_unregister_drv
009082c0 g     F .text	0000002b __adf_os_dmamem_alloc
008e3c68 g       *ABS*	00000000 mUsbEPMap
009033e8 g     F .text	0000002b __adf_nbuf_pull_head
009063cc g     F .text	0000000c __adf_os_setup_intr
0050d74c g     O .bss	00000004 m_origUsbfifoRecvCmd
00904a7c g     F .text	0000002b cmnos_tick_patch
00903460 g     F .text	0000001e __adf_nbuf_queue_add
00907328 g     F .text	00000046 wmi_cmd_rsp
00903420 g     F .text	0000000c __adf_nbuf_unshare
0050d7b8 g     O .bss	00000012 UsbDeviceDescriptorPatch
00903784 g     F .text	00000016 _buf_pool_static_free_buf
009036c8 g     F .text	0000000e __adf_nbuf_is_queue_empty
00905000 g     F .text	00000017 ar5416IsInterruptPending
00903bf8 g     F .text	00000015 ath_hal_memcpy
00903000 g     F .boot	00000236 app_start
0090540c g     F .text	000001e6 ar5416SetupTxDesc_20
0050088c g       *ABS*	00000000 cticks
008e413c g       *ABS*	00000000 vdesc_module_install
0090980c g     F .text	0000008b ath_tx_status_update
0050d73c g       *ABS*	00000000 _data_end
0090ae99 g       *ABS*	00000000 _iram0_text_end
0090a208 g     F .text	00000225 ath_tgt_tx_form_aggr
005015f0 g       *ABS*	00000000 __XT_EXCEPTION_TABLE__
0090a1bc g     F .text	0000004a ath_tx_addto_baw
00903480 g     F .text	00000026 __adf_nbuf_queue_remove
00908298 g     F .text	00000028 ath_detach
0090326c g     F .text	0000004d wlan_task
00501600 g       *ABS*	00000000 _literals_start
009036d8 g     F .text	00000017 _buf_pool_static_init
00903668 g     F .text	00000008 __adf_nbuf_len
00905d54 g     F .text	0000003d ar5416StopTxDma
00903cbc g     F .text	00000016 wlan_pci_isr
008e519c g       *ABS*	00000000 memset
00501b38 g       *ABS*	00000000 _literals_end
00903cd4 g     F .text	00000005 _HTC_Shutdown
00904f28 g     F .text	0000003a ath_hal_getcapability
0090342c g     F .text	00000027 __adf_nbuf_frag_info
00501000 g       *ABS*	00000000 _dport0_rodata_end
00904a60 g     F .text	0000001c cmnos_delay_us_patch
005009ec g       *ABS*	00000000 eUsbCxFinishAction
00903e58 g     F .text	00000016 HTCFreeMsgBuffer
00905b5c g     F .text	00000083 ar5416Set11nAggrMiddle_20
00903688 g     F .text	00000015 __adf_nbuf_peek_header
008e4cec g       *ABS*	00000000 __divsi3
00905164 g     F .text	000001ea ar5416ProcRxDescFast_20
00501000 g       *ABS*	00000000 _dram0_rodata_start
00501000 g       *ABS*	00000000 _rom_literal_end
00906bc0 g     F .text	0000004e wmi_event
00903cb4 g     F .text	00000007 wlan_pci_config_read
00906c38 g     F .text	000006f0 ath_intr
00903ff8 g     F .text	00000010 _HTC_ReturnBuffers
008e1548 g       *ABS*	00000000 athos_indirection_table_install
0090ab08 g     F .text	0000006e owl_tgt_tx_tasklet
008e3cc4 g       *ABS*	00000000 mUsbEPMxPtSzHigh
00903bbc g     F .text	00000010 ath_hal_delay
005009e8 g       *ABS*	00000000 u8ConfigDescriptorEX
0090335c g     F .text	0000003e __adf_nbuf_alloc
009036c0 g     F .text	00000007 __adf_nbuf_queue_next
005009f4 g       *ABS*	00000000 UsbChirpFinish
009043c4 g     F .text	00000097 HTCMsgRecvHandler
00909898 g     F .text	0000006e ath_tx_status_update_aggr
0090339c g     F .text	00000006 __adf_nbuf_free
008e3c84 g       *ABS*	00000000 mUsbFIFOMap
009032bc g     F .text	00000005 htc_setup_comp
005015f0 g       *ABS*	00000000 _bss_table_start
0050cb44 g     O .data	00000238 ar5416_11ng_table
009049c0 g     F .text	00000086 _fw_usb_reset_fifo
009034d0 g     F .text	00000009 __adf_nbuf_unmap
00903640 g     F .text	0000000a __adf_nbuf_headroom
0090abec g     F .text	000000b3 ath_tgt_tx_cleanup
008e328c g       *ABS*	00000000 bStandardCommand
008e2f7c g       *ABS*	00000000 bSet_configuration
00903c2c g     F .text	00000080 wlan_pci_probe
00903e14 g     F .text	00000041 htc_module_install
0050cb40 g       *ABS*	00000000 _dport0_data_end
00904aa8 g     F .text	0000000d cmnos_milliseconds_patch
00501000 g       *ABS*	00000000 _rodata_start
00907cb4 g     F .text	00000018 ath_get_minrateidx
0050d808 g       .bss	00000000 _end
00904658 g     F .text	00000011 _HIFusb_get_max_msg_len_patch
00909a98 g     F .text	00000046 ath_tx_status_send
0090ae99 g       *ABS*	00000000 _iram0_text_start
00905be0 g     F .text	0000007d ar5416Set11nAggrLast_20
00903f54 g     F .text	0000003f HTCControlSvcProcessSendComplete
00903e70 g     F .text	00000021 HTCAllocMsgBuffer
0050cd7c g     O .data	00000004 g_pci_init_func
00903cdc g     F .text	0000000d _HTC_RegisterService
00903b94 g     F .text	00000026 _ath_hal_attach_tgt
0090404c g     F .text	000000e0 HTCProcessConnectMsg
00905c60 g     F .text	0000003e ar5416Clr11nAggr_20
00908934 g     F .text	000002b2 rcRateFind_11n
00903618 g     F .text	00000026 __adf_nbuf_put_tail
00908dec g     F .text	0000002c ath_rate_findrate
0050d770 g     O .bss	00000004 g_wlan_drv
009055f4 g     F .text	00000136 ar5416FillTxDesc_20
00903d2c g     F .text	00000017 HTC_AssembleBuffers
0050d808 g       *ABS*	00000000 _fw_image_end
00903e0c g     F .text	00000005 _HTC_ResumeRecv
00909b10 g     F .text	00000244 ath_tgt_tx_prepare
00903238 g       .text	00000000 _stext
00903aa4 g     F .text	00000023 bSet_configuration_patch
009063d8 g     F .text	0000000c __adf_os_free_intr
0090572c g     F .text	00000021 ar5416FillKeyTxDesc_20
009032c4 g     F .text	0000005a _wmi_cmd_rsp
00903cac g     F .text	00000007 wlan_pci_config_write
00904008 g     F .text	00000044 _HTC_ReturnBuffersList
00904b3c g     F .text	000003db fw_cmnos_printf
009050ec g     F .text	00000077 ar5416SetupRxDesc_20
008e3d10 g       *ABS*	00000000 mUsbEPinHighBandSet
00908e78 g     F .text	0000001b ath_rate_newstate
0050cb40 g       *ABS*	00000000 _dport0_bss_start
00501000 g       *ABS*	00000000 _dram0_rodata_end
00905fbc g     F .text	000002c9 ar5416ProcTxDesc_20
0090445c g     F .text	00000005 RedistributeCredit
00903a3c g     F .text	00000042 vUSBFIFO_EP6Cfg_FS_patch
0050cb40 g       *ABS*	00000000 _dport0_bss_end
00903ac8 g     F .text	00000044 bStandardCommand_patch
0050d7cc g     O .bss	0000003c ConfigDescriptorPatch
00905e80 g     F .text	000000df ar5416GetPendingInterrupts
00501000 g       *ABS*	00000000 _dport0_literal_end
0090585c g     F .text	00000274 ar5416Set11nRateScenario_20
009050d4 g     F .text	00000017 ar5416StopPcuReceive
009048a0 g     F .text	0000011e _fw_usb_fw_task



Disassembly of section .boot:

00903000 <app_start>:

extern BOOLEAN bJumptoFlash;
extern BOOLEAN bEepromExist;

void __section(boot) __noreturn __visible app_start(void)
{
  903000:	6c1004        	entry	a1, 32
#if defined(PROJECT_MAGPIE)
	T_EEP_RET retEEP;
#endif

	/* Zero BSS segment & dynamic memory section. */
	init_mem();
  903003:	58008d        	call8	903238 <_text_start>

#if defined(PROJECT_MAGPIE)
	fatal_exception_func();
#endif

	if( IS_FLASHBOOT() ) {
  903006:	127180        	l32r	a2, 8df608 <_bss_end+0x3d1e00>
  903009:	0c0200        	memw
  90300c:	8320      	l32i.n	a3, a2, 0
  90300e:	127181        	l32r	a2, 8df614 <_bss_end+0x3d1e0c>
  903011:	03035f        	extui	a3, a3, 16, 16
  903014:	723941        	bne	a3, a2, 903059 <app_start+0x59>
		athos_indirection_table_install();
  903017:	5b794c        	call8	8e1548 <athos_indirection_table_install>
		DBG_MODULE_INSTALL();
		A_CLOCK_INIT(SYSTEM_CLK);
  90301a:	127182        	l32r	a2, 8df624 <_bss_end+0x3d1e1c>
  90301d:	1a7183        	l32r	a10, 8df62c <_bss_end+0x3d1e24>
  903020:	232237        	l32i	a3, a2, 220
  903023:	0b3000        	callx8	a3
		A_UART_INIT();
  903026:	2a2213        	l32i	a10, a2, 76
  903029:	0ba000        	callx8	a10
		A_PRINTF_INIT();
  90302c:	232211        	l32i	a3, a2, 68
  90302f:	0b3000        	callx8	a3
		A_DBG_INIT();
		A_EEP_INIT();
  903032:	23225f        	l32i	a3, a2, 0x17c
  903035:	0b3000        	callx8	a3
		A_TASKLET_INIT();
  903038:	232269        	l32i	a3, a2, 0x1a4
  90303b:	0b3000        	callx8	a3
		_indir_tbl.cmnos.timer._timer_init();
  90303e:	222241        	l32i	a2, a2, 0x104
  903041:	0b2000        	callx8	a2
#if defined(PROJECT_K2)
		/*
		 * WAR: these variable is not initialized when boot from flash
		 *      either re-enumeration or config them to default value = 0 would fix the issue
		 */
		u8UsbInterfaceAlternateSetting = u8UsbConfigValue = u8UsbInterfaceValue = 0;
  903044:	137184        	l32r	a3, 8df654 <_bss_end+0x3d1e4c>
  903047:	220a00        	movi	a2, 0
  90304a:	223500        	s16i	a2, a3, 0
  90304d:	137185        	l32r	a3, 8df664 <_bss_end+0x3d1e5c>
  903050:	223500        	s16i	a2, a3, 0
  903053:	137186        	l32r	a3, 8df66c <_bss_end+0x3d1e64>
  903056:	223500        	s16i	a2, a3, 0
	} else {
		bEepromExist = FALSE;
	}
#endif

	hostif = A_IS_HOST_PRESENT();
  903059:	127182        	l32r	a2, 8df664 <_bss_end+0x3d1e5c>
  90305c:	8a2e      	l32i.n	a10, a2, 56
  90305e:	0ba000        	callx8	a10
  903061:	d3a0      	mov.n	a3, a10
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  903063:	147187        	l32r	a4, 8df680 <_bss_end+0x3d1e78>
#elif defined(PROJECT_K2)
	rst_status = ioread32(MAGPIE_REG_RST_STATUS_ADDR);
#endif /* #if defined(PROJECT_MAGPIE) */


	A_PRINTF(" A_WDT_INIT()\n\r");
  903066:	252212        	l32i	a5, a2, 72
  903069:	1a7188        	l32r	a10, 8df68c <_bss_end+0x3d1e84>
  90306c:	0c0200        	memw
  90306f:	8440      	l32i.n	a4, a4, 0
  903071:	0b5000        	callx8	a5

#if defined(PROJECT_K2)
	save_cmnos_printf = fw_cmnos_printf;
  903074:	187189        	l32r	a8, 8df698 <_bss_end+0x3d1e90>
  903077:	15718a        	l32r	a5, 8df6a0 <_bss_end+0x3d1e98>
  90307a:	9580      	s32i.n	a5, a8, 0
#endif

	if( hostif == HIF_USB ) {
  90307c:	653014        	bnez	a3, 903094 <app_start+0x94>
#if defined(PROJECT_K2)
#if MOVE_PRINT_TO_RAM
		save_cmnos_printf = _indir_tbl.cmnos.printf._printf;
  90307f:	292212        	l32i	a9, a2, 72
		_indir_tbl.cmnos.printf._printf = fw_cmnos_printf;
  903082:	252612        	s32i	a5, a2, 72
#endif
		_indir_tbl.cmnos.usb._usb_fw_task = _fw_usb_fw_task;
  903085:	15718b        	l32r	a5, 8df6b4 <_bss_end+0x3d1eac>
#endif

	if( hostif == HIF_USB ) {
#if defined(PROJECT_K2)
#if MOVE_PRINT_TO_RAM
		save_cmnos_printf = _indir_tbl.cmnos.printf._printf;
  903088:	298600        	s32i	a9, a8, 0
		_indir_tbl.cmnos.printf._printf = fw_cmnos_printf;
#endif
		_indir_tbl.cmnos.usb._usb_fw_task = _fw_usb_fw_task;
  90308b:	25261d        	s32i	a5, a2, 116
		_indir_tbl.cmnos.usb._usb_reset_fifo = _fw_usb_reset_fifo;
  90308e:	15718c        	l32r	a5, 8df6c0 <_bss_end+0x3d1eb8>
  903091:	252629        	s32i	a5, a2, 164
#endif
	}

	if( rst_status == WDT_MAGIC_PATTERN ) {
  903094:	15718d        	l32r	a5, 8df6c8 <_bss_end+0x3d1ec0>
  903097:	127182        	l32r	a2, 8df6a0 <_bss_end+0x3d1e98>
  90309a:	75491b        	bne	a4, a5, 9030b9 <app_start+0xb9>
		A_PRINTF(" ==>WDT reset<==\n");
  90309d:	222212        	l32i	a2, a2, 72
  9030a0:	1a718e        	l32r	a10, 8df6d8 <_bss_end+0x3d1ed0>
  9030a3:	0b2000        	callx8	a2
#if defined(PROJECT_MAGPIE)
		reset_EP4_FIFO();
#endif
		*((volatile uint32_t*)WATCH_DOG_RESET_COUNTER_ADDR)+=1;
  9030a6:	12718f        	l32r	a2, 8df6e4 <_bss_end+0x3d1edc>
  9030a9:	0c0200        	memw
  9030ac:	8420      	l32i.n	a4, a2, 0
  9030ae:	b144      	addi.n	a4, a4, 1
  9030b0:	0c0200        	memw
  9030b3:	9420      	s32i.n	a4, a2, 0
  9030b5:	600012        	j	9030cb <app_start+0xcb>
  9030b8:	001571        	excw
	} else if (rst_status == SUS_MAGIC_PATTERN) {
  9030bb:	9022      	s32i.n	a0, a2, 8
		A_PRINTF(" ==>warm start<==\n");
  9030bd:	22121a        	l32i	a2, a1, 104
  9030c0:	719175        	beq	a9, a1, 903139 <app_start+0x139>
		A_PRINTF(" ==>WDT reset<==\n");
#if defined(PROJECT_MAGPIE)
		reset_EP4_FIFO();
#endif
		*((volatile uint32_t*)WATCH_DOG_RESET_COUNTER_ADDR)+=1;
	} else if (rst_status == SUS_MAGIC_PATTERN) {
  9030c3:	41021a        	excw
		A_PRINTF(" ==>warm start<==\n");
	} else
		A_PRINTF(" ==>cold start<==\n");
  9030c6:	71920b        	blt	a9, a1, 9030d5 <app_start+0xd5>
  9030c9:	200014        	l8ui	a0, a0, 20
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9030cc:	718d12        	bbs	a8, a1, 9030e2 <app_start+0xe2>
  9030cf:	71871a        	bbci	a8, 17, 9030ed <app_start+0xed>
	SFLASH_MODULE_INSTALL();
	A_SFLASH_INIT();
#endif
#endif

	HIF_MODULE_INSTALL();
  9030d2:	71930c        	bltu	a9, a1, 9030e2 <app_start+0xe2>
  9030d5:	020094        	s32e	a2, a0, -64
  9030d8:	205b7e        	l32ai	a0, a5, 0x1f8
  9030db:	be1a      	addi.n	a10, a1, 14
	HTC_MODULE_INSTALL();
  9030dd:	719458        	ball	a9, a1, 903139 <app_start+0x139>
  9030e0:	034d1a        	excw
	WMI_SERVICE_MODULE_INSTALL();
  9030e3:	719558        	bbc	a9, a1, 90313f <app_start+0x13f>
  9030e6:	054e1a        	excw
	BUF_POOL_MODULE_INSTALL();
  9030e9:	719658        	bbci	a9, 1, 903145 <app_start+0x145>
  9030ec:	01ac1a        	excw
	VBUF_MODULE_INSTALL();
  9030ef:	71975b        	bbci	a9, 17, 90314e <app_start+0x14e>
  9030f2:	83e6      	l32i.n	a3, a14, 24
	VDESC_MODULE_INSTALL();
  9030f4:	1a7198        	l32r	a10, 8df754 <_bss_end+0x3d1f4c>
  9030f7:	5b8411        	call8	8e413c <vdesc_module_install>

	//init each module, should be put together..
	A_PRINTF("ALLOCRAM start 0x%x size %d\n", ALLOCRAM_START, ALLOCRAM_SIZE);
  9030fa:	127199        	l32r	a2, 8df760 <_bss_end+0x3d1f58>
  9030fd:	14719a        	l32r	a4, 8df768 <_bss_end+0x3d1f60>
  903100:	b425      	addi.n	a5, a2, 4
  903102:	02440c        	sub	a4, a4, a2
  903105:	127182        	l32r	a2, 8df710 <_bss_end+0x3d1f08>
  903108:	1a719b        	l32r	a10, 8df774 <_bss_end+0x3d1f6c>
  90310b:	282212        	l32i	a8, a2, 72
  90310e:	db50      	mov.n	a11, a5
  903110:	dc40      	mov.n	a12, a4
  903112:	0b8000        	callx8	a8
	A_ALLOCRAM_INIT(ALLOCRAM_START, ALLOCRAM_SIZE);
  903115:	282251        	l32i	a8, a2, 0x144
  903118:	055a02        	or	a10, a5, a5
  90311b:	044b02        	or	a11, a4, a4
  90311e:	0b8000        	callx8	a8

	if( hostif == HIF_USB ) {
  903121:	6530b8        	bnez	a3, 9031dd <app_start+0x1dd>
		_indir_tbl.hif._get_max_msg_len = _HIFusb_get_max_msg_len_patch;
  903124:	13719c        	l32r	a3, 8df794 <_bss_end+0x3d1f8c>
  903127:	23267e        	s32i	a3, a2, 0x1f8
		_indir_tbl.cmnos.usb._usb_reg_out = usb_reg_out_patch;
  90312a:	13719d        	l32r	a3, 8df7a0 <_bss_end+0x3d1f98>
  90312d:	232632        	s32i	a3, a2, 200
		_indir_tbl.hif._isr_handler = _HIFusb_isr_handler_patch;
  903130:	13719e        	l32r	a3, 8df7a8 <_bss_end+0x3d1fa0>
  903133:	232680        	s32i	a3, a2, 0x200
		_indir_tbl.cmnos.usb._usb_set_configuration = bSet_configuration_patch;
  903136:	13719f        	l32r	a3, 8df7b4 <_bss_end+0x3d1fac>
  903139:	232625        	s32i	a3, a2, 148
		_indir_tbl.cmnos.usb._usb_status_in = usb_status_in_patch;
  90313c:	1371a0        	l32r	a3, 8df7bc <_bss_end+0x3d1fb4>
  90313f:	232633        	s32i	a3, a2, 204
		_indir_tbl.cmnos.usb._usb_get_descriptor = bGet_descriptor_patch;
  903142:	1371a1        	l32r	a3, 8df7c8 <_bss_end+0x3d1fc0>
  903145:	23262f        	s32i	a3, a2, 188
		_indir_tbl.cmnos.usb._usb_standard_cmd = bStandardCommand_patch;
  903148:	1371a2        	l32r	a3, 8df7d0 <_bss_end+0x3d1fc8>
  90314b:	232626        	s32i	a3, a2, 152
		_indir_tbl.usbfifo_api._init = _fw_usbfifo_init;
  90314e:	1371a3        	l32r	a3, 8df7dc <_bss_end+0x3d1fd4>
  903151:	23269b        	s32i	a3, a2, 0x26c

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  903154:	1271a4        	l32r	a2, 8df7e4 <_bss_end+0x3d1fdc>
  903157:	222000        	l8ui	a2, a2, 0
		_indir_tbl.hif._start = _HIFusb_start_patch;
		_indir_tbl.htc._HTC_MsgRecvHandler = HTCMsgRecvHandler_patch;
		_indir_tbl.htc._HTC_ControlSvcProcessMsg = HTCControlSvcProcessMsg_patch;
#endif

		if (!(ioread8_usb(ZM_MAIN_CTRL_OFFSET) & BIT6))
  90315a:	792f02        	bbsi	a2, 25, 903160 <app_start+0x160>
			vUSBFIFO_EP6Cfg_FS_patch();
  90315d:	580237        	call8	903a3c <vUSBFIFO_EP6Cfg_FS_patch>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  903160:	1271a5        	l32r	a2, 8df7f4 <_bss_end+0x3d1fec>

#ifdef FUSION_USB_ENABLE_TX_STREAM
		// For K2, enable tx stream mode
		A_PRINTF("Enable Tx Stream mode: 0x%x\r\n",
  903163:	137182        	l32r	a3, 8df76c <_bss_end+0x3d1f64>
  903166:	0c0200        	memw
  903169:	2b2200        	l32i	a11, a2, 0
  90316c:	233212        	l32i	a3, a3, 72
  90316f:	1a71a6        	l32r	a10, 8df808 <_bss_end+0x3d2000>
  903172:	0b3000        	callx8	a3
			ioread32_usb(ZM_SOC_USB_MODE_CTRL_OFFSET));

		/* Patch for K2 USB STREAM mode */
		/* disable down stream DMA mode */
		io32_rmw_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT6, BIT0);
  903175:	da20      	mov.n	a10, a2
  903177:	c4b0      	movi.n	a11, 64
  903179:	c0c1      	movi.n	a12, 1
  90317b:	581f09        	call8	90ada0 <io32_rmw>
#if SYSTEM_MODULE_HP_EP5
		io32_set_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT8);
  90317e:	da20      	mov.n	a10, a2
  903180:	2b1a00        	movi	a11, 0x100
  903183:	c0c0      	movi.n	a12, 0
  903185:	581f06        	call8	90ada0 <io32_rmw>
#endif

#if SYSTEM_MODULE_HP_EP6
		io32_set_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT9);
  903188:	da20      	mov.n	a10, a2
  90318a:	2b2a00        	movi	a11, 0x200
  90318d:	c0c0      	movi.n	a12, 0
  90318f:	581f04        	call8	90ada0 <io32_rmw>
#endif
		/* enable down stream DMA mode */
		io32_set_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT0);
  903192:	da20      	mov.n	a10, a2
  903194:	c0b1      	movi.n	a11, 1
  903196:	2c0a00        	movi	a12, 0
  903199:	581f01        	call8	90ada0 <io32_rmw>
#endif

#ifdef FUSION_USB_ENABLE_RX_STREAM
		/* Patch for K2 USB STREAM mode */
		/* disable upstream DMA mode and enable upstream stream mode */
		io32_clr_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT1 | BIT3);
  90319c:	da20      	mov.n	a10, a2
  90319e:	c0b0      	movi.n	a11, 0
  9031a0:	c0ca      	movi.n	a12, 10
  9031a2:	581eff        	call8	90ada0 <io32_rmw>

		/* K2, Set maximum IN transfer to 8K */
		io32_rmw_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, 0x20, 0x30);
  9031a5:	da20      	mov.n	a10, a2
  9031a7:	c2b0      	movi.n	a11, 32
  9031a9:	c3c0      	movi.n	a12, 48
  9031ab:	581efd        	call8	90ada0 <io32_rmw>

		/* enable upstream DMA mode */
		io32_set_usb(ZM_SOC_USB_MODE_CTRL_OFFSET, BIT1);
  9031ae:	da20      	mov.n	a10, a2
  9031b0:	c0b2      	movi.n	a11, 2
  9031b2:	2c0a00        	movi	a12, 0
  9031b5:	581efa        	call8	90ada0 <io32_rmw>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9031b8:	1271a7        	l32r	a2, 8df854 <_bss_end+0x3d204c>
  9031bb:	230aa0        	movi	a3, 160
  9031be:	0c0200        	memw
  9031c1:	9320      	s32i.n	a3, a2, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  9031c3:	1271a8        	l32r	a2, 8df864 <_bss_end+0x3d205c>
  9031c6:	0c0200        	memw
  9031c9:	8320      	l32i.n	a3, a2, 0
  9031cb:	1271a9        	l32r	a2, 8df870 <_bss_end+0x3d2068>

		/* set stream mode timeout critirea */
		iowrite32_usb(ZM_SOC_USB_TIME_CTRL_OFFSET, 0xa0);
#if defined(PROJECT_K2)
		/*0x10004020 is vaild in k2 but could be invaild in other chip*/
		if ((ioread32(0x10004020) & 0x2000) != 0) {
  9031ce:	723704        	bbci	a3, 18, 9031d6 <app_start+0x1d6>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9031d1:	c030      	movi.n	a3, 0
  9031d3:	600001        	j	9031d8 <app_start+0x1d8>
  9031d6:	c039      	movi.n	a3, 9
  9031d8:	0c0200        	memw
  9031db:	9320      	s32i.n	a3, a2, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  9031dd:	1271aa        	l32r	a2, 8df888 <_bss_end+0x3d2080>
	}
#if defined(PROJECT_MAGPIE) && !defined(ROM_VER_1_1)
	else if (hostif == HIF_PCI )
		hif_pci_patch_install(&_indir_tbl.hif);
#endif
	A_PRINTF("USB mode: 0x%x\r\n", ioread32_usb(0x100));
  9031e0:	1a71ab        	l32r	a10, 8df88c <_bss_end+0x3d2084>
  9031e3:	0c0200        	memw
  9031e6:	8b20      	l32i.n	a11, a2, 0
  9031e8:	127182        	l32r	a2, 8df7f0 <_bss_end+0x3d1fe8>
  9031eb:	232212        	l32i	a3, a2, 72
  9031ee:	0b3000        	callx8	a3

	// patch the clock function
	if(1) {
		_indir_tbl.cmnos.clock._clock_init = cmnos_clock_init_patch;
  9031f1:	1371ac        	l32r	a3, 8df8a4 <_bss_end+0x3d209c>
		_indir_tbl.cmnos.clock._delay_us = cmnos_delay_us_patch;
		_indir_tbl.cmnos.clock._clock_tick = cmnos_tick_patch;
		_indir_tbl.cmnos.clock._milliseconds = cmnos_milliseconds_patch;

		//default clock, setup initial variable, SYSTEM_FREQ=40
		A_CLOCK_INIT(SYSTEM_FREQ);
  9031f4:	2a0a28        	movi	a10, 40
#endif
	A_PRINTF("USB mode: 0x%x\r\n", ioread32_usb(0x100));

	// patch the clock function
	if(1) {
		_indir_tbl.cmnos.clock._clock_init = cmnos_clock_init_patch;
  9031f7:	232637        	s32i	a3, a2, 220
		_indir_tbl.cmnos.clock._refclk_speed_get = cmnos_refclk_speed_get_patch;
  9031fa:	1371ad        	l32r	a3, 8df8b0 <_bss_end+0x3d20a8>
  9031fd:	23263c        	s32i	a3, a2, 240
		_indir_tbl.cmnos.clock._delay_us = cmnos_delay_us_patch;
  903200:	1371ae        	l32r	a3, 8df8b8 <_bss_end+0x3d20b0>
  903203:	23263a        	s32i	a3, a2, 232
		_indir_tbl.cmnos.clock._clock_tick = cmnos_tick_patch;
  903206:	1371af        	l32r	a3, 8df8c4 <_bss_end+0x3d20bc>
  903209:	232640        	s32i	a3, a2, 0x100
		_indir_tbl.cmnos.clock._milliseconds = cmnos_milliseconds_patch;
  90320c:	1371b0        	l32r	a3, 8df8cc <_bss_end+0x3d20c4>
  90320f:	23263d        	s32i	a3, a2, 244

		//default clock, setup initial variable, SYSTEM_FREQ=40
		A_CLOCK_INIT(SYSTEM_FREQ);
  903212:	58060d        	call8	904a48 <cmnos_clock_init_patch>
	}

	Magpie_init();
  903215:	580042        	call8	903320 <Magpie_init>

#if MAGPIE_ENABLE_WLAN == 1
	io32_clr(MAGPIE_REG_RST_RESET_ADDR, BIT10 | BIT8 | BIT7 | BIT6);
  903218:	1a71b1        	l32r	a10, 8df8dc <_bss_end+0x3d20d4>
  90321b:	2b0a00        	movi	a11, 0
  90321e:	2c5ac0        	movi	a12, 0x5c0
  903221:	581edf        	call8	90ada0 <io32_rmw>
#if defined(PROJECT_MAGPIE)
	io32_set(MAGPIE_REG_AHB_ARB_ADDR, BIT1);
#endif

	wlan_pci_module_init();
  903224:	58027a        	call8	903c10 <wlan_pci_module_init>
	wlan_pci_probe();
  903227:	580281        	call8	903c2c <wlan_pci_probe>
#endif


	A_PRINTF("Tgt running\n\r");
  90322a:	1a71b2        	l32r	a10, 8df8f4 <_bss_end+0x3d20ec>
  90322d:	222212        	l32i	a2, a2, 72
  903230:	0b2000        	callx8	a2
		_indir_tbl.cmnos.misc._assfail = exception_reset;
	}

	change_magpie_clk();
#endif
	wlan_task(); //never return
  903233:	58000e        	call8	90326c <wlan_task>

Disassembly of section .text:

00903238 <init_mem>:
	}
}
#endif

void init_mem()
{
  903238:	6c1004        	entry	a1, 32
	int i = 0;
	uint32_t *temp = (uint32_t *)ALLOCRAM_START;

	/* clear bss segment */
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
  90323b:	1871b3        	l32r	a8, 8df908 <_bss_end+0x3d2100>
  90323e:	1971b4        	l32r	a9, 8df910 <_bss_end+0x3d2108>
		*temp = 0;
  903241:	c0a0      	movi.n	a10, 0
{
	int i = 0;
	uint32_t *temp = (uint32_t *)ALLOCRAM_START;

	/* clear bss segment */
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
  903243:	600003        	j	90324a <init_mem+0x12>
		*temp = 0;
  903246:	9a80      	s32i.n	a10, a8, 0
{
	int i = 0;
	uint32_t *temp = (uint32_t *)ALLOCRAM_START;

	/* clear bss segment */
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
  903248:	b488      	addi.n	a8, a8, 4
  90324a:	7983f8        	bltu	a8, a9, 903246 <init_mem+0xe>
		*temp = 0;

	/* clear heap segment */
	for(i = 0; i < ((ALLOCRAM_SIZE - 4)/4); i++)
  90324d:	1a71b5        	l32r	a10, 8df924 <_bss_end+0x3d211c>
  903250:	197199        	l32r	a9, 8df8b4 <_bss_end+0x3d20ac>
  903253:	09a90c        	sub	a9, a10, a9
  903256:	092914        	srli	a9, a9, 2
			HTCMsgRecvHandler( hdr_buf, buffer, context);
	}
}
#endif

void init_mem()
  903259:	08990a        	addx4	a9, a9, a8
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
		*temp = 0;

	/* clear heap segment */
	for(i = 0; i < ((ALLOCRAM_SIZE - 4)/4); i++)
		temp[i] = 0;
  90325c:	c0a0      	movi.n	a10, 0
  90325e:	600003        	j	903265 <init_mem+0x2d>
  903261:	9a80      	s32i.n	a10, a8, 0
  903263:	b488      	addi.n	a8, a8, 4
	/* clear bss segment */
	for(temp = (uint32_t *)&START_BSS; temp < (uint32_t *)&END_BSS; temp++)
		*temp = 0;

	/* clear heap segment */
	for(i = 0; i < ((ALLOCRAM_SIZE - 4)/4); i++)
  903265:	7989f8        	bne	a8, a9, 903261 <init_mem+0x29>
		temp[i] = 0;
}
  903268:	d10f      	retw.n
	...

0090326c <wlan_task>:
	}
	return;
}

void __noreturn wlan_task(void)
{
  90326c:	6c1004        	entry	a1, 32
	loop_low=loop_high=0;
  90326f:	1871b6        	l32r	a8, 8df948 <_bss_end+0x3d2140>
  903272:	c020      	movi.n	a2, 0
  903274:	9280      	s32i.n	a2, a8, 0
  903276:	1871b7        	l32r	a8, 8df954 <_bss_end+0x3d214c>
  903279:	9280      	s32i.n	a2, a8, 0

	while(1) {
		/* update wdt timer */
		A_WDT_TASK();
  90327b:	127182        	l32r	a2, 8df884 <_bss_end+0x3d207c>
  90327e:	28225c        	l32i	a8, a2, 0x170
  903281:	0b8000        	callx8	a8

		/* UPDATE cticks - to be moved to idle_tsk, put here will be easier to read  */
		A_CLOCK_TICK();
  903284:	282240        	l32i	a8, a2, 0x100
  903287:	0b8000        	callx8	a8

		HIF_isr_handler(NULL);
  90328a:	282280        	l32i	a8, a2, 0x200
  90328d:	c0a0      	movi.n	a10, 0
  90328f:	0b8000        	callx8	a8

#if MAGPIE_ENABLE_WLAN == 1
		wlan_pci_isr();
  903292:	58028a        	call8	903cbc <wlan_pci_isr>
#endif

		A_TASKLET_RUN();
  903295:	28226d        	l32i	a8, a2, 0x1b4
  903298:	0b8000        	callx8	a8
		A_TIMER_RUN();
  90329b:	282245        	l32i	a8, a2, 0x114
  90329e:	0b8000        	callx8	a8
		temp[i] = 0;
}

static void idle_task()
{
	if (loop_low == 0xffffffff) {
  9032a1:	1871b7        	l32r	a8, 8df980 <_bss_end+0x3d2178>
  9032a4:	8980      	l32i.n	a9, a8, 0
  9032a6:	699008        	bnei	a9, -1, 9032b2 <wlan_task+0x46>
		loop_low = 0;
  9032a9:	c090      	movi.n	a9, 0
  9032ab:	9980      	s32i.n	a9, a8, 0
		loop_high++;
  9032ad:	1871b6        	l32r	a8, 8df988 <_bss_end+0x3d2180>
  9032b0:	8980      	l32i.n	a9, a8, 0
	} else {
		loop_low++;
  9032b2:	b199      	addi.n	a9, a9, 1
  9032b4:	9980      	s32i.n	a9, a8, 0
  9032b6:	63ffc4        	j	90327e <wlan_task+0x12>
  9032b9:	000000        	ill

009032bc <htc_setup_comp>:
#define MAGPIE 1

#if MAGPIE==1

void htc_setup_comp(void)
{
  9032bc:	6c1004        	entry	a1, 32
  9032bf:	d10f      	retw.n
  9032c1:	000000        	ill

009032c4 <_wmi_cmd_rsp>:
	}
}

void _wmi_cmd_rsp(void *pContext, WMI_COMMAND_ID cmd_id, A_UINT16 SeqNo,
		  A_UINT8 *buffer, int Length)
{
  9032c4:	6c1006        	entry	a1, 48
	adf_nbuf_t netbuf = ADF_NBUF_NULL;
	A_UINT8 *pData;

	netbuf = WMI_AllocEvent(pContext, WMI_EVT_CLASS_CMD_REPLY, sizeof(WMI_CMD_HDR) + Length);
  9032c7:	177182        	l32r	a7, 8df8d0 <_bss_end+0x3d20c8>
  9032ca:	022a02        	or	a10, a2, a2
  9032cd:	287292        	l32i	a8, a7, 0x248
  9032d0:	c0b1      	movi.n	a11, 1
  9032d2:	2c6c04        	addi	a12, a6, 4
  9032d5:	0b8000        	callx8	a8
	}
}

void _wmi_cmd_rsp(void *pContext, WMI_COMMAND_ID cmd_id, A_UINT16 SeqNo,
		  A_UINT8 *buffer, int Length)
{
  9032d8:	04044f        	extui	a4, a4, 0, 16
	adf_nbuf_t netbuf = ADF_NBUF_NULL;
	A_UINT8 *pData;

	netbuf = WMI_AllocEvent(pContext, WMI_EVT_CLASS_CMD_REPLY, sizeof(WMI_CMD_HDR) + Length);
  9032db:	d8a0      	mov.n	a8, a10
    
	if (netbuf == ADF_NBUF_NULL) {
  9032dd:	cda1      	bnez.n	a10, 9032f2 <_wmi_cmd_rsp+0x2e>
		adf_os_print("%s: buffer allocation for event_id %x failed!\n", __FUNCTION__, cmd_id);
  9032df:	227212        	l32i	a2, a7, 72
  9032e2:	1a71b8        	l32r	a10, 8df9c4 <_bss_end+0x3d21bc>
  9032e5:	1b71b9        	l32r	a11, 8df9cc <_bss_end+0x3d21c4>
  9032e8:	dc30      	mov.n	a12, a3
  9032ea:	0b2000        	callx8	a2
  9032ed:	63fffc        	j	9032ed <_wmi_cmd_rsp+0x29>
  9032f0:	0000c9        	excw
		adf_os_assert(0);
		return;
	}

	if (Length != 0 && buffer != NULL) {
  9032f3:	62c950        	j	8efc47 <memset+0xaaab>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  9032f6:	db60      	mov.n	a11, a6
  9032f8:	9810      	s32i.n	a8, a1, 0
  9032fa:	5800c7        	call8	903618 <__adf_nbuf_put_tail>
}

/* move a memory buffer */
static inline void 		__adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    A_MEMCPY(dst,src,size);    
  9032fd:	8775      	l32i.n	a7, a7, 20
  9032ff:	db50      	mov.n	a11, a5
  903301:	dc60      	mov.n	a12, a6
  903303:	0b7000        	callx8	a7
  903306:	8810      	l32i.n	a8, a1, 0
		pData = (A_UINT8 *)adf_nbuf_put_tail(netbuf, Length);
		adf_os_mem_copy(pData, buffer, Length);
	}

	WMI_SendEvent(pContext, netbuf, cmd_id, SeqNo, Length);
  903308:	157182        	l32r	a5, 8df910 <_bss_end+0x3d2108>
  90330b:	da20      	mov.n	a10, a2
  90330d:	255293        	l32i	a5, a5, 0x24c
  903310:	db80      	mov.n	a11, a8
  903312:	030c4f        	extui	a12, a3, 0, 16
  903315:	dd40      	mov.n	a13, a4
  903317:	de60      	mov.n	a14, a6
  903319:	0b5000        	callx8	a5
  90331c:	d10f      	retw.n
	...

00903320 <Magpie_init>:
}


void Magpie_init(void)
{
  903320:	6c1004        	entry	a1, 32
	A_PRINTF("[+++Magpie_init]\n\r");
  903323:	127182        	l32r	a2, 8df92c <_bss_end+0x3d2124>
  903326:	1a71ba        	l32r	a10, 8dfa10 <_bss_end+0x3d2208>
  903329:	232212        	l32i	a3, a2, 72
  90332c:	0b3000        	callx8	a3
 
	A_PRINTF("[+++VBUF_init(%d)]\n\r", MAX_BUF_NUM);
  90332f:	1371bb        	l32r	a3, 8dfa1c <_bss_end+0x3d2214>
  903332:	282212        	l32i	a8, a2, 72
  903335:	2b0a64        	movi	a11, 100
  903338:	da30      	mov.n	a10, a3
  90333a:	0b8000        	callx8	a8
	VBUF_init(MAX_BUF_NUM);
  90333d:	2822a5        	l32i	a8, a2, 0x294
  903340:	2a0a64        	movi	a10, 100
  903343:	0b8000        	callx8	a8
    
	A_PRINTF("[+++VBUF_init(%d)]\n\r", MAX_DESC_NUM);
  903346:	282212        	l32i	a8, a2, 72
  903349:	da30      	mov.n	a10, a3
  90334b:	2b0a64        	movi	a11, 100
  90334e:	0b8000        	callx8	a8
	VDESC_init(MAX_DESC_NUM);
  903351:	2222aa        	l32i	a2, a2, 0x2a8
  903354:	2a0a64        	movi	a10, 100
  903357:	0b2000        	callx8	a2
  90335a:	d10f      	retw.n

0090335c <__adf_nbuf_alloc>:
 * @return newly allocated nbuf
 */
__adf_nbuf_t 
__adf_nbuf_alloc(adf_os_size_t size, a_uint32_t reserve, 
                 a_uint32_t align)
{
  90335c:	6c1004        	entry	a1, 32
    VBUF *buf = NULL;
    VDESC *desc;
    
    buf = VBUF_alloc_vbuf();
  90335f:	157182        	l32r	a5, 8df968 <_bss_end+0x3d2160>
 * @return newly allocated nbuf
 */
__adf_nbuf_t 
__adf_nbuf_alloc(adf_os_size_t size, a_uint32_t reserve, 
                 a_uint32_t align)
{
  903362:	d620      	mov.n	a6, a2
    VBUF *buf = NULL;
    VDESC *desc;
    
    buf = VBUF_alloc_vbuf();
  903364:	2a52a6        	l32i	a10, a5, 0x298
  903367:	0ba000        	callx8	a10
  90336a:	d2a0      	mov.n	a2, a10
    if ( buf != NULL ) {
  90336c:	64a028        	beqz	a10, 903398 <__adf_nbuf_alloc+0x3c>
        desc = VDESC_alloc_vdesc();
  90336f:	2a52ab        	l32i	a10, a5, 0x2ac
  903372:	0ba000        	callx8	a10
        desc->buf_addr = (A_UINT8 *)A_ALLOCRAM(size);
  903375:	255252        	l32i	a5, a5, 0x148
    VBUF *buf = NULL;
    VDESC *desc;
    
    buf = VBUF_alloc_vbuf();
    if ( buf != NULL ) {
        desc = VDESC_alloc_vdesc();
  903378:	d4a0      	mov.n	a4, a10
        desc->buf_addr = (A_UINT8 *)A_ALLOCRAM(size);
  90337a:	db60      	mov.n	a11, a6
  90337c:	c0a0      	movi.n	a10, 0
  90337e:	0b5000        	callx8	a5
        desc->buf_size = size;
        desc->next_desc = NULL;
  903381:	c080      	movi.n	a8, 0
    VDESC *desc;
    
    buf = VBUF_alloc_vbuf();
    if ( buf != NULL ) {
        desc = VDESC_alloc_vdesc();
        desc->buf_addr = (A_UINT8 *)A_ALLOCRAM(size);
  903383:	9a41      	s32i.n	a10, a4, 4
        desc->buf_size = size;
  903385:	264504        	s16i	a6, a4, 8
        desc->next_desc = NULL;
  903388:	9840      	s32i.n	a8, a4, 0
        desc->data_offset = reserve;
  90338a:	234505        	s16i	a3, a4, 10
        desc->data_size = 0;
  90338d:	284506        	s16i	a8, a4, 12
        desc->control = 0;    
  903390:	284507        	s16i	a8, a4, 14
        
        buf->desc_list = desc;
  903393:	9420      	s32i.n	a4, a2, 0
        buf->buf_length = 0;    
  903395:	282504        	s16i	a8, a2, 8
    }
    
    return buf;
}   
  903398:	d10f      	retw.n
	...

0090339c <__adf_nbuf_free>:
 * @param hdl
 * @param adf_nbuf
 * 
 */
void __adf_nbuf_free(__adf_nbuf_t  buf)
{
  90339c:	6c1004        	entry	a1, 32
  90339f:	63fffc        	j	90339f <__adf_nbuf_free+0x3>
	...

009033a4 <__adf_nbuf_realloc_headroom>:
 * 
 * @return new nbuf
 */
__adf_nbuf_t 
__adf_nbuf_realloc_headroom(__adf_nbuf_t buf, a_uint32_t headroom)
{
  9033a4:	6c1004        	entry	a1, 32
  9033a7:	63fffc        	j	9033a7 <__adf_nbuf_realloc_headroom+0x3>
	...

009033ac <__adf_nbuf_realloc_tailroom>:
 * 
 * @return struct mbuf * (buffer with the new tailroom)
 */
__adf_nbuf_t 
__adf_nbuf_realloc_tailroom(__adf_nbuf_t  buf, a_uint32_t tailroom)
{
  9033ac:	6c1004        	entry	a1, 32
  9033af:	63fffc        	j	9033af <__adf_nbuf_realloc_tailroom+0x3>
	...

009033b4 <__adf_nbuf_expand>:
 * 
 * @return struct mbuf* (NULL if something goofed up)
 */
__adf_nbuf_t 
__adf_nbuf_expand(__adf_nbuf_t buf, a_uint32_t headroom, a_uint32_t tailroom)
{
  9033b4:	6c1004        	entry	a1, 32
  9033b7:	63fffc        	j	9033b7 <__adf_nbuf_expand+0x3>
	...

009033bc <__adf_nbuf_push_head>:
 * @return new data pointer ,NULL if the len is more than the
 *         space available in the head frag.
 */
a_uint8_t *       
__adf_nbuf_push_head(__adf_nbuf_t buf, adf_os_size_t len)
{
  9033bc:	6c1004        	entry	a1, 32
    a_uint8_t *ptr = NULL; 
    VDESC *desc = buf->desc_list;
  9033bf:	8820      	l32i.n	a8, a2, 0
    
    desc->data_offset -= len;
  9033c1:	03034f        	extui	a3, a3, 0, 16
    desc->data_size += len;
  9033c4:	2a8106        	l16ui	a10, a8, 12
__adf_nbuf_push_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL; 
    VDESC *desc = buf->desc_list;
    
    desc->data_offset -= len;
  9033c7:	298105        	l16ui	a9, a8, 10
    desc->data_size += len;
  9033ca:	aa3a      	add.n	a10, a3, a10
  9033cc:	2a8506        	s16i	a10, a8, 12
__adf_nbuf_push_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL; 
    VDESC *desc = buf->desc_list;
    
    desc->data_offset -= len;
  9033cf:	03990c        	sub	a9, a9, a3
    desc->data_size += len;
    buf->buf_length += len;
  9033d2:	2a2104        	l16ui	a10, a2, 8
__adf_nbuf_push_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL; 
    VDESC *desc = buf->desc_list;
    
    desc->data_offset -= len;
  9033d5:	09094f        	extui	a9, a9, 0, 16
  9033d8:	298505        	s16i	a9, a8, 10
    desc->data_size += len;
    buf->buf_length += len;
  9033db:	aa33      	add.n	a3, a3, a10
  9033dd:	232504        	s16i	a3, a2, 8
    ptr = desc->buf_addr + desc->data_offset;
  9033e0:	8281      	l32i.n	a2, a8, 4
    return(ptr);
}
  9033e2:	a922      	add.n	a2, a2, a9
  9033e4:	d10f      	retw.n
	...

009033e8 <__adf_nbuf_pull_head>:
 * 
 * @return new data pointer
 */
a_uint8_t * 
__adf_nbuf_pull_head(__adf_nbuf_t buf, adf_os_size_t len)
{
  9033e8:	6c1004        	entry	a1, 32
    a_uint8_t *ptr = NULL;
    VDESC *desc = buf->desc_list;
  9033eb:	8820      	l32i.n	a8, a2, 0
    
    desc->data_offset += len;
  9033ed:	03034f        	extui	a3, a3, 0, 16
    desc->data_size -= len;
  9033f0:	2a8106        	l16ui	a10, a8, 12
__adf_nbuf_pull_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL;
    VDESC *desc = buf->desc_list;
    
    desc->data_offset += len;
  9033f3:	298105        	l16ui	a9, a8, 10
    desc->data_size -= len;
  9033f6:	03aa0c        	sub	a10, a10, a3
  9033f9:	2a8506        	s16i	a10, a8, 12
__adf_nbuf_pull_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL;
    VDESC *desc = buf->desc_list;
    
    desc->data_offset += len;
  9033fc:	a939      	add.n	a9, a3, a9
    desc->data_size -= len;
    buf->buf_length -= len;
  9033fe:	2a2104        	l16ui	a10, a2, 8
__adf_nbuf_pull_head(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *ptr = NULL;
    VDESC *desc = buf->desc_list;
    
    desc->data_offset += len;
  903401:	09094f        	extui	a9, a9, 0, 16
  903404:	298505        	s16i	a9, a8, 10
    desc->data_size -= len;
    buf->buf_length -= len;
  903407:	03a30c        	sub	a3, a10, a3
  90340a:	232504        	s16i	a3, a2, 8
    ptr = desc->buf_addr + desc->data_offset;
  90340d:	8281      	l32i.n	a2, a8, 4
    
    return ptr;
}
  90340f:	a922      	add.n	a2, a2, a9
  903411:	d10f      	retw.n
	...

00903414 <__adf_nbuf_copy>:
 * 
 * @return struct mbuf * (newly allocated buffer)
 */
__adf_nbuf_t 
__adf_nbuf_copy(__adf_nbuf_t src)
{
  903414:	6c1004        	entry	a1, 32
    __adf_nbuf_t buf = NULL; 

    adf_os_assert(src != NULL);
  903417:	cc21      	bnez.n	a2, 90341c <__adf_nbuf_copy+0x8>
  903419:	63fffc        	j	903419 <__adf_nbuf_copy+0x5>
    
    return buf;
}
  90341c:	c020      	movi.n	a2, 0
  90341e:	d10f      	retw.n

00903420 <__adf_nbuf_unshare>:
 * 
 * @return new nbuf
 */
__adf_nbuf_t 
__adf_nbuf_unshare(__adf_nbuf_t  src)
{
  903420:	6c1004        	entry	a1, 32
    __adf_nbuf_t buf = NULL;

    adf_os_assert(src != NULL);
  903423:	cc21      	bnez.n	a2, 903428 <__adf_nbuf_unshare+0x8>
  903425:	63fffc        	j	903425 <__adf_nbuf_unshare+0x5>

    return buf;
}
  903428:	c020      	movi.n	a2, 0
  90342a:	d10f      	retw.n

0090342c <__adf_nbuf_frag_info>:
 * @param[out] sg (scatter/gather list of all the frags)
 * 
 */
void  
__adf_nbuf_frag_info(__adf_nbuf_t buf, adf_os_sglist_t	*sg)
{
  90342c:	6c1004        	entry	a1, 32
    VDESC *desc = buf->desc_list;
  90342f:	8820      	l32i.n	a8, a2, 0
  903431:	d930      	mov.n	a9, a3
    int count = 0;
  903433:	c0a0      	movi.n	a10, 0
    
    while( desc != NULL ) {
  903435:	600013        	j	90344c <__adf_nbuf_frag_info+0x20>
        sg->sg_segs[count].vaddr = desc->buf_addr + desc->data_offset;
  903438:	2b8105        	l16ui	a11, a8, 10
  90343b:	8c81      	l32i.n	a12, a8, 4
        sg->sg_segs[count].len   = desc->data_size;
        
        count++;        
  90343d:	b1aa      	addi.n	a10, a10, 1
{
    VDESC *desc = buf->desc_list;
    int count = 0;
    
    while( desc != NULL ) {
        sg->sg_segs[count].vaddr = desc->buf_addr + desc->data_offset;
  90343f:	abcb      	add.n	a11, a12, a11
  903441:	9b91      	s32i.n	a11, a9, 4
        sg->sg_segs[count].len   = desc->data_size;
  903443:	2b8106        	l16ui	a11, a8, 12
  903446:	9b92      	s32i.n	a11, a9, 8
        
        count++;        
        desc = desc->next_desc;
  903448:	8880      	l32i.n	a8, a8, 0
  90344a:	b899      	addi.n	a9, a9, 8
__adf_nbuf_frag_info(__adf_nbuf_t buf, adf_os_sglist_t	*sg)
{
    VDESC *desc = buf->desc_list;
    int count = 0;
    
    while( desc != NULL ) {
  90344c:	658fe8        	bnez	a8, 903438 <__adf_nbuf_frag_info+0xc>
        
        count++;        
        desc = desc->next_desc;
    }
    
    sg->nsegs = count;
  90344f:	9a30      	s32i.n	a10, a3, 0
  903451:	d10f      	retw.n
	...

00903454 <__adf_nbuf_get_priv>:
 * 
 * @return uint8_t* ( pointer to the data )
 */
a_uint8_t *
__adf_nbuf_get_priv(__adf_nbuf_t buf)
{
  903454:	6c1004        	entry	a1, 32
    adf_os_assert(buf != NULL);
  903457:	cc21      	bnez.n	a2, 90345c <__adf_nbuf_get_priv+0x8>
  903459:	63fffc        	j	903459 <__adf_nbuf_get_priv+0x5>

    return buf->ctx;
}
  90345c:	bc22      	addi.n	a2, a2, 12
  90345e:	d10f      	retw.n

00903460 <__adf_nbuf_queue_add>:
 * 
 */
void 
__adf_nbuf_queue_add(__adf_nbuf_qhead_t  *qhead, 
                     __adf_nbuf_t  buf)
{
  903460:	6c1004        	entry	a1, 32
    qhead->qlen++;
  903463:	8822      	l32i.n	a8, a2, 8
  903465:	b188      	addi.n	a8, a8, 1
  903467:	9822      	s32i.n	a8, a2, 8

    buf->next_buf = NULL;
  903469:	c080      	movi.n	a8, 0
  90346b:	9831      	s32i.n	a8, a3, 4

    if (qhead->head == NULL) {
  90346d:	8820      	l32i.n	a8, a2, 0
  90346f:	cc83      	bnez.n	a8, 903476 <__adf_nbuf_queue_add+0x16>
        qhead->head = buf;
  903471:	9320      	s32i.n	a3, a2, 0
  903473:	600003        	j	90347a <__adf_nbuf_queue_add+0x1a>
    }
    else {
        qhead->tail->next_buf = buf;
  903476:	8821      	l32i.n	a8, a2, 4
  903478:	9381      	s32i.n	a3, a8, 4
    }
    qhead->tail = buf;
  90347a:	9321      	s32i.n	a3, a2, 4
  90347c:	d10f      	retw.n
	...

00903480 <__adf_nbuf_queue_remove>:
 * 
 * @return the nbuf
 */
__adf_nbuf_t   
__adf_nbuf_queue_remove(__adf_nbuf_qhead_t *qhead)
{
  903480:	6c1004        	entry	a1, 32
  903483:	d820      	mov.n	a8, a2
    __adf_nbuf_t  b0 = NULL;

    if (qhead->head) {
  903485:	8220      	l32i.n	a2, a2, 0
  903487:	c929      	beqz.n	a2, 9034a4 <__adf_nbuf_queue_remove+0x24>
        qhead->qlen--;
  903489:	8982      	l32i.n	a9, a8, 8
        b0 = qhead->head;
        if ( qhead->head == qhead->tail ) {
  90348b:	8a81      	l32i.n	a10, a8, 4
__adf_nbuf_queue_remove(__adf_nbuf_qhead_t *qhead)
{
    __adf_nbuf_t  b0 = NULL;

    if (qhead->head) {
        qhead->qlen--;
  90348d:	b099      	addi.n	a9, a9, -1
  90348f:	9982      	s32i.n	a9, a8, 8
  903491:	c090      	movi.n	a9, 0
        b0 = qhead->head;
        if ( qhead->head == qhead->tail ) {
  903493:	7a2907        	bne	a2, a10, 90349e <__adf_nbuf_queue_remove+0x1e>
            qhead->head = NULL;
  903496:	9980      	s32i.n	a9, a8, 0
            qhead->tail = NULL;
  903498:	9981      	s32i.n	a9, a8, 4
  90349a:	600004        	j	9034a2 <__adf_nbuf_queue_remove+0x22>
  90349d:	008a21        	excw
        } else {
            qhead->head = qhead->head->next_buf;
  9034a0:	9a80      	s32i.n	a10, a8, 0
        }
    
        b0->next_buf = NULL;
  9034a2:	9921      	s32i.n	a9, a2, 4
    }
	return b0;
}
  9034a4:	d10f      	retw.n
	...

009034a8 <__adf_nbuf_dmamap_create>:
 * 
 * @return a_status_t
 */
a_status_t 
__adf_nbuf_dmamap_create(__adf_os_device_t osdev, __adf_os_dma_map_t *dmap)
{
  9034a8:	6c1004        	entry	a1, 32
    a_status_t retval = A_STATUS_OK;
    
    (*dmap) = A_ALLOCRAM(sizeof(struct __adf_dma_map));
  9034ab:	127182        	l32r	a2, 8dfab4 <_bss_end+0x3d22ac>
  9034ae:	c0a0      	movi.n	a10, 0
  9034b0:	222252        	l32i	a2, a2, 0x148
  9034b3:	c0bc      	movi.n	a11, 12
  9034b5:	0b2000        	callx8	a2
  9034b8:	9a30      	s32i.n	a10, a3, 0
    if(*dmap == NULL)
        return A_STATUS_ENOMEM;
  9034ba:	c023      	movi.n	a2, 3
__adf_nbuf_dmamap_create(__adf_os_device_t osdev, __adf_os_dma_map_t *dmap)
{
    a_status_t retval = A_STATUS_OK;
    
    (*dmap) = A_ALLOCRAM(sizeof(struct __adf_dma_map));
    if(*dmap == NULL)
  9034bc:	c8a2      	beqz.n	a10, 9034c2 <__adf_nbuf_dmamap_create+0x1a>
        return A_STATUS_ENOMEM;
            
    (*dmap)->buf = NULL;
  9034be:	c020      	movi.n	a2, 0
  9034c0:	92a0      	s32i.n	a2, a10, 0
    return retval;
}
  9034c2:	d10f      	retw.n

009034c4 <__adf_nbuf_map>:


a_status_t 
__adf_nbuf_map(__adf_os_device_t osdev, __adf_os_dma_map_t bmap, 
                          __adf_nbuf_t buf, adf_os_dma_dir_t dir)
{   
  9034c4:	6c1004        	entry	a1, 32
    bmap->buf = buf;
  9034c7:	9430      	s32i.n	a4, a3, 0
    
    return A_STATUS_OK;
}
  9034c9:	c020      	movi.n	a2, 0
  9034cb:	d10f      	retw.n
  9034cd:	000000        	ill

009034d0 <__adf_nbuf_unmap>:

void 
__adf_nbuf_unmap(__adf_os_device_t osdev, __adf_os_dma_map_t bmap, 
                            adf_os_dma_dir_t dir)
{
  9034d0:	6c1004        	entry	a1, 32
    bmap->buf = NULL;
  9034d3:	c080      	movi.n	a8, 0
  9034d5:	9830      	s32i.n	a8, a3, 0
  9034d7:	d10f      	retw.n
  9034d9:	000000        	ill

009034dc <__adf_nbuf_dmamap_destroy>:
}

void
__adf_nbuf_dmamap_destroy(__adf_os_device_t osdev, 
                          __adf_os_dma_map_t dmap)
{
  9034dc:	6c1004        	entry	a1, 32
  9034df:	d10f      	retw.n
  9034e1:	000000        	ill

009034e4 <__adf_nbuf_dmamap_info>:
 * @param[in]  bmap
 * @param[out] sg (map_info ptr)
 */
void 
__adf_nbuf_dmamap_info(__adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
  9034e4:	6c1004        	entry	a1, 32
    VDESC *desc = bmap->buf->desc_list;
  9034e7:	8820      	l32i.n	a8, a2, 0
  9034e9:	d930      	mov.n	a9, a3
  9034eb:	8880      	l32i.n	a8, a8, 0
    int count = 0;
  9034ed:	c0a0      	movi.n	a10, 0
    
    while( desc != NULL ) {
  9034ef:	600015        	j	903508 <__adf_nbuf_dmamap_info+0x24>
  9034f2:	00002b        	mulsh	a0, a0, a0
        sg->dma_segs[count].paddr = (adf_os_dma_addr_t)(desc->buf_addr + desc->data_offset);
  9034f5:	8105      	l32i.n	a1, a0, 20
  9034f7:	8c81      	l32i.n	a12, a8, 4
        sg->dma_segs[count].len   = desc->data_size;
        
        count++;        
  9034f9:	b1aa      	addi.n	a10, a10, 1
{
    VDESC *desc = bmap->buf->desc_list;
    int count = 0;
    
    while( desc != NULL ) {
        sg->dma_segs[count].paddr = (adf_os_dma_addr_t)(desc->buf_addr + desc->data_offset);
  9034fb:	abcb      	add.n	a11, a12, a11
  9034fd:	9b91      	s32i.n	a11, a9, 4
        sg->dma_segs[count].len   = desc->data_size;
  9034ff:	2b8106        	l16ui	a11, a8, 12
        
        count++;        
        desc = desc->next_desc;
  903502:	8880      	l32i.n	a8, a8, 0
    VDESC *desc = bmap->buf->desc_list;
    int count = 0;
    
    while( desc != NULL ) {
        sg->dma_segs[count].paddr = (adf_os_dma_addr_t)(desc->buf_addr + desc->data_offset);
        sg->dma_segs[count].len   = desc->data_size;
  903504:	9b92      	s32i.n	a11, a9, 8
  903506:	b899      	addi.n	a9, a9, 8
__adf_nbuf_dmamap_info(__adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
    VDESC *desc = bmap->buf->desc_list;
    int count = 0;
    
    while( desc != NULL ) {
  903508:	658fe8        	bnez	a8, 9034f4 <__adf_nbuf_dmamap_info+0x10>
        
        count++;        
        desc = desc->next_desc;
    }
    
    sg->nsegs = count;    
  90350b:	9a30      	s32i.n	a10, a3, 0
  90350d:	d10f      	retw.n
	...

00903510 <__adf_nbuf_set_rx_cksum>:
 * @param buf
 * @param cksum
 */
void 
__adf_nbuf_set_rx_cksum(__adf_nbuf_t buf, adf_nbuf_rx_cksum_t *cksum)
{
  903510:	6c1004        	entry	a1, 32
  903513:	d10f      	retw.n
  903515:	000000        	ill

00903518 <__adf_nbuf_get_vlan_info>:
}

a_status_t      
__adf_nbuf_get_vlan_info(adf_net_handle_t hdl, __adf_nbuf_t buf, 
                         adf_net_vlanhdr_t *vlan)
{
  903518:	6c1004        	entry	a1, 32
    return A_STATUS_OK;
}
  90351b:	c020      	movi.n	a2, 0
  90351d:	d10f      	retw.n
	...

00903520 <__adf_nbuf_create_frm_frag>:

__adf_nbuf_t
__adf_nbuf_create_frm_frag(__adf_nbuf_queue_t *qhead)
{
  903520:	6c1006        	entry	a1, 48
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
    a_uint32_t cnt = 0, len = __adf_nbuf_queue_len(qhead);
    a_uint16_t total_len = 0;

    buf_head = VBUF_alloc_vbuf();
  903523:	167182        	l32r	a6, 8dfb2c <_bss_end+0x3d2324>
    return A_STATUS_OK;
}

__adf_nbuf_t
__adf_nbuf_create_frm_frag(__adf_nbuf_queue_t *qhead)
{
  903526:	d420      	mov.n	a4, a2
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
    a_uint32_t cnt = 0, len = __adf_nbuf_queue_len(qhead);
    a_uint16_t total_len = 0;

    buf_head = VBUF_alloc_vbuf();
  903528:	2a62a6        	l32i	a10, a6, 0x298
 * 
 */
a_uint32_t  
__adf_nbuf_queue_len(__adf_nbuf_qhead_t *qhead)
{
    return qhead->qlen;
  90352b:	8522      	l32i.n	a5, a2, 8
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
    a_uint32_t cnt = 0, len = __adf_nbuf_queue_len(qhead);
    a_uint16_t total_len = 0;

    buf_head = VBUF_alloc_vbuf();
  90352d:	0ba000        	callx8	a10
  903530:	d2a0      	mov.n	a2, a10
 * @return (NULL if the Q is empty)
 */
__adf_nbuf_t   
__adf_nbuf_queue_first(__adf_nbuf_queue_t *qhead)
{
    return qhead->head;
  903532:	8340      	l32i.n	a3, a4, 0
    a_uint16_t total_len = 0;

    buf_head = VBUF_alloc_vbuf();
    buf_tmp = __adf_nbuf_queue_first(qhead);

    __adf_os_assert(buf_head);
  903534:	cca1      	bnez.n	a10, 903539 <__adf_nbuf_create_frm_frag+0x19>
  903536:	63fffc        	j	903536 <__adf_nbuf_create_frm_frag+0x16>
    __adf_os_assert(buf_tmp);
  903539:	cc31      	bnez.n	a3, 90353e <__adf_nbuf_create_frm_frag+0x1e>
  90353b:	63fffc        	j	90353b <__adf_nbuf_create_frm_frag+0x1b>

    buf_head->desc_list = buf_tmp->desc_list;
  90353e:	8330      	l32i.n	a3, a3, 0
  903540:	93a0      	s32i.n	a3, a10, 0
__adf_nbuf_create_frm_frag(__adf_nbuf_queue_t *qhead)
{
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
    a_uint32_t cnt = 0, len = __adf_nbuf_queue_len(qhead);
    a_uint16_t total_len = 0;
  903542:	c030      	movi.n	a3, 0
__adf_nbuf_t
__adf_nbuf_create_frm_frag(__adf_nbuf_queue_t *qhead)
{
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
    a_uint32_t cnt = 0, len = __adf_nbuf_queue_len(qhead);
  903544:	d730      	mov.n	a7, a3

__adf_nbuf_t
__adf_nbuf_create_frm_frag(__adf_nbuf_queue_t *qhead)
{
    VBUF *buf_tmp, *buf_head = NULL;
    VDESC *vdesc_prev = NULL, *vdesc_tmp = NULL;
  903546:	d830      	mov.n	a8, a3
    __adf_os_assert(buf_head);
    __adf_os_assert(buf_tmp);

    buf_head->desc_list = buf_tmp->desc_list;

    while ((buf_tmp = __adf_nbuf_queue_remove(qhead)) != NULL) {
  903548:	60002d        	j	903579 <__adf_nbuf_create_frm_frag+0x59>
  90354b:	0029a1        	excw
        cnt++;

        //adf_os_print("merge buf: %x\n", buf_tmp->desc_list->buf_addr + buf_tmp->desc_list->data_offset);

        total_len += buf_tmp->buf_length;
  90354e:	04b177        	excw
  903551:	a933      	add.n	a3, a3, a9
  903553:	03034f        	extui	a3, a3, 0, 16
  903556:	89a0      	l32i.n	a9, a10, 0

        if (vdesc_prev) {
  903558:	c886      	beqz.n	a8, 903562 <__adf_nbuf_create_frm_frag+0x42>
            /* link "the last VDESC of previous VBUF" to "the 1st VDESC of this VBUF" */
            vdesc_prev->next_desc = buf_tmp->desc_list;
  90355a:	9980      	s32i.n	a9, a8, 0
        }

        /* traverse VDESC list in this VBUF to find out the last VDESC */
        vdesc_tmp = buf_tmp->desc_list;
        while (vdesc_tmp->next_desc) {
  90355c:	600002        	j	903562 <__adf_nbuf_create_frm_frag+0x42>
  90355f:	00d980        	excw
  903562:	8890      	l32i.n	a8, a9, 0
  903564:	658ff8        	bnez	a8, 903560 <__adf_nbuf_create_frm_frag+0x40>
            vdesc_tmp = vdesc_tmp->next_desc;
        }
        vdesc_prev = vdesc_tmp;

        /* return VBUF to the pool */
        buf_tmp->desc_list = NULL;
  903567:	98a0      	s32i.n	a8, a10, 0
        buf_tmp->buf_length = 0;
  903569:	28a504        	s16i	a8, a10, 8
        VBUF_free_vbuf(buf_tmp);
  90356c:	2862a8        	l32i	a8, a6, 0x2a0
  90356f:	291600        	s32i	a9, a1, 0
  903572:	0b8000        	callx8	a8
  903575:	8910      	l32i.n	a9, a1, 0
  903577:	d890      	mov.n	a8, a9
    __adf_os_assert(buf_head);
    __adf_os_assert(buf_tmp);

    buf_head->desc_list = buf_tmp->desc_list;

    while ((buf_tmp = __adf_nbuf_queue_remove(qhead)) != NULL) {
  903579:	da40      	mov.n	a10, a4
  90357b:	9810      	s32i.n	a8, a1, 0
  90357d:	5bffc0        	call8	903480 <__adf_nbuf_queue_remove>
  903580:	8810      	l32i.n	a8, a1, 0
  903582:	65afc6        	bnez	a10, 90354c <__adf_nbuf_create_frm_frag+0x2c>
        buf_tmp->desc_list = NULL;
        buf_tmp->buf_length = 0;
        VBUF_free_vbuf(buf_tmp);
    }

    if (cnt != len) {
  903585:	757103        	beq	a7, a5, 90358c <__adf_nbuf_create_frm_frag+0x6c>
  903588:	63fffc        	j	903588 <__adf_nbuf_create_frm_frag+0x68>
  90358b:	002325        	excw
        //             __adf_nbuf_queue_len(qhead));
        adf_os_assert(0);
    }
    //__adf_os_assert(cnt == len);

    buf_head->buf_length = total_len;
  90358e:	04d10f        	subx8	a1, a13, a4

    return buf_head;
}
  903591:	000000        	ill

00903594 <__adf_nbuf_split_to_frag>:

void
__adf_nbuf_split_to_frag(__adf_nbuf_t buf, __adf_nbuf_qhead_t *qhead)
{
  903594:	6c1004        	entry	a1, 32
 * @param qhead
 */
void 
__adf_nbuf_queue_init(__adf_nbuf_qhead_t *qhead)
{
    qhead->qlen = 0;
  903597:	c040      	movi.n	a4, 0
  903599:	9432      	s32i.n	a4, a3, 8
    qhead->head = NULL;
  90359b:	9430      	s32i.n	a4, a3, 0
    qhead->tail = NULL;
  90359d:	9431      	s32i.n	a4, a3, 4
  90359f:	167182        	l32r	a6, 8dfba8 <_bss_end+0x3d23a0>
{
    VBUF *buf_tmp;
    VDESC *desc_tmp = NULL;

    __adf_nbuf_queue_init(qhead);
    desc_tmp = buf->desc_list;
  9035a2:	8420      	l32i.n	a4, a2, 0

    while (desc_tmp /*&& desc_tmp->buf_addr*/) {
  9035a4:	600026        	j	9035ce <__adf_nbuf_split_to_frag+0x3a>
  9035a7:	002a62        	excw
        buf_tmp = VBUF_alloc_vbuf();
  9035aa:	a60b      	add.n	a11, a0, a6
  9035ac:	a000      	add.n	a0, a0, a0
  9035ae:	d5a0      	mov.n	a5, a10

        __adf_os_assert(buf_tmp);
  9035b0:	cca1      	bnez.n	a10, 9035b5 <__adf_nbuf_split_to_frag+0x21>
  9035b2:	63fffc        	j	9035b2 <__adf_nbuf_split_to_frag+0x1e>

        //desc_tmp->data_size = 0;
        buf_tmp->desc_list = desc_tmp;
        //buf_tmp->buf_length = desc_tmp->buf_size;
        buf_tmp->buf_length = desc_tmp->data_size;
  9035b5:	274106        	l16ui	a7, a4, 12
        buf_tmp = VBUF_alloc_vbuf();

        __adf_os_assert(buf_tmp);

        //desc_tmp->data_size = 0;
        buf_tmp->desc_list = desc_tmp;
  9035b8:	94a0      	s32i.n	a4, a10, 0
        //buf_tmp->buf_length = desc_tmp->buf_size;
        buf_tmp->buf_length = desc_tmp->data_size;
  9035ba:	27a504        	s16i	a7, a10, 8
        buf_tmp->next_buf = NULL;
  9035bd:	c070      	movi.n	a7, 0
  9035bf:	97a1      	s32i.n	a7, a10, 4

        //adf_os_print("split - buf: %x\n", buf_tmp->desc_list->buf_addr + buf_tmp->desc_list->data_offset);

        __adf_nbuf_queue_add(qhead, buf_tmp);
  9035c1:	db50      	mov.n	a11, a5
  9035c3:	da30      	mov.n	a10, a3
  9035c5:	5bffa6        	call8	903460 <__adf_nbuf_queue_add>

        desc_tmp = desc_tmp->next_desc;

        buf_tmp->desc_list->next_desc = NULL;
  9035c8:	8550      	l32i.n	a5, a5, 0

        //adf_os_print("split - buf: %x\n", buf_tmp->desc_list->buf_addr + buf_tmp->desc_list->data_offset);

        __adf_nbuf_queue_add(qhead, buf_tmp);

        desc_tmp = desc_tmp->next_desc;
  9035ca:	8440      	l32i.n	a4, a4, 0

        buf_tmp->desc_list->next_desc = NULL;
  9035cc:	9750      	s32i.n	a7, a5, 0
    VDESC *desc_tmp = NULL;

    __adf_nbuf_queue_init(qhead);
    desc_tmp = buf->desc_list;

    while (desc_tmp /*&& desc_tmp->buf_addr*/) {
  9035ce:	654fd6        	bnez	a4, 9035a8 <__adf_nbuf_split_to_frag+0x14>
        buf_tmp->desc_list->next_desc = NULL;
    }

    buf->desc_list = NULL;
    buf->buf_length = 0;
    VBUF_free_vbuf(buf);
  9035d1:	2362a8        	l32i	a3, a6, 0x2a0
        desc_tmp = desc_tmp->next_desc;

        buf_tmp->desc_list->next_desc = NULL;
    }

    buf->desc_list = NULL;
  9035d4:	9420      	s32i.n	a4, a2, 0
    buf->buf_length = 0;
  9035d6:	242504        	s16i	a4, a2, 8
    VBUF_free_vbuf(buf);
  9035d9:	da20      	mov.n	a10, a2
  9035db:	0b3000        	callx8	a3
  9035de:	d10f      	retw.n

009035e0 <__adf_nbuf_last>:
 * 
 * @return struct mbuf*
 */
VDESC * 
__adf_nbuf_last(VBUF *buf)
{
  9035e0:	6c1004        	entry	a1, 32
    VDESC *desc = buf->desc_list;
  9035e3:	8220      	l32i.n	a2, a2, 0
    
    //for(; desc->next_desc != NULL; desc = desc->next_desc)
    //    ;
    while(desc->next_desc != NULL)
  9035e5:	600001        	j	9035ea <__adf_nbuf_last+0xa>
    {
        desc = desc->next_desc;
  9035e8:	d280      	mov.n	a2, a8
{
    VDESC *desc = buf->desc_list;
    
    //for(; desc->next_desc != NULL; desc = desc->next_desc)
    //    ;
    while(desc->next_desc != NULL)
  9035ea:	8820      	l32i.n	a8, a2, 0
  9035ec:	658ff8        	bnez	a8, 9035e8 <__adf_nbuf_last+0x8>
    {
        desc = desc->next_desc;
    }
    
    return desc;
}
  9035ef:	d10f      	retw.n
  9035f1:	000000        	ill

009035f4 <__adf_nbuf_trim_tail>:
 * @param len (how much to strip down)
 * 
 */
void 
__adf_nbuf_trim_tail(__adf_nbuf_t buf, adf_os_size_t len)
{
  9035f4:	6c1004        	entry	a1, 32
    VDESC *last_desc = __adf_nbuf_last(buf);
  9035f7:	da20      	mov.n	a10, a2
  9035f9:	5bfff9        	call8	9035e0 <__adf_nbuf_last>
    
    adf_os_assert(buf != NULL);
  9035fc:	cc21      	bnez.n	a2, 903601 <__adf_nbuf_trim_tail+0xd>
  9035fe:	63fffc        	j	9035fe <__adf_nbuf_trim_tail+0xa>
    last_desc->data_size -= len;
  903601:	28a106        	l16ui	a8, a10, 12
  903604:	03034f        	extui	a3, a3, 0, 16
  903607:	03880c        	sub	a8, a8, a3
  90360a:	28a506        	s16i	a8, a10, 12
    buf->buf_length -= len;
  90360d:	282104        	l16ui	a8, a2, 8
  903610:	03830c        	sub	a3, a8, a3
  903613:	232504        	s16i	a3, a2, 8
  903616:	d10f      	retw.n

00903618 <__adf_nbuf_put_tail>:
 * @return previous tail (data+len),NULL if the len is more than
 *         space available
 */
a_uint8_t *
__adf_nbuf_put_tail(__adf_nbuf_t buf, adf_os_size_t len)
{
  903618:	6c1004        	entry	a1, 32
    a_uint8_t *tail = NULL;
    VDESC *last_desc = __adf_nbuf_last(buf);
  90361b:	da20      	mov.n	a10, a2
  90361d:	5bfff0        	call8	9035e0 <__adf_nbuf_last>
    
    tail = last_desc->buf_addr + last_desc->data_offset + last_desc->data_size;
  903620:	28a106        	l16ui	a8, a10, 12
  903623:	29a105        	l16ui	a9, a10, 10
    last_desc->data_size += len;
  903626:	03034f        	extui	a3, a3, 0, 16
__adf_nbuf_put_tail(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *tail = NULL;
    VDESC *last_desc = __adf_nbuf_last(buf);
    
    tail = last_desc->buf_addr + last_desc->data_offset + last_desc->data_size;
  903629:	a989      	add.n	a9, a8, a9
    last_desc->data_size += len;
  90362b:	a838      	add.n	a8, a3, a8
  90362d:	28a506        	s16i	a8, a10, 12
    buf->buf_length += len;
  903630:	282104        	l16ui	a8, a2, 8
__adf_nbuf_put_tail(__adf_nbuf_t buf, adf_os_size_t len)
{
    a_uint8_t *tail = NULL;
    VDESC *last_desc = __adf_nbuf_last(buf);
    
    tail = last_desc->buf_addr + last_desc->data_offset + last_desc->data_size;
  903633:	8ba1      	l32i.n	a11, a10, 4
    last_desc->data_size += len;
    buf->buf_length += len;
  903635:	a833      	add.n	a3, a3, a8
  903637:	232504        	s16i	a3, a2, 8
    
    return tail;
}
  90363a:	a9b2      	add.n	a2, a11, a9
  90363c:	d10f      	retw.n
	...

00903640 <__adf_nbuf_headroom>:
 * 
 * @return num of bytes available
 */
a_uint32_t
__adf_nbuf_headroom(__adf_nbuf_t  buf)
{
  903640:	6c1004        	entry	a1, 32
    return buf->desc_list->data_offset;
  903643:	8820      	l32i.n	a8, a2, 0
}
  903645:	228105        	l16ui	a2, a8, 10
  903648:	d10f      	retw.n
	...

0090364c <__adf_nbuf_tailroom>:
 * @return num of bytes
 */

a_uint32_t 
__adf_nbuf_tailroom(__adf_nbuf_t  buf)
{
  90364c:	6c1004        	entry	a1, 32
    VDESC *last_desc = __adf_nbuf_last(buf);
  90364f:	da20      	mov.n	a10, a2
  903651:	5bffe3        	call8	9035e0 <__adf_nbuf_last>
    
    return last_desc->buf_size - last_desc->data_offset - last_desc->data_size;
  903654:	28a104        	l16ui	a8, a10, 8
  903657:	22a105        	l16ui	a2, a10, 10
  90365a:	02820c        	sub	a2, a8, a2
  90365d:	28a106        	l16ui	a8, a10, 12
}
  903660:	08220c        	sub	a2, a2, a8
  903663:	d10f      	retw.n
  903665:	000000        	ill

00903668 <__adf_nbuf_len>:
 * 
 * @return total length of packet (sum of all frag lengths)
 */ 
a_uint32_t
__adf_nbuf_len(__adf_nbuf_t  buf)
{
  903668:	6c1004        	entry	a1, 32
    return buf->buf_length; 
}
  90366b:	222104        	l16ui	a2, a2, 8
  90366e:	d10f      	retw.n

00903670 <__adf_nbuf_clone>:
 * 
 * @return Read-only copy of the nbuf (including clusters)
 */
__adf_nbuf_t 
__adf_nbuf_clone(__adf_nbuf_t  src)
{
  903670:	6c1004        	entry	a1, 32
    __adf_nbuf_t buf = NULL;
    
    return buf;
}
  903673:	c020      	movi.n	a2, 0
  903675:	d10f      	retw.n
	...

00903678 <__adf_nbuf_cat>:

void
__adf_nbuf_cat(__adf_nbuf_t dst, __adf_nbuf_t src)
{
  903678:	6c1004        	entry	a1, 32
  90367b:	d10f      	retw.n
  90367d:	000000        	ill

00903680 <__adf_nbuf_is_cloned>:
 * 
 * @return a_bool_t
 */
a_bool_t
__adf_nbuf_is_cloned(__adf_nbuf_t  buf)
{
  903680:	6c1004        	entry	a1, 32
    return A_FALSE;
}
  903683:	c020      	movi.n	a2, 0
  903685:	d10f      	retw.n
	...

00903688 <__adf_nbuf_peek_header>:
 * @brief This will return the header's addr & m_len
 */
void
__adf_nbuf_peek_header(__adf_nbuf_t buf, a_uint8_t   **addr, 
                       a_uint32_t	*len)
{
  903688:	6c1004        	entry	a1, 32
    VDESC *desc = buf->desc_list;
  90368b:	8820      	l32i.n	a8, a2, 0
    
    *addr = desc->buf_addr + desc->data_offset;
  90368d:	298105        	l16ui	a9, a8, 10
  903690:	8a81      	l32i.n	a10, a8, 4
    *len = desc->data_size; 
  903692:	288106        	l16ui	a8, a8, 12
__adf_nbuf_peek_header(__adf_nbuf_t buf, a_uint8_t   **addr, 
                       a_uint32_t	*len)
{
    VDESC *desc = buf->desc_list;
    
    *addr = desc->buf_addr + desc->data_offset;
  903695:	a9a9      	add.n	a9, a10, a9
  903697:	9930      	s32i.n	a9, a3, 0
    *len = desc->data_size; 
  903699:	9840      	s32i.n	a8, a4, 0
  90369b:	d10f      	retw.n
  90369d:	000000        	ill

009036a0 <__adf_nbuf_queue_init>:
 * @brief init the queue
 * @param qhead
 */
void 
__adf_nbuf_queue_init(__adf_nbuf_qhead_t *qhead)
{
  9036a0:	6c1004        	entry	a1, 32
    qhead->qlen = 0;
  9036a3:	c080      	movi.n	a8, 0
  9036a5:	9822      	s32i.n	a8, a2, 8
    qhead->head = NULL;
  9036a7:	9820      	s32i.n	a8, a2, 0
    qhead->tail = NULL;
  9036a9:	9821      	s32i.n	a8, a2, 4
  9036ab:	d10f      	retw.n
  9036ad:	000000        	ill

009036b0 <__adf_nbuf_queue_len>:
 * @return length
 * 
 */
a_uint32_t  
__adf_nbuf_queue_len(__adf_nbuf_qhead_t *qhead)
{
  9036b0:	6c1004        	entry	a1, 32
    return qhead->qlen;
}
  9036b3:	8222      	l32i.n	a2, a2, 8
  9036b5:	d10f      	retw.n
	...

009036b8 <__adf_nbuf_queue_first>:
 * 
 * @return (NULL if the Q is empty)
 */
__adf_nbuf_t   
__adf_nbuf_queue_first(__adf_nbuf_queue_t *qhead)
{
  9036b8:	6c1004        	entry	a1, 32
    return qhead->head;
}
  9036bb:	8220      	l32i.n	a2, a2, 0
  9036bd:	d10f      	retw.n
	...

009036c0 <__adf_nbuf_queue_next>:
 * 
 * @return (NULL if no packets are there)
 */
__adf_nbuf_t   
__adf_nbuf_queue_next(__adf_nbuf_t  buf)
{
  9036c0:	6c1004        	entry	a1, 32
    return buf->next_buf;
}
  9036c3:	8221      	l32i.n	a2, a2, 4
  9036c5:	d10f      	retw.n
	...

009036c8 <__adf_nbuf_is_queue_empty>:
 * 
 * @return a_bool_t
 */
a_bool_t  
__adf_nbuf_is_queue_empty(__adf_nbuf_qhead_t *qhead)
{
  9036c8:	6c1004        	entry	a1, 32
    return ((qhead->qlen == 0));
  9036cb:	8922      	l32i.n	a9, a2, 8
  9036cd:	c081      	movi.n	a8, 1
  9036cf:	c020      	movi.n	a2, 0
  9036d1:	098238        	moveqz	a2, a8, a9
}
  9036d4:	d10f      	retw.n
	...

009036d8 <_buf_pool_static_init>:
    pAPIs->_free_buf = _buf_pool_static_free_buf;
    pAPIs->_shutdown = _buf_pool_static_shutdown;
}
 
LOCAL pool_handle_t _buf_pool_static_init(adf_os_handle_t handle)
{
  9036d8:	6c1004        	entry	a1, 32
  9036db:	c080      	movi.n	a8, 0
    pAPIs->_alloc_buf_align = _buf_pool_static_alloc_buf_align;
    pAPIs->_free_buf = _buf_pool_static_free_buf;
    pAPIs->_shutdown = _buf_pool_static_shutdown;
}
 
LOCAL pool_handle_t _buf_pool_static_init(adf_os_handle_t handle)
  9036dd:	1271bc        	l32r	a2, 8dfdd0 <_bss_end+0x3d25c8>
{
#if 1
    int i;
    
    for(i=0; i < POOL_ID_MAX; i++) {
        g_poolCtx.bufQ[i] = NULL;
  9036e0:	db80      	mov.n	a11, a8
LOCAL pool_handle_t _buf_pool_static_init(adf_os_handle_t handle)
{
#if 1
    int i;
    
    for(i=0; i < POOL_ID_MAX; i++) {
  9036e2:	c298      	movi.n	a9, 40
    pAPIs->_alloc_buf_align = _buf_pool_static_alloc_buf_align;
    pAPIs->_free_buf = _buf_pool_static_free_buf;
    pAPIs->_shutdown = _buf_pool_static_shutdown;
}
 
LOCAL pool_handle_t _buf_pool_static_init(adf_os_handle_t handle)
  9036e4:	a28a      	add.n	a10, a8, a2
{
#if 1
    int i;
    
    for(i=0; i < POOL_ID_MAX; i++) {
        g_poolCtx.bufQ[i] = NULL;
  9036e6:	9ba0      	s32i.n	a11, a10, 0
  9036e8:	b488      	addi.n	a8, a8, 4
LOCAL pool_handle_t _buf_pool_static_init(adf_os_handle_t handle)
{
#if 1
    int i;
    
    for(i=0; i < POOL_ID_MAX; i++) {
  9036ea:	7989f6        	bne	a8, a9, 9036e4 <_buf_pool_static_init+0xc>
    ctx = (BUF_POOL_STATIC_CONTEXT *)adf_os_mem_alloc(sizeof(BUF_POOL_STATIC_CONTEXT));
    ctx->NetHandle = handle;
    
    return ctx; 
#endif    
}      
  9036ed:	d10f      	retw.n
	...

009036f0 <_buf_pool_static_shutdown>:
    
LOCAL void _buf_pool_static_shutdown(pool_handle_t handle) 
{
  9036f0:	6c1004        	entry	a1, 32
  9036f3:	d10f      	retw.n
  9036f5:	000000        	ill

009036f8 <_buf_pool_static_create_pool>:
    // SHALL NOT BE USED in FW
}

LOCAL void _buf_pool_static_create_pool(pool_handle_t handle, BUF_POOL_ID poolId, int nItems, int nSize)
{
  9036f8:	6c1006        	entry	a1, 48
        desc->data_size = 0;
        
        buf->buf_length = 0;        
        buf->desc_list = desc;
        
        if ( g_poolCtx.bufQ[poolId] == NULL ) {
  9036fb:	1271bc        	l32r	a2, 8dfdec <_bss_end+0x3d25e4>
{
    // SHALL NOT BE USED in FW
}

LOCAL void _buf_pool_static_create_pool(pool_handle_t handle, BUF_POOL_ID poolId, int nItems, int nSize)
{
  9036fe:	d940      	mov.n	a9, a4
    VDESC *desc;
    
    //BUF_POOL_STATIC_CONTEXT *ctx = (BUF_POOL_STATIC_CONTEXT *)handle;
    
    for ( i = 0; i < nItems; i++) {
        buf = VBUF_alloc_vbuf();
  903700:	177182        	l32r	a7, 8dfd08 <_bss_end+0x3d2500>
    VBUF *buf;
    VDESC *desc;
    
    //BUF_POOL_STATIC_CONTEXT *ctx = (BUF_POOL_STATIC_CONTEXT *)handle;
    
    for ( i = 0; i < nItems; i++) {
  903703:	c040      	movi.n	a4, 0
        desc->data_size = 0;
        
        buf->buf_length = 0;        
        buf->desc_list = desc;
        
        if ( g_poolCtx.bufQ[poolId] == NULL ) {
  903705:	02330a        	addx4	a3, a3, a2
    VBUF *buf;
    VDESC *desc;
    
    //BUF_POOL_STATIC_CONTEXT *ctx = (BUF_POOL_STATIC_CONTEXT *)handle;
    
    for ( i = 0; i < nItems; i++) {
  903708:	60003e        	j	90374a <_buf_pool_static_create_pool+0x52>
  90370b:	002a72        	excw
        buf = VBUF_alloc_vbuf();
  90370e:	a699      	add.n	a9, a9, a6
  903710:	100ba0        	l32r	a0, 8c6590 <_bss_end+0x3b8d88>
  903713:	00d2a0        	excw
        desc = VDESC_alloc_vdesc();
  903716:	2a72ab        	l32i	a10, a7, 0x2ac
  903719:	0ba000        	callx8	a10
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  90371c:	287252        	l32i	a8, a7, 0x148
  90371f:	d6a0      	mov.n	a6, a10
  903721:	db50      	mov.n	a11, a5
  903723:	c0a0      	movi.n	a10, 0
  903725:	0b8000        	callx8	a8

        desc->buf_addr = (A_UINT8 *)adf_os_mem_alloc(nSize);
        desc->buf_size = nSize;
        desc->data_offset = 0;
  903728:	c080      	movi.n	a8, 0
    
    for ( i = 0; i < nItems; i++) {
        buf = VBUF_alloc_vbuf();
        desc = VDESC_alloc_vdesc();

        desc->buf_addr = (A_UINT8 *)adf_os_mem_alloc(nSize);
  90372a:	9a61      	s32i.n	a10, a6, 4
        desc->buf_size = nSize;
  90372c:	256504        	s16i	a5, a6, 8
        desc->data_offset = 0;
  90372f:	286505        	s16i	a8, a6, 10
        desc->data_size = 0;
  903732:	286506        	s16i	a8, a6, 12
        
        buf->buf_length = 0;        
        buf->desc_list = desc;
  903735:	9620      	s32i.n	a6, a2, 0
        
        if ( g_poolCtx.bufQ[poolId] == NULL ) {
  903737:	8630      	l32i.n	a6, a3, 0
        desc->buf_addr = (A_UINT8 *)adf_os_mem_alloc(nSize);
        desc->buf_size = nSize;
        desc->data_offset = 0;
        desc->data_size = 0;
        
        buf->buf_length = 0;        
  903739:	282504        	s16i	a8, a2, 8
        buf->desc_list = desc;
        
        if ( g_poolCtx.bufQ[poolId] == NULL ) {
  90373c:	8910      	l32i.n	a9, a1, 0
  90373e:	cc62      	bnez.n	a6, 903744 <_buf_pool_static_create_pool+0x4c>
  903740:	600002        	j	903746 <_buf_pool_static_create_pool+0x4e>
  903743:	009621        	excw
            g_poolCtx.bufQ[poolId] = buf;
        } else {
            buf->next_buf = g_poolCtx.bufQ[poolId];
            g_poolCtx.bufQ[poolId] = buf;
  903746:	9230      	s32i.n	a2, a3, 0
    VBUF *buf;
    VDESC *desc;
    
    //BUF_POOL_STATIC_CONTEXT *ctx = (BUF_POOL_STATIC_CONTEXT *)handle;
    
    for ( i = 0; i < nItems; i++) {
  903748:	b144      	addi.n	a4, a4, 1
  90374a:	7942be        	blt	a4, a9, 90370c <_buf_pool_static_create_pool+0x14>
        } else {
            buf->next_buf = g_poolCtx.bufQ[poolId];
            g_poolCtx.bufQ[poolId] = buf;
        }
    }
}
  90374d:	d10f      	retw.n
	...

00903750 <_buf_pool_static_alloc_buf>:
            
LOCAL adf_nbuf_t  _buf_pool_static_alloc_buf(pool_handle_t handle, BUF_POOL_ID poolId, int reserve)
{
  903750:	6c1004        	entry	a1, 32
    VBUF *buf;
    
    buf = g_poolCtx.bufQ[poolId];
  903753:	1271bc        	l32r	a2, 8dfe44 <_bss_end+0x3d263c>
  903756:	02330a        	addx4	a3, a3, a2
  903759:	8230      	l32i.n	a2, a3, 0
    if ( buf != NULL ) {
  90375b:	c921      	beqz.n	a2, 903770 <_buf_pool_static_alloc_buf+0x20>
        g_poolCtx.bufQ[poolId] = buf->next_buf;
  90375d:	8821      	l32i.n	a8, a2, 4
  90375f:	9830      	s32i.n	a8, a3, 0
        
        buf->next_buf = NULL;
        buf->desc_list->data_offset = reserve;
  903761:	8920      	l32i.n	a9, a2, 0
    
    buf = g_poolCtx.bufQ[poolId];
    if ( buf != NULL ) {
        g_poolCtx.bufQ[poolId] = buf->next_buf;
        
        buf->next_buf = NULL;
  903763:	c080      	movi.n	a8, 0
  903765:	9821      	s32i.n	a8, a2, 4
        buf->desc_list->data_offset = reserve;
  903767:	249505        	s16i	a4, a9, 10
        buf->desc_list->data_size = 0;
  90376a:	289506        	s16i	a8, a9, 12
        buf->buf_length = 0;
  90376d:	282504        	s16i	a8, a2, 8
    }
    
    return buf;
}
  903770:	d10f      	retw.n
	...

00903774 <_buf_pool_static_alloc_buf_align>:

LOCAL adf_nbuf_t  _buf_pool_static_alloc_buf_align(pool_handle_t handle, BUF_POOL_ID poolId, int reserve, int align)
{
  903774:	6c1004        	entry	a1, 32
    return _buf_pool_static_alloc_buf(handle, poolId, reserve);
  903777:	da20      	mov.n	a10, a2
  903779:	db30      	mov.n	a11, a3
  90377b:	dc40      	mov.n	a12, a4
  90377d:	5bfff4        	call8	903750 <_buf_pool_static_alloc_buf>
}
  903780:	d2a0      	mov.n	a2, a10
  903782:	d10f      	retw.n

00903784 <_buf_pool_static_free_buf>:
    
LOCAL void _buf_pool_static_free_buf(pool_handle_t handle, BUF_POOL_ID poolId, adf_nbuf_t buf)
{
  903784:	6c1004        	entry	a1, 32
    if ( g_poolCtx.bufQ[poolId] == NULL ) {
  903787:	1871bc        	l32r	a8, 8dfe78 <_bss_end+0x3d2670>
  90378a:	08330a        	addx4	a3, a3, a8
  90378d:	8830      	l32i.n	a8, a3, 0
  90378f:	cc81      	bnez.n	a8, 903794 <_buf_pool_static_free_buf+0x10>
  903791:	600001        	j	903796 <_buf_pool_static_free_buf+0x12>
        g_poolCtx.bufQ[poolId] = buf;
    } else {
        buf->next_buf = g_poolCtx.bufQ[poolId];
  903794:	9841      	s32i.n	a8, a4, 4
        g_poolCtx.bufQ[poolId] = buf;
  903796:	9430      	s32i.n	a4, a3, 0
  903798:	d10f      	retw.n
	...

0090379c <buf_pool_module_install>:
LOCAL void _buf_pool_static_shutdown(pool_handle_t handle);      

BUF_POOL_STATIC_CONTEXT g_poolCtx;

void buf_pool_module_install(struct buf_pool_api *pAPIs)
{   
  90379c:	6c1004        	entry	a1, 32
    pAPIs->_init = _buf_pool_static_init;
  90379f:	1871bd        	l32r	a8, 8dfe94 <_bss_end+0x3d268c>
  9037a2:	9820      	s32i.n	a8, a2, 0
    pAPIs->_create_pool = _buf_pool_static_create_pool;
  9037a4:	1871be        	l32r	a8, 8dfe9c <_bss_end+0x3d2694>
  9037a7:	9822      	s32i.n	a8, a2, 8
    pAPIs->_alloc_buf = _buf_pool_static_alloc_buf;
  9037a9:	1871bf        	l32r	a8, 8dfea8 <_bss_end+0x3d26a0>
  9037ac:	9823      	s32i.n	a8, a2, 12
    pAPIs->_alloc_buf_align = _buf_pool_static_alloc_buf_align;
  9037ae:	1871c0        	l32r	a8, 8dfeb0 <_bss_end+0x3d26a8>
  9037b1:	9824      	s32i.n	a8, a2, 16
    pAPIs->_free_buf = _buf_pool_static_free_buf;
  9037b3:	1871c1        	l32r	a8, 8dfeb8 <_bss_end+0x3d26b0>
  9037b6:	9825      	s32i.n	a8, a2, 20
    pAPIs->_shutdown = _buf_pool_static_shutdown;
  9037b8:	1871c2        	l32r	a8, 8dfec0 <_bss_end+0x3d26b8>
  9037bb:	9821      	s32i.n	a8, a2, 4
  9037bd:	d10f      	retw.n
	...

009037c0 <_fw_usbfifo_recv_command>:

typedef void (* USBFIFO_recv_command)(VBUF *cmd);
USBFIFO_recv_command m_origUsbfifoRecvCmd = NULL;

void _fw_usbfifo_recv_command(VBUF *buf)
{
  9037c0:	6c1004        	entry	a1, 32
	uint8_t *cmd_data;
	uint32_t tmp;

	cmd_data = (uint8_t *)(buf->desc_list->buf_addr +
  9037c3:	8820      	l32i.n	a8, a2, 0

typedef void (* USBFIFO_recv_command)(VBUF *cmd);
USBFIFO_recv_command m_origUsbfifoRecvCmd = NULL;

void _fw_usbfifo_recv_command(VBUF *buf)
{
  9037c5:	da20      	mov.n	a10, a2
	uint8_t *cmd_data;
	uint32_t tmp;

	cmd_data = (uint8_t *)(buf->desc_list->buf_addr +
  9037c7:	298105        	l16ui	a9, a8, 10
				buf->desc_list->data_offset);
	tmp = *((uint32_t *)cmd_data);
  9037ca:	8881      	l32i.n	a8, a8, 4
  9037cc:	a988      	add.n	a8, a8, a9
	if (tmp == 0xFFFFFFFF)
  9037ce:	8880      	l32i.n	a8, a8, 0
  9037d0:	698004        	bnei	a8, -1, 9037d8 <_fw_usbfifo_recv_command+0x18>
		_fw_usb_suspend_reboot();
  9037d3:	5803bf        	call8	9046d0 <_fw_usb_suspend_reboot>
  9037d6:	d10f      	retw.n
	else
		m_origUsbfifoRecvCmd(buf);
  9037d8:	1871c3        	l32r	a8, 8dfee4 <_bss_end+0x3d26dc>
  9037db:	8880      	l32i.n	a8, a8, 0
  9037dd:	0b8000        	callx8	a8
  9037e0:	d10f      	retw.n
	...

009037e4 <_fw_usbfifo_init>:
}

void _fw_usbfifo_init(USB_FIFO_CONFIG *pConfig)
{
  9037e4:	6c1004        	entry	a1, 32
	m_origUsbfifoRecvCmd = pConfig->recv_command;
  9037e7:	8921      	l32i.n	a9, a2, 4
  9037e9:	1871c3        	l32r	a8, 8dfef8 <_bss_end+0x3d26f0>
  9037ec:	9980      	s32i.n	a9, a8, 0

	usbFifoConf.get_command_buf = pConfig->get_command_buf;
  9037ee:	1871c4        	l32r	a8, 8dff00 <_bss_end+0x3d26f8>
  9037f1:	8920      	l32i.n	a9, a2, 0
  9037f3:	9980      	s32i.n	a9, a8, 0
	usbFifoConf.recv_command    = _fw_usbfifo_recv_command;
  9037f5:	1971c5        	l32r	a9, 8dff0c <_bss_end+0x3d2704>
  9037f8:	9981      	s32i.n	a9, a8, 4
	usbFifoConf.get_event_buf   = pConfig->get_event_buf;
  9037fa:	8922      	l32i.n	a9, a2, 8
	usbFifoConf.send_event_done = pConfig->send_event_done;
  9037fc:	8223      	l32i.n	a2, a2, 12
{
	m_origUsbfifoRecvCmd = pConfig->recv_command;

	usbFifoConf.get_command_buf = pConfig->get_command_buf;
	usbFifoConf.recv_command    = _fw_usbfifo_recv_command;
	usbFifoConf.get_event_buf   = pConfig->get_event_buf;
  9037fe:	9982      	s32i.n	a9, a8, 8
	usbFifoConf.send_event_done = pConfig->send_event_done;
  903800:	9283      	s32i.n	a2, a8, 12
  903802:	d10f      	retw.n

00903804 <cold_reboot>:
}

void cold_reboot(void)
{
  903804:	6c1004        	entry	a1, 32
	A_PRINTF("Cold reboot initiated.");
  903807:	127182        	l32r	a2, 8dfe10 <_bss_end+0x3d2608>
  90380a:	1a71c6        	l32r	a10, 8dff24 <_bss_end+0x3d271c>
  90380d:	282212        	l32i	a8, a2, 72
  903810:	0b8000        	callx8	a8
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  903813:	187187        	l32r	a8, 8dfe30 <_bss_end+0x3d2628>
  903816:	c090      	movi.n	a9, 0
#if defined(PROJECT_MAGPIE)
	iowrite32(WATCH_DOG_MAGIC_PATTERN_ADDR, 0);
#elif defined(PROJECT_K2)
	iowrite32(MAGPIE_REG_RST_STATUS_ADDR, 0);
#endif /* #if defined(PROJECT_MAGPIE) */
	A_USB_JUMP_BOOT();
  903818:	22222b        	l32i	a2, a2, 172
  90381b:	0c0200        	memw
  90381e:	298600        	s32i	a9, a8, 0
  903821:	0b2000        	callx8	a2
  903824:	d10f      	retw.n
	...

00903828 <usb_status_in_patch>:

/*
 * support more than 64 bytes command on ep3
 */
void usb_status_in_patch(void)
{
  903828:	6c1004        	entry	a1, 32
	static VBUF *evntbuf = NULL;
	static volatile uint32_t *regaddr;
	static BOOLEAN cmd_is_new = TRUE;
	BOOLEAN cmd_end = FALSE;

	if (cmd_is_new) {
  90382b:	1271c7        	l32r	a2, 8dff48 <_bss_end+0x3d2740>
  90382e:	282100        	l16ui	a8, a2, 0
  903831:	648048        	beqz	a8, 90387d <usb_status_in_patch+0x55>
		evntbuf = usbFifoConf.get_event_buf();
  903834:	1871c4        	l32r	a8, 8dff44 <_bss_end+0x3d273c>
  903837:	8a82      	l32i.n	a10, a8, 8
  903839:	0ba000        	callx8	a10
  90383c:	1871c8        	l32r	a8, 8dff5c <_bss_end+0x3d2754>
  90383f:	9a80      	s32i.n	a10, a8, 0
		if (evntbuf != NULL) {
  903841:	c9af      	beqz.n	a10, 903864 <usb_status_in_patch+0x3c>
			regaddr = (uint32_t *)VBUF_GET_DATA_ADDR(evntbuf);
  903843:	88a0      	l32i.n	a8, a10, 0
  903845:	298105        	l16ui	a9, a8, 10
  903848:	8881      	l32i.n	a8, a8, 4
  90384a:	a989      	add.n	a9, a8, a9
  90384c:	1871c9        	l32r	a8, 8dff70 <_bss_end+0x3d2768>
  90384f:	9980      	s32i.n	a9, a8, 0
			buf_len = evntbuf->buf_length;
  903851:	1871ca        	l32r	a8, 8dff7c <_bss_end+0x3d2774>
  903854:	29a104        	l16ui	a9, a10, 8
  903857:	298500        	s16i	a9, a8, 0
		} else {
			mUSB_STATUS_IN_INT_DISABLE();
			return;
		}

		cmd_is_new = FALSE;
  90385a:	c080      	movi.n	a8, 0
  90385c:	282500        	s16i	a8, a2, 0
  90385f:	60001a        	j	90387d <usb_status_in_patch+0x55>
  903862:	000012        	srai	a0, a0, 0

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  903865:	71cb29        	bgeu	a12, a1, 903892 <usb_status_in_patch+0x6a>
		evntbuf = usbFifoConf.get_event_buf();
		if (evntbuf != NULL) {
			regaddr = (uint32_t *)VBUF_GET_DATA_ADDR(evntbuf);
			buf_len = evntbuf->buf_length;
		} else {
			mUSB_STATUS_IN_INT_DISABLE();
  903868:	0ac028        	mull	a0, a12, a10
  90386b:	200008        	l8ui	a0, a0, 8
  90386e:	084709        	addx2	a7, a4, a8
  903871:	8802      	l32i.n	a8, a0, 8
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  903873:	0c0200        	memw
  903876:	282400        	s8i	a8, a2, 0
  903879:	d10f      	retw.n
  90387b:	00001a        	sll	a0, a0
		}

		cmd_is_new = FALSE;
	}

	if (buf_len > USB_EP3_MAX_PKT_SIZE) {
  90387e:	71cac4        	bge	a12, a1, 903846 <usb_status_in_patch+0x1e>
  903881:	9028      	s32i.n	a0, a2, 32
  903883:	a100      	add.n	a0, a0, a1
	}
	/* TODO: 64 bytes...
	 * controller supposed will take care of zero-length? */
	else {
		reg_buf_len = buf_len;
		cmd_end = TRUE;
  903885:	c021      	movi.n	a2, 1
		}

		cmd_is_new = FALSE;
	}

	if (buf_len > USB_EP3_MAX_PKT_SIZE) {
  903887:	789b09        	bgeu	a9, a8, 903894 <usb_status_in_patch+0x6c>
		reg_buf_len = USB_EP3_MAX_PKT_SIZE;
		buf_len -= USB_EP3_MAX_PKT_SIZE;
  90388a:	288cc0        	addi	a8, a8, -64
  90388d:	28a500        	s16i	a8, a10, 0
	uint16_t reg_buf_len;
	static uint16_t buf_len;
	static VBUF *evntbuf = NULL;
	static volatile uint32_t *regaddr;
	static BOOLEAN cmd_is_new = TRUE;
	BOOLEAN cmd_end = FALSE;
  903890:	c020      	movi.n	a2, 0

		cmd_is_new = FALSE;
	}

	if (buf_len > USB_EP3_MAX_PKT_SIZE) {
		reg_buf_len = USB_EP3_MAX_PKT_SIZE;
  903892:	d890      	mov.n	a8, a9
  903894:	1971c9        	l32r	a9, 8dffb8 <_bss_end+0x3d27b0>
		reg_buf_len = buf_len;
		cmd_end = TRUE;
	}

	/* INT use EP3 */
	for (count = 0; count < (reg_buf_len / 4); count++)
  903897:	082c14        	srli	a12, a8, 2
  90389a:	8b90      	l32i.n	a11, a9, 0
  90389c:	1e71cc        	l32r	a14, 8dffcc <_bss_end+0x3d27c4>
  90389f:	dab0      	mov.n	a10, a11
  9038a1:	c090      	movi.n	a9, 0
  9038a3:	600010        	j	9038b7 <usb_status_in_patch+0x8f>
  9038a6:	00000c        	sub	a0, a0, a0
	{
		iowrite32_usb(ZM_EP3_DATA_OFFSET, *regaddr);
  9038a9:	02008d        	excw
  9038ac:	d0b1      	excw
		reg_buf_len = buf_len;
		cmd_end = TRUE;
	}

	/* INT use EP3 */
	for (count = 0; count < (reg_buf_len / 4); count++)
  9038ae:	990c      	s32i.n	a9, a0, 48
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9038b0:	02009d        	excw
  9038b3:	e0          	.byte 0xe0
  9038b4:	09094f        	extui	a9, a9, 0, 16
  9038b7:	dda0      	mov.n	a13, a10
  9038b9:	b4aa      	addi.n	a10, a10, 4
  9038bb:	7c99e9        	bne	a9, a12, 9038a8 <usb_status_in_patch+0x80>
  9038be:	1a71c9        	l32r	a10, 8dffe4 <_bss_end+0x3d27dc>
  9038c1:	0b990a        	addx4	a9, a9, a11
  9038c4:	99a0      	s32i.n	a9, a10, 0
	{
		iowrite32_usb(ZM_EP3_DATA_OFFSET, *regaddr);
		regaddr++;
	}

	remainder = reg_buf_len % 4;
  9038c6:	080841        	extui	a8, a8, 0, 2

	if (remainder) {
  9038c9:	cb84      	beqz.n	a8, 903901 <usb_status_in_patch+0xd9>
  9038cb:	1971aa        	l32r	a9, 8dff74 <_bss_end+0x3d276c>
		switch(remainder) {
  9038ce:	688207        	beqi	a8, 2, 9038d9 <usb_status_in_patch+0xb1>
  9038d1:	698309        	bnei	a8, 3, 9038de <usb_status_in_patch+0xb6>
  9038d4:	c087      	movi.n	a8, 7
  9038d6:	600006        	j	9038e0 <usb_status_in_patch+0xb8>
  9038d9:	c083      	movi.n	a8, 3
  9038db:	600001        	j	9038e0 <usb_status_in_patch+0xb8>
  9038de:	c081      	movi.n	a8, 1
  9038e0:	0c0200        	memw
  9038e3:	9890      	s32i.n	a8, a9, 0
		case 1:
			iowrite32_usb(ZM_CBUS_FIFO_SIZE_OFFSET, 0x1);
			break;
		}

		iowrite32_usb(ZM_EP3_DATA_OFFSET, *regaddr);
  9038e5:	1871c9        	l32r	a8, 8e000c <_bss_end+0x3d2804>
  9038e8:	8880      	l32i.n	a8, a8, 0
  9038ea:	0c0200        	memw
  9038ed:	8980      	l32i.n	a9, a8, 0
  9038ef:	1871cc        	l32r	a8, 8e0020 <_bss_end+0x3d2818>
  9038f2:	0c0200        	memw
  9038f5:	9980      	s32i.n	a9, a8, 0
  9038f7:	1871aa        	l32r	a8, 8dffa0 <_bss_end+0x3d2798>
  9038fa:	c09f      	movi.n	a9, 15
  9038fc:	0c0200        	memw
  9038ff:	9980      	s32i.n	a9, a8, 0

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  903901:	1871cd        	l32r	a8, 8e0038 <_bss_end+0x3d2830>

		/* Restore CBus FIFO size to word size */
		iowrite32_usb(ZM_CBUS_FIFO_SIZE_OFFSET, 0xF);
	}

	mUSB_EP3_XFER_DONE();
  903904:	c0a8      	movi.n	a10, 8
  903906:	298000        	l8ui	a9, a8, 0
  903909:	090947        	extui	a9, a9, 0, 8
  90390c:	0a9902        	or	a9, a9, a10
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  90390f:	0c0200        	memw
  903912:	298400        	s8i	a9, a8, 0

	if (evntbuf != NULL && cmd_end) {
  903915:	1871c8        	l32r	a8, 8e0038 <_bss_end+0x3d2830>
  903918:	8a80      	l32i.n	a10, a8, 0
  90391a:	c9a2      	beqz.n	a10, 903930 <usb_status_in_patch+0x108>
  90391c:	642010        	beqz	a2, 903930 <usb_status_in_patch+0x108>
		usbFifoConf.send_event_done(evntbuf);
  90391f:	1271c4        	l32r	a2, 8e0030 <_bss_end+0x3d2828>
  903922:	222203        	l32i	a2, a2, 12
  903925:	0b2000        	callx8	a2
		cmd_is_new = TRUE;
  903928:	1271c7        	l32r	a2, 8e0044 <_bss_end+0x3d283c>
  90392b:	c081      	movi.n	a8, 1
  90392d:	282500        	s16i	a8, a2, 0
  903930:	d10f      	retw.n
	...

00903934 <usb_reg_out_patch>:

/*
 * support more than 64 bytes command on ep4 
 */
void usb_reg_out_patch(void)
{
  903934:	6c1004        	entry	a1, 32

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  903937:	1271ce        	l32r	a2, 8e0070 <_bss_end+0x3d2868>
	static BOOLEAN cmd_is_new = TRUE;

	/* get the size of this transcation */
	usbfifolen = ioread8_usb(ZM_EP4_BYTE_COUNT_LOW_OFFSET);

	if (usbfifolen > USB_EP4_MAX_PKT_SIZE) {
  90393a:	230a40        	movi	a3, 64
  90393d:	222000        	l8ui	a2, a2, 0
  903940:	020247        	extui	a2, a2, 0, 8
  903943:	723b11        	bgeu	a3, a2, 903958 <usb_reg_out_patch+0x24>
		A_PRINTF("EP4 FIFO Bug? Buffer is too big: %x\n", usbfifolen);
  903946:	137182        	l32r	a3, 8dff50 <_bss_end+0x3d2748>
  903949:	1a71cf        	l32r	a10, 8e0088 <_bss_end+0x3d2880>
  90394c:	233212        	l32i	a3, a3, 72
  90394f:	022b02        	or	a11, a2, a2
  903952:	0b3000        	callx8	a3
		cold_reboot();
  903955:	5bffab        	call8	903804 <cold_reboot>
	}

	/* check is command is new */
	if(cmd_is_new) {
  903958:	1371d0        	l32r	a3, 8e0098 <_bss_end+0x3d2890>
  90395b:	243100        	l16ui	a4, a3, 0
  90395e:	cb4a      	beqz.n	a4, 90399c <usb_reg_out_patch+0x68>

		buf = usbFifoConf.get_command_buf();
  903960:	1471c4        	l32r	a4, 8e0070 <_bss_end+0x3d2868>
  903963:	8a40      	l32i.n	a10, a4, 0
  903965:	0ba000        	callx8	a10
  903968:	1471d1        	l32r	a4, 8e00ac <_bss_end+0x3d28a4>
		cmd_len = 0;
  90396b:	c080      	movi.n	a8, 0
	}

	/* check is command is new */
	if(cmd_is_new) {

		buf = usbFifoConf.get_command_buf();
  90396d:	9a40      	s32i.n	a10, a4, 0
		cmd_len = 0;
  90396f:	1471d2        	l32r	a4, 8e00b8 <_bss_end+0x3d28b0>
  903972:	284500        	s16i	a8, a4, 0

		if(!buf) {
  903975:	cda5      	bnez.n	a10, 90398e <usb_reg_out_patch+0x5a>
			A_PRINTF("%s: Filed to get new buffer.\n", __func__);
  903977:	137182        	l32r	a3, 8dff80 <_bss_end+0x3d2778>
  90397a:	1a71d3        	l32r	a10, 8e00c8 <_bss_end+0x3d28c0>
  90397d:	233212        	l32i	a3, a3, 72
  903980:	1b71d4        	l32r	a11, 8e00d0 <_bss_end+0x3d28c8>
  903983:	0b3000        	callx8	a3
		usbfifolen = (usbfifolen >> 2) + 1;
	else
		usbfifolen = usbfifolen >> 2;

	/* retrieve the data from fifo */
	for(ii = 0; ii < usbfifolen; ii++) {
  903986:	c080      	movi.n	a8, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  903988:	1371d7        	l32r	a3, 8e00e4 <_bss_end+0x3d28dc>
  90398b:	6000a7        	j	903a36 <usb_reg_out_patch+0x102>
			A_PRINTF("%s: Filed to get new buffer.\n", __func__);
			goto err;
		}

		/* copy free, assignment buffer of the address */
		regaddr = (uint32_t *)buf->desc_list->buf_addr;
  90398e:	84a0      	l32i.n	a4, a10, 0

		cmd_is_new = FALSE;
  903990:	283500        	s16i	a8, a3, 0
			A_PRINTF("%s: Filed to get new buffer.\n", __func__);
			goto err;
		}

		/* copy free, assignment buffer of the address */
		regaddr = (uint32_t *)buf->desc_list->buf_addr;
  903993:	294201        	l32i	a9, a4, 4
  903996:	1471d5        	l32r	a4, 8e00ec <_bss_end+0x3d28e4>
  903999:	294600        	s32i	a9, a4, 0

		cmd_is_new = FALSE;
	}

	/* just in case, suppose should not happen */
	if(!buf)
  90399c:	1371d1        	l32r	a3, 8e00e0 <_bss_end+0x3d28d8>
  90399f:	8a30      	l32i.n	a10, a3, 0
  9039a1:	64afe1        	beqz	a10, 903986 <usb_reg_out_patch+0x52>
	 */
	if(usbfifolen < USB_EP4_MAX_PKT_SIZE)
		cmd_is_last = TRUE;

	/* accumulate the size */
	cmd_len += usbfifolen;
  9039a4:	1371d2        	l32r	a3, 8e00ec <_bss_end+0x3d28e4>

	if (cmd_len > buf->desc_list->buf_size) {
  9039a7:	88a0      	l32i.n	a8, a10, 0
	 */
	if(usbfifolen < USB_EP4_MAX_PKT_SIZE)
		cmd_is_last = TRUE;

	/* accumulate the size */
	cmd_len += usbfifolen;
  9039a9:	293100        	l16ui	a9, a3, 0
  9039ac:	a929      	add.n	a9, a2, a9
  9039ae:	09094f        	extui	a9, a9, 0, 16
  9039b1:	293500        	s16i	a9, a3, 0

	if (cmd_len > buf->desc_list->buf_size) {
  9039b4:	238104        	l16ui	a3, a8, 8
  9039b7:	793b0b        	bgeu	a3, a9, 9039c6 <usb_reg_out_patch+0x92>
		A_PRINTF("%s: Data length on EP4 FIFO is bigger as "
  9039ba:	137182        	l32r	a3, 8dffc4 <_bss_end+0x3d27bc>
  9039bd:	1a71d6        	l32r	a10, 8e0118 <_bss_end+0x3d2910>
  9039c0:	233212        	l32i	a3, a3, 72
  9039c3:	63ffb9        	j	903980 <usb_reg_out_patch+0x4c>
		goto err;
	}

	/* round it to alignment */
	if(usbfifolen % 4)
		usbfifolen = (usbfifolen >> 2) + 1;
  9039c6:	c031      	movi.n	a3, 1
			 "allocated buffer data! Drop it!\n", __func__);
		goto err;
	}

	/* round it to alignment */
	if(usbfifolen % 4)
  9039c8:	020441        	extui	a4, a2, 0, 2
		usbfifolen = (usbfifolen >> 2) + 1;
  9039cb:	c0b0      	movi.n	a11, 0
  9039cd:	043b39        	movnez	a11, a3, a4
  9039d0:	1371d5        	l32r	a3, 8e0124 <_bss_end+0x3d291c>
	else
		usbfifolen = usbfifolen >> 2;
  9039d3:	022c14        	srli	a12, a2, 2
  9039d6:	8330      	l32i.n	a3, a3, 0
		goto err;
	}

	/* round it to alignment */
	if(usbfifolen % 4)
		usbfifolen = (usbfifolen >> 2) + 1;
  9039d8:	abcc      	add.n	a12, a12, a11
  9039da:	dd30      	mov.n	a13, a3
	else
		usbfifolen = usbfifolen >> 2;

	/* retrieve the data from fifo */
	for(ii = 0; ii < usbfifolen; ii++) {
  9039dc:	c0b0      	movi.n	a11, 0
  9039de:	1f71d7        	l32r	a15, 8e013c <_bss_end+0x3d2934>
  9039e1:	60000f        	j	9039f4 <usb_reg_out_patch+0xc0>
  9039e4:	000c02        	or	a12, a0, a0
  9039e7:	0084f0        	excw
  9039ea:	b1bb      	addi.n	a11, a11, 1
		/* read fifo data out */
		ep4_data = ioread32_usb(ZM_EP4_DATA_OFFSET);
		*regaddr = ep4_data;
  9039ec:	0c0200        	memw
  9039ef:	94e0      	s32i.n	a4, a14, 0
		usbfifolen = (usbfifolen >> 2) + 1;
	else
		usbfifolen = usbfifolen >> 2;

	/* retrieve the data from fifo */
	for(ii = 0; ii < usbfifolen; ii++) {
  9039f1:	0b0b4f        	extui	a11, a11, 0, 16
  9039f4:	ded0      	mov.n	a14, a13
  9039f6:	b4dd      	addi.n	a13, a13, 4
  9039f8:	7cb9e9        	bne	a11, a12, 9039e5 <usb_reg_out_patch+0xb1>
  9039fb:	1c71d5        	l32r	a12, 8e0150 <_bss_end+0x3d2948>
  9039fe:	03bb0a        	addx4	a11, a11, a3
  903a01:	9bc0      	s32i.n	a11, a12, 0
		*regaddr = ep4_data;
		regaddr++;
	}

	/* if this is the last command, callback to HTC */
	if (cmd_is_last) {
  903a03:	c33f      	movi.n	a3, 63
  903a05:	723330        	bltu	a3, a2, 903a39 <usb_reg_out_patch+0x105>
		buf->desc_list->next_desc = NULL;
  903a08:	c020      	movi.n	a2, 0
  903a0a:	9280      	s32i.n	a2, a8, 0
		buf->desc_list->data_offset = 0;
  903a0c:	228505        	s16i	a2, a8, 10
		buf->desc_list->data_size = cmd_len;
		buf->desc_list->control = 0;
  903a0f:	228507        	s16i	a2, a8, 14

	/* if this is the last command, callback to HTC */
	if (cmd_is_last) {
		buf->desc_list->next_desc = NULL;
		buf->desc_list->data_offset = 0;
		buf->desc_list->data_size = cmd_len;
  903a12:	298506        	s16i	a9, a8, 12
		buf->desc_list->control = 0;
		buf->next_buf = NULL;
  903a15:	92a1      	s32i.n	a2, a10, 4
		buf->buf_length = cmd_len;

		usbFifoConf.recv_command(buf);
  903a17:	1271c4        	l32r	a2, 8e0128 <_bss_end+0x3d2920>
		buf->desc_list->next_desc = NULL;
		buf->desc_list->data_offset = 0;
		buf->desc_list->data_size = cmd_len;
		buf->desc_list->control = 0;
		buf->next_buf = NULL;
		buf->buf_length = cmd_len;
  903a1a:	29a504        	s16i	a9, a10, 8

		usbFifoConf.recv_command(buf);
  903a1d:	8221      	l32i.n	a2, a2, 4

		cmd_is_new = TRUE;
  903a1f:	c031      	movi.n	a3, 1
		buf->desc_list->data_size = cmd_len;
		buf->desc_list->control = 0;
		buf->next_buf = NULL;
		buf->buf_length = cmd_len;

		usbFifoConf.recv_command(buf);
  903a21:	0b2000        	callx8	a2

		cmd_is_new = TRUE;
  903a24:	1271d0        	l32r	a2, 8e0164 <_bss_end+0x3d295c>
  903a27:	232500        	s16i	a3, a2, 0
  903a2a:	d10f      	retw.n
	goto done;
err:
	/* we might get no command buffer here?
	 * but if we return here, the ep4 fifo will be lock out,
	 * so that we still read them out but just drop it? */
	for(ii = 0; ii < usbfifolen; ii++)
  903a2c:	b188      	addi.n	a8, a8, 1
  903a2e:	0c0200        	memw
  903a31:	8430      	l32i.n	a4, a3, 0
  903a33:	08084f        	extui	a8, a8, 0, 16
  903a36:	7283f2        	bltu	a8, a2, 903a2c <usb_reg_out_patch+0xf8>
  903a39:	d10f      	retw.n
	...

00903a3c <vUSBFIFO_EP6Cfg_FS_patch>:
#define FS_C1_I0_A0_EP6_MAP		\
	 (FS_C1_I0_A0_EP6_FIFO_START | (FS_C1_I0_A0_EP6_FIFO_START << 4) | \
	  (MASK_F0 >> (4*FS_C1_I0_A0_EP6_DIRECTION)))

void vUSBFIFO_EP6Cfg_FS_patch(void)
{
  903a3c:	6c1004        	entry	a1, 32
#if (FS_C1_I0_A0_EP_NUMBER >= 6)
	int i;

	/* EP0X06 */
	mUsbEPMap(EP6, FS_C1_I0_A0_EP6_MAP);
  903a3f:	2b0a6f        	movi	a11, 111
  903a42:	2a0a06        	movi	a10, 6
  903a45:	5b8088        	call8	8e3c68 <mUsbEPMap>
	mUsbFIFOMap(FS_C1_I0_A0_EP6_FIFO_START, FS_C1_I0_A0_EP6_FIFO_MAP);
  903a48:	2a0a06        	movi	a10, 6
  903a4b:	0aab02        	or	a11, a10, a10
  903a4e:	5b808d        	call8	8e3c84 <mUsbFIFOMap>
	mUsbFIFOConfig(FS_C1_I0_A0_EP6_FIFO_START, FS_C1_I0_A0_EP6_FIFO_CONFIG);
  903a51:	2b0a86        	movi	a11, 134
  903a54:	c0a6      	movi.n	a10, 6
  903a56:	5b8093        	call8	8e3ca4 <mUsbFIFOConfig>

	for(i = FS_C1_I0_A0_EP6_FIFO_START + 1 ;
            i < FS_C1_I0_A0_EP6_FIFO_START + FS_C1_I0_A0_EP6_FIFO_NO ; i ++)
	{
		mUsbFIFOConfig(i, (FS_C1_I0_A0_EP6_FIFO_CONFIG & (~BIT7)) );
  903a59:	c0b6      	movi.n	a11, 6
  903a5b:	c0a7      	movi.n	a10, 7
  903a5d:	5b8091        	call8	8e3ca4 <mUsbFIFOConfig>
	}

	mUsbEPMxPtSzHigh(EP6, FS_C1_I0_A0_EP6_DIRECTION,
  903a60:	c0b1      	movi.n	a11, 1
  903a62:	c4c0      	movi.n	a12, 64
  903a64:	c0a6      	movi.n	a10, 6
  903a66:	5b8097        	call8	8e3cc4 <mUsbEPMxPtSzHigh>
			 (FS_C1_I0_A0_EP6_MAX_PACKET & 0x7ff));
	mUsbEPMxPtSzLow(EP6, FS_C1_I0_A0_EP6_DIRECTION,
  903a69:	c0b1      	movi.n	a11, 1
  903a6b:	c4c0      	movi.n	a12, 64
  903a6d:	c0a6      	movi.n	a10, 6
  903a6f:	5b809f        	call8	8e3cec <mUsbEPMxPtSzLow>
			(FS_C1_I0_A0_EP6_MAX_PACKET & 0x7ff));
	mUsbEPinHighBandSet(EP6, FS_C1_I0_A0_EP6_DIRECTION,
  903a72:	c0b1      	movi.n	a11, 1
  903a74:	c4c0      	movi.n	a12, 64
  903a76:	2a0a06        	movi	a10, 6
  903a79:	5b80a5        	call8	8e3d10 <mUsbEPinHighBandSet>
  903a7c:	d10f      	retw.n
	...

00903a80 <vUsbFIFO_EPxCfg_FS_patch>:
			    FS_C1_I0_A0_EP6_MAX_PACKET);
#endif
}

void vUsbFIFO_EPxCfg_FS_patch(void)
{
  903a80:	6c1004        	entry	a1, 32
	switch (u8UsbConfigValue)
  903a83:	187185        	l32r	a8, 8e0098 <_bss_end+0x3d2890>
  903a86:	288100        	l16ui	a8, a8, 0
  903a89:	698113        	bnei	a8, 1, 903aa0 <vUsbFIFO_EPxCfg_FS_patch+0x20>
	{
#if (FS_CONFIGURATION_NUMBER >= 1)
		/* Configuration 0X01 */
        case 0X01:
		switch (u8UsbInterfaceValue)
  903a8c:	187184        	l32r	a8, 8e009c <_bss_end+0x3d2894>
  903a8f:	288100        	l16ui	a8, a8, 0
  903a92:	cc8a      	bnez.n	a8, 903aa0 <vUsbFIFO_EPxCfg_FS_patch+0x20>
		{
#if (FS_C1_INTERFACE_NUMBER >= 1)
			/* Interface 0 */
                case 0:
			switch (u8UsbInterfaceAlternateSetting)
  903a94:	187186        	l32r	a8, 8e00ac <_bss_end+0x3d28a4>
  903a97:	288100        	l16ui	a8, a8, 0
  903a9a:	658002        	bnez	a8, 903aa0 <vUsbFIFO_EPxCfg_FS_patch+0x20>
                        case 0:

				/* snapped.... */

				/* patch up this ep6_fs config */
				vUSBFIFO_EP6Cfg_FS_patch();
  903a9d:	5bffe7        	call8	903a3c <vUSBFIFO_EP6Cfg_FS_patch>
  903aa0:	d10f      	retw.n
	...

00903aa4 <bSet_configuration_patch>:
	}
	/* mCHECK_STACK(); */
}

BOOLEAN bSet_configuration_patch(void)
{
  903aa4:	6c1004        	entry	a1, 32
	/* do some defaul configuration */
	bSet_configuration();
  903aa7:	5b7d35        	call8	8e2f7c <bSet_configuration>

	/* overwrite defaul FIFO configuration for FullSpeed USB */
	if ((mLOW_BYTE(mDEV_REQ_VALUE()) != 0) && !mUsbHighSpeedST())
  903aaa:	1271d8        	l32r	a2, 8e020c <_bss_end+0x3d2a04>
  903aad:	222007        	l8ui	a2, a2, 7
  903ab0:	c82a      	beqz.n	a2, 903abe <bSet_configuration_patch+0x1a>

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  903ab2:	1271a4        	l32r	a2, 8e0144 <_bss_end+0x3d293c>
  903ab5:	222000        	l8ui	a2, a2, 0
  903ab8:	792f02        	bbsi	a2, 25, 903abe <bSet_configuration_patch+0x1a>
			vUsbFIFO_EPxCfg_FS_patch();
  903abb:	5bfff1        	call8	903a80 <vUsbFIFO_EPxCfg_FS_patch>

	eUsbCxFinishAction = ACT_DONE;
  903abe:	1871d9        	l32r	a8, 8e0224 <_bss_end+0x3d2a1c>
  903ac1:	c021      	movi.n	a2, 1
  903ac3:	9280      	s32i.n	a2, a8, 0
	return TRUE;
}
  903ac5:	d10f      	retw.n
	...

00903ac8 <bStandardCommand_patch>:

extern BOOLEAN bStandardCommand(void);

BOOLEAN bStandardCommand_patch(void)
{
  903ac8:	6c1004        	entry	a1, 32
	if (mDEV_REQ_REQ() == USB_SET_CONFIGURATION) {
  903acb:	1871d8        	l32r	a8, 8e022c <_bss_end+0x3d2a24>
  903ace:	298102        	l16ui	a9, a8, 4
  903ad1:	280a09        	movi	a8, 9
  903ad4:	78992d        	bne	a9, a8, 903b05 <bStandardCommand_patch+0x3d>
		A_USB_SET_CONFIG();
  903ad7:	187182        	l32r	a8, 8e00e0 <_bss_end+0x3d28d8>
  903ada:	2a8225        	l32i	a10, a8, 148
  903add:	0ba000        	callx8	a10

#if ENABLE_SWAP_DATA_MODE
		/* SWAP FUNCTION should be enabled while DMA engine
		 * is not working, the best place to enable it
		 * is before we trigger the DMA */
		MAGPIE_REG_USB_RX0_SWAP_DATA = 0x1;
  903ae0:	1871da        	l32r	a8, 8e0248 <_bss_end+0x3d2a40>
  903ae3:	c0a1      	movi.n	a10, 1
  903ae5:	0c0200        	memw
  903ae8:	9a80      	s32i.n	a10, a8, 0
		MAGPIE_REG_USB_TX0_SWAP_DATA = 0x1;
  903aea:	1871db        	l32r	a8, 8e0258 <_bss_end+0x3d2a50>
  903aed:	0c0200        	memw
  903af0:	9a80      	s32i.n	a10, a8, 0

#if SYSTEM_MODULE_HP_EP5
		MAGPIE_REG_USB_RX1_SWAP_DATA = 0x1;
  903af2:	1871dc        	l32r	a8, 8e0264 <_bss_end+0x3d2a5c>
  903af5:	0c0200        	memw
  903af8:	9a80      	s32i.n	a10, a8, 0
#endif

#if SYSTEM_MODULE_HP_EP6
		MAGPIE_REG_USB_RX2_SWAP_DATA = 0x1;
  903afa:	1871dd        	l32r	a8, 8e0270 <_bss_end+0x3d2a68>
  903afd:	0c0200        	memw
  903b00:	9a80      	s32i.n	a10, a8, 0
#endif

#endif /* ENABLE_SWAP_DATA_MODE */
		return TRUE;
  903b02:	600002        	j	903b08 <bStandardCommand_patch+0x40>
	} else
		return bStandardCommand();
  903b05:	5b7de1        	call8	8e328c <bStandardCommand>
}
  903b08:	d2a0      	mov.n	a2, a10
  903b0a:	d10f      	retw.n

00903b0c <bGet_descriptor_patch>:
#define EP3_INT_INTERVAL		19
#define EP4_TRANSFER_TYPE_OFFSET	21
#define EP4_INT_INTERVAL		22

BOOLEAN bGet_descriptor_patch(void)
{
  903b0c:	6c1004        	entry	a1, 32
	if (mDEV_REQ_VALUE_HIGH() == 1)
  903b0f:	1371d8        	l32r	a3, 8e0270 <_bss_end+0x3d2a68>
  903b12:	223103        	l16ui	a2, a3, 6
  903b15:	028214        	srli	a2, a2, 8
  903b18:	692120        	bnei	a2, 1, 903b3c <bGet_descriptor_patch+0x30>
	{
		uint8_t *p = (uint8_t *)u8UsbDeviceDescriptor;

		/* Copy Usb Device Descriptor */
		ath_hal_memcpy(UsbDeviceDescriptorPatch, p,
  903b1b:	1471df        	l32r	a4, 8e0298 <_bss_end+0x3d2a90>
  903b1e:	1271de        	l32r	a2, 8e0298 <_bss_end+0x3d2a90>
  903b21:	8b40      	l32i.n	a11, a4, 0
  903b23:	da20      	mov.n	a10, a2
  903b25:	c1c2      	movi.n	a12, 18
  903b27:	580034        	call8	903bf8 <ath_hal_memcpy>
				sizeof(UsbDeviceDescriptorPatch));

		/* Change bcdDevice. we need it to detect if FW
		 * was uploaded. */
		UsbDeviceDescriptorPatch[BCD_DEVICE_OFFSET] =
  903b2a:	c78f      	movi.n	a8, -1
  903b2c:	282506        	s16i	a8, a2, 12
			BCD_DEVICE_FW_SIGNATURE;

		pu8DescriptorEX = UsbDeviceDescriptorPatch;
  903b2f:	1871e0        	l32r	a8, 8e02b0 <_bss_end+0x3d2aa8>
  903b32:	9280      	s32i.n	a2, a8, 0
		u16TxRxCounter = mTABLE_LEN(u8UsbDeviceDescriptor[0]);
  903b34:	8240      	l32i.n	a2, a4, 0
  903b36:	242001        	l8ui	a4, a2, 1
  903b39:	600024        	j	903b61 <bGet_descriptor_patch+0x55>
			u16TxRxCounter = mDEV_REQ_LENGTH();

		A_USB_EP0_TX_DATA();

		return TRUE;
	} else if (mDEV_REQ_VALUE_HIGH() == 2) {
  903b3c:	69223d        	bnei	a2, 2, 903b7d <bGet_descriptor_patch+0x71>
		uint8_t *p = (uint8_t *)u8ConfigDescriptorEX;

		/* Copy ConfigDescriptor */
		ath_hal_memcpy(ConfigDescriptorPatch, p,
  903b3f:	1271e3        	l32r	a2, 8e02cc <_bss_end+0x3d2ac4>
  903b42:	1471e2        	l32r	a4, 8e02cc <_bss_end+0x3d2ac4>
  903b45:	2b2200        	l32i	a11, a2, 0
  903b48:	044a02        	or	a10, a4, a4
  903b4b:	2c0a3c        	movi	a12, 60
  903b4e:	58002a        	call8	903bf8 <ath_hal_memcpy>
				sizeof(ConfigDescriptorPatch));

		 /* place holder for EPx patches */

		if (mDEV_REQ_VALUE_LOW() == 0) {
  903b51:	283007        	l8ui	a8, a3, 7
			/* configuration no: 0 */
			pu8DescriptorEX = ConfigDescriptorPatch;
			u16TxRxCounter = ConfigDescriptorPatch[1];
		} else
			return FALSE;
  903b54:	c020      	movi.n	a2, 0
		ath_hal_memcpy(ConfigDescriptorPatch, p,
				sizeof(ConfigDescriptorPatch));

		 /* place holder for EPx patches */

		if (mDEV_REQ_VALUE_LOW() == 0) {
  903b56:	728928        	bne	a8, a2, 903b82 <bGet_descriptor_patch+0x76>
			/* configuration no: 0 */
			pu8DescriptorEX = ConfigDescriptorPatch;
  903b59:	1271e0        	l32r	a2, 8e02dc <_bss_end+0x3d2ad4>
  903b5c:	9420      	s32i.n	a4, a2, 0
			u16TxRxCounter = ConfigDescriptorPatch[1];
  903b5e:	244101        	l16ui	a4, a4, 2
  903b61:	1271e1        	l32r	a2, 8e02e8 <_bss_end+0x3d2ae0>
		} else
			return FALSE;

		if (u16TxRxCounter > mDEV_REQ_LENGTH())
  903b64:	233105        	l16ui	a3, a3, 10
		 /* place holder for EPx patches */

		if (mDEV_REQ_VALUE_LOW() == 0) {
			/* configuration no: 0 */
			pu8DescriptorEX = ConfigDescriptorPatch;
			u16TxRxCounter = ConfigDescriptorPatch[1];
  903b67:	242500        	s16i	a4, a2, 0
		} else
			return FALSE;

		if (u16TxRxCounter > mDEV_REQ_LENGTH())
  903b6a:	743b02        	bgeu	a3, a4, 903b70 <bGet_descriptor_patch+0x64>
			u16TxRxCounter = mDEV_REQ_LENGTH();
  903b6d:	232500        	s16i	a3, a2, 0

		A_USB_EP0_TX_DATA();
  903b70:	127182        	l32r	a2, 8e0178 <_bss_end+0x3d2970>
  903b73:	222234        	l32i	a2, a2, 208
  903b76:	0b2000        	callx8	a2
		return TRUE;
  903b79:	c021      	movi.n	a2, 1
  903b7b:	d10f      	retw.n
	} else
		return bGet_descriptor();
  903b7d:	5b7cd1        	call8	8e2ec4 <bGet_descriptor>
  903b80:	d2a0      	mov.n	a2, a10
}
  903b82:	d10f      	retw.n

00903b84 <ath_hal_getuptime>:
#include<ah_internal.h>
#include "ah_osdep.h"

a_uint32_t __ahdecl
ath_hal_getuptime(struct ath_hal *ah)
{
  903b84:	6c1004        	entry	a1, 32
	return MSEC_TO_TICK(msecs);
}
static inline unsigned long
__adf_os_getuptime(void)
{
    return MSEC_TO_TICK(A_MILLISECONDS());;      
  903b87:	187182        	l32r	a8, 8e0190 <_bss_end+0x3d2988>
  903b8a:	2a823d        	l32i	a10, a8, 244
  903b8d:	0ba000        	callx8	a10
	return adf_os_getuptime();
}
  903b90:	d2a0      	mov.n	a2, a10
  903b92:	d10f      	retw.n

00903b94 <_ath_hal_attach_tgt>:

struct ath_hal *
_ath_hal_attach_tgt(a_uint32_t devid, HAL_SOFTC sc,
		    adf_os_device_t dev, a_uint32_t flags, void* s)
{
  903b94:	6c1006        	entry	a1, 48
	HAL_STATUS status;
	struct ath_hal *ah = ath_hal_attach_tgt(devid, sc, dev, flags, &status);
  903b97:	db30      	mov.n	a11, a3
  903b99:	dc40      	mov.n	a12, a4
  903b9b:	dd50      	mov.n	a13, a5
  903b9d:	de10      	mov.n	a14, a1
  903b9f:	da20      	mov.n	a10, a2
  903ba1:	5804dd        	call8	904f18 <ath_hal_attach_tgt>
	adf_os_print(" ath_hal = %p \n",ah);
  903ba4:	187182        	l32r	a8, 8e01ac <_bss_end+0x3d29a4>
struct ath_hal *
_ath_hal_attach_tgt(a_uint32_t devid, HAL_SOFTC sc,
		    adf_os_device_t dev, a_uint32_t flags, void* s)
{
	HAL_STATUS status;
	struct ath_hal *ah = ath_hal_attach_tgt(devid, sc, dev, flags, &status);
  903ba7:	d2a0      	mov.n	a2, a10
	adf_os_print(" ath_hal = %p \n",ah);
  903ba9:	288212        	l32i	a8, a8, 72
  903bac:	1a71e4        	l32r	a10, 8e033c <_bss_end+0x3d2b34>
  903baf:	db20      	mov.n	a11, a2
  903bb1:	0b8000        	callx8	a8
	*(HAL_STATUS *)s = status;
  903bb4:	8810      	l32i.n	a8, a1, 0
  903bb6:	9860      	s32i.n	a8, a6, 0
	return ah;
}
  903bb8:	d10f      	retw.n
	...

00903bbc <ath_hal_delay>:
/*
 * Delay n microseconds.
 */
void __ahdecl
ath_hal_delay(a_int32_t n)
{
  903bbc:	6c1004        	entry	a1, 32
}

static inline void
__adf_os_udelay(int usecs)
{
    A_DELAY_USECS(usecs);
  903bbf:	187182        	l32r	a8, 8e01c8 <_bss_end+0x3d29c0>
  903bc2:	da20      	mov.n	a10, a2
  903bc4:	28823a        	l32i	a8, a8, 232
  903bc7:	0b8000        	callx8	a8
  903bca:	d10f      	retw.n

00903bcc <ath_hal_malloc>:
/*
 * Allocate/free memory.
 */
void * __ahdecl
ath_hal_malloc(adf_os_size_t size)
{
  903bcc:	6c1004        	entry	a1, 32
  903bcf:	147182        	l32r	a4, 8e01d8 <_bss_end+0x3d29d0>
  903bd2:	d320      	mov.n	a3, a2
  903bd4:	224252        	l32i	a2, a4, 0x148
  903bd7:	c0a0      	movi.n	a10, 0
  903bd9:	db30      	mov.n	a11, a3
  903bdb:	0b2000        	callx8	a2
  903bde:	d2a0      	mov.n	a2, a10
	void *p;

	p = adf_os_mem_alloc(size);
	if (p)
  903be0:	c8a8      	beqz.n	a10, 903bec <ath_hal_malloc+0x20>
}
/* zero a memory buffer */
static inline void
__adf_os_mem_zero(void *buf, adf_os_size_t size)
{
    A_MEMZERO(buf,size);
  903be2:	8444      	l32i.n	a4, a4, 16
  903be4:	c0b0      	movi.n	a11, 0
  903be6:	033c02        	or	a12, a3, a3
  903be9:	0b4000        	callx8	a4
		adf_os_mem_zero(p, size);

	return p;
}
  903bec:	d10f      	retw.n
	...

00903bf0 <ath_hal_free>:

void __ahdecl
ath_hal_free(void* p)
{
  903bf0:	6c1004        	entry	a1, 32
  903bf3:	d10f      	retw.n
  903bf5:	000000        	ill

00903bf8 <ath_hal_memcpy>:
	adf_os_mem_free(p);
}

void * __ahdecl
ath_hal_memcpy(void *dst, const void *src, adf_os_size_t n)
{
  903bf8:	6c1004        	entry	a1, 32
}

/* move a memory buffer */
static inline void 		__adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    A_MEMCPY(dst,src,size);    
  903bfb:	187182        	l32r	a8, 8e0204 <_bss_end+0x3d29fc>
  903bfe:	da20      	mov.n	a10, a2
  903c00:	8885      	l32i.n	a8, a8, 20
  903c02:	db30      	mov.n	a11, a3
  903c04:	dc40      	mov.n	a12, a4
  903c06:	0b8000        	callx8	a8
	adf_os_mem_copy(dst, src, n);
	return 0;
}
  903c09:	c020      	movi.n	a2, 0
  903c0b:	d10f      	retw.n
  903c0d:	000000        	ill

00903c10 <wlan_pci_module_init>:
adf_drv_info_t* g_wlan_drv = NULL;
adf_drv_handle_t g_wlan_drv_handle = NULL;
adf_os_drv_intr g_wlan_intr = NULL;

void wlan_pci_module_init(void)
{
  903c10:	6c1004        	entry	a1, 32
	if (g_pci_init_func != NULL) {
  903c13:	1871e5        	l32r	a8, 8e03a8 <_bss_end+0x3d2ba0>
  903c16:	8a80      	l32i.n	a10, a8, 0
  903c18:	c8a1      	beqz.n	a10, 903c1d <wlan_pci_module_init+0xd>
		g_pci_init_func();
  903c1a:	0ba000        	callx8	a10
  903c1d:	d10f      	retw.n
	...

00903c20 <wlan_pci_register_drv>:
	}
}

void wlan_pci_register_drv(adf_drv_info_t *drv)
{
  903c20:	6c1004        	entry	a1, 32
	g_wlan_drv = drv;
  903c23:	1871e6        	l32r	a8, 8e03bc <_bss_end+0x3d2bb4>
  903c26:	9280      	s32i.n	a2, a8, 0
  903c28:	d10f      	retw.n
	...

00903c2c <wlan_pci_probe>:

#define ATHEROS_VENDOR_ID 0x168c
#define AR5416_DEVID_PCIE 0x24 	

void wlan_pci_probe(void)
{
  903c2c:	6c100a        	entry	a1, 80
	__adf_softc_t           *sc;
	adf_os_resource_t       drv_res = {0};
  903c2f:	c0b0      	movi.n	a11, 0
  903c31:	2c0a18        	movi	a12, 24
  903c34:	011a02        	or	a10, a1, a1
  903c37:	5b8559        	call8	8e519c <memset>
	adf_os_attach_data_t    drv_data = {{0}};   
  903c3a:	c0b0      	movi.n	a11, 0
  903c3c:	c1c0      	movi.n	a12, 16
  903c3e:	2a1c18        	addi	a10, a1, 24
  903c41:	5b8556        	call8	8e519c <memset>
	int vendor_id;
	int device_id;

	A_PRINTF("<wlan_pci_probe>: Attaching the driver\n");
  903c44:	127182        	l32r	a2, 8e024c <_bss_end+0x3d2a44>
  903c47:	1a71e7        	l32r	a10, 8e03e4 <_bss_end+0x3d2bdc>
  903c4a:	232212        	l32i	a3, a2, 72
  903c4d:	0b3000        	callx8	a3
	device_id = AR5416_DEVID_PCIE;
#else    
	vendor_id = wlan_pci_config_read(0, 2);
	device_id = wlan_pci_config_read(2, 2);
#endif    
	A_PRINTF("<wlan_pci_probe>: Vendor id 0x%x Dev id 0x%x\n", vendor_id, device_id);    
  903c50:	1371e9        	l32r	a3, 8e03f4 <_bss_end+0x3d2bec>
  903c53:	282212        	l32i	a8, a2, 72
  903c56:	1a71e8        	l32r	a10, 8e03f8 <_bss_end+0x3d2bf0>
  903c59:	db30      	mov.n	a11, a3
  903c5b:	c2c4      	movi.n	a12, 36
  903c5d:	0b8000        	callx8	a8
	}
            
	/**
	 * Allocate the sc & zero down
	 */
	sc = A_ALLOCRAM(sizeof(__adf_softc_t));
  903c60:	282252        	l32i	a8, a2, 0x148
  903c63:	c0a0      	movi.n	a10, 0
  903c65:	c0b4      	movi.n	a11, 4
  903c67:	0b8000        	callx8	a8
	if (!sc) {
  903c6a:	ccaa      	bnez.n	a10, 903c78 <wlan_pci_probe+0x4c>
		A_PRINTF("Cannot malloc softc\n");
  903c6c:	222212        	l32i	a2, a2, 72
  903c6f:	1a71ea        	l32r	a10, 8e0418 <_bss_end+0x3d2c10>
  903c72:	0b2000        	callx8	a2
  903c75:	d10f      	retw.n
  903c77:	00c224        	excw
		goto mem_fail;
	}
    
#define AR5416_DEVID_PCIE 0x24 		

	drv_data.pci.device    = AR5416_DEVID_PCIE;
  903c7a:	9217      	s32i.n	a2, a1, 28
    
	drv_res.start  = (a_uint32_t) 0;
	drv_res.end    = 0;
	drv_res.type   = ADF_OS_RESOURCE_TYPE_MEM;
        
	g_wlan_drv_handle = g_wlan_drv->drv_attach(&drv_res, 1, &drv_data, NULL);
  903c7c:	1271e6        	l32r	a2, 8e0414 <_bss_end+0x3d2c0c>
    
#define AR5416_DEVID_PCIE 0x24 		

	drv_data.pci.device    = AR5416_DEVID_PCIE;
	drv_data.pci.vendor    = 0x168c;
	drv_data.pci.subvendor = 0;
  903c7f:	c0d0      	movi.n	a13, 0
    
	drv_res.start  = (a_uint32_t) 0;
	drv_res.end    = 0;
	drv_res.type   = ADF_OS_RESOURCE_TYPE_MEM;
        
	g_wlan_drv_handle = g_wlan_drv->drv_attach(&drv_res, 1, &drv_data, NULL);
  903c81:	8220      	l32i.n	a2, a2, 0
	drv_data.pci.device    = AR5416_DEVID_PCIE;
	drv_data.pci.vendor    = 0x168c;
	drv_data.pci.subvendor = 0;
	drv_data.pci.subdevice = 0;
    
	drv_res.start  = (a_uint32_t) 0;
  903c83:	1871eb        	l32r	a8, 8e0430 <_bss_end+0x3d2c28>
  903c86:	1971eb        	l32r	a9, 8e0434 <_bss_end+0x3d2c2c>
	}
    
#define AR5416_DEVID_PCIE 0x24 		

	drv_data.pci.device    = AR5416_DEVID_PCIE;
	drv_data.pci.vendor    = 0x168c;
  903c89:	9316      	s32i.n	a3, a1, 24
	drv_data.pci.subvendor = 0;
  903c8b:	9d18      	s32i.n	a13, a1, 32
	drv_data.pci.subdevice = 0;
  903c8d:	9d19      	s32i.n	a13, a1, 36
    
	drv_res.start  = (a_uint32_t) 0;
	drv_res.end    = 0;
	drv_res.type   = ADF_OS_RESOURCE_TYPE_MEM;
        
	g_wlan_drv_handle = g_wlan_drv->drv_attach(&drv_res, 1, &drv_data, NULL);
  903c8f:	8220      	l32i.n	a2, a2, 0
	drv_data.pci.device    = AR5416_DEVID_PCIE;
	drv_data.pci.vendor    = 0x168c;
	drv_data.pci.subvendor = 0;
	drv_data.pci.subdevice = 0;
    
	drv_res.start  = (a_uint32_t) 0;
  903c91:	9810      	s32i.n	a8, a1, 0
  903c93:	9911      	s32i.n	a9, a1, 4
	drv_res.end    = 0;
  903c95:	9812      	s32i.n	a8, a1, 8
  903c97:	9913      	s32i.n	a9, a1, 12
	drv_res.type   = ADF_OS_RESOURCE_TYPE_MEM;
  903c99:	9d14      	s32i.n	a13, a1, 16
        
	g_wlan_drv_handle = g_wlan_drv->drv_attach(&drv_res, 1, &drv_data, NULL);
  903c9b:	da10      	mov.n	a10, a1
  903c9d:	c0b1      	movi.n	a11, 1
  903c9f:	2c1c18        	addi	a12, a1, 24
  903ca2:	0b2000        	callx8	a2
  903ca5:	1271ec        	l32r	a2, 8e0458 <_bss_end+0x3d2c50>
  903ca8:	9a20      	s32i.n	a10, a2, 0
  903caa:	d10f      	retw.n

00903cac <wlan_pci_config_write>:
mem_fail:
	return;        
}

int wlan_pci_config_write(int offset, a_uint32_t val, int width)
{
  903cac:	6c1004        	entry	a1, 32
		ptr[idx + i] = valptr[3-i];
	}            
#endif
    
	return 0;    
}
  903caf:	c020      	movi.n	a2, 0
  903cb1:	d10f      	retw.n
	...

00903cb4 <wlan_pci_config_read>:

int wlan_pci_config_read(int offset, int width)
{
  903cb4:	6c1004        	entry	a1, 32
		result |= (ptr[ 3 - (idx + i)] << (8*i));
	}            
    
	return result;    
#endif    
}
  903cb7:	c020      	movi.n	a2, 0
  903cb9:	d10f      	retw.n
	...

00903cbc <wlan_pci_isr>:

void wlan_pci_isr()
{
  903cbc:	6c1004        	entry	a1, 32
	if (g_wlan_intr != NULL && g_wlan_drv_handle != NULL) {
  903cbf:	1871ed        	l32r	a8, 8e0474 <_bss_end+0x3d2c6c>
  903cc2:	8880      	l32i.n	a8, a8, 0
  903cc4:	c888      	beqz.n	a8, 903cd0 <wlan_pci_isr+0x14>
  903cc6:	1971ec        	l32r	a9, 8e0478 <_bss_end+0x3d2c70>
  903cc9:	8a90      	l32i.n	a10, a9, 0
  903ccb:	c8a1      	beqz.n	a10, 903cd0 <wlan_pci_isr+0x14>
		g_wlan_intr(g_wlan_drv_handle);
  903ccd:	0b8000        	callx8	a8
  903cd0:	d10f      	retw.n
	...

00903cd4 <_HTC_Shutdown>:
    
	return pHTC;
}

LOCAL void _HTC_Shutdown(htc_handle_t htcHandle)
{
  903cd4:	6c1004        	entry	a1, 32
  903cd7:	d10f      	retw.n
  903cd9:	000000        	ill

00903cdc <_HTC_RegisterService>:
    
	adf_os_mem_free(pHTC);
}

LOCAL void _HTC_RegisterService(htc_handle_t htcHandle, HTC_SERVICE *pService)
{
  903cdc:	6c1004        	entry	a1, 32
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)htcHandle;
    
        /* add it to the list */
	pService->pNext = pHTC->pServiceList;
  903cdf:	282290        	l32i	a8, a2, 0x240
  903ce2:	9830      	s32i.n	a8, a3, 0
	pHTC->pServiceList = pService;
  903ce4:	232690        	s32i	a3, a2, 0x240
  903ce7:	d10f      	retw.n
  903ce9:	000000        	ill

00903cec <_HTC_GetReservedHeadroom>:
void _HTC_ResumeRecv(HTC_ENDPOINT_ID EndpointID)
{
}

int _HTC_GetReservedHeadroom(htc_handle_t htcHandle)
{
  903cec:	6c1004        	entry	a1, 32
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)htcHandle;  
    
	return HTC_HDR_LENGTH + HIF_get_reserved_headroom(pHTC->hifHandle);
  903cef:	187182        	l32r	a8, 8e02f8 <_bss_end+0x3d2af0>
  903cf2:	2a229a        	l32i	a10, a2, 0x268
  903cf5:	28827f        	l32i	a8, a8, 0x1fc
  903cf8:	0b8000        	callx8	a8
}
  903cfb:	b8a2      	addi.n	a2, a10, 8
  903cfd:	d10f      	retw.n
	...

00903d00 <HTCSendDoneHandler>:
		HTCCheckAndSendCreditReport(pHTC, HTC_ANY_ENDPOINT_MASK,NULL,ENDPOINT_MAX);
	}  
}

LOCAL void HTCSendDoneHandler(adf_nbuf_t buf, void *context)
{
  903d00:	6c1004        	entry	a1, 32
 * @return data pointer to typecast into your priv structure
 */
static inline a_uint8_t *
adf_nbuf_get_priv(adf_nbuf_t buf)
{
    return (__adf_nbuf_get_priv(buf));
  903d03:	022a02        	or	a10, a2, a2
  903d06:	5bfdd3        	call8	903454 <__adf_nbuf_get_priv>
	A_UINT8 current_eid;
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)context;
	HTC_BUF_CONTEXT *ctx;
      
	ctx = (HTC_BUF_CONTEXT *)adf_nbuf_get_priv(buf);
	current_eid = ctx->end_point;
  903d09:	24a000        	l8ui	a4, a10, 0
 *         or NULL if there is not sufficient data to pull.
 */
static inline a_uint8_t *
adf_nbuf_pull_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_pull_head(buf, size);
  903d0c:	c0b8      	movi.n	a11, 8
  903d0e:	022a02        	or	a10, a2, a2
  903d11:	5bfdb5        	call8	9033e8 <__adf_nbuf_pull_head>
	/* Walk through the buffers and fixup the ones we used for HTC headers.
	 * The buffer list may contain more than one string of HTC buffers comprising of an
	 * HTC message so we need to check every buffer */            
	adf_nbuf_pull_head(buf, HTC_HDR_LENGTH);
                   
	pHTC->Endpoints[current_eid].pService->
  903d14:	044809        	addx2	a8, a4, a4
  903d17:	03830b        	addx8	a3, a8, a3
  903d1a:	8832      	l32i.n	a8, a3, 8
		ProcessSendBufferComplete(current_eid, 
  903d1c:	da40      	mov.n	a10, a4
  903d1e:	8982      	l32i.n	a9, a8, 8
  903d20:	8c86      	l32i.n	a12, a8, 24
  903d22:	022b02        	or	a11, a2, a2
  903d25:	0b9000        	callx8	a9
  903d28:	d10f      	retw.n
	...

00903d2c <HTC_AssembleBuffers>:
	if ((pEndpoint)->ConnectionFlags & HTC_CONNECT_FLAGS_REDUCE_CREDIT_DRIBBLE) { \
		AdjustCreditThreshold((pEndpoint));			\
	}    

LOCAL void HTC_AssembleBuffers(HTC_CONTEXT *pHTC, int Count, int Size)
{
  903d2c:	6c1004        	entry	a1, 32
	BUF_Pool_create_pool(pHTC->PoolHandle, POOL_ID_HTC_CONTROL, Count, Size);       
  903d2f:	187182        	l32r	a8, 8e0338 <_bss_end+0x3d2b30>
  903d32:	2a229b        	l32i	a10, a2, 0x26c
  903d35:	2882a0        	l32i	a8, a8, 0x280
  903d38:	c0b0      	movi.n	a11, 0
  903d3a:	dc30      	mov.n	a12, a3
  903d3c:	dd40      	mov.n	a13, a4
  903d3e:	0b8000        	callx8	a8
  903d41:	d10f      	retw.n
	...

00903d44 <_HTC_Init>:
}

LOCAL htc_handle_t _HTC_Init(HTC_SETUP_COMPLETE_CB SetupComplete,
                             HTC_CONFIG *pConfig)
{
  903d44:	6c1006        	entry	a1, 48
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  903d47:	147182        	l32r	a4, 8e0350 <_bss_end+0x3d2b48>
  903d4a:	022502        	or	a5, a2, a2
  903d4d:	224252        	l32i	a2, a4, 0x148
  903d50:	2b2a74        	movi	a11, 0x274
  903d53:	c0a0      	movi.n	a10, 0
  903d55:	0b2000        	callx8	a2
}
/* zero a memory buffer */
static inline void
__adf_os_mem_zero(void *buf, adf_os_size_t size)
{
    A_MEMZERO(buf,size);
  903d58:	8844      	l32i.n	a8, a4, 16
  903d5a:	2c2a74        	movi	a12, 0x274
  903d5d:	c0b0      	movi.n	a11, 0
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  903d5f:	d2a0      	mov.n	a2, a10
}
/* zero a memory buffer */
static inline void
__adf_os_mem_zero(void *buf, adf_os_size_t size)
{
    A_MEMZERO(buf,size);
  903d61:	0b8000        	callx8	a8
    
        pHTC = (HTC_CONTEXT *)adf_os_mem_alloc(sizeof(HTC_CONTEXT));
    
	adf_os_mem_zero(pHTC, sizeof(HTC_CONTEXT));

	pHTC->OSHandle = pConfig->OSHandle;
  903d64:	8832      	l32i.n	a8, a3, 8
	pHTC->PoolHandle = pConfig->PoolHandle;
	pHTC->hifHandle = pConfig->HIFHandle;
  903d66:	8a33      	l32i.n	a10, a3, 12
    
        pHTC = (HTC_CONTEXT *)adf_os_mem_alloc(sizeof(HTC_CONTEXT));
    
	adf_os_mem_zero(pHTC, sizeof(HTC_CONTEXT));

	pHTC->OSHandle = pConfig->OSHandle;
  903d68:	9820      	s32i.n	a8, a2, 0
	pHTC->PoolHandle = pConfig->PoolHandle;
  903d6a:	8834      	l32i.n	a8, a3, 16
	hifCBConfig.send_buf_done = A_INDIR(htc._HTC_SendDoneHandler);
	hifCBConfig.recv_buf = A_INDIR(htc._HTC_MsgRecvHandler);
	hifCBConfig.context = pHTC;
    
	/* initialize hardware layer */
	HIF_register_callback(pConfig->HIFHandle, &hifCBConfig);
  903d6c:	db10      	mov.n	a11, a1
        pHTC = (HTC_CONTEXT *)adf_os_mem_alloc(sizeof(HTC_CONTEXT));
    
	adf_os_mem_zero(pHTC, sizeof(HTC_CONTEXT));

	pHTC->OSHandle = pConfig->OSHandle;
	pHTC->PoolHandle = pConfig->PoolHandle;
  903d6e:	28269b        	s32i	a8, a2, 0x26c
	pHTC->hifHandle = pConfig->HIFHandle;
                        
	hifCBConfig.send_buf_done = A_INDIR(htc._HTC_SendDoneHandler);
  903d71:	28428c        	l32i	a8, a4, 0x230
    
	adf_os_mem_zero(pHTC, sizeof(HTC_CONTEXT));

	pHTC->OSHandle = pConfig->OSHandle;
	pHTC->PoolHandle = pConfig->PoolHandle;
	pHTC->hifHandle = pConfig->HIFHandle;
  903d74:	2a269a        	s32i	a10, a2, 0x268
                        
	hifCBConfig.send_buf_done = A_INDIR(htc._HTC_SendDoneHandler);
  903d77:	9810      	s32i.n	a8, a1, 0
	hifCBConfig.recv_buf = A_INDIR(htc._HTC_MsgRecvHandler);
  903d79:	28428b        	l32i	a8, a4, 0x22c
	hifCBConfig.context = pHTC;
  903d7c:	9212      	s32i.n	a2, a1, 8
	pHTC->OSHandle = pConfig->OSHandle;
	pHTC->PoolHandle = pConfig->PoolHandle;
	pHTC->hifHandle = pConfig->HIFHandle;
                        
	hifCBConfig.send_buf_done = A_INDIR(htc._HTC_SendDoneHandler);
	hifCBConfig.recv_buf = A_INDIR(htc._HTC_MsgRecvHandler);
  903d7e:	9811      	s32i.n	a8, a1, 4
	hifCBConfig.context = pHTC;
    
	/* initialize hardware layer */
	HIF_register_callback(pConfig->HIFHandle, &hifCBConfig);
  903d80:	284277        	l32i	a8, a4, 0x1dc
  903d83:	0b8000        	callx8	a8
        /* see if the host wants us to override the number of ctrl buffers */
	pHTC->NumBuffersForCreditRpts = 0;
    
	if (0 == pHTC->NumBuffersForCreditRpts) {
		/* nothing to override, simply set default */
		pHTC->NumBuffersForCreditRpts = HTC_DEFAULT_NUM_CTRL_BUFFERS; 
  903d86:	c086      	movi.n	a8, 6
  903d88:	282696        	s32i	a8, a2, 0x258
	}    
    
	pHTC->MaxEpPendingCreditRpts = 0;
    
	if (0 == pHTC->MaxEpPendingCreditRpts) {
		pHTC->MaxEpPendingCreditRpts = HTC_DEFAULT_MAX_EP_PENDING_CREDIT_REPORTS;    
  903d8b:	c083      	movi.n	a8, 3
  903d8d:	282699        	s32i	a8, a2, 0x264
	}
	/* calculate the total allocation size based on the number of credit report buffers */
	pHTC->CtrlBufferAllocSize = MIN_CREDIT_BUFFER_ALLOC_SIZE * pHTC->NumBuffersForCreditRpts;
  903d90:	280ad8        	movi	a8, 216
  903d93:	282697        	s32i	a8, a2, 0x25c
	/* we need at least enough buffer space for 1 ctrl message */
	pHTC->CtrlBufferAllocSize = A_MAX(pHTC->CtrlBufferAllocSize,MAX_HTC_SETUP_MSG_SIZE);
    
	/* save the size of each buffer/credit we will receive */
	pHTC->RecvBufferSize = pConfig->CreditSize; //RecvBufferSize;
  903d96:	8830      	l32i.n	a8, a3, 0
	pHTC->TotalCredits = pConfig->CreditNumber;
  903d98:	8331      	l32i.n	a3, a3, 4
	pHTC->CtrlBufferAllocSize = MIN_CREDIT_BUFFER_ALLOC_SIZE * pHTC->NumBuffersForCreditRpts;
	/* we need at least enough buffer space for 1 ctrl message */
	pHTC->CtrlBufferAllocSize = A_MAX(pHTC->CtrlBufferAllocSize,MAX_HTC_SETUP_MSG_SIZE);
    
	/* save the size of each buffer/credit we will receive */
	pHTC->RecvBufferSize = pConfig->CreditSize; //RecvBufferSize;
  903d9a:	282691        	s32i	a8, a2, 0x244
	pHTC->TotalCredits = pConfig->CreditNumber;
  903d9d:	232694        	s32i	a3, a2, 0x250
	pHTC->TotalCreditsAssigned = 0;
  903da0:	c030      	movi.n	a3, 0
  903da2:	232695        	s32i	a3, a2, 0x254
     
	/* setup the pseudo service that handles HTC control messages */
	pHTC->HTCControlService.ProcessRecvMsg = A_INDIR(htc._HTC_ControlSvcProcessMsg);
  903da5:	23428d        	l32i	a3, a4, 0x234
	pHTC->HTCControlService.ProcessSendBufferComplete = A_INDIR(htc._HTC_ControlSvcProcessSendComplete);
	pHTC->HTCControlService.TrailerSpcCheckLimit = HTC_CTRL_BUFFER_CHECK_SIZE;
  903da8:	c18c      	movi.n	a8, 28
	pHTC->RecvBufferSize = pConfig->CreditSize; //RecvBufferSize;
	pHTC->TotalCredits = pConfig->CreditNumber;
	pHTC->TotalCreditsAssigned = 0;
     
	/* setup the pseudo service that handles HTC control messages */
	pHTC->HTCControlService.ProcessRecvMsg = A_INDIR(htc._HTC_ControlSvcProcessMsg);
  903daa:	23268a        	s32i	a3, a2, 0x228
	pHTC->HTCControlService.ProcessSendBufferComplete = A_INDIR(htc._HTC_ControlSvcProcessSendComplete);
  903dad:	23428e        	l32i	a3, a4, 0x238
	pHTC->HTCControlService.MaxSvcMsgSize = MAX_HTC_SETUP_MSG_SIZE;
	pHTC->HTCControlService.ServiceCtx = pHTC;
    
	/* automatically register this pseudo service to endpoint 1 */
	pHTC->Endpoints[ENDPOINT0].pService = &pHTC->HTCControlService;
	HIF_get_default_pipe(pHTC->hifHandle, &pHTC->Endpoints[ENDPOINT0].UpLinkPipeID, 
  903db0:	2a229a        	l32i	a10, a2, 0x268
	pHTC->TotalCredits = pConfig->CreditNumber;
	pHTC->TotalCreditsAssigned = 0;
     
	/* setup the pseudo service that handles HTC control messages */
	pHTC->HTCControlService.ProcessRecvMsg = A_INDIR(htc._HTC_ControlSvcProcessMsg);
	pHTC->HTCControlService.ProcessSendBufferComplete = A_INDIR(htc._HTC_ControlSvcProcessSendComplete);
  903db3:	23268b        	s32i	a3, a2, 0x22c
	pHTC->HTCControlService.TrailerSpcCheckLimit = HTC_CTRL_BUFFER_CHECK_SIZE;
  903db6:	232d02        	addmi	a3, a2, 0x200
  903db9:	28351d        	s16i	a8, a3, 58
	pHTC->HTCControlService.MaxSvcMsgSize = MAX_HTC_SETUP_MSG_SIZE;
  903dbc:	c480      	movi.n	a8, 64
  903dbe:	28351c        	s16i	a8, a3, 56
	pHTC->HTCControlService.ServiceCtx = pHTC;
    
	/* automatically register this pseudo service to endpoint 1 */
	pHTC->Endpoints[ENDPOINT0].pService = &pHTC->HTCControlService;
  903dc1:	232a24        	movi	a3, 0x224
  903dc4:	032308        	add	a3, a2, a3
  903dc7:	9322      	s32i.n	a3, a2, 8
	HIF_get_default_pipe(pHTC->hifHandle, &pHTC->Endpoints[ENDPOINT0].UpLinkPipeID, 
  903dc9:	234281        	l32i	a3, a4, 0x204
  903dcc:	2b2c19        	addi	a11, a2, 25
  903dcf:	2c2c18        	addi	a12, a2, 24
	/* setup the pseudo service that handles HTC control messages */
	pHTC->HTCControlService.ProcessRecvMsg = A_INDIR(htc._HTC_ControlSvcProcessMsg);
	pHTC->HTCControlService.ProcessSendBufferComplete = A_INDIR(htc._HTC_ControlSvcProcessSendComplete);
	pHTC->HTCControlService.TrailerSpcCheckLimit = HTC_CTRL_BUFFER_CHECK_SIZE;
	pHTC->HTCControlService.MaxSvcMsgSize = MAX_HTC_SETUP_MSG_SIZE;
	pHTC->HTCControlService.ServiceCtx = pHTC;
  903dd2:	22268f        	s32i	a2, a2, 0x23c
    
	/* automatically register this pseudo service to endpoint 1 */
	pHTC->Endpoints[ENDPOINT0].pService = &pHTC->HTCControlService;
	HIF_get_default_pipe(pHTC->hifHandle, &pHTC->Endpoints[ENDPOINT0].UpLinkPipeID, 
  903dd5:	0b3000        	callx8	a3
			     &pHTC->Endpoints[ENDPOINT0].DownLinkPipeID);
    
	/* Initialize control pipe so we could receive the HTC control packets */
	// @TODO: msg size!
	HIF_config_pipe(pHTC->hifHandle, pHTC->Endpoints[ENDPOINT0].UpLinkPipeID, 1);    
  903dd8:	2a229a        	l32i	a10, a2, 0x268
  903ddb:	23427a        	l32i	a3, a4, 0x1e8
  903dde:	2b2019        	l8ui	a11, a2, 25
  903de1:	c0c1      	movi.n	a12, 1
  903de3:	0b3000        	callx8	a3
    
	/* set the first free endpoint */
	pHTC->CurrentEpIndex = ENDPOINT1;
  903de6:	c031      	movi.n	a3, 1
  903de8:	232688        	s32i	a3, a2, 0x220
	pHTC->SetupCompleteCb = SetupComplete;
    
        /* setup buffers for just the setup phase, we only need 1 buffer to handle
	 * setup */
	HTC_AssembleBuffers(pHTC, 4, MAX_HTC_SETUP_MSG_SIZE);
  903deb:	da20      	mov.n	a10, a2
	// @TODO: msg size!
	HIF_config_pipe(pHTC->hifHandle, pHTC->Endpoints[ENDPOINT0].UpLinkPipeID, 1);    
    
	/* set the first free endpoint */
	pHTC->CurrentEpIndex = ENDPOINT1;
	pHTC->SetupCompleteCb = SetupComplete;
  903ded:	252693        	s32i	a5, a2, 0x24c
    
        /* setup buffers for just the setup phase, we only need 1 buffer to handle
	 * setup */
	HTC_AssembleBuffers(pHTC, 4, MAX_HTC_SETUP_MSG_SIZE);
  903df0:	c0b4      	movi.n	a11, 4
  903df2:	2c0a40        	movi	a12, 64
  903df5:	5bffcd        	call8	903d2c <HTC_AssembleBuffers>
   
	/* start hardware layer so that we can queue buffers */
	HIF_start(pHTC->hifHandle);
  903df8:	2a229a        	l32i	a10, a2, 0x268
  903dfb:	234279        	l32i	a3, a4, 0x1e4
  903dfe:	0b3000        	callx8	a3
    
	return pHTC;
}
  903e01:	d10f      	retw.n
	...

00903e04 <_HTC_PauseRecv>:
	pHTCHdr->PayloadLen = adf_os_htons(totsz);  
	HIF_send_buffer(pHTC->hifHandle, pHTC->Endpoints[EndpointID].DownLinkPipeID, pBuffers);       
}

void _HTC_PauseRecv(HTC_ENDPOINT_ID EndpointID)
{
  903e04:	6c1004        	entry	a1, 32
  903e07:	d10f      	retw.n
  903e09:	000000        	ill

00903e0c <_HTC_ResumeRecv>:
}

void _HTC_ResumeRecv(HTC_ENDPOINT_ID EndpointID)
{
  903e0c:	6c1004        	entry	a1, 32
  903e0f:	d10f      	retw.n
  903e11:	000000        	ill

00903e14 <htc_module_install>:
    
	return HTC_HDR_LENGTH + HIF_get_reserved_headroom(pHTC->hifHandle);
}

void htc_module_install(struct htc_apis *pAPIs)
{   
  903e14:	6c1004        	entry	a1, 32
	pAPIs->_HTC_Init = _HTC_Init;
  903e17:	1871ee        	l32r	a8, 8e05d0 <_bss_end+0x3d2dc8>
  903e1a:	9820      	s32i.n	a8, a2, 0
	pAPIs->_HTC_ReturnBuffers = _HTC_ReturnBuffers;
  903e1c:	1871ef        	l32r	a8, 8e05d8 <_bss_end+0x3d2dd0>
  903e1f:	9824      	s32i.n	a8, a2, 16
	pAPIs->_HTC_ReturnBuffersList = _HTC_ReturnBuffersList;
  903e21:	1871f0        	l32r	a8, 8e05e4 <_bss_end+0x3d2ddc>
  903e24:	9825      	s32i.n	a8, a2, 20
	pAPIs->_HTC_Ready = _HTC_Ready;
  903e26:	1871f1        	l32r	a8, 8e05ec <_bss_end+0x3d2de4>
  903e29:	9823      	s32i.n	a8, a2, 12
	pAPIs->_HTC_RegisterService = _HTC_RegisterService;
  903e2b:	1871f2        	l32r	a8, 8e05f4 <_bss_end+0x3d2dec>
  903e2e:	9822      	s32i.n	a8, a2, 8
	pAPIs->_HTC_SendMsg = _HTC_SendMsg;   
  903e30:	1871f3        	l32r	a8, 8e05fc <_bss_end+0x3d2df4>
  903e33:	9826      	s32i.n	a8, a2, 24
	pAPIs->_HTC_Shutdown = _HTC_Shutdown;
  903e35:	1871f4        	l32r	a8, 8e0608 <_bss_end+0x3d2e00>
  903e38:	9821      	s32i.n	a8, a2, 4
	pAPIs->_HTC_GetReservedHeadroom = _HTC_GetReservedHeadroom;
  903e3a:	1871f5        	l32r	a8, 8e0610 <_bss_end+0x3d2e08>
  903e3d:	9827      	s32i.n	a8, a2, 28
	pAPIs->_HTC_MsgRecvHandler = HTCMsgRecvHandler;
  903e3f:	1871f6        	l32r	a8, 8e0618 <_bss_end+0x3d2e10>
  903e42:	9828      	s32i.n	a8, a2, 32
	pAPIs->_HTC_SendDoneHandler = HTCSendDoneHandler;
  903e44:	1871f7        	l32r	a8, 8e0620 <_bss_end+0x3d2e18>
  903e47:	9829      	s32i.n	a8, a2, 36
	pAPIs->_HTC_ControlSvcProcessMsg = HTCControlSvcProcessMsg;
  903e49:	1871f8        	l32r	a8, 8e062c <_bss_end+0x3d2e24>
  903e4c:	982a      	s32i.n	a8, a2, 40
	pAPIs->_HTC_ControlSvcProcessSendComplete = HTCControlSvcProcessSendComplete;
  903e4e:	1871f9        	l32r	a8, 8e0634 <_bss_end+0x3d2e2c>
  903e51:	982b      	s32i.n	a8, a2, 44
  903e53:	d10f      	retw.n
  903e55:	000000        	ill

00903e58 <HTCFreeMsgBuffer>:
}

/* free message to the free list */
LOCAL void HTCFreeMsgBuffer(HTC_CONTEXT *pHTC, adf_nbuf_t buf) 
{
  903e58:	6c1004        	entry	a1, 32
	BUF_Pool_free_buf(pHTC->PoolHandle, POOL_ID_HTC_CONTROL, buf);      
  903e5b:	187182        	l32r	a8, 8e0464 <_bss_end+0x3d2c5c>
  903e5e:	2a229b        	l32i	a10, a2, 0x26c
  903e61:	2882a3        	l32i	a8, a8, 0x28c
  903e64:	c0b0      	movi.n	a11, 0
  903e66:	033c02        	or	a12, a3, a3
  903e69:	0b8000        	callx8	a8
  903e6c:	d10f      	retw.n
	...

00903e70 <HTCAllocMsgBuffer>:
}

/* HTC control message allocator (also used for empty frames to send trailer options) */
LOCAL adf_nbuf_t HTCAllocMsgBuffer(HTC_CONTEXT *pHTC)
{
  903e70:	6c1004        	entry	a1, 32
	return BUF_Pool_alloc_buf(pHTC->PoolHandle,
  903e73:	187182        	l32r	a8, 8e047c <_bss_end+0x3d2c74>
  903e76:	24229b        	l32i	a4, a2, 0x26c
  903e79:	2382a1        	l32i	a3, a8, 0x284
  903e7c:	28828a        	l32i	a8, a8, 0x228
  903e7f:	da20      	mov.n	a10, a2
  903e81:	0b8000        	callx8	a8
  903e84:	dca0      	mov.n	a12, a10
  903e86:	c0b0      	movi.n	a11, 0
  903e88:	da40      	mov.n	a10, a4
  903e8a:	0b3000        	callx8	a3
				  POOL_ID_HTC_CONTROL,
				  HTC_GetReservedHeadroom(pHTC));   
}
  903e8d:	d2a0      	mov.n	a2, a10
  903e8f:	d10f      	retw.n
  903e91:	000000        	ill

00903e94 <_HTC_Ready>:
	pService->pNext = pHTC->pServiceList;
	pHTC->pServiceList = pService;
}

LOCAL void _HTC_Ready(htc_handle_t htcHandle)
{
  903e94:	6c1004        	entry	a1, 32
	adf_nbuf_t pBuffer;
	HTC_READY_MSG *pReady;
	a_uint8_t *addr;
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)htcHandle;
    
	pBuffer = HTCAllocMsgBuffer(pHTC);
  903e97:	022a02        	or	a10, a2, a2
  903e9a:	5bfff5        	call8	903e70 <HTCAllocMsgBuffer>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  903e9d:	c0b8      	movi.n	a11, 8
  903e9f:	d4a0      	mov.n	a4, a10
  903ea1:	5bfddd        	call8	903618 <__adf_nbuf_put_tail>
	/* an optimization... the header length is chosen to
	 * be aligned on a 16 bit bounday, the fields in the message are designed to
	 * be aligned */
	addr = adf_nbuf_put_tail(pBuffer, sizeof(HTC_READY_MSG));       
	pReady = (HTC_READY_MSG *)addr;     
	A_MEMZERO(pReady,sizeof(HTC_READY_MSG));  
  903ea4:	157182        	l32r	a5, 8e04ac <_bss_end+0x3d2ca4>
  903ea7:	c0b0      	movi.n	a11, 0
  903ea9:	8854      	l32i.n	a8, a5, 16
  903eab:	c0c8      	movi.n	a12, 8
  903ead:	d3a0      	mov.n	a3, a10
  903eaf:	0b8000        	callx8	a8
	pReady->MessageID = adf_os_htons(HTC_MSG_READY_ID);
  903eb2:	c0b0      	movi.n	a11, 0
  903eb4:	c081      	movi.n	a8, 1
  903eb6:	2b3400        	s8i	a11, a3, 0
  903eb9:	283401        	s8i	a8, a3, 1
	pReady->CreditSize = adf_os_htons((A_UINT16)pHTC->RecvBufferSize);
  903ebc:	282291        	l32i	a8, a2, 0x244
	pReady->CreditCount = adf_os_htons((A_UINT16)pHTC->TotalCredits);
	pReady->MaxEndpoints = ENDPOINT_MAX;
       
	/* send out the message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer);
  903ebf:	da20      	mov.n	a10, a2
	 * be aligned */
	addr = adf_nbuf_put_tail(pBuffer, sizeof(HTC_READY_MSG));       
	pReady = (HTC_READY_MSG *)addr;     
	A_MEMZERO(pReady,sizeof(HTC_READY_MSG));  
	pReady->MessageID = adf_os_htons(HTC_MSG_READY_ID);
	pReady->CreditSize = adf_os_htons((A_UINT16)pHTC->RecvBufferSize);
  903ec1:	08084f        	extui	a8, a8, 0, 16
  903ec4:	088914        	srli	a9, a8, 8
  903ec7:	293404        	s8i	a9, a3, 4
  903eca:	283405        	s8i	a8, a3, 5
	pReady->CreditCount = adf_os_htons((A_UINT16)pHTC->TotalCredits);
  903ecd:	282294        	l32i	a8, a2, 0x250
	pReady->MaxEndpoints = ENDPOINT_MAX;
       
	/* send out the message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer);
  903ed0:	dc40      	mov.n	a12, a4
	addr = adf_nbuf_put_tail(pBuffer, sizeof(HTC_READY_MSG));       
	pReady = (HTC_READY_MSG *)addr;     
	A_MEMZERO(pReady,sizeof(HTC_READY_MSG));  
	pReady->MessageID = adf_os_htons(HTC_MSG_READY_ID);
	pReady->CreditSize = adf_os_htons((A_UINT16)pHTC->RecvBufferSize);
	pReady->CreditCount = adf_os_htons((A_UINT16)pHTC->TotalCredits);
  903ed2:	08084f        	extui	a8, a8, 0, 16
  903ed5:	088914        	srli	a9, a8, 8
  903ed8:	283403        	s8i	a8, a3, 3
	pReady->MaxEndpoints = ENDPOINT_MAX;
  903edb:	c186      	movi.n	a8, 22
	addr = adf_nbuf_put_tail(pBuffer, sizeof(HTC_READY_MSG));       
	pReady = (HTC_READY_MSG *)addr;     
	A_MEMZERO(pReady,sizeof(HTC_READY_MSG));  
	pReady->MessageID = adf_os_htons(HTC_MSG_READY_ID);
	pReady->CreditSize = adf_os_htons((A_UINT16)pHTC->RecvBufferSize);
	pReady->CreditCount = adf_os_htons((A_UINT16)pHTC->TotalCredits);
  903edd:	293402        	s8i	a9, a3, 2
	pReady->MaxEndpoints = ENDPOINT_MAX;
  903ee0:	283406        	s8i	a8, a3, 6
       
	/* send out the message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer);
  903ee3:	235289        	l32i	a3, a5, 0x224
  903ee6:	0b3000        	callx8	a3
  903ee9:	d10f      	retw.n
	...

00903eec <HTCCheckAndSendCreditReport>:
				  HTC_GetReservedHeadroom(pHTC));   
}

LOCAL void HTCCheckAndSendCreditReport(HTC_CONTEXT *pHTC, A_UINT32 EpMask,
				       HTC_ENDPOINT *pEndpoint, HTC_ENDPOINT_ID Eid)
{
  903eec:	6c1004        	entry	a1, 32
	adf_nbuf_t pCredBuffer;
	HTC_BUF_CONTEXT *ctx;    
        
	do {
		/* check if host needs credits */
		if (!(pHTC->EpHostNeedsCreditMap & EpMask)) {
  903eef:	282285        	l32i	a8, a2, 0x214
  903ef2:	78305a        	bnone	a3, a8, 903f50 <HTCCheckAndSendCreditReport+0x64>
			/* host does not need any credits for this set */
			break;    
		}
		/* check if any are pending */
		if (!(pHTC->EpCreditPendingMap & EpMask)) {
  903ef5:	282286        	l32i	a8, a2, 0x218
  903ef8:	783054        	bnone	a3, a8, 903f50 <HTCCheckAndSendCreditReport+0x64>
			/* nothing to send up */
			break;    
		}  
		/* was an endpoint specified? */
		if (pEndpoint != NULL) {
  903efb:	c945      	beqz.n	a4, 903f14 <HTCCheckAndSendCreditReport+0x28>
			/* see if a threshold is in effect for this endpoint */
			if (pEndpoint->CreditReturnThreshhold != 0) {
  903efd:	234904        	l16si	a3, a4, 8
  903f00:	c834      	beqz.n	a3, 903f08 <HTCCheckAndSendCreditReport+0x1c>
				if (pEndpoint->CreditsToReturn < pEndpoint->CreditReturnThreshhold) {
  903f02:	284900        	l16si	a8, a4, 0
  903f05:	738247        	blt	a8, a3, 903f50 <HTCCheckAndSendCreditReport+0x64>
					 * back to the host */
					break;
				}
			}
         
			if (pEndpoint->PendingCreditReports >= pHTC->MaxEpPendingCreditRpts) {
  903f08:	8844      	l32i.n	a8, a4, 16
  903f0a:	232299        	l32i	a3, a2, 0x264
  903f0d:	738203        	blt	a8, a3, 903f14 <HTCCheckAndSendCreditReport+0x28>
  903f10:	600009        	j	903f1d <HTCCheckAndSendCreditReport+0x31>
  903f13:	00da20        	excw
		}
        
		/* if we get here we have some credits to send up */
                        
		/* allocate a message buffer for the trailer */
		pCredBuffer = HTCAllocMsgBuffer(pHTC);
  903f16:	5bffd6        	call8	903e70 <HTCAllocMsgBuffer>
  903f19:	d3a0      	mov.n	a3, a10
		if (NULL == pCredBuffer) {
  903f1b:	ccae      	bnez.n	a10, 903f2d <HTCCheckAndSendCreditReport+0x41>
			/* no buffers left to send an empty message with trailers, host will just
			 * have to wait until we get our endpoint 0 messages back.. */
			/* mark that we need to send an update as soon as we can get a buffer back */
			pHTC->StateFlags |= HTC_SEND_CREDIT_UPDATE_SOON;
  903f1d:	242292        	l32i	a4, a2, 0x248
  903f20:	c032      	movi.n	a3, 2
  903f22:	034302        	or	a3, a4, a3
  903f25:	232692        	s32i	a3, a2, 0x248
  903f28:	d10f      	retw.n
  903f2a:	000000        	ill
 * @return data pointer to typecast into your priv structure
 */
static inline a_uint8_t *
adf_nbuf_get_priv(adf_nbuf_t buf)
{
    return (__adf_nbuf_get_priv(buf));
  903f2d:	5bfd49        	call8	903454 <__adf_nbuf_get_priv>
			break;    
		}
        
		ctx = (HTC_BUF_CONTEXT *)adf_nbuf_get_priv(pCredBuffer);
		if (pEndpoint != NULL) {
  903f30:	c84d      	beqz.n	a4, 903f41 <HTCCheckAndSendCreditReport+0x55>
			/* keep track of pending reports */
			pEndpoint->PendingCreditReports++; 
  903f32:	8844      	l32i.n	a8, a4, 16
  903f34:	b188      	addi.n	a8, a8, 1
  903f36:	9844      	s32i.n	a8, a4, 16
			/* save the endpoint in order to decrement the count when the send completes */
			ctx->htc_flags = Eid | HTC_FLAGS_CREDIT_RPT;
  903f38:	240a20        	movi	a4, 32
  903f3b:	045502        	or	a5, a5, a4
  903f3e:	25a401        	s8i	a5, a10, 1
		}   
            
		/* this is an empty message, the HTC_SendMsg will tack on a trailer in the remaining
		 * space, NOTE: no need to flush the cache, the header and trailers are assembled
		 * using uncached addresses */
		HTC_SendMsg(pHTC, ENDPOINT0, pCredBuffer);    
  903f41:	147182        	l32r	a4, 8e054c <_bss_end+0x3d2d44>
  903f44:	da20      	mov.n	a10, a2
  903f46:	244289        	l32i	a4, a4, 0x224
  903f49:	c0b0      	movi.n	a11, 0
  903f4b:	dc30      	mov.n	a12, a3
  903f4d:	0b4000        	callx8	a4
  903f50:	d10f      	retw.n
	...

00903f54 <HTCControlSvcProcessSendComplete>:
}

/* callback when endpoint 0 send buffers are completed */
LOCAL void HTCControlSvcProcessSendComplete(HTC_ENDPOINT_ID EndpointID,
					    adf_nbuf_t pBuffers, void *arg)
{
  903f54:	6c1004        	entry	a1, 32
  903f57:	da30      	mov.n	a10, a3
  903f59:	5bfd3e        	call8	903454 <__adf_nbuf_get_priv>
	HTC_ENDPOINT_ID creditRptEndpoint;
    
	ctx = (HTC_BUF_CONTEXT *)adf_nbuf_get_priv(pBuffers);       
    
	/* put them back into the pool */
	if ( ctx->htc_flags & HTC_FLAGS_CREDIT_RPT ) {   
  903f5c:	28a001        	l8ui	a8, a10, 1
  903f5f:	7a870e        	bbci	a8, 26, 903f71 <HTCControlSvcProcessSendComplete+0x1d>
		/* extract the endpoint number that requested this credit report */ 
		creditRptEndpoint = ctx->htc_flags & HTC_FLAGS_CRPT_EP_MASK;    
  903f62:	080844        	extui	a8, a8, 0, 5
		pHTC->Endpoints[creditRptEndpoint].PendingCreditReports--;  
  903f65:	088809        	addx2	a8, a8, a8
  903f68:	04880b        	addx8	a8, a8, a4
  903f6b:	8985      	l32i.n	a9, a8, 20
  903f6d:	b099      	addi.n	a9, a9, -1
  903f6f:	9985      	s32i.n	a9, a8, 20
	}
    
	HTCFreeMsgBuffer(pHTC, pBuffers);
  903f71:	db30      	mov.n	a11, a3
  903f73:	da40      	mov.n	a10, a4
  903f75:	5bffb8        	call8	903e58 <HTCFreeMsgBuffer>
   
	if (pHTC->StateFlags & HTC_SEND_CREDIT_UPDATE_SOON) {
  903f78:	234292        	l32i	a3, a4, 0x248
  903f7b:	7e3712        	bbci	a3, 30, 903f91 <HTCControlSvcProcessSendComplete+0x3d>
		/* this flag is set when the host could not send a credit report
		 * because we ran out of HTC control buffers */
		pHTC->StateFlags &= ~HTC_SEND_CREDIT_UPDATE_SOON;
  903f7e:	c78d      	movi.n	a8, -3
  903f80:	083301        	and	a3, a3, a8
  903f83:	234692        	s32i	a3, a4, 0x248
		/* send out a report if anything is pending */
		HTCCheckAndSendCreditReport(pHTC, HTC_ANY_ENDPOINT_MASK,NULL,ENDPOINT_MAX);
  903f86:	da40      	mov.n	a10, a4
  903f88:	c7bf      	movi.n	a11, -1
  903f8a:	c0c0      	movi.n	a12, 0
  903f8c:	c1d6      	movi.n	a13, 22
  903f8e:	5bffd7        	call8	903eec <HTCCheckAndSendCreditReport>
  903f91:	d10f      	retw.n
	...

00903f94 <ReturnBuffers>:
	/* now we need to wait for service connection requests */
}

LOCAL void ReturnBuffers(htc_handle_t htcHandle, HTC_ENDPOINT_ID EndpointID,
			 adf_nbuf_t pBuffers, A_BOOL sendCreditFlag)
{   
  903f94:	6c1004        	entry	a1, 32
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  903f97:	044a02        	or	a10, a4, a4
  903f9a:	2b0a08        	movi	a11, 8
  903f9d:	5bfd07        	call8	9033bc <__adf_nbuf_push_head>
    
	/* supply some head-room again */
	adf_nbuf_push_head(pBuffers, HTC_HDR_LENGTH);
              
	/* enqueue all buffers to the single mailbox */
	HIF_return_recv_buf(pHTC->hifHandle, pHTC->Endpoints[EndpointID].UpLinkPipeID, pBuffers);    
  903fa0:	187182        	l32r	a8, 8e05a8 <_bss_end+0x3d2da0>
  903fa3:	033609        	addx2	a6, a3, a3
  903fa6:	02660b        	addx8	a6, a6, a2
  903fa9:	28827c        	l32i	a8, a8, 0x1f0
  903fac:	2a229a        	l32i	a10, a2, 0x268
  903faf:	2b6019        	l8ui	a11, a6, 25
  903fb2:	044c02        	or	a12, a4, a4
  903fb5:	0b8000        	callx8	a8
     
	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {       
  903fb8:	242292        	l32i	a4, a2, 0x248
  903fbb:	7f472d        	bbci	a4, 31, 903fec <ReturnBuffers+0x58>
		A_UINT32    epCreditMask = (1 << EndpointID);
		/* we are running normally */
		/* update pending credit counts with the number of buffers that were added */
		pHTC->Endpoints[EndpointID].CreditsToReturn += (A_INT16)nbufs;
  903fbe:	246102        	l16ui	a4, a6, 4
              
	/* enqueue all buffers to the single mailbox */
	HIF_return_recv_buf(pHTC->hifHandle, pHTC->Endpoints[EndpointID].UpLinkPipeID, pBuffers);    
     
	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {       
		A_UINT32    epCreditMask = (1 << EndpointID);
  903fc1:	c0b1      	movi.n	a11, 1
		/* we are running normally */
		/* update pending credit counts with the number of buffers that were added */
		pHTC->Endpoints[EndpointID].CreditsToReturn += (A_INT16)nbufs;
  903fc3:	b144      	addi.n	a4, a4, 1
  903fc5:	246502        	s16i	a4, a6, 4
		pHTC->Endpoints[EndpointID].CreditsConsumed -= (A_INT16)nbufs;  
  903fc8:	246107        	l16ui	a4, a6, 14
              
	/* enqueue all buffers to the single mailbox */
	HIF_return_recv_buf(pHTC->hifHandle, pHTC->Endpoints[EndpointID].UpLinkPipeID, pBuffers);    
     
	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {       
		A_UINT32    epCreditMask = (1 << EndpointID);
  903fcb:	003104        	ssl	a3
  903fce:	00bb1a        	sll	a11, a11
		/* we are running normally */
		/* update pending credit counts with the number of buffers that were added */
		pHTC->Endpoints[EndpointID].CreditsToReturn += (A_INT16)nbufs;
		pHTC->Endpoints[EndpointID].CreditsConsumed -= (A_INT16)nbufs;  
  903fd1:	b044      	addi.n	a4, a4, -1
  903fd3:	246507        	s16i	a4, a6, 14
		/* update bit map that this endpoint has non-zero credits */
		pHTC->EpCreditPendingMap |= epCreditMask; 
  903fd6:	242286        	l32i	a4, a2, 0x218
  903fd9:	0b4402        	or	a4, a4, a11
  903fdc:	242686        	s32i	a4, a2, 0x218

		if (sendCreditFlag) {
  903fdf:	c951      	beqz.n	a5, 903ff4 <ReturnBuffers+0x60>
			HTCCheckAndSendCreditReport(pHTC, epCreditMask,&pHTC->Endpoints[EndpointID],EndpointID);
  903fe1:	da20      	mov.n	a10, a2
  903fe3:	b46c      	addi.n	a12, a6, 4
  903fe5:	dd30      	mov.n	a13, a3
  903fe7:	5bffc1        	call8	903eec <HTCCheckAndSendCreditReport>
  903fea:	d10f      	retw.n
	} else {
		/* we have not started yet so all return operations are simply adding buffers
		 * to the interface at startup, so we can keep track of how many total 
		 * credits we get */
		/* update global count that will be returned to the host */
		pHTC->TotalCredits += nbufs;
  903fec:	232294        	l32i	a3, a2, 0x250
  903fef:	b133      	addi.n	a3, a3, 1
  903ff1:	232694        	s32i	a3, a2, 0x250
  903ff4:	d10f      	retw.n
	...

00903ff8 <_HTC_ReturnBuffers>:
	HTCCheckAndSendCreditReport(pHTC, (1 << EndpointID),&pHTC->Endpoints[EndpointID],EndpointID);
}

LOCAL void _HTC_ReturnBuffers(htc_handle_t htcHandle, HTC_ENDPOINT_ID EndpointID,
			      adf_nbuf_t pBuffers)
{
  903ff8:	6c1004        	entry	a1, 32
	ReturnBuffers(htcHandle, EndpointID, pBuffers, TRUE);
  903ffb:	da20      	mov.n	a10, a2
  903ffd:	db30      	mov.n	a11, a3
  903fff:	dc40      	mov.n	a12, a4
  904001:	c0d1      	movi.n	a13, 1
  904003:	5bffe4        	call8	903f94 <ReturnBuffers>
  904006:	d10f      	retw.n

00904008 <_HTC_ReturnBuffersList>:
}

LOCAL void _HTC_ReturnBuffersList(htc_handle_t htcHandle,
				  HTC_ENDPOINT_ID EndpointID,
				  adf_nbuf_queue_t bufHead)
{
  904008:	6c1006        	entry	a1, 48
 * @return first buffer in queue
 */
static inline adf_nbuf_t 
adf_nbuf_queue_first(adf_nbuf_queue_t *head)
{
    return (__adf_nbuf_queue_first(head));
  90400b:	da10      	mov.n	a10, a1
  90400d:	9410      	s32i.n	a4, a1, 0
  90400f:	9511      	s32i.n	a5, a1, 4
  904011:	9612      	s32i.n	a6, a1, 8
  904013:	5bfda9        	call8	9036b8 <__adf_nbuf_queue_first>
  904016:	d4a0      	mov.n	a4, a10
	adf_nbuf_t netbuf, tmpNbuf;

	/* retrieve each nbuf in the queue */
	netbuf = adf_nbuf_queue_first(&bufHead);

	while (netbuf) {
  904018:	600014        	j	904030 <_HTC_ReturnBuffersList+0x28>
  90401b:	00da40        	extui	a10, a0, 13, 1
 * @return next buffer/packet
 */
static inline adf_nbuf_t
adf_nbuf_queue_next(adf_nbuf_t buf)
{
    return (__adf_nbuf_queue_next(buf));
  90401e:	5bfda8        	call8	9036c0 <__adf_nbuf_queue_next>
  904021:	d5a0      	mov.n	a5, a10

		tmpNbuf = netbuf;
		netbuf = adf_nbuf_queue_next(netbuf);

		ReturnBuffers(htcHandle, EndpointID, tmpNbuf, FALSE);
  904023:	dc40      	mov.n	a12, a4
  904025:	da20      	mov.n	a10, a2
  904027:	db30      	mov.n	a11, a3
  904029:	c0d0      	movi.n	a13, 0
  90402b:	5bffda        	call8	903f94 <ReturnBuffers>
	netbuf = adf_nbuf_queue_first(&bufHead);

	while (netbuf) {

		tmpNbuf = netbuf;
		netbuf = adf_nbuf_queue_next(netbuf);
  90402e:	d450      	mov.n	a4, a5
	adf_nbuf_t netbuf, tmpNbuf;

	/* retrieve each nbuf in the queue */
	netbuf = adf_nbuf_queue_first(&bufHead);

	while (netbuf) {
  904030:	654fe8        	bnez	a4, 90401c <_HTC_ReturnBuffersList+0x14>
		netbuf = adf_nbuf_queue_next(netbuf);

		ReturnBuffers(htcHandle, EndpointID, tmpNbuf, FALSE);
	}

	HTCCheckAndSendCreditReport(pHTC, (1 << EndpointID),&pHTC->Endpoints[EndpointID],EndpointID);
  904033:	033c09        	addx2	a12, a3, a3
  904036:	02cc0b        	addx8	a12, a12, a2
  904039:	c0b1      	movi.n	a11, 1
  90403b:	da20      	mov.n	a10, a2
  90403d:	003104        	ssl	a3
  904040:	00bb1a        	sll	a11, a11
  904043:	b4cc      	addi.n	a12, a12, 4
  904045:	dd30      	mov.n	a13, a3
  904047:	5bffa9        	call8	903eec <HTCCheckAndSendCreditReport>
  90404a:	d10f      	retw.n

0090404c <HTCProcessConnectMsg>:
	} while (FALSE);      
}
        
/* called in response to the arrival of a service connection message */
LOCAL void HTCProcessConnectMsg(HTC_CONTEXT *pHTC, HTC_CONNECT_SERVICE_MSG *pMsg)
{
  90404c:	6c1008        	entry	a1, 64
	HTC_SERVICE *pService = pHTC->pServiceList;
	A_UINT8 connectStatus = HTC_SERVICE_NOT_FOUND;
	adf_nbuf_t pBuffer;
	HTC_CONNECT_SERVICE_RESPONSE_MSG *pRspMsg;
	int metaDataOutLen = 0;
  90404f:	c060      	movi.n	a6, 0
  904051:	9610      	s32i.n	a6, a1, 0
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
    
	pBuffer = HTCAllocMsgBuffer(pHTC);
  904053:	da20      	mov.n	a10, a2
	HTC_SERVICE *pService = pHTC->pServiceList;
	A_UINT8 connectStatus = HTC_SERVICE_NOT_FOUND;
	adf_nbuf_t pBuffer;
	HTC_CONNECT_SERVICE_RESPONSE_MSG *pRspMsg;
	int metaDataOutLen = 0;
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
  904055:	243003        	l8ui	a4, a3, 3
  904058:	273002        	l8ui	a7, a3, 2
}
        
/* called in response to the arrival of a service connection message */
LOCAL void HTCProcessConnectMsg(HTC_CONTEXT *pHTC, HTC_CONNECT_SERVICE_MSG *pMsg)
{
	HTC_SERVICE *pService = pHTC->pServiceList;
  90405b:	252290        	l32i	a5, a2, 0x240
	adf_nbuf_t pBuffer;
	HTC_CONNECT_SERVICE_RESPONSE_MSG *pRspMsg;
	int metaDataOutLen = 0;
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
    
	pBuffer = HTCAllocMsgBuffer(pHTC);
  90405e:	5bff84        	call8	903e70 <HTCAllocMsgBuffer>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  904061:	c0ba      	movi.n	a11, 10
  904063:	9a14      	s32i.n	a10, a1, 16
  904065:	5bfd6c        	call8	903618 <__adf_nbuf_put_tail>
	/* note : this will be aligned */
	pRspMsg = (HTC_CONNECT_SERVICE_RESPONSE_MSG *)
                adf_nbuf_put_tail(pBuffer, sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
                                 
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
  904068:	197182        	l32r	a9, 8e0670 <_bss_end+0x3d2e68>
	HTC_SERVICE *pService = pHTC->pServiceList;
	A_UINT8 connectStatus = HTC_SERVICE_NOT_FOUND;
	adf_nbuf_t pBuffer;
	HTC_CONNECT_SERVICE_RESPONSE_MSG *pRspMsg;
	int metaDataOutLen = 0;
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
  90406b:	087711        	slli	a7, a7, 8
	pBuffer = HTCAllocMsgBuffer(pHTC);
	/* note : this will be aligned */
	pRspMsg = (HTC_CONNECT_SERVICE_RESPONSE_MSG *)
                adf_nbuf_put_tail(pBuffer, sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
                                 
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
  90406e:	8994      	l32i.n	a9, a9, 16
  904070:	db60      	mov.n	a11, a6
  904072:	c0ca      	movi.n	a12, 10
	HTC_SERVICE *pService = pHTC->pServiceList;
	A_UINT8 connectStatus = HTC_SERVICE_NOT_FOUND;
	adf_nbuf_t pBuffer;
	HTC_CONNECT_SERVICE_RESPONSE_MSG *pRspMsg;
	int metaDataOutLen = 0;
	A_UINT16 serviceId = adf_os_ntohs(pMsg->ServiceID);
  904074:	074702        	or	a7, a4, a7
  904077:	d4a0      	mov.n	a4, a10
	pBuffer = HTCAllocMsgBuffer(pHTC);
	/* note : this will be aligned */
	pRspMsg = (HTC_CONNECT_SERVICE_RESPONSE_MSG *)
                adf_nbuf_put_tail(pBuffer, sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
                                 
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
  904079:	0b9000        	callx8	a9
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONNECT_SERVICE_RESPONSE_ID);
  90407c:	c083      	movi.n	a8, 3
  90407e:	284401        	s8i	a8, a4, 1
	/* reflect the service ID for this connect attempt */
	pRspMsg->ServiceID = adf_os_htons(serviceId);
  904081:	078814        	srli	a8, a7, 8
  904084:	284402        	s8i	a8, a4, 2
	/* note : this will be aligned */
	pRspMsg = (HTC_CONNECT_SERVICE_RESPONSE_MSG *)
                adf_nbuf_put_tail(pBuffer, sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
                                 
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONNECT_SERVICE_RESPONSE_ID);
  904087:	264400        	s8i	a6, a4, 0
	/* reflect the service ID for this connect attempt */
	pRspMsg->ServiceID = adf_os_htons(serviceId);
  90408a:	274403        	s8i	a7, a4, 3

	while (pService) {
        
		if (pHTC->CurrentEpIndex >= ENDPOINT_MAX) {
  90408d:	c185      	movi.n	a8, 21
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONNECT_SERVICE_RESPONSE_ID);
	/* reflect the service ID for this connect attempt */
	pRspMsg->ServiceID = adf_os_htons(serviceId);

	while (pService) {
  90408f:	600079        	j	90410c <HTCProcessConnectMsg+0xc0>
  904092:	00002b        	mulsh	a0, a0, a0
        
		if (pHTC->CurrentEpIndex >= ENDPOINT_MAX) {
  904095:	22887b        	excw
  904098:	827b      	l32i.n	a2, a7, 44
			/* no more endpoints */
			connectStatus = HTC_SERVICE_NO_RESOURCES;
			break;    
		}

		if (serviceId == pService->ServiceID) {
  90409a:	295108        	l16ui	a9, a5, 16
  90409d:	779969        	bne	a9, a7, 90410a <HTCProcessConnectMsg+0xbe>
			A_UINT8 *pMetaDataOut;
            
			/* outgoing meta data resides in the space after the response message */
			pMetaDataOut = ((A_UINT8 *)pRspMsg) + sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG);
            
			if (pMsg->ServiceMetaLength != 0) {
  9040a0:	2d3008        	l8ui	a13, a3, 8
				/* the meta data follows the connect service message */
				pMetaDataIN = ((A_UINT8 *)pMsg) + sizeof(HTC_CONNECT_SERVICE_MSG);
  9040a3:	ba37      	addi.n	a7, a3, 10
  9040a5:	c0c0      	movi.n	a12, 0
  9040a7:	0d7c39        	movnez	a12, a7, a13
			}

			/* call the connect callback with the endpoint to use and pointers to meta data */
			connectStatus = pService->ProcessConnect(pService,
  9040aa:	8753      	l32i.n	a7, a5, 12
  9040ac:	da50      	mov.n	a10, a5
  9040ae:	ba4e      	addi.n	a14, a4, 10
  9040b0:	df10      	mov.n	a15, a1
  9040b2:	0b7000        	callx8	a7
  9040b5:	d8a0      	mov.n	a8, a10
								 pMsg->ServiceMetaLength,
								 pMetaDataOut,
								 &metaDataOutLen);
            
			/* check if the service accepted this connection request */
			if (HTC_SERVICE_SUCCESS == connectStatus) {
  9040b7:	65a05d        	bnez	a10, 904118 <HTCProcessConnectMsg+0xcc>
				/* set the length of the response meta data going back to the host */
				pRspMsg->ServiceMetaLength = (A_UINT8)metaDataOutLen;
  9040ba:	8710      	l32i.n	a7, a1, 0
  9040bc:	274408        	s8i	a7, a4, 8
				/* set the endpoint ID the host will now communicate over */
				pRspMsg->EndpointID = pHTC->CurrentEpIndex;
  9040bf:	272288        	l32i	a7, a2, 0x220
  9040c2:	274405        	s8i	a7, a4, 5
				/* return the maximum message size for this service */
				pRspMsg->MaxMsgSize = adf_os_htons((A_UINT16)pService->MaxSvcMsgSize);
  9040c5:	275014        	l8ui	a7, a5, 20
  9040c8:	274406        	s8i	a7, a4, 6
  9040cb:	275015        	l8ui	a7, a5, 21
  9040ce:	274407        	s8i	a7, a4, 7
				/* assign this endpoint to this service, this will be used in routing messages */
				pHTC->Endpoints[pHTC->CurrentEpIndex].pService = pService;
  9040d1:	272288        	l32i	a7, a2, 0x220
  9040d4:	077909        	addx2	a9, a7, a7
  9040d7:	02990b        	addx8	a9, a9, a2
  9040da:	9592      	s32i.n	a5, a9, 8
				/* set connection flags */
				pHTC->Endpoints[pHTC->CurrentEpIndex].ConnectionFlags = pMsg->ConnectionFlags;
  9040dc:	2a3004        	l8ui	a10, a3, 4
  9040df:	2b3005        	l8ui	a11, a3, 5
  9040e2:	08aa11        	slli	a10, a10, 8
  9040e5:	0aba02        	or	a10, a11, a10
  9040e8:	2a9508        	s16i	a10, a9, 16
                
				pHTC->Endpoints[pHTC->CurrentEpIndex].DownLinkPipeID = pMsg->DownLinkPipeID;
  9040eb:	2a3006        	l8ui	a10, a3, 6
				pHTC->Endpoints[pHTC->CurrentEpIndex].UpLinkPipeID = pMsg->UpLinkPipeID;
                
				/* mark that we are now connected */
				pService->ServiceFlags |= HTC_SERVICE_FLAGS_CONNECTED;
				/* bump up our index, this EP is now in use */
				pHTC->CurrentEpIndex++;   
  9040ee:	b177      	addi.n	a7, a7, 1
				/* assign this endpoint to this service, this will be used in routing messages */
				pHTC->Endpoints[pHTC->CurrentEpIndex].pService = pService;
				/* set connection flags */
				pHTC->Endpoints[pHTC->CurrentEpIndex].ConnectionFlags = pMsg->ConnectionFlags;
                
				pHTC->Endpoints[pHTC->CurrentEpIndex].DownLinkPipeID = pMsg->DownLinkPipeID;
  9040f0:	2a9418        	s8i	a10, a9, 24
				pHTC->Endpoints[pHTC->CurrentEpIndex].UpLinkPipeID = pMsg->UpLinkPipeID;
  9040f3:	233007        	l8ui	a3, a3, 7
  9040f6:	239419        	s8i	a3, a9, 25
                
				/* mark that we are now connected */
				pService->ServiceFlags |= HTC_SERVICE_FLAGS_CONNECTED;
  9040f9:	295109        	l16ui	a9, a5, 18
  9040fc:	c031      	movi.n	a3, 1
  9040fe:	039302        	or	a3, a9, a3
  904101:	235509        	s16i	a3, a5, 18
				/* bump up our index, this EP is now in use */
				pHTC->CurrentEpIndex++;   
  904104:	272688        	s32i	a7, a2, 0x220
  904107:	60000d        	j	904118 <HTCProcessConnectMsg+0xcc>
			}

			break;
		}       
        
		pService = pService->pNext;   
  90410a:	8550      	l32i.n	a5, a5, 0
	A_MEMZERO(pRspMsg,sizeof(HTC_CONNECT_SERVICE_RESPONSE_MSG));
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONNECT_SERVICE_RESPONSE_ID);
	/* reflect the service ID for this connect attempt */
	pRspMsg->ServiceID = adf_os_htons(serviceId);

	while (pService) {
  90410c:	655f84        	bnez	a5, 904094 <HTCProcessConnectMsg+0x48>
        
/* called in response to the arrival of a service connection message */
LOCAL void HTCProcessConnectMsg(HTC_CONTEXT *pHTC, HTC_CONNECT_SERVICE_MSG *pMsg)
{
	HTC_SERVICE *pService = pHTC->pServiceList;
	A_UINT8 connectStatus = HTC_SERVICE_NOT_FOUND;
  90410f:	c081      	movi.n	a8, 1
  904111:	600003        	j	904118 <HTCProcessConnectMsg+0xcc>
  904114:	0000c0        	excw

	while (pService) {
        
		if (pHTC->CurrentEpIndex >= ENDPOINT_MAX) {
			/* no more endpoints */
			connectStatus = HTC_SERVICE_NO_RESOURCES;
  904117:	8313      	l32i.n	a3, a1, 12
	}
                   
	pRspMsg->Status = connectStatus;    
    
	/* send out the response message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer); 
  904119:	718228        	blt	a8, a1, 904145 <HTCProcessConfigPipeMsg+0x19>
		}       
        
		pService = pService->pNext;   
	}
                   
	pRspMsg->Status = connectStatus;    
  90411c:	440423        	excw
    
	/* send out the response message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer); 
  90411f:	32898c        	excw
  904122:	14da20        	l32r	a4, 8fa9a4 <memset+0x15808>
  904125:	c0b0      	movi.n	a11, 0
  904127:	0b3000        	callx8	a3
  90412a:	d10f      	retw.n

0090412c <HTCProcessConfigPipeMsg>:
}

LOCAL void HTCProcessConfigPipeMsg(HTC_CONTEXT *pHTC, HTC_CONFIG_PIPE_MSG *pMsg)
{
  90412c:	6c1004        	entry	a1, 32
	adf_nbuf_t pBuffer;
	HTC_CONFIG_PIPE_RESPONSE_MSG *pRspMsg;
        
	pBuffer = HTCAllocMsgBuffer(pHTC);
  90412f:	022a02        	or	a10, a2, a2
  904132:	5bff4f        	call8	903e70 <HTCAllocMsgBuffer>
  904135:	c0b4      	movi.n	a11, 4
  904137:	d6a0      	mov.n	a6, a10
  904139:	5bfd37        	call8	903618 <__adf_nbuf_put_tail>
       
	/* note : this will be aligned */
	pRspMsg = (HTC_CONFIG_PIPE_RESPONSE_MSG *)
                adf_nbuf_put_tail(pBuffer, sizeof(HTC_CONFIG_PIPE_RESPONSE_MSG));    
              
	A_MEMZERO(pRspMsg,sizeof(HTC_CONFIG_PIPE_RESPONSE_MSG));
  90413c:	157182        	l32r	a5, 8e0744 <_bss_end+0x3d2f3c>
  90413f:	c0b0      	movi.n	a11, 0
  904141:	8754      	l32i.n	a7, a5, 16
  904143:	c0c4      	movi.n	a12, 4
  904145:	d4a0      	mov.n	a4, a10
  904147:	0b7000        	callx8	a7
    
	pRspMsg->MessageID = adf_os_htons(HTC_MSG_CONFIG_PIPE_RESPONSE_ID);
  90414a:	c086      	movi.n	a8, 6
  90414c:	c070      	movi.n	a7, 0
  90414e:	274400        	s8i	a7, a4, 0
  904151:	284401        	s8i	a8, a4, 1
	/* reflect the service ID for this connect attempt */
	pRspMsg->PipeID = pMsg->PipeID;
  904154:	283002        	l8ui	a8, a3, 2
  904157:	284402        	s8i	a8, a4, 2

	if ( HIF_is_pipe_supported(pHTC->hifHandle, pMsg->PipeID) ) {
  90415a:	28527d        	l32i	a8, a5, 0x1f4
  90415d:	2a229a        	l32i	a10, a2, 0x268
  904160:	2b3002        	l8ui	a11, a3, 2
  904163:	0b8000        	callx8	a8
  904166:	c9a2      	beqz.n	a10, 90417c <HTCProcessConfigPipeMsg+0x50>
		pRspMsg->Status = 0;            
  904168:	274403        	s8i	a7, a4, 3
	} else {
		pRspMsg->Status = 1; 
		goto config_done;
	}

	if ( (pHTC->TotalCreditsAssigned + pMsg->CreditCount) <= pHTC->TotalCredits ) {
  90416b:	283003        	l8ui	a8, a3, 3
  90416e:	272295        	l32i	a7, a2, 0x254
  904171:	a787      	add.n	a7, a8, a7
  904173:	282294        	l32i	a8, a2, 0x250
  904176:	77821e        	blt	a8, a7, 904198 <HTCProcessConfigPipeMsg+0x6c>
  904179:	600005        	j	904182 <HTCProcessConfigPipeMsg+0x56>
	pRspMsg->PipeID = pMsg->PipeID;

	if ( HIF_is_pipe_supported(pHTC->hifHandle, pMsg->PipeID) ) {
		pRspMsg->Status = 0;            
	} else {
		pRspMsg->Status = 1; 
  90417c:	c031      	movi.n	a3, 1
  90417e:	600018        	j	90419a <HTCProcessConfigPipeMsg+0x6e>
  904181:	002726        	excw
		goto config_done;
	}

	if ( (pHTC->TotalCreditsAssigned + pMsg->CreditCount) <= pHTC->TotalCredits ) {
		pHTC->TotalCreditsAssigned += pMsg->CreditCount;
  904184:	9524      	s32i.n	a5, a2, 16
	} else {
		pRspMsg->Status = 2;
		goto config_done;
	}
    
	HIF_config_pipe(pHTC->hifHandle, pMsg->PipeID, pMsg->CreditCount);
  904186:	527a2a        	call0	8a2a30 <_bss_end+0x395228>
  904189:	229a2b        	movi	a2, 0xfffff92b
  90418c:	30022c        	excw
  90418f:	30030b        	excw
  904192:	400060        	excw
  904195:	000500        	syscall
	}

	if ( (pHTC->TotalCreditsAssigned + pMsg->CreditCount) <= pHTC->TotalCredits ) {
		pHTC->TotalCreditsAssigned += pMsg->CreditCount;
	} else {
		pRspMsg->Status = 2;
  904198:	c032      	movi.n	a3, 2
  90419a:	234403        	s8i	a3, a4, 3
    
	HIF_config_pipe(pHTC->hifHandle, pMsg->PipeID, pMsg->CreditCount);
    
config_done:      
	/* send out the response message */
	HTC_SendMsg(pHTC, ENDPOINT0, pBuffer);             
  90419d:	137182        	l32r	a3, 8e07a8 <_bss_end+0x3d2fa0>
  9041a0:	da20      	mov.n	a10, a2
  9041a2:	233289        	l32i	a3, a3, 0x224
  9041a5:	c0b0      	movi.n	a11, 0
  9041a7:	dc60      	mov.n	a12, a6
  9041a9:	0b3000        	callx8	a3
  9041ac:	d10f      	retw.n
	...

009041b0 <HTCControlSvcProcessMsg>:
}

/* process an incomming control message from the host */
LOCAL void HTCControlSvcProcessMsg(HTC_ENDPOINT_ID EndpointID, adf_nbuf_t hdr_buf,
				   adf_nbuf_t pBuffers, void *arg)
{  
  9041b0:	6c1006        	entry	a1, 48
	a_uint8_t *anbdata;
	a_uint32_t anblen;
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)arg;
	HTC_UNKNOWN_MSG  *pMsg;
	
	adf_os_assert(hdr_buf == ADF_NBUF_NULL);
  9041b3:	c831      	beqz.n	a3, 9041b8 <HTCControlSvcProcessMsg+0x8>
  9041b5:	63fffc        	j	9041b5 <HTCControlSvcProcessMsg+0x5>
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  9041b8:	b41b      	addi.n	a11, a1, 4
  9041ba:	da40      	mov.n	a10, a4
  9041bc:	dc10      	mov.n	a12, a1
  9041be:	5bfd32        	call8	903688 <__adf_nbuf_peek_header>

	/* we assume buffers are aligned such that we can access the message
	 * parameters directly*/
	adf_nbuf_peek_header(pBuffers, &anbdata, &anblen);
	pMsg = (HTC_UNKNOWN_MSG *)anbdata;
  9041c1:	8b11      	l32i.n	a11, a1, 4
    
	/* we cannot handle fragmented messages across buffers */
    
	switch ( adf_os_ntohs(pMsg->MessageID) ) {        
  9041c3:	28b000        	l8ui	a8, a11, 0
  9041c6:	26b001        	l8ui	a6, a11, 1
  9041c9:	088811        	slli	a8, a8, 8
  9041cc:	086802        	or	a8, a6, a8
		break;            
        case HTC_MSG_SETUP_COMPLETE_ID:
                /* the host has indicated that it has completed all
		   setup tasks and we can now let the services take over to
		   run the rest of the application */
		setupComplete = TRUE;  
  9041cf:	c061      	movi.n	a6, 1
	adf_nbuf_peek_header(pBuffers, &anbdata, &anblen);
	pMsg = (HTC_UNKNOWN_MSG *)anbdata;
    
	/* we cannot handle fragmented messages across buffers */
    
	switch ( adf_os_ntohs(pMsg->MessageID) ) {        
  9041d1:	688417        	beqi	a8, 4, 9041ec <HTCControlSvcProcessMsg+0x3c>
  9041d4:	68850d        	beqi	a8, 5, 9041e5 <HTCControlSvcProcessMsg+0x35>
  9041d7:	688202        	beqi	a8, 2, 9041dd <HTCControlSvcProcessMsg+0x2d>
  9041da:	60000c        	j	9041ea <HTCControlSvcProcessMsg+0x3a>
        case HTC_MSG_CONNECT_SERVICE_ID:
		HTCProcessConnectMsg(pHTC, (HTC_CONNECT_SERVICE_MSG *)pMsg); 
  9041dd:	da50      	mov.n	a10, a5
  9041df:	5bff9b        	call8	90404c <HTCProcessConnectMsg>
  9041e2:	600004        	j	9041ea <HTCControlSvcProcessMsg+0x3a>
		break;
        case HTC_MSG_CONFIG_PIPE_ID:
		HTCProcessConfigPipeMsg(pHTC, (HTC_CONFIG_PIPE_MSG *)pMsg); 
  9041e5:	da50      	mov.n	a10, a5
  9041e7:	5bffd1        	call8	90412c <HTCProcessConfigPipeMsg>

/* process an incomming control message from the host */
LOCAL void HTCControlSvcProcessMsg(HTC_ENDPOINT_ID EndpointID, adf_nbuf_t hdr_buf,
				   adf_nbuf_t pBuffers, void *arg)
{  
	A_BOOL setupComplete = FALSE;
  9041ea:	d630      	mov.n	a6, a3
		break;
        default:
		;
	}  
        
	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {
  9041ec:	285292        	l32i	a8, a5, 0x248
  9041ef:	137182        	l32r	a3, 8e07f8 <_bss_end+0x3d2ff0>
  9041f2:	7f8710        	bbci	a8, 31, 904206 <HTCControlSvcProcessMsg+0x56>
		/* recycle buffer only if we are fully running */
		HTC_ReturnBuffers(pHTC, ENDPOINT0,pBuffers);
  9041f5:	223287        	l32i	a2, a3, 0x21c
  9041f8:	da50      	mov.n	a10, a5
  9041fa:	c0b0      	movi.n	a11, 0
  9041fc:	dc40      	mov.n	a12, a4
  9041fe:	0b2000        	callx8	a2
  904201:	60001c        	j	904221 <HTCControlSvcProcessMsg+0x71>
  904204:	0000c0        	excw
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  904207:	b8da      	addi.n	a10, a13, 8
  904209:	400222        	excw
	} else {
		/* supply some head-room again */
		adf_nbuf_push_head(pBuffers, HTC_HDR_LENGTH);
            
		/* otherwise return the packet back to mbox */
		HIF_return_recv_buf(pHTC->hifHandle, pHTC->Endpoints[EndpointID].UpLinkPipeID, pBuffers);        
  90420c:	095bfc        	excw
  90420f:	6b0522        	bgei	a0, 5, 904235 <HTCControlSvcProcessMsg+0x85>
  904212:	0b2332        	sext	a3, a2, 18
  904215:	7c2a52        	bge	a2, a12, 90426b <AdjustCreditThreshold+0x33>
  904218:	9a2b      	s32i.n	a10, a2, 44
  90421a:	2019dc        	l16si	a0, a1, 0x1b8
  90421d:	400b30        	excw
  904220:	00c961        	excw
	}

	if (setupComplete) {        
		/* mark that setup has completed */
		pHTC->StateFlags |= HTC_STATE_SETUP_COMPLETE; 
  904223:	235292        	l32i	a3, a5, 0x248
  904226:	c021      	movi.n	a2, 1
  904228:	023202        	or	a2, a3, a2
  90422b:	225692        	s32i	a2, a5, 0x248
		if (pHTC->SetupCompleteCb != NULL) {
  90422e:	225293        	l32i	a2, a5, 0x24c
  904231:	c821      	beqz.n	a2, 904236 <HTCControlSvcProcessMsg+0x86>
			pHTC->SetupCompleteCb();
  904233:	0b2000        	callx8	a2
  904236:	d10f      	retw.n

00904238 <AdjustCreditThreshold>:
					  buf, 
					  pHTC->Endpoints[current_eid].pService->ServiceCtx);
}

LOCAL void AdjustCreditThreshold(HTC_ENDPOINT  *pEndpoint)
{
  904238:	6c1004        	entry	a1, 32
	A_INT16 creditsOutstanding = pEndpoint->CreditsToReturn + pEndpoint->CreditsConsumed;
  90423b:	292105        	l16ui	a9, a2, 10
  90423e:	282100        	l16ui	a8, a2, 0
  904241:	a898      	add.n	a8, a9, a8
        /* set the new threshold based on the number of credits that have been consumed
         * and which have not been returned by the app.
         * Note: it is okay for this threshold to be zero which indicates no threshold 
         * is in use */    
	switch (pEndpoint->ConnectionFlags & HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_MASK) {
  904243:	292106        	l16ui	a9, a2, 12
					  pHTC->Endpoints[current_eid].pService->ServiceCtx);
}

LOCAL void AdjustCreditThreshold(HTC_ENDPOINT  *pEndpoint)
{
	A_INT16 creditsOutstanding = pEndpoint->CreditsToReturn + pEndpoint->CreditsConsumed;
  904246:	088832        	sext	a8, a8, 15
        /* set the new threshold based on the number of credits that have been consumed
         * and which have not been returned by the app.
         * Note: it is okay for this threshold to be zero which indicates no threshold 
         * is in use */    
	switch (pEndpoint->ConnectionFlags & HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_MASK) {
  904249:	090941        	extui	a9, a9, 0, 2
  90424c:	689108        	beqi	a9, 1, 904258 <AdjustCreditThreshold+0x20>
  90424f:	c89e      	beqz.n	a9, 904261 <AdjustCreditThreshold+0x29>
  904251:	69920f        	bnei	a9, 2, 904264 <AdjustCreditThreshold+0x2c>
  904254:	600006        	j	90425e <AdjustCreditThreshold+0x26>
  904257:	000818        	src	a8, a0, a0
        case HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_ONE_FOURTH :
		creditsOutstanding >>= 2;
		break;                    
        case HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_ONE_HALF :
		creditsOutstanding >>= 1;
  90425a:	126000        	l32r	a2, 8dc25c <_bss_end+0x3cea54>
		break;
  90425d:	050888        	excw
        case HTC_CONNECT_FLAGS_THRESHOLD_LEVEL_THREE_FOURTHS :  
		creditsOutstanding = (creditsOutstanding * 3) >> 2;                  
  904260:	090828        	mull	a8, a0, a9
  904263:	122825        	l32r	a2, 8ce2f8 <_bss_end+0x3c0af0>
		break;
		/* default case is unity */    
	}
    
	pEndpoint->CreditReturnThreshhold = creditsOutstanding;
  904266:	04d10f        	subx8	a1, a13, a4
  904269:	000000        	ill

0090426c <_HTC_SendMsg>:
	ReturnBuffers(htcHandle, EndpointID, pBuffers, TRUE);
}
 
LOCAL void _HTC_SendMsg(htc_handle_t htcHandle, HTC_ENDPOINT_ID EndpointID,
			adf_nbuf_t pBuffers)
{
  90426c:	6c1008        	entry	a1, 64
 * @return data pointer to typecast into your priv structure
 */
static inline a_uint8_t *
adf_nbuf_get_priv(adf_nbuf_t buf)
{
    return (__adf_nbuf_get_priv(buf));
  90426f:	044a02        	or	a10, a4, a4
  904272:	5bfc78        	call8	903454 <__adf_nbuf_get_priv>
  904275:	d6a0      	mov.n	a6, a10
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  904277:	da40      	mov.n	a10, a4
  904279:	5bfcfb        	call8	903668 <__adf_nbuf_len>
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  90427c:	c0b8      	movi.n	a11, 8
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  90427e:	d7a0      	mov.n	a7, a10
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  904280:	da40      	mov.n	a10, a4
  904282:	5bfc4e        	call8	9033bc <__adf_nbuf_push_head>
	 * Note: in HTCSendDoneHandler(), we undo this so that the caller get's it's buffer
	 * back untainted */   
	pHTCHdr = (HTC_FRAME_HDR *)adf_nbuf_push_head(pBuffers, HTC_HDR_LENGTH);
    
	/* flag that this is the header buffer that was modified */
	ctx->htc_flags |= HTC_FLAGS_BUF_HDR;   
  904285:	296001        	l8ui	a9, a6, 1
  904288:	c480      	movi.n	a8, 64
  90428a:	089802        	or	a8, a9, a8
  90428d:	286401        	s8i	a8, a6, 1
	/* mark where this buffer came from */
	ctx->end_point = EndpointID;      
  904290:	030847        	extui	a8, a3, 0, 8
  904293:	286400        	s8i	a8, a6, 0
	/* the header start is ALWAYS aligned since we DMA it directly */

        /* set some fields, the rest of them will be filled below when we check for
	 * trailer space */
	pHTCHdr->Flags = 0;
  904296:	c060      	movi.n	a6, 0
  904298:	26a401        	s8i	a6, a10, 1
	pHTCHdr->EndpointID = EndpointID;    
  90429b:	28a400        	s8i	a8, a10, 0
		HTC_RECORD_HDR    *pRecHdr;
		int               pipeMaxLen;
		A_UINT32          roomForPipeMaxLen;
                          
		/* figure out how much room the last buffer can spare */
		pipeMaxLen = HIF_get_max_msg_len(pHTC->hifHandle,
  90429e:	167182        	l32r	a6, 8e08a8 <_bss_end+0x3d30a0>
  9042a1:	033809        	addx2	a8, a3, a3
  9042a4:	02880b        	addx8	a8, a8, a2
  9042a7:	2b8018        	l8ui	a11, a8, 24
  9042aa:	26627e        	l32i	a6, a6, 0x1f8
  9042ad:	d5a0      	mov.n	a5, a10
  9042af:	2a229a        	l32i	a10, a2, 0x268
  9042b2:	0b6000        	callx8	a6
  9042b5:	d6a0      	mov.n	a6, a10
 * @return amount of head room
 */
static inline a_uint32_t
adf_nbuf_headroom(adf_nbuf_t buf)
{
    return (__adf_nbuf_headroom(buf));
  9042b7:	da40      	mov.n	a10, a4
  9042b9:	5bfce1        	call8	903640 <__adf_nbuf_headroom>
						 pHTC->Endpoints[EndpointID].DownLinkPipeID);
		roomForPipeMaxLen = pipeMaxLen - adf_nbuf_headroom(pBuffers) - adf_nbuf_len(pBuffers);
  9042bc:	0a660c        	sub	a6, a6, a10
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  9042bf:	da40      	mov.n	a10, a4
  9042c1:	5bfce9        	call8	903668 <__adf_nbuf_len>
  9042c4:	0a660c        	sub	a6, a6, a10
 * @return amount of tail room 
 */
static inline a_uint32_t
adf_nbuf_tailroom(adf_nbuf_t buf)
{
    return (__adf_nbuf_tailroom(buf));
  9042c7:	da40      	mov.n	a10, a4
  9042c9:	5bfce0        	call8	90364c <__adf_nbuf_tailroom>
		if ( roomForPipeMaxLen < 0 ) {
			roomForPipeMaxLen = 0;
		}
                        
		room = adf_os_min( adf_nbuf_tailroom(pBuffers), roomForPipeMaxLen);
  9042cc:	dd60      	mov.n	a13, a6
  9042ce:	76ab06        	bgeu	a10, a6, 9042d8 <_HTC_SendMsg+0x6c>
  9042d1:	da40      	mov.n	a10, a4
  9042d3:	5bfcde        	call8	90364c <__adf_nbuf_tailroom>
  9042d6:	dda0      	mov.n	a13, a10
		if (room < (int)(sizeof(HTC_CREDIT_REPORT) + sizeof(HTC_RECORD_HDR))) {
  9042d8:	6bd402        	bgei	a13, 4, 9042de <_HTC_SendMsg+0x72>
  9042db:	6000bd        	j	90439c <_HTC_SendMsg+0x130>
		/* note, a record header only has 8 bit fields, so this is safe.
		 * we need an uncached pointer here too */            
		totalReportBytes = 0;
        
		/* get a copy */        
		creditsPendingMap = pHTC->EpCreditPendingMap;   
  9042de:	262286        	l32i	a6, a2, 0x218
                           
		/* test pending map to see if we can send a report , if any
		 * credits are available, we might as well send them on the 
		 * unused space in the buffer */
		if (creditsPendingMap) { 
  9042e1:	6460b7        	beqz	a6, 90439c <_HTC_SendMsg+0x130>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  9042e4:	da40      	mov.n	a10, a4
  9042e6:	c0b2      	movi.n	a11, 2
  9042e8:	9d15      	s32i.n	a13, a1, 20
  9042ea:	5bfccb        	call8	903618 <__adf_nbuf_put_tail>
			pRecHdr = (HTC_RECORD_HDR *)adf_nbuf_put_tail(pBuffers,
							      sizeof(HTC_RECORD_HDR));
            
			/* set the ID, the length will be updated with the number of credit reports we
			 * can fit (see below) */
			pRecHdr->RecordID = HTC_RECORD_CREDITS;
  9042ed:	c081      	movi.n	a8, 1
  9042ef:	28a400        	s8i	a8, a10, 0
			pRecHdr->Length = 0;
  9042f2:	c080      	movi.n	a8, 0
  9042f4:	28a401        	s8i	a8, a10, 1
			/* the credit report follows the record header */         
			totalReportBytes += sizeof(HTC_RECORD_HDR);
			room -= sizeof(HTC_RECORD_HDR);
  9042f7:	8d15      	l32i.n	a13, a1, 20
  9042f9:	dea0      	mov.n	a14, a10
  9042fb:	2ddcfe        	addi	a13, a13, -2
  9042fe:	dc20      	mov.n	a12, a2
			/* set the ID, the length will be updated with the number of credit reports we
			 * can fit (see below) */
			pRecHdr->RecordID = HTC_RECORD_CREDITS;
			pRecHdr->Length = 0;
			/* the credit report follows the record header */         
			totalReportBytes += sizeof(HTC_RECORD_HDR);
  904300:	c092      	movi.n	a9, 2
			room -= sizeof(HTC_RECORD_HDR);
            
			/* walkthrough pending credits map and build the records */
			for (i = 0; 
  904302:	c080      	movi.n	a8, 0
  904304:	600077        	j	90437f <_HTC_SendMsg+0x113>
  904307:	00c0a1        	excw
			     (creditsPendingMap != 0) && (room >= (int)sizeof(HTC_CREDIT_REPORT)); 
			     i++) {                
				compareMask = (1 << i);
  90430a:	008104        	ssl	a8
  90430d:	00af1a        	sll	a15, a10
				if (compareMask & creditsPendingMap) {
  904310:	76f066        	bnone	a15, a6, 90437a <_HTC_SendMsg+0x10e>
  904313:	c0b2      	movi.n	a11, 2
  904315:	da40      	mov.n	a10, a4
  904317:	9811      	s32i.n	a8, a1, 4
  904319:	9912      	s32i.n	a9, a1, 8
  90431b:	9c14      	s32i.n	a12, a1, 16
  90431d:	9d15      	s32i.n	a13, a1, 20
  90431f:	9e13      	s32i.n	a14, a1, 12
  904321:	9f10      	s32i.n	a15, a1, 0
  904323:	5bfcbd        	call8	903618 <__adf_nbuf_put_tail>
									    sizeof(HTC_CREDIT_REPORT));
                                    
					/* clear pending mask, we are going to return all these credits */
					creditsPendingMap &= ~(compareMask);
					/* add this record */
					pCreditRpt->EndpointID = i;
  904326:	8811      	l32i.n	a8, a1, 4
                        
					pCreditRpt = (HTC_CREDIT_REPORT *)adf_nbuf_put_tail(pBuffers,
									    sizeof(HTC_CREDIT_REPORT));
                                    
					/* clear pending mask, we are going to return all these credits */
					creditsPendingMap &= ~(compareMask);
  904328:	8f10      	l32i.n	a15, a1, 0
					/* add this record */
					pCreditRpt->EndpointID = i;
  90432a:	28a400        	s8i	a8, a10, 0
					pCreditRpt->Credits = (A_UINT8)pHTC->Endpoints[i].CreditsToReturn;
  90432d:	8c14      	l32i.n	a12, a1, 16
                        
					pCreditRpt = (HTC_CREDIT_REPORT *)adf_nbuf_put_tail(pBuffers,
									    sizeof(HTC_CREDIT_REPORT));
                                    
					/* clear pending mask, we are going to return all these credits */
					creditsPendingMap &= ~(compareMask);
  90432f:	c7bf      	movi.n	a11, -1
  904331:	0fbf03        	xor	a15, a11, a15
					/* add this record */
					pCreditRpt->EndpointID = i;
					pCreditRpt->Credits = (A_UINT8)pHTC->Endpoints[i].CreditsToReturn;
  904334:	2bc102        	l16ui	a11, a12, 4
                        
					pCreditRpt = (HTC_CREDIT_REPORT *)adf_nbuf_put_tail(pBuffers,
									    sizeof(HTC_CREDIT_REPORT));
                                    
					/* clear pending mask, we are going to return all these credits */
					creditsPendingMap &= ~(compareMask);
  904337:	0f6601        	and	a6, a6, a15
					/* add this record */
					pCreditRpt->EndpointID = i;
					pCreditRpt->Credits = (A_UINT8)pHTC->Endpoints[i].CreditsToReturn;
  90433a:	2ba401        	s8i	a11, a10, 1
					/* remove pending credits, we always send deltas */
					pHTC->Endpoints[i].CreditsToReturn = 0; 
  90433d:	c0a0      	movi.n	a10, 0
  90433f:	2ac502        	s16i	a10, a12, 4
					/* adjust new threshold for this endpoint if needed */
					CHECK_AND_ADJUST_CREDIT_THRESHOLD(&pHTC->Endpoints[i]);
  904342:	2ac108        	l16ui	a10, a12, 16
  904345:	8912      	l32i.n	a9, a1, 8
  904347:	8d15      	l32i.n	a13, a1, 20
  904349:	8e13      	l32i.n	a14, a1, 12
  90434b:	7da71a        	bbci	a10, 29, 904369 <_HTC_SendMsg+0xfd>
  90434e:	088a09        	addx2	a10, a8, a8
  904351:	02aa0b        	addx8	a10, a10, a2
  904354:	b4aa      	addi.n	a10, a10, 4
  904356:	9811      	s32i.n	a8, a1, 4
  904358:	2c1604        	s32i	a12, a1, 16
  90435b:	5bffb7        	call8	904238 <AdjustCreditThreshold>
  90435e:	8e13      	l32i.n	a14, a1, 12
  904360:	8d15      	l32i.n	a13, a1, 20
  904362:	8c14      	l32i.n	a12, a1, 16
  904364:	8912      	l32i.n	a9, a1, 8
  904366:	281201        	l32i	a8, a1, 4
					/* update this record length */
					pRecHdr->Length += sizeof(HTC_CREDIT_REPORT);
  904369:	2ae001        	l8ui	a10, a14, 1
					room -= sizeof(HTC_CREDIT_REPORT);
  90436c:	2ddcfe        	addi	a13, a13, -2
					/* remove pending credits, we always send deltas */
					pHTC->Endpoints[i].CreditsToReturn = 0; 
					/* adjust new threshold for this endpoint if needed */
					CHECK_AND_ADJUST_CREDIT_THRESHOLD(&pHTC->Endpoints[i]);
					/* update this record length */
					pRecHdr->Length += sizeof(HTC_CREDIT_REPORT);
  90436f:	b2aa      	addi.n	a10, a10, 2
  904371:	2ae401        	s8i	a10, a14, 1
					room -= sizeof(HTC_CREDIT_REPORT);
					totalReportBytes += sizeof(HTC_CREDIT_REPORT);
  904374:	299c02        	addi	a9, a9, 2

					if ( room < sizeof(HTC_CREDIT_REPORT) ) {
  904377:	6ed20a        	bltui	a13, 2, 904385 <_HTC_SendMsg+0x119>
			room -= sizeof(HTC_RECORD_HDR);
            
			/* walkthrough pending credits map and build the records */
			for (i = 0; 
			     (creditsPendingMap != 0) && (room >= (int)sizeof(HTC_CREDIT_REPORT)); 
			     i++) {                
  90437a:	b188      	addi.n	a8, a8, 1
  90437c:	2ccc18        	addi	a12, a12, 24
			totalReportBytes += sizeof(HTC_RECORD_HDR);
			room -= sizeof(HTC_RECORD_HDR);
            
			/* walkthrough pending credits map and build the records */
			for (i = 0; 
			     (creditsPendingMap != 0) && (room >= (int)sizeof(HTC_CREDIT_REPORT)); 
  90437f:	6ad202        	blti	a13, 2, 904385 <_HTC_SendMsg+0x119>
			/* the credit report follows the record header */         
			totalReportBytes += sizeof(HTC_RECORD_HDR);
			room -= sizeof(HTC_RECORD_HDR);
            
			/* walkthrough pending credits map and build the records */
			for (i = 0; 
  904382:	656f82        	bnez	a6, 904308 <_HTC_SendMsg+0x9c>
					}
				}
			}
            
			/* update new pending credits map */       
			pHTC->EpCreditPendingMap = creditsPendingMap;
  904385:	262686        	s32i	a6, a2, 0x218
		}
        
		if (totalReportBytes <= 0) {
  904388:	6a9110        	blti	a9, 1, 90439c <_HTC_SendMsg+0x130>
		 */
        
		/* set header option bytes */ 
		pHTCHdr->ControlBytes[0] = totalReportBytes;
		/* HTC frame contains a trailer */
		pHTCHdr->Flags |= HTC_FLAGS_RECV_TRAILER;
  90438b:	285001        	l8ui	a8, a5, 1
  90438e:	c062      	movi.n	a6, 2
  904390:	068602        	or	a6, a8, a6
		 * The trailer can have at most 1 credit record with up to 32  reports in the record.
		 * The trailer can have at most 1 lookahead record with only 1 lookahead report in the record.
		 */
        
		/* set header option bytes */ 
		pHTCHdr->ControlBytes[0] = totalReportBytes;
  904393:	295404        	s8i	a9, a5, 4
		/* HTC frame contains a trailer */
		pHTCHdr->Flags |= HTC_FLAGS_RECV_TRAILER;
  904396:	265401        	s8i	a6, a5, 1
		/* increment total size by the reports we added */
		totsz += totalReportBytes;
  904399:	097708        	add	a7, a7, a9
          
	if (totsz == 0) {
	}
    
	/* set length for message (this includes any reports that were added above) */
	pHTCHdr->PayloadLen = adf_os_htons(totsz);  
  90439c:	07074f        	extui	a7, a7, 0, 16
  90439f:	078614        	srli	a6, a7, 8
  9043a2:	265402        	s8i	a6, a5, 2
  9043a5:	275403        	s8i	a7, a5, 3
	HIF_send_buffer(pHTC->hifHandle, pHTC->Endpoints[EndpointID].DownLinkPipeID, pBuffers);       
  9043a8:	033309        	addx2	a3, a3, a3
  9043ab:	157182        	l32r	a5, 8e09b4 <_bss_end+0x3d31ac>
  9043ae:	02330b        	addx8	a3, a3, a2
  9043b1:	25527b        	l32i	a5, a5, 0x1ec
  9043b4:	2a229a        	l32i	a10, a2, 0x268
  9043b7:	2b3018        	l8ui	a11, a3, 24
  9043ba:	044c02        	or	a12, a4, a4
  9043bd:	0b5000        	callx8	a5
  9043c0:	d10f      	retw.n
	...

009043c4 <HTCMsgRecvHandler>:

}
            
/* callback from the mailbox hardware layer when a full message arrives */
LOCAL void HTCMsgRecvHandler(adf_nbuf_t hdr_buf, adf_nbuf_t buffer, void *context)
{
  9043c4:	6c1008        	entry	a1, 64
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)context;
	adf_nbuf_t tmp_nbuf;
                
	if (hdr_buf == ADF_NBUF_NULL) {
		/* HTC hdr is not in the hdr_buf */
		tmp_nbuf = buffer;
  9043c7:	d530      	mov.n	a5, a3
  9043c9:	022539        	movnez	a5, a2, a2
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  9043cc:	da50      	mov.n	a10, a5
  9043ce:	b41b      	addi.n	a11, a1, 4
  9043d0:	dc10      	mov.n	a12, a1
  9043d2:	5bfcad        	call8	903688 <__adf_nbuf_peek_header>
	else {
		tmp_nbuf = hdr_buf;
	}
                
	adf_nbuf_peek_header(tmp_nbuf, &anbdata, &anblen);        
	pHTCHdr = (HTC_FRAME_HDR *)anbdata; 
  9043d5:	8911      	l32i.n	a9, a1, 4
	HTC_CONTEXT *pHTC = (HTC_CONTEXT *)context;
	adf_nbuf_t tmp_nbuf;
                
	if (hdr_buf == ADF_NBUF_NULL) {
		/* HTC hdr is not in the hdr_buf */
		tmp_nbuf = buffer;
  9043d7:	d750      	mov.n	a7, a5
	eid = pHTCHdr->EndpointID; 
    
	pEndpoint = &pHTC->Endpoints[eid];
	eidMask = 1 << eid;

	if (pHTCHdr->Flags & HTC_FLAGS_CREDIT_REDISTRIBUTION) {
  9043d9:	259001        	l8ui	a5, a9, 1
	adf_nbuf_peek_header(tmp_nbuf, &anbdata, &anblen);        
	pHTCHdr = (HTC_FRAME_HDR *)anbdata; 
      
	totsz = adf_os_ntohs(pHTCHdr->PayloadLen); 
    
	eid = pHTCHdr->EndpointID; 
  9043dc:	269000        	l8ui	a6, a9, 0
    
	pEndpoint = &pHTC->Endpoints[eid];
	eidMask = 1 << eid;

	if (pHTCHdr->Flags & HTC_FLAGS_CREDIT_REDISTRIBUTION) {
  9043df:	7d5f76        	bbsi	a5, 29, 904459 <HTCMsgRecvHandler+0x95>
      
	totsz = adf_os_ntohs(pHTCHdr->PayloadLen); 
    
	eid = pHTCHdr->EndpointID; 
    
	pEndpoint = &pHTC->Endpoints[eid];
  9043e2:	066509        	addx2	a5, a6, a6
		 * Byte 0 */
		RedistributeCredit(tmp_nbuf, pHTCHdr->ControlBytes[0]);
		return;
	}

	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {
  9043e5:	284292        	l32i	a8, a4, 0x248
      
	totsz = adf_os_ntohs(pHTCHdr->PayloadLen); 
    
	eid = pHTCHdr->EndpointID; 
    
	pEndpoint = &pHTC->Endpoints[eid];
  9043e8:	04550b        	addx8	a5, a5, a4
  9043eb:	b455      	addi.n	a5, a5, 4
		 * Byte 0 */
		RedistributeCredit(tmp_nbuf, pHTCHdr->ControlBytes[0]);
		return;
	}

	if (pHTC->StateFlags & HTC_STATE_SETUP_COMPLETE) {
  9043ed:	7f8707        	bbci	a8, 31, 9043f8 <HTCMsgRecvHandler+0x34>
		/* after setup we keep track of credit consumption to allow us to
		 * adjust thresholds to reduce credit dribbling */  
		pEndpoint->CreditsConsumed ++;
  9043f0:	285105        	l16ui	a8, a5, 10
  9043f3:	b188      	addi.n	a8, a8, 1
  9043f5:	285505        	s16i	a8, a5, 10
	/* from the design document, we put the endpoint into a "host-needs-credit" state
	 * when we receive a frame with the NEED_CREDIT_UPDATE flag set .
	 * if the host received credits through an opportunistic path, then it can
	 * issue a another frame with this bit cleared, this signals the target to clear
	 * the "host-needs-credit" state */    
	if (pHTCHdr->Flags & HTC_FLAGS_NEED_CREDIT_UPDATE) {
  9043f8:	299001        	l8ui	a9, a9, 1
	totsz = adf_os_ntohs(pHTCHdr->PayloadLen); 
    
	eid = pHTCHdr->EndpointID; 
    
	pEndpoint = &pHTC->Endpoints[eid];
	eidMask = 1 << eid;
  9043fb:	c081      	movi.n	a8, 1
	/* from the design document, we put the endpoint into a "host-needs-credit" state
	 * when we receive a frame with the NEED_CREDIT_UPDATE flag set .
	 * if the host received credits through an opportunistic path, then it can
	 * issue a another frame with this bit cleared, this signals the target to clear
	 * the "host-needs-credit" state */    
	if (pHTCHdr->Flags & HTC_FLAGS_NEED_CREDIT_UPDATE) {
  9043fd:	090940        	extui	a9, a9, 0, 1
	totsz = adf_os_ntohs(pHTCHdr->PayloadLen); 
    
	eid = pHTCHdr->EndpointID; 
    
	pEndpoint = &pHTC->Endpoints[eid];
	eidMask = 1 << eid;
  904400:	006104        	ssl	a6
  904403:	00881a        	sll	a8, a8
  904406:	2a4285        	l32i	a10, a4, 0x214
	/* from the design document, we put the endpoint into a "host-needs-credit" state
	 * when we receive a frame with the NEED_CREDIT_UPDATE flag set .
	 * if the host received credits through an opportunistic path, then it can
	 * issue a another frame with this bit cleared, this signals the target to clear
	 * the "host-needs-credit" state */    
	if (pHTCHdr->Flags & HTC_FLAGS_NEED_CREDIT_UPDATE) {
  904409:	c997      	beqz.n	a9, 904424 <HTCMsgRecvHandler+0x60>
		/* the host is running low (or is out) of credits on this
		 * endpoint, update mask */
		pHTC->EpHostNeedsCreditMap |= eidMask; 
  90440b:	08aa02        	or	a10, a10, a8
		/* check and set new threshold since host has reached a low credit situation */
		CHECK_AND_ADJUST_CREDIT_THRESHOLD(pEndpoint);                          
  90440e:	295106        	l16ui	a9, a5, 12
	 * issue a another frame with this bit cleared, this signals the target to clear
	 * the "host-needs-credit" state */    
	if (pHTCHdr->Flags & HTC_FLAGS_NEED_CREDIT_UPDATE) {
		/* the host is running low (or is out) of credits on this
		 * endpoint, update mask */
		pHTC->EpHostNeedsCreditMap |= eidMask; 
  904411:	2a4685        	s32i	a10, a4, 0x214
		/* check and set new threshold since host has reached a low credit situation */
		CHECK_AND_ADJUST_CREDIT_THRESHOLD(pEndpoint);                          
  904414:	7d971a        	bbci	a9, 29, 904432 <HTCMsgRecvHandler+0x6e>
  904417:	da50      	mov.n	a10, a5
  904419:	9814      	s32i.n	a8, a1, 16
  90441b:	5bff87        	call8	904238 <AdjustCreditThreshold>
  90441e:	8814      	l32i.n	a8, a1, 16
  904420:	60000e        	j	904432 <HTCMsgRecvHandler+0x6e>
  904423:	00c7bf        	excw
	} else {
		/* clear the flag */
		pHTC->EpHostNeedsCreditMap &= ~(eidMask);       
  904426:	08bb03        	xor	a11, a11, a8
  904429:	0baa01        	and	a10, a10, a11
  90442c:	2a4685        	s32i	a10, a4, 0x214
		pEndpoint->CreditReturnThreshhold = 0; 
  90442f:	295504        	s16i	a9, a5, 8
 *         or NULL if there is not sufficient data to pull.
 */
static inline a_uint8_t *
adf_nbuf_pull_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_pull_head(buf, size);
  904432:	da70      	mov.n	a10, a7
  904434:	c0b8      	movi.n	a11, 8
  904436:	281604        	s32i	a8, a1, 16
  904439:	5bfbeb        	call8	9033e8 <__adf_nbuf_pull_head>
	 *        as the result of parsing this message.  In either case, if there are
	 *        pending credits and the host needs them, a credit report will be sent either through 
	 *        the response message trailer or a NULL message through HTC_ReturnBuffers().
	 */       
        
	pEndpoint->pService->ProcessRecvMsg(eid, hdr_buf, buffer, pEndpoint->pService->ServiceCtx);
  90443c:	8751      	l32i.n	a7, a5, 4
  90443e:	da60      	mov.n	a10, a6
  904440:	8d76      	l32i.n	a13, a7, 24
  904442:	8971      	l32i.n	a9, a7, 4
  904444:	db20      	mov.n	a11, a2
  904446:	033c02        	or	a12, a3, a3
  904449:	0b9000        	callx8	a9

	/* Calls to HTC_ReturnBuffers drives the endpoint credit reporting state machine. 
	 * We do not want to delay credits for too long in the event that the application is 
	 * holding onto buffers for excessive periods of time.  This gives us "some" better
	 * opportunities to send up credits. */
	HTCCheckAndSendCreditReport(pHTC, eidMask, pEndpoint, eid); 
  90444c:	8814      	l32i.n	a8, a1, 16
  90444e:	da40      	mov.n	a10, a4
  904450:	db80      	mov.n	a11, a8
  904452:	dc50      	mov.n	a12, a5
  904454:	dd60      	mov.n	a13, a6
  904456:	5bfea5        	call8	903eec <HTCCheckAndSendCreditReport>
  904459:	d10f      	retw.n
	...

0090445c <RedistributeCredit>:
	pEndpoint->CreditReturnThreshhold = creditsOutstanding;
    
}

LOCAL void RedistributeCredit(adf_nbuf_t buf, int toPipeId)
{
  90445c:	6c1004        	entry	a1, 32
  90445f:	d10f      	retw.n
  904461:	000000        	ill

00904464 <WMIServiceConnect>:
                                 HTC_ENDPOINT_ID eid, 
                                 A_UINT8 *pDataIn, 
                                 int LengthIn,
                                 A_UINT8 *pDataOut,
                                 int *pLengthOut)
{
  904464:	6c1004        	entry	a1, 32
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)pService->ServiceCtx;
    
        /* save the eid to use */
	pWMI->ControlEp = eid;
  904467:	8826      	l32i.n	a8, a2, 24
  904469:	938a      	s32i.n	a3, a8, 40
	return HTC_SERVICE_SUCCESS;
}
  90446b:	c020      	movi.n	a2, 0
  90446d:	d10f      	retw.n
	...

00904470 <_WMI_GetPendingEventsCount>:
    
	return pWMI;
}

static int _WMI_GetPendingEventsCount(wmi_handle_t handle)
{
  904470:	6c1004        	entry	a1, 32
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
	return pWMI->PendingEvents;
}
  904473:	8222      	l32i.n	a2, a2, 8
  904475:	d10f      	retw.n
	...

00904478 <_WMI_GetControlEp>:

static int  _WMI_GetControlEp(wmi_handle_t handle)
{
  904478:	6c1004        	entry	a1, 32
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
	return pWMI->ControlEp;
}
  90447b:	822a      	l32i.n	a2, a2, 40
  90447d:	d10f      	retw.n
	...

00904480 <_WMI_RegisterDispatchTable>:

static void _WMI_RegisterDispatchTable(wmi_handle_t handle,
				       WMI_DISPATCH_TABLE *pDispatchTable)
{
  904480:	6c1004        	entry	a1, 32
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
    
	if (NULL == pWMI->pDispatchHead) {
  904483:	882b      	l32i.n	a8, a2, 44
  904485:	cc83      	bnez.n	a8, 90448c <_WMI_RegisterDispatchTable+0xc>
		pWMI->pDispatchHead = pDispatchTable;
  904487:	932b      	s32i.n	a3, a2, 44
  904489:	600003        	j	904490 <_WMI_RegisterDispatchTable+0x10>
		pWMI->pDispatchTail = pDispatchTable;        
	} else {
		/* link to the tail */
		pWMI->pDispatchTail->pNext = pDispatchTable;
  90448c:	882c      	l32i.n	a8, a2, 48
  90448e:	9380      	s32i.n	a3, a8, 0
		pWMI->pDispatchTail = pDispatchTable;        
  904490:	932c      	s32i.n	a3, a2, 48
  904492:	d10f      	retw.n

00904494 <_WMI_Shutdown>:
	
	HTC_SendMsg(pWMI->HtcHandle, pWMI->ControlEp, pEvt);    
}

static void _WMI_Shutdown(wmi_handle_t handle)
{
  904494:	6c1004        	entry	a1, 32
  904497:	d10f      	retw.n
  904499:	000000        	ill

0090449c <WMIRecvMessageHandler>:

#include "wmi_internal.h"

static void WMIRecvMessageHandler(HTC_ENDPOINT_ID EndPt, adf_nbuf_t hdr_buf,
				  adf_nbuf_t pHTCBuf, void *arg)
{
  90449c:	6c1006        	entry	a1, 48
	int length;
	a_uint8_t *anbdata;
	a_uint32_t anblen;
	WMI_CMD_HDR *cmdHdr;
            
	adf_os_assert(hdr_buf == ADF_NBUF_NULL);
  90449f:	c832      	beqz.n	a3, 9044a5 <WMIRecvMessageHandler+0x9>
  9044a1:	63fffc        	j	9044a1 <WMIRecvMessageHandler+0x5>
  9044a4:	00da40        	extui	a10, a0, 13, 1
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  9044a7:	5bfc70        	call8	903668 <__adf_nbuf_len>
  9044aa:	d3a0      	mov.n	a3, a10

	do {
		length = adf_nbuf_len(pHTCBuf);
		if (length < sizeof(WMI_CMD_HDR)) {
  9044ac:	6ea465        	bltui	a10, 4, 904515 <WMIRecvMessageHandler+0x79>
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  9044af:	b41b      	addi.n	a11, a1, 4
  9044b1:	dc10      	mov.n	a12, a1
  9044b3:	da40      	mov.n	a10, a4
  9044b5:	5bfc74        	call8	903688 <__adf_nbuf_peek_header>
		adf_nbuf_peek_header(pHTCBuf, &anbdata, &anblen);
        
		pCurrentTable = pWMI->pDispatchHead;
		length = length - sizeof(WMI_CMD_HDR);
        
		cmdHdr = (WMI_CMD_HDR *)anbdata;
  9044b8:	8d11      	l32i.n	a13, a1, 4
		}

		adf_nbuf_peek_header(pHTCBuf, &anbdata, &anblen);
        
		pCurrentTable = pWMI->pDispatchHead;
		length = length - sizeof(WMI_CMD_HDR);
  9044ba:	2e3cfc        	addi	a14, a3, -4
        
		cmdHdr = (WMI_CMD_HDR *)anbdata;
		cmd = adf_os_ntohs(cmdHdr->commandId);
  9044bd:	2bd000        	l8ui	a11, a13, 0
  9044c0:	23d001        	l8ui	a3, a13, 1
		seq = adf_os_ntohs(cmdHdr->seqNo);
  9044c3:	2cd002        	l8ui	a12, a13, 2
        
		pCurrentTable = pWMI->pDispatchHead;
		length = length - sizeof(WMI_CMD_HDR);
        
		cmdHdr = (WMI_CMD_HDR *)anbdata;
		cmd = adf_os_ntohs(cmdHdr->commandId);
  9044c6:	08bb11        	slli	a11, a11, 8
  9044c9:	0b3b02        	or	a11, a3, a11
		seq = adf_os_ntohs(cmdHdr->seqNo);
  9044cc:	23d003        	l8ui	a3, a13, 3
  9044cf:	08cc11        	slli	a12, a12, 8
			break;    
		}

		adf_nbuf_peek_header(pHTCBuf, &anbdata, &anblen);
        
		pCurrentTable = pWMI->pDispatchHead;
  9044d2:	885b      	l32i.n	a8, a5, 44
		length = length - sizeof(WMI_CMD_HDR);
        
		cmdHdr = (WMI_CMD_HDR *)anbdata;
		cmd = adf_os_ntohs(cmdHdr->commandId);
		seq = adf_os_ntohs(cmdHdr->seqNo);
  9044d4:	0c3c02        	or	a12, a3, a12
        
		pCmdBuffer = anbdata + sizeof(WMI_CMD_HDR); 
  9044d7:	b4dd      	addi.n	a13, a13, 4
		pCmdHandler = NULL;
        
		while (pCurrentTable != NULL) {
  9044d9:	600035        	j	904512 <WMIRecvMessageHandler+0x76>
            
			pContext = pCurrentTable->pContext;
  9044dc:	8a81      	l32i.n	a10, a8, 4
			pCurrentEntry = pCurrentTable->pTable;
  9044de:	8983      	l32i.n	a9, a8, 12
        
			/* scan table entries */
			for (i = 0; i < pCurrentTable->NumberOfEntries; i++, pCurrentEntry++) {
  9044e0:	8382      	l32i.n	a3, a8, 8
  9044e2:	c0f0      	movi.n	a15, 0
  9044e4:	600018        	j	904500 <WMIRecvMessageHandler+0x64>
  9044e7:	002691        	excw
				if (pCurrentEntry->CmdID == cmd) {
  9044ea:	027b69        	excw
  9044ed:	0d2391        	excw
					/* found a match */
					pCmdHandler = pCurrentEntry->pCmdHandler;
        
					/* optionally check length */
					if ((pCurrentEntry->CheckLength != 0) &&
  9044f0:	038f90        	l32e	a3, a8, -4
  9044f3:	c931      	beqz.n	a3, 904508 <WMIRecvMessageHandler+0x6c>
  9044f5:	73e217        	blt	a14, a3, 904510 <WMIRecvMessageHandler+0x74>
  9044f8:	60000c        	j	904508 <WMIRecvMessageHandler+0x6c>
  9044fb:	00b1ff        	excw
            
			pContext = pCurrentTable->pContext;
			pCurrentEntry = pCurrentTable->pTable;
        
			/* scan table entries */
			for (i = 0; i < pCurrentTable->NumberOfEntries; i++, pCurrentEntry++) {
  9044fe:	b899      	addi.n	a9, a9, 8
  904500:	73f2e4        	blt	a15, a3, 9044e8 <WMIRecvMessageHandler+0x4c>
  904503:	600009        	j	904510 <WMIRecvMessageHandler+0x74>
  904506:	0000c8        	excw
					/* end search */                
					break;    
				}                        
			} 
            
			if (pCmdHandler != NULL) {
  904509:	f4          	.byte 0xf4
		}
            
		/* if we get here, we have a command handler to dispatch */
                
		/* call dispatch function */
		pCmdHandler(pContext, cmd, seq, pCmdBuffer, length);
  90450a:	0bf000        	callx8	a15
  90450d:	600004        	j	904515 <WMIRecvMessageHandler+0x79>
				/* found a handler */
				break;
			}
                
			/* scan next table */
			pCurrentTable = pCurrentTable->pNext;
  904510:	8880      	l32i.n	a8, a8, 0
		seq = adf_os_ntohs(cmdHdr->seqNo);
        
		pCmdBuffer = anbdata + sizeof(WMI_CMD_HDR); 
		pCmdHandler = NULL;
        
		while (pCurrentTable != NULL) {
  904512:	658fc6        	bnez	a8, 9044dc <WMIRecvMessageHandler+0x40>
        /* Invalidate the buffer (including HTC header). Note : we only need to invalidate up to the portion
	 * that was used (cache invalidate will also round up to the nearest cache line).  
	 * The rest of the buffer should still be coherent.
	 * */

	HTC_ReturnBuffers(pWMI->HtcHandle, EndPt, pHTCBuf);         
  904515:	137182        	l32r	a3, 8e0b20 <_bss_end+0x3d3318>
  904518:	8a50      	l32i.n	a10, a5, 0
  90451a:	233287        	l32i	a3, a3, 0x21c
  90451d:	db20      	mov.n	a11, a2
  90451f:	dc40      	mov.n	a12, a4
  904521:	0b3000        	callx8	a3
  904524:	d10f      	retw.n
	...

00904528 <_WMI_SendCompleteHandler>:
}

/* send completion handler when any HTC buffers are returned */
static void _WMI_SendCompleteHandler(HTC_ENDPOINT_ID Endpt, adf_nbuf_t pHTCBuf, void *arg)
{
  904528:	6c1004        	entry	a1, 32
 * @return data pointer to typecast into your priv structure
 */
static inline a_uint8_t *
adf_nbuf_get_priv(adf_nbuf_t buf)
{
    return (__adf_nbuf_get_priv(buf));
  90452b:	da30      	mov.n	a10, a3
  90452d:	5bfbc9        	call8	903454 <__adf_nbuf_get_priv>
		poolId = POOL_ID_WMI_SVC_EVENT;
	} else {
		poolId = POOL_ID_WMI_SVC_CMD_REPLY;
	}
        
	BUF_Pool_free_buf(pWMI->PoolHandle, poolId, pHTCBuf);
  904530:	187182        	l32r	a8, 8e0b38 <_bss_end+0x3d3330>
	WMI_BUF_CONTEXT *ctx;
	BUF_POOL_ID poolId;
    
	ctx = (WMI_BUF_CONTEXT *)adf_nbuf_get_priv(pHTCBuf);
        
	if ( ctx->EventClass == WMI_EVT_CLASS_CMD_EVENT ) {
  904533:	8ca1      	l32i.n	a12, a10, 4
		poolId = POOL_ID_WMI_SVC_EVENT;
	} else {
		poolId = POOL_ID_WMI_SVC_CMD_REPLY;
	}
        
	BUF_Pool_free_buf(pWMI->PoolHandle, poolId, pHTCBuf);
  904535:	c092      	movi.n	a9, 2
  904537:	2882a3        	l32i	a8, a8, 0x28c
  90453a:	8a41      	l32i.n	a10, a4, 4
  90453c:	c0b1      	movi.n	a11, 1
  90453e:	0c9b38        	moveqz	a11, a9, a12
  904541:	dc30      	mov.n	a12, a3
  904543:	0b8000        	callx8	a8
  904546:	d10f      	retw.n

00904548 <_WMI_AllocEvent>:
	}
}

static adf_nbuf_t _WMI_AllocEvent(wmi_handle_t handle, WMI_EVT_CLASS EventClass,
				  int Length)
{     
  904548:	6c1004        	entry	a1, 32
		poolId = POOL_ID_WMI_SVC_EVENT;
	} else {
		poolId = POOL_ID_WMI_SVC_CMD_REPLY;
	}
    
	buf = BUF_Pool_alloc_buf(pWMI->PoolHandle, 
  90454b:	187182        	l32r	a8, 8e0b54 <_bss_end+0x3d334c>
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
	adf_nbuf_t buf;
	WMI_BUF_CONTEXT *ctx;
    
	if ( EventClass == WMI_EVT_CLASS_CMD_EVENT ) {
		poolId = POOL_ID_WMI_SVC_EVENT;
  90454e:	c051      	movi.n	a5, 1
  904550:	c042      	movi.n	a4, 2
  904552:	035439        	movnez	a4, a5, a3
	} else {
		poolId = POOL_ID_WMI_SVC_CMD_REPLY;
	}
    
	buf = BUF_Pool_alloc_buf(pWMI->PoolHandle, 
  904555:	8a20      	l32i.n	a10, a2, 0
  904557:	2582a1        	l32i	a5, a8, 0x284
  90455a:	28828a        	l32i	a8, a8, 0x228
  90455d:	8621      	l32i.n	a6, a2, 4
  90455f:	0b8000        	callx8	a8
  904562:	b4ac      	addi.n	a12, a10, 4
  904564:	044b02        	or	a11, a4, a4
  904567:	066a02        	or	a10, a6, a6
  90456a:	0b5000        	callx8	a5
  90456d:	d2a0      	mov.n	a2, a10
				 poolId, 
				 sizeof(WMI_CMD_HDR) + HTC_GetReservedHeadroom(pWMI->HtcHandle));
     
	if ( buf != NULL ) {
  90456f:	c8a3      	beqz.n	a10, 904576 <_WMI_AllocEvent+0x2e>
  904571:	5bfbb8        	call8	903454 <__adf_nbuf_get_priv>
		ctx = (WMI_BUF_CONTEXT *)adf_nbuf_get_priv(buf);
		ctx->EventClass = EventClass;
  904574:	93a1      	s32i.n	a3, a10, 4
	}
	return buf;
}
  904576:	d10f      	retw.n

00904578 <_WMI_SendEvent>:

static void _WMI_SendEvent(wmi_handle_t handle, adf_nbuf_t pEvt, 
                           A_UINT16 EventId, A_UINT16 SeqNo, int Length)
{
  904578:	6c1004        	entry	a1, 32
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  90457b:	033a02        	or	a10, a3, a3
  90457e:	2b0a04        	movi	a11, 4
  904581:	5bfb8e        	call8	9033bc <__adf_nbuf_push_head>
  904584:	04044f        	extui	a4, a4, 0, 16
  904587:	05054f        	extui	a5, a5, 0, 16
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
	A_UINT8 *pBuffer;
        
	pBuffer = adf_nbuf_push_head(pEvt, sizeof(WMI_CMD_HDR));
	A_SET_UINT16_FIELD(pBuffer, WMI_CMD_HDR, commandId, adf_os_htons(EventId));        
  90458a:	24a401        	s8i	a4, a10, 1
  90458d:	048814        	srli	a8, a4, 8
	A_SET_UINT16_FIELD(pBuffer, WMI_CMD_HDR, seqNo, adf_os_htons(SeqNo));
  904590:	058414        	srli	a4, a5, 8
  904593:	24a402        	s8i	a4, a10, 2
	
	HTC_SendMsg(pWMI->HtcHandle, pWMI->ControlEp, pEvt);    
  904596:	147182        	l32r	a4, 8e0ba0 <_bss_end+0x3d3398>
{
	WMI_SVC_CONTEXT *pWMI = (WMI_SVC_CONTEXT *)handle;
	A_UINT8 *pBuffer;
        
	pBuffer = adf_nbuf_push_head(pEvt, sizeof(WMI_CMD_HDR));
	A_SET_UINT16_FIELD(pBuffer, WMI_CMD_HDR, commandId, adf_os_htons(EventId));        
  904599:	28a400        	s8i	a8, a10, 0
	A_SET_UINT16_FIELD(pBuffer, WMI_CMD_HDR, seqNo, adf_os_htons(SeqNo));
  90459c:	25a403        	s8i	a5, a10, 3
	
	HTC_SendMsg(pWMI->HtcHandle, pWMI->ControlEp, pEvt);    
  90459f:	244289        	l32i	a4, a4, 0x224
  9045a2:	8a20      	l32i.n	a10, a2, 0
  9045a4:	8b2a      	l32i.n	a11, a2, 40
  9045a6:	033c02        	or	a12, a3, a3
  9045a9:	0b4000        	callx8	a4
  9045ac:	d10f      	retw.n
	...

009045b0 <_WMI_Init>:
}

/**************  public APIS ********************************************/
    
static wmi_handle_t _WMI_Init(WMI_SVC_CONFIG *pWmiConfig)
{
  9045b0:	6c1004        	entry	a1, 32
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  9045b3:	137182        	l32r	a3, 8e0bbc <_bss_end+0x3d33b4>
  9045b6:	d420      	mov.n	a4, a2
  9045b8:	223252        	l32i	a2, a3, 0x148
  9045bb:	c0a0      	movi.n	a10, 0
  9045bd:	c3b8      	movi.n	a11, 56
  9045bf:	0b2000        	callx8	a2
  9045c2:	d2a0      	mov.n	a2, a10
	WMI_SVC_CONTEXT *pWMI = NULL;
	int eventSize = WMI_SVC_MAX_BUFFERED_EVENT_SIZE + sizeof(WMI_CMD_HDR) + HTC_HDR_SZ;
    
	pWMI = (WMI_SVC_CONTEXT *)adf_os_mem_alloc(sizeof(WMI_SVC_CONTEXT));
	if (pWMI == NULL) {
  9045c4:	64a055        	beqz	a10, 90461d <_WMI_Init+0x6d>
		return NULL;    
	}
        
	pWMI->pDispatchHead = NULL;
  9045c7:	c080      	movi.n	a8, 0
  9045c9:	98ab      	s32i.n	a8, a10, 44
	pWMI->PoolHandle = pWmiConfig->PoolHandle;
	pWMI->HtcHandle = pWmiConfig->HtcHandle;    
  9045cb:	8840      	l32i.n	a8, a4, 0
	if (pWMI == NULL) {
		return NULL;    
	}
        
	pWMI->pDispatchHead = NULL;
	pWMI->PoolHandle = pWmiConfig->PoolHandle;
  9045cd:	8a41      	l32i.n	a10, a4, 4
	pWMI->HtcHandle = pWmiConfig->HtcHandle;    
                                         
	BUF_Pool_create_pool(pWmiConfig->PoolHandle, POOL_ID_WMI_SVC_CMD_REPLY, 
  9045cf:	8c42      	l32i.n	a12, a4, 8
		return NULL;    
	}
        
	pWMI->pDispatchHead = NULL;
	pWMI->PoolHandle = pWmiConfig->PoolHandle;
	pWMI->HtcHandle = pWmiConfig->HtcHandle;    
  9045d1:	9820      	s32i.n	a8, a2, 0
                                         
	BUF_Pool_create_pool(pWmiConfig->PoolHandle, POOL_ID_WMI_SVC_CMD_REPLY, 
  9045d3:	2832a0        	l32i	a8, a3, 0x280
	if (pWMI == NULL) {
		return NULL;    
	}
        
	pWMI->pDispatchHead = NULL;
	pWMI->PoolHandle = pWmiConfig->PoolHandle;
  9045d6:	9a21      	s32i.n	a10, a2, 4
	pWMI->HtcHandle = pWmiConfig->HtcHandle;    
                                         
	BUF_Pool_create_pool(pWmiConfig->PoolHandle, POOL_ID_WMI_SVC_CMD_REPLY, 
  9045d8:	2b0a01        	movi	a11, 1
  9045db:	2d0a70        	movi	a13, 112
  9045de:	0b8000        	callx8	a8
			     pWmiConfig->MaxCmdReplyEvts, eventSize);
        
	BUF_Pool_create_pool(pWmiConfig->PoolHandle, POOL_ID_WMI_SVC_EVENT, 
  9045e1:	2832a0        	l32i	a8, a3, 0x280
  9045e4:	8a41      	l32i.n	a10, a4, 4
  9045e6:	8c43      	l32i.n	a12, a4, 12
  9045e8:	c0b2      	movi.n	a11, 2
  9045ea:	2d0a70        	movi	a13, 112
  9045ed:	0b8000        	callx8	a8
            
	/* NOTE: since RAM allocation is zero-initialized, there is nothing to do for the 
	 * direct event pool */
     
        /* register the WMI control service */
	pWMI->WMIControlService.ProcessRecvMsg = A_INDIR(wmi_svc_api._WMI_RecvMessageHandler);
  9045f0:	283298        	l32i	a8, a3, 0x260
         * in size.  Any WMI event that supplies a data buffer must insure that the space in the buffer
         * is at least this size. */
	pWMI->WMIControlService.TrailerSpcCheckLimit = WMI_SVC_MAX_BUFFERED_EVENT_SIZE; 
	pWMI->WMIControlService.ServiceID = WMI_CONTROL_SVC;
	pWMI->WMIControlService.ServiceCtx = pWMI;
	HTC_RegisterService(pWmiConfig->HtcHandle, &pWMI->WMIControlService);
  9045f3:	8a40      	l32i.n	a10, a4, 0
            
	/* NOTE: since RAM allocation is zero-initialized, there is nothing to do for the 
	 * direct event pool */
     
        /* register the WMI control service */
	pWMI->WMIControlService.ProcessRecvMsg = A_INDIR(wmi_svc_api._WMI_RecvMessageHandler);
  9045f5:	9824      	s32i.n	a8, a2, 16
	pWMI->WMIControlService.ProcessSendBufferComplete = A_INDIR(wmi_svc_api._WMI_SendCompleteHandler);
  9045f7:	283295        	l32i	a8, a3, 0x254
         * in size.  Any WMI event that supplies a data buffer must insure that the space in the buffer
         * is at least this size. */
	pWMI->WMIControlService.TrailerSpcCheckLimit = WMI_SVC_MAX_BUFFERED_EVENT_SIZE; 
	pWMI->WMIControlService.ServiceID = WMI_CONTROL_SVC;
	pWMI->WMIControlService.ServiceCtx = pWMI;
	HTC_RegisterService(pWmiConfig->HtcHandle, &pWMI->WMIControlService);
  9045fa:	bc2b      	addi.n	a11, a2, 12
	/* NOTE: since RAM allocation is zero-initialized, there is nothing to do for the 
	 * direct event pool */
     
        /* register the WMI control service */
	pWMI->WMIControlService.ProcessRecvMsg = A_INDIR(wmi_svc_api._WMI_RecvMessageHandler);
	pWMI->WMIControlService.ProcessSendBufferComplete = A_INDIR(wmi_svc_api._WMI_SendCompleteHandler);
  9045fc:	9825      	s32i.n	a8, a2, 20
	pWMI->WMIControlService.ProcessConnect = A_INDIR(wmi_svc_api._WMI_ServiceConnect);
  9045fe:	283299        	l32i	a8, a3, 0x264
         * in size.  Any WMI event that supplies a data buffer must insure that the space in the buffer
         * is at least this size. */
	pWMI->WMIControlService.TrailerSpcCheckLimit = WMI_SVC_MAX_BUFFERED_EVENT_SIZE; 
	pWMI->WMIControlService.ServiceID = WMI_CONTROL_SVC;
	pWMI->WMIControlService.ServiceCtx = pWMI;
	HTC_RegisterService(pWmiConfig->HtcHandle, &pWMI->WMIControlService);
  904601:	233285        	l32i	a3, a3, 0x214
	 * direct event pool */
     
        /* register the WMI control service */
	pWMI->WMIControlService.ProcessRecvMsg = A_INDIR(wmi_svc_api._WMI_RecvMessageHandler);
	pWMI->WMIControlService.ProcessSendBufferComplete = A_INDIR(wmi_svc_api._WMI_SendCompleteHandler);
	pWMI->WMIControlService.ProcessConnect = A_INDIR(wmi_svc_api._WMI_ServiceConnect);
  904604:	9826      	s32i.n	a8, a2, 24
	pWMI->WMIControlService.MaxSvcMsgSize = WMI_SVC_MSG_SIZE + sizeof(WMI_CMD_HDR);
  904606:	286a04        	movi	a8, 0x604
  904609:	282510        	s16i	a8, a2, 32
        /* all buffers that are sent through the control endpoint are at least WMI_SVC_MAX_BUFFERED_EVENT_SIZE 
         * in size.  Any WMI event that supplies a data buffer must insure that the space in the buffer
         * is at least this size. */
	pWMI->WMIControlService.TrailerSpcCheckLimit = WMI_SVC_MAX_BUFFERED_EVENT_SIZE; 
  90460c:	280a64        	movi	a8, 100
  90460f:	282511        	s16i	a8, a2, 34
	pWMI->WMIControlService.ServiceID = WMI_CONTROL_SVC;
  904612:	281a00        	movi	a8, 0x100
  904615:	28250e        	s16i	a8, a2, 28
	pWMI->WMIControlService.ServiceCtx = pWMI;
  904618:	9229      	s32i.n	a2, a2, 36
	HTC_RegisterService(pWmiConfig->HtcHandle, &pWMI->WMIControlService);
  90461a:	0b3000        	callx8	a3
    
	return pWMI;
}
  90461d:	d10f      	retw.n
	...

00904620 <WMI_service_module_install>:

	adf_os_mem_free(pWMI);
}

void WMI_service_module_install(WMI_SVC_APIS *pTbl)
{
  904620:	6c1004        	entry	a1, 32
	pTbl->_WMI_Init                     = _WMI_Init;
  904623:	1871fa        	l32r	a8, 8e0e0c <_bss_end+0x3d3604>
  904626:	9820      	s32i.n	a8, a2, 0
	pTbl->_WMI_RegisterDispatchTable    = _WMI_RegisterDispatchTable;
  904628:	1871fb        	l32r	a8, 8e0e14 <_bss_end+0x3d360c>
  90462b:	9821      	s32i.n	a8, a2, 4
	pTbl->_WMI_AllocEvent               = _WMI_AllocEvent;
  90462d:	1871fc        	l32r	a8, 8e0e20 <_bss_end+0x3d3618>
  904630:	9822      	s32i.n	a8, a2, 8
	pTbl->_WMI_SendEvent                = _WMI_SendEvent;
  904632:	1871fd        	l32r	a8, 8e0e28 <_bss_end+0x3d3620>
  904635:	9823      	s32i.n	a8, a2, 12
	pTbl->_WMI_SendCompleteHandler      = _WMI_SendCompleteHandler;
  904637:	1871fe        	l32r	a8, 8e0e30 <_bss_end+0x3d3628>
  90463a:	9825      	s32i.n	a8, a2, 20
	pTbl->_WMI_GetPendingEventsCount    = _WMI_GetPendingEventsCount;
  90463c:	1871ff        	l32r	a8, 8e0e38 <_bss_end+0x3d3630>
  90463f:	9824      	s32i.n	a8, a2, 16
	pTbl->_WMI_GetControlEp             = _WMI_GetControlEp;
  904641:	187200        	l32r	a8, 8e0e44 <_bss_end+0x3d363c>
  904644:	9826      	s32i.n	a8, a2, 24
	pTbl->_WMI_Shutdown                 = _WMI_Shutdown;
  904646:	187201        	l32r	a8, 8e0e4c <_bss_end+0x3d3644>
  904649:	9827      	s32i.n	a8, a2, 28
	pTbl->_WMI_RecvMessageHandler       = WMIRecvMessageHandler;
  90464b:	187202        	l32r	a8, 8e0e54 <_bss_end+0x3d364c>
  90464e:	9828      	s32i.n	a8, a2, 32
	pTbl->_WMI_ServiceConnect           = WMIServiceConnect;
  904650:	187203        	l32r	a8, 8e0e5c <_bss_end+0x3d3654>
  904653:	9829      	s32i.n	a8, a2, 36
  904655:	d10f      	retw.n
	...

00904658 <_HIFusb_get_max_msg_len_patch>:

/*
 * -- support more than 64 bytes command on ep4 -- 
 */
int _HIFusb_get_max_msg_len_patch(hif_handle_t handle, int pipe)
{
  904658:	6c1004        	entry	a1, 32
  90465b:	233cfd        	addi	a3, a3, -3
    switch(pipe) {
  90465e:	222a00        	movi	a2, 0x200
  904661:	6e3202        	bltui	a3, 2, 904667 <_HIFusb_get_max_msg_len_patch+0xf>
  904664:	226a40        	movi	a2, 0x640
            return 512;
            
        default:
            return 1600;
    }
}
  904667:	d10f      	retw.n
  904669:	000000        	ill

0090466c <_HIFusb_isr_handler_patch>:

/*
 * -- move the usb_task to here --
 */
void _HIFusb_isr_handler_patch(hif_handle_t h)
{
  90466c:	6c1004        	entry	a1, 32
    A_USB_FW_TASK();
  90466f:	187182        	l32r	a8, 8e0c78 <_bss_end+0x3d3470>
  904672:	28821d        	l32i	a8, a8, 116
  904675:	0b8000        	callx8	a8

    _HIFusb_isr_handler();
  904678:	5b7937        	call8	8e2b58 <_HIFusb_isr_handler>
  90467b:	d10f      	retw.n
  90467d:	000000        	ill

00904680 <io8_rmw>:
	*(volatile uint32_t *) addr = b;
}

static inline void io8_rmw(volatile uint32_t addr,
			    const uint8_t set, const uint8_t clr)
{
  904680:	6c1006        	entry	a1, 48
  904683:	0c0200        	memw
  904686:	9210      	s32i.n	a2, a1, 0
	uint8_t val;

	val = ioread8(addr);
  904688:	0c0200        	memw
  90468b:	8810      	l32i.n	a8, a1, 0
	val &= ~clr;
  90468d:	c79f      	movi.n	a9, -1

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  90468f:	288000        	l8ui	a8, a8, 0
			    const uint8_t set, const uint8_t clr)
{
	uint8_t val;

	val = ioread8(addr);
	val &= ~clr;
  904692:	049403        	xor	a4, a9, a4

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  904695:	080847        	extui	a8, a8, 0, 8
			    const uint8_t set, const uint8_t clr)
{
	uint8_t val;

	val = ioread8(addr);
	val &= ~clr;
  904698:	084801        	and	a8, a4, a8
	val |= set;
	iowrite8(addr, val);
  90469b:	0c0200        	memw
  90469e:	8a10      	l32i.n	a10, a1, 0
{
	uint8_t val;

	val = ioread8(addr);
	val &= ~clr;
	val |= set;
  9046a0:	038302        	or	a3, a8, a3
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  9046a3:	0c0200        	memw
  9046a6:	23a400        	s8i	a3, a10, 0
  9046a9:	d10f      	retw.n
	...

009046ac <io32_rmw$constprop$0>:
	val &= ~clr;
	val |= set;
	iowrite8(addr, val);
}

static inline void io32_rmw(volatile uint32_t addr,
  9046ac:	6c1006        	entry	a1, 48
  9046af:	0c0200        	memw
  9046b2:	9210      	s32i.n	a2, a1, 0
			    const uint32_t set, const uint32_t clr)
{
	uint32_t val;

	val = ioread32(addr);
  9046b4:	0c0200        	memw
  9046b7:	8810      	l32i.n	a8, a1, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  9046b9:	0c0200        	memw
  9046bc:	8880      	l32i.n	a8, a8, 0
	uint32_t val;

	val = ioread32(addr);
	val &= ~clr;
	val |= set;
	iowrite32(addr, val);
  9046be:	0c0200        	memw
  9046c1:	8910      	l32i.n	a9, a1, 0
{
	uint32_t val;

	val = ioread32(addr);
	val &= ~clr;
	val |= set;
  9046c3:	083302        	or	a3, a3, a8
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9046c6:	0c0200        	memw
  9046c9:	9390      	s32i.n	a3, a9, 0
  9046cb:	d10f      	retw.n
  9046cd:	000000        	ill

009046d0 <_fw_usb_suspend_reboot>:
#if SYSTEM_MODULE_USB

#define CHECK_SOF_LOOP_CNT    50

void _fw_usb_suspend_reboot()
{
  9046d0:	6c1008        	entry	a1, 64
	volatile uint32_t gpio_in = 0;
  9046d3:	c020      	movi.n	a2, 0
  9046d5:	0c0200        	memw
  9046d8:	9214      	s32i.n	a2, a1, 16
	volatile uint32_t pupd = 0;
  9046da:	0c0200        	memw
  9046dd:	9213      	s32i.n	a2, a1, 12
	volatile uint32_t t = 0;
  9046df:	0c0200        	memw
  9046e2:	9212      	s32i.n	a2, a1, 8
	volatile uint32_t sof_no=0,sof_no_new=0;
	/* Set GO_TO_SUSPEND bit to USB main control register */
	io8_clr_usb(ZM_INTR_SOURCE_7_OFFSET, BIT2);
  9046e4:	1a7204        	l32r	a10, 8e0ef4 <_bss_end+0x3d36ec>
  9046e7:	db20      	mov.n	a11, a2
  9046e9:	c0c4      	movi.n	a12, 4
void _fw_usb_suspend_reboot()
{
	volatile uint32_t gpio_in = 0;
	volatile uint32_t pupd = 0;
	volatile uint32_t t = 0;
	volatile uint32_t sof_no=0,sof_no_new=0;
  9046eb:	0c0200        	memw
  9046ee:	9211      	s32i.n	a2, a1, 4
  9046f0:	0c0200        	memw
  9046f3:	9210      	s32i.n	a2, a1, 0
	/* Set GO_TO_SUSPEND bit to USB main control register */
	io8_clr_usb(ZM_INTR_SOURCE_7_OFFSET, BIT2);
  9046f5:	5bffe2        	call8	904680 <io8_rmw>
	A_PRINTF("!USB suspend\n\r");
  9046f8:	137182        	l32r	a3, 8e0d00 <_bss_end+0x3d34f8>
  9046fb:	1a7205        	l32r	a10, 8e0f10 <_bss_end+0x3d3708>
  9046fe:	283212        	l32i	a8, a3, 72
  904701:	0b8000        	callx8	a8
  904704:	197190        	l32r	a9, 8e0d44 <_bss_end+0x3d353c>
  904707:	187187        	l32r	a8, 8e0d24 <_bss_end+0x3d351c>
  90470a:	0c0200        	memw
  90470d:	9980      	s32i.n	a9, a8, 0
#elif defined(PROJECT_K2)
	iowrite32(MAGPIE_REG_RST_STATUS_ADDR, SUS_MAGIC_PATTERN);
#endif /* #if defined(PROJECT_MAGPIE) */

	/* Reset USB FIFO */
	A_USB_RESET_FIFO();
  90470f:	283229        	l32i	a8, a3, 164
  904712:	0b8000        	callx8	a8

	/* Turn off power */
	A_USB_POWER_OFF();
  904715:	233228        	l32i	a3, a3, 160
  904718:	0b3000        	callx8	a3

	DEBUG_SYSTEM_STATE = (DEBUG_SYSTEM_STATE&(~0xffff)) | 0x1000;
  90471b:	137180        	l32r	a3, 8e0d1c <_bss_end+0x3d3514>
  90471e:	187206        	l32r	a8, 8e0f38 <_bss_end+0x3d3730>
  904721:	0c0200        	memw
  904724:	8930      	l32i.n	a9, a3, 0
  904726:	089801        	and	a8, a9, a8
  904729:	197207        	l32r	a9, 8e0f48 <_bss_end+0x3d3740>
  90472c:	098802        	or	a8, a8, a9
  90472f:	0c0200        	memw
  904732:	9830      	s32i.n	a8, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  904734:	137208        	l32r	a3, 8e0f54 <_bss_end+0x3d374c>
  904737:	0c0200        	memw
  90473a:	8830      	l32i.n	a8, a3, 0
	/* disable SPI */
	spi = ioread32(0x50040);
	iowrite32(0x50040, spi & ~BIT8);
#endif
	/* set all GPIO to input */
	gpio_in = ioread32(0x1000404c);
  90473c:	0c0200        	memw
  90473f:	9814      	s32i.n	a8, a1, 16
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  904741:	0c0200        	memw
  904744:	9230      	s32i.n	a2, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  904746:	137209        	l32r	a3, 8e0f6c <_bss_end+0x3d3764>
  904749:	0c0200        	memw
  90474c:	8830      	l32i.n	a8, a3, 0
	iowrite32(0x1000404c, 0x0);

	/* set PU/PD for all GPIO except two UART pins */
	pupd = ioread32(0x10004088);
  90474e:	0c0200        	memw
  904751:	9813      	s32i.n	a8, a1, 12
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  904753:	18720a        	l32r	a8, 8e0f7c <_bss_end+0x3d3774>
  904756:	0c0200        	memw
  904759:	9830      	s32i.n	a8, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90475b:	13720b        	l32r	a3, 8e0f88 <_bss_end+0x3d3780>
  90475e:	0c0200        	memw
  904761:	8330      	l32i.n	a3, a3, 0
	iowrite32(0x10004088, 0xA982AA6A);

	sof_no = ioread32(0x10004);
  904763:	0c0200        	memw
  904766:	9311      	s32i.n	a3, a1, 4
	for (t = 0; t < CHECK_SOF_LOOP_CNT; t++)
  904768:	0c0200        	memw
  90476b:	9212      	s32i.n	a2, a1, 8
  90476d:	c321      	movi.n	a2, 49
  90476f:	600057        	j	9047ca <_fw_usb_suspend_reboot+0xfa>
  904772:	000013        	srai	a0, a0, 16
	{
		A_DELAY_USECS(1000);    /* delay 1ms */
  904775:	71822a        	blt	a8, a1, 9047a3 <_fw_usb_suspend_reboot+0xd3>
  904778:	3ae823        	excw
  90477b:	323a0b        	excw
  90477e:	300013        	excw
  904781:	720b0c        	bgeu	a0, a2, 904791 <_fw_usb_suspend_reboot+0xc1>
  904784:	020083        	excw
  904787:	300c02        	excw
		sof_no_new = ioread32(0x10004);
  90478a:	009310        	slli	a3, a9, 32

		if(sof_no_new == sof_no)
  90478d:	0c0200        	memw
  904790:	8810      	l32i.n	a8, a1, 0
  904792:	0c0200        	memw
  904795:	8311      	l32i.n	a3, a1, 4
  904797:	738919        	bne	a8, a3, 9047b4 <_fw_usb_suspend_reboot+0xe4>
	 * Reset "printf" module patch point(RAM to ROM)
	 * when K2 warm start or suspend,
	 * which fixed the error issue cause by redownload
	 * another different firmware.
	 */
	_indir_tbl.cmnos.printf._printf = save_cmnos_printf;
  90479a:	127189        	l32r	a2, 8e0dc0 <_bss_end+0x3d35b8>
  90479d:	8320      	l32i.n	a3, a2, 0
  90479f:	127182        	l32r	a2, 8e0da8 <_bss_end+0x3d35a0>
  9047a2:	232612        	s32i	a3, a2, 72

	/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	 * setting the go suspend here, power down right away!!!
	 */
	if (t != CHECK_SOF_LOOP_CNT)   /* not time out */
  9047a5:	0c0200        	memw
  9047a8:	8312      	l32i.n	a3, a1, 8
  9047aa:	c322      	movi.n	a2, 50
  9047ac:	723925        	bne	a3, a2, 9047d5 <_fw_usb_suspend_reboot+0x105>
  9047af:	60002a        	j	9047dd <_fw_usb_suspend_reboot+0x10d>
  9047b2:	00000c        	sub	a0, a0, a0
		A_DELAY_USECS(1000);    /* delay 1ms */
		sof_no_new = ioread32(0x10004);

		if(sof_no_new == sof_no)
			break;
		sof_no = sof_no_new;
  9047b5:	020083        	excw
  9047b8:	100c02        	l32r	a0, 8c77c0 <_bss_end+0x3b9fb8>
  9047bb:	009311        	slli	a3, a9, 16
	/* set PU/PD for all GPIO except two UART pins */
	pupd = ioread32(0x10004088);
	iowrite32(0x10004088, 0xA982AA6A);

	sof_no = ioread32(0x10004);
	for (t = 0; t < CHECK_SOF_LOOP_CNT; t++)
  9047be:	0c0200        	memw
  9047c1:	8312      	l32i.n	a3, a1, 8
  9047c3:	b133      	addi.n	a3, a3, 1
  9047c5:	0c0200        	memw
  9047c8:	9312      	s32i.n	a3, a1, 8
  9047ca:	0c0200        	memw
  9047cd:	8312      	l32i.n	a3, a1, 8
  9047cf:	732ba1        	bgeu	a2, a3, 904774 <_fw_usb_suspend_reboot+0xa4>
  9047d2:	63ffc4        	j	90479a <_fw_usb_suspend_reboot+0xca>

	/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	 * setting the go suspend here, power down right away!!!
	 */
	if (t != CHECK_SOF_LOOP_CNT)   /* not time out */
		io32_set(0x10000, BIT3);
  9047d5:	1a720c        	l32r	a10, 8e1008 <_bss_end+0x3d3800>
  9047d8:	c0b8      	movi.n	a11, 8
  9047da:	5bffb4        	call8	9046ac <io32_rmw$constprop$0>

	DEBUG_SYSTEM_STATE = (DEBUG_SYSTEM_STATE&(~0xffff)) | 0x1100;
  9047dd:	127180        	l32r	a2, 8e0de0 <_bss_end+0x3d35d8>
  9047e0:	137206        	l32r	a3, 8e0ff8 <_bss_end+0x3d37f0>
  9047e3:	0c0200        	memw
  9047e6:	8820      	l32i.n	a8, a2, 0
  9047e8:	19720d        	l32r	a9, 8e101c <_bss_end+0x3d3814>
  9047eb:	038801        	and	a8, a8, a3
  9047ee:	098802        	or	a8, a8, a9
  9047f1:	0c0200        	memw
  9047f4:	9820      	s32i.n	a8, a2, 0

	/* restore gpio setting */
	iowrite32(0x10004054, jtag);
	iowrite32(0x50040, spi);
#endif
	iowrite32(0x1000404c, gpio_in);
  9047f6:	0c0200        	memw
  9047f9:	8914      	l32i.n	a9, a1, 16
  9047fb:	187208        	l32r	a8, 8e101c <_bss_end+0x3d3814>
	/* since we still need to touch mac_base address after resuming back,
	 * so that reset mac can't be done in ResetFifo function,
	 * move to here... whole mac control reset.... (bit1)
	 */
	iowrite32(MAGPIE_REG_RST_PWDN_CTRL_ADDR, BIT1);
	io32_set(MAGPIE_REG_RST_PWDN_CTRL_ADDR, BIT0);
  9047fe:	c0b1      	movi.n	a11, 1
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  904800:	0c0200        	memw
  904803:	9980      	s32i.n	a9, a8, 0
	/* restore gpio setting */
	iowrite32(0x10004054, jtag);
	iowrite32(0x50040, spi);
#endif
	iowrite32(0x1000404c, gpio_in);
	iowrite32(0x10004088, pupd);
  904805:	0c0200        	memw
  904808:	8913      	l32i.n	a9, a1, 12
  90480a:	187209        	l32r	a8, 8e1030 <_bss_end+0x3d3828>
  90480d:	0c0200        	memw
  904810:	9980      	s32i.n	a9, a8, 0

	DEBUG_SYSTEM_STATE = (DEBUG_SYSTEM_STATE&(~0xffff)) | 0x1200;
  904812:	0c0200        	memw
  904815:	8820      	l32i.n	a8, a2, 0
  904817:	038301        	and	a3, a8, a3
  90481a:	18720e        	l32r	a8, 8e1054 <_bss_end+0x3d384c>
  90481d:	083302        	or	a3, a3, a8
  904820:	0c0200        	memw
  904823:	9320      	s32i.n	a3, a2, 0
  904825:	13720f        	l32r	a3, 8e1064 <_bss_end+0x3d385c>
  904828:	c082      	movi.n	a8, 2
  90482a:	0c0200        	memw
  90482d:	9830      	s32i.n	a8, a3, 0
	/* since we still need to touch mac_base address after resuming back,
	 * so that reset mac can't be done in ResetFifo function,
	 * move to here... whole mac control reset.... (bit1)
	 */
	iowrite32(MAGPIE_REG_RST_PWDN_CTRL_ADDR, BIT1);
	io32_set(MAGPIE_REG_RST_PWDN_CTRL_ADDR, BIT0);
  90482f:	033a02        	or	a10, a3, a3
  904832:	5bff9e        	call8	9046ac <io32_rmw$constprop$0>
  904835:	c080      	movi.n	a8, 0
  904837:	0c0200        	memw
  90483a:	9830      	s32i.n	a8, a3, 0
	iowrite32(MAGPIE_REG_RST_PWDN_CTRL_ADDR, 0);
	A_DELAY_USECS(1000);
  90483c:	137182        	l32r	a3, 8e0e44 <_bss_end+0x3d363c>
  90483f:	2a3ae8        	movi	a10, 0x3e8
  904842:	28323a        	l32i	a8, a3, 232
  904845:	0b8000        	callx8	a8

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  904848:	1871cb        	l32r	a8, 8e0f74 <_bss_end+0x3d376c>

	/* disable ep3 int enable, so that resume back won't
	 * send wdt magic pattern out!!! */
	mUSB_STATUS_IN_INT_DISABLE();
  90484b:	2a0ac0        	movi	a10, 192
  90484e:	298000        	l8ui	a9, a8, 0
  904851:	090947        	extui	a9, a9, 0, 8
  904854:	0a9902        	or	a9, a9, a10
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  904857:	0c0200        	memw
  90485a:	298400        	s8i	a9, a8, 0

	MAGPIE_REG_USB_RX0_SWAP_DATA = 0x1;
  90485d:	1971da        	l32r	a9, 8e0fc8 <_bss_end+0x3d37c0>
  904860:	c081      	movi.n	a8, 1
  904862:	0c0200        	memw
  904865:	9890      	s32i.n	a8, a9, 0
	MAGPIE_REG_USB_TX0_SWAP_DATA = 0x1;
  904867:	1971db        	l32r	a9, 8e0fd4 <_bss_end+0x3d37cc>
  90486a:	0c0200        	memw
  90486d:	9890      	s32i.n	a8, a9, 0
	MAGPIE_REG_USB_RX1_SWAP_DATA = 0x1;
  90486f:	1971dc        	l32r	a9, 8e0fe0 <_bss_end+0x3d37d8>
  904872:	0c0200        	memw
  904875:	9890      	s32i.n	a8, a9, 0
	MAGPIE_REG_USB_RX2_SWAP_DATA = 0x1;
  904877:	1971dd        	l32r	a9, 8e0fec <_bss_end+0x3d37e4>
  90487a:	0c0200        	memw
  90487d:	9890      	s32i.n	a8, a9, 0

	if (((DEBUG_SYSTEM_STATE&~(0x0000ffff))>>16 == 0x5342)) {
  90487f:	0c0200        	memw
  904882:	8820      	l32i.n	a8, a2, 0
  904884:	127181        	l32r	a2, 8e0e88 <_bss_end+0x3d3680>
  904887:	08085f        	extui	a8, a8, 16, 16
  90488a:	72890a        	bne	a8, a2, 904898 <_fw_usb_suspend_reboot+0x1c8>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90488d:	127210        	l32r	a2, 8e10d0 <_bss_end+0x3d38c8>
  904890:	283a00        	movi	a8, 0x300
  904893:	0c0200        	memw
  904896:	9820      	s32i.n	a8, a2, 0
		/* UART_SEL and SPI_SEL */
		iowrite32(0x50040, 0x300 | 0 | (1 >> 1) << 12);
	}

	/* Jump to boot code */
	A_USB_JUMP_BOOT();
  904898:	22322b        	l32i	a2, a3, 172
  90489b:	0b2000        	callx8	a2
  90489e:	d10f      	retw.n

009048a0 <_fw_usb_fw_task>:
 * usb zero length interrupt should not clear by s/w, h/w will handle that
 * complete suspend handle, configure gpio, turn off related function,
 * slow down the pll for stable issue
 */
void _fw_usb_fw_task(void)
{
  9048a0:	6c1004        	entry	a1, 32

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  9048a3:	127211        	l32r	a2, 8e10e8 <_bss_end+0x3d38e0>
  9048a6:	232000        	l8ui	a3, a2, 0
  9048a9:	030347        	extui	a3, a3, 0, 8
	if (usb_interrupt_level1 & BIT5)
	{
		vUsb_Data_In();
	}
#endif
	if (usb_interrupt_level1 & BIT4) {
  9048ac:	7b3711        	bbci	a3, 27, 9048c1 <_fw_usb_fw_task+0x21>
  9048af:	127212        	l32r	a2, 8e10f8 <_bss_end+0x3d38f0>
  9048b2:	222000        	l8ui	a2, a2, 0
		usb_interrupt_level2 =
			ioread8_usb(ZM_INTR_SOURCE_4_OFFSET);

		if(usb_interrupt_level2 & BIT6)
  9048b5:	792708        	bbci	a2, 25, 9048c1 <_fw_usb_fw_task+0x21>
			A_USB_REG_OUT(); /* vUsb_Reg_Out() */
  9048b8:	127182        	l32r	a2, 8e0ec0 <_bss_end+0x3d36b8>
  9048bb:	222232        	l32i	a2, a2, 200
  9048be:	0b2000        	callx8	a2
	}

	if (usb_interrupt_level1 & BIT6) {
  9048c1:	c420      	movi.n	a2, 64
  9048c3:	723014        	bnone	a3, a2, 9048db <_fw_usb_fw_task+0x3b>
  9048c6:	187213        	l32r	a8, 8e1114 <_bss_end+0x3d390c>
  9048c9:	288000        	l8ui	a8, a8, 0
  9048cc:	080847        	extui	a8, a8, 0, 8
		/* zfGenWatchDogEvent(); ?? */
		usb_interrupt_level2 =
			ioread8_usb(ZM_INTR_SOURCE_6_OFFSET);
		if(usb_interrupt_level2 & BIT6)
  9048cf:	728008        	bnone	a8, a2, 9048db <_fw_usb_fw_task+0x3b>
			A_USB_STATUS_IN(); /* vUsb_Status_In() */
  9048d2:	127182        	l32r	a2, 8e0edc <_bss_end+0x3d36d4>
  9048d5:	222233        	l32i	a2, a2, 204
  9048d8:	0b2000        	callx8	a2
	}

	if (usb_interrupt_level1 & BIT0) {
  9048db:	7f3f02        	bbsi	a3, 31, 9048e1 <_fw_usb_fw_task+0x41>
  9048de:	60008e        	j	904970 <_fw_usb_fw_task+0xd0>
  9048e1:	1a7214        	l32r	a10, 8e1134 <_bss_end+0x3d392c>
  9048e4:	28a000        	l8ui	a8, a10, 0
			ioread8_usb(ZM_INTR_SOURCE_0_OFFSET);

		/* refer to FUSB200, p 48, offset:21H, bit7 description,
		 * should clear the command abort interrupt first!?
		 */
		if (usb_interrupt_level2 & BIT7) {
  9048e7:	080247        	extui	a2, a8, 0, 8
  9048ea:	788713        	bbci	a8, 24, 904901 <_fw_usb_fw_task+0x61>
			/* Handle command abort */
			io8_clr_usb(ZM_INTR_SOURCE_0_OFFSET, BIT7);
  9048ed:	c0b0      	movi.n	a11, 0
  9048ef:	2c0a80        	movi	a12, 128
  9048f2:	5bff63        	call8	904680 <io8_rmw>
			A_PRINTF("![SOURCE_0] bit7 on\n\r");
  9048f5:	187182        	l32r	a8, 8e0f00 <_bss_end+0x3d36f8>
  9048f8:	1a7215        	l32r	a10, 8e114c <_bss_end+0x3d3944>
  9048fb:	288212        	l32i	a8, a8, 72
  9048fe:	0b8000        	callx8	a8
		}

		if (usb_interrupt_level2 & BIT1)
  904901:	7e2708        	bbci	a2, 30, 90490d <_fw_usb_fw_task+0x6d>
			A_USB_EP0_TX(); /* USB EP0 tx interrupt */
  904904:	187182        	l32r	a8, 8e0f0c <_bss_end+0x3d3704>
  904907:	288220        	l32i	a8, a8, 128
  90490a:	0b8000        	callx8	a8

		if (usb_interrupt_level2 & BIT2)
  90490d:	7d2708        	bbci	a2, 29, 904919 <_fw_usb_fw_task+0x79>
			A_USB_EP0_RX(); /* USB EP0 rx interrupt */
  904910:	187182        	l32r	a8, 8e0f18 <_bss_end+0x3d3710>
  904913:	288221        	l32i	a8, a8, 132
  904916:	0b8000        	callx8	a8

		if (usb_interrupt_level2 & BIT0) {
  904919:	7f2708        	bbci	a2, 31, 904925 <_fw_usb_fw_task+0x85>
			A_USB_EP0_SETUP();
  90491c:	187182        	l32r	a8, 8e0f24 <_bss_end+0x3d371c>
  90491f:	28821f        	l32i	a8, a8, 124
  904922:	0b8000        	callx8	a8
			/* vWriteUSBFakeData() */
		}

		if (usb_interrupt_level2 & BIT3) {
  904925:	7c2713        	bbci	a2, 28, 90493c <_fw_usb_fw_task+0x9c>
			/* vUsb_ep0end */
			eUsbCxCommand = CMD_VOID;
  904928:	187216        	l32r	a8, 8e1180 <_bss_end+0x3d3978>
  90492b:	c090      	movi.n	a9, 0
  90492d:	298600        	s32i	a9, a8, 0
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  904930:	187217        	l32r	a8, 8e118c <_bss_end+0x3d3984>
  904933:	290a01        	movi	a9, 1
  904936:	0c0200        	memw
  904939:	298400        	s8i	a9, a8, 0
			iowrite8_usb(ZM_CX_CONFIG_STATUS_OFFSET, 0x01);
		}

		/* EP0 fail */
	        if (usb_interrupt_level2 & BIT4)
  90493c:	7b270a        	bbci	a2, 27, 90494a <_fw_usb_fw_task+0xaa>
  90493f:	127217        	l32r	a2, 8e119c <_bss_end+0x3d3994>
  904942:	c084      	movi.n	a8, 4
  904944:	0c0200        	memw
  904947:	282400        	s8i	a8, a2, 0
			iowrite8_usb(ZM_CX_CONFIG_STATUS_OFFSET, 0x04);

		if (eUsbCxFinishAction == ACT_STALL) {
  90494a:	1871d9        	l32r	a8, 8e10b0 <_bss_end+0x3d38a8>
  90494d:	8280      	l32i.n	a2, a8, 0
  90494f:	69220d        	bnei	a2, 2, 904960 <_fw_usb_fw_task+0xc0>
  904952:	127217        	l32r	a2, 8e11b0 <_bss_end+0x3d39a8>
  904955:	c094      	movi.n	a9, 4
  904957:	0c0200        	memw
  90495a:	292400        	s8i	a9, a2, 0
  90495d:	60000b        	j	90496c <_fw_usb_fw_task+0xcc>
			/* set CX_STL to stall Endpoint0 &
			 * will also clear FIFO0 */
			iowrite8_usb(ZM_CX_CONFIG_STATUS_OFFSET, 0x04);
		} else if (eUsbCxFinishAction == ACT_DONE) {
  904960:	692108        	bnei	a2, 1, 90496c <_fw_usb_fw_task+0xcc>
  904963:	197217        	l32r	a9, 8e11c0 <_bss_end+0x3d39b8>
  904966:	0c0200        	memw
  904969:	229400        	s8i	a2, a9, 0
			/* set CX_DONE to indicate the transmistion
			 * of control frame */
			iowrite8_usb(ZM_CX_CONFIG_STATUS_OFFSET, 0x01);
		}
		eUsbCxFinishAction = ACT_IDLE;
  90496c:	c020      	movi.n	a2, 0
  90496e:	9280      	s32i.n	a2, a8, 0
	}

	if (usb_interrupt_level1 & BIT7) {
  904970:	003332        	sext	a3, a3, 7
  904973:	673045        	bgez	a3, 9049bc <_fw_usb_fw_task+0x11c>

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  904976:	1a7204        	l32r	a10, 8e1188 <_bss_end+0x3d3980>
  904979:	22a000        	l8ui	a2, a10, 0
  90497c:	020247        	extui	a2, a2, 0, 8

	if (usb_interrupt_level2 & BIT6)
		vUsb_Data_In0Byte();
#endif

		if (usb_interrupt_level2 & BIT1) {
  90497f:	7e271a        	bbci	a2, 30, 90499d <_fw_usb_fw_task+0xfd>
			io8_clr_usb(ZM_INTR_SOURCE_7_OFFSET, BIT1);
  904982:	c0b0      	movi.n	a11, 0
  904984:	c0c2      	movi.n	a12, 2
  904986:	5bff3e        	call8	904680 <io8_rmw>
			UsbChirpFinish = FALSE;
  904989:	137218        	l32r	a3, 8e11ec <_bss_end+0x3d39e4>
  90498c:	c080      	movi.n	a8, 0
  90498e:	283500        	s16i	a8, a3, 0
			A_PRINTF("!USB reset\n\r");
  904991:	137182        	l32r	a3, 8e0f9c <_bss_end+0x3d3794>
  904994:	1a7219        	l32r	a10, 8e11f8 <_bss_end+0x3d39f0>
  904997:	233212        	l32i	a3, a3, 72
  90499a:	0b3000        	callx8	a3
		}
		if (usb_interrupt_level2 & BIT2) {
  90499d:	7d2702        	bbci	a2, 29, 9049a3 <_fw_usb_fw_task+0x103>
			/* TBD: the suspend resume code should put here,
			 * Ryan, 07/18
			 * issue, jump back to rom code and what peripherals
			 * should we reset here? */
			_fw_usb_suspend_reboot();
  9049a0:	5bff4b        	call8	9046d0 <_fw_usb_suspend_reboot>
		}
		if (usb_interrupt_level2 & BIT3) {
  9049a3:	7c2715        	bbci	a2, 28, 9049bc <_fw_usb_fw_task+0x11c>
			io8_clr_usb(ZM_INTR_SOURCE_7_OFFSET, BIT3);
  9049a6:	1a7204        	l32r	a10, 8e11b8 <_bss_end+0x3d39b0>
  9049a9:	c0b0      	movi.n	a11, 0
  9049ab:	c0c8      	movi.n	a12, 8
  9049ad:	5bff34        	call8	904680 <io8_rmw>
			A_PRINTF("!USB resume\n\r");
  9049b0:	127182        	l32r	a2, 8e0fb8 <_bss_end+0x3d37b0>
  9049b3:	1a721a        	l32r	a10, 8e121c <_bss_end+0x3d3a14>
  9049b6:	222212        	l32i	a2, a2, 72
  9049b9:	0b2000        	callx8	a2
  9049bc:	d10f      	retw.n
	...

009049c0 <_fw_usb_reset_fifo>:
	}
}


void _fw_usb_reset_fifo(void)
{
  9049c0:	6c1004        	entry	a1, 32
	io8_set(0x100ae, 0x10);
  9049c3:	1a721b        	l32r	a10, 8e1230 <_bss_end+0x3d3a28>
  9049c6:	c1b0      	movi.n	a11, 16
  9049c8:	c0c0      	movi.n	a12, 0
  9049ca:	5bff2d        	call8	904680 <io8_rmw>
	io8_set(0x100af, 0x10);
  9049cd:	1a721c        	l32r	a10, 8e1240 <_bss_end+0x3d3a38>
  9049d0:	c0c0      	movi.n	a12, 0
  9049d2:	2b0a10        	movi	a11, 16
  9049d5:	5bff2a        	call8	904680 <io8_rmw>
  9049d8:	1271cb        	l32r	a2, 8e1104 <_bss_end+0x3d38fc>

	/* disable ep3 int enable, so that resume back won't
	 * send wdt magic pattern out!!!
	 */
	mUSB_STATUS_IN_INT_DISABLE();
  9049db:	240ac0        	movi	a4, 192
  9049de:	232000        	l8ui	a3, a2, 0
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9049e1:	c084      	movi.n	a8, 4

#include <adf_os_io_pvt.h>

static inline uint8_t ioread8(const volatile uint32_t addr)
{
	return *(const volatile uint8_t *) addr;
  9049e3:	030347        	extui	a3, a3, 0, 8
  9049e6:	043302        	or	a3, a3, a4
	return *(const volatile uint32_t *) addr;
}

static inline void iowrite8(volatile uint32_t addr, const uint8_t b)
{
	*(volatile uint8_t *) addr = b;
  9049e9:	0c0200        	memw
  9049ec:	232400        	s8i	a3, a2, 0
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9049ef:	137190        	l32r	a3, 8e1030 <_bss_end+0x3d3828>
  9049f2:	127187        	l32r	a2, 8e1010 <_bss_end+0x3d3808>
  9049f5:	c040      	movi.n	a4, 0
  9049f7:	0c0200        	memw
  9049fa:	9320      	s32i.n	a3, a2, 0
  9049fc:	13721d        	l32r	a3, 8e1270 <_bss_end+0x3d3a68>
  9049ff:	12720f        	l32r	a2, 8e123c <_bss_end+0x3d3a34>
  904a02:	0c0200        	memw
  904a05:	9430      	s32i.n	a4, a3, 0
  904a07:	0c0200        	memw
  904a0a:	9820      	s32i.n	a8, a2, 0
	 */
	iowrite32_usb(ZM_SOC_USB_DMA_RESET_OFFSET, 0x0);

	/* reset both usb(bit2)/wlan(bit1) dma */
	iowrite32(MAGPIE_REG_RST_PWDN_CTRL_ADDR, BIT2);
	io32_set(MAGPIE_REG_RST_PWDN_CTRL_ADDR, BIT0);
  904a0c:	022a02        	or	a10, a2, a2
  904a0f:	2b0a01        	movi	a11, 1
  904a12:	5bff26        	call8	9046ac <io32_rmw$constprop$0>
  904a15:	0c0200        	memw
  904a18:	9420      	s32i.n	a4, a2, 0
  904a1a:	c021      	movi.n	a2, 1
  904a1c:	0c0200        	memw
  904a1f:	9230      	s32i.n	a2, a3, 0

	//*reg_data = 0x00000000;

	//while (*reg_data)   ;

	A_PRINTF("\n change clock to 22 and go to suspend now!");
  904a21:	127182        	l32r	a2, 8e102c <_bss_end+0x3d3824>
  904a24:	1a721e        	l32r	a10, 8e129c <_bss_end+0x3d3a94>
  904a27:	232212        	l32i	a3, a2, 72
  904a2a:	242a00        	movi	a4, 0x200
  904a2d:	0b3000        	callx8	a3
  904a30:	137210        	l32r	a3, 8e1270 <_bss_end+0x3d3a68>

	/* UART_SEL */
	iowrite32(0x50040, 0x200 | 0 | (1 >> 1) << 12);
	A_UART_HWINIT((22*1000*1000), 19200);
  904a33:	22221a        	l32i	a2, a2, 104
  904a36:	1a721f        	l32r	a10, 8e12b4 <_bss_end+0x3d3aac>
  904a39:	1b7220        	l32r	a11, 8e12bc <_bss_end+0x3d3ab4>
  904a3c:	0c0200        	memw
  904a3f:	9430      	s32i.n	a4, a3, 0
  904a41:	0b2000        	callx8	a2
  904a44:	d10f      	retw.n
	...

00904a48 <cmnos_clock_init_patch>:
extern a_uint32_t cticks;

// clock change 
//
void cmnos_clock_init_patch(a_uint32_t refclk)
{
  904a48:	6c1004        	entry	a1, 32
    ref_clk = refclk;
  904a4b:	187221        	l32r	a8, 8e12d0 <_bss_end+0x3d3ac8>
  904a4e:	9280      	s32i.n	a2, a8, 0
  904a50:	d10f      	retw.n
	...

00904a54 <cmnos_refclk_speed_get_patch>:
}

// retrieve current clock setting
// 
a_uint32_t cmnos_refclk_speed_get_patch(void)
{
  904a54:	6c1004        	entry	a1, 32
    return ref_clk;
}
  904a57:	187221        	l32r	a8, 8e12dc <_bss_end+0x3d3ad4>
  904a5a:	8280      	l32i.n	a2, a8, 0
  904a5c:	d10f      	retw.n
	...

00904a60 <cmnos_delay_us_patch>:


// software emulate delay function
//
void cmnos_delay_us_patch(int us)
{
  904a60:	6c1004        	entry	a1, 32
    a_uint32_t start_time = NOW();
  904a63:	5b8092        	call8	8e4cac <xthal_get_ccount>
    unsigned int num_ticks = us*ref_clk; // system_freq == number of ticks per 1us
  904a66:	187221        	l32r	a8, 8e12ec <_bss_end+0x3d3ae4>

// software emulate delay function
//
void cmnos_delay_us_patch(int us)
{
    a_uint32_t start_time = NOW();
  904a69:	d3a0      	mov.n	a3, a10
    unsigned int num_ticks = us*ref_clk; // system_freq == number of ticks per 1us
  904a6b:	288200        	l32i	a8, a8, 0
  904a6e:	082228        	mull	a2, a2, a8
    
    while ( (NOW() - start_time) < num_ticks) {
  904a71:	5b808e        	call8	8e4cac <xthal_get_ccount>
  904a74:	03aa0c        	sub	a10, a10, a3
  904a77:	72a3f6        	bltu	a10, a2, 904a71 <cmnos_delay_us_patch+0x11>
        /* busy spin */
        ;
    }
}
  904a7a:	d10f      	retw.n

00904a7c <cmnos_tick_patch>:


// software emulate microsecond ticks
//
void cmnos_tick_patch(void)
{
  904a7c:	6c1004        	entry	a1, 32
    static a_uint32_t last_tick = 0;
    a_uint32_t current_tick = NOW();
  904a7f:	5b808b        	call8	8e4cac <xthal_get_ccount>
    a_uint32_t delta_tick;

    delta_tick = (A_UINT32 ) (current_tick - last_tick)/(ref_clk<<10);
  904a82:	187221        	l32r	a8, 8e1308 <_bss_end+0x3d3b00>
  904a85:	127222        	l32r	a2, 8e1310 <_bss_end+0x3d3b08>
// software emulate microsecond ticks
//
void cmnos_tick_patch(void)
{
    static a_uint32_t last_tick = 0;
    a_uint32_t current_tick = NOW();
  904a88:	d3a0      	mov.n	a3, a10
    a_uint32_t delta_tick;

    delta_tick = (A_UINT32 ) (current_tick - last_tick)/(ref_clk<<10);
  904a8a:	8b80      	l32i.n	a11, a8, 0
  904a8c:	2a2200        	l32i	a10, a2, 0
  904a8f:	06bb11        	slli	a11, a11, 10
  904a92:	0a3a0c        	sub	a10, a3, a10
  904a95:	5b80c2        	call8	8e4da0 <__udivsi3>

    if( delta_tick > 0 )
  904a98:	c8a0      	beqz.n	a10, 904a9c <cmnos_tick_patch+0x20>
        last_tick = current_tick;
  904a9a:	9320      	s32i.n	a3, a2, 0

    cticks += delta_tick;
  904a9c:	127223        	l32r	a2, 8e1328 <_bss_end+0x3d3b20>
  904a9f:	8320      	l32i.n	a3, a2, 0
  904aa1:	a3aa      	add.n	a10, a10, a3
  904aa3:	9a20      	s32i.n	a10, a2, 0
  904aa5:	d10f      	retw.n
	...

00904aa8 <cmnos_milliseconds_patch>:
}

// get current sysmem up time in milliseconds based
// 
a_uint32_t cmnos_milliseconds_patch(void)
{
  904aa8:	6c1004        	entry	a1, 32
    cmnos_tick_patch();
  904aab:	5bfff4        	call8	904a7c <cmnos_tick_patch>
    
    return (cticks);
}
  904aae:	187223        	l32r	a8, 8e133c <_bss_end+0x3d3b34>
  904ab1:	8280      	l32i.n	a2, a8, 0
  904ab3:	d10f      	retw.n
  904ab5:	000000        	ill

00904ab8 <_cvt>:
LOCAL void
(*_putc)(char c) = cmnos_write_char;

LOCAL int
_cvt(unsigned long val, char *buf, long radix, char *digits)
{
  904ab8:	6c100e        	entry	a1, 112
    char temp[80];
    char *cp = temp;
    int length = 0;

    if (val == 0) {
  904abb:	cc2f      	bnez.n	a2, 904ace <_cvt+0x16>
        /* Special case */
        *cp++ = '0';
  904abd:	c320      	movi.n	a2, 48
  904abf:	221400        	s8i	a2, a1, 0
  904ac2:	b116      	addi.n	a6, a1, 1

LOCAL void
(*_putc)(char c) = cmnos_write_char;

LOCAL int
_cvt(unsigned long val, char *buf, long radix, char *digits)
  904ac4:	b014      	addi.n	a4, a1, -1
  904ac6:	d260      	mov.n	a2, a6
  904ac8:	d830      	mov.n	a8, a3
  904aca:	60002e        	j	904afc <_cvt+0x44>
  904acd:	00d610        	slli	a6, a13, 32
    if (val == 0) {
        /* Special case */
        *cp++ = '0';
    } else {
        while (val) {
            *cp++ = digits[val % radix];
  904ad0:	da20      	mov.n	a10, a2
  904ad2:	044b02        	or	a11, a4, a4
  904ad5:	5b80c6        	call8	8e4df0 <__umodsi3>
  904ad8:	aa5a      	add.n	a10, a5, a10
  904ada:	28a000        	l8ui	a8, a10, 0
            val /= radix;
  904add:	db40      	mov.n	a11, a4
    if (val == 0) {
        /* Special case */
        *cp++ = '0';
    } else {
        while (val) {
            *cp++ = digits[val % radix];
  904adf:	286400        	s8i	a8, a6, 0
            val /= radix;
  904ae2:	022a02        	or	a10, a2, a2
  904ae5:	5b80ae        	call8	8e4da0 <__udivsi3>
    if (val == 0) {
        /* Special case */
        *cp++ = '0';
    } else {
        while (val) {
            *cp++ = digits[val % radix];
  904ae8:	b166      	addi.n	a6, a6, 1
            val /= radix;
  904aea:	d2a0      	mov.n	a2, a10

    if (val == 0) {
        /* Special case */
        *cp++ = '0';
    } else {
        while (val) {
  904aec:	65afe0        	bnez	a10, 904ad0 <_cvt+0x18>
  904aef:	63ffd1        	j	904ac4 <_cvt+0xc>
  904af2:	000025        	excw
            *cp++ = digits[val % radix];
            val /= radix;
        }
    }
    while (cp != temp) {
        *buf++ = *--cp;
  904af5:	200025        	l8ui	a0, a0, 37
  904af8:	8400      	l32i.n	a4, a0, 0
  904afa:	b188      	addi.n	a8, a8, 1
  904afc:	b022      	addi.n	a2, a2, -1
        while (val) {
            *cp++ = digits[val % radix];
            val /= radix;
        }
    }
    while (cp != temp) {
  904afe:	7429f2        	bne	a2, a4, 904af4 <_cvt+0x3c>

LOCAL void
(*_putc)(char c) = cmnos_write_char;

LOCAL int
_cvt(unsigned long val, char *buf, long radix, char *digits)
  904b01:	01620c        	sub	a2, a6, a1
    }
    while (cp != temp) {
        *buf++ = *--cp;
        length++;
    }
    *buf = '\0';
  904b04:	a233      	add.n	a3, a3, a2
  904b06:	c040      	movi.n	a4, 0
  904b08:	243400        	s8i	a4, a3, 0
    return (length);
}
  904b0b:	d10f      	retw.n
  904b0d:	000000        	ill

00904b10 <cmnos_write_char>:

#include <stdarg.h>

LOCAL void
cmnos_write_char(char c)
{
  904b10:	6c1004        	entry	a1, 32
  904b13:	020247        	extui	a2, a2, 0, 8
    if (c == '\n') {
  904b16:	69290e        	bnei	a2, 10, 904b28 <cmnos_write_char+0x18>
        A_PUTC('\r');
  904b19:	137182        	l32r	a3, 8e1124 <_bss_end+0x3d391c>
  904b1c:	c0ad      	movi.n	a10, 13
  904b1e:	283214        	l32i	a8, a3, 80
  904b21:	0b8000        	callx8	a8
  904b24:	600008        	j	904b30 <cmnos_write_char+0x20>
  904b27:	00c03d        	excw
        A_PUTC('\n');
    } else if (c == '\r') {
  904b2a:	73210a        	beq	a2, a3, 904b38 <cmnos_write_char+0x28>
    } else {
      A_PUTC(c);
  904b2d:	137182        	l32r	a3, 8e1138 <_bss_end+0x3d3930>
  904b30:	233214        	l32i	a3, a3, 80
  904b33:	da20      	mov.n	a10, a2
  904b35:	0b3000        	callx8	a3
  904b38:	d10f      	retw.n
	...

00904b3c <fw_cmnos_printf>:
    return (res);
}

int
fw_cmnos_printf(const char *fmt, ...)
{
  904b3c:	6c1012        	entry	a1, 144
    va_list ap;
    int ret;

    va_start(ap, fmt);
  904b3f:	931d      	s32i.n	a3, a1, 52
  904b41:	231c30        	addi	a3, a1, 48
    char buf[sizeof(long)*8];
    char c, sign, *cp=buf;
    int left_prec, right_prec, zero_fill, pad, pad_on_right,
        i, islong, islonglong;
    long val = 0;
    int res = 0, length = 0;
  904b44:	c0b0      	movi.n	a11, 0
fw_cmnos_printf(const char *fmt, ...)
{
    va_list ap;
    int ret;

    va_start(ap, fmt);
  904b46:	941e      	s32i.n	a4, a1, 56
  904b48:	9319      	s32i.n	a3, a1, 36
  904b4a:	241c70        	addi	a4, a1, 112
  904b4d:	c034      	movi.n	a3, 4
  904b4f:	951f      	s32i.n	a5, a1, 60
  904b51:	9418      	s32i.n	a4, a1, 32
  904b53:	261610        	s32i	a6, a1, 64
  904b56:	271611        	s32i	a7, a1, 68
  904b59:	931a      	s32i.n	a3, a1, 40
    char buf[sizeof(long)*8];
    char c, sign, *cp=buf;
    int left_prec, right_prec, zero_fill, pad, pad_on_right,
        i, islong, islonglong;
    long val = 0;
    int res = 0, length = 0;
  904b5b:	2b1614        	s32i	a11, a1, 80
{
    char buf[sizeof(long)*8];
    char c, sign, *cp=buf;
    int left_prec, right_prec, zero_fill, pad, pad_on_right,
        i, islong, islonglong;
    long val = 0;
  904b5e:	d5b0      	mov.n	a5, a11

LOCAL
int cmnos_vprintf(void (*putc)(char c), const char *fmt, va_list ap)
{
    char buf[sizeof(long)*8];
    char c, sign, *cp=buf;
  904b60:	d410      	mov.n	a4, a1
  904b62:	6003a6        	j	904f0c <fw_cmnos_printf+0x3d0>
        i, islong, islonglong;
    long val = 0;
    int res = 0, length = 0;

    while ((c = *fmt++) != '\0') {
        if (c == '%') {
  904b65:	c265      	movi.n	a6, 37
  904b67:	76a102        	beq	a10, a6, 904b6d <fw_cmnos_printf+0x31>
  904b6a:	60038b        	j	904ef9 <fw_cmnos_printf+0x3bd>
            c = *fmt++;
  904b6d:	282001        	l8ui	a8, a2, 1
            left_prec = right_prec = pad_on_right = islong = islonglong = 0;
            if (c == '-') {
  904b70:	c26d      	movi.n	a6, 45
  904b72:	76810a        	beq	a8, a6, 904b80 <fw_cmnos_printf+0x44>
    int res = 0, length = 0;

    while ((c = *fmt++) != '\0') {
        if (c == '%') {
            c = *fmt++;
            left_prec = right_prec = pad_on_right = islong = islonglong = 0;
  904b75:	c090      	movi.n	a9, 0
    long val = 0;
    int res = 0, length = 0;

    while ((c = *fmt++) != '\0') {
        if (c == '%') {
            c = *fmt++;
  904b77:	b222      	addi.n	a2, a2, 2
            left_prec = right_prec = pad_on_right = islong = islonglong = 0;
  904b79:	291616        	s32i	a9, a1, 88
  904b7c:	60000a        	j	904b8a <fw_cmnos_printf+0x4e>
  904b7f:	00c061        	excw
            if (c == '-') {
                c = *fmt++;
  904b82:	282002        	l8ui	a8, a2, 2
                pad_on_right++;
  904b85:	261616        	s32i	a6, a1, 88
    while ((c = *fmt++) != '\0') {
        if (c == '%') {
            c = *fmt++;
            left_prec = right_prec = pad_on_right = islong = islonglong = 0;
            if (c == '-') {
                c = *fmt++;
  904b88:	b322      	addi.n	a2, a2, 3
            }
            if (c == '0') {
                zero_fill = TRUE;
                c = *fmt++;
            } else {
                zero_fill = FALSE;
  904b8a:	c090      	movi.n	a9, 0
  904b8c:	291615        	s32i	a9, a1, 84
            left_prec = right_prec = pad_on_right = islong = islonglong = 0;
            if (c == '-') {
                c = *fmt++;
                pad_on_right++;
            }
            if (c == '0') {
  904b8f:	c360      	movi.n	a6, 48
  904b91:	768909        	bne	a8, a6, 904b9e <fw_cmnos_printf+0x62>
                zero_fill = TRUE;
  904b94:	c061      	movi.n	a6, 1
                c = *fmt++;
  904b96:	282000        	l8ui	a8, a2, 0
            if (c == '-') {
                c = *fmt++;
                pad_on_right++;
            }
            if (c == '0') {
                zero_fill = TRUE;
  904b99:	261615        	s32i	a6, a1, 84
                c = *fmt++;
  904b9c:	b122      	addi.n	a2, a2, 1
            if (c == '-') {
                c = *fmt++;
                pad_on_right++;
            }
            if (c == '0') {
                zero_fill = TRUE;
  904b9e:	c060      	movi.n	a6, 0
                c = *fmt++;
            } else {
                zero_fill = FALSE;
            }
            while (is_digit(c)) {
  904ba0:	c0c9      	movi.n	a12, 9
  904ba2:	60000a        	j	904bb0 <fw_cmnos_printf+0x74>
                left_prec = (left_prec * 10) + (c - '0');
  904ba5:	06660a        	addx4	a6, a6, a6
                c = *fmt++;
  904ba8:	282000        	l8ui	a8, a2, 0
                c = *fmt++;
            } else {
                zero_fill = FALSE;
            }
            while (is_digit(c)) {
                left_prec = (left_prec * 10) + (c - '0');
  904bab:	076609        	addx2	a6, a6, a7
                c = *fmt++;
  904bae:	b122      	addi.n	a2, a2, 1
                zero_fill = TRUE;
                c = *fmt++;
            } else {
                zero_fill = FALSE;
            }
            while (is_digit(c)) {
  904bb0:	278cd0        	addi	a7, a8, -48
  904bb3:	070a47        	extui	a10, a7, 0, 8
  904bb6:	7acbeb        	bgeu	a12, a10, 904ba5 <fw_cmnos_printf+0x69>
                left_prec = (left_prec * 10) + (c - '0');
                c = *fmt++;
            }
            if (c == '.') {
  904bb9:	c27e      	movi.n	a7, 46
  904bbb:	77891f        	bne	a8, a7, 904bde <fw_cmnos_printf+0xa2>
                c = *fmt++;
                zero_fill++;
  904bbe:	291215        	l32i	a9, a1, 84
            while (is_digit(c)) {
                left_prec = (left_prec * 10) + (c - '0');
                c = *fmt++;
            }
            if (c == '.') {
                c = *fmt++;
  904bc1:	282000        	l8ui	a8, a2, 0
                zero_fill++;
  904bc4:	b199      	addi.n	a9, a9, 1
            while (is_digit(c)) {
                left_prec = (left_prec * 10) + (c - '0');
                c = *fmt++;
            }
            if (c == '.') {
                c = *fmt++;
  904bc6:	b122      	addi.n	a2, a2, 1
                zero_fill++;
  904bc8:	291615        	s32i	a9, a1, 84
                while (is_digit(c)) {
  904bcb:	c0a9      	movi.n	a10, 9
  904bcd:	600004        	j	904bd5 <fw_cmnos_printf+0x99>
                    right_prec = (right_prec * 10) + (c - '0');
                    c = *fmt++;
  904bd0:	282000        	l8ui	a8, a2, 0
  904bd3:	b122      	addi.n	a2, a2, 1
                c = *fmt++;
            }
            if (c == '.') {
                c = *fmt++;
                zero_fill++;
                while (is_digit(c)) {
  904bd5:	278cd0        	addi	a7, a8, -48
  904bd8:	070747        	extui	a7, a7, 0, 8
  904bdb:	77abf1        	bgeu	a10, a7, 904bd0 <fw_cmnos_printf+0x94>
                }
            } else {
                right_prec = left_prec;
            }
            sign = '\0';
            if (c == 'l') {
  904bde:	2c0a6c        	movi	a12, 108
  904be1:	7c8910        	bne	a8, a12, 904bf5 <fw_cmnos_printf+0xb9>
                // 'long' qualifier
                c = *fmt++;
  904be4:	282000        	l8ui	a8, a2, 0
		islong = 1;
                if (c == 'l') {
  904be7:	7c8105        	beq	a8, a12, 904bf0 <fw_cmnos_printf+0xb4>
                right_prec = left_prec;
            }
            sign = '\0';
            if (c == 'l') {
                // 'long' qualifier
                c = *fmt++;
  904bea:	b122      	addi.n	a2, a2, 1
  904bec:	600005        	j	904bf5 <fw_cmnos_printf+0xb9>
  904bef:	002820        	excw
		islong = 1;
                if (c == 'l') {
                    // long long qualifier
                    c = *fmt++;
  904bf2:	01b222        	excw
                    islonglong = 1;
                }
            }
            // Fetch value [numeric descriptors only]
            switch (c) {
  904bf5:	2c0a62        	movi	a12, 98
  904bf8:	7c813a        	beq	a8, a12, 904c36 <fw_cmnos_printf+0xfa>
  904bfb:	78c319        	bltu	a12, a8, 904c18 <fw_cmnos_printf+0xdc>
  904bfe:	c4c4      	movi.n	a12, 68
  904c00:	7c8132        	beq	a8, a12, 904c36 <fw_cmnos_printf+0xfa>
  904c03:	78c305        	bltu	a12, a8, 904c0c <fw_cmnos_printf+0xd0>
  904c06:	c4c2      	movi.n	a12, 66
  904c08:	600025        	j	904c31 <fw_cmnos_printf+0xf5>
  904c0b:	00c5c5        	excw
  904c0e:	7c8124        	beq	a8, a12, 904c36 <fw_cmnos_printf+0xfa>
  904c11:	c5c8      	movi.n	a12, 88
  904c13:	60001a        	j	904c31 <fw_cmnos_printf+0xf5>
  904c16:	00002c        	excw
  904c19:	0a707c        	excw
  904c1c:	8117      	l32i.n	a1, a1, 28
  904c1e:	78c306        	bltu	a12, a8, 904c28 <fw_cmnos_printf+0xec>
  904c21:	2c0a64        	movi	a12, 100
  904c24:	600009        	j	904c31 <fw_cmnos_printf+0xf5>
  904c27:	002c0a        	addx4	a12, a2, a0
  904c2a:	757c81        	bnall	a7, a5, 904baf <fw_cmnos_printf+0x73>
  904c2d:	072c0a        	addx4	a12, a2, a7
  904c30:	78c070        	bnone	a12, a8, 904ca4 <fw_cmnos_printf+0x168>
  904c33:	7c8932        	bne	a8, a12, 904c69 <fw_cmnos_printf+0x12d>
                if (islonglong) {
                    val = va_arg(ap, long);
	        } else if (islong) {
                    val = (long)va_arg(ap, long);
		} else{
                    val = (long)va_arg(ap, int);
  904c36:	b437      	addi.n	a7, a3, 4
  904c38:	c1a8      	movi.n	a10, 24
  904c3a:	251c30        	addi	a5, a1, 48
  904c3d:	77aa07        	bge	a10, a7, 904c48 <fw_cmnos_printf+0x10c>
  904c40:	73a201        	blt	a10, a3, 904c45 <fw_cmnos_printf+0x109>
  904c43:	c274      	movi.n	a7, 36
  904c45:	251c70        	addi	a5, a1, 112
  904c48:	a755      	add.n	a5, a5, a7
                }
                if ((c == 'd') || (c == 'D')) {
  904c4a:	2cfadf        	movi	a12, -33
                if (islonglong) {
                    val = va_arg(ap, long);
	        } else if (islong) {
                    val = (long)va_arg(ap, long);
		} else{
                    val = (long)va_arg(ap, int);
  904c4d:	255cfc        	addi	a5, a5, -4
                }
                if ((c == 'd') || (c == 'D')) {
  904c50:	0c8c01        	and	a12, a8, a12
  904c53:	c4a4      	movi.n	a10, 68
                if (islonglong) {
                    val = va_arg(ap, long);
	        } else if (islong) {
                    val = (long)va_arg(ap, long);
		} else{
                    val = (long)va_arg(ap, int);
  904c55:	d370      	mov.n	a3, a7
  904c57:	8550      	l32i.n	a5, a5, 0
                    c = *fmt++;
                }
            } else {
                right_prec = left_prec;
            }
            sign = '\0';
  904c59:	c070      	movi.n	a7, 0
	        } else if (islong) {
                    val = (long)va_arg(ap, long);
		} else{
                    val = (long)va_arg(ap, int);
                }
                if ((c == 'd') || (c == 'D')) {
  904c5b:	7ac90a        	bne	a12, a10, 904c69 <fw_cmnos_printf+0x12d>
                    if (val < 0) {
  904c5e:	775a07        	bge	a5, a7, 904c69 <fw_cmnos_printf+0x12d>
                        sign = '-';
                        val = -val;
  904c61:	050506        	neg	a5, a5
		} else{
                    val = (long)va_arg(ap, int);
                }
                if ((c == 'd') || (c == 'D')) {
                    if (val < 0) {
                        sign = '-';
  904c64:	c27d      	movi.n	a7, 45
  904c66:	63ffff        	j	904c69 <fw_cmnos_printf+0x12d>
                break;
            default:
                break;
            }
            // Process output
            switch (c) {
  904c69:	2a0a62        	movi	a10, 98
  904c6c:	7a8902        	bne	a8, a10, 904c72 <fw_cmnos_printf+0x136>
  904c6f:	600141        	j	904db4 <fw_cmnos_printf+0x278>
  904c72:	78a32f        	bltu	a10, a8, 904ca5 <fw_cmnos_printf+0x169>
  904c75:	c4a4      	movi.n	a10, 68
  904c77:	7a8176        	beq	a8, a10, 904cf1 <fw_cmnos_printf+0x1b5>
  904c7a:	78a318        	bltu	a10, a8, 904c96 <fw_cmnos_printf+0x15a>
  904c7d:	c4a2      	movi.n	a10, 66
  904c7f:	7a8902        	bne	a8, a10, 904c85 <fw_cmnos_printf+0x149>
  904c82:	60012e        	j	904db4 <fw_cmnos_printf+0x278>
  904c85:	78ab02        	bgeu	a10, a8, 904c8b <fw_cmnos_printf+0x14f>
  904c88:	6000fa        	j	904d86 <fw_cmnos_printf+0x24a>
  904c8b:	c295      	movi.n	a9, 37
  904c8d:	798102        	beq	a8, a9, 904c93 <fw_cmnos_printf+0x157>
  904c90:	600159        	j	904ded <fw_cmnos_printf+0x2b1>
  904c93:	600149        	j	904de0 <fw_cmnos_printf+0x2a4>
  904c96:	c5a5      	movi.n	a10, 85
  904c98:	7a8155        	beq	a8, a10, 904cf1 <fw_cmnos_printf+0x1b5>
  904c9b:	c5a8      	movi.n	a10, 88
  904c9d:	7a8150        	beq	a8, a10, 904cf1 <fw_cmnos_printf+0x1b5>
  904ca0:	c5a3      	movi.n	a10, 83
  904ca2:	60002d        	j	904cd3 <fw_cmnos_printf+0x197>
  904ca5:	2a0a70        	movi	a10, 112
  904ca8:	7a8130        	beq	a8, a10, 904cdc <fw_cmnos_printf+0x1a0>
  904cab:	78a315        	bltu	a10, a8, 904cc4 <fw_cmnos_printf+0x188>
  904cae:	2a0a63        	movi	a10, 99
  904cb1:	7a8902        	bne	a8, a10, 904cb7 <fw_cmnos_printf+0x17b>
  904cb4:	6000ce        	j	904d86 <fw_cmnos_printf+0x24a>
  904cb7:	2a0a64        	movi	a10, 100
  904cba:	7a8102        	beq	a8, a10, 904cc0 <fw_cmnos_printf+0x184>
  904cbd:	60012c        	j	904ded <fw_cmnos_printf+0x2b1>
  904cc0:	60002d        	j	904cf1 <fw_cmnos_printf+0x1b5>
  904cc3:	002a0a        	addx4	a10, a2, a0
  904cc6:	757a81        	bge	a7, a5, 904c4b <fw_cmnos_printf+0x10f>
  904cc9:	262a0a        	movi	a6, 0x20a
  904ccc:	787a81        	bge	a7, a8, 904c51 <fw_cmnos_printf+0x115>
  904ccf:	202a0a        	movi	a0, 0x20a
  904cd2:	737a81        	bge	a7, a3, 904c57 <fw_cmnos_printf+0x11b>
  904cd5:	026001        	and	a0, a6, a2
  904cd8:	136000        	l32r	a3, 8dccd8 <_bss_end+0x3cf4d0>
  904cdb:	75c3a0        	bltu	a12, a5, 904c7f <fw_cmnos_printf+0x143>
            case 'p':  // Pointer
                (*putc)('0');
  904cde:	5bff8c        	call8	904b10 <cmnos_write_char>
                (*putc)('x');
  904ce1:	2a0a78        	movi	a10, 120
                zero_fill = TRUE;
  904ce4:	c041      	movi.n	a4, 1
            }
            // Process output
            switch (c) {
            case 'p':  // Pointer
                (*putc)('0');
                (*putc)('x');
  904ce6:	5bff8a        	call8	904b10 <cmnos_write_char>
                zero_fill = TRUE;
                left_prec = sizeof(unsigned long)*2;
  904ce9:	c068      	movi.n	a6, 8
            // Process output
            switch (c) {
            case 'p':  // Pointer
                (*putc)('0');
                (*putc)('x');
                zero_fill = TRUE;
  904ceb:	241615        	s32i	a4, a1, 84
  904cee:	600042        	j	904d34 <fw_cmnos_printf+0x1f8>
            case 'D':
            case 'u':
            case 'U':
            case 'x':
            case 'X':
                switch (c) {
  904cf1:	240a64        	movi	a4, 100
  904cf4:	748130        	beq	a8, a4, 904d28 <fw_cmnos_printf+0x1ec>
  904cf7:	784315        	bltu	a4, a8, 904d10 <fw_cmnos_printf+0x1d4>
  904cfa:	c545      	movi.n	a4, 85
  904cfc:	748128        	beq	a8, a4, 904d28 <fw_cmnos_printf+0x1ec>
  904cff:	c548      	movi.n	a4, 88
  904d01:	74813b        	beq	a8, a4, 904d40 <fw_cmnos_printf+0x204>
  904d04:	c444      	movi.n	a4, 68
  904d06:	748102        	beq	a8, a4, 904d0c <fw_cmnos_printf+0x1d0>
  904d09:	600101        	j	904e0e <fw_cmnos_printf+0x2d2>
  904d0c:	600018        	j	904d28 <fw_cmnos_printf+0x1ec>
  904d0f:	00240a        	addx4	a4, a2, a0
  904d12:	757481        	ball	a7, a5, 904c97 <fw_cmnos_printf+0x15b>
  904d15:	11240a        	l32r	a1, 8cdd40 <_bss_end+0x3c0538>
  904d18:	787481        	ball	a7, a8, 904c9d <fw_cmnos_printf+0x161>
  904d1b:	17240a        	l32r	a7, 8cdd44 <_bss_end+0x3c053c>
  904d1e:	707481        	ball	a7, a0, 904ca3 <fw_cmnos_printf+0x167>
  904d21:	026000        	ret
  904d24:	e8          	.byte 0xe8
  904d25:	60000b        	j	904d34 <fw_cmnos_printf+0x1f8>
                case 'd':
                case 'D':
                case 'u':
                case 'U':
                    length = _cvt(val, buf, 10, "0123456789");
  904d28:	da50      	mov.n	a10, a5
  904d2a:	db10      	mov.n	a11, a1
  904d2c:	c0ca      	movi.n	a12, 10
  904d2e:	1d7225        	l32r	a13, 8e15c4 <athos_indirection_table_install+0x7c>
  904d31:	600014        	j	904d49 <fw_cmnos_printf+0x20d>
                    break;
                case 'p':
                case 'x':
                    length = _cvt(val, buf, 16, "0123456789abcdef");
  904d34:	da50      	mov.n	a10, a5
  904d36:	db10      	mov.n	a11, a1
  904d38:	c1c0      	movi.n	a12, 16
  904d3a:	1d7226        	l32r	a13, 8e15d4 <athos_indirection_table_install+0x8c>
  904d3d:	600008        	j	904d49 <fw_cmnos_printf+0x20d>
                    break;
                case 'X':
                    length = _cvt(val, buf, 16, "0123456789ABCDEF");
  904d40:	1d7227        	l32r	a13, 8e15dc <athos_indirection_table_install+0x94>
  904d43:	da50      	mov.n	a10, a5
  904d45:	db10      	mov.n	a11, a1
  904d47:	c1c0      	movi.n	a12, 16
  904d49:	5bff5b        	call8	904ab8 <_cvt>
  904d4c:	dba0      	mov.n	a11, a10
  904d4e:	6000bc        	j	904e0e <fw_cmnos_printf+0x2d2>
  904d51:	00b438        	moveqz	a4, a11, a0
                }
                cp = buf;
                break;
            case 's':
            case 'S':
                cp = va_arg(ap, char *);
  904d54:	c1a8      	movi.n	a10, 24
  904d56:	241c30        	addi	a4, a1, 48
  904d59:	78aa07        	bge	a10, a8, 904d64 <fw_cmnos_printf+0x228>
  904d5c:	73a201        	blt	a10, a3, 904d61 <fw_cmnos_printf+0x225>
  904d5f:	c284      	movi.n	a8, 36
  904d61:	241c70        	addi	a4, a1, 112
  904d64:	a844      	add.n	a4, a4, a8
  904d66:	244cfc        	addi	a4, a4, -4
  904d69:	8440      	l32i.n	a4, a4, 0
                if (cp == NULL)  {
                    cp = "<null>";
  904d6b:	137224        	l32r	a3, 8e15fc <athos_indirection_table_install+0xb4>
                }
                length = 0;
  904d6e:	c0b0      	movi.n	a11, 0
                break;
            case 's':
            case 'S':
                cp = va_arg(ap, char *);
                if (cp == NULL)  {
                    cp = "<null>";
  904d70:	043438        	moveqz	a4, a3, a4
  904d73:	600001        	j	904d78 <fw_cmnos_printf+0x23c>
                }
                length = 0;
                while (cp[length] != '\0') length++;
  904d76:	b1bb      	addi.n	a11, a11, 1
    }
    return (res);
}

int
fw_cmnos_printf(const char *fmt, ...)
  904d78:	ab43      	add.n	a3, a4, a11
                cp = va_arg(ap, char *);
                if (cp == NULL)  {
                    cp = "<null>";
                }
                length = 0;
                while (cp[length] != '\0') length++;
  904d7a:	233000        	l8ui	a3, a3, 0
  904d7d:	653ff5        	bnez	a3, 904d76 <fw_cmnos_printf+0x23a>
  904d80:	d380      	mov.n	a3, a8
  904d82:	60008a        	j	904e10 <fw_cmnos_printf+0x2d4>
  904d85:	00b436        	minu	a4, a11, a0
                break;
            case 'c':
            case 'C':
                c = va_arg(ap, int /*char*/);
  904d88:	c188      	movi.n	a8, 24
  904d8a:	271c30        	addi	a7, a1, 48
  904d8d:	768a07        	bge	a8, a6, 904d98 <fw_cmnos_printf+0x25c>
  904d90:	738201        	blt	a8, a3, 904d95 <fw_cmnos_printf+0x259>
  904d93:	c264      	movi.n	a6, 36
  904d95:	271c70        	addi	a7, a1, 112
  904d98:	a677      	add.n	a7, a7, a6
  904d9a:	277cfc        	addi	a7, a7, -4
                (*putc)(c);
  904d9d:	2a7003        	l8ui	a10, a7, 3
  904da0:	2b1619        	s32i	a11, a1, 100
  904da3:	5bff5b        	call8	904b10 <cmnos_write_char>
                res++;
  904da6:	281214        	l32i	a8, a1, 80
  904da9:	d360      	mov.n	a3, a6
  904dab:	b188      	addi.n	a8, a8, 1
  904dad:	281614        	s32i	a8, a1, 80
  904db0:	600155        	j	904f09 <fw_cmnos_printf+0x3cd>
  904db3:	00c2b0        	excw
                continue;
            case 'b':
            case 'B':
                length = left_prec;
                if (left_prec == 0) {
  904db6:	066b39        	movnez	a11, a6, a6
                    else if (islong)
                        length = sizeof(long)*8;
                    else
                        length = sizeof(int)*8;
                }
                for (i = 0;  i < length-1;  i++) {
  904db9:	c040      	movi.n	a4, 0
  904dbb:	b0b8      	addi.n	a8, a11, -1
                    buf[i] = ((val & ((long)1<<i)) ? '1' : '.');
  904dbd:	c2ae      	movi.n	a10, 46
  904dbf:	c3c1      	movi.n	a12, 49
  904dc1:	600014        	j	904dd9 <fw_cmnos_printf+0x29d>
  904dc4:	004004        	ssr	a4
  904dc7:	050e1b        	sra	a14, a5
  904dca:	0e0e40        	extui	a14, a14, 0, 1
  904dcd:	d9c0      	mov.n	a9, a12
    }
    return (res);
}

int
fw_cmnos_printf(const char *fmt, ...)
  904dcf:	a41d      	add.n	a13, a1, a4
                        length = sizeof(long)*8;
                    else
                        length = sizeof(int)*8;
                }
                for (i = 0;  i < length-1;  i++) {
                    buf[i] = ((val & ((long)1<<i)) ? '1' : '.');
  904dd1:	0ea938        	moveqz	a9, a10, a14
  904dd4:	29d400        	s8i	a9, a13, 0
                    else if (islong)
                        length = sizeof(long)*8;
                    else
                        length = sizeof(int)*8;
                }
                for (i = 0;  i < length-1;  i++) {
  904dd7:	b144      	addi.n	a4, a4, 1
  904dd9:	7842e7        	blt	a4, a8, 904dc4 <fw_cmnos_printf+0x288>
  904ddc:	60002e        	j	904e0e <fw_cmnos_printf+0x2d2>
  904ddf:	00c2a5        	excw
                    buf[i] = ((val & ((long)1<<i)) ? '1' : '.');
                }
                cp = buf;
                break;
            case '%':
                (*putc)('%');
  904de2:	2b1619        	s32i	a11, a1, 100
  904de5:	5bff4a        	call8	904b10 <cmnos_write_char>
  904de8:	60001c        	j	904e08 <fw_cmnos_printf+0x2cc>
  904deb:	0000c2        	excw
                break;
            default:
                (*putc)('%');
  904dee:	a528      	add.n	a8, a2, a5
  904df0:	16182b        	l32r	a6, 8cae9c <_bss_end+0x3bd694>
  904df3:	16195b        	l32r	a6, 8cb360 <_bss_end+0x3bdb58>
  904df6:	ff          	.byte 0xff
  904df7:	462812        	excw
                (*putc)(c);
  904dfa:	18da80        	l32r	a8, 8fb7fc <memset+0x16660>
  904dfd:	5bff44        	call8	904b10 <cmnos_write_char>
                res += 2;
  904e00:	281214        	l32i	a8, a1, 80
  904e03:	b288      	addi.n	a8, a8, 2
  904e05:	281614        	s32i	a8, a1, 80
  904e08:	2b1219        	l32i	a11, a1, 100
  904e0b:	600001        	j	904e10 <fw_cmnos_printf+0x2d4>
                    break;
                case 'X':
                    length = _cvt(val, buf, 16, "0123456789ABCDEF");
                    break;
                }
                cp = buf;
  904e0e:	d410      	mov.n	a4, a1
            default:
                (*putc)('%');
                (*putc)(c);
                res += 2;
            }
            pad = left_prec - length;
  904e10:	0b660c        	sub	a6, a6, a11
            if (sign != '\0') {
  904e13:	c87a      	beqz.n	a7, 904e21 <fw_cmnos_printf+0x2e5>
                pad--;
            }
            if (zero_fill) {
  904e15:	291215        	l32i	a9, a1, 84
                (*putc)(c);
                res += 2;
            }
            pad = left_prec - length;
            if (sign != '\0') {
                pad--;
  904e18:	b066      	addi.n	a6, a6, -1
                    (*putc)(sign);
                    res++;
                    sign = '\0';
                }
            } else {
                c = ' ';
  904e1a:	c280      	movi.n	a8, 32
            }
            pad = left_prec - length;
            if (sign != '\0') {
                pad--;
            }
            if (zero_fill) {
  904e1c:	ca98      	beqz.n	a9, 904e48 <fw_cmnos_printf+0x30c>
  904e1e:	60000f        	j	904e31 <fw_cmnos_printf+0x2f5>
                c = '0';
  904e21:	291215        	l32i	a9, a1, 84
  904e24:	c380      	movi.n	a8, 48
  904e26:	c2a0      	movi.n	a10, 32
  904e28:	09a838        	moveqz	a8, a10, a9
  904e2b:	600019        	j	904e48 <fw_cmnos_printf+0x30c>
  904e2e:	000000        	ill
                if (sign != '\0') {
                    (*putc)(sign);
  904e31:	da70      	mov.n	a10, a7
  904e33:	2b1619        	s32i	a11, a1, 100
  904e36:	5bff36        	call8	904b10 <cmnos_write_char>
                    res++;
  904e39:	281214        	l32i	a8, a1, 80
            pad = left_prec - length;
            if (sign != '\0') {
                pad--;
            }
            if (zero_fill) {
                c = '0';
  904e3c:	2b1219        	l32i	a11, a1, 100
                if (sign != '\0') {
                    (*putc)(sign);
                    res++;
  904e3f:	b188      	addi.n	a8, a8, 1
  904e41:	281614        	s32i	a8, a1, 80
                    sign = '\0';
  904e44:	c070      	movi.n	a7, 0
            pad = left_prec - length;
            if (sign != '\0') {
                pad--;
            }
            if (zero_fill) {
                c = '0';
  904e46:	c380      	movi.n	a8, 48
                    sign = '\0';
                }
            } else {
                c = ' ';
            }
            if (!pad_on_right) {
  904e48:	291216        	l32i	a9, a1, 88
  904e4b:	dc60      	mov.n	a12, a6
  904e4d:	c99b      	beqz.n	a9, 904e6c <fw_cmnos_printf+0x330>
  904e4f:	60002e        	j	904e81 <fw_cmnos_printf+0x345>
                while (pad-- > 0) {
                    (*putc)(c);
  904e52:	da80      	mov.n	a10, a8
  904e54:	281618        	s32i	a8, a1, 96
  904e57:	2b1619        	s32i	a11, a1, 100
  904e5a:	2c1617        	s32i	a12, a1, 92
  904e5d:	5bff2c        	call8	904b10 <cmnos_write_char>
  904e60:	2c1217        	l32i	a12, a1, 92
  904e63:	2b1219        	l32i	a11, a1, 100
  904e66:	281218        	l32i	a8, a1, 96
  904e69:	2cccff        	addi	a12, a12, -1
                }
            } else {
                c = ' ';
            }
            if (!pad_on_right) {
                while (pad-- > 0) {
  904e6c:	6bc1e2        	bgei	a12, 1, 904e52 <fw_cmnos_printf+0x316>
  904e6f:	291214        	l32i	a9, a1, 80
    }
    return (res);
}

int
fw_cmnos_printf(const char *fmt, ...)
  904e72:	c080      	movi.n	a8, 0
  904e74:	086835        	max	a8, a6, a8
  904e77:	a899      	add.n	a9, a9, a8
  904e79:	b066      	addi.n	a6, a6, -1
  904e7b:	291614        	s32i	a9, a1, 80
  904e7e:	08660c        	sub	a6, a6, a8
                while (pad-- > 0) {
                    (*putc)(c);
                    res++;
                }
            }
            if (sign != '\0') {
  904e81:	647013        	beqz	a7, 904e98 <fw_cmnos_printf+0x35c>
                (*putc)(sign);
  904e84:	077a02        	or	a10, a7, a7
  904e87:	2b1619        	s32i	a11, a1, 100
  904e8a:	5bff21        	call8	904b10 <cmnos_write_char>
                res++;
  904e8d:	281214        	l32i	a8, a1, 80
  904e90:	2b1219        	l32i	a11, a1, 100
  904e93:	b188      	addi.n	a8, a8, 1
  904e95:	281614        	s32i	a8, a1, 80
                    (*putc)(sign);
                    res++;
                    sign = '\0';
                }
            } else {
                c = ' ';
  904e98:	d740      	mov.n	a7, a4
    }
    return (res);
}

int
fw_cmnos_printf(const char *fmt, ...)
  904e9a:	ab48      	add.n	a8, a4, a11
  904e9c:	600014        	j	904eb4 <fw_cmnos_printf+0x378>
  904e9f:	002a70        	excw
            if (sign != '\0') {
                (*putc)(sign);
                res++;
            }
            while (length-- > 0) {
                c = *cp++;
  904ea2:	002816        	excw
                (*putc)(c);
  904ea5:	182b16        	l32r	a8, 8cfb00 <_bss_end+0x3c22f8>
  904ea8:	195bff        	l32r	a9, 8dbea4 <_bss_end+0x3ce69c>
  904eab:	192b12        	l32r	a9, 8cfaf4 <_bss_end+0x3c22ec>
  904eae:	192812        	l32r	a9, 8ceef8 <_bss_end+0x3c16f0>
  904eb1:	18b177        	l32r	a8, 8f1490 <memset+0xc2f4>
    }
    return (res);
}

int
fw_cmnos_printf(const char *fmt, ...)
  904eb4:	078a0c        	sub	a10, a8, a7
            }
            if (sign != '\0') {
                (*putc)(sign);
                res++;
            }
            while (length-- > 0) {
  904eb7:	6ba1e5        	bgei	a10, 1, 904ea0 <fw_cmnos_printf+0x364>
  904eba:	291214        	l32i	a9, a1, 80
    }
    return (res);
}

int
fw_cmnos_printf(const char *fmt, ...)
  904ebd:	c070      	movi.n	a7, 0
  904ebf:	07b735        	max	a7, a11, a7
  904ec2:	a799      	add.n	a9, a9, a7
            while (length-- > 0) {
                c = *cp++;
                (*putc)(c);
                res++;
            }
            if (pad_on_right) {
  904ec4:	281216        	l32i	a8, a1, 88
    }
    return (res);
}

int
fw_cmnos_printf(const char *fmt, ...)
  904ec7:	b0bb      	addi.n	a11, a11, -1
  904ec9:	291614        	s32i	a9, a1, 80
  904ecc:	a744      	add.n	a4, a4, a7
  904ece:	07bb0c        	sub	a11, a11, a7
            while (length-- > 0) {
                c = *cp++;
                (*putc)(c);
                res++;
            }
            if (pad_on_right) {
  904ed1:	cb87      	beqz.n	a8, 904f0c <fw_cmnos_printf+0x3d0>
  904ed3:	d760      	mov.n	a7, a6
  904ed5:	60000c        	j	904ee5 <fw_cmnos_printf+0x3a9>
                while (pad-- > 0) {
                    (*putc)(' ');
  904ed8:	c2a0      	movi.n	a10, 32
  904eda:	2b1619        	s32i	a11, a1, 100
  904edd:	5bff0c        	call8	904b10 <cmnos_write_char>
  904ee0:	2b1219        	l32i	a11, a1, 100
  904ee3:	b077      	addi.n	a7, a7, -1
                c = *cp++;
                (*putc)(c);
                res++;
            }
            if (pad_on_right) {
                while (pad-- > 0) {
  904ee5:	6b71ef        	bgei	a7, 1, 904ed8 <fw_cmnos_printf+0x39c>
  904ee8:	291214        	l32i	a9, a1, 80
    }
    return (res);
}

int
fw_cmnos_printf(const char *fmt, ...)
  904eeb:	c070      	movi.n	a7, 0
  904eed:	076635        	max	a6, a6, a7
  904ef0:	a699      	add.n	a9, a9, a6
  904ef2:	291614        	s32i	a9, a1, 80
  904ef5:	600013        	j	904f0c <fw_cmnos_printf+0x3d0>
  904ef8:	002b16        	excw
                    (*putc)(' ');
                    res++;
                }
            }
        } else {
            (*putc)(c);
  904efb:	195bff        	l32r	a9, 8dbef8 <_bss_end+0x3ce6f0>
  904efe:	042612        	srai	a6, a4, 2
            res++;
  904f01:	14b122        	l32r	a4, 8f138c <memset+0xc1f0>
  904f04:	b166      	addi.n	a6, a6, 1
  904f06:	261614        	s32i	a6, a1, 80
  904f09:	2b1219        	l32i	a11, a1, 100
    int left_prec, right_prec, zero_fill, pad, pad_on_right,
        i, islong, islonglong;
    long val = 0;
    int res = 0, length = 0;

    while ((c = *fmt++) != '\0') {
  904f0c:	2a2000        	l8ui	a10, a2, 0
  904f0f:	65ac52        	bnez	a10, 904b65 <fw_cmnos_printf+0x29>
        ret = 0;
    }

    va_end(ap);
    return (ret);
}
  904f12:	221214        	l32i	a2, a1, 80
  904f15:	d10f      	retw.n
	...

00904f18 <ath_hal_attach_tgt>:

struct ath_hal*
ath_hal_attach_tgt(a_uint32_t devid,HAL_SOFTC sc,
		   adf_os_device_t dev,
		   a_uint32_t flags, HAL_STATUS *error)
{
  904f18:	6c1004        	entry	a1, 32
	struct ath_hal *ah = AH_NULL;

	ah = ar5416Attach(sc, dev, error);
  904f1b:	da30      	mov.n	a10, a3
  904f1d:	db40      	mov.n	a11, a4
  904f1f:	dc60      	mov.n	a12, a6
  904f21:	5804d9        	call8	906288 <ar5416Attach>

	return ah;
}
  904f24:	d2a0      	mov.n	a2, a10
  904f26:	d10f      	retw.n

00904f28 <ath_hal_getcapability>:

HAL_STATUS
ath_hal_getcapability(struct ath_hal *ah, HAL_CAPABILITY_TYPE type)
{
  904f28:	6c1004        	entry	a1, 32
	const HAL_CAPABILITIES *pCap = &AH_PRIVATE(ah)->ah_caps;
	switch (type) {
  904f2b:	68310d        	beqi	a3, 1, 904f3c <ath_hal_getcapability+0x14>
  904f2e:	c93e      	beqz.n	a3, 904f50 <ath_hal_getcapability+0x28>
	case HAL_CAP_BSSIDMASK:
		return pCap->halBssIdMaskSupport ? HAL_OK : HAL_ENOTSUPP;
	case HAL_CAP_VEOL:
		return pCap->halVEOLSupport ? HAL_OK : HAL_ENOTSUPP;
	default:
		return HAL_EINVAL;
  904f30:	233cfe        	addi	a3, a3, -2
  904f33:	c08d      	movi.n	a8, 13
  904f35:	c02c      	movi.n	a2, 12
  904f37:	038238        	moveqz	a2, a8, a3
  904f3a:	d10f      	retw.n
	const HAL_CAPABILITIES *pCap = &AH_PRIVATE(ah)->ah_caps;
	switch (type) {
	case HAL_CAP_TSF_ADJUST:
		return HAL_ENOTSUPP;
	case HAL_CAP_BSSIDMASK:
		return pCap->halBssIdMaskSupport ? HAL_OK : HAL_ENOTSUPP;
  904f3c:	28222b        	l32i	a8, a2, 172
  904f3f:	127228        	l32r	a2, 8e17e0 <athos_indirection_table_install+0x298>
  904f42:	c03d      	movi.n	a3, 13
  904f44:	028801        	and	a8, a8, a2
  904f47:	c020      	movi.n	a2, 0
  904f49:	083238        	moveqz	a2, a3, a8
  904f4c:	d10f      	retw.n
  904f4e:	000028        	mull	a0, a0, a0
	case HAL_CAP_VEOL:
		return pCap->halVEOLSupport ? HAL_OK : HAL_ENOTSUPP;
  904f51:	222b12        	l32ai	a2, a2, 72
  904f54:	722902        	bne	a2, a2, 904f5a <ath_hal_getcapability+0x32>
  904f57:	8201      	l32i.n	a2, a0, 4
  904f59:	c08d      	movi.n	a8, 13
  904f5b:	028338        	moveqz	a3, a8, a2
  904f5e:	d230      	mov.n	a2, a3
	default:
		return HAL_EINVAL;
	}
}
  904f60:	d10f      	retw.n
	...

00904f64 <ath_hal_computetxtime>:

a_uint16_t
ath_hal_computetxtime(struct ath_hal *ah,
		      const HAL_RATE_TABLE *rates, a_uint32_t frameLen, a_uint16_t rateix,
		      HAL_BOOL shortPreamble)
{
  904f64:	6c1004        	entry	a1, 32
  904f67:	05054f        	extui	a5, a5, 0, 16
	a_uint32_t bitsPerSymbol, numBits, numSymbols, phyTime, txTime;
	a_uint32_t kbps;

	kbps = rates->info[rateix].rateKbps;
  904f6a:	b252      	addi.n	a2, a5, 2
  904f6c:	0c2211        	slli	a2, a2, 4
  904f6f:	a233      	add.n	a3, a3, a2
  904f71:	8b33      	l32i.n	a11, a3, 12

	/*
	 * index can be invalid duting dynamic Turbo transitions.
	 */
	if(kbps == 0) return 0;
  904f73:	c020      	movi.n	a2, 0
  904f75:	72b158        	beq	a11, a2, 904fd1 <ath_hal_computetxtime+0x6d>
	switch (rates->info[rateix].phy) {
  904f78:	283009        	l8ui	a8, a3, 9
  904f7b:	728107        	beq	a8, a2, 904f86 <ath_hal_computetxtime+0x22>
  904f7e:	69824c        	bnei	a8, 2, 904fce <ath_hal_computetxtime+0x6a>
  904f81:	60002e        	j	904fb3 <ath_hal_computetxtime+0x4f>
  904f84:	0000cc        	excw

	case IEEE80211_T_CCK:
		phyTime = CCK_PREAMBLE_BITS + CCK_PLCP_BITS;
		if (shortPreamble && rates->info[rateix].shortPreamble)
  904f87:	67220a        	bgez	a2, 905195 <ar5416ProcRxDescFast_20+0x31>
	 */
	if(kbps == 0) return 0;
	switch (rates->info[rateix].phy) {

	case IEEE80211_T_CCK:
		phyTime = CCK_PREAMBLE_BITS + CCK_PLCP_BITS;
  904f8a:	c060      	movi.n	a6, 0
  904f8c:	000b00        	excw
  904f8f:	000022        	excw
		if (shortPreamble && rates->info[rateix].shortPreamble)
  904f92:	301164        	excw
  904f95:	2ff022        	l8ui	a15, a15, 34
			phyTime >>= 1;
  904f98:	0a600d        	subx2	a0, a6, a10
		numBits = frameLen << 3;
  904f9b:	431108        	excw
		txTime = phyTime + ((numBits * 1000)/kbps);
  904f9e:	441103        	excw
  904fa1:	440c03        	excw
  904fa4:	4a0a0d        	excw
  904fa7:	aa11      	add.n	a1, a1, a10
  904fa9:	5b7f7d        	call8	8e4da0 <__udivsi3>
  904fac:	baaa      	addi.n	a10, a10, 10
		/* TODO: make sure the same value of txTime can use in all device */
		if (ath_hal_getcapability(ah, HAL_CAP_HT) != HAL_OK)
			txTime = txTime + CCK_SIFS_TIME;
  904fae:	a2a2      	add.n	a2, a10, a2
  904fb0:	60001a        	j	904fce <ath_hal_computetxtime+0x6a>
		break;
	case IEEE80211_T_OFDM:
		/* full rate channel */
		bitsPerSymbol   = (kbps * OFDM_SYMBOL_TIME) / 1000;
  904fb3:	12722a        	l32r	a2, 8e185c <athos_indirection_table_install+0x314>
  904fb6:	0ebb11        	slli	a11, a11, 2
  904fb9:	02bb2a        	muluh	a11, a11, a2
  904fbc:	0b6b14        	srli	a11, a11, 6
		HALASSERT(bitsPerSymbol != 0);

		numBits = OFDM_PLCP_BITS + (frameLen << 3);
		numSymbols = asf_howmany(numBits, bitsPerSymbol);
  904fbf:	2abc15        	addi	a10, a11, 21
  904fc2:	0a4a0b        	addx8	a10, a4, a10
  904fc5:	5b7f76        	call8	8e4da0 <__udivsi3>
		txTime = OFDM_PREAMBLE_TIME + (numSymbols * OFDM_SYMBOL_TIME);
  904fc8:	0eaa11        	slli	a10, a10, 2
		/* TODO: make sure the same value of txTime can use in all device */
		if (ath_hal_getcapability(ah, HAL_CAP_HT) != HAL_OK)
			txTime = txTime + OFDM_SIFS_TIME;
  904fcb:	22ac24        	addi	a2, a10, 36
		break;
	default:
		txTime = 0;
		break;
	}
	return txTime;
  904fce:	02024f        	extui	a2, a2, 0, 16
}
  904fd1:	d10f      	retw.n
	...

00904fd4 <ath_hal_wait>:

#endif

HAL_BOOL
ath_hal_wait(struct ath_hal *ah, a_uint32_t reg, a_uint32_t mask, a_uint32_t val)
{
  904fd4:	6c1004        	entry	a1, 32
				return AH_TRUE;
			OS_DELAY(10);
		}
	} else {
		for (i = 0; i < AH_TIMEOUT_11G; i++) {
			if ((ioread32_mac(reg) & mask) == val)
  904fd7:	18722b        	l32r	a8, 8e1884 <athos_indirection_table_install+0x33c>

#endif

HAL_BOOL
ath_hal_wait(struct ath_hal *ah, a_uint32_t reg, a_uint32_t mask, a_uint32_t val)
{
  904fda:	223ae8        	movi	a2, 0x3e8
				return AH_TRUE;
			OS_DELAY(10);
		}
	} else {
		for (i = 0; i < AH_TIMEOUT_11G; i++) {
			if ((ioread32_mac(reg) & mask) == val)
  904fdd:	083308        	add	a3, a3, a8
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  904fe0:	0c0200        	memw
  904fe3:	8830      	l32i.n	a8, a3, 0
  904fe5:	084801        	and	a8, a4, a8
  904fe8:	75810d        	beq	a8, a5, 904ff9 <ath_hal_wait+0x25>
				return AH_TRUE;
			OS_DELAY(10);
  904feb:	2a0a0a        	movi	a10, 10
  904fee:	222cff        	addi	a2, a2, -1
  904ff1:	5bfaf2        	call8	903bbc <ath_hal_delay>
			if ((ioread32_mac(reg) & mask) == val)
				return AH_TRUE;
			OS_DELAY(10);
		}
	} else {
		for (i = 0; i < AH_TIMEOUT_11G; i++) {
  904ff4:	652fe8        	bnez	a2, 904fe0 <ath_hal_wait+0xc>
  904ff7:	d10f      	retw.n
			if ((ioread32_mac(reg) & mask) == val)
				return AH_TRUE;
  904ff9:	c021      	movi.n	a2, 1
	}
	return AH_FALSE;

#undef AH_TIMEOUT_11N
#undef AH_TIMEOUT_11G
}
  904ffb:	d10f      	retw.n
  904ffd:	000000        	ill

00905000 <ar5416IsInterruptPending>:
/**********************/
/* Interrupt Handling */
/**********************/

HAL_BOOL ar5416IsInterruptPending(struct ath_hal *ah)
{
  905000:	6c1004        	entry	a1, 32
  905003:	12722c        	l32r	a2, 8e18b4 <athos_indirection_table_install+0x36c>
  905006:	0c0200        	memw
  905009:	8820      	l32i.n	a8, a2, 0
		ioread32_mac(AR_INTR_ASYNC_CAUSE);
	/*
	 * Some platforms trigger our ISR before applying power to
	 * the card, so make sure.
	 */
	return ((host_isr != AR_INTR_SPURIOUS) && (host_isr & AR_INTR_MAC_IRQ));
  90500b:	c020      	movi.n	a2, 0
  90500d:	081940        	extui	a9, a8, 1, 1
  905010:	b188      	addi.n	a8, a8, 1
  905012:	089239        	movnez	a2, a9, a8
}
  905015:	d10f      	retw.n
	...

00905018 <ar5416SetInterrupts>:
	return AH_TRUE;
}

HAL_INT
ar5416SetInterrupts(struct ath_hal *ah, HAL_INT ints)
{
  905018:	6c1004        	entry	a1, 32
  90501b:	d920      	mov.n	a9, a2
	struct ath_hal_5416 *ahp = AH5416(ah);
	a_uint32_t omask = ahp->ah_maskReg;
  90501d:	222235        	l32i	a2, a2, 212
	a_uint32_t mask;

	if (omask & HAL_INT_GLOBAL) {
  905020:	672011        	bgez	a2, 905035 <ar5416SetInterrupts+0x1d>
  905023:	18722d        	l32r	a8, 8e18d8 <athos_indirection_table_install+0x390>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  905026:	2a0a00        	movi	a10, 0
  905029:	0c0200        	memw
  90502c:	2a8600        	s32i	a10, a8, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90502f:	0c0200        	memw
  905032:	288200        	l32i	a8, a8, 0
		iowrite32_mac(AR_IER, AR_IER_DISABLE);
		(void) ioread32_mac(AR_IER);
	}

	mask = ints & HAL_INT_COMMON;
  905035:	18722e        	l32r	a8, 8e18f0 <athos_indirection_table_install+0x3a8>
  905038:	083801        	and	a8, a3, a8
	if (ints & HAL_INT_TX) {
  90503b:	793705        	bbci	a3, 25, 905044 <ar5416SetInterrupts+0x2c>
#else
		mask |= AR_IMR_TXOK;
		mask |= AR_IMR_TXDESC;
#endif
		mask |= AR_IMR_TXERR;
		mask |= AR_IMR_TXEOL;
  90503e:	2a5ac0        	movi	a10, 0x5c0
  905041:	0a8802        	or	a8, a8, a10
	}
	if (ints & HAL_INT_RX) {
  905044:	7f3704        	bbci	a3, 31, 90504c <ar5416SetInterrupts+0x34>
		mask |= AR_IMR_RXERR;
#ifdef AR5416_INT_MITIGATION
		mask |=  AR_IMR_RXMINTR | AR_IMR_RXINTM;
#else
		mask |= AR_IMR_RXOK | AR_IMR_RXDESC;
  905047:	c0a7      	movi.n	a10, 7
  905049:	0a8802        	or	a8, a8, a10
#endif
	}

	if (ints & (HAL_INT_GTT | HAL_INT_CST)) {
  90504c:	1a722f        	l32r	a10, 8e1908 <athos_indirection_table_install+0x3c0>
  90504f:	7a3005        	bnone	a3, a10, 905058 <ar5416SetInterrupts+0x40>
		mask |= AR_IMR_BCNMISC;
  905052:	1a7230        	l32r	a10, 8e1914 <athos_indirection_table_install+0x3cc>
  905055:	0a8802        	or	a8, a8, a10
  905058:	1a7231        	l32r	a10, 8e191c <athos_indirection_table_install+0x3d4>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90505b:	0c0200        	memw
  90505e:	98a0      	s32i.n	a8, a10, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  905060:	0c0200        	memw
  905063:	88a0      	l32i.n	a8, a10, 0
	}

	iowrite32_mac(AR_IMR, mask);
	(void) ioread32_mac(AR_IMR);
	ahp->ah_maskReg = ints;
  905065:	239635        	s32i	a3, a9, 212

	/* Re-enable interrupts if they were enabled before. */
	if (ints & HAL_INT_GLOBAL) {
  905068:	673010        	bgez	a3, 90507c <ar5416SetInterrupts+0x64>
  90506b:	13722d        	l32r	a3, 8e1920 <athos_indirection_table_install+0x3d8>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90506e:	c081      	movi.n	a8, 1
  905070:	0c0200        	memw
  905073:	283600        	s32i	a8, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  905076:	0c0200        	memw
  905079:	233200        	l32i	a3, a3, 0
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90507c:	187232        	l32r	a8, 8e1944 <athos_indirection_table_install+0x3fc>
  90507f:	c032      	movi.n	a3, 2
  905081:	0c0200        	memw
  905084:	9380      	s32i.n	a3, a8, 0
  905086:	187233        	l32r	a8, 8e1954 <athos_indirection_table_install+0x40c>
  905089:	0c0200        	memw
  90508c:	9380      	s32i.n	a3, a8, 0
  90508e:	187235        	l32r	a8, 8e1964 <athos_indirection_table_install+0x41c>
  905091:	137234        	l32r	a3, 8e1964 <athos_indirection_table_install+0x41c>
  905094:	0c0200        	memw
  905097:	9830      	s32i.n	a8, a3, 0
	iowrite32_mac(AR_INTR_ASYNC_ENABLE, AR_INTR_MAC_IRQ);
	iowrite32_mac(AR_INTR_ASYNC_MASK, AR_INTR_MAC_IRQ);
	iowrite32_mac(AR_INTR_SYNC_ENABLE, AR_INTR_SYNC_ALL);

	return omask;
}
  905099:	d10f      	retw.n
	...

0090509c <ar5416GetTsf64>:
/****************/
/* TSF Handling */
/****************/

u_int64_t ar5416GetTsf64(struct ath_hal *ah)
{
  90509c:	6c1004        	entry	a1, 32
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90509f:	127236        	l32r	a2, 8e1978 <athos_indirection_table_install+0x430>
  9050a2:	137237        	l32r	a3, 8e1980 <athos_indirection_table_install+0x438>
  9050a5:	0c0200        	memw
  9050a8:	8220      	l32i.n	a2, a2, 0
  9050aa:	0c0200        	memw
  9050ad:	8330      	l32i.n	a3, a3, 0

	tsf = ioread32_mac(AR_TSF_U32);
	tsf = (tsf << 32) | ioread32_mac(AR_TSF_L32);

        return tsf;
}
  9050af:	d10f      	retw.n
  9050b1:	000000        	ill

009050b4 <ar5416SetRxDP>:

/******/
/* RX */
/******/
void ar5416SetRxDP(struct ath_hal *ah, a_uint32_t rxdp)
{
  9050b4:	6c1004        	entry	a1, 32
  9050b7:	187238        	l32r	a8, 8e1998 <athos_indirection_table_install+0x450>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9050ba:	0c0200        	memw
  9050bd:	9380      	s32i.n	a3, a8, 0
  9050bf:	d10f      	retw.n
  9050c1:	000000        	ill

009050c4 <ar5416EnableReceive>:
			     & ~AR_RXCFG_ZLFDMA);
	}
}

void ar5416EnableReceive(struct ath_hal *ah)
{
  9050c4:	6c1004        	entry	a1, 32
  9050c7:	187239        	l32r	a8, 8e19ac <athos_indirection_table_install+0x464>
  9050ca:	c094      	movi.n	a9, 4
  9050cc:	0c0200        	memw
  9050cf:	9980      	s32i.n	a9, a8, 0
  9050d1:	d10f      	retw.n
	...

009050d4 <ar5416StopPcuReceive>:
	iowrite32_mac(AR_CR, AR_CR_RXE);
}

void ar5416StopPcuReceive(struct ath_hal *ah)
{
  9050d4:	6c1004        	entry	a1, 32
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  9050d7:	18723a        	l32r	a8, 8e19c0 <athos_indirection_table_install+0x478>
	OS_REG_SET_BIT(ah, AR_DIAG_SW, AR_DIAG_RX_DIS);
  9050da:	c290      	movi.n	a9, 32
  9050dc:	0c0200        	memw
  9050df:	8a80      	l32i.n	a10, a8, 0
  9050e1:	09a902        	or	a9, a10, a9
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9050e4:	0c0200        	memw
  9050e7:	9980      	s32i.n	a9, a8, 0
  9050e9:	d10f      	retw.n
	...

009050ec <ar5416SetupRxDesc_20>:
}

HAL_BOOL ar5416SetupRxDesc_20(struct ath_rx_desc *ds,
			      a_uint32_t size, a_uint32_t flags)
{
  9050ec:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	HALASSERT((size &~ AR_BufLen) == 0);

	ads->ds_ctl1 = size & AR_BufLen;
  9050ef:	03084b        	extui	a8, a3, 0, 12
	if (flags & HAL_RXDESC_INTREQ)
  9050f2:	7a4f16        	bbsi	a4, 26, 90510c <ar5416SetupRxDesc_20+0x20>
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	HALASSERT((size &~ AR_BufLen) == 0);

	ads->ds_ctl1 = size & AR_BufLen;
  9050f5:	088957        	extui	a9, a8, 24, 8
  9050f8:	29240c        	s8i	a9, a2, 12
  9050fb:	088814        	srli	a8, a8, 8
  9050fe:	c090      	movi.n	a9, 0
  905100:	29240d        	s8i	a9, a2, 13
  905103:	28240e        	s8i	a8, a2, 14
  905106:	23240f        	s8i	a3, a2, 15
  905109:	60001a        	j	905127 <ar5416SetupRxDesc_20+0x3b>
	if (flags & HAL_RXDESC_INTREQ)
		ads->ds_ctl1 |= AR_RxIntrReq;
  90510c:	13723b        	l32r	a3, 8e19f8 <athos_indirection_table_install+0x4b0>
  90510f:	038802        	or	a8, a8, a3
  905112:	088357        	extui	a3, a8, 24, 8
  905115:	23240c        	s8i	a3, a2, 12
  905118:	080357        	extui	a3, a8, 16, 8
  90511b:	23240d        	s8i	a3, a2, 13
  90511e:	088347        	extui	a3, a8, 8, 8
  905121:	23240e        	s8i	a3, a2, 14
  905124:	28240f        	s8i	a8, a2, 15

	/* this should be enough */
	ads->ds_rxstatus8 &= ~AR_RxDone;
  905127:	292030        	l8ui	a9, a2, 48
  90512a:	232031        	l8ui	a3, a2, 49
  90512d:	282032        	l8ui	a8, a2, 50
  905130:	089910        	slli	a9, a9, 24
  905133:	003311        	slli	a3, a3, 16
  905136:	093302        	or	a3, a3, a9
  905139:	088811        	slli	a8, a8, 8
  90513c:	038802        	or	a8, a8, a3
  90513f:	232033        	l8ui	a3, a2, 51
  905142:	083802        	or	a8, a3, a8
  905145:	c73e      	movi.n	a3, -2
  905147:	038801        	and	a8, a8, a3
  90514a:	088357        	extui	a3, a8, 24, 8
  90514d:	232430        	s8i	a3, a2, 48
  905150:	080357        	extui	a3, a8, 16, 8
  905153:	232431        	s8i	a3, a2, 49
  905156:	088347        	extui	a3, a8, 8, 8
  905159:	232432        	s8i	a3, a2, 50
  90515c:	282433        	s8i	a8, a2, 51

	return AH_TRUE;
}
  90515f:	c021      	movi.n	a2, 1
  905161:	d10f      	retw.n
	...

00905164 <ar5416ProcRxDescFast_20>:

HAL_STATUS ar5416ProcRxDescFast_20(struct ath_hal *ah, struct ath_rx_desc *ds,
				   a_uint32_t pa, struct ath_desc *nds,
				   struct ath_rx_status *rx_stats)
{
  905164:	6c1004        	entry	a1, 32
	struct ar5416_desc ads;
	struct ar5416_desc *adsp = AR5416DESC(ds);
	struct ar5416_desc *ands = AR5416DESC(nds);

	if ((adsp->ds_rxstatus8 & AR_RxDone) == 0)
  905167:	293030        	l8ui	a9, a3, 48
  90516a:	223031        	l8ui	a2, a3, 49
  90516d:	283032        	l8ui	a8, a3, 50
  905170:	089910        	slli	a9, a9, 24
  905173:	002211        	slli	a2, a2, 16
  905176:	092202        	or	a2, a2, a9
  905179:	088811        	slli	a8, a8, 8
  90517c:	028802        	or	a8, a8, a2
  90517f:	223033        	l8ui	a2, a3, 51
  905182:	082802        	or	a8, a2, a8
		return HAL_EINPROGRESS;
  905185:	c02f      	movi.n	a2, 15
{
	struct ar5416_desc ads;
	struct ar5416_desc *adsp = AR5416DESC(ds);
	struct ar5416_desc *ands = AR5416DESC(nds);

	if ((adsp->ds_rxstatus8 & AR_RxDone) == 0)
  905187:	7f8f02        	bbsi	a8, 31, 90518d <ar5416ProcRxDescFast_20+0x29>
  90518a:	6001be        	j	90534c <ar5416ProcRxDescFast_20+0x1e8>
	/*
	 * Given the use of a self-linked tail be very sure that the hw is
	 * done with this descriptor; the hw may have done this descriptor
	 * once and picked it up again...make sure the hw has moved on.
	 */
	if ((ands->ds_rxstatus8 & AR_RxDone) == 0
  90518d:	255033        	l8ui	a5, a5, 51
  905190:	7f5f0d        	bbsi	a5, 31, 9051a1 <ar5416ProcRxDescFast_20+0x3d>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  905193:	157238        	l32r	a5, 8e1a74 <athos_indirection_table_install+0x52c>
  905196:	0c0200        	memw
  905199:	8550      	l32i.n	a5, a5, 0
	    && ioread32_mac(AR_RXDP) == pa)
  90519b:	745902        	bne	a5, a4, 9051a1 <ar5416ProcRxDescFast_20+0x3d>
  90519e:	6001aa        	j	90534c <ar5416ProcRxDescFast_20+0x1e8>
	 * Next we fill in all values in a caller passed stack variable.
	 * This reduces the number of uncached accesses.
	 * Do this copy here, after the check so that when the checks fail, we
	 * dont end up copying the entire stats uselessly.
	 */
	ads.u.rx = adsp->u.rx;
  9051a1:	243010        	l8ui	a4, a3, 16
  9051a4:	223011        	l8ui	a2, a3, 17
  9051a7:	2a3012        	l8ui	a10, a3, 18
  9051aa:	084410        	slli	a4, a4, 24
  9051ad:	002211        	slli	a2, a2, 16
  9051b0:	042202        	or	a2, a2, a4
  9051b3:	08aa11        	slli	a10, a10, 8
  9051b6:	02aa02        	or	a10, a10, a2
  9051b9:	223013        	l8ui	a2, a3, 19
  9051bc:	243014        	l8ui	a4, a3, 20
  9051bf:	0a2a02        	or	a10, a2, a10
  9051c2:	223015        	l8ui	a2, a3, 21
  9051c5:	2b3016        	l8ui	a11, a3, 22
  9051c8:	084410        	slli	a4, a4, 24
  9051cb:	002211        	slli	a2, a2, 16
  9051ce:	042202        	or	a2, a2, a4
  9051d1:	08bb11        	slli	a11, a11, 8
  9051d4:	02bb02        	or	a11, a11, a2
  9051d7:	223017        	l8ui	a2, a3, 23
  9051da:	243018        	l8ui	a4, a3, 24
  9051dd:	0b2b02        	or	a11, a2, a11
  9051e0:	223019        	l8ui	a2, a3, 25
  9051e3:	2c301a        	l8ui	a12, a3, 26
  9051e6:	084410        	slli	a4, a4, 24
  9051e9:	002211        	slli	a2, a2, 16
  9051ec:	042202        	or	a2, a2, a4
  9051ef:	08cc11        	slli	a12, a12, 8
  9051f2:	02cc02        	or	a12, a12, a2
  9051f5:	22301b        	l8ui	a2, a3, 27
  9051f8:	25301c        	l8ui	a5, a3, 28
  9051fb:	24301d        	l8ui	a4, a3, 29
  9051fe:	0c2c02        	or	a12, a2, a12
  905201:	22301e        	l8ui	a2, a3, 30
  905204:	085510        	slli	a5, a5, 24
  905207:	004411        	slli	a4, a4, 16
  90520a:	054402        	or	a4, a4, a5
  90520d:	082211        	slli	a2, a2, 8
  905210:	042202        	or	a2, a2, a4
  905213:	24301f        	l8ui	a4, a3, 31
  905216:	253020        	l8ui	a5, a3, 32
  905219:	024202        	or	a2, a4, a2
  90521c:	243021        	l8ui	a4, a3, 33
  90521f:	293022        	l8ui	a9, a3, 34
  905222:	085510        	slli	a5, a5, 24
  905225:	004411        	slli	a4, a4, 16
  905228:	054402        	or	a4, a4, a5
  90522b:	089911        	slli	a9, a9, 8
  90522e:	049902        	or	a9, a9, a4
  905231:	243023        	l8ui	a4, a3, 35
  905234:	2d3024        	l8ui	a13, a3, 36
  905237:	253025        	l8ui	a5, a3, 37
  90523a:	094902        	or	a9, a4, a9
  90523d:	243026        	l8ui	a4, a3, 38
  905240:	08dd10        	slli	a13, a13, 24
  905243:	005511        	slli	a5, a5, 16
  905246:	0d5502        	or	a5, a5, a13
  905249:	084411        	slli	a4, a4, 8
  90524c:	054402        	or	a4, a4, a5
  90524f:	253027        	l8ui	a5, a3, 39
  905252:	2e3028        	l8ui	a14, a3, 40
  905255:	2d3029        	l8ui	a13, a3, 41
  905258:	045402        	or	a4, a5, a4
  90525b:	25302a        	l8ui	a5, a3, 42
  90525e:	08ee10        	slli	a14, a14, 24
  905261:	00dd11        	slli	a13, a13, 16
  905264:	23302b        	l8ui	a3, a3, 43
  905267:	0edd02        	or	a13, a13, a14
  90526a:	085511        	slli	a5, a5, 8
  90526d:	0d5502        	or	a5, a5, a13
  905270:	053502        	or	a5, a3, a5

	rx_stats->rs_status = 0;
  905273:	c030      	movi.n	a3, 0
  905275:	23640a        	s8i	a3, a6, 10
	rx_stats->rs_flags = 0;
  905278:	23641a        	s8i	a3, a6, 26

	rx_stats->rs_datalen = ads.ds_rxstatus1 & AR_DataLen;
  90527b:	0b034b        	extui	a3, a11, 0, 12
  90527e:	236504        	s16i	a3, a6, 8
	rx_stats->rs_tstamp =  ads.AR_RcvTimestamp;
  905281:	c030      	movi.n	a3, 0
  905283:	9360      	s32i.n	a3, a6, 0
  905285:	9c61      	s32i.n	a12, a6, 4

	/* XXX what about KeyCacheMiss? */
	rx_stats->rs_rssi_combined = 
		MS(ads.ds_rxstatus4, AR_RxRSSICombined);
  905287:	098357        	extui	a3, a9, 24, 8

	rx_stats->rs_datalen = ads.ds_rxstatus1 & AR_DataLen;
	rx_stats->rs_tstamp =  ads.AR_RcvTimestamp;

	/* XXX what about KeyCacheMiss? */
	rx_stats->rs_rssi_combined = 
  90528a:	23640c        	s8i	a3, a6, 12
		MS(ads.ds_rxstatus4, AR_RxRSSICombined);
	rx_stats->rs_rssi_ctl0 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt00);
	rx_stats->rs_rssi_ctl1 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt01);
  90528d:	0a8347        	extui	a3, a10, 8, 8
  905290:	23640e        	s8i	a3, a6, 14
	rx_stats->rs_rssi_ctl2 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt02);
  905293:	0a0357        	extui	a3, a10, 16, 8
  905296:	23640f        	s8i	a3, a6, 15
	rx_stats->rs_rssi_ext0 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt10);
	rx_stats->rs_rssi_ext1 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt11);
  905299:	098347        	extui	a3, a9, 8, 8
  90529c:	236411        	s8i	a3, a6, 17
	rx_stats->rs_rssi_ext2 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt12);
  90529f:	090357        	extui	a3, a9, 16, 8
  9052a2:	236412        	s8i	a3, a6, 18
	rx_stats->rs_tstamp =  ads.AR_RcvTimestamp;

	/* XXX what about KeyCacheMiss? */
	rx_stats->rs_rssi_combined = 
		MS(ads.ds_rxstatus4, AR_RxRSSICombined);
	rx_stats->rs_rssi_ctl0 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt00);
  9052a5:	2a640d        	s8i	a10, a6, 13
	rx_stats->rs_rssi_ctl1 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt01);
	rx_stats->rs_rssi_ctl2 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt02);
	rx_stats->rs_rssi_ext0 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt10);
  9052a8:	296410        	s8i	a9, a6, 16
	rx_stats->rs_rssi_ext1 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt11);
	rx_stats->rs_rssi_ext2 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt12);
	if (ads.ds_rxstatus8 & AR_RxKeyIdxValid)
		rx_stats->rs_keyix = MS(ads.ds_rxstatus8, AR_KeyIdx);
  9052ab:	089346        	extui	a3, a8, 9, 7
	rx_stats->rs_rssi_ctl1 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt01);
	rx_stats->rs_rssi_ctl2 = MS(ads.ds_rxstatus0, AR_RxRSSIAnt02);
	rx_stats->rs_rssi_ext0 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt10);
	rx_stats->rs_rssi_ext1 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt11);
	rx_stats->rs_rssi_ext2 = MS(ads.ds_rxstatus4, AR_RxRSSIAnt12);
	if (ads.ds_rxstatus8 & AR_RxKeyIdxValid)
  9052ae:	778f02        	bbsi	a8, 23, 9052b4 <ar5416ProcRxDescFast_20+0x150>
		rx_stats->rs_keyix = MS(ads.ds_rxstatus8, AR_KeyIdx);
	else
		rx_stats->rs_keyix = HAL_RXKEYIX_INVALID;
  9052b1:	23faff        	movi	a3, -1
  9052b4:	236413        	s8i	a3, a6, 19
	/* NB: caller expected to do rate table mapping */
	rx_stats->rs_rate = RXSTATUS_RATE(ah, (&ads));
	rx_stats->rs_more = (ads.ds_rxstatus1 & AR_RxMore) ? 1 : 0;

	rx_stats->rs_isaggr = (ads.ds_rxstatus8 & AR_RxAggr) ? 1 : 0;
  9052b7:	081350        	extui	a3, a8, 17, 1
  9052ba:	236417        	s8i	a3, a6, 23
	rx_stats->rs_moreaggr = (ads.ds_rxstatus8 & AR_RxMoreAggr) ? 1 : 0;
  9052bd:	080350        	extui	a3, a8, 16, 1
	if (ads.ds_rxstatus8 & AR_RxKeyIdxValid)
		rx_stats->rs_keyix = MS(ads.ds_rxstatus8, AR_KeyIdx);
	else
		rx_stats->rs_keyix = HAL_RXKEYIX_INVALID;
	/* NB: caller expected to do rate table mapping */
	rx_stats->rs_rate = RXSTATUS_RATE(ah, (&ads));
  9052c0:	0a8a57        	extui	a10, a10, 24, 8
	rx_stats->rs_more = (ads.ds_rxstatus1 & AR_RxMore) ? 1 : 0;
  9052c3:	0bcb40        	extui	a11, a11, 12, 1

	rx_stats->rs_isaggr = (ads.ds_rxstatus8 & AR_RxAggr) ? 1 : 0;
	rx_stats->rs_moreaggr = (ads.ds_rxstatus8 & AR_RxMoreAggr) ? 1 : 0;
  9052c6:	236418        	s8i	a3, a6, 24
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_GI) ? HAL_RX_GI : 0;
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_2040) ? HAL_RX_2040 : 0;
  9052c9:	c032      	movi.n	a3, 2
	if (ads.ds_rxstatus8 & AR_RxKeyIdxValid)
		rx_stats->rs_keyix = MS(ads.ds_rxstatus8, AR_KeyIdx);
	else
		rx_stats->rs_keyix = HAL_RXKEYIX_INVALID;
	/* NB: caller expected to do rate table mapping */
	rx_stats->rs_rate = RXSTATUS_RATE(ah, (&ads));
  9052cb:	2a6414        	s8i	a10, a6, 20
	rx_stats->rs_more = (ads.ds_rxstatus1 & AR_RxMore) ? 1 : 0;
  9052ce:	2b6416        	s8i	a11, a6, 22

	rx_stats->rs_isaggr = (ads.ds_rxstatus8 & AR_RxAggr) ? 1 : 0;
	rx_stats->rs_moreaggr = (ads.ds_rxstatus8 & AR_RxMoreAggr) ? 1 : 0;
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_GI) ? HAL_RX_GI : 0;
  9052d1:	020a40        	extui	a10, a2, 0, 1
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_2040) ? HAL_RX_2040 : 0;
  9052d4:	c0b0      	movi.n	a11, 0
  9052d6:	032201        	and	a2, a2, a3
  9052d9:	c038      	movi.n	a3, 8
	rx_stats->rs_rate = RXSTATUS_RATE(ah, (&ads));
	rx_stats->rs_more = (ads.ds_rxstatus1 & AR_RxMore) ? 1 : 0;

	rx_stats->rs_isaggr = (ads.ds_rxstatus8 & AR_RxAggr) ? 1 : 0;
	rx_stats->rs_moreaggr = (ads.ds_rxstatus8 & AR_RxMoreAggr) ? 1 : 0;
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_GI) ? HAL_RX_GI : 0;
  9052db:	0eaa11        	slli	a10, a10, 2
	rx_stats->rs_flags  |= (ads.ds_rxstatus3 & AR_2040) ? HAL_RX_2040 : 0;
  9052de:	02b338        	moveqz	a3, a11, a2
  9052e1:	0a3302        	or	a3, a3, a10

	if (ads.ds_rxstatus8 & AR_PreDelimCRCErr)
  9052e4:	798f02        	bbsi	a8, 25, 9052ea <ar5416ProcRxDescFast_20+0x186>
  9052e7:	600004        	j	9052ef <ar5416ProcRxDescFast_20+0x18b>
		rx_stats->rs_flags |= HAL_RX_DELIM_CRC_PRE;
  9052ea:	c120      	movi.n	a2, 16
  9052ec:	023302        	or	a3, a3, a2
  9052ef:	23641a        	s8i	a3, a6, 26
	if (ads.ds_rxstatus8 & AR_PostDelimCRCErr)
  9052f2:	7d860a        	bbci	a8, 13, 905300 <ar5416ProcRxDescFast_20+0x19c>
		rx_stats->rs_flags |= HAL_RX_DELIM_CRC_POST;
  9052f5:	23601a        	l8ui	a3, a6, 26
  9052f8:	c220      	movi.n	a2, 32
  9052fa:	023202        	or	a2, a3, a2
  9052fd:	22641a        	s8i	a2, a6, 26
	if (ads.ds_rxstatus8 & AR_DecryptBusyErr)
  905300:	71860a        	bbci	a8, 1, 90530e <ar5416ProcRxDescFast_20+0x1aa>
		rx_stats->rs_flags |= HAL_RX_DECRYPT_BUSY;
  905303:	23601a        	l8ui	a3, a6, 26
  905306:	c420      	movi.n	a2, 64
  905308:	023202        	or	a2, a3, a2
  90530b:	22641a        	s8i	a2, a6, 26

	if ((ads.ds_rxstatus8 & AR_RxFrameOK) == 0) {
  90530e:	c032      	movi.n	a3, 2
  905310:	73882f        	bany	a8, a3, 905343 <ar5416ProcRxDescFast_20+0x1df>
		 * when a CRC error is detected, but these are specious.
		 * Consequently we filter them out here so we don't
		 * confuse and/or complicate drivers.
		 */
		if (ads.ds_rxstatus8 & AR_CRCErr)
			rx_stats->rs_status |= HAL_RXERR_CRC;
  905313:	c021      	movi.n	a2, 1
		 * indicates however that you can also get Michael errors
		 * when a CRC error is detected, but these are specious.
		 * Consequently we filter them out here so we don't
		 * confuse and/or complicate drivers.
		 */
		if (ads.ds_rxstatus8 & AR_CRCErr)
  905315:	7d8f27        	bbsi	a8, 29, 905340 <ar5416ProcRxDescFast_20+0x1dc>
			rx_stats->rs_status |= HAL_RXERR_CRC;
		else if (ads.ds_rxstatus8 & AR_PHYErr) {
  905318:	c120      	movi.n	a2, 16
  90531a:	728012        	bnone	a8, a2, 905330 <ar5416ProcRxDescFast_20+0x1cc>
			a_uint32_t phyerr;

			rx_stats->rs_status |= HAL_RXERR_PHY;
			phyerr = MS(ads.ds_rxstatus8, AR_PHYErrCode);
  90531d:	12723c        	l32r	a2, 8e1c10 <athos_indirection_table_install+0x6c8>
		if (ads.ds_rxstatus8 & AR_CRCErr)
			rx_stats->rs_status |= HAL_RXERR_CRC;
		else if (ads.ds_rxstatus8 & AR_PHYErr) {
			a_uint32_t phyerr;

			rx_stats->rs_status |= HAL_RXERR_PHY;
  905320:	23640a        	s8i	a3, a6, 10
			phyerr = MS(ads.ds_rxstatus8, AR_PHYErrCode);
  905323:	028801        	and	a8, a8, a2
  905326:	088814        	srli	a8, a8, 8
			rx_stats->rs_phyerr = phyerr;
  905329:	28640b        	s8i	a8, a6, 11
  90532c:	600013        	j	905343 <ar5416ProcRxDescFast_20+0x1df>
  90532f:	00c038        	moveqz	a0, a12, a0
		} else if (ads.ds_rxstatus8 & AR_DecryptCRCErr)
  905332:	738007        	bnone	a8, a3, 90533d <ar5416ProcRxDescFast_20+0x1d9>
			rx_stats->rs_status |= HAL_RXERR_DECRYPT;
  905335:	23640a        	s8i	a3, a6, 10
  905338:	600007        	j	905343 <ar5416ProcRxDescFast_20+0x1df>
  90533b:	00007a        	excw
		else if (ads.ds_rxstatus8 & AR_MichaelErr)
  90533e:	8702      	l32i.n	a7, a0, 8
			rx_stats->rs_status |= HAL_RXERR_MIC;
  905340:	22640a        	s8i	a2, a6, 10
	}
	rx_stats->evm0=ads.AR_RxEVM0;
  905343:	9967      	s32i.n	a9, a6, 28
	rx_stats->evm1=ads.AR_RxEVM1;
  905345:	9468      	s32i.n	a4, a6, 32
	rx_stats->evm2=ads.AR_RxEVM2;
  905347:	9569      	s32i.n	a5, a6, 36

	return HAL_OK;
  905349:	220a00        	movi	a2, 0
}
  90534c:	d10f      	retw.n
	...

00905350 <ar5416UpdateTxTrigLevel>:
/******/
/* TX */
/******/

HAL_BOOL ar5416UpdateTxTrigLevel(struct ath_hal *ah, HAL_BOOL bIncTrigLevel)
{
  905350:	6c1004        	entry	a1, 32
        HAL_INT omask;

        /*
         * Disable interrupts while futzing with the fifo level.
         */
        omask = ar5416SetInterrupts(ah, ahp->ah_maskReg &~ HAL_INT_GLOBAL);
  905353:	14723d        	l32r	a4, 8e1c48 <athos_indirection_table_install+0x700>
  905356:	2b2235        	l32i	a11, a2, 212
  905359:	da20      	mov.n	a10, a2
  90535b:	04bb01        	and	a11, a11, a4
  90535e:	5bff2e        	call8	905018 <ar5416SetInterrupts>
  905361:	14723e        	l32r	a4, 8e1c5c <athos_indirection_table_install+0x714>
  905364:	dba0      	mov.n	a11, a10
  905366:	0c0200        	memw
  905369:	8840      	l32i.n	a8, a4, 0

	txcfg = ioread32_mac(AR_TXCFG);
        curLevel = MS(txcfg, AR_FTRIG);
  90536b:	084445        	extui	a4, a8, 4, 6
        newLevel = curLevel;

        if (bIncTrigLevel)  {
  90536e:	c83a      	beqz.n	a3, 90537c <ar5416UpdateTxTrigLevel+0x2c>
		if (curLevel < MAX_TX_FIFO_THRESHOLD)
  905370:	c39f      	movi.n	a9, 63
  905372:	d340      	mov.n	a3, a4
  905374:	794128        	beq	a4, a9, 9053a0 <ar5416UpdateTxTrigLevel+0x50>
			newLevel ++;
  905377:	b143      	addi.n	a3, a4, 1
  905379:	600006        	j	905383 <ar5416UpdateTxTrigLevel+0x33>
        } else if (curLevel > MIN_TX_FIFO_THRESHOLD)
  90537c:	d340      	mov.n	a3, a4
  90537e:	6e421e        	bltui	a4, 2, 9053a0 <ar5416UpdateTxTrigLevel+0x50>
                newLevel--;
  905381:	b043      	addi.n	a3, a4, -1
        if (newLevel != curLevel)
  905383:	743119        	beq	a3, a4, 9053a0 <ar5416UpdateTxTrigLevel+0x50>
		iowrite32_mac(AR_TXCFG,
  905386:	0c3a11        	slli	a10, a3, 4
  905389:	293af0        	movi	a9, 0x3f0
  90538c:	09a901        	and	a9, a10, a9
  90538f:	2aca0f        	movi	a10, 0xfffffc0f
  905392:	0a8801        	and	a8, a8, a10
  905395:	089802        	or	a8, a9, a8
  905398:	19723e        	l32r	a9, 8e1c90 <athos_indirection_table_install+0x748>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90539b:	0c0200        	memw
  90539e:	9890      	s32i.n	a8, a9, 0
			     (txcfg & ~AR_FTRIG) | SM(newLevel, AR_FTRIG));

        /* re-enable chip interrupts */
        ar5416SetInterrupts(ah, omask);
  9053a0:	da20      	mov.n	a10, a2
  9053a2:	5bff1d        	call8	905018 <ar5416SetInterrupts>

        return (newLevel != curLevel);
  9053a5:	04340c        	sub	a4, a3, a4
  9053a8:	c081      	movi.n	a8, 1
  9053aa:	c020      	movi.n	a2, 0
  9053ac:	048239        	movnez	a2, a8, a4
}
  9053af:	d10f      	retw.n
  9053b1:	000000        	ill

009053b4 <ar5416SetTxDP>:

HAL_BOOL ar5416SetTxDP(struct ath_hal *ah, a_uint32_t q, a_uint32_t txdp)
{
  9053b4:	6c1004        	entry	a1, 32
         * Make sure that TXE is deasserted before setting the TXDP.  If TXE
         * is still asserted, setting TXDP will have no effect.
         */
	HALASSERT((ioread32_mac(AR_Q_TXE) & (1 << q)) == 0);

	iowrite32_mac(AR_QTXDP(q), txdp);
  9053b7:	18723f        	l32r	a8, 8e1cb4 <athos_indirection_table_install+0x76c>

        return AH_TRUE;
}
  9053ba:	c021      	movi.n	a2, 1
         * Make sure that TXE is deasserted before setting the TXDP.  If TXE
         * is still asserted, setting TXDP will have no effect.
         */
	HALASSERT((ioread32_mac(AR_Q_TXE) & (1 << q)) == 0);

	iowrite32_mac(AR_QTXDP(q), txdp);
  9053bc:	08330a        	addx4	a3, a3, a8
  9053bf:	0c0200        	memw
  9053c2:	9430      	s32i.n	a4, a3, 0

        return AH_TRUE;
}
  9053c4:	d10f      	retw.n
	...

009053c8 <ar5416StartTxDma>:

HAL_BOOL ar5416StartTxDma(struct ath_hal *ah, a_uint32_t q)
{
  9053c8:	6c1004        	entry	a1, 32
        HALASSERT(AH5416(ah)->ah_txq[q].tqi_type != HAL_TX_QUEUE_INACTIVE);

        /* Check to be sure we're not enabling a q that has its TXD bit set. */
	HALASSERT((ioread32_mac(AR_Q_TXD) & (1 << q)) == 0);

	iowrite32_mac(AR_Q_TXE, 1 << q);
  9053cb:	c021      	movi.n	a2, 1
  9053cd:	187240        	l32r	a8, 8e1cd0 <athos_indirection_table_install+0x788>
  9053d0:	003104        	ssl	a3
  9053d3:	00231a        	sll	a3, a2
  9053d6:	0c0200        	memw
  9053d9:	9380      	s32i.n	a3, a8, 0

        return AH_TRUE;
}
  9053db:	d10f      	retw.n
  9053dd:	000000        	ill

009053e0 <ar5416NumTxPending>:

a_uint32_t ar5416NumTxPending(struct ath_hal *ah, a_uint32_t q)
{
  9053e0:	6c1004        	entry	a1, 32
        a_uint32_t npend;

        HALASSERT(q < AH_PRIVATE(ah)->ah_caps.halTotalQueues);
        HALASSERT(AH5416(ah)->ah_txq[q].tqi_type != HAL_TX_QUEUE_INACTIVE);

	npend = ioread32_mac(AR_QSTS(q))
  9053e3:	127241        	l32r	a2, 8e1ce8 <athos_indirection_table_install+0x7a0>
  9053e6:	02320a        	addx4	a2, a3, a2
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  9053e9:	0c0200        	memw
  9053ec:	8220      	l32i.n	a2, a2, 0
  9053ee:	020241        	extui	a2, a2, 0, 2
		& AR_Q_STS_PEND_FR_CNT;
        if (npend == 0) {
  9053f1:	cd24      	bnez.n	a2, 905409 <ar5416NumTxPending+0x29>
  9053f3:	187240        	l32r	a8, 8e1cf4 <athos_indirection_table_install+0x7ac>
  9053f6:	0c0200        	memw
  9053f9:	8980      	l32i.n	a9, a8, 0
                /*
                 * Pending frame count (PFC) can momentarily go to zero
                 * while TXE remains asserted.  In other words a PFC of
                 * zero is not sufficient to say that the queue has stopped.
                 */
		if (ioread32_mac(AR_Q_TXE) & (1 << q))
  9053fb:	c081      	movi.n	a8, 1
  9053fd:	003104        	ssl	a3
  905400:	00831a        	sll	a3, a8
  905403:	093301        	and	a3, a3, a9
  905406:	038239        	movnez	a2, a8, a3
			iowrite32_mac(AR_Q_RDYTIMESHDN, 1 << q);
                }
        }
#endif
        return npend;
}
  905409:	d10f      	retw.n
	...

0090540c <ar5416SetupTxDesc_20>:
			      a_uint32_t txRate0, a_uint32_t txTries0,
			      a_uint32_t keyIx,
			      a_uint32_t flags,
			      a_uint32_t rtsctsRate,
			      a_uint32_t rtsctsDuration)
{
  90540c:	6c1004        	entry	a1, 32
  90540f:	d820      	mov.n	a8, a2

        struct ar5416_desc *ads = AR5416DESC(ds);

        (void) hdrLen;

        ads->ds_txstatus9 &= ~AR_TxDone;
  905411:	2b205c        	l8ui	a11, a2, 92
  905414:	22205d        	l8ui	a2, a2, 93
  905417:	2a805e        	l8ui	a10, a8, 94
  90541a:	08bb10        	slli	a11, a11, 24
  90541d:	002211        	slli	a2, a2, 16
  905420:	0b2202        	or	a2, a2, a11
  905423:	08aa11        	slli	a10, a10, 8
  905426:	02aa02        	or	a10, a10, a2
  905429:	22805f        	l8ui	a2, a8, 95
			      a_uint32_t txRate0, a_uint32_t txTries0,
			      a_uint32_t keyIx,
			      a_uint32_t flags,
			      a_uint32_t rtsctsRate,
			      a_uint32_t rtsctsDuration)
{
  90542c:	891a      	l32i.n	a9, a1, 40

        struct ar5416_desc *ads = AR5416DESC(ds);

        (void) hdrLen;

        ads->ds_txstatus9 &= ~AR_TxDone;
  90542e:	0a2a02        	or	a10, a2, a10
  905431:	c72e      	movi.n	a2, -2
  905433:	02aa01        	and	a10, a10, a2
  905436:	0a8257        	extui	a2, a10, 24, 8
  905439:	22845c        	s8i	a2, a8, 92
  90543c:	0a0257        	extui	a2, a10, 16, 8
  90543f:	22845d        	s8i	a2, a8, 93
  905442:	0a8247        	extui	a2, a10, 8, 8
  905445:	22845e        	s8i	a2, a8, 94

        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
		| (txPower << AR_XmitPower_S)
  905448:	c32f      	movi.n	a2, 63
  90544a:	026636        	minu	a6, a6, a2
        HALASSERT((flags & RTSCTS) != RTSCTS);

        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  90544d:	03034b        	extui	a3, a3, 0, 12
		| (txPower << AR_XmitPower_S)
  905450:	006211        	slli	a2, a6, 16
  905453:	032202        	or	a2, a2, a3
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  905456:	c2b0      	movi.n	a11, 32
  905458:	137230        	l32r	a3, 8e1d18 <athos_indirection_table_install+0x7d0>

        struct ar5416_desc *ads = AR5416DESC(ds);

        (void) hdrLen;

        ads->ds_txstatus9 &= ~AR_TxDone;
  90545b:	2a845f        	s8i	a10, a8, 95
        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  90545e:	0b9b01        	and	a11, a9, a11
  905461:	c0a0      	movi.n	a10, 0
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  905463:	1e7242        	l32r	a14, 8e1d6c <athos_indirection_table_install+0x824>
        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  905466:	0ba338        	moveqz	a3, a10, a11
  905469:	032b02        	or	a11, a2, a3
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  90546c:	090340        	extui	a3, a9, 0, 1
  90546f:	d2a0      	mov.n	a2, a10
  905471:	03e239        	movnez	a2, a14, a3
  905474:	02bb02        	or	a11, a11, a2
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);
  905477:	137243        	l32r	a3, 8e1d84 <athos_indirection_table_install+0x83c>
  90547a:	c120      	movi.n	a2, 16
  90547c:	029c01        	and	a12, a9, a2
  90547f:	0ca338        	moveqz	a3, a10, a12
  905482:	03bb02        	or	a11, a11, a3
        HALASSERT((flags & RTSCTS) != RTSCTS);

        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  905485:	0b8357        	extui	a3, a11, 24, 8
  905488:	238408        	s8i	a3, a8, 8
  90548b:	0b0357        	extui	a3, a11, 16, 8
  90548e:	238409        	s8i	a3, a8, 9
  905491:	0b8347        	extui	a3, a11, 8, 8
  905494:	23840a        	s8i	a3, a8, 10
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);

        ads->ds_ctl1 = (type << AR_FrameType_S)
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
  905497:	c032      	movi.n	a3, 2
  905499:	039c01        	and	a12, a9, a3
  90549c:	0cae38        	moveqz	a14, a10, a12
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);

        ads->ds_ctl1 = (type << AR_FrameType_S)
  90549f:	0c5510        	slli	a5, a5, 20
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
  9054a2:	05ec02        	or	a12, a14, a5
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);

        ads->ds_ctl1 = (type << AR_FrameType_S)
  9054a5:	0c8457        	extui	a4, a12, 24, 8
  9054a8:	24840c        	s8i	a4, a8, 12
  9054ab:	0c0457        	extui	a4, a12, 16, 8
  9054ae:	24840d        	s8i	a4, a8, 13
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
        ads->ds_ctl2 = SM(txTries0, AR_XmitDataTries0);
  9054b1:	8e18      	l32i.n	a14, a1, 32
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);

        ads->ds_ctl1 = (type << AR_FrameType_S)
  9054b3:	0c8447        	extui	a4, a12, 8, 8
  9054b6:	24840e        	s8i	a4, a8, 14
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
        ads->ds_ctl2 = SM(txTries0, AR_XmitDataTries0);
  9054b9:	147246        	l32r	a4, 8e1dd4 <athos_indirection_table_install+0x88c>
  9054bc:	002104        	ssl	a2
  9054bf:	00ee1a        	sll	a14, a14
  9054c2:	04ee01        	and	a14, a14, a4
  9054c5:	0e8457        	extui	a4, a14, 24, 8
  9054c8:	248410        	s8i	a4, a8, 16
  9054cb:	0e0457        	extui	a4, a14, 16, 8
  9054ce:	248411        	s8i	a4, a8, 17
        ads->ds_ctl3 = (txRate0 << AR_XmitRate0_S);
  9054d1:	078457        	extui	a4, a7, 24, 8
  9054d4:	248414        	s8i	a4, a8, 20
  9054d7:	070457        	extui	a4, a7, 16, 8
  9054da:	248415        	s8i	a4, a8, 21
  9054dd:	078447        	extui	a4, a7, 8, 8
        HALASSERT((flags & RTSCTS) != RTSCTS);

        if (txPower > 63)
		txPower=63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  9054e0:	2b840b        	s8i	a11, a8, 11
		| (txPower << AR_XmitPower_S)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0);

        ads->ds_ctl1 = (type << AR_FrameType_S)
  9054e3:	2c840f        	s8i	a12, a8, 15
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
        ads->ds_ctl2 = SM(txTries0, AR_XmitDataTries0);
  9054e6:	2a8412        	s8i	a10, a8, 18
  9054e9:	2a8413        	s8i	a10, a8, 19
        ads->ds_ctl3 = (txRate0 << AR_XmitRate0_S);
  9054ec:	248416        	s8i	a4, a8, 22
  9054ef:	278417        	s8i	a7, a8, 23

        ads->ds_ctl7 = SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel0) 
  9054f2:	2a8424        	s8i	a10, a8, 36
			      a_uint32_t txRate0, a_uint32_t txTries0,
			      a_uint32_t keyIx,
			      a_uint32_t flags,
			      a_uint32_t rtsctsRate,
			      a_uint32_t rtsctsDuration)
{
  9054f5:	8f19      	l32i.n	a15, a1, 36
  9054f7:	2d120b        	l32i	a13, a1, 44
        ads->ds_ctl1 = (type << AR_FrameType_S)
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0);
        ads->ds_ctl2 = SM(txTries0, AR_XmitDataTries0);
        ads->ds_ctl3 = (txRate0 << AR_XmitRate0_S);

        ads->ds_ctl7 = SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel0) 
  9054fa:	238425        	s8i	a3, a8, 37
  9054fd:	228426        	s8i	a2, a8, 38
  905500:	22fa84        	movi	a2, -124
  905503:	228427        	s8i	a2, a8, 39
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel1)
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel2) 
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel3);

        if (keyIx != HAL_TXKEYIX_INVALID) {
  905506:	220aff        	movi	a2, 255
  905509:	72f13b        	beq	a15, a2, 905548 <ar5416SetupTxDesc_20+0x13c>
                /* XXX validate key index */
                ads->ds_ctl1 |= SM(keyIx, AR_DestIdx);
  90550c:	127247        	l32r	a2, 8e1e28 <athos_indirection_table_install+0x8e0>
  90550f:	03ff11        	slli	a15, a15, 13
  905512:	02ff01        	and	a15, a15, a2
  905515:	0fcc02        	or	a12, a12, a15
  905518:	0c8257        	extui	a2, a12, 24, 8
  90551b:	22840c        	s8i	a2, a8, 12
  90551e:	0c0257        	extui	a2, a12, 16, 8
  905521:	22840d        	s8i	a2, a8, 13
  905524:	0c8247        	extui	a2, a12, 8, 8
  905527:	22840e        	s8i	a2, a8, 14
                ads->ds_ctl0 |= AR_DestIdxValid;
  90552a:	127248        	l32r	a2, 8e1e4c <athos_indirection_table_install+0x904>
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel2) 
		| SM(AR5416_LEGACY_CHAINMASK, AR_ChainSel3);

        if (keyIx != HAL_TXKEYIX_INVALID) {
                /* XXX validate key index */
                ads->ds_ctl1 |= SM(keyIx, AR_DestIdx);
  90552d:	2c840f        	s8i	a12, a8, 15
                ads->ds_ctl0 |= AR_DestIdxValid;
  905530:	02bb02        	or	a11, a11, a2
  905533:	0b8257        	extui	a2, a11, 24, 8
  905536:	228408        	s8i	a2, a8, 8
  905539:	0b0257        	extui	a2, a11, 16, 8
  90553c:	228409        	s8i	a2, a8, 9
  90553f:	0b8247        	extui	a2, a11, 8, 8
  905542:	22840a        	s8i	a2, a8, 10
  905545:	2b840b        	s8i	a11, a8, 11
        }

        if (flags & RTSCTS) {
  905548:	c03c      	movi.n	a3, 12
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
        }
        return AH_TRUE;
  90554a:	c021      	movi.n	a2, 1
                /* XXX validate key index */
                ads->ds_ctl1 |= SM(keyIx, AR_DestIdx);
                ads->ds_ctl0 |= AR_DestIdxValid;
        }

        if (flags & RTSCTS) {
  90554c:	739802        	bany	a9, a3, 905552 <ar5416SetupTxDesc_20+0x146>
  90554f:	60009d        	j	9055f0 <ar5416SetupTxDesc_20+0x1e4>
                if (!isValidTxRate(rtsctsRate)) {
  905552:	1a7249        	l32r	a10, 8e1e78 <athos_indirection_table_install+0x930>
  905555:	00d004        	ssr	a13
  905558:	0a0a1b        	sra	a10, a10
  90555b:	02aa01        	and	a10, a10, a2
  90555e:	64a08c        	beqz	a10, 9055ee <ar5416SetupTxDesc_20+0x1e2>
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  905561:	2a8008        	l8ui	a10, a8, 8
  905564:	2b8009        	l8ui	a11, a8, 9
  905567:	23800a        	l8ui	a3, a8, 10
  90556a:	08aa10        	slli	a10, a10, 24
  90556d:	00bb11        	slli	a11, a11, 16
  905570:	0abb02        	or	a11, a11, a10
  905573:	083311        	slli	a3, a3, 8
  905576:	2a800b        	l8ui	a10, a8, 11
  905579:	0b3302        	or	a3, a3, a11
  90557c:	03a302        	or	a3, a10, a3
  90557f:	1c7244        	l32r	a12, 8e1e90 <athos_indirection_table_install+0x948>
  905582:	c0a8      	movi.n	a10, 8
  905584:	0a9a01        	and	a10, a9, a10
  905587:	c0b0      	movi.n	a11, 0
  905589:	0abc38        	moveqz	a12, a11, a10
  90558c:	dac0      	mov.n	a10, a12
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
  90558e:	c0c4      	movi.n	a12, 4
  905590:	0c9901        	and	a9, a9, a12
  905593:	1c7245        	l32r	a12, 8e1ea8 <athos_indirection_table_install+0x960>
  905596:	03aa02        	or	a10, a10, a3
  905599:	09cb39        	movnez	a11, a12, a9
        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  90559c:	0baa02        	or	a10, a10, a11
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  90559f:	891c      	l32i.n	a9, a1, 48
        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  9055a1:	0a8357        	extui	a3, a10, 24, 8
  9055a4:	238408        	s8i	a3, a8, 8
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  9055a7:	09094e        	extui	a9, a9, 0, 15
        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  9055aa:	0a0357        	extui	a3, a10, 16, 8
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  9055ad:	0e9902        	or	a9, a9, a14
        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  9055b0:	238409        	s8i	a3, a8, 9
  9055b3:	0a8347        	extui	a3, a10, 8, 8
  9055b6:	23840a        	s8i	a3, a8, 10
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  9055b9:	098357        	extui	a3, a9, 24, 8
  9055bc:	238410        	s8i	a3, a8, 16
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
  9055bf:	0cdd10        	slli	a13, a13, 20
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  9055c2:	090357        	extui	a3, a9, 16, 8
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
  9055c5:	07d702        	or	a7, a13, a7
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  9055c8:	238411        	s8i	a3, a8, 17
  9055cb:	098346        	extui	a3, a9, 8, 7
  9055ce:	238412        	s8i	a3, a8, 18
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
  9055d1:	078357        	extui	a3, a7, 24, 8
  9055d4:	238414        	s8i	a3, a8, 20
  9055d7:	070357        	extui	a3, a7, 16, 8
  9055da:	238415        	s8i	a3, a8, 21
  9055dd:	078347        	extui	a3, a7, 8, 8
        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
                }
                /* XXX validate rtsctsDuration */
                ads->ds_ctl0 |= (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0)
  9055e0:	2a840b        	s8i	a10, a8, 11
			| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0);
                ads->ds_ctl2 |= SM(rtsctsDuration, AR_BurstDur);
  9055e3:	298413        	s8i	a9, a8, 19
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
  9055e6:	238416        	s8i	a3, a8, 22
  9055e9:	278417        	s8i	a7, a8, 23
  9055ec:	d10f      	retw.n
                ads->ds_ctl0 |= AR_DestIdxValid;
        }

        if (flags & RTSCTS) {
                if (!isValidTxRate(rtsctsRate)) {
                        return AH_FALSE;
  9055ee:	d2a0      	mov.n	a2, a10
                ads->ds_ctl3 |= (rtsctsRate << AR_RTSCTSRate_S);
        }
        return AH_TRUE;

#undef RTSCTS
}
  9055f0:	d10f      	retw.n
	...

009055f4 <ar5416FillTxDesc_20>:

HAL_BOOL ar5416FillTxDesc_20(struct ath_tx_desc *ds,
			     a_uint32_t segLen, HAL_BOOL firstSeg, HAL_BOOL lastSeg,
			     const struct ath_tx_desc *ds0)
{
  9055f4:	6c1004        	entry	a1, 32
        struct ar5416_desc *ads = AR5416DESC(ds);

        HALASSERT((segLen &~ AR_BufLen) == 0);

        if (firstSeg) {
  9055f7:	644045        	beqz	a4, 905640 <ar5416FillTxDesc_20+0x4c>
                /*
                 * First descriptor, don't clobber xmit control data
                 * setup by ar5416SetupTxDesc.
                 */
                ads->ds_ctl1 |= segLen | (lastSeg ? 0 : AR_TxMore);
  9055fa:	28200c        	l8ui	a8, a2, 12
  9055fd:	24200d        	l8ui	a4, a2, 13
  905600:	26200e        	l8ui	a6, a2, 14
  905603:	088810        	slli	a8, a8, 24
  905606:	004411        	slli	a4, a4, 16
  905609:	084402        	or	a4, a4, a8
  90560c:	086611        	slli	a6, a6, 8
  90560f:	046602        	or	a6, a6, a4
  905612:	24200f        	l8ui	a4, a2, 15
  905615:	187207        	l32r	a8, 8e1e34 <athos_indirection_table_install+0x8ec>
  905618:	064602        	or	a6, a4, a6
  90561b:	c040      	movi.n	a4, 0
  90561d:	058438        	moveqz	a4, a8, a5
  905620:	063302        	or	a3, a3, a6
  905623:	043302        	or	a3, a3, a4
  905626:	038457        	extui	a4, a3, 24, 8
  905629:	24240c        	s8i	a4, a2, 12
  90562c:	030457        	extui	a4, a3, 16, 8
  90562f:	24240d        	s8i	a4, a2, 13
  905632:	038447        	extui	a4, a3, 8, 8
  905635:	24240e        	s8i	a4, a2, 14
  905638:	23240f        	s8i	a3, a2, 15
  90563b:	6000cd        	j	90570c <ar5416FillTxDesc_20+0x118>
  90563e:	000064        	excw
        } else if (lastSeg) {
  905641:	508924        	call0	927ad4 <_etext+0x1cc3b>
                /*
                 * Last descriptor in a multi-descriptor frame,
                 * copy the multi-rate transmit parameters from
                 * the first frame for processing on completion.
                 */
                ads->ds_ctl0 = 0;
  905644:	240824        	excw
  905647:	240924        	l16si	a4, a0, 72
  90564a:	240a24        	movi	a4, 36
  90564d:	240b03        	l32ai	a4, a0, 12
                ads->ds_ctl1 = segLen;
  905650:	8457      	l32i.n	a4, a5, 28
  905652:	24240c        	s8i	a4, a2, 12
  905655:	030457        	extui	a4, a3, 16, 8
  905658:	24240d        	s8i	a4, a2, 13
  90565b:	038447        	extui	a4, a3, 8, 8
  90565e:	24240e        	s8i	a4, a2, 14
  905661:	23240f        	s8i	a3, a2, 15
                ads->ds_ctl2 = AR5416DESC_CONST(ds0)->ds_ctl2;
  905664:	256010        	l8ui	a5, a6, 16
  905667:	246011        	l8ui	a4, a6, 17
  90566a:	236012        	l8ui	a3, a6, 18
  90566d:	085510        	slli	a5, a5, 24
  905670:	004411        	slli	a4, a4, 16
  905673:	054402        	or	a4, a4, a5
  905676:	083311        	slli	a3, a3, 8
  905679:	043302        	or	a3, a3, a4
  90567c:	246013        	l8ui	a4, a6, 19
  90567f:	034302        	or	a3, a4, a3
  905682:	038457        	extui	a4, a3, 24, 8
  905685:	242410        	s8i	a4, a2, 16
  905688:	030457        	extui	a4, a3, 16, 8
  90568b:	242411        	s8i	a4, a2, 17
  90568e:	038447        	extui	a4, a3, 8, 8
  905691:	242412        	s8i	a4, a2, 18
  905694:	232413        	s8i	a3, a2, 19
                ads->ds_ctl3 = AR5416DESC_CONST(ds0)->ds_ctl3;
  905697:	256014        	l8ui	a5, a6, 20
  90569a:	246015        	l8ui	a4, a6, 21
  90569d:	236016        	l8ui	a3, a6, 22
  9056a0:	085510        	slli	a5, a5, 24
  9056a3:	004411        	slli	a4, a4, 16
  9056a6:	054402        	or	a4, a4, a5
  9056a9:	083311        	slli	a3, a3, 8
  9056ac:	043302        	or	a3, a3, a4
  9056af:	246017        	l8ui	a4, a6, 23
  9056b2:	034302        	or	a3, a4, a3
  9056b5:	038457        	extui	a4, a3, 24, 8
  9056b8:	242414        	s8i	a4, a2, 20
  9056bb:	030457        	extui	a4, a3, 16, 8
  9056be:	242415        	s8i	a4, a2, 21
  9056c1:	038447        	extui	a4, a3, 8, 8
  9056c4:	242416        	s8i	a4, a2, 22
  9056c7:	232417        	s8i	a3, a2, 23
  9056ca:	60003e        	j	90570c <ar5416FillTxDesc_20+0x118>
        } else {
                /*
                 * Intermediate descriptor in a multi-descriptor frame.
                 */
                ads->ds_ctl0 = 0;
                ads->ds_ctl1 = segLen | AR_TxMore;
  9056cd:	147207        	l32r	a4, 8e1eec <athos_indirection_table_install+0x9a4>
                ads->ds_ctl3 = AR5416DESC_CONST(ds0)->ds_ctl3;
        } else {
                /*
                 * Intermediate descriptor in a multi-descriptor frame.
                 */
                ads->ds_ctl0 = 0;
  9056d0:	252408        	s8i	a5, a2, 8
                ads->ds_ctl1 = segLen | AR_TxMore;
  9056d3:	043302        	or	a3, a3, a4
  9056d6:	038457        	extui	a4, a3, 24, 8
  9056d9:	24240c        	s8i	a4, a2, 12
  9056dc:	030457        	extui	a4, a3, 16, 8
  9056df:	24240d        	s8i	a4, a2, 13
  9056e2:	038447        	extui	a4, a3, 8, 8
                ads->ds_ctl3 = AR5416DESC_CONST(ds0)->ds_ctl3;
        } else {
                /*
                 * Intermediate descriptor in a multi-descriptor frame.
                 */
                ads->ds_ctl0 = 0;
  9056e5:	252409        	s8i	a5, a2, 9
  9056e8:	25240a        	s8i	a5, a2, 10
  9056eb:	25240b        	s8i	a5, a2, 11
                ads->ds_ctl1 = segLen | AR_TxMore;
  9056ee:	24240e        	s8i	a4, a2, 14
  9056f1:	23240f        	s8i	a3, a2, 15
                ads->ds_ctl2 = 0;
  9056f4:	252410        	s8i	a5, a2, 16
  9056f7:	252411        	s8i	a5, a2, 17
  9056fa:	252412        	s8i	a5, a2, 18
  9056fd:	252413        	s8i	a5, a2, 19
                ads->ds_ctl3 = 0;
  905700:	252414        	s8i	a5, a2, 20
  905703:	252415        	s8i	a5, a2, 21
  905706:	252416        	s8i	a5, a2, 22
  905709:	252417        	s8i	a5, a2, 23
        }
        ads->ds_txstatus0 = ads->ds_txstatus1 = 0;
  90570c:	c050      	movi.n	a5, 0
  90570e:	25243c        	s8i	a5, a2, 60
  905711:	25243d        	s8i	a5, a2, 61
  905714:	25243e        	s8i	a5, a2, 62
  905717:	25243f        	s8i	a5, a2, 63
  90571a:	252438        	s8i	a5, a2, 56
  90571d:	252439        	s8i	a5, a2, 57
  905720:	25243a        	s8i	a5, a2, 58
  905723:	25243b        	s8i	a5, a2, 59

        return AH_TRUE;
}
  905726:	c021      	movi.n	a2, 1
  905728:	d10f      	retw.n
	...

0090572c <ar5416FillKeyTxDesc_20>:

HAL_BOOL ar5416FillKeyTxDesc_20(struct ath_tx_desc *ds,
				HAL_KEY_TYPE keyType)
{
  90572c:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl6 = SM(keyType, AR_EncrType);
  90572f:	18724a        	l32r	a8, 8e2058 <athos_indirection_table_install+0xb10>
  905732:	063310        	slli	a3, a3, 26
  905735:	083801        	and	a8, a3, a8
  905738:	088857        	extui	a8, a8, 24, 8
  90573b:	282420        	s8i	a8, a2, 32
  90573e:	c080      	movi.n	a8, 0
  905740:	282421        	s8i	a8, a2, 33
  905743:	282422        	s8i	a8, a2, 34
  905746:	282423        	s8i	a8, a2, 35
	return AH_TRUE;
}
  905749:	c021      	movi.n	a2, 1
  90574b:	d10f      	retw.n
  90574d:	000000        	ill

00905750 <ar5416Set11nTxDesc_20>:

void ar5416Set11nTxDesc_20(struct ath_tx_desc *ds,
			   a_uint32_t pktLen, HAL_PKT_TYPE type, a_uint32_t txPower,
			   a_uint32_t keyIx, HAL_KEY_TYPE keyType,
			   a_uint32_t flags)
{
  905750:	6c1004        	entry	a1, 32
  905753:	8818      	l32i.n	a8, a1, 32
  905755:	c39f      	movi.n	a9, 63

	if (txPower > 63)
                txPower = 63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
		| (flags & HAL_TXDESC_VMF ? AR_VirtMoreFrag : 0)
  905757:	2b1a00        	movi	a11, 0x100
  90575a:	1a7207        	l32r	a10, 8e1f78 <athos_indirection_table_install+0xa30>
  90575d:	095536        	minu	a5, a5, a9
  905760:	0b8b01        	and	a11, a8, a11
  905763:	c090      	movi.n	a9, 0
  905765:	0b9a38        	moveqz	a10, a9, a11
  905768:	dba0      	mov.n	a11, a10
		| SM(txPower, AR_XmitPower)
  90576a:	1a724c        	l32r	a10, 8e209c <athos_indirection_table_install+0xb54>
  90576d:	005511        	slli	a5, a5, 16
  905770:	0a5501        	and	a5, a5, a10
        HALASSERT(isValidKeyType(keyType));

	if (txPower > 63)
                txPower = 63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  905773:	03034b        	extui	a3, a3, 0, 12
		| (flags & HAL_TXDESC_VMF ? AR_VirtMoreFrag : 0)
  905776:	035502        	or	a5, a5, a3
		| SM(txPower, AR_XmitPower)
  905779:	0b5502        	or	a5, a5, a11
		| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0)
  90577c:	c0a4      	movi.n	a10, 4
  90577e:	1b7245        	l32r	a11, 8e2094 <athos_indirection_table_install+0xb4c>
  905781:	0a8a01        	and	a10, a8, a10
  905784:	0a9b38        	moveqz	a11, a9, a10
  905787:	0b5a02        	or	a10, a5, a11
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  90578a:	c250      	movi.n	a5, 32
  90578c:	1b7230        	l32r	a11, 8e204c <athos_indirection_table_install+0xb04>
  90578f:	058501        	and	a5, a8, a5
  905792:	059b38        	moveqz	a11, a9, a5
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  905795:	157242        	l32r	a5, 8e20a0 <athos_indirection_table_install+0xb58>

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
		| (flags & HAL_TXDESC_VMF ? AR_VirtMoreFrag : 0)
		| SM(txPower, AR_XmitPower)
		| (flags & HAL_TXDESC_RTSENA ? AR_RTSEnable : 0)
		| (flags & HAL_TXDESC_VEOL ? AR_VEOL : 0)
  905798:	0baa02        	or	a10, a10, a11
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
  90579b:	080b40        	extui	a11, a8, 0, 1
  90579e:	0b9538        	moveqz	a5, a9, a11
  9057a1:	05aa02        	or	a10, a10, a5
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0)
  9057a4:	1b7243        	l32r	a11, 8e20b0 <athos_indirection_table_install+0xb68>
  9057a7:	c150      	movi.n	a5, 16
  9057a9:	058501        	and	a5, a8, a5
  9057ac:	059b38        	moveqz	a11, a9, a5
  9057af:	0baa02        	or	a10, a10, a11
		| (keyIx != HAL_TXKEYIX_INVALID ? AR_DestIdxValid : 0)
  9057b2:	157248        	l32r	a5, 8e20d4 <athos_indirection_table_install+0xb8c>
  9057b5:	2b0aff        	movi	a11, 255
  9057b8:	0b6c0c        	sub	a12, a6, a11
  9057bb:	0c9538        	moveqz	a5, a9, a12
  9057be:	05aa02        	or	a10, a10, a5
		| (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0);
  9057c1:	1c7244        	l32r	a12, 8e20d4 <athos_indirection_table_install+0xb8c>
  9057c4:	c058      	movi.n	a5, 8
  9057c6:	058501        	and	a5, a8, a5
  9057c9:	059c38        	moveqz	a12, a9, a5
  9057cc:	0caa02        	or	a10, a10, a12
        HALASSERT(isValidKeyType(keyType));

	if (txPower > 63)
                txPower = 63;

        ads->ds_ctl0 = (pktLen & AR_FrameLen)
  9057cf:	0a8557        	extui	a5, a10, 24, 8
  9057d2:	252408        	s8i	a5, a2, 8
  9057d5:	0a0557        	extui	a5, a10, 16, 8
  9057d8:	252409        	s8i	a5, a2, 9
  9057db:	0a8547        	extui	a5, a10, 8, 8
  9057de:	25240a        	s8i	a5, a2, 10
  9057e1:	2a240b        	s8i	a10, a2, 11
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0)
		| (keyIx != HAL_TXKEYIX_INVALID ? AR_DestIdxValid : 0)
		| (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0);

        ads->ds_ctl1 = (keyIx != HAL_TXKEYIX_INVALID ? SM(keyIx, AR_DestIdx) : 0)
  9057e4:	7b6108        	beq	a6, a11, 9057f0 <ar5416Set11nTxDesc_20+0xa0>
  9057e7:	157247        	l32r	a5, 8e2104 <athos_indirection_table_install+0xbbc>
  9057ea:	036911        	slli	a9, a6, 13
  9057ed:	059901        	and	a9, a9, a5
		| SM(type, AR_FrameType)
  9057f0:	15724d        	l32r	a5, 8e2124 <athos_indirection_table_install+0xbdc>
  9057f3:	0c4410        	slli	a4, a4, 20
  9057f6:	054401        	and	a4, a4, a5
  9057f9:	049902        	or	a9, a9, a4
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0)
  9057fc:	c052      	movi.n	a5, 2
  9057fe:	147242        	l32r	a4, 8e2108 <athos_indirection_table_install+0xbc0>
  905801:	c0a0      	movi.n	a10, 0
  905803:	058501        	and	a5, a8, a5
  905806:	05a438        	moveqz	a4, a10, a5
  905809:	049902        	or	a9, a9, a4
		| (flags & HAL_TXDESC_EXT_ONLY ? AR_ExtOnly : 0)
  90580c:	c450      	movi.n	a5, 64
  90580e:	14724b        	l32r	a4, 8e213c <athos_indirection_table_install+0xbf4>
  905811:	058501        	and	a5, a8, a5
  905814:	05a438        	moveqz	a4, a10, a5
  905817:	049902        	or	a9, a9, a4
  90581a:	d540      	mov.n	a5, a4
		| (flags & HAL_TXDESC_EXT_AND_CTL ? AR_ExtAndCtl : 0);
  90581c:	240a80        	movi	a4, 128
  90581f:	048801        	and	a8, a8, a4
  905822:	14722b        	l32r	a4, 8e20d0 <athos_indirection_table_install+0xb88>

        ads->ds_ctl6 = SM(keyType, AR_EncrType);
  905825:	067710        	slli	a7, a7, 26

        ads->ds_ctl1 = (keyIx != HAL_TXKEYIX_INVALID ? SM(keyIx, AR_DestIdx) : 0)
		| SM(type, AR_FrameType)
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0)
		| (flags & HAL_TXDESC_EXT_ONLY ? AR_ExtOnly : 0)
		| (flags & HAL_TXDESC_EXT_AND_CTL ? AR_ExtAndCtl : 0);
  905828:	08a438        	moveqz	a4, a10, a8
  90582b:	049802        	or	a8, a9, a4
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0)
		| (keyIx != HAL_TXKEYIX_INVALID ? AR_DestIdxValid : 0)
		| (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0);

        ads->ds_ctl1 = (keyIx != HAL_TXKEYIX_INVALID ? SM(keyIx, AR_DestIdx) : 0)
  90582e:	088457        	extui	a4, a8, 24, 8
  905831:	24240c        	s8i	a4, a2, 12
  905834:	080457        	extui	a4, a8, 16, 8
  905837:	24240d        	s8i	a4, a2, 13
  90583a:	088447        	extui	a4, a8, 8, 8
  90583d:	24240e        	s8i	a4, a2, 14
		| SM(type, AR_FrameType)
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0)
		| (flags & HAL_TXDESC_EXT_ONLY ? AR_ExtOnly : 0)
		| (flags & HAL_TXDESC_EXT_AND_CTL ? AR_ExtAndCtl : 0);

        ads->ds_ctl6 = SM(keyType, AR_EncrType);
  905840:	14724a        	l32r	a4, 8e2168 <athos_indirection_table_install+0xc20>
		| (flags & HAL_TXDESC_CLRDMASK ? AR_ClrDestMask : 0)
		| (flags & HAL_TXDESC_INTREQ ? AR_TxIntrReq : 0)
		| (keyIx != HAL_TXKEYIX_INVALID ? AR_DestIdxValid : 0)
		| (flags & HAL_TXDESC_CTSENA ? AR_CTSEnable : 0);

        ads->ds_ctl1 = (keyIx != HAL_TXKEYIX_INVALID ? SM(keyIx, AR_DestIdx) : 0)
  905843:	28240f        	s8i	a8, a2, 15
		| SM(type, AR_FrameType)
		| (flags & HAL_TXDESC_NOACK ? AR_NoAck : 0)
		| (flags & HAL_TXDESC_EXT_ONLY ? AR_ExtOnly : 0)
		| (flags & HAL_TXDESC_EXT_AND_CTL ? AR_ExtAndCtl : 0);

        ads->ds_ctl6 = SM(keyType, AR_EncrType);
  905846:	047701        	and	a7, a7, a4
  905849:	078757        	extui	a7, a7, 24, 8
  90584c:	272420        	s8i	a7, a2, 32
  90584f:	d4a0      	mov.n	a4, a10
  905851:	2a2421        	s8i	a10, a2, 33
  905854:	2a2422        	s8i	a10, a2, 34
  905857:	2a2423        	s8i	a10, a2, 35
  90585a:	d10f      	retw.n

0090585c <ar5416Set11nRateScenario_20>:

void ar5416Set11nRateScenario_20(struct ath_tx_desc *ds,
				 a_uint32_t durUpdateEn, a_uint32_t rtsctsRate,
				 HAL_11N_RATE_SERIES series[], a_uint32_t nseries,
				 a_uint32_t flags)
{
  90585c:	6c1008        	entry	a1, 64
	(void)nseries;

	/*
	* Rate control settings override
	*/
	ds_ctl0 = ads->ds_ctl0;
  90585f:	282008        	l8ui	a8, a2, 8
  905862:	262009        	l8ui	a6, a2, 9

void ar5416Set11nRateScenario_20(struct ath_tx_desc *ds,
				 a_uint32_t durUpdateEn, a_uint32_t rtsctsRate,
				 HAL_11N_RATE_SERIES series[], a_uint32_t nseries,
				 a_uint32_t flags)
{
  905865:	9414      	s32i.n	a4, a1, 16
	(void)nseries;

	/*
	* Rate control settings override
	*/
	ds_ctl0 = ads->ds_ctl0;
  905867:	24200a        	l8ui	a4, a2, 10
  90586a:	088810        	slli	a8, a8, 24
  90586d:	006611        	slli	a6, a6, 16
  905870:	086602        	or	a6, a6, a8
  905873:	084411        	slli	a4, a4, 8
  905876:	064402        	or	a4, a4, a6
  905879:	26200b        	l8ui	a6, a2, 11
  90587c:	046402        	or	a4, a6, a4

	if (flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA)) {
  90587f:	c06c      	movi.n	a6, 12
  905881:	76701f        	bnone	a7, a6, 9058a4 <ar5416Set11nRateScenario_20+0x48>
		if (flags & HAL_TXDESC_RTSENA) {
  905884:	7d770c        	bbci	a7, 29, 905894 <ar5416Set11nRateScenario_20+0x38>
			ds_ctl0 &= ~AR_CTSEnable;
  905887:	16723d        	l32r	a6, 8e217c <athos_indirection_table_install+0xc34>
  90588a:	064401        	and	a4, a4, a6
			ds_ctl0 |= AR_RTSEnable;
  90588d:	167245        	l32r	a6, 8e21a4 <athos_indirection_table_install+0xc5c>
  905890:	600009        	j	90589d <ar5416Set11nRateScenario_20+0x41>
  905893:	001672        	excw
		} else {
			ds_ctl0 &= ~AR_RTSEnable;
  905896:	4f0644        	excw
  905899:	011672        	excw
			ds_ctl0 |= AR_CTSEnable;
  90589c:	440644        	excw
  90589f:	026000        	ret
  9058a2:	060016        	xsr.lbeg	a6
		}
	} else {
		/* this line is only difference between merlin and k2
		 * Current one is for merlin */
		ds_ctl0 = (ds_ctl0 & ~(AR_RTSEnable | AR_CTSEnable));
  9058a5:	725006        	bnone	a5, a2, 9058af <ar5416Set11nRateScenario_20+0x53>
  9058a8:	440104        	excw
	}

	ads->ds_ctl0 = ds_ctl0;
  9058ab:	8657      	l32i.n	a6, a5, 28
  9058ad:	262408        	s8i	a6, a2, 8
  9058b0:	040657        	extui	a6, a4, 16, 8
  9058b3:	262409        	s8i	a6, a2, 9
  9058b6:	048647        	extui	a6, a4, 8, 8
  9058b9:	26240a        	s8i	a6, a2, 10
  9058bc:	24240b        	s8i	a4, a2, 11

	ads->ds_ctl2 = set11nTries(series, 0)
  9058bf:	8650      	l32i.n	a6, a5, 0
  9058c1:	177246        	l32r	a7, 8e21dc <athos_indirection_table_install+0xc94>
				   | set11nTries(series, 1)
  9058c4:	8455      	l32i.n	a4, a5, 20
		ds_ctl0 = (ds_ctl0 & ~(AR_RTSEnable | AR_CTSEnable));
	}

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
  9058c6:	006611        	slli	a6, a6, 16
  9058c9:	076601        	and	a6, a6, a7
				   | set11nTries(series, 1)
  9058cc:	17724d        	l32r	a7, 8e2200 <athos_indirection_table_install+0xcb8>
  9058cf:	0c4410        	slli	a4, a4, 20
  9058d2:	074401        	and	a4, a4, a7
  9058d5:	046402        	or	a4, a6, a4
				   | set11nTries(series, 2)
				   | set11nTries(series, 3)
  9058d8:	865f      	l32i.n	a6, a5, 60

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
  9058da:	177251        	l32r	a7, 8e2220 <athos_indirection_table_install+0xcd8>
				   | set11nTries(series, 3)
  9058dd:	046610        	slli	a6, a6, 28

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
  9058e0:	064402        	or	a4, a4, a6
  9058e3:	865a      	l32i.n	a6, a5, 40
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);
  9058e5:	c080      	movi.n	a8, 0

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
  9058e7:	086610        	slli	a6, a6, 24
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);
  9058ea:	1c7229        	l32r	a12, 8e2190 <athos_indirection_table_install+0xc48>

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
  9058ed:	076601        	and	a6, a6, a7
				   | set11nTries(series, 3)
  9058f0:	064402        	or	a4, a4, a6
				   | (durUpdateEn ? AR_DurUpdateEn : 0);
  9058f3:	d680      	mov.n	a6, a8
  9058f5:	03c639        	movnez	a6, a12, a3
  9058f8:	064302        	or	a3, a4, a6
		ds_ctl0 = (ds_ctl0 & ~(AR_RTSEnable | AR_CTSEnable));
	}

	ads->ds_ctl0 = ds_ctl0;

	ads->ds_ctl2 = set11nTries(series, 0)
  9058fb:	038457        	extui	a4, a3, 24, 8
  9058fe:	242410        	s8i	a4, a2, 16
  905901:	030457        	extui	a4, a3, 16, 8
  905904:	242411        	s8i	a4, a2, 17
  905907:	038447        	extui	a4, a3, 8, 8
  90590a:	242412        	s8i	a4, a2, 18
  90590d:	232413        	s8i	a3, a2, 19
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);
  905910:	235210        	l32i	a3, a5, 64
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
  905913:	245007        	l8ui	a4, a5, 7
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);
  905916:	083310        	slli	a3, a3, 24
				   | set11nTries(series, 2)
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
  905919:	043302        	or	a3, a3, a4
  90591c:	8456      	l32i.n	a4, a5, 24
				   | set11nRate(series, 2)
  90591e:	167252        	l32r	a6, 8e2268 <athos_indirection_table_install+0xd20>
				   | set11nTries(series, 2)
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
  905921:	084411        	slli	a4, a4, 8
  905924:	04044f        	extui	a4, a4, 0, 16
				   | set11nRate(series, 2)
  905927:	043302        	or	a3, a3, a4
  90592a:	845b      	l32i.n	a4, a5, 44
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);
  90592c:	177253        	l32r	a7, 8e2278 <athos_indirection_table_install+0xd30>
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
  90592f:	004411        	slli	a4, a4, 16
  905932:	064401        	and	a4, a4, a6
				   | set11nRate(series, 3);
  905935:	043302        	or	a3, a3, a4
				   | set11nTries(series, 1)
				   | set11nTries(series, 2)
				   | set11nTries(series, 3)
				   | (durUpdateEn ? AR_DurUpdateEn : 0);

	ads->ds_ctl3 = set11nRate(series, 0)
  905938:	038457        	extui	a4, a3, 24, 8
  90593b:	242414        	s8i	a4, a2, 20
  90593e:	030457        	extui	a4, a3, 16, 8
  905941:	242415        	s8i	a4, a2, 21
  905944:	038447        	extui	a4, a3, 8, 8
  905947:	242416        	s8i	a4, a2, 22
  90594a:	232417        	s8i	a3, a2, 23
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);
  90594d:	8357      	l32i.n	a3, a5, 28
	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  90594f:	8e54      	l32i.n	a14, a5, 16
  905951:	8a52      	l32i.n	a10, a5, 8
				   | set11nPktDurRTSCTS(series, 1);
  905953:	8459      	l32i.n	a4, a5, 36
  905955:	003311        	slli	a3, a3, 16
	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  905958:	0e0940        	extui	a9, a14, 0, 1
  90595b:	0a0a4e        	extui	a10, a10, 0, 15
  90595e:	db80      	mov.n	a11, a8
				   | set11nPktDurRTSCTS(series, 1);
  905960:	073301        	and	a3, a3, a7
  905963:	1f7244        	l32r	a15, 8e2274 <athos_indirection_table_install+0xd2c>
	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  905966:	09cb39        	movnez	a11, a12, a9
				   | set11nPktDurRTSCTS(series, 1);
  905969:	040640        	extui	a6, a4, 0, 1
	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  90596c:	0a3302        	or	a3, a3, a10
				   | set11nPktDurRTSCTS(series, 1);
  90596f:	068f38        	moveqz	a15, a8, a6
  905972:	0b3302        	or	a3, a3, a11
  905975:	0f3302        	or	a3, a3, a15
	ads->ds_ctl3 = set11nRate(series, 0)
				   | set11nRate(series, 1)
				   | set11nRate(series, 2)
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
  905978:	038657        	extui	a6, a3, 24, 8
  90597b:	262418        	s8i	a6, a2, 24
  90597e:	030657        	extui	a6, a3, 16, 8
  905981:	262419        	s8i	a6, a2, 25
  905984:	038647        	extui	a6, a3, 8, 8
  905987:	26241a        	s8i	a6, a2, 26
  90598a:	23241b        	s8i	a3, a2, 27
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90598d:	835e      	l32i.n	a3, a5, 56
  90598f:	d680      	mov.n	a6, a8
  905991:	030b40        	extui	a11, a3, 0, 1
  905994:	0bc639        	movnez	a6, a12, a11
  905997:	db60      	mov.n	a11, a6
				   | set11nPktDurRTSCTS(series, 3);
  905999:	265211        	l32i	a6, a5, 68
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  90599c:	8d5c      	l32i.n	a13, a5, 48
				   | set11nPktDurRTSCTS(series, 3);
  90599e:	2a5213        	l32i	a10, a5, 76
  9059a1:	006611        	slli	a6, a6, 16
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  9059a4:	0d0d4e        	extui	a13, a13, 0, 15
				   | set11nPktDurRTSCTS(series, 3);
  9059a7:	076601        	and	a6, a6, a7
  9059aa:	1f7244        	l32r	a15, 8e22bc <athos_indirection_table_install+0xd74>
  9059ad:	0a0940        	extui	a9, a10, 0, 1
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  9059b0:	0d6602        	or	a6, a6, a13
				   | set11nPktDurRTSCTS(series, 3);
  9059b3:	098f38        	moveqz	a15, a8, a9
  9059b6:	0b6602        	or	a6, a6, a11
  9059b9:	0f6602        	or	a6, a6, a15
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  9059bc:	068757        	extui	a7, a6, 24, 8
  9059bf:	27241c        	s8i	a7, a2, 28
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  9059c2:	c0d2      	movi.n	a13, 2
  9059c4:	c0b4      	movi.n	a11, 4
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  9059c6:	060757        	extui	a7, a6, 16, 8
  9059c9:	27241d        	s8i	a7, a2, 29
  9059cc:	26241f        	s8i	a6, a2, 31
  9059cf:	068747        	extui	a7, a6, 8, 8
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  9059d2:	d9d0      	mov.n	a9, a13
  9059d4:	0be601        	and	a6, a14, a11
				   | set11nRate(series, 3);

	ads->ds_ctl4 = set11nPktDurRTSCTS(series, 0)
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
  9059d7:	27241e        	s8i	a7, a2, 30
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  9059da:	068938        	moveqz	a9, a8, a6
  9059dd:	0e1740        	extui	a7, a14, 1, 1
  9059e0:	079602        	or	a6, a9, a7
  9059e3:	c098      	movi.n	a9, 8
  9059e5:	17722b        	l32r	a7, 8e2294 <athos_indirection_table_install+0xd4c>
  9059e8:	09ee01        	and	a14, a14, a9
  9059eb:	0e8738        	moveqz	a7, a8, a14
  9059ee:	076602        	or	a6, a6, a7
  9059f1:	8753      	l32i.n	a7, a5, 12
  9059f3:	9612      	s32i.n	a6, a1, 8
  9059f5:	00d104        	ssl	a13
  9059f8:	00771a        	sll	a7, a7
  9059fb:	c16c      	movi.n	a6, 28
  9059fd:	067601        	and	a6, a7, a6
  905a00:	9613      	s32i.n	a6, a1, 12
				   | set11nRateFlags(series, 1)
  905a02:	c2f0      	movi.n	a15, 32
  905a04:	0d4601        	and	a6, a4, a13
  905a07:	068f38        	moveqz	a15, a8, a6
  905a0a:	c4e0      	movi.n	a14, 64
  905a0c:	0b4601        	and	a6, a4, a11
  905a0f:	068e38        	moveqz	a14, a8, a6
  905a12:	8758      	l32i.n	a7, a5, 32
  905a14:	167243        	l32r	a6, 8e2320 <athos_indirection_table_install+0xdd8>
  905a17:	094401        	and	a4, a4, a9
  905a1a:	048638        	moveqz	a6, a8, a4
  905a1d:	097711        	slli	a7, a7, 7
  905a20:	243a80        	movi	a4, 0x380
  905a23:	9e10      	s32i.n	a14, a1, 0
  905a25:	047701        	and	a7, a7, a4
				   | set11nRateFlags(series, 2)
  905a28:	2e4a00        	movi	a14, 0x400
  905a2b:	0d3401        	and	a4, a3, a13
  905a2e:	048e38        	moveqz	a14, a8, a4
  905a31:	14724e        	l32r	a4, 8e236c <athos_indirection_table_install+0xe24>

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
  905a34:	9611      	s32i.n	a6, a1, 4
				   | set11nRateFlags(series, 2)
  905a36:	0b3601        	and	a6, a3, a11
  905a39:	068438        	moveqz	a4, a8, a6
  905a3c:	167248        	l32r	a6, 8e235c <athos_indirection_table_install+0xe14>
  905a3f:	093301        	and	a3, a3, a9
  905a42:	038638        	moveqz	a6, a8, a3
  905a45:	d360      	mov.n	a3, a6
  905a47:	865d      	l32i.n	a6, a5, 52
  905a49:	9415      	s32i.n	a4, a1, 20
  905a4b:	147254        	l32r	a4, 8e239c <athos_indirection_table_install+0xe54>
  905a4e:	046611        	slli	a6, a6, 12
  905a51:	046601        	and	a6, a6, a4
				   | set11nRateFlags(series, 3)
  905a54:	147244        	l32r	a4, 8e2364 <athos_indirection_table_install+0xe1c>
  905a57:	09a901        	and	a9, a10, a9
  905a5a:	098438        	moveqz	a4, a8, a9
  905a5d:	d940      	mov.n	a9, a4
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  905a5f:	8413      	l32i.n	a4, a1, 12
				   | set11nRateFlags(series, 1)
				   | set11nRateFlags(series, 2)
				   | set11nRateFlags(series, 3)
  905a61:	0dad01        	and	a13, a10, a13
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  905a64:	047702        	or	a7, a7, a4
				   | set11nRateFlags(series, 1)
  905a67:	067602        	or	a6, a7, a6
				   | set11nRateFlags(series, 2)
				   | set11nRateFlags(series, 3)
  905a6a:	275212        	l32i	a7, a5, 72
  905a6d:	157255        	l32r	a5, 8e23c4 <athos_indirection_table_install+0xe7c>
  905a70:	0f7710        	slli	a7, a7, 17
  905a73:	0d8c38        	moveqz	a12, a8, a13
				   | SM(rtsctsRate, AR_RTSCTSRate);
  905a76:	8414      	l32i.n	a4, a1, 16
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
				   | set11nRateFlags(series, 2)
				   | set11nRateFlags(series, 3)
  905a78:	1d720c        	l32r	a13, 8e22a8 <athos_indirection_table_install+0xd60>
  905a7b:	057501        	and	a5, a7, a5
  905a7e:	0bab01        	and	a11, a10, a11

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
  905a81:	056602        	or	a6, a6, a5
				   | set11nRateFlags(series, 2)
				   | set11nRateFlags(series, 3)
				   | SM(rtsctsRate, AR_RTSCTSRate);
  905a84:	157256        	l32r	a5, 8e23dc <athos_indirection_table_install+0xe94>
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
				   | set11nRateFlags(series, 2)
				   | set11nRateFlags(series, 3)
  905a87:	0b8d38        	moveqz	a13, a8, a11
				   | SM(rtsctsRate, AR_RTSCTSRate);
  905a8a:	0c4810        	slli	a8, a4, 20
  905a8d:	058801        	and	a8, a8, a5

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
  905a90:	8512      	l32i.n	a5, a1, 8
  905a92:	086602        	or	a6, a6, a8
  905a95:	056602        	or	a6, a6, a5
				   | set11nRateFlags(series, 2)
  905a98:	0f6f02        	or	a15, a6, a15
  905a9b:	8610      	l32i.n	a6, a1, 0
  905a9d:	8411      	l32i.n	a4, a1, 4
  905a9f:	06ff02        	or	a15, a15, a6
  905aa2:	04ff02        	or	a15, a15, a4
				   | set11nRateFlags(series, 3)
  905aa5:	8515      	l32i.n	a5, a1, 20
	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
				   | set11nRateFlags(series, 1)
				   | set11nRateFlags(series, 2)
  905aa7:	0efe02        	or	a14, a15, a14
				   | set11nRateFlags(series, 3)
  905aaa:	05e402        	or	a4, a14, a5
  905aad:	034302        	or	a3, a4, a3
  905ab0:	0c3c02        	or	a12, a3, a12
  905ab3:	0dcb02        	or	a11, a12, a13
				   | SM(rtsctsRate, AR_RTSCTSRate);
  905ab6:	09b902        	or	a9, a11, a9
				   | set11nPktDurRTSCTS(series, 1);

	ads->ds_ctl5 = set11nPktDurRTSCTS(series, 2)
				   | set11nPktDurRTSCTS(series, 3);

	ads->ds_ctl7 = set11nRateFlags(series, 0)
  905ab9:	098357        	extui	a3, a9, 24, 8
  905abc:	232424        	s8i	a3, a2, 36
  905abf:	090357        	extui	a3, a9, 16, 8
  905ac2:	232425        	s8i	a3, a2, 37
  905ac5:	098347        	extui	a3, a9, 8, 8
  905ac8:	232426        	s8i	a3, a2, 38
  905acb:	292427        	s8i	a9, a2, 39
  905ace:	d10f      	retw.n

00905ad0 <ar5416Set11nAggrFirst_20>:
				   | SM(rtsctsRate, AR_RTSCTSRate);
}

void ar5416Set11nAggrFirst_20(struct ath_tx_desc *ds, a_uint32_t aggrLen,
			      a_uint32_t numDelims)
{
  905ad0:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  905ad3:	2a200c        	l8ui	a10, a2, 12
  905ad6:	29200d        	l8ui	a9, a2, 13
  905ad9:	28200e        	l8ui	a8, a2, 14
  905adc:	08aa10        	slli	a10, a10, 24
  905adf:	009911        	slli	a9, a9, 16
  905ae2:	0a9902        	or	a9, a9, a10
  905ae5:	088811        	slli	a8, a8, 8
  905ae8:	098802        	or	a8, a8, a9
  905aeb:	29200f        	l8ui	a9, a2, 15

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  905aee:	2a2020        	l8ui	a10, a2, 32
void ar5416Set11nAggrFirst_20(struct ath_tx_desc *ds, a_uint32_t aggrLen,
			      a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  905af1:	089802        	or	a8, a9, a8
  905af4:	197257        	l32r	a9, 8e2450 <athos_indirection_table_install+0xf08>

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  905af7:	08aa10        	slli	a10, a10, 24
void ar5416Set11nAggrFirst_20(struct ath_tx_desc *ds, a_uint32_t aggrLen,
			      a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  905afa:	098802        	or	a8, a8, a9
  905afd:	088957        	extui	a9, a8, 24, 8
  905b00:	29240c        	s8i	a9, a2, 12
  905b03:	080957        	extui	a9, a8, 16, 8
  905b06:	29240d        	s8i	a9, a2, 13
  905b09:	28240f        	s8i	a8, a2, 15
  905b0c:	088947        	extui	a9, a8, 8, 8

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  905b0f:	282021        	l8ui	a8, a2, 33
void ar5416Set11nAggrFirst_20(struct ath_tx_desc *ds, a_uint32_t aggrLen,
			      a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  905b12:	29240e        	s8i	a9, a2, 14

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  905b15:	292022        	l8ui	a9, a2, 34
  905b18:	008811        	slli	a8, a8, 16
  905b1b:	0a8802        	or	a8, a8, a10
  905b1e:	089911        	slli	a9, a9, 8
  905b21:	089902        	or	a9, a9, a8
  905b24:	282023        	l8ui	a8, a2, 35
	ads->ds_ctl6 |= SM(aggrLen, AR_AggrLen) |
  905b27:	03034f        	extui	a3, a3, 0, 16
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  905b2a:	098902        	or	a9, a8, a9
  905b2d:	187258        	l32r	a8, 8e2490 <athos_indirection_table_install+0xf48>
	ads->ds_ctl6 |= SM(aggrLen, AR_AggrLen) |
		SM(numDelims, AR_PadDelim);
  905b30:	0e4410        	slli	a4, a4, 18
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
  905b33:	089901        	and	a9, a9, a8
	ads->ds_ctl6 |= SM(aggrLen, AR_AggrLen) |
  905b36:	093902        	or	a9, a3, a9
		SM(numDelims, AR_PadDelim);
  905b39:	137259        	l32r	a3, 8e24a0 <athos_indirection_table_install+0xf58>
  905b3c:	034801        	and	a8, a4, a3
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);

	ads->ds_ctl6 &= ~(AR_AggrLen | AR_PadDelim);
	ads->ds_ctl6 |= SM(aggrLen, AR_AggrLen) |
  905b3f:	089802        	or	a8, a9, a8
  905b42:	088357        	extui	a3, a8, 24, 8
  905b45:	232420        	s8i	a3, a2, 32
  905b48:	080357        	extui	a3, a8, 16, 8
  905b4b:	232421        	s8i	a3, a2, 33
  905b4e:	088347        	extui	a3, a8, 8, 8
  905b51:	232422        	s8i	a3, a2, 34
  905b54:	282423        	s8i	a8, a2, 35
  905b57:	d10f      	retw.n
  905b59:	000000        	ill

00905b5c <ar5416Set11nAggrMiddle_20>:
		SM(numDelims, AR_PadDelim);
}

void ar5416Set11nAggrMiddle_20(struct ath_tx_desc *ds, a_uint32_t numDelims)
{
  905b5c:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);
	a_uint32_t ctl6;

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  905b5f:	2a200c        	l8ui	a10, a2, 12
  905b62:	29200d        	l8ui	a9, a2, 13
  905b65:	28200e        	l8ui	a8, a2, 14
  905b68:	08aa10        	slli	a10, a10, 24
  905b6b:	009911        	slli	a9, a9, 16
  905b6e:	0a9902        	or	a9, a9, a10
  905b71:	088811        	slli	a8, a8, 8
  905b74:	098802        	or	a8, a8, a9
  905b77:	29200f        	l8ui	a9, a2, 15

	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
  905b7a:	2a2020        	l8ui	a10, a2, 32
void ar5416Set11nAggrMiddle_20(struct ath_tx_desc *ds, a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);
	a_uint32_t ctl6;

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  905b7d:	089802        	or	a8, a9, a8
  905b80:	197257        	l32r	a9, 8e24dc <athos_indirection_table_install+0xf94>

	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
  905b83:	08aa10        	slli	a10, a10, 24
void ar5416Set11nAggrMiddle_20(struct ath_tx_desc *ds, a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);
	a_uint32_t ctl6;

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  905b86:	098802        	or	a8, a8, a9
  905b89:	088957        	extui	a9, a8, 24, 8
  905b8c:	29240c        	s8i	a9, a2, 12
  905b8f:	080957        	extui	a9, a8, 16, 8
  905b92:	29240d        	s8i	a9, a2, 13
  905b95:	28240f        	s8i	a8, a2, 15
  905b98:	088947        	extui	a9, a8, 8, 8

	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
  905b9b:	282021        	l8ui	a8, a2, 33
void ar5416Set11nAggrMiddle_20(struct ath_tx_desc *ds, a_uint32_t numDelims)
{
	struct ar5416_desc *ads = AR5416DESC(ds);
	a_uint32_t ctl6;

	ads->ds_ctl1 |= (AR_IsAggr | AR_MoreAggr);
  905b9e:	29240e        	s8i	a9, a2, 14

	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
  905ba1:	292022        	l8ui	a9, a2, 34
  905ba4:	008811        	slli	a8, a8, 16
  905ba7:	0a8802        	or	a8, a8, a10
  905baa:	089911        	slli	a9, a9, 8
  905bad:	089902        	or	a9, a9, a8
  905bb0:	282023        	l8ui	a8, a2, 35
	ctl6 &= ~AR_PadDelim;
  905bb3:	1a725a        	l32r	a10, 8e251c <athos_indirection_table_install+0xfd4>

	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
  905bb6:	098902        	or	a9, a8, a9
	ctl6 &= ~AR_PadDelim;
	ctl6 |= SM(numDelims, AR_PadDelim);
  905bb9:	187259        	l32r	a8, 8e2520 <athos_indirection_table_install+0xfd8>
  905bbc:	0e3310        	slli	a3, a3, 18
	/*
	 * We use a stack variable to manipulate ctl6 to reduce uncached 
	 * read modify, modfiy, write.
	 */
	ctl6 = ads->ds_ctl6;
	ctl6 &= ~AR_PadDelim;
  905bbf:	0a9901        	and	a9, a9, a10
	ctl6 |= SM(numDelims, AR_PadDelim);
  905bc2:	083801        	and	a8, a3, a8
  905bc5:	098802        	or	a8, a8, a9
	ads->ds_ctl6 = ctl6;
  905bc8:	088957        	extui	a9, a8, 24, 8
  905bcb:	292420        	s8i	a9, a2, 32
  905bce:	080957        	extui	a9, a8, 16, 8
  905bd1:	292421        	s8i	a9, a2, 33
  905bd4:	088947        	extui	a9, a8, 8, 8
  905bd7:	292422        	s8i	a9, a2, 34
  905bda:	282423        	s8i	a8, a2, 35
  905bdd:	d10f      	retw.n
	...

00905be0 <ar5416Set11nAggrLast_20>:
}

void ar5416Set11nAggrLast_20(struct ath_tx_desc *ds)
{
  905be0:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= AR_IsAggr;
  905be3:	2a200c        	l8ui	a10, a2, 12
  905be6:	29200d        	l8ui	a9, a2, 13
  905be9:	28200e        	l8ui	a8, a2, 14
  905bec:	08aa10        	slli	a10, a10, 24
  905bef:	009911        	slli	a9, a9, 16
  905bf2:	0a9902        	or	a9, a9, a10
  905bf5:	088811        	slli	a8, a8, 8
  905bf8:	098802        	or	a8, a8, a9
  905bfb:	29200f        	l8ui	a9, a2, 15
	ads->ds_ctl1 &= ~AR_MoreAggr;
	ads->ds_ctl6 &= ~AR_PadDelim;
  905bfe:	2a2020        	l8ui	a10, a2, 32

void ar5416Set11nAggrLast_20(struct ath_tx_desc *ds)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= AR_IsAggr;
  905c01:	089802        	or	a8, a9, a8
	ads->ds_ctl1 &= ~AR_MoreAggr;
  905c04:	19725b        	l32r	a9, 8e2570 <athos_indirection_table_install+0x1028>
	ads->ds_ctl6 &= ~AR_PadDelim;
  905c07:	08aa10        	slli	a10, a10, 24
void ar5416Set11nAggrLast_20(struct ath_tx_desc *ds)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= AR_IsAggr;
	ads->ds_ctl1 &= ~AR_MoreAggr;
  905c0a:	098801        	and	a8, a8, a9
  905c0d:	197248        	l32r	a9, 8e2530 <athos_indirection_table_install+0xfe8>
  905c10:	098802        	or	a8, a8, a9
  905c13:	088957        	extui	a9, a8, 24, 8
  905c16:	29240c        	s8i	a9, a2, 12
  905c19:	080957        	extui	a9, a8, 16, 8
  905c1c:	29240d        	s8i	a9, a2, 13
  905c1f:	28240f        	s8i	a8, a2, 15
  905c22:	088947        	extui	a9, a8, 8, 8
	ads->ds_ctl6 &= ~AR_PadDelim;
  905c25:	282021        	l8ui	a8, a2, 33
void ar5416Set11nAggrLast_20(struct ath_tx_desc *ds)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 |= AR_IsAggr;
	ads->ds_ctl1 &= ~AR_MoreAggr;
  905c28:	29240e        	s8i	a9, a2, 14
	ads->ds_ctl6 &= ~AR_PadDelim;
  905c2b:	292022        	l8ui	a9, a2, 34
  905c2e:	008811        	slli	a8, a8, 16
  905c31:	0a8802        	or	a8, a8, a10
  905c34:	089911        	slli	a9, a9, 8
  905c37:	089902        	or	a9, a9, a8
  905c3a:	282023        	l8ui	a8, a2, 35
  905c3d:	098902        	or	a9, a8, a9
  905c40:	18725a        	l32r	a8, 8e25a8 <athos_indirection_table_install+0x1060>
  905c43:	292423        	s8i	a9, a2, 35
  905c46:	089801        	and	a8, a9, a8
  905c49:	088a57        	extui	a10, a8, 24, 8
  905c4c:	2a2420        	s8i	a10, a2, 32
  905c4f:	080a57        	extui	a10, a8, 16, 8
  905c52:	088847        	extui	a8, a8, 8, 8
  905c55:	2a2421        	s8i	a10, a2, 33
  905c58:	282422        	s8i	a8, a2, 34
  905c5b:	d10f      	retw.n
  905c5d:	000000        	ill

00905c60 <ar5416Clr11nAggr_20>:
}

void ar5416Clr11nAggr_20(struct ath_tx_desc *ds)
{
  905c60:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl1 &= (~AR_IsAggr & ~AR_MoreAggr);
  905c63:	2a200c        	l8ui	a10, a2, 12
  905c66:	28200d        	l8ui	a8, a2, 13
  905c69:	29200e        	l8ui	a9, a2, 14
  905c6c:	08aa10        	slli	a10, a10, 24
  905c6f:	008811        	slli	a8, a8, 16
  905c72:	0a8802        	or	a8, a8, a10
  905c75:	089911        	slli	a9, a9, 8
  905c78:	089902        	or	a9, a9, a8
  905c7b:	28200f        	l8ui	a8, a2, 15
  905c7e:	098902        	or	a9, a8, a9
  905c81:	18725c        	l32r	a8, 8e25f4 <athos_indirection_table_install+0x10ac>
  905c84:	29240f        	s8i	a9, a2, 15
  905c87:	089801        	and	a8, a9, a8
  905c8a:	088a57        	extui	a10, a8, 24, 8
  905c8d:	2a240c        	s8i	a10, a2, 12
  905c90:	080a57        	extui	a10, a8, 16, 8
  905c93:	088847        	extui	a8, a8, 8, 8
  905c96:	2a240d        	s8i	a10, a2, 13
  905c99:	28240e        	s8i	a8, a2, 14
  905c9c:	d10f      	retw.n
	...

00905ca0 <ar5416Set11nBurstDuration_20>:
}

void ar5416Set11nBurstDuration_20(struct ath_tx_desc *ds,
				  a_uint32_t burstDuration)
{
  905ca0:	6c1004        	entry	a1, 32
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl2 &= ~AR_BurstDur;
  905ca3:	2a2010        	l8ui	a10, a2, 16
  905ca6:	292011        	l8ui	a9, a2, 17
  905ca9:	282012        	l8ui	a8, a2, 18
  905cac:	08aa10        	slli	a10, a10, 24
  905caf:	009911        	slli	a9, a9, 16
  905cb2:	0a9902        	or	a9, a9, a10
  905cb5:	088811        	slli	a8, a8, 8
  905cb8:	098802        	or	a8, a8, a9
  905cbb:	292013        	l8ui	a9, a2, 19
	ads->ds_ctl2 |= SM(burstDuration, AR_BurstDur);
  905cbe:	03034e        	extui	a3, a3, 0, 15
void ar5416Set11nBurstDuration_20(struct ath_tx_desc *ds,
				  a_uint32_t burstDuration)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	ads->ds_ctl2 &= ~AR_BurstDur;
  905cc1:	089802        	or	a8, a9, a8
  905cc4:	19725d        	l32r	a9, 8e2638 <athos_indirection_table_install+0x10f0>
  905cc7:	098801        	and	a8, a8, a9
	ads->ds_ctl2 |= SM(burstDuration, AR_BurstDur);
  905cca:	083802        	or	a8, a3, a8
  905ccd:	088957        	extui	a9, a8, 24, 8
  905cd0:	292410        	s8i	a9, a2, 16
  905cd3:	080957        	extui	a9, a8, 16, 8
  905cd6:	292411        	s8i	a9, a2, 17
  905cd9:	088947        	extui	a9, a8, 8, 8
  905cdc:	292412        	s8i	a9, a2, 18
  905cdf:	282413        	s8i	a8, a2, 19
  905ce2:	d10f      	retw.n

00905ce4 <ar5416Set11nVirtualMoreFrag_20>:
}

void ar5416Set11nVirtualMoreFrag_20(struct ath_tx_desc *ds,
				    a_uint32_t vmf)
{
  905ce4:	6c1004        	entry	a1, 32
  905ce7:	282008        	l8ui	a8, a2, 8
  905cea:	292009        	l8ui	a9, a2, 9
	struct ar5416_desc *ads = AR5416DESC(ds);

	if (vmf) {
		ads->ds_ctl0 |= AR_VirtMoreFrag;
  905ced:	088810        	slli	a8, a8, 24
  905cf0:	009911        	slli	a9, a9, 16
void ar5416Set11nVirtualMoreFrag_20(struct ath_tx_desc *ds,
				    a_uint32_t vmf)
{
	struct ar5416_desc *ads = AR5416DESC(ds);

	if (vmf) {
  905cf3:	ca3d      	beqz.n	a3, 905d24 <ar5416Set11nVirtualMoreFrag_20+0x40>
		ads->ds_ctl0 |= AR_VirtMoreFrag;
  905cf5:	089902        	or	a9, a9, a8
  905cf8:	28200a        	l8ui	a8, a2, 10
  905cfb:	1a7207        	l32r	a10, 8e2518 <athos_indirection_table_install+0xfd0>
  905cfe:	088811        	slli	a8, a8, 8
  905d01:	098802        	or	a8, a8, a9
  905d04:	29200b        	l8ui	a9, a2, 11
  905d07:	089802        	or	a8, a9, a8
  905d0a:	0a8802        	or	a8, a8, a10
  905d0d:	088957        	extui	a9, a8, 24, 8
  905d10:	292408        	s8i	a9, a2, 8
  905d13:	080957        	extui	a9, a8, 16, 8
  905d16:	292409        	s8i	a9, a2, 9
  905d19:	088947        	extui	a9, a8, 8, 8
  905d1c:	29240a        	s8i	a9, a2, 10
  905d1f:	28240b        	s8i	a8, a2, 11
  905d22:	d10f      	retw.n
	} else {
		ads->ds_ctl0 &= ~AR_VirtMoreFrag;
  905d24:	089802        	or	a8, a9, a8
  905d27:	29200a        	l8ui	a9, a2, 10
  905d2a:	089911        	slli	a9, a9, 8
  905d2d:	089902        	or	a9, a9, a8
  905d30:	28200b        	l8ui	a8, a2, 11
  905d33:	098902        	or	a9, a8, a9
  905d36:	18725e        	l32r	a8, 8e26b0 <athos_indirection_table_install+0x1168>
  905d39:	29240b        	s8i	a9, a2, 11
  905d3c:	089801        	and	a8, a9, a8
  905d3f:	088a57        	extui	a10, a8, 24, 8
  905d42:	2a2408        	s8i	a10, a2, 8
  905d45:	080a57        	extui	a10, a8, 16, 8
  905d48:	088847        	extui	a8, a8, 8, 8
  905d4b:	2a2409        	s8i	a10, a2, 9
  905d4e:	28240a        	s8i	a8, a2, 10
  905d51:	d10f      	retw.n
	...

00905d54 <ar5416StopTxDma>:

	return AH_TRUE;
}

HAL_BOOL ar5416StopTxDma(struct ath_hal*ah, a_uint32_t q)
{
  905d54:	6c1004        	entry	a1, 32
  905d57:	14725f        	l32r	a4, 8e26d4 <athos_indirection_table_install+0x118c>
	
        HALASSERT(q < AH_PRIVATE(ah)->ah_caps.halTotalQueues);

        HALASSERT(AH5416(ah)->ah_txq[q].tqi_type != HAL_TX_QUEUE_INACTIVE);

	iowrite32_mac(AR_Q_TXD, 1 << q);
  905d5a:	c081      	movi.n	a8, 1
  905d5c:	003104        	ssl	a3
  905d5f:	00881a        	sll	a8, a8
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  905d62:	0c0200        	memw
  905d65:	9840      	s32i.n	a8, a4, 0
        for (i = 1000; i != 0; i--) {
  905d67:	243ae8        	movi	a4, 0x3e8
                if (ar5416NumTxPending(ah, q) == 0)
  905d6a:	da20      	mov.n	a10, a2
  905d6c:	033b02        	or	a11, a3, a3
  905d6f:	5bfd9c        	call8	9053e0 <ar5416NumTxPending>
  905d72:	c8aa      	beqz.n	a10, 905d80 <ar5416StopTxDma+0x2c>
                        break;
                OS_DELAY(100);        /* XXX get actual value */
  905d74:	2a0a64        	movi	a10, 100
        HALASSERT(q < AH_PRIVATE(ah)->ah_caps.halTotalQueues);

        HALASSERT(AH5416(ah)->ah_txq[q].tqi_type != HAL_TX_QUEUE_INACTIVE);

	iowrite32_mac(AR_Q_TXD, 1 << q);
        for (i = 1000; i != 0; i--) {
  905d77:	244cff        	addi	a4, a4, -1
                if (ar5416NumTxPending(ah, q) == 0)
                        break;
                OS_DELAY(100);        /* XXX get actual value */
  905d7a:	5bf790        	call8	903bbc <ath_hal_delay>
        HALASSERT(q < AH_PRIVATE(ah)->ah_caps.halTotalQueues);

        HALASSERT(AH5416(ah)->ah_txq[q].tqi_type != HAL_TX_QUEUE_INACTIVE);

	iowrite32_mac(AR_Q_TXD, 1 << q);
        for (i = 1000; i != 0; i--) {
  905d7d:	654fe9        	bnez	a4, 905d6a <ar5416StopTxDma+0x16>
  905d80:	12725f        	l32r	a2, 8e26fc <athos_indirection_table_install+0x11b4>
  905d83:	c030      	movi.n	a3, 0
  905d85:	0c0200        	memw
  905d88:	9320      	s32i.n	a3, a2, 0
                        break;
                OS_DELAY(100);        /* XXX get actual value */
        }

	iowrite32_mac(AR_Q_TXD, 0);
        return (i != 0);
  905d8a:	c021      	movi.n	a2, 1
  905d8c:	043238        	moveqz	a2, a3, a4
}
  905d8f:	d10f      	retw.n
  905d91:	000000        	ill

00905d94 <ar5416AbortTxDma>:
#endif
        return npend;
}

HAL_BOOL ar5416AbortTxDma(struct ath_hal *ah)
{
  905d94:	6c1004        	entry	a1, 32
  905d97:	13725f        	l32r	a3, 8e2714 <athos_indirection_table_install+0x11cc>
  905d9a:	243aff        	movi	a4, 0x3ff
  905d9d:	0c0200        	memw
  905da0:	9430      	s32i.n	a4, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  905da2:	137260        	l32r	a3, 8e2724 <athos_indirection_table_install+0x11dc>
	iowrite32_mac(AR_Q_TXD, AR_Q_TXD_M);

	/*
	 * set tx abort bits
	 */
	OS_REG_SET_BIT(ah, AR_PCU_MISC, (AR_PCU_FORCE_QUIET_COLL | AR_PCU_CLEAR_VMF));
  905da5:	147261        	l32r	a4, 8e272c <athos_indirection_table_install+0x11e4>
  905da8:	0c0200        	memw
  905dab:	8830      	l32i.n	a8, a3, 0
  905dad:	048402        	or	a4, a8, a4
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  905db0:	0c0200        	memw
  905db3:	9430      	s32i.n	a4, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  905db5:	13723a        	l32r	a3, 8e26a0 <athos_indirection_table_install+0x1158>
	OS_REG_SET_BIT(ah, AR_DIAG_SW, AR_DIAG_FORCE_CH_IDLE_HIGH);
  905db8:	147245        	l32r	a4, 8e26cc <athos_indirection_table_install+0x1184>
  905dbb:	0c0200        	memw
  905dbe:	8830      	l32i.n	a8, a3, 0
  905dc0:	048402        	or	a4, a8, a4
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  905dc3:	0c0200        	memw
  905dc6:	9430      	s32i.n	a4, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  905dc8:	137262        	l32r	a3, 8e2750 <athos_indirection_table_install+0x1208>
	OS_REG_SET_BIT(ah, AR_D_GBL_IFS_MISC, AR_D_GBL_IFS_MISC_IGNORE_BACKOFF);
  905dcb:	14722b        	l32r	a4, 8e2678 <athos_indirection_table_install+0x1130>
  905dce:	0c0200        	memw
  905dd1:	8830      	l32i.n	a8, a3, 0
  905dd3:	048402        	or	a4, a8, a4
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  905dd6:	0c0200        	memw
  905dd9:	9430      	s32i.n	a4, a3, 0

	/*
	 * wait on all tx queues
	 */
	for (q = 0; q < AR_NUM_QCU; q++) {
  905ddb:	c030      	movi.n	a3, 0
  905ddd:	60001b        	j	905dfc <ar5416AbortTxDma+0x68>
  905de0:	00da20        	excw
		for (i = 0; i < AR5416_ABORT_LOOPS; i++) {
			if (!ar5416NumTxPending(ah, q))
  905de3:	db30      	mov.n	a11, a3
  905de5:	5bfd7e        	call8	9053e0 <ar5416NumTxPending>
  905de8:	64a05c        	beqz	a10, 905e48 <ar5416AbortTxDma+0xb4>
				break;

			OS_DELAY(AR5416_ABORT_WAIT);
  905deb:	2a0a05        	movi	a10, 5
  905dee:	244cff        	addi	a4, a4, -1
  905df1:	5bf772        	call8	903bbc <ath_hal_delay>

	/*
	 * wait on all tx queues
	 */
	for (q = 0; q < AR_NUM_QCU; q++) {
		for (i = 0; i < AR5416_ABORT_LOOPS; i++) {
  905df4:	654fe9        	bnez	a4, 905de1 <ar5416AbortTxDma+0x4d>
				break;

			OS_DELAY(AR5416_ABORT_WAIT);
		}
		if (i == AR5416_ABORT_LOOPS) {
			return AH_FALSE;
  905df7:	d240      	mov.n	a2, a4
  905df9:	d10f      	retw.n
  905dfb:	00243a        	movltz	a4, a2, a0
#endif
        return npend;
}

HAL_BOOL ar5416AbortTxDma(struct ath_hal *ah)
{
  905dfe:	e8          	.byte 0xe8
  905dff:	63ffde        	j	905de1 <ar5416AbortTxDma+0x4d>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  905e02:	127260        	l32r	a2, 8e2784 <athos_indirection_table_install+0x123c>
	}

	/*
	 * clear tx abort bits
	 */
	OS_REG_CLR_BIT(ah, AR_PCU_MISC, (AR_PCU_FORCE_QUIET_COLL | AR_PCU_CLEAR_VMF));
  905e05:	137263        	l32r	a3, 8e2794 <athos_indirection_table_install+0x124c>
  905e08:	0c0200        	memw
  905e0b:	8420      	l32i.n	a4, a2, 0
  905e0d:	034301        	and	a3, a4, a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  905e10:	0c0200        	memw
  905e13:	9320      	s32i.n	a3, a2, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  905e15:	12723a        	l32r	a2, 8e2700 <athos_indirection_table_install+0x11b8>
	OS_REG_CLR_BIT(ah, AR_DIAG_SW, AR_DIAG_FORCE_CH_IDLE_HIGH);
  905e18:	13724f        	l32r	a3, 8e2754 <athos_indirection_table_install+0x120c>
  905e1b:	0c0200        	memw
  905e1e:	8420      	l32i.n	a4, a2, 0
  905e20:	034301        	and	a3, a4, a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  905e23:	0c0200        	memw
  905e26:	9320      	s32i.n	a3, a2, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  905e28:	127262        	l32r	a2, 8e27b0 <athos_indirection_table_install+0x1268>
	OS_REG_CLR_BIT(ah, AR_D_GBL_IFS_MISC, AR_D_GBL_IFS_MISC_IGNORE_BACKOFF);
  905e2b:	137264        	l32r	a3, 8e27bc <athos_indirection_table_install+0x1274>
  905e2e:	0c0200        	memw
  905e31:	8420      	l32i.n	a4, a2, 0
  905e33:	034301        	and	a3, a4, a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  905e36:	0c0200        	memw
  905e39:	9320      	s32i.n	a3, a2, 0
  905e3b:	12725f        	l32r	a2, 8e27b8 <athos_indirection_table_install+0x1270>
  905e3e:	0c0200        	memw
  905e41:	9a20      	s32i.n	a10, a2, 0
	/*
	 * clear txd
	 */
	iowrite32_mac(AR_Q_TXD, 0);

	return AH_TRUE;
  905e43:	c021      	movi.n	a2, 1
  905e45:	d10f      	retw.n
  905e47:	00b133        	excw
	OS_REG_SET_BIT(ah, AR_D_GBL_IFS_MISC, AR_D_GBL_IFS_MISC_IGNORE_BACKOFF);

	/*
	 * wait on all tx queues
	 */
	for (q = 0; q < AR_NUM_QCU; q++) {
  905e4a:	6939ae        	bnei	a3, 10, 905dfc <ar5416AbortTxDma+0x68>
  905e4d:	63ffb1        	j	905e02 <ar5416AbortTxDma+0x6e>

00905e50 <ar5416StopDmaReceive>:
	iowrite32_mac(AR_RXDP, rxdp);
	HALASSERT(ioread32_mac(AR_RXDP) == rxdp);
}

HAL_BOOL ar5416StopDmaReceive(struct ath_hal *ah)
{
  905e50:	6c1004        	entry	a1, 32
  905e53:	187239        	l32r	a8, 8e2738 <athos_indirection_table_install+0x11f0>
  905e56:	c290      	movi.n	a9, 32
  905e58:	0c0200        	memw
  905e5b:	9980      	s32i.n	a9, a8, 0
	iowrite32_mac(AR_CR, AR_CR_RXD); /* Set receive disable bit */
	if (!ath_hal_wait(ah, AR_CR, AR_CR_RXE, 0)) {
  905e5d:	da20      	mov.n	a10, a2
  905e5f:	c0b8      	movi.n	a11, 8
  905e61:	c0c4      	movi.n	a12, 4
  905e63:	c0d0      	movi.n	a13, 0
  905e65:	5bfc5b        	call8	904fd4 <ath_hal_wait>
  905e68:	c081      	movi.n	a8, 1
  905e6a:	c020      	movi.n	a2, 0
  905e6c:	0a8239        	movnez	a2, a8, a10
		return AH_FALSE;
	} else {
		return AH_TRUE;
	}
}
  905e6f:	d10f      	retw.n
  905e71:	000000        	ill

00905e74 <ar5416Detach>:
		.ah_setInterrupts        = ar5416SetInterrupts,
	},
};

void ar5416Detach(struct ath_hal *ah)
{
  905e74:	6c1004        	entry	a1, 32
	HALASSERT(ah != AH_NULL);
	ath_hal_free(ah);
  905e77:	da20      	mov.n	a10, a2
  905e79:	5bf75d        	call8	903bf0 <ath_hal_free>
  905e7c:	d10f      	retw.n
	...

00905e80 <ar5416GetPendingInterrupts>:
	 */
	return ((host_isr != AR_INTR_SPURIOUS) && (host_isr & AR_INTR_MAC_IRQ));
}

HAL_BOOL ar5416GetPendingInterrupts(struct ath_hal *ah, HAL_INT *masked)
{
  905e80:	6c1004        	entry	a1, 32
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  905e83:	18722c        	l32r	a8, 8e2734 <athos_indirection_table_install+0x11ec>
  905e86:	0c0200        	memw
  905e89:	8980      	l32i.n	a9, a8, 0
#ifndef AR9100
	HAL_BOOL fatal_int = AH_FALSE;
	a_uint32_t sync_cause;

	if (ioread32_mac(AR_INTR_ASYNC_CAUSE)
			& AR_INTR_MAC_IRQ) {
  905e8b:	c082      	movi.n	a8, 2
  905e8d:	089801        	and	a8, a9, a8
	a_uint32_t isr;
#ifndef AR9100
	HAL_BOOL fatal_int = AH_FALSE;
	a_uint32_t sync_cause;

	if (ioread32_mac(AR_INTR_ASYNC_CAUSE)
  905e90:	c980      	beqz.n	a8, 905ea4 <ar5416GetPendingInterrupts+0x24>
  905e92:	187265        	l32r	a8, 8e2828 <athos_indirection_table_install+0x12e0>
  905e95:	0c0200        	memw
  905e98:	8880      	l32i.n	a8, a8, 0
			& AR_INTR_MAC_IRQ) {
		if ((ioread32_mac(AR_RTC_STATUS)
				& AR_RTC_STATUS_M) != AR_RTC_STATUS_ON) {
  905e9a:	080843        	extui	a8, a8, 0, 4
	HAL_BOOL fatal_int = AH_FALSE;
	a_uint32_t sync_cause;

	if (ioread32_mac(AR_INTR_ASYNC_CAUSE)
			& AR_INTR_MAC_IRQ) {
		if ((ioread32_mac(AR_RTC_STATUS)
  905e9d:	68820b        	beqi	a8, 2, 905eac <ar5416GetPendingInterrupts+0x2c>
  905ea0:	600013        	j	905eb7 <ar5416GetPendingInterrupts+0x37>
  905ea3:	009830        	excw
			*masked = 0;
			return AH_FALSE;
		}
	} else {
		*masked = 0;
		return AH_FALSE;
  905ea6:	d280      	mov.n	a2, a8
  905ea8:	d10f      	retw.n
  905eaa:	000018        	src	a0, a0, a0
  905ead:	72660c        	bbci	a6, 2, 905ebd <ar5416GetPendingInterrupts+0x3d>
  905eb0:	020088        	excw
  905eb3:	8069      	l32i.n	a0, a6, 36
	}
#endif
	isr = ioread32_mac(AR_ISR_RAC);
	if (isr == 0xffffffff) {
  905eb5:	8005      	l32i.n	a0, a0, 20
		*masked = 0;
  905eb7:	c020      	movi.n	a2, 0
  905eb9:	9230      	s32i.n	a2, a3, 0
  905ebb:	d10f      	retw.n
		return AH_FALSE;
	}

	*masked = isr & HAL_INT_COMMON;
  905ebd:	1a722e        	l32r	a10, 8e2778 <athos_indirection_table_install+0x1230>
	if (isr & (AR_ISR_TXMINTR | AR_ISR_TXINTM)) {
		*masked |= HAL_INT_TX;
	}
#endif

	if (isr & AR_ISR_BCNMISC) {
  905ec0:	1b7230        	l32r	a11, 8e2780 <athos_indirection_table_install+0x1238>
	if (isr == 0xffffffff) {
		*masked = 0;
		return AH_FALSE;
	}

	*masked = isr & HAL_INT_COMMON;
  905ec3:	0a8a01        	and	a10, a8, a10
  905ec6:	2a3600        	s32i	a10, a3, 0
	if (isr & (AR_ISR_TXMINTR | AR_ISR_TXINTM)) {
		*masked |= HAL_INT_TX;
	}
#endif

	if (isr & AR_ISR_BCNMISC) {
  905ec9:	7b8021        	bnone	a8, a11, 905eee <ar5416GetPendingInterrupts+0x6e>
  905ecc:	197267        	l32r	a9, 8e2868 <athos_indirection_table_install+0x1320>
  905ecf:	0c0200        	memw
  905ed2:	8990      	l32i.n	a9, a9, 0
		a_uint32_t s2_s;

		s2_s = ioread32_mac(AR_ISR_S2_S);

		if (s2_s & AR_ISR_S2_GTT) {
  905ed4:	7b9008        	bnone	a9, a11, 905ee0 <ar5416GetPendingInterrupts+0x60>
			*masked |= HAL_INT_GTT;
  905ed7:	1b7243        	l32r	a11, 8e27e4 <athos_indirection_table_install+0x129c>
  905eda:	0baa02        	or	a10, a10, a11
  905edd:	2a3600        	s32i	a10, a3, 0
		}

		if (s2_s & AR_ISR_S2_CST) {
  905ee0:	79960a        	bbci	a9, 9, 905eee <ar5416GetPendingInterrupts+0x6e>
			*masked |= HAL_INT_CST;
  905ee3:	8a30      	l32i.n	a10, a3, 0
  905ee5:	197268        	l32r	a9, 8e2888 <athos_indirection_table_install+0x1340>
  905ee8:	09a902        	or	a9, a10, a9
  905eeb:	293600        	s32i	a9, a3, 0
		}
	}

	if (isr & (AR_ISR_RXOK | AR_ISR_RXERR))
  905eee:	c095      	movi.n	a9, 5
  905ef0:	798009        	bnone	a8, a9, 905efd <ar5416GetPendingInterrupts+0x7d>
		*masked |= HAL_INT_RX;
  905ef3:	8a30      	l32i.n	a10, a3, 0
  905ef5:	c091      	movi.n	a9, 1
  905ef7:	09a902        	or	a9, a10, a9
  905efa:	293600        	s32i	a9, a3, 0
	if (isr & (AR_ISR_TXOK | AR_ISR_TXDESC | AR_ISR_TXERR | AR_ISR_TXEOL)) {
  905efd:	295ac0        	movi	a9, 0x5c0
  905f00:	79803c        	bnone	a8, a9, 905f40 <ar5416GetPendingInterrupts+0xc0>
		struct ath_hal_5416 *ahp = AH5416(ah);
		a_uint32_t           s0_s, s1_s;

		*masked |= HAL_INT_TX;
  905f03:	8930      	l32i.n	a9, a3, 0
  905f05:	c480      	movi.n	a8, 64
  905f07:	089802        	or	a8, a9, a8
  905f0a:	9830      	s32i.n	a8, a3, 0
  905f0c:	137269        	l32r	a3, 8e28b0 <athos_indirection_table_install+0x1368>
  905f0f:	0c0200        	memw
  905f12:	8930      	l32i.n	a9, a3, 0
  905f14:	13726a        	l32r	a3, 8e28bc <athos_indirection_table_install+0x1374>
  905f17:	0c0200        	memw
  905f1a:	8830      	l32i.n	a8, a3, 0
		s0_s = ioread32_mac(AR_ISR_S0_S);
		s1_s = ioread32_mac(AR_ISR_S1_S);
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXOK);
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXDESC);
  905f1c:	232238        	l32i	a3, a2, 224
		ahp->ah_intrTxqs |= MS(s1_s, AR_ISR_S1_QCU_TXERR);
  905f1f:	098a02        	or	a10, a8, a9
		a_uint32_t           s0_s, s1_s;

		*masked |= HAL_INT_TX;
		s0_s = ioread32_mac(AR_ISR_S0_S);
		s1_s = ioread32_mac(AR_ISR_S1_S);
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXOK);
  905f22:	0a0a49        	extui	a10, a10, 0, 10
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXDESC);
  905f25:	03aa02        	or	a10, a10, a3
  905f28:	13726b        	l32r	a3, 8e28d4 <athos_indirection_table_install+0x138c>
  905f2b:	039901        	and	a9, a9, a3
		ahp->ah_intrTxqs |= MS(s1_s, AR_ISR_S1_QCU_TXERR);
		ahp->ah_intrTxqs |= MS(s1_s, AR_ISR_S1_QCU_TXEOL);
  905f2e:	038801        	and	a8, a8, a3

		*masked |= HAL_INT_TX;
		s0_s = ioread32_mac(AR_ISR_S0_S);
		s1_s = ioread32_mac(AR_ISR_S1_S);
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXOK);
		ahp->ah_intrTxqs |= MS(s0_s, AR_ISR_S0_QCU_TXDESC);
  905f31:	09095f        	extui	a9, a9, 16, 16
		ahp->ah_intrTxqs |= MS(s1_s, AR_ISR_S1_QCU_TXERR);
  905f34:	09a902        	or	a9, a10, a9
		ahp->ah_intrTxqs |= MS(s1_s, AR_ISR_S1_QCU_TXEOL);
  905f37:	08085f        	extui	a8, a8, 16, 16
  905f3a:	089302        	or	a3, a9, a8
  905f3d:	232638        	s32i	a3, a2, 224
  905f40:	13726c        	l32r	a3, 8e28f0 <athos_indirection_table_install+0x13a8>
	if (AH_TRUE == fatal_int) {
		iowrite32_mac(AR_INTR_SYNC_CAUSE_CLR, sync_cause);
		(void) ioread32_mac(AR_INTR_SYNC_CAUSE_CLR);
	}
#endif
	return AH_TRUE;
  905f43:	c021      	movi.n	a2, 1
  905f45:	0c0200        	memw
  905f48:	8830      	l32i.n	a8, a3, 0

#ifndef AR9100
	sync_cause = ioread32_mac(AR_INTR_SYNC_CAUSE);
	fatal_int = ((sync_cause != AR_INTR_SPURIOUS) &&
		     (sync_cause & (AR_INTR_SYNC_HOST1_FATAL
		      | AR_INTR_SYNC_HOST1_PERR))) ? AH_TRUE : AH_FALSE;
  905f4a:	68800f        	beqi	a8, -1, 905f5d <ar5416GetPendingInterrupts+0xdd>
  905f4d:	290a60        	movi	a9, 96
  905f50:	798009        	bnone	a8, a9, 905f5d <ar5416GetPendingInterrupts+0xdd>
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  905f53:	0c0200        	memw
  905f56:	9830      	s32i.n	a8, a3, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  905f58:	0c0200        	memw
  905f5b:	8330      	l32i.n	a3, a3, 0
		iowrite32_mac(AR_INTR_SYNC_CAUSE_CLR, sync_cause);
		(void) ioread32_mac(AR_INTR_SYNC_CAUSE_CLR);
	}
#endif
	return AH_TRUE;
}
  905f5d:	d10f      	retw.n
	...

00905f60 <ar5416SetRxFilter>:
		return AH_TRUE;
	}
}

void ar5416SetRxFilter(struct ath_hal *ah, a_uint32_t bits)
{
  905f60:	6c1004        	entry	a1, 32
	a_uint32_t phybits;
    
	iowrite32_mac(AR_RX_FILTER, (bits & 0xff) | AR_RX_COMPR_BAR);
  905f63:	284a00        	movi	a8, 0x400
  905f66:	030947        	extui	a9, a3, 0, 8
  905f69:	089902        	or	a9, a9, a8
  905f6c:	18726d        	l32r	a8, 8e2920 <athos_indirection_table_install+0x13d8>
	phybits = 0;
	if (bits & HAL_RX_FILTER_PHYRADAR)
  905f6f:	2a2a00        	movi	a10, 0x200
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  905f72:	0c0200        	memw
  905f75:	9980      	s32i.n	a9, a8, 0
  905f77:	0a3a01        	and	a10, a3, a10
		phybits |= AR_PHY_ERR_RADAR;
  905f7a:	280a20        	movi	a8, 32
  905f7d:	290a00        	movi	a9, 0
  905f80:	0a9838        	moveqz	a8, a9, a10
	if (bits & HAL_RX_FILTER_PHYERR)
  905f83:	773705        	bbci	a3, 23, 905f8c <ar5416SetRxFilter+0x2c>
		phybits |= AR_PHY_ERR_OFDM_TIMING | AR_PHY_ERR_CCK_TIMING;
  905f86:	13726e        	l32r	a3, 8e2940 <athos_indirection_table_install+0x13f8>
  905f89:	038802        	or	a8, a8, a3
  905f8c:	13726f        	l32r	a3, 8e2948 <athos_indirection_table_install+0x1400>
  905f8f:	197270        	l32r	a9, 8e2950 <athos_indirection_table_install+0x1408>
  905f92:	0c0200        	memw
  905f95:	9830      	s32i.n	a8, a3, 0
	iowrite32_mac(AR_PHY_ERR, phybits);
	if (phybits) {
  905f97:	c88d      	beqz.n	a8, 905fa8 <ar5416SetRxFilter+0x48>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  905f99:	0c0200        	memw
  905f9c:	8890      	l32i.n	a8, a9, 0
		iowrite32_mac(AR_RXCFG,
  905f9e:	c130      	movi.n	a3, 16
  905fa0:	038302        	or	a3, a8, a3
  905fa3:	60000b        	j	905fb2 <ar5416SetRxFilter+0x52>
  905fa6:	00000c        	sub	a0, a0, a0
  905fa9:	020088        	excw
  905fac:	90c6      	s32i.n	a0, a12, 24
			     ioread32_mac(AR_RXCFG)
			     | AR_RXCFG_ZLFDMA);
	} else {
		iowrite32_mac(AR_RXCFG,
  905fae:	3f0383        	excw
  905fb1:	010c02        	or	a12, a0, a1
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  905fb4:	009390        	l32e	a0, a9, -52
  905fb7:	d10f      	retw.n
  905fb9:	000000        	ill

00905fbc <ar5416ProcTxDesc_20>:
	ads->ds_ctl6 = SM(keyType, AR_EncrType);
	return AH_TRUE;
}

HAL_STATUS ar5416ProcTxDesc_20(struct ath_hal *ah, struct ath_tx_desc *gds)
{
  905fbc:	6c1004        	entry	a1, 32
        struct ar5416_desc *ads = AR5416DESC(gds);
        struct ath_tx_desc *ds = (struct ath_tx_desc *)gds;
        
        if ((ads->ds_txstatus9 & AR_TxDone) == 0)
  905fbf:	2a305c        	l8ui	a10, a3, 92
  905fc2:	28305d        	l8ui	a8, a3, 93
  905fc5:	29305e        	l8ui	a9, a3, 94
  905fc8:	08aa10        	slli	a10, a10, 24
  905fcb:	008811        	slli	a8, a8, 16
  905fce:	0a8802        	or	a8, a8, a10
  905fd1:	089911        	slli	a9, a9, 8
  905fd4:	089902        	or	a9, a9, a8
  905fd7:	28305f        	l8ui	a8, a3, 95
  905fda:	098902        	or	a9, a8, a9
                return HAL_EINPROGRESS;
  905fdd:	c08f      	movi.n	a8, 15
HAL_STATUS ar5416ProcTxDesc_20(struct ath_hal *ah, struct ath_tx_desc *gds)
{
        struct ar5416_desc *ads = AR5416DESC(gds);
        struct ath_tx_desc *ds = (struct ath_tx_desc *)gds;
        
        if ((ads->ds_txstatus9 & AR_TxDone) == 0)
  905fdf:	7f9f02        	bbsi	a9, 31, 905fe5 <ar5416ProcTxDesc_20+0x29>
  905fe2:	60029b        	j	906281 <ar5416ProcTxDesc_20+0x2c5>
                return HAL_EINPROGRESS;

        ads->ds_txstatus9 &= ~AR_TxDone;
  905fe5:	c78e      	movi.n	a8, -2
  905fe7:	089801        	and	a8, a9, a8
  905fea:	088b57        	extui	a11, a8, 24, 8
  905fed:	2b345c        	s8i	a11, a3, 92
  905ff0:	080b57        	extui	a11, a8, 16, 8
  905ff3:	2b345d        	s8i	a11, a3, 93
  905ff6:	28345f        	s8i	a8, a3, 95
  905ff9:	088b47        	extui	a11, a8, 8, 8

        /* Update software copies of the HW status */
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
  905ffc:	09184b        	extui	a8, a9, 1, 12
        struct ath_tx_desc *ds = (struct ath_tx_desc *)gds;
        
        if ((ads->ds_txstatus9 & AR_TxDone) == 0)
                return HAL_EINPROGRESS;

        ads->ds_txstatus9 &= ~AR_TxDone;
  905fff:	2b345e        	s8i	a11, a3, 94

        /* Update software copies of the HW status */
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
  906002:	088b14        	srli	a11, a8, 8
  906005:	2b3464        	s8i	a11, a3, 100
        ds->ds_txstat.ts_tstamp = ads->AR_SendTimestamp;
  906008:	2c3040        	l8ui	a12, a3, 64
  90600b:	2b3041        	l8ui	a11, a3, 65
                return HAL_EINPROGRESS;

        ads->ds_txstatus9 &= ~AR_TxDone;

        /* Update software copies of the HW status */
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
  90600e:	283465        	s8i	a8, a3, 101
        ds->ds_txstat.ts_tstamp = ads->AR_SendTimestamp;
  906011:	283042        	l8ui	a8, a3, 66
  906014:	08cc10        	slli	a12, a12, 24
  906017:	00bb11        	slli	a11, a11, 16
  90601a:	0cbb02        	or	a11, a11, a12
  90601d:	088811        	slli	a8, a8, 8
  906020:	0b8802        	or	a8, a8, a11
  906023:	2b3043        	l8ui	a11, a3, 67
        struct ath_tx_desc *ds = (struct ath_tx_desc *)gds;
        
        if ((ads->ds_txstatus9 & AR_TxDone) == 0)
                return HAL_EINPROGRESS;

        ads->ds_txstatus9 &= ~AR_TxDone;
  906026:	c0a0      	movi.n	a10, 0

        /* Update software copies of the HW status */
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
        ds->ds_txstat.ts_tstamp = ads->AR_SendTimestamp;
  906028:	08b802        	or	a8, a11, a8
  90602b:	088b57        	extui	a11, a8, 24, 8
  90602e:	2b3460        	s8i	a11, a3, 96
  906031:	080b57        	extui	a11, a8, 16, 8
  906034:	2b3461        	s8i	a11, a3, 97
  906037:	088b47        	extui	a11, a8, 8, 8
  90603a:	2b3462        	s8i	a11, a3, 98
        ds->ds_txstat.ts_status = 0;
  90603d:	2a3466        	s8i	a10, a3, 102
        ds->ds_txstat.ts_flags  = 0;
  906040:	2a3467        	s8i	a10, a3, 103

        if (ads->ds_txstatus1 & AR_ExcessiveRetries)
  906043:	2b303c        	l8ui	a11, a3, 60
  906046:	2a303d        	l8ui	a10, a3, 61

        ads->ds_txstatus9 &= ~AR_TxDone;

        /* Update software copies of the HW status */
        ds->ds_txstat.ts_seqnum = MS(ads->ds_txstatus9, AR_SeqNum);
        ds->ds_txstat.ts_tstamp = ads->AR_SendTimestamp;
  906049:	283463        	s8i	a8, a3, 99
        ds->ds_txstat.ts_status = 0;
        ds->ds_txstat.ts_flags  = 0;

        if (ads->ds_txstatus1 & AR_ExcessiveRetries)
  90604c:	28303e        	l8ui	a8, a3, 62
  90604f:	08bb10        	slli	a11, a11, 24
  906052:	00aa11        	slli	a10, a10, 16
  906055:	0baa02        	or	a10, a10, a11
  906058:	088811        	slli	a8, a8, 8
  90605b:	0a8802        	or	a8, a8, a10
  90605e:	2a303f        	l8ui	a10, a3, 63
  906061:	08a802        	or	a8, a10, a8
  906064:	7e8704        	bbci	a8, 30, 90606c <ar5416ProcTxDesc_20+0xb0>
                ds->ds_txstat.ts_status |= HAL_TXERR_XRETRY;
  906067:	c0a1      	movi.n	a10, 1
  906069:	2a3466        	s8i	a10, a3, 102
        if (ads->ds_txstatus1 & AR_Filtered)
  90606c:	7c870a        	bbci	a8, 28, 90607a <ar5416ProcTxDesc_20+0xbe>
                ds->ds_txstat.ts_status |= HAL_TXERR_FILT;
  90606f:	2b3066        	l8ui	a11, a3, 102
  906072:	c0a2      	movi.n	a10, 2
  906074:	0aba02        	or	a10, a11, a10
  906077:	2a3466        	s8i	a10, a3, 102
        if (ads->ds_txstatus1 & AR_FIFOUnderrun)
  90607a:	c0a4      	movi.n	a10, 4
  90607c:	7a8008        	bnone	a8, a10, 906088 <ar5416ProcTxDesc_20+0xcc>
                ds->ds_txstat.ts_status |= HAL_TXERR_FIFO;
  90607f:	2b3066        	l8ui	a11, a3, 102
  906082:	0aba02        	or	a10, a11, a10
  906085:	2a3466        	s8i	a10, a3, 102
        if (ads->ds_txstatus9 & AR_TxOpExceeded)
  906088:	7e960a        	bbci	a9, 14, 906096 <ar5416ProcTxDesc_20+0xda>
		ds->ds_txstat.ts_status |= HAL_TXERR_XTXOP;
  90608b:	2a3066        	l8ui	a10, a3, 102
  90608e:	c098      	movi.n	a9, 8
  906090:	09a902        	or	a9, a10, a9
  906093:	293466        	s8i	a9, a3, 102
        if (ads->ds_txstatus1 & AR_TxTimerExpired)
  906096:	7c860a        	bbci	a8, 12, 9060a4 <ar5416ProcTxDesc_20+0xe8>
		ds->ds_txstat.ts_status |= HAL_TXERR_TIMER_EXPIRED;
  906099:	2a3066        	l8ui	a10, a3, 102
  90609c:	c190      	movi.n	a9, 16
  90609e:	09a902        	or	a9, a10, a9
  9060a1:	293466        	s8i	a9, a3, 102

        if (ads->ds_txstatus1 & AR_DescCfgErr)
  9060a4:	7d8604        	bbci	a8, 13, 9060ac <ar5416ProcTxDesc_20+0xf0>
		ds->ds_txstat.ts_flags |= HAL_TX_DESC_CFG_ERR;
  9060a7:	c094      	movi.n	a9, 4
  9060a9:	293467        	s8i	a9, a3, 103
        if (ads->ds_txstatus1 & AR_TxDataUnderrun) {
  9060ac:	7e8611        	bbci	a8, 14, 9060c1 <ar5416ProcTxDesc_20+0x105>
		ds->ds_txstat.ts_flags |= HAL_TX_DATA_UNDERRUN;
  9060af:	293067        	l8ui	a9, a3, 103
  9060b2:	c088      	movi.n	a8, 8
  9060b4:	089802        	or	a8, a9, a8
  9060b7:	283467        	s8i	a8, a3, 103
		ar5416UpdateTxTrigLevel(ah, AH_TRUE);
  9060ba:	da20      	mov.n	a10, a2
  9060bc:	c0b1      	movi.n	a11, 1
  9060be:	5bfca4        	call8	905350 <ar5416UpdateTxTrigLevel>
	}
        if (ads->ds_txstatus1 & AR_TxDelimUnderrun) {
  9060c1:	28303d        	l8ui	a8, a3, 61
  9060c4:	7f8711        	bbci	a8, 31, 9060d9 <ar5416ProcTxDesc_20+0x11d>
		ds->ds_txstat.ts_flags |= HAL_TX_DELIM_UNDERRUN;
  9060c7:	293067        	l8ui	a9, a3, 103
  9060ca:	c180      	movi.n	a8, 16
  9060cc:	089802        	or	a8, a9, a8
  9060cf:	283467        	s8i	a8, a3, 103
		ar5416UpdateTxTrigLevel(ah, AH_TRUE);
  9060d2:	da20      	mov.n	a10, a2
  9060d4:	c0b1      	movi.n	a11, 1
  9060d6:	5bfc9e        	call8	905350 <ar5416UpdateTxTrigLevel>
	}
        if (ads->ds_txstatus0 & AR_TxBaStatus) {
  9060d9:	283038        	l8ui	a8, a3, 56
  9060dc:	223039        	l8ui	a2, a3, 57
  9060df:	29303a        	l8ui	a9, a3, 58
  9060e2:	088810        	slli	a8, a8, 24
  9060e5:	002211        	slli	a2, a2, 16
  9060e8:	082202        	or	a2, a2, a8
  9060eb:	089911        	slli	a9, a9, 8
  9060ee:	029902        	or	a9, a9, a2
  9060f1:	22303b        	l8ui	a2, a3, 59
  9060f4:	092902        	or	a9, a2, a9
  9060f7:	719671        	bbci	a9, 1, 90616c <ar5416ProcTxDesc_20+0x1b0>
		ds->ds_txstat.ts_flags |= HAL_TX_BA;
  9060fa:	283067        	l8ui	a8, a3, 103
  9060fd:	220a01        	movi	a2, 1
  906100:	028202        	or	a2, a8, a2
  906103:	223467        	s8i	a2, a3, 103
		ds->ds_txstat.ba_low = ads->AR_BaBitmapLow;
  906106:	2a3044        	l8ui	a10, a3, 68
  906109:	223045        	l8ui	a2, a3, 69
  90610c:	283046        	l8ui	a8, a3, 70
  90610f:	08aa10        	slli	a10, a10, 24
  906112:	002211        	slli	a2, a2, 16
  906115:	0a2202        	or	a2, a2, a10
  906118:	088811        	slli	a8, a8, 8
  90611b:	028802        	or	a8, a8, a2
  90611e:	223047        	l8ui	a2, a3, 71
		ds->ds_txstat.ba_high = ads->AR_BaBitmapHigh;
  906121:	2a3048        	l8ui	a10, a3, 72
		ds->ds_txstat.ts_flags |= HAL_TX_DELIM_UNDERRUN;
		ar5416UpdateTxTrigLevel(ah, AH_TRUE);
	}
        if (ads->ds_txstatus0 & AR_TxBaStatus) {
		ds->ds_txstat.ts_flags |= HAL_TX_BA;
		ds->ds_txstat.ba_low = ads->AR_BaBitmapLow;
  906124:	082802        	or	a8, a2, a8
  906127:	088257        	extui	a2, a8, 24, 8
  90612a:	223474        	s8i	a2, a3, 116
  90612d:	080257        	extui	a2, a8, 16, 8
  906130:	223475        	s8i	a2, a3, 117
  906133:	088247        	extui	a2, a8, 8, 8
  906136:	223476        	s8i	a2, a3, 118
		ds->ds_txstat.ba_high = ads->AR_BaBitmapHigh;
  906139:	223049        	l8ui	a2, a3, 73
		ds->ds_txstat.ts_flags |= HAL_TX_DELIM_UNDERRUN;
		ar5416UpdateTxTrigLevel(ah, AH_TRUE);
	}
        if (ads->ds_txstatus0 & AR_TxBaStatus) {
		ds->ds_txstat.ts_flags |= HAL_TX_BA;
		ds->ds_txstat.ba_low = ads->AR_BaBitmapLow;
  90613c:	283477        	s8i	a8, a3, 119
		ds->ds_txstat.ba_high = ads->AR_BaBitmapHigh;
  90613f:	28304a        	l8ui	a8, a3, 74
  906142:	08aa10        	slli	a10, a10, 24
  906145:	002211        	slli	a2, a2, 16
  906148:	0a2202        	or	a2, a2, a10
  90614b:	088811        	slli	a8, a8, 8
  90614e:	028802        	or	a8, a8, a2
  906151:	22304b        	l8ui	a2, a3, 75
  906154:	082802        	or	a8, a2, a8
  906157:	088257        	extui	a2, a8, 24, 8
  90615a:	223478        	s8i	a2, a3, 120
  90615d:	080257        	extui	a2, a8, 16, 8
  906160:	223479        	s8i	a2, a3, 121
  906163:	088247        	extui	a2, a8, 8, 8
  906166:	22347a        	s8i	a2, a3, 122
  906169:	28347b        	s8i	a8, a3, 123

        /*
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
  90616c:	28305c        	l8ui	a8, a3, 92
  90616f:	22305d        	l8ui	a2, a3, 93
  906172:	088810        	slli	a8, a8, 24
  906175:	002211        	slli	a2, a2, 16
  906178:	082202        	or	a2, a2, a8
  90617b:	187271        	l32r	a8, 8e2b40 <athos_indirection_table_install+0x15f8>
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90617e:	2a304c        	l8ui	a10, a3, 76

        /*
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
  906181:	082201        	and	a2, a2, a8
  906184:	02525a        	extui	a2, a2, 21, 11
  906187:	223468        	s8i	a2, a3, 104
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90618a:	22304d        	l8ui	a2, a3, 77
  90618d:	08aa10        	slli	a10, a10, 24
  906190:	28304e        	l8ui	a8, a3, 78
  906193:	002211        	slli	a2, a2, 16
  906196:	0a2202        	or	a2, a2, a10
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
  906199:	098a47        	extui	a10, a9, 8, 8
  90619c:	2a346b        	s8i	a10, a3, 107
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  90619f:	088811        	slli	a8, a8, 8
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
  9061a2:	1a7252        	l32r	a10, 8e2aec <athos_indirection_table_install+0x15a4>
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  9061a5:	028802        	or	a8, a8, a2
  9061a8:	22304f        	l8ui	a2, a3, 79
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
  9061ab:	29346a        	s8i	a9, a3, 106
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
  9061ae:	0a9901        	and	a9, a9, a10
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  9061b1:	082802        	or	a8, a2, a8
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
  9061b4:	09095f        	extui	a9, a9, 16, 16
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
  9061b7:	088257        	extui	a2, a8, 24, 8
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
  9061ba:	29346c        	s8i	a9, a3, 108
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
  9061bd:	088947        	extui	a9, a8, 8, 8
        /*
         * Extract the transmit rate used and mark the rate as
         * ``alternate'' if it wasn't the series 0 rate.
         */
        ds->ds_txstat.ts_rate = MS(ads->ds_txstatus9, AR_FinalTxIdx);
        ds->ds_txstat.ts_rssi_combined = 
  9061c0:	223469        	s8i	a2, a3, 105
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
  9061c3:	29346e        	s8i	a9, a3, 110
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
  9061c6:	22347c        	s8i	a2, a3, 124
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
  9061c9:	080957        	extui	a9, a8, 16, 8
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
  9061cc:	088247        	extui	a2, a8, 8, 8
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
  9061cf:	29346f        	s8i	a9, a3, 111
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
  9061d2:	29347d        	s8i	a9, a3, 125
  9061d5:	22347e        	s8i	a2, a3, 126
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  9061d8:	293050        	l8ui	a9, a3, 80
  9061db:	223051        	l8ui	a2, a3, 81
        ds->ds_txstat.ts_rssi_combined = 
		MS(ads->ds_txstatus5, AR_TxRSSICombined);
        ds->ds_txstat.ts_rssi_ctl0 = MS(ads->ds_txstatus0, AR_TxRSSIAnt00);
        ds->ds_txstat.ts_rssi_ctl1 = MS(ads->ds_txstatus0, AR_TxRSSIAnt01);
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
  9061de:	28346d        	s8i	a8, a3, 109
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
  9061e1:	28347f        	s8i	a8, a3, 127
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  9061e4:	283052        	l8ui	a8, a3, 82
  9061e7:	089910        	slli	a9, a9, 24
  9061ea:	002211        	slli	a2, a2, 16
  9061ed:	092202        	or	a2, a2, a9
  9061f0:	088811        	slli	a8, a8, 8
  9061f3:	028802        	or	a8, a8, a2
  9061f6:	223053        	l8ui	a2, a3, 83
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
  9061f9:	293054        	l8ui	a9, a3, 84
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  9061fc:	082802        	or	a8, a2, a8
  9061ff:	088257        	extui	a2, a8, 24, 8
  906202:	223480        	s8i	a2, a3, 128
  906205:	080257        	extui	a2, a8, 16, 8
  906208:	223481        	s8i	a2, a3, 129
  90620b:	088247        	extui	a2, a8, 8, 8
  90620e:	223482        	s8i	a2, a3, 130
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
  906211:	223055        	l8ui	a2, a3, 85
        ds->ds_txstat.ts_rssi_ctl2 = MS(ads->ds_txstatus0, AR_TxRSSIAnt02);
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
  906214:	283483        	s8i	a8, a3, 131
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
  906217:	283056        	l8ui	a8, a3, 86
  90621a:	089910        	slli	a9, a9, 24
  90621d:	002211        	slli	a2, a2, 16
  906220:	092202        	or	a2, a2, a9
  906223:	088811        	slli	a8, a8, 8
  906226:	028802        	or	a8, a8, a2
  906229:	223057        	l8ui	a2, a3, 87
  90622c:	082802        	or	a8, a2, a8
  90622f:	088257        	extui	a2, a8, 24, 8
  906232:	223484        	s8i	a2, a3, 132
  906235:	080257        	extui	a2, a8, 16, 8
  906238:	223485        	s8i	a2, a3, 133
  90623b:	088247        	extui	a2, a8, 8, 8
  90623e:	223486        	s8i	a2, a3, 134
        ds->ds_txstat.ts_shortretry = MS(ads->ds_txstatus1, AR_RTSFailCnt);
  906241:	29303c        	l8ui	a9, a3, 60
  906244:	22303d        	l8ui	a2, a3, 61
        ds->ds_txstat.ts_rssi_ext0 = MS(ads->ds_txstatus5, AR_TxRSSIAnt10);
        ds->ds_txstat.ts_rssi_ext1 = MS(ads->ds_txstatus5, AR_TxRSSIAnt11);
        ds->ds_txstat.ts_rssi_ext2 = MS(ads->ds_txstatus5, AR_TxRSSIAnt12);
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
  906247:	283487        	s8i	a8, a3, 135
        ds->ds_txstat.ts_shortretry = MS(ads->ds_txstatus1, AR_RTSFailCnt);
  90624a:	28303e        	l8ui	a8, a3, 62
  90624d:	089910        	slli	a9, a9, 24
  906250:	002211        	slli	a2, a2, 16
  906253:	092202        	or	a2, a2, a9
  906256:	088811        	slli	a8, a8, 8
  906259:	028802        	or	a8, a8, a2
  90625c:	22303f        	l8ui	a2, a3, 63
  90625f:	082802        	or	a8, a2, a8
  906262:	084243        	extui	a2, a8, 4, 4
  906265:	223470        	s8i	a2, a3, 112
        ds->ds_txstat.ts_longretry = MS(ads->ds_txstatus1, AR_DataFailCnt);
  906268:	088243        	extui	a2, a8, 8, 4
  90626b:	223471        	s8i	a2, a3, 113
        ds->ds_txstat.ts_virtcol = MS(ads->ds_txstatus1, AR_VirtRetryCnt);
  90626e:	127272        	l32r	a2, 8e2c38 <hif_module_install+0x64>
  906271:	028801        	and	a8, a8, a2
  906274:	08c814        	srli	a8, a8, 12
        ds->ds_txstat.ts_antenna = 0;		/* ignored for owl */
  906277:	c020      	movi.n	a2, 0
        ds->ds_txstat.evm0 = ads->AR_TxEVM0;
        ds->ds_txstat.evm1 = ads->AR_TxEVM1;
        ds->ds_txstat.evm2 = ads->AR_TxEVM2;
        ds->ds_txstat.ts_shortretry = MS(ads->ds_txstatus1, AR_RTSFailCnt);
        ds->ds_txstat.ts_longretry = MS(ads->ds_txstatus1, AR_DataFailCnt);
        ds->ds_txstat.ts_virtcol = MS(ads->ds_txstatus1, AR_VirtRetryCnt);
  906279:	283472        	s8i	a8, a3, 114
        ds->ds_txstat.ts_antenna = 0;		/* ignored for owl */
  90627c:	223473        	s8i	a2, a3, 115
  90627f:	c080      	movi.n	a8, 0

        return HAL_OK;
}
  906281:	d280      	mov.n	a2, a8
  906283:	d10f      	retw.n
  906285:	000000        	ill

00906288 <ar5416Attach>:
	ath_hal_free(ah);
}

struct ath_hal *
ar5416Attach(HAL_SOFTC sc, adf_os_device_t dev, HAL_STATUS *status)
{
  906288:	6c1004        	entry	a1, 32
	struct ath_hal_5416 *ahp;
	struct ath_hal *ah;

	ahp = ath_hal_malloc(sizeof (struct ath_hal_5416));
  90628b:	2a1a30        	movi	a10, 0x130
  90628e:	5bf64f        	call8	903bcc <ath_hal_malloc>
	ath_hal_free(ah);
}

struct ath_hal *
ar5416Attach(HAL_SOFTC sc, adf_os_device_t dev, HAL_STATUS *status)
{
  906291:	d520      	mov.n	a5, a2
	struct ath_hal_5416 *ahp;
	struct ath_hal *ah;

	ahp = ath_hal_malloc(sizeof (struct ath_hal_5416));
  906293:	d2a0      	mov.n	a2, a10
	if (ahp == AH_NULL) {
  906295:	cca4      	bnez.n	a10, 90629d <ar5416Attach+0x15>
		*status = HAL_ENOMEM;
  906297:	c032      	movi.n	a3, 2
  906299:	9340      	s32i.n	a3, a4, 0
		return AH_NULL;
  90629b:	d10f      	retw.n
	}
	ah = &ahp->ah_priv.h;

	OS_MEMCPY(&ahp->ah_priv, &ar5416hal_10, sizeof(struct ath_hal_private));
  90629d:	1b7273        	l32r	a11, 8e2c6c <hif_module_install+0x98>
  9062a0:	2c0ad0        	movi	a12, 208
  9062a3:	5bf655        	call8	903bf8 <ath_hal_memcpy>

	ah->ah_dev = dev;
  9062a6:	9322      	s32i.n	a3, a2, 8
	ah->ah_sc = sc;

	ah->ah_set11nTxDesc        = ar5416Set11nTxDesc_20;
  9062a8:	137274        	l32r	a3, 8e2c78 <hif_module_install+0xa4>
	ah = &ahp->ah_priv.h;

	OS_MEMCPY(&ahp->ah_priv, &ar5416hal_10, sizeof(struct ath_hal_private));

	ah->ah_dev = dev;
	ah->ah_sc = sc;
  9062ab:	9521      	s32i.n	a5, a2, 4

	ah->ah_set11nTxDesc        = ar5416Set11nTxDesc_20;
  9062ad:	932f      	s32i.n	a3, a2, 60
	ah->ah_set11nRateScenario  = ar5416Set11nRateScenario_20;
  9062af:	137275        	l32r	a3, 8e2c84 <hif_module_install+0xb0>
  9062b2:	232610        	s32i	a3, a2, 64
	ah->ah_set11nAggrFirst     = ar5416Set11nAggrFirst_20;
  9062b5:	137276        	l32r	a3, 8e2c90 <hif_module_install+0xbc>
  9062b8:	232611        	s32i	a3, a2, 68
	ah->ah_set11nAggrMiddle    = ar5416Set11nAggrMiddle_20;
  9062bb:	137277        	l32r	a3, 8e2c98 <hif_module_install+0xc4>
  9062be:	232612        	s32i	a3, a2, 72
	ah->ah_set11nAggrLast      = ar5416Set11nAggrLast_20;
  9062c1:	137278        	l32r	a3, 8e2ca4 <hif_module_install+0xd0>
  9062c4:	232613        	s32i	a3, a2, 76
	ah->ah_clr11nAggr          = ar5416Clr11nAggr_20;
  9062c7:	137279        	l32r	a3, 8e2cac <hif_module_install+0xd8>
  9062ca:	232614        	s32i	a3, a2, 80
	ah->ah_set11nBurstDuration = ar5416Set11nBurstDuration_20;
  9062cd:	13727a        	l32r	a3, 8e2cb8 <hif_module_install+0xe4>
  9062d0:	232615        	s32i	a3, a2, 84
	ah->ah_setupRxDesc         = ar5416SetupRxDesc_20;
  9062d3:	13727b        	l32r	a3, 8e2cc0 <hif_module_install+0xec>
  9062d6:	232620        	s32i	a3, a2, 128
	ah->ah_procRxDescFast      = ar5416ProcRxDescFast_20;
  9062d9:	13727c        	l32r	a3, 8e2ccc <hif_module_install+0xf8>
  9062dc:	232622        	s32i	a3, a2, 136
	ah->ah_setupTxDesc         = ar5416SetupTxDesc_20;
  9062df:	13727d        	l32r	a3, 8e2cd4 <hif_module_install+0x100>
  9062e2:	232617        	s32i	a3, a2, 92
	ah->ah_fillTxDesc          = ar5416FillTxDesc_20;
  9062e5:	13727e        	l32r	a3, 8e2ce0 <hif_module_install+0x10c>
  9062e8:	232618        	s32i	a3, a2, 96
	ah->ah_fillKeyTxDesc       = ar5416FillKeyTxDesc_20;
  9062eb:	13727f        	l32r	a3, 8e2ce8 <hif_module_install+0x114>
  9062ee:	232619        	s32i	a3, a2, 100
	ah->ah_procTxDesc          = ar5416ProcTxDesc_20;
  9062f1:	137280        	l32r	a3, 8e2cf4 <hif_module_install+0x120>
  9062f4:	23261a        	s32i	a3, a2, 104
	ah->ah_set11nVirtualMoreFrag = ar5416Set11nVirtualMoreFrag_20;
  9062f7:	137281        	l32r	a3, 8e2cfc <hif_module_install+0x128>
  9062fa:	232616        	s32i	a3, a2, 88

	return ah;
}
  9062fd:	d10f      	retw.n
	...

00906300 <ar5416GetRateTable>:
#undef	HT
#undef	HT_HGI

const HAL_RATE_TABLE *
ar5416GetRateTable(struct ath_hal *ah, a_uint32_t mode)
{
  906300:	6c1004        	entry	a1, 32
  906303:	187282        	l32r	a8, 8e2d0c <hif_module_install+0x138>
  906306:	233dc0        	addmi	a3, a3, 0xffffc000
  906309:	c020      	movi.n	a2, 0
  90630b:	038238        	moveqz	a2, a8, a3
	default:
		return AH_NULL;
	}

	return rt;
}
  90630e:	d10f      	retw.n

00906310 <ath_pci_suspend>:
	adf_os_free_intr(sc->sc_dev);
}

static void
ath_pci_suspend(adf_drv_handle_t hdl, adf_os_pm_t pm)
{
  906310:	6c1004        	entry	a1, 32
  906313:	d10f      	retw.n
  906315:	000000        	ill

00906318 <ath_pci_resume>:
}

static void
ath_pci_resume(adf_drv_handle_t hdl)
{
  906318:	6c1004        	entry	a1, 32
  90631b:	d10f      	retw.n
  90631d:	000000        	ill

00906320 <ath_pci_remove>:
	return NULL;
}

static void
ath_pci_remove(adf_drv_handle_t hdl)
{
  906320:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = hdl;

	ath_detach((struct ath_softc_tgt *)hdl);
  906323:	da20      	mov.n	a10, a2
  906325:	5807dc        	call8	908298 <ath_detach>
}

static inline void
adf_os_free_intr(adf_os_device_t osdev)
{
    __adf_os_free_intr(osdev);
  906328:	2a2246        	l32i	a10, a2, 0x118
  90632b:	58002b        	call8	9063d8 <__adf_os_free_intr>
  90632e:	d10f      	retw.n

00906330 <init_ath_pci>:

static adf_drv_info_t ath_drv_info = adf_os_pci_set_drv_info(ath_pci_tgt,&ath_pci_id_table[0], ath_pci_probe, ath_pci_remove, ath_pci_suspend, ath_pci_resume);

a_int32_t
init_ath_pci(void)
{
  906330:	6c1004        	entry	a1, 32
 * @return status of operation
 */
static inline a_status_t 
adf_net_register_drv(adf_drv_info_t *drv)
{
    return(__adf_net_register_drv(drv));
  906333:	1a7283        	l32r	a10, 8e2d40 <hif_module_install+0x16c>
  906336:	5812a5        	call8	90adcc <__adf_net_register_drv>
	return adf_net_register_drv( &ath_drv_info );
}
  906339:	d2a0      	mov.n	a2, a10
  90633b:	d10f      	retw.n
  90633d:	000000        	ill

00906340 <ath_pci_probe>:
a_int32_t init_ath_pci(void);

static adf_drv_handle_t
ath_pci_probe(adf_os_resource_t *res,a_int32_t count, adf_os_attach_data_t *data,
	      adf_os_device_t osdev)
{
  906340:	6c1004        	entry	a1, 32
}

static inline int 
__adf_os_pci_config_write8(adf_os_device_t osdev, int offset, a_uint8_t val)
{
    wlan_pci_config_write(offset, val, 1);
  906343:	c2b0      	movi.n	a11, 32
  906345:	c0c1      	movi.n	a12, 1
  906347:	c0ac      	movi.n	a10, 12
  906349:	5bf658        	call8	903cac <wlan_pci_config_write>
  90634c:	2b0aa8        	movi	a11, 168
  90634f:	2c0a01        	movi	a12, 1
  906352:	2a0a0d        	movi	a10, 13
  906355:	5bf655        	call8	903cac <wlan_pci_config_write>
  906358:	167182        	l32r	a6, 8e2960 <athos_indirection_table_install+0x1418>
  90635b:	137284        	l32r	a3, 8e2d6c <hif_module_install+0x198>
  90635e:	226252        	l32i	a2, a6, 0x148
  906361:	c0a0      	movi.n	a10, 0
  906363:	db30      	mov.n	a11, a3
  906365:	0b2000        	callx8	a2
  906368:	d2a0      	mov.n	a2, a10
	adf_os_pci_config_write8(osdev, ATH_PCI_CACHE_LINE_SIZE, csz);
	adf_os_pci_config_write8(osdev, ATH_PCI_LATENCY_TIMER, 0xa8);

	sc = adf_os_mem_alloc(sizeof(struct ath_pci_softc));

	if (sc == NULL) {
  90636a:	ccaa      	bnez.n	a10, 906378 <ath_pci_probe+0x38>
		adf_os_print("ath_pci: no memory for device state\n");
  90636c:	236212        	l32i	a3, a6, 72
  90636f:	1a7285        	l32r	a10, 8e2d84 <hif_module_install+0x1b0>
  906372:	0b3000        	callx8	a3
  906375:	d10f      	retw.n
  906377:	008864        	excw

/* set a memory buffer */
static inline void
__adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
	A_MEMSET(buf, b, size);
  90637a:	dc30      	mov.n	a12, a3
  90637c:	c0b0      	movi.n	a11, 0
  90637e:	0b8000        	callx8	a8

	/*
	 * Mark the device as detached to avoid processing
	 * interrupts until setup is complete.
	 */
	sc->aps_sc.sc_invalid = 1;
  906381:	232d01        	addmi	a3, a2, 0x100
  906384:	293024        	l8ui	a9, a3, 36
  906387:	28fa80        	movi	a8, -128
  90638a:	089802        	or	a8, a9, a8
  90638d:	283424        	s8i	a8, a3, 36

	adf_os_print("ath_pci_probe %x\n",id->device);
  906390:	2b4201        	l32i	a11, a4, 4
  906393:	266212        	l32i	a6, a6, 72
  906396:	1a7286        	l32r	a10, 8e2db0 <hif_module_install+0x1dc>
  906399:	0b6000        	callx8	a6

	if (ath_tgt_attach(id->device, &sc->aps_sc, osdev) != 0)
  90639c:	8a41      	l32i.n	a10, a4, 4
  90639e:	db20      	mov.n	a11, a2
  9063a0:	dc50      	mov.n	a12, a5
  9063a2:	5806b0        	call8	907e64 <ath_tgt_attach>
  9063a5:	cda1      	bnez.n	a10, 9063ba <ath_pci_probe+0x7a>
		goto bad3;

	/* ready to process interrupts */
	sc->aps_sc.sc_invalid = 0;
  9063a7:	243024        	l8ui	a4, a3, 36
#include <adf_os_irq_pvt.h>

static inline int
adf_os_setup_intr(adf_os_device_t  osdev, adf_os_drv_intr fn)
{
    return __adf_os_setup_intr(osdev, fn);
  9063aa:	1b7287        	l32r	a11, 8e2dc8 <hif_module_install+0x1f4>
  9063ad:	040446        	extui	a4, a4, 0, 7
  9063b0:	243424        	s8i	a4, a3, 36
  9063b3:	da50      	mov.n	a10, a5
  9063b5:	580005        	call8	9063cc <__adf_os_setup_intr>
  9063b8:	d10f      	retw.n
	adf_os_setup_intr(osdev, ath_intr);
	return (adf_drv_handle_t)sc;
bad3:
bad2:
	return NULL;
  9063ba:	c020      	movi.n	a2, 0
}
  9063bc:	d10f      	retw.n
	...

009063c0 <exit_ath_pci>:
	return adf_net_register_drv( &ath_drv_info );
}

void
exit_ath_pci(void)
{
  9063c0:	6c1004        	entry	a1, 32
 * @see adf_net_register_drv()
 */
static inline void
adf_net_unregister_drv(a_uint8_t *drv_name)
{
    __adf_net_unregister_drv(drv_name);
  9063c3:	1a7288        	l32r	a10, 8e2de4 <hif_module_install+0x210>
  9063c6:	581284        	call8	90add8 <__adf_net_unregister_drv>
  9063c9:	d10f      	retw.n
	...

009063cc <__adf_os_setup_intr>:
 * @return int
 */

int
__adf_os_setup_intr(__adf_os_device_t  osdev, adf_os_drv_intr fn)
{
  9063cc:	6c1004        	entry	a1, 32
    g_wlan_intr = fn;
  9063cf:	1871ed        	l32r	a8, 8e2b84 <_HIFusb_isr_handler+0x2c>
    
    return 0;    
}
  9063d2:	c020      	movi.n	a2, 0
 */

int
__adf_os_setup_intr(__adf_os_device_t  osdev, adf_os_drv_intr fn)
{
    g_wlan_intr = fn;
  9063d4:	9380      	s32i.n	a3, a8, 0
    
    return 0;    
}
  9063d6:	d10f      	retw.n

009063d8 <__adf_os_free_intr>:
 * @param[in] dev
 * @param[in] sc
 */
void
__adf_os_free_intr(__adf_os_device_t osdev)
{
  9063d8:	6c1004        	entry	a1, 32
    g_wlan_intr = NULL;  
  9063db:	1871ed        	l32r	a8, 8e2b90 <_HIFusb_isr_handler+0x38>
  9063de:	c090      	movi.n	a9, 0
  9063e0:	9980      	s32i.n	a9, a8, 0
  9063e2:	d10f      	retw.n

009063e4 <__adf_os_mem_alloc>:

#include "cmnos_api.h"
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
  9063e4:	6c1004        	entry	a1, 32
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  9063e7:	187182        	l32r	a8, 8e29f0 <athos_indirection_table_install+0x14a8>
  9063ea:	db20      	mov.n	a11, a2
  9063ec:	288252        	l32i	a8, a8, 0x148
  9063ef:	c0a0      	movi.n	a10, 0
  9063f1:	0b8000        	callx8	a8
}
  9063f4:	d2a0      	mov.n	a2, a10
  9063f6:	d10f      	retw.n

009063f8 <__adf_os_mem_copy>:
    //free(buf,M_DEVBUF);
}

/* move a memory buffer */
static inline void 		__adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
  9063f8:	6c1004        	entry	a1, 32
    A_MEMCPY(dst,src,size);    
  9063fb:	187182        	l32r	a8, 8e2a04 <athos_indirection_table_install+0x14bc>
  9063fe:	da20      	mov.n	a10, a2
  906400:	8885      	l32i.n	a8, a8, 20
  906402:	db30      	mov.n	a11, a3
  906404:	dc40      	mov.n	a12, a4
  906406:	0b8000        	callx8	a8
  906409:	d10f      	retw.n
	...

0090640c <__adf_os_mem_set>:
}

/* set a memory buffer */
static inline void
__adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
  90640c:	6c1004        	entry	a1, 32
	A_MEMSET(buf, b, size);
  90640f:	187182        	l32r	a8, 8e2a18 <athos_indirection_table_install+0x14d0>
  906412:	da20      	mov.n	a10, a2
  906414:	8884      	l32i.n	a8, a8, 16
  906416:	db30      	mov.n	a11, a3
  906418:	dc40      	mov.n	a12, a4
  90641a:	0b8000        	callx8	a8
  90641d:	d10f      	retw.n
	...

00906420 <tgt_HTCRecv_uapsdhandler>:
	ath_tgt_send_beacon(sc, hdr_buf, buf, EndPt);
}

static void tgt_HTCRecv_uapsdhandler(HTC_ENDPOINT_ID EndPt, adf_nbuf_t hdr_buf,
				     adf_nbuf_t buf, void *ServiceCtx)
{
  906420:	6c1004        	entry	a1, 32
  906423:	d10f      	retw.n
  906425:	000000        	ill

00906428 <dispatch_magpie_sys_cmds>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void dispatch_magpie_sys_cmds(void *pContext, A_UINT16 Command,
				     A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  906428:	6c1004        	entry	a1, 32
  90642b:	63fffc        	j	90642b <dispatch_magpie_sys_cmds+0x3>
	...

00906430 <htc_setup_comp>:
/*****************/
/* Init / Deinit */
/*****************/

static void htc_setup_comp(void)
{
  906430:	6c1004        	entry	a1, 32
  906433:	d10f      	retw.n
  906435:	000000        	ill

00906438 <tgt_ServiceConnect>:
				  HTC_ENDPOINT_ID eid,
				  A_UINT8 *pDataIn,
				  a_int32_t LengthIn,
				  A_UINT8 *pDataOut,
				  a_int32_t *pLengthOut)
{
  906438:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)pService->ServiceCtx;
  90643b:	8826      	l32i.n	a8, a2, 24

	switch(pService->ServiceID) {
  90643d:	222108        	l16ui	a2, a2, 16
  906440:	c098      	movi.n	a9, 8
  906442:	222dff        	addmi	a2, a2, 0xffffff00
  906445:	02024f        	extui	a2, a2, 0, 16
  906448:	729340        	bltu	a9, a2, 90648c <tgt_ServiceConnect+0x54>
  90644b:	197289        	l32r	a9, 8e2e70 <hif_module_install+0x29c>
  90644e:	09220a        	addx4	a2, a2, a9
  906451:	8220      	l32i.n	a2, a2, 0
  906453:	0a2000        	jx	a2
	case WMI_CONTROL_SVC:
		sc->wmi_command_ep= eid;
  906456:	23863c        	s32i	a3, a8, 240
		break;
  906459:	600032        	j	90648f <tgt_ServiceConnect+0x57>
	case WMI_BEACON_SVC:
		sc->beacon_ep= eid;
  90645c:	23863d        	s32i	a3, a8, 244
		break;
  90645f:	60002c        	j	90648f <tgt_ServiceConnect+0x57>
	case WMI_CAB_SVC:
		sc->cab_ep= eid;
  906462:	23863e        	s32i	a3, a8, 248
		break;
  906465:	600026        	j	90648f <tgt_ServiceConnect+0x57>
	case WMI_UAPSD_SVC:
		sc->uapsd_ep= eid;
  906468:	23863f        	s32i	a3, a8, 252
		break;
  90646b:	600020        	j	90648f <tgt_ServiceConnect+0x57>
	case WMI_MGMT_SVC:
		sc->mgmt_ep= eid;
  90646e:	238640        	s32i	a3, a8, 0x100
		break;
  906471:	60001a        	j	90648f <tgt_ServiceConnect+0x57>
	case WMI_DATA_VO_SVC:
		sc->data_VO_ep = eid;
  906474:	238641        	s32i	a3, a8, 0x104
		break;
  906477:	600014        	j	90648f <tgt_ServiceConnect+0x57>
	case WMI_DATA_VI_SVC:
		sc->data_VI_ep = eid;
  90647a:	238642        	s32i	a3, a8, 0x108
		break;
  90647d:	60000e        	j	90648f <tgt_ServiceConnect+0x57>
	case WMI_DATA_BE_SVC:
		sc->data_BE_ep = eid;
  906480:	238643        	s32i	a3, a8, 0x10c
		break;
  906483:	600008        	j	90648f <tgt_ServiceConnect+0x57>
	case WMI_DATA_BK_SVC:
		sc->data_BK_ep = eid;
  906486:	238644        	s32i	a3, a8, 0x110
		break;
  906489:	600002        	j	90648f <tgt_ServiceConnect+0x57>
  90648c:	63fffc        	j	90648c <tgt_ServiceConnect+0x54>
	default:
		adf_os_assert(0);
	}

	return HTC_SERVICE_SUCCESS;
}
  90648f:	c020      	movi.n	a2, 0
  906491:	d10f      	retw.n
	...

00906494 <tgt_reg_service>:

static void tgt_reg_service(struct ath_softc_tgt *sc, HTC_SERVICE *svc,
			    int svcId, HTC_SERVICE_ProcessRecvMsg recvMsg)
{
  906494:	6c1004        	entry	a1, 32
	svc->ProcessRecvMsg = recvMsg;
	svc->ProcessSendBufferComplete = tgt_HTCSendCompleteHandler;
  906497:	18728a        	l32r	a8, 8e2ec0 <hif_module_install+0x2ec>
	svc->ProcessConnect = tgt_ServiceConnect;
	svc->MaxSvcMsgSize = 1600;
	svc->TrailerSpcCheckLimit = 0;
	svc->ServiceID = svcId;
	svc->ServiceCtx = sc;
	HTC_RegisterService(sc->tgt_htc_handle, svc);
  90649a:	8a22      	l32i.n	a10, a2, 8

static void tgt_reg_service(struct ath_softc_tgt *sc, HTC_SERVICE *svc,
			    int svcId, HTC_SERVICE_ProcessRecvMsg recvMsg)
{
	svc->ProcessRecvMsg = recvMsg;
	svc->ProcessSendBufferComplete = tgt_HTCSendCompleteHandler;
  90649c:	9832      	s32i.n	a8, a3, 8
	svc->ProcessConnect = tgt_ServiceConnect;
  90649e:	18728b        	l32r	a8, 8e2ecc <bGet_descriptor+0x8>
	return HTC_SERVICE_SUCCESS;
}

static void tgt_reg_service(struct ath_softc_tgt *sc, HTC_SERVICE *svc,
			    int svcId, HTC_SERVICE_ProcessRecvMsg recvMsg)
{
  9064a1:	db30      	mov.n	a11, a3
	svc->ProcessRecvMsg = recvMsg;
	svc->ProcessSendBufferComplete = tgt_HTCSendCompleteHandler;
	svc->ProcessConnect = tgt_ServiceConnect;
  9064a3:	9833      	s32i.n	a8, a3, 12
	svc->MaxSvcMsgSize = 1600;
  9064a5:	286a40        	movi	a8, 0x640
  9064a8:	28350a        	s16i	a8, a3, 20
	svc->TrailerSpcCheckLimit = 0;
  9064ab:	c080      	movi.n	a8, 0
  9064ad:	28350b        	s16i	a8, a3, 22
	svc->ServiceID = svcId;
	svc->ServiceCtx = sc;
	HTC_RegisterService(sc->tgt_htc_handle, svc);
  9064b0:	187182        	l32r	a8, 8e2ab8 <athos_indirection_table_install+0x1570>
}

static void tgt_reg_service(struct ath_softc_tgt *sc, HTC_SERVICE *svc,
			    int svcId, HTC_SERVICE_ProcessRecvMsg recvMsg)
{
	svc->ProcessRecvMsg = recvMsg;
  9064b3:	9531      	s32i.n	a5, a3, 4
	svc->ProcessConnect = tgt_ServiceConnect;
	svc->MaxSvcMsgSize = 1600;
	svc->TrailerSpcCheckLimit = 0;
	svc->ServiceID = svcId;
	svc->ServiceCtx = sc;
	HTC_RegisterService(sc->tgt_htc_handle, svc);
  9064b5:	288285        	l32i	a8, a8, 0x214
	svc->ProcessRecvMsg = recvMsg;
	svc->ProcessSendBufferComplete = tgt_HTCSendCompleteHandler;
	svc->ProcessConnect = tgt_ServiceConnect;
	svc->MaxSvcMsgSize = 1600;
	svc->TrailerSpcCheckLimit = 0;
	svc->ServiceID = svcId;
  9064b8:	243508        	s16i	a4, a3, 16
	svc->ServiceCtx = sc;
  9064bb:	9236      	s32i.n	a2, a3, 24
	HTC_RegisterService(sc->tgt_htc_handle, svc);
  9064bd:	0b8000        	callx8	a8
  9064c0:	d10f      	retw.n
	...

009064c4 <tgt_HTCRecv_mgmthandler>:
{
}

static void tgt_HTCRecv_mgmthandler(HTC_ENDPOINT_ID EndPt, adf_nbuf_t hdr_buf,
				    adf_nbuf_t buf, void *ServiceCtx)
{
  9064c4:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)ServiceCtx;

	ath_tgt_send_mgt(sc,hdr_buf,buf,EndPt);
  9064c7:	da50      	mov.n	a10, a5
  9064c9:	db30      	mov.n	a11, a3
  9064cb:	dc40      	mov.n	a12, a4
  9064cd:	dd20      	mov.n	a13, a2
  9064cf:	580e42        	call8	909dd8 <ath_tgt_send_mgt>
  9064d2:	d10f      	retw.n

009064d4 <ath_tgt_rx_tasklet>:

	return 0;
}

static void ath_tgt_rx_tasklet(TQUEUE_ARG data)
{
  9064d4:	6c1006        	entry	a1, 48
	struct ath_softc_tgt *sc  = (struct ath_softc_tgt *)data;
	struct ath_rx_buf *bf = NULL;
	struct ath_hal *ah = sc->sc_ah;
  9064d7:	232d05        	addmi	a3, a2, 0x500
  9064da:	853b      	l32i.n	a5, a3, 44
			continue;
		}

		asf_tailq_remove(&sc->sc_rxbuf, bf, bf_list);

		bf->bf_skb = NULL;
  9064dc:	c060      	movi.n	a6, 0
	struct rx_frame_header *rxhdr;
	struct ath_rx_status *rxstats;
	adf_nbuf_t skb = ADF_NBUF_NULL;

	do {
		bf = asf_tailq_first(&sc->sc_rxbuf);
  9064de:	2322d5        	l32i	a3, a2, 0x354
		if (bf == NULL) {
  9064e1:	64309c        	beqz	a3, 906581 <ath_tgt_rx_tasklet+0xad>
			break;
		}

		if (!(bf->bf_status & ATH_BUFSTATUS_DONE)) {
  9064e4:	843f      	l32i.n	a4, a3, 60
  9064e6:	7f4f02        	bbsi	a4, 31, 9064ec <ath_tgt_rx_tasklet+0x18>
  9064e9:	600094        	j	906581 <ath_tgt_rx_tasklet+0xad>
			break;
		}

		skb = bf->bf_skb;
  9064ec:	8938      	l32i.n	a9, a3, 32
		if (skb == NULL) {
  9064ee:	649ff2        	beqz	a9, 9064e4 <ath_tgt_rx_tasklet+0x10>
			continue;
		}

		asf_tailq_remove(&sc->sc_rxbuf, bf, bf_list);
  9064f1:	8439      	l32i.n	a4, a3, 36
  9064f3:	873a      	l32i.n	a7, a3, 40
  9064f5:	c844      	beqz.n	a4, 9064fd <ath_tgt_rx_tasklet+0x29>
  9064f7:	974a      	s32i.n	a7, a4, 40
  9064f9:	600003        	j	906500 <ath_tgt_rx_tasklet+0x2c>
  9064fc:	002726        	excw
  9064ff:	d687      	excw
  906501:	3ada90        	excw
  906504:	9470      	s32i.n	a4, a7, 0

		bf->bf_skb = NULL;
  906506:	9638      	s32i.n	a6, a3, 32
  906508:	2b0a28        	movi	a11, 40
  90650b:	291600        	s32i	a9, a1, 0
  90650e:	5bf3ab        	call8	9033bc <__adf_nbuf_push_head>
 * @param[in] size    buffer size
 */
static inline void
adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    __adf_os_mem_copy(dst, src, size);
  906511:	2b3c40        	addi	a11, a3, 64
  906514:	2c0a28        	movi	a12, 40
  906517:	0aa702        	or	a7, a10, a10
  90651a:	5bffb7        	call8	9063f8 <__adf_os_mem_copy>
/*
 * Extend a 32 bit TSF to 64 bit, taking wrapping into account.
 */
static u_int64_t ath_extend_tsf(struct ath_softc_tgt *sc, u_int32_t rstamp)
{
	struct ath_hal *ah = sc->sc_ah;
  90651d:	282d05        	addmi	a8, a2, 0x500
  906520:	8a8b      	l32i.n	a10, a8, 44
						     sizeof(struct rx_frame_header));
		rxstats = (struct ath_rx_status *)(&rxhdr->rx_stats[0]);
		adf_os_mem_copy(rxstats, &(bf->bf_rx_status),
				sizeof(struct ath_rx_status));

		rxstats->rs_tstamp = ath_extend_tsf(sc, (u_int32_t)rxstats->rs_tstamp);
  906522:	8471      	l32i.n	a4, a7, 4
	struct ath_hal *ah = sc->sc_ah;
	u_int64_t tsf;
	u_int32_t tsf_low;
	u_int64_t tsf64;

	tsf = ah->ah_getTsf64(ah);
  906524:	28a21e        	l32i	a8, a10, 120
  906527:	0b8000        	callx8	a8
	tsf_low = tsf & 0xffffffff;
	tsf64 = (tsf & ~0xffffffffULL) | rstamp;
  90652a:	d8a0      	mov.n	a8, a10

	if (rstamp > tsf_low && (rstamp - tsf_low > 0x10000000))
  90652c:	8910      	l32i.n	a9, a1, 0
  90652e:	74bb0a        	bgeu	a11, a4, 90653c <ath_tgt_rx_tasklet+0x68>
  906531:	1c722b        	l32r	a12, 8e2de0 <hif_module_install+0x20c>
  906534:	0b4a0c        	sub	a10, a4, a11
  906537:	7acb01        	bgeu	a12, a10, 90653c <ath_tgt_rx_tasklet+0x68>
		tsf64 -= 0x100000000ULL;
  90653a:	b088      	addi.n	a8, a8, -1

	if (rstamp < tsf_low && (tsf_low - rstamp > 0x10000000))
  90653c:	7b4b0a        	bgeu	a4, a11, 90654a <ath_tgt_rx_tasklet+0x76>
  90653f:	1a722b        	l32r	a10, 8e2dec <hif_module_install+0x218>
  906542:	04bb0c        	sub	a11, a11, a4
  906545:	7bab01        	bgeu	a10, a11, 90654a <ath_tgt_rx_tasklet+0x76>
		tsf64 += 0x100000000ULL;
  906548:	b188      	addi.n	a8, a8, 1
						     sizeof(struct rx_frame_header));
		rxstats = (struct ath_rx_status *)(&rxhdr->rx_stats[0]);
		adf_os_mem_copy(rxstats, &(bf->bf_rx_status),
				sizeof(struct ath_rx_status));

		rxstats->rs_tstamp = ath_extend_tsf(sc, (u_int32_t)rxstats->rs_tstamp);
  90654a:	9471      	s32i.n	a4, a7, 4

		HTC_SendMsg(sc->tgt_htc_handle, RX_ENDPOINT_ID, skb);
  90654c:	147182        	l32r	a4, 8e2b54 <athos_indirection_table_install+0x160c>
  90654f:	8a22      	l32i.n	a10, a2, 8
  906551:	244289        	l32i	a4, a4, 0x224
						     sizeof(struct rx_frame_header));
		rxstats = (struct ath_rx_status *)(&rxhdr->rx_stats[0]);
		adf_os_mem_copy(rxstats, &(bf->bf_rx_status),
				sizeof(struct ath_rx_status));

		rxstats->rs_tstamp = ath_extend_tsf(sc, (u_int32_t)rxstats->rs_tstamp);
  906554:	9870      	s32i.n	a8, a7, 0

		HTC_SendMsg(sc->tgt_htc_handle, RX_ENDPOINT_ID, skb);
  906556:	c0b3      	movi.n	a11, 3
  906558:	dc90      	mov.n	a12, a9
  90655a:	0b4000        	callx8	a4
		sc->sc_rx_stats.ast_rx_send++;
  90655d:	24227d        	l32i	a4, a2, 0x1f4

		bf->bf_status &= ~ATH_BUFSTATUS_DONE;
  906560:	873f      	l32i.n	a7, a3, 60
				sizeof(struct ath_rx_status));

		rxstats->rs_tstamp = ath_extend_tsf(sc, (u_int32_t)rxstats->rs_tstamp);

		HTC_SendMsg(sc->tgt_htc_handle, RX_ENDPOINT_ID, skb);
		sc->sc_rx_stats.ast_rx_send++;
  906562:	b144      	addi.n	a4, a4, 1
  906564:	24267d        	s32i	a4, a2, 0x1f4

		bf->bf_status &= ~ATH_BUFSTATUS_DONE;
  906567:	c74e      	movi.n	a4, -2
  906569:	047401        	and	a4, a7, a4
  90656c:	943f      	s32i.n	a4, a3, 60
		asf_tailq_insert_tail(&sc->sc_rxbuf, bf, bf_list);
  90656e:	2422d6        	l32i	a4, a2, 0x358
  906571:	9639      	s32i.n	a6, a3, 36
  906573:	943a      	s32i.n	a4, a3, 40
  906575:	9340      	s32i.n	a3, a4, 0
  906577:	233c24        	addi	a3, a3, 36
  90657a:	2326d6        	s32i	a3, a2, 0x358
  90657d:	63ff5d        	j	9064de <ath_tgt_rx_tasklet+0xa>
  906580:	002322        	excw

	} while(1);

	sc->sc_imask |= HAL_INT_RX;
  906583:	c4c0      	movi.n	a12, 64
  906585:	b103      	addi.n	a3, a0, 1
  906587:	bb02      	addi.n	a2, a0, 11
  906589:	2b26c4        	s32i	a11, a2, 0x310
	ah->ah_setInterrupts(ah, sc->sc_imask);
  90658c:	225228        	l32i	a2, a5, 160
  90658f:	da50      	mov.n	a10, a5
  906591:	0b2000        	callx8	a2
  906594:	d10f      	retw.n
	...

00906598 <ath_descdma_cleanup>:
}

static void ath_descdma_cleanup(struct ath_softc_tgt *sc,
				struct ath_descdma *dd,
				ath_bufhead *head, a_int32_t dir)
{
  906598:	6c1006        	entry	a1, 48
	struct ath_buf *bf;
	struct ieee80211_node_target *ni;

	asf_tailq_foreach(bf, head, bf_list) {
  90659b:	8740      	l32i.n	a7, a4, 0
  90659d:	60007d        	j	90661e <ath_descdma_cleanup+0x86>
		if (adf_nbuf_queue_len(&bf->bf_skbhead) != 0) {
  9065a0:	267c14        	addi	a6, a7, 20
 * @return length of the queue
 */
static inline a_uint32_t
adf_nbuf_queue_len(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_len(head);
  9065a3:	da60      	mov.n	a10, a6
  9065a5:	5bf442        	call8	9036b0 <__adf_nbuf_queue_len>
  9065a8:	d9a0      	mov.n	a9, a10
  9065aa:	cbac      	beqz.n	a10, 9065ea <ath_descdma_cleanup+0x52>
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  9065ac:	2a2246        	l32i	a10, a2, 0x118
  9065af:	2b7200        	l32i	a11, a7, 0
  9065b2:	055c02        	or	a12, a5, a5
  9065b5:	5bf3c6        	call8	9034d0 <__adf_nbuf_unmap>
  9065b8:	600021        	j	9065dd <ath_descdma_cleanup+0x45>
  9065bb:	000018        	src	a0, a0, a0
			adf_nbuf_unmap(sc->sc_dev, bf->bf_dmamap, dir);
			while(adf_nbuf_queue_len(&bf->bf_skbhead) != 0) {
				ath_free_rx_skb(sc,
  9065be:	71828b        	blt	a8, a1, 90654d <ath_tgt_rx_tasklet+0x79>
  9065c1:	202982        	l16si	a0, a2, 0x104
  9065c4:	a3da      	add.n	a10, a13, a3
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  9065c6:	609911        	j	90fedb <_etext+0x5042>
  9065c9:	9b10      	s32i.n	a11, a1, 0
  9065cb:	5bf3ad        	call8	903480 <__adf_nbuf_queue_remove>
  9065ce:	8b10      	l32i.n	a11, a1, 0
  9065d0:	8911      	l32i.n	a9, a1, 4
  9065d2:	0aac02        	or	a12, a10, a10
  9065d5:	0bba02        	or	a10, a11, a11
  9065d8:	c0b3      	movi.n	a11, 3
  9065da:	0b9000        	callx8	a9
 * @return length of the queue
 */
static inline a_uint32_t
adf_nbuf_queue_len(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_len(head);
  9065dd:	da60      	mov.n	a10, a6
  9065df:	5bf434        	call8	9036b0 <__adf_nbuf_queue_len>
	struct ieee80211_node_target *ni;

	asf_tailq_foreach(bf, head, bf_list) {
		if (adf_nbuf_queue_len(&bf->bf_skbhead) != 0) {
			adf_nbuf_unmap(sc->sc_dev, bf->bf_dmamap, dir);
			while(adf_nbuf_queue_len(&bf->bf_skbhead) != 0) {
  9065e2:	65afd7        	bnez	a10, 9065bd <ath_descdma_cleanup+0x25>
				ath_free_rx_skb(sc,
					adf_nbuf_queue_remove(&bf->bf_skbhead));
			}
			bf->bf_skb = NULL;
  9065e5:	9a78      	s32i.n	a10, a7, 32
  9065e7:	600025        	j	906610 <ath_descdma_cleanup+0x78>
		} else if (bf->bf_skb != NULL) {
  9065ea:	8678      	l32i.n	a6, a7, 32
  9065ec:	ca60      	beqz.n	a6, 906610 <ath_descdma_cleanup+0x78>
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  9065ee:	2b7200        	l32i	a11, a7, 0
  9065f1:	2a2246        	l32i	a10, a2, 0x118
  9065f4:	055c02        	or	a12, a5, a5
  9065f7:	291601        	s32i	a9, a1, 4
  9065fa:	5bf3b5        	call8	9034d0 <__adf_nbuf_unmap>
			adf_nbuf_unmap(sc->sc_dev,bf->bf_dmamap, dir);
			ath_free_rx_skb(sc, bf->bf_skb);
  9065fd:	187182        	l32r	a8, 8e2c08 <hif_module_install+0x34>
  906600:	8a20      	l32i.n	a10, a2, 0
  906602:	2682a3        	l32i	a6, a8, 0x28c
  906605:	8c78      	l32i.n	a12, a7, 32
  906607:	c0b3      	movi.n	a11, 3
  906609:	0b6000        	callx8	a6
			bf->bf_skb = NULL;
  90660c:	8911      	l32i.n	a9, a1, 4
  90660e:	9978      	s32i.n	a9, a7, 32
 * @param[in] dmap
 */
static inline void
adf_nbuf_dmamap_destroy(adf_os_device_t osdev, adf_os_dma_map_t dmap)
{
    __adf_nbuf_dmamap_destroy(osdev, dmap);
  906610:	8b70      	l32i.n	a11, a7, 0
  906612:	2a2246        	l32i	a10, a2, 0x118
		}

		adf_nbuf_dmamap_destroy(sc->sc_dev, bf->bf_dmamap);

		ni = bf->bf_node;
		bf->bf_node = NULL;
  906615:	c060      	movi.n	a6, 0
  906617:	5bf3b1        	call8	9034dc <__adf_nbuf_dmamap_destroy>
  90661a:	9674      	s32i.n	a6, a7, 16
				ath_bufhead *head, a_int32_t dir)
{
	struct ath_buf *bf;
	struct ieee80211_node_target *ni;

	asf_tailq_foreach(bf, head, bf_list) {
  90661c:	8779      	l32i.n	a7, a7, 36
  90661e:	657f7e        	bnez	a7, 9065a0 <ath_descdma_cleanup+0x8>
	}

	adf_os_dmamem_free(sc->sc_dev, dd->dd_desc_len,
			   1, dd->dd_desc, dd->dd_desc_dmamap);

	asf_tailq_init(head);
  906621:	9740      	s32i.n	a7, a4, 0
  906623:	9441      	s32i.n	a4, a4, 4
 * @param[in] size  buffer size
 */
static inline void
adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
    __adf_os_mem_set(buf, b, size);
  906625:	da30      	mov.n	a10, a3
  906627:	db70      	mov.n	a11, a7
  906629:	c1c8      	movi.n	a12, 24
  90662b:	5bff78        	call8	90640c <__adf_os_mem_set>
  90662e:	d10f      	retw.n

00906630 <__adf_os_init_bh$isra$4>:
									  void 				*arg)
{
	__adf_os_init_defer(work, func, arg);
}

static inline void	__adf_os_init_bh(adf_os_handle_t  hdl,
  906630:	6c1004        	entry	a1, 32
									 __adf_os_bh_t		*bh,
									 adf_os_defer_fn_t	func,
									 void				*arg)
{
	//__adf_os_init_defer(bh, func, arg);
	A_TASKLET_INIT_TASK(func, arg, bh);
  906633:	187182        	l32r	a8, 8e2c3c <hif_module_install+0x68>
  906636:	da30      	mov.n	a10, a3
  906638:	28826a        	l32i	a8, a8, 0x1a8
  90663b:	db40      	mov.n	a11, a4
  90663d:	dc20      	mov.n	a12, a2
  90663f:	0b8000        	callx8	a8
  906642:	d10f      	retw.n

00906644 <__adf_os_sched_bh$isra$5>:
                                         __adf_os_work_t  * work)
{
    //taskqueue_drain(taskqueue_thread, &work->tsk);
}

static inline void __adf_os_sched_bh(adf_os_handle_t  hdl, 
  906644:	6c1004        	entry	a1, 32
                                       __adf_os_bh_t  * bh)
{
    A_TASKLET_SCHEDULE(bh);
  906647:	187182        	l32r	a8, 8e2c50 <hif_module_install+0x7c>
  90664a:	da20      	mov.n	a10, a2
  90664c:	28826c        	l32i	a8, a8, 0x1b0
  90664f:	0b8000        	callx8	a8
  906652:	d10f      	retw.n

00906654 <ath_hal_reg_write_filter$isra$10>:
#endif
		reset_pll = 1;
	}
}

static void ath_hal_reg_write_filter(struct ath_hal *ah,
  906654:	6c1004        	entry	a1, 32
			a_uint32_t reg, a_uint32_t val)
{
	if(reg > 0xffff) {
  906657:	18728c        	l32r	a8, 8e3088 <bSet_configuration+0x10c>
  90665a:	728b32        	bgeu	a8, a2, 906690 <ath_hal_reg_write_filter$isra$10+0x3c>
  90665d:	0c0200        	memw
  906660:	9320      	s32i.n	a3, a2, 0
		iowrite32(reg, val);
#if defined(PROJECT_K2)
		if(reg == 0x50040) {
  906662:	137210        	l32r	a3, 8e2ea4 <hif_module_install+0x2d0>
  906665:	732977        	bne	a2, a3, 9066e0 <ath_hal_reg_write_filter$isra$10+0x8c>
			static uint8_t flg=0;

			if(flg == 0) {
  906668:	12728d        	l32r	a2, 8e309c <bSet_configuration+0x120>
  90666b:	232000        	l8ui	a3, a2, 0
  90666e:	65306e        	bnez	a3, 9066e0 <ath_hal_reg_write_filter$isra$10+0x8c>
				/* reinit clock and uart.
				 * TODO: Independent on what host will
				 * here set. We do our own decision. Why? */
				A_CLOCK_INIT(117);
  906671:	137182        	l32r	a3, 8e2c7c <hif_module_install+0xa8>
  906674:	2a0a75        	movi	a10, 117
  906677:	283237        	l32i	a8, a3, 220
  90667a:	0b8000        	callx8	a8
				A_UART_HWINIT(117*1000*1000, 19200);
  90667d:	1a728e        	l32r	a10, 8e30b8 <bSet_configuration+0x13c>
  906680:	23321a        	l32i	a3, a3, 104
  906683:	1b7220        	l32r	a11, 8e2f04 <bGet_descriptor+0x40>
  906686:	0b3000        	callx8	a3
				flg = 1;
  906689:	c031      	movi.n	a3, 1
  90668b:	232400        	s8i	a3, a2, 0
  90668e:	d10f      	retw.n
			}
		}
#endif
	} else {
		if(reg == 0x7014)
  906690:	18728f        	l32r	a8, 8e30cc <bSet_configuration+0x150>
  906693:	78293e        	bne	a2, a8, 9066d5 <ath_hal_reg_write_filter$isra$10+0x81>

static void ath_pll_reset_ones(struct ath_hal *ah)
{
	static uint8_t reset_pll = 0;

	if(reset_pll == 0) {
  906696:	197290        	l32r	a9, 8e30d8 <bSet_configuration+0x15c>
  906699:	289000        	l8ui	a8, a9, 0
  90669c:	cf85      	bnez.n	a8, 9066d5 <ath_hal_reg_write_filter$isra$10+0x81>
  90669e:	1a720f        	l32r	a10, 8e2edc <bGet_descriptor+0x18>
#if defined(PROJECT_K2)
		/* here we write to core register */
		iowrite32(MAGPIE_REG_RST_PWDN_CTRL_ADDR, 0x0);
		/* and here to mac register */
		iowrite32_mac(0x786c,
  9066a1:	1b7292        	l32r	a11, 8e30ec <bSet_configuration+0x170>
  9066a4:	0c0200        	memw
  9066a7:	98a0      	s32i.n	a8, a10, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  9066a9:	187291        	l32r	a8, 8e30f0 <bSet_configuration+0x174>
  9066ac:	0c0200        	memw
  9066af:	8c80      	l32i.n	a12, a8, 0
  9066b1:	0bcb02        	or	a11, a12, a11
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9066b4:	0c0200        	memw
  9066b7:	9b80      	s32i.n	a11, a8, 0
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  9066b9:	0c0200        	memw
  9066bc:	8c80      	l32i.n	a12, a8, 0
			 ioread32_mac(0x786c) | 0x6000000);
		iowrite32_mac(0x786c,
  9066be:	1b7293        	l32r	a11, 8e310c <bSet_configuration+0x190>
  9066c1:	0bcb01        	and	a11, a12, a11
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  9066c4:	0c0200        	memw
  9066c7:	9b80      	s32i.n	a11, a8, 0
  9066c9:	c280      	movi.n	a8, 32
  9066cb:	0c0200        	memw
  9066ce:	98a0      	s32i.n	a8, a10, 0
		iowrite32_mac(0x7890,
			 ioread32_mac(0x7890) | 0x1800000);
		iowrite32_mac(0x7890,
			 ioread32_mac(0x7890) & (~0x1800000));
#endif
		reset_pll = 1;
  9066d0:	c081      	movi.n	a8, 1
  9066d2:	289400        	s8i	a8, a9, 0
#endif
	} else {
		if(reg == 0x7014)
			ath_pll_reset_ones(ah);

		iowrite32_mac(reg, val);
  9066d5:	18722b        	l32r	a8, 8e2f84 <bSet_configuration+0x8>
  9066d8:	a822      	add.n	a2, a2, a8
  9066da:	0c0200        	memw
  9066dd:	232600        	s32i	a3, a2, 0
  9066e0:	d10f      	retw.n
	...

009066e4 <ath_reg_read_filter>:

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static a_int32_t ath_reg_read_filter(struct ath_hal *ah, a_int32_t addr)
{
  9066e4:	6c1004        	entry	a1, 32
	if ((addr & 0xffffe000) == 0x2000) {
  9066e7:	197294        	l32r	a9, 8e3138 <bSet_configuration+0x1bc>
  9066ea:	18723b        	l32r	a8, 8e2fd8 <bSet_configuration+0x5c>
  9066ed:	093901        	and	a9, a3, a9
  9066f0:	789935        	bne	a9, a8, 906729 <ath_reg_read_filter+0x45>
		/* SEEPROM registers */
		ioread32_mac(addr);
  9066f3:	18722b        	l32r	a8, 8e2fa0 <bSet_configuration+0x24>
		if (!ath_hal_wait(ah, 0x407c, 0x00030000, 0))
  9066f6:	1b7295        	l32r	a11, 8e314c <bSet_configuration+0x1d0>

static a_int32_t ath_reg_read_filter(struct ath_hal *ah, a_int32_t addr)
{
	if ((addr & 0xffffe000) == 0x2000) {
		/* SEEPROM registers */
		ioread32_mac(addr);
  9066f9:	a838      	add.n	a8, a3, a8
		if (!ath_hal_wait(ah, 0x407c, 0x00030000, 0))
  9066fb:	1c7296        	l32r	a12, 8e3154 <bSet_configuration+0x1d8>
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  9066fe:	0c0200        	memw
  906701:	8880      	l32i.n	a8, a8, 0
  906703:	022a02        	or	a10, a2, a2
  906706:	2d0a00        	movi	a13, 0
  906709:	5bfa32        	call8	904fd4 <ath_hal_wait>
  90670c:	ccac      	bnez.n	a10, 90671c <ath_reg_read_filter+0x38>
			adf_os_print("SEEPROM Read fail: 0x%08x\n", addr);
  90670e:	127182        	l32r	a2, 8e2d18 <hif_module_install+0x144>
  906711:	1a7297        	l32r	a10, 8e3170 <bSet_configuration+0x1f4>
  906714:	222212        	l32i	a2, a2, 72
  906717:	db30      	mov.n	a11, a3
  906719:	0b2000        	callx8	a2
  90671c:	127298        	l32r	a2, 8e317c <bSet_configuration+0x200>
  90671f:	0c0200        	memw
  906722:	8220      	l32i.n	a2, a2, 0

		return ioread32_mac(0x407c) & 0x0000ffff;
  906724:	02024f        	extui	a2, a2, 0, 16
  906727:	d10f      	retw.n
	} else if (addr > 0xffff)
  906729:	12728c        	l32r	a2, 8e315c <bSet_configuration+0x1e0>
  90672c:	732a04        	bge	a2, a3, 906734 <ath_reg_read_filter+0x50>
  90672f:	600006        	j	906739 <ath_reg_read_filter+0x55>
  906732:	000012        	srai	a0, a0, 0
		/* SoC registers */
		return ioread32(addr);
	else
		/* MAC registers */
		return ioread32_mac(addr);
  906735:	722ba2        	bgeu	a2, a2, 9066db <ath_hal_reg_write_filter$isra$10+0x87>
  906738:	330c02        	excw
  90673b:	008230        	excw
}
  90673e:	d10f      	retw.n

00906740 <ath_desc_free>:

#undef DS2PHYS
}

static void ath_desc_free(struct ath_softc_tgt *sc)
{
  906740:	6c1004        	entry	a1, 32
	asf_tailq_insert_tail(&sc->sc_txbuf, sc->sc_txbuf_held, bf_list);
  906743:	2822dc        	l32i	a8, a2, 0x370
  906746:	2922f1        	l32i	a9, a2, 0x3c4
  906749:	c0d0      	movi.n	a13, 0
  90674b:	9d89      	s32i.n	a13, a8, 36
  90674d:	998a      	s32i.n	a9, a8, 40
  90674f:	9890      	s32i.n	a8, a9, 0
  906751:	2822dc        	l32i	a8, a2, 0x370

	sc->sc_txbuf_held = NULL;
  906754:	2d26dc        	s32i	a13, a2, 0x370
#undef DS2PHYS
}

static void ath_desc_free(struct ath_softc_tgt *sc)
{
	asf_tailq_insert_tail(&sc->sc_txbuf, sc->sc_txbuf_held, bf_list);
  906757:	288c24        	addi	a8, a8, 36
  90675a:	2826f1        	s32i	a8, a2, 0x3c4

	sc->sc_txbuf_held = NULL;

	if (sc->sc_txdma.dd_desc_len != 0)
  90675d:	2822e7        	l32i	a8, a2, 0x39c
  906760:	7d8110        	beq	a8, a13, 906774 <ath_desc_free+0x34>
		ath_descdma_cleanup(sc, &sc->sc_txdma, (ath_bufhead *)&sc->sc_txbuf,
  906763:	2b3a8c        	movi	a11, 0x38c
  906766:	2c3ac0        	movi	a12, 0x3c0
  906769:	da20      	mov.n	a10, a2
  90676b:	0b2b08        	add	a11, a2, a11
  90676e:	0c2c08        	add	a12, a2, a12
  906771:	5bff89        	call8	906598 <ath_descdma_cleanup>
				    ADF_OS_DMA_TO_DEVICE);
	if (sc->sc_rxdma.dd_desc_len != 0)
  906774:	2822e1        	l32i	a8, a2, 0x384
  906777:	c88f      	beqz.n	a8, 90678a <ath_desc_free+0x4a>
		ath_descdma_cleanup(sc, &sc->sc_rxdma, (ath_bufhead *)&sc->sc_rxbuf,
  906779:	2b3a74        	movi	a11, 0x374
  90677c:	2c3a54        	movi	a12, 0x354
  90677f:	da20      	mov.n	a10, a2
  906781:	ab2b      	add.n	a11, a2, a11
  906783:	ac2c      	add.n	a12, a2, a12
  906785:	c0d1      	movi.n	a13, 1
  906787:	5bff84        	call8	906598 <ath_descdma_cleanup>
  90678a:	d10f      	retw.n

0090678c <ath_descdma_setup$constprop$20>:

/***********************/
/* Descriptor Handling */
/***********************/

static a_int32_t ath_descdma_setup(struct ath_softc_tgt *sc,
  90678c:	6c1006        	entry	a1, 48
  90678f:	9210      	s32i.n	a2, a1, 0
	a_int32_t i, bsize, error;
	a_uint8_t *bf_addr;
	a_uint8_t *ds_addr;

	dd->dd_name = name;
	dd->dd_desc_len = descSize * nbuf * ndesc;
  906791:	821c      	l32i.n	a2, a1, 48
adf_os_dmamem_alloc(adf_os_device_t     osdev, 
                    adf_os_size_t       size, 
                    a_bool_t            coherent, 
                    adf_os_dma_map_t   *dmap)
{
    return __adf_os_dmamem_alloc(osdev, size, coherent, dmap);
  906793:	8810      	l32i.n	a8, a1, 0
  906795:	062b28        	mull	a11, a2, a6
  906798:	2a8246        	l32i	a10, a8, 0x118
	struct ath_buf *bf;
	a_int32_t i, bsize, error;
	a_uint8_t *bf_addr;
	a_uint8_t *ds_addr;

	dd->dd_name = name;
  90679b:	9530      	s32i.n	a5, a3, 0
	dd->dd_desc_len = descSize * nbuf * ndesc;
  90679d:	9b34      	s32i.n	a11, a3, 16
  90679f:	c0c1      	movi.n	a12, 1
  9067a1:	b83d      	addi.n	a13, a3, 8

/***********************/
/* Descriptor Handling */
/***********************/

static a_int32_t ath_descdma_setup(struct ath_softc_tgt *sc,
  9067a3:	271601        	s32i	a7, a1, 4
  9067a6:	5806c6        	call8	9082c0 <__adf_os_dmamem_alloc>
 * @return the (bus) address
 */
static inline adf_os_dma_addr_t
adf_os_dmamem_map2addr(adf_os_dma_map_t dmap)
{
    return(__adf_os_dmamem_map2addr(dmap));
  9067a9:	8532      	l32i.n	a5, a3, 8
	a_uint8_t *ds_addr;

	dd->dd_name = name;
	dd->dd_desc_len = descSize * nbuf * ndesc;

	dd->dd_desc = adf_os_dmamem_alloc(sc->sc_dev,
  9067ab:	9a31      	s32i.n	a10, a3, 4
				  dd->dd_desc_len, 1, &dd->dd_desc_dmamap);
	dd->dd_desc_paddr = adf_os_dmamem_map2addr(dd->dd_desc_dmamap);
  9067ad:	8551      	l32i.n	a5, a5, 4
  9067af:	9533      	s32i.n	a5, a3, 12
adf_os_dmamem_alloc(adf_os_device_t     osdev, 
                    adf_os_size_t       size, 
                    a_bool_t            coherent, 
                    adf_os_dma_map_t   *dmap)
{
    return __adf_os_dmamem_alloc(osdev, size, coherent, dmap);
  9067b1:	d2a0      	mov.n	a2, a10
	if (dd->dd_desc == NULL) {
  9067b3:	64a05e        	beqz	a10, 906815 <ath_descdma_setup$constprop$20+0x89>
		error = -ENOMEM;
		goto fail;
	}
	ds = dd->dd_desc;

	bsize = bfSize * nbuf;
  9067b6:	8811      	l32i.n	a8, a1, 4
  9067b8:	068728        	mull	a7, a8, a6
 * @return Buffer pointer or NULL if there's not enough memory.
 */
static inline void *
adf_os_mem_alloc(adf_os_size_t size)
{
    return __adf_os_mem_alloc(size);
  9067bb:	da70      	mov.n	a10, a7
  9067bd:	5bff09        	call8	9063e4 <__adf_os_mem_alloc>
  9067c0:	d5a0      	mov.n	a5, a10
	bf = adf_os_mem_alloc(bsize);
	if (bf == NULL) {
  9067c2:	64a04f        	beqz	a10, 906815 <ath_descdma_setup$constprop$20+0x89>
 * @param[in] size  buffer size
 */
static inline void
adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
    __adf_os_mem_set(buf, b, size);
  9067c5:	dc70      	mov.n	a12, a7
  9067c7:	c0b0      	movi.n	a11, 0
  9067c9:	5bff10        	call8	90640c <__adf_os_mem_set>
	dd->dd_bufptr = bf;

	bf_addr = (a_uint8_t *)bf;
	ds_addr = (a_uint8_t *)ds;

	asf_tailq_init(head);
  9067cc:	c090      	movi.n	a9, 0
	if (bf == NULL) {
		error = -ENOMEM;
		goto fail2;
	}
	adf_os_mem_set(bf, 0, bsize);
	dd->dd_bufptr = bf;
  9067ce:	9535      	s32i.n	a5, a3, 20

	bf_addr = (a_uint8_t *)bf;
	ds_addr = (a_uint8_t *)ds;

	asf_tailq_init(head);
  9067d0:	9940      	s32i.n	a9, a4, 0
  9067d2:	9441      	s32i.n	a4, a4, 4

	for (i = 0; i < nbuf; i++) {
  9067d4:	d790      	mov.n	a7, a9
  9067d6:	600035        	j	90680f <ath_descdma_setup$constprop$20+0x83>
  9067d9:	008810        	slli	a8, a8, 32
 */
static inline a_status_t
adf_nbuf_dmamap_create(adf_os_device_t osdev,
                       adf_os_dma_map_t *dmap)
{
    return (__adf_nbuf_dmamap_create(osdev, dmap));
  9067dc:	db50      	mov.n	a11, a5
  9067de:	2a8246        	l32i	a10, a8, 0x118
  9067e1:	5bf331        	call8	9034a8 <__adf_nbuf_dmamap_create>
  9067e4:	dba0      	mov.n	a11, a10
		a_int32_t j;

		if (adf_nbuf_dmamap_create( sc->sc_dev, &bf->bf_dmamap) != A_STATUS_OK) {
  9067e6:	ceab      	bnez.n	a10, 906815 <ath_descdma_setup$constprop$20+0x89>
			goto fail2;
		}

		bf->bf_desc = bf->bf_descarr = bf->bf_lastds = ds;
  9067e8:	925c      	s32i.n	a2, a5, 48
  9067ea:	925e      	s32i.n	a2, a5, 56
  9067ec:	925d      	s32i.n	a2, a5, 52
 * @param[in] head  buf queue head
 */
static inline void
adf_nbuf_queue_init(adf_nbuf_queue_t *head)
{
    __adf_nbuf_queue_init(head);
  9067ee:	2a5c14        	addi	a10, a5, 20
  9067f1:	9b12      	s32i.n	a11, a1, 8
  9067f3:	5bf3ab        	call8	9036a0 <__adf_nbuf_queue_init>
			ATH_BUF_SET_DESC_PHY_ADDR_WITH_IDX(bf, j, (ds_addr + (j*descSize)));

		ATH_BUF_SET_DESC_PHY_ADDR(bf, ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, 0));

		adf_nbuf_queue_init(&bf->bf_skbhead);
		asf_tailq_insert_tail(head, bf, bf_list);
  9067f6:	8a41      	l32i.n	a10, a4, 4
  9067f8:	8b12      	l32i.n	a11, a1, 8

		bf_addr += bfSize;
  9067fa:	8811      	l32i.n	a8, a1, 4
			ATH_BUF_SET_DESC_PHY_ADDR_WITH_IDX(bf, j, (ds_addr + (j*descSize)));

		ATH_BUF_SET_DESC_PHY_ADDR(bf, ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, 0));

		adf_nbuf_queue_init(&bf->bf_skbhead);
		asf_tailq_insert_tail(head, bf, bf_list);
  9067fc:	9a5a      	s32i.n	a10, a5, 40
  9067fe:	9b59      	s32i.n	a11, a5, 36
  906800:	95a0      	s32i.n	a5, a10, 0
  906802:	2a5c24        	addi	a10, a5, 36

		bf_addr += bfSize;
  906805:	a855      	add.n	a5, a5, a8
		ds_addr += (ndesc * descSize);
  906807:	881c      	l32i.n	a8, a1, 48
			ATH_BUF_SET_DESC_PHY_ADDR_WITH_IDX(bf, j, (ds_addr + (j*descSize)));

		ATH_BUF_SET_DESC_PHY_ADDR(bf, ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, 0));

		adf_nbuf_queue_init(&bf->bf_skbhead);
		asf_tailq_insert_tail(head, bf, bf_list);
  906809:	9a41      	s32i.n	a10, a4, 4

		bf_addr += bfSize;
		ds_addr += (ndesc * descSize);
  90680b:	a822      	add.n	a2, a2, a8
	bf_addr = (a_uint8_t *)bf;
	ds_addr = (a_uint8_t *)ds;

	asf_tailq_init(head);

	for (i = 0; i < nbuf; i++) {
  90680d:	b177      	addi.n	a7, a7, 1
  90680f:	7672c7        	blt	a7, a6, 9067da <ath_descdma_setup$constprop$20+0x4e>
  906812:	60000d        	j	906823 <ath_descdma_setup$constprop$20+0x97>
  906815:	da30      	mov.n	a10, a3
  906817:	2b0a00        	movi	a11, 0
  90681a:	2c0a18        	movi	a12, 24
  90681d:	5bfefb        	call8	90640c <__adf_os_mem_set>
  906820:	63fffc        	j	906820 <ath_descdma_setup$constprop$20+0x94>
	adf_os_mem_set(dd, 0, sizeof(*dd));
	adf_os_assert(0);
	return error;

#undef DS2PHYS
}
  906823:	c020      	movi.n	a2, 0
  906825:	d10f      	retw.n
	...

00906828 <tgt_HTCRecvMessageHandler>:
}

static void tgt_HTCRecvMessageHandler(HTC_ENDPOINT_ID EndPt,
				      adf_nbuf_t hdr_buf, adf_nbuf_t buf,
				      void *ServiceCtx)
{
  906828:	6c1006        	entry	a1, 48
	a_uint32_t len;
	ath_data_hdr_t *dh;
	struct ath_node_target *an;
	struct ath_atx_tid *tid;

	if (!hdr_buf) {
  90682b:	cd31      	bnez.n	a3, 906840 <tgt_HTCRecvMessageHandler+0x18>
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  90682d:	da40      	mov.n	a10, a4
  90682f:	b41b      	addi.n	a11, a1, 4
  906831:	dc10      	mov.n	a12, a1
  906833:	5bf395        	call8	903688 <__adf_nbuf_peek_header>
 *         or NULL if there is not sufficient data to pull.
 */
static inline a_uint8_t *
adf_nbuf_pull_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_pull_head(buf, size);
  906836:	da40      	mov.n	a10, a4
  906838:	c0bc      	movi.n	a11, 12
  90683a:	5bf2eb        	call8	9033e8 <__adf_nbuf_pull_head>
  90683d:	600008        	j	906849 <tgt_HTCRecvMessageHandler+0x21>
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  906840:	da30      	mov.n	a10, a3
  906842:	b41b      	addi.n	a11, a1, 4
  906844:	dc10      	mov.n	a12, a1
  906846:	5bf390        	call8	903688 <__adf_nbuf_peek_header>
		adf_nbuf_pull_head(buf, sizeof(ath_data_hdr_t));
	} else {
		adf_nbuf_peek_header(hdr_buf, &data, &len);
	}

	adf_os_assert(len >= sizeof(ath_data_hdr_t));
  906849:	8310      	l32i.n	a3, a1, 0
  90684b:	c06b      	movi.n	a6, 11
  90684d:	736305        	bltu	a6, a3, 906856 <tgt_HTCRecvMessageHandler+0x2e>
  906850:	63fffc        	j	906850 <tgt_HTCRecvMessageHandler+0x28>
  906853:	000000        	ill
	dh = (ath_data_hdr_t *)data;
  906856:	8311      	l32i.n	a3, a1, 4
	an = &sc->sc_sta[dh->ni_index];
	tid = ATH_AN_2_TID(an, dh->tidno);

	sc->sc_tx_stats.tx_tgt++;

	bf = ath_tgt_tx_prepare(sc, buf, dh);
  906858:	db40      	mov.n	a11, a4
	}

	adf_os_assert(len >= sizeof(ath_data_hdr_t));
	dh = (ath_data_hdr_t *)data;

	an = &sc->sc_sta[dh->ni_index];
  90685a:	283001        	l8ui	a8, a3, 1
	tid = ATH_AN_2_TID(an, dh->tidno);
  90685d:	293003        	l8ui	a9, a3, 3
	}

	adf_os_assert(len >= sizeof(ath_data_hdr_t));
	dh = (ath_data_hdr_t *)data;

	an = &sc->sc_sta[dh->ni_index];
  906860:	0a8611        	slli	a6, a8, 6
  906863:	a866      	add.n	a6, a6, a8
  906865:	086809        	addx2	a8, a6, a8
  906868:	265a30        	movi	a6, 0x530
  90686b:	06880a        	addx4	a8, a8, a6
	tid = ATH_AN_2_TID(an, dh->tidno);
  90686e:	0c9611        	slli	a6, a9, 4
	}

	adf_os_assert(len >= sizeof(ath_data_hdr_t));
	dh = (ath_data_hdr_t *)data;

	an = &sc->sc_sta[dh->ni_index];
  906871:	a858      	add.n	a8, a5, a8
	tid = ATH_AN_2_TID(an, dh->tidno);
  906873:	09660c        	sub	a6, a6, a9
  906876:	08660a        	addx4	a6, a6, a8

	sc->sc_tx_stats.tx_tgt++;
  906879:	28525b        	l32i	a8, a5, 0x16c

	bf = ath_tgt_tx_prepare(sc, buf, dh);
  90687c:	da50      	mov.n	a10, a5
	dh = (ath_data_hdr_t *)data;

	an = &sc->sc_sta[dh->ni_index];
	tid = ATH_AN_2_TID(an, dh->tidno);

	sc->sc_tx_stats.tx_tgt++;
  90687e:	b188      	addi.n	a8, a8, 1
  906880:	28565b        	s32i	a8, a5, 0x16c

	bf = ath_tgt_tx_prepare(sc, buf, dh);
  906883:	dc30      	mov.n	a12, a3
  906885:	580ca2        	call8	909b10 <ath_tgt_tx_prepare>

	adf_os_assert(len >= sizeof(ath_data_hdr_t));
	dh = (ath_data_hdr_t *)data;

	an = &sc->sc_sta[dh->ni_index];
	tid = ATH_AN_2_TID(an, dh->tidno);
  906888:	266c2c        	addi	a6, a6, 44

	sc->sc_tx_stats.tx_tgt++;

	bf = ath_tgt_tx_prepare(sc, buf, dh);
  90688b:	dba0      	mov.n	a11, a10
	if (!bf) {
  90688d:	ccaf      	bnez.n	a10, 9068a0 <tgt_HTCRecvMessageHandler+0x78>
		ath_free_tx_skb(sc->tgt_htc_handle,EndPt,buf);
  90688f:	137182        	l32r	a3, 8e2e98 <hif_module_install+0x2c4>
  906892:	8a52      	l32i.n	a10, a5, 8
  906894:	233287        	l32i	a3, a3, 0x21c
  906897:	db20      	mov.n	a11, a2
  906899:	dc40      	mov.n	a12, a4
  90689b:	0b3000        	callx8	a3
  90689e:	d10f      	retw.n
		return;
	}

	bf->bf_endpt = EndPt;
  9068a0:	22a623        	s32i	a2, a10, 140
	bf->bf_cookie = dh->cookie;
  9068a3:	22300a        	l8ui	a2, a3, 10
  9068a6:	22a492        	s8i	a2, a10, 146

	if (tid->flag & TID_AGGR_ENABLED)
  9068a9:	226036        	l8ui	a2, a6, 54
		ath_tgt_handle_aggr(sc, bf);
  9068ac:	da50      	mov.n	a10, a5
	}

	bf->bf_endpt = EndPt;
	bf->bf_cookie = dh->cookie;

	if (tid->flag & TID_AGGR_ENABLED)
  9068ae:	7e2707        	bbci	a2, 30, 9068b9 <tgt_HTCRecvMessageHandler+0x91>
		ath_tgt_handle_aggr(sc, bf);
  9068b1:	5810b1        	call8	90ab78 <ath_tgt_handle_aggr>
  9068b4:	d10f      	retw.n
  9068b6:	000000        	ill
	else
		ath_tgt_handle_normal(sc, bf);
  9068b9:	580e33        	call8	90a188 <ath_tgt_handle_normal>
  9068bc:	d10f      	retw.n
	...

009068c0 <tgt_HTCRecv_cabhandler>:
}

static void tgt_HTCRecv_cabhandler(HTC_ENDPOINT_ID EndPt, adf_nbuf_t hdr_buf,
				   adf_nbuf_t buf, void *ServiceCtx)
{
  9068c0:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)ServiceCtx;
	struct ath_hal *ah = sc->sc_ah;
  9068c3:	285d05        	addmi	a8, a5, 0x500
  9068c6:	8a8b      	l32i.n	a10, a8, 44
	a_uint64_t tsf;
	a_uint32_t tmp;

#ifdef ATH_ENABLE_CABQ
	tsf = ah->ah_getTsf64(ah);
  9068c8:	28a21e        	l32i	a8, a10, 120
  9068cb:	0b8000        	callx8	a8
	tmp = tsf - sc->sc_swba_tsf;
  9068ce:	285d16        	addmi	a8, a5, 0x1600
  9068d1:	888d      	l32i.n	a8, a8, 52

	if ( tmp > ATH_CABQ_HANDLING_THRESHOLD ) {
  9068d3:	197299        	l32r	a9, 8e3338 <bStandardCommand+0xac>
	a_uint64_t tsf;
	a_uint32_t tmp;

#ifdef ATH_ENABLE_CABQ
	tsf = ah->ah_getTsf64(ah);
	tmp = tsf - sc->sc_swba_tsf;
  9068d6:	08bb0c        	sub	a11, a11, a8

	if ( tmp > ATH_CABQ_HANDLING_THRESHOLD ) {
  9068d9:	7b9b11        	bgeu	a9, a11, 9068ee <tgt_HTCRecv_cabhandler+0x2e>
		HTC_ReturnBuffers(sc->tgt_htc_handle, EndPt, buf);
  9068dc:	137182        	l32r	a3, 8e2ee4 <bGet_descriptor+0x20>
  9068df:	8a52      	l32i.n	a10, a5, 8
  9068e1:	233287        	l32i	a3, a3, 0x21c
  9068e4:	db20      	mov.n	a11, a2
  9068e6:	044c02        	or	a12, a4, a4
  9068e9:	0b3000        	callx8	a3
  9068ec:	d10f      	retw.n
		return;
	}

	tgt_HTCRecvMessageHandler(EndPt, hdr_buf, buf, ServiceCtx);
  9068ee:	da20      	mov.n	a10, a2
  9068f0:	db30      	mov.n	a11, a3
  9068f2:	dc40      	mov.n	a12, a4
  9068f4:	dd50      	mov.n	a13, a5
  9068f6:	5bffcc        	call8	906828 <tgt_HTCRecvMessageHandler>
  9068f9:	d10f      	retw.n
	...

009068fc <ath_rxdesc_init>:
				       RX_HEADER_SPACE, align);
	return skb;
}

static a_int32_t ath_rxdesc_init(struct ath_softc_tgt *sc, struct ath_rx_desc *ds)
{
  9068fc:	6c1006        	entry	a1, 48
	struct ath_hal *ah = sc->sc_ah;
  9068ff:	242d05        	addmi	a4, a2, 0x500
  906902:	854b      	l32i.n	a5, a4, 44
	struct ath_rx_desc *ds_held;
	a_uint8_t *anbdata;
	a_uint32_t anblen;

	if (!sc->sc_rxdesc_held) {
  906904:	2422db        	l32i	a4, a2, 0x36c
		sc->sc_rxdesc_held = ds;
  906907:	2326db        	s32i	a3, a2, 0x36c
	struct ath_hal *ah = sc->sc_ah;
	struct ath_rx_desc *ds_held;
	a_uint8_t *anbdata;
	a_uint32_t anblen;

	if (!sc->sc_rxdesc_held) {
  90690a:	cc43      	bnez.n	a4, 906911 <ath_rxdesc_init+0x15>
  90690c:	60017c        	j	906a8c <ath_rxdesc_init+0x190>
  90690f:	000029        	excw

	ds_held = sc->sc_rxdesc_held;
	sc->sc_rxdesc_held = ds;
	ds = ds_held;

	if (ds->ds_nbuf == ADF_NBUF_NULL) {
  906912:	403428        	excw
  906915:	403523        	excw
  906918:	403608        	excw
  90691b:	9910      	s32i.n	a9, a1, 0
  90691d:	008811        	slli	a8, a8, 16
  906920:	098802        	or	a8, a8, a9
  906923:	083311        	slli	a3, a3, 8
  906926:	083302        	or	a3, a3, a8
  906929:	284037        	l8ui	a8, a4, 55
  90692c:	038302        	or	a3, a8, a3
  90692f:	6530b6        	bnez	a3, 9069e9 <ath_rxdesc_init+0xed>
static adf_nbuf_t ath_alloc_skb_align(struct ath_softc_tgt *sc,
				      a_uint32_t size, a_uint32_t align)
{
	adf_nbuf_t skb;

	skb = BUF_Pool_alloc_buf_align(sc->pool_handle, POOL_ID_WLAN_RX_BUF,
  906932:	137182        	l32r	a3, 8e2f3c <bGet_descriptor+0x78>
  906935:	8a20      	l32i.n	a10, a2, 0
  906937:	2332a2        	l32i	a3, a3, 0x288
  90693a:	2d2196        	l16ui	a13, a2, 0x12c
  90693d:	c3c0      	movi.n	a12, 48
  90693f:	c0b3      	movi.n	a11, 3
  906941:	0b3000        	callx8	a3
	ds_held = sc->sc_rxdesc_held;
	sc->sc_rxdesc_held = ds;
	ds = ds_held;

	if (ds->ds_nbuf == ADF_NBUF_NULL) {
		ds->ds_nbuf = ath_alloc_skb_align(sc, sc->sc_rxbufsize, sc->sc_cachelsz);
  906944:	0a8357        	extui	a3, a10, 24, 8
  906947:	234434        	s8i	a3, a4, 52
  90694a:	0a0357        	extui	a3, a10, 16, 8
  90694d:	234435        	s8i	a3, a4, 53
  906950:	0a8347        	extui	a3, a10, 8, 8
  906953:	234436        	s8i	a3, a4, 54
  906956:	2a4437        	s8i	a10, a4, 55
static adf_nbuf_t ath_alloc_skb_align(struct ath_softc_tgt *sc,
				      a_uint32_t size, a_uint32_t align)
{
	adf_nbuf_t skb;

	skb = BUF_Pool_alloc_buf_align(sc->pool_handle, POOL_ID_WLAN_RX_BUF,
  906959:	dca0      	mov.n	a12, a10
	sc->sc_rxdesc_held = ds;
	ds = ds_held;

	if (ds->ds_nbuf == ADF_NBUF_NULL) {
		ds->ds_nbuf = ath_alloc_skb_align(sc, sc->sc_rxbufsize, sc->sc_cachelsz);
		if (ds->ds_nbuf == ADF_NBUF_NULL) {
  90695b:	ccad      	bnez.n	a10, 90696c <ath_rxdesc_init+0x70>
			sc->sc_rxdesc_held = ds;
			sc->sc_rx_stats.ast_rx_nobuf++;
  90695d:	23227c        	l32i	a3, a2, 0x1f0
	ds = ds_held;

	if (ds->ds_nbuf == ADF_NBUF_NULL) {
		ds->ds_nbuf = ath_alloc_skb_align(sc, sc->sc_rxbufsize, sc->sc_cachelsz);
		if (ds->ds_nbuf == ADF_NBUF_NULL) {
			sc->sc_rxdesc_held = ds;
  906960:	2426db        	s32i	a4, a2, 0x36c
			sc->sc_rx_stats.ast_rx_nobuf++;
  906963:	b133      	addi.n	a3, a3, 1
  906965:	23267c        	s32i	a3, a2, 0x1f0
			return ENOMEM;
  906968:	c72f      	movi.n	a2, -1
  90696a:	d10f      	retw.n
		}
		adf_nbuf_map(sc->sc_dev, ds->ds_dmap, ds->ds_nbuf, ADF_OS_DMA_FROM_DEVICE);
  90696c:	294038        	l8ui	a9, a4, 56
  90696f:	284039        	l8ui	a8, a4, 57
  906972:	23403a        	l8ui	a3, a4, 58
  906975:	089910        	slli	a9, a9, 24
  906978:	008811        	slli	a8, a8, 16
  90697b:	098802        	or	a8, a8, a9
  90697e:	2b403b        	l8ui	a11, a4, 59
  906981:	083311        	slli	a3, a3, 8
  906984:	083302        	or	a3, a3, a8
adf_nbuf_map(adf_os_device_t        osdev, 
             adf_os_dma_map_t       bmap, 
             adf_nbuf_t             buf, 
             adf_os_dma_dir_t       dir)
{
    return __adf_nbuf_map(osdev, bmap, buf, dir);
  906987:	2a2246        	l32i	a10, a2, 0x118
  90698a:	03bb02        	or	a11, a11, a3
  90698d:	c0d1      	movi.n	a13, 1
  90698f:	5bf2cd        	call8	9034c4 <__adf_nbuf_map>
		adf_nbuf_dmamap_info(ds->ds_dmap, &ds->ds_dmap_info);
  906992:	294038        	l8ui	a9, a4, 56
  906995:	284039        	l8ui	a8, a4, 57
  906998:	23403a        	l8ui	a3, a4, 58
  90699b:	089910        	slli	a9, a9, 24
  90699e:	008811        	slli	a8, a8, 16
  9069a1:	098802        	or	a8, a8, a9
  9069a4:	2a403b        	l8ui	a10, a4, 59
  9069a7:	083311        	slli	a3, a3, 8
  9069aa:	083302        	or	a3, a3, a8
 * @param[out] sg   map info
 */
static inline void
adf_nbuf_dmamap_info(adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
    __adf_nbuf_dmamap_info(bmap, sg);
  9069ad:	03aa02        	or	a10, a10, a3
  9069b0:	2b4c3c        	addi	a11, a4, 60
  9069b3:	5bf2cc        	call8	9034e4 <__adf_nbuf_dmamap_info>
		ds->ds_data = ds->ds_dmap_info.dma_segs[0].paddr;
  9069b6:	294040        	l8ui	a9, a4, 64
  9069b9:	234041        	l8ui	a3, a4, 65
  9069bc:	284042        	l8ui	a8, a4, 66
  9069bf:	089910        	slli	a9, a9, 24
  9069c2:	003311        	slli	a3, a3, 16
  9069c5:	093302        	or	a3, a3, a9
  9069c8:	088811        	slli	a8, a8, 8
  9069cb:	038802        	or	a8, a8, a3
  9069ce:	234043        	l8ui	a3, a4, 67
  9069d1:	083802        	or	a8, a3, a8
  9069d4:	088357        	extui	a3, a8, 24, 8
  9069d7:	234404        	s8i	a3, a4, 4
  9069da:	080357        	extui	a3, a8, 16, 8
  9069dd:	234405        	s8i	a3, a4, 5
  9069e0:	088347        	extui	a3, a8, 8, 8
  9069e3:	234406        	s8i	a3, a4, 6
  9069e6:	284407        	s8i	a8, a4, 7
	}

	ds->ds_link = 0;
  9069e9:	c080      	movi.n	a8, 0
  9069eb:	284400        	s8i	a8, a4, 0
  9069ee:	284401        	s8i	a8, a4, 1
  9069f1:	284402        	s8i	a8, a4, 2
  9069f4:	284403        	s8i	a8, a4, 3
	adf_nbuf_peek_header(ds->ds_nbuf, &anbdata, &anblen);
  9069f7:	294034        	l8ui	a9, a4, 52
  9069fa:	284035        	l8ui	a8, a4, 53
  9069fd:	234036        	l8ui	a3, a4, 54
  906a00:	089910        	slli	a9, a9, 24
  906a03:	008811        	slli	a8, a8, 16
  906a06:	098802        	or	a8, a8, a9
  906a09:	2a4037        	l8ui	a10, a4, 55
  906a0c:	083311        	slli	a3, a3, 8
  906a0f:	083302        	or	a3, a3, a8
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  906a12:	03aa02        	or	a10, a10, a3
  906a15:	b41b      	addi.n	a11, a1, 4
  906a17:	dc10      	mov.n	a12, a1
  906a19:	5bf31b        	call8	903688 <__adf_nbuf_peek_header>

	ah->ah_setupRxDesc(ds, adf_nbuf_tailroom(ds->ds_nbuf), 0);
  906a1c:	2a4034        	l8ui	a10, a4, 52
  906a1f:	294035        	l8ui	a9, a4, 53
  906a22:	284036        	l8ui	a8, a4, 54
  906a25:	08aa10        	slli	a10, a10, 24
  906a28:	009911        	slli	a9, a9, 16
  906a2b:	0a9902        	or	a9, a9, a10
  906a2e:	088811        	slli	a8, a8, 8
  906a31:	2a4037        	l8ui	a10, a4, 55
  906a34:	098802        	or	a8, a8, a9
 * @return amount of tail room 
 */
static inline a_uint32_t
adf_nbuf_tailroom(adf_nbuf_t buf)
{
    return (__adf_nbuf_tailroom(buf));
  906a37:	08aa02        	or	a10, a10, a8
  906a3a:	235220        	l32i	a3, a5, 128
  906a3d:	5bf303        	call8	90364c <__adf_nbuf_tailroom>
  906a40:	dba0      	mov.n	a11, a10
  906a42:	c0c0      	movi.n	a12, 0
  906a44:	da40      	mov.n	a10, a4
  906a46:	0b3000        	callx8	a3
  906a49:	2a4048        	l8ui	a10, a4, 72
  906a4c:	294049        	l8ui	a9, a4, 73

	if (sc->sc_rxlink == NULL) {
		ah->ah_setRxDP(ah, ds->ds_daddr);
  906a4f:	08aa10        	slli	a10, a10, 24
  906a52:	009911        	slli	a9, a9, 16
  906a55:	0a9a02        	or	a10, a9, a10
  906a58:	29404a        	l8ui	a9, a4, 74
	ds->ds_link = 0;
	adf_nbuf_peek_header(ds->ds_nbuf, &anbdata, &anblen);

	ah->ah_setupRxDesc(ds, adf_nbuf_tailroom(ds->ds_nbuf), 0);

	if (sc->sc_rxlink == NULL) {
  906a5b:	2822ef        	l32i	a8, a2, 0x3bc
		ah->ah_setRxDP(ah, ds->ds_daddr);
  906a5e:	089911        	slli	a9, a9, 8
  906a61:	0a9902        	or	a9, a9, a10
	ds->ds_link = 0;
	adf_nbuf_peek_header(ds->ds_nbuf, &anbdata, &anblen);

	ah->ah_setupRxDesc(ds, adf_nbuf_tailroom(ds->ds_nbuf), 0);

	if (sc->sc_rxlink == NULL) {
  906a64:	cd81      	bnez.n	a8, 906a79 <ath_rxdesc_init+0x17d>
		ah->ah_setRxDP(ah, ds->ds_daddr);
  906a66:	2b404b        	l8ui	a11, a4, 75
  906a69:	23521f        	l32i	a3, a5, 124
  906a6c:	da50      	mov.n	a10, a5
  906a6e:	09bb02        	or	a11, a11, a9
  906a71:	0b3000        	callx8	a3
  906a74:	600009        	j	906a81 <ath_rxdesc_init+0x185>
  906a77:	000023        	excw
	}
	else {
		*sc->sc_rxlink = ds->ds_daddr;
  906a7a:	404b09        	excw
  906a7d:	390299        	excw
  906a80:	8024      	l32i.n	a0, a2, 16
	}
	sc->sc_rxlink = &ds->ds_link;
  906a82:	26ef22        	s32ri	a6, a14, 136
	ah->ah_enableReceive(ah);
  906a85:	5225da        	call0	8901f0 <_bss_end+0x3829e8>
  906a88:	500b20        	call0	90970c <ath_tx_freebuf+0x20>
  906a8b:	00c020        	excw

	return 0;
}
  906a8e:	d10f      	retw.n

00906a90 <tgt_HTCSendCompleteHandler>:
		asf_tailq_insert_tail(&sc->sc_rxdesc, ds_tmp, ds_list);
	}
}

static void tgt_HTCSendCompleteHandler(HTC_ENDPOINT_ID Endpt, adf_nbuf_t buf, void *ServiceCtx)
{
  906a90:	6c1006        	entry	a1, 48
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)ServiceCtx;

	if (Endpt == RX_ENDPOINT_ID) {
  906a93:	682302        	beqi	a2, 3, 906a99 <tgt_HTCSendCompleteHandler+0x9>
  906a96:	600124        	j	906bbe <tgt_HTCSendCompleteHandler+0x12e>
		sc->sc_rx_stats.ast_rx_done++;
  906a99:	22427e        	l32i	a2, a4, 0x1f8
}

static inline void
adf_nbuf_split_to_frag(adf_nbuf_t buf, adf_nbuf_queue_t *qhead)
{
    return __adf_nbuf_split_to_frag(buf, qhead);
  906a9c:	da30      	mov.n	a10, a3
  906a9e:	b122      	addi.n	a2, a2, 1
  906aa0:	22467e        	s32i	a2, a4, 0x1f8
  906aa3:	db10      	mov.n	a11, a1
  906aa5:	5bf2bb        	call8	903594 <__adf_nbuf_split_to_frag>
	struct ath_rx_desc *ds;
	adf_nbuf_t buf_tmp;
	adf_nbuf_queue_t nbuf_head;

	adf_nbuf_split_to_frag(buf, &nbuf_head);
	ds = asf_tailq_first(&sc->sc_rxdesc_idle);
  906aa8:	2242d7        	l32i	a2, a4, 0x35c

		if (buf_tmp == NULL) {
			break;
		}

		BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, buf_tmp);
  906aab:	137182        	l32r	a3, 8e30b4 <bSet_configuration+0x138>
  906aae:	600109        	j	906bbb <tgt_HTCSendCompleteHandler+0x12b>
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  906ab1:	da10      	mov.n	a10, a1
  906ab3:	5bf273        	call8	903480 <__adf_nbuf_queue_remove>
  906ab6:	dca0      	mov.n	a12, a10

	while (ds) {
		struct ath_rx_desc *ds_tmp;
		buf_tmp = adf_nbuf_queue_remove(&nbuf_head);

		if (buf_tmp == NULL) {
  906ab8:	64a102        	beqz	a10, 906bbe <tgt_HTCSendCompleteHandler+0x12e>
			break;
		}

		BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, buf_tmp);
  906abb:	2832a3        	l32i	a8, a3, 0x28c
  906abe:	8a40      	l32i.n	a10, a4, 0
  906ac0:	c0b3      	movi.n	a11, 3
  906ac2:	0b8000        	callx8	a8

		ds_tmp = ds;
		ds = asf_tailq_next(ds, ds_list);
  906ac5:	29204c        	l8ui	a9, a2, 76
  906ac8:	28204d        	l8ui	a8, a2, 77
  906acb:	25204e        	l8ui	a5, a2, 78
  906ace:	089910        	slli	a9, a9, 24
  906ad1:	008811        	slli	a8, a8, 16
  906ad4:	098802        	or	a8, a8, a9
  906ad7:	085511        	slli	a5, a5, 8
  906ada:	085502        	or	a5, a5, a8
  906add:	28204f        	l8ui	a8, a2, 79

		ath_rxdesc_init(sc, ds_tmp);
  906ae0:	044a02        	or	a10, a4, a4
  906ae3:	022b02        	or	a11, a2, a2
		}

		BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, buf_tmp);

		ds_tmp = ds;
		ds = asf_tailq_next(ds, ds_list);
  906ae6:	058502        	or	a5, a8, a5

		ath_rxdesc_init(sc, ds_tmp);
  906ae9:	5bff84        	call8	9068fc <ath_rxdesc_init>

		asf_tailq_remove(&sc->sc_rxdesc_idle, ds_tmp, ds_list);
  906aec:	2a204c        	l8ui	a10, a2, 76
  906aef:	29204d        	l8ui	a9, a2, 77
  906af2:	28204e        	l8ui	a8, a2, 78
  906af5:	08aa10        	slli	a10, a10, 24
  906af8:	009911        	slli	a9, a9, 16
  906afb:	0a9902        	or	a9, a9, a10
  906afe:	088811        	slli	a8, a8, 8
  906b01:	098802        	or	a8, a8, a9
  906b04:	29204f        	l8ui	a9, a2, 79
  906b07:	2a2051        	l8ui	a10, a2, 81
  906b0a:	089802        	or	a8, a9, a8
  906b0d:	292050        	l8ui	a9, a2, 80
  906b10:	00aa11        	slli	a10, a10, 16
  906b13:	089910        	slli	a9, a9, 24
  906b16:	09aa02        	or	a10, a10, a9
  906b19:	292052        	l8ui	a9, a2, 82
  906b1c:	089911        	slli	a9, a9, 8
  906b1f:	0a9902        	or	a9, a9, a10
  906b22:	c98e      	beqz.n	a8, 906b44 <tgt_HTCSendCompleteHandler+0xb4>
  906b24:	2a2053        	l8ui	a10, a2, 83
  906b27:	09a902        	or	a9, a10, a9
  906b2a:	098a57        	extui	a10, a9, 24, 8
  906b2d:	2a8450        	s8i	a10, a8, 80
  906b30:	090a57        	extui	a10, a9, 16, 8
  906b33:	2a8451        	s8i	a10, a8, 81
  906b36:	098a47        	extui	a10, a9, 8, 8
  906b39:	2a8452        	s8i	a10, a8, 82
  906b3c:	298453        	s8i	a9, a8, 83
  906b3f:	60000a        	j	906b4d <tgt_HTCSendCompleteHandler+0xbd>
  906b42:	000028        	mull	a0, a0, a0
  906b45:	205309        	excw
  906b48:	8902      	l32i.n	a9, a0, 8
  906b4a:	2946d8        	s32i	a9, a4, 0x360
  906b4d:	2a2050        	l8ui	a10, a2, 80
  906b50:	292051        	l8ui	a9, a2, 81
  906b53:	282052        	l8ui	a8, a2, 82
  906b56:	08aa10        	slli	a10, a10, 24
  906b59:	009911        	slli	a9, a9, 16
  906b5c:	0a9902        	or	a9, a9, a10
  906b5f:	088811        	slli	a8, a8, 8
  906b62:	098802        	or	a8, a8, a9
  906b65:	292053        	l8ui	a9, a2, 83
  906b68:	2b204c        	l8ui	a11, a2, 76
  906b6b:	2a204d        	l8ui	a10, a2, 77
  906b6e:	089802        	or	a8, a9, a8
  906b71:	29204e        	l8ui	a9, a2, 78
  906b74:	08bb10        	slli	a11, a11, 24
  906b77:	00aa11        	slli	a10, a10, 16
  906b7a:	0baa02        	or	a10, a10, a11
  906b7d:	089911        	slli	a9, a9, 8
  906b80:	0a9902        	or	a9, a9, a10
  906b83:	2a204f        	l8ui	a10, a2, 79
  906b86:	09a902        	or	a9, a10, a9
  906b89:	9980      	s32i.n	a9, a8, 0
		asf_tailq_insert_tail(&sc->sc_rxdesc, ds_tmp, ds_list);
  906b8b:	c080      	movi.n	a8, 0
  906b8d:	28244c        	s8i	a8, a2, 76
  906b90:	28244d        	s8i	a8, a2, 77
  906b93:	28244e        	s8i	a8, a2, 78
  906b96:	28244f        	s8i	a8, a2, 79
  906b99:	2842da        	l32i	a8, a4, 0x368
  906b9c:	088957        	extui	a9, a8, 24, 8
  906b9f:	292450        	s8i	a9, a2, 80
  906ba2:	080957        	extui	a9, a8, 16, 8
  906ba5:	292451        	s8i	a9, a2, 81
  906ba8:	088947        	extui	a9, a8, 8, 8
  906bab:	292452        	s8i	a9, a2, 82
  906bae:	282453        	s8i	a8, a2, 83
  906bb1:	9280      	s32i.n	a2, a8, 0
  906bb3:	222c4c        	addi	a2, a2, 76
  906bb6:	2246da        	s32i	a2, a4, 0x368
		}

		BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, buf_tmp);

		ds_tmp = ds;
		ds = asf_tailq_next(ds, ds_list);
  906bb9:	d250      	mov.n	a2, a5
	adf_nbuf_queue_t nbuf_head;

	adf_nbuf_split_to_frag(buf, &nbuf_head);
	ds = asf_tailq_first(&sc->sc_rxdesc_idle);

	while (ds) {
  906bbb:	652ef2        	bnez	a2, 906ab1 <tgt_HTCSendCompleteHandler+0x21>
  906bbe:	d10f      	retw.n

00906bc0 <wmi_event>:

}

void wmi_event(wmi_handle_t handle, WMI_EVENT_ID evt_id,
	       void *buffer, a_int32_t Length)
{
  906bc0:	6c1004        	entry	a1, 32
	adf_nbuf_t netbuf = ADF_NBUF_NULL;
	a_uint8_t *pData;

	netbuf = WMI_AllocEvent(handle, WMI_EVT_CLASS_CMD_EVENT,
  906bc3:	177182        	l32r	a7, 8e31cc <bSet_configuration+0x250>
  906bc6:	da20      	mov.n	a10, a2
  906bc8:	267292        	l32i	a6, a7, 0x248
  906bcb:	c0b0      	movi.n	a11, 0
  906bcd:	b45c      	addi.n	a12, a5, 4
  906bcf:	0b6000        	callx8	a6
  906bd2:	d6a0      	mov.n	a6, a10
				sizeof(WMI_CMD_HDR) + Length);

	if (netbuf == ADF_NBUF_NULL) {
  906bd4:	65a00a        	bnez	a10, 906be2 <wmi_event+0x22>
		adf_os_print("Buf null\n");
  906bd7:	227212        	l32i	a2, a7, 72
  906bda:	1a729a        	l32r	a10, 8e3644 <bStandardCommand+0x3b8>
  906bdd:	0b2000        	callx8	a2
  906be0:	d10f      	retw.n
		return;
	}

	if (buffer != NULL && Length != 0 && Length < WMI_SVC_MAX_BUFFERED_EVENT_SIZE) {
  906be2:	c952      	beqz.n	a5, 906bf8 <wmi_event+0x38>
  906be4:	c940      	beqz.n	a4, 906bf8 <wmi_event+0x38>
  906be6:	270a63        	movi	a7, 99
  906be9:	75720b        	blt	a7, a5, 906bf8 <wmi_event+0x38>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  906bec:	db50      	mov.n	a11, a5
  906bee:	5bf28a        	call8	903618 <__adf_nbuf_put_tail>
 * @param[in] size    buffer size
 */
static inline void
adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    __adf_os_mem_copy(dst, src, size);
  906bf1:	db40      	mov.n	a11, a4
  906bf3:	dc50      	mov.n	a12, a5
  906bf5:	5bfe00        	call8	9063f8 <__adf_os_mem_copy>
		pData = adf_nbuf_put_tail(netbuf, Length);
		adf_os_mem_copy(pData, buffer, Length);
	}

	WMI_SendEvent(handle, netbuf, evt_id, 0, Length);
  906bf8:	147182        	l32r	a4, 8e3200 <bSet_configuration+0x284>
  906bfb:	da20      	mov.n	a10, a2
  906bfd:	244293        	l32i	a4, a4, 0x24c
  906c00:	db60      	mov.n	a11, a6
  906c02:	030c4f        	extui	a12, a3, 0, 16
  906c05:	c0d0      	movi.n	a13, 0
  906c07:	de50      	mov.n	a14, a5
  906c09:	0b4000        	callx8	a4
  906c0c:	d10f      	retw.n
	...

00906c10 <ath_fatal_tasklet>:

	return ADF_OS_IRQ_HANDLED;
}

static void ath_fatal_tasklet(TQUEUE_ARG data )
{
  906c10:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)data;

	wmi_event(sc->tgt_wmi_handle, WMI_FATAL_EVENTID, NULL, 0);
  906c13:	c0c0      	movi.n	a12, 0
  906c15:	8a23      	l32i.n	a10, a2, 12
  906c17:	1b729b        	l32r	a11, 8e3684 <bStandardCommand+0x3f8>
  906c1a:	0ccd02        	or	a13, a12, a12
  906c1d:	5bffe8        	call8	906bc0 <wmi_event>
  906c20:	d10f      	retw.n
	...

00906c24 <ath_bmiss_tasklet>:
}

static void ath_bmiss_tasklet(TQUEUE_ARG data)
{
  906c24:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)data;

	wmi_event(sc->tgt_wmi_handle, WMI_BMISS_EVENTID, NULL, 0);
  906c27:	c0c0      	movi.n	a12, 0
  906c29:	8a23      	l32i.n	a10, a2, 12
  906c2b:	1b729c        	l32r	a11, 8e369c <bStandardCommand+0x410>
  906c2e:	0ccd02        	or	a13, a12, a12
  906c31:	5bffe3        	call8	906bc0 <wmi_event>
  906c34:	d10f      	retw.n
	...

00906c38 <ath_intr>:
/**********************/
/* Interrupt Handling */
/**********************/

adf_os_irq_resp_t ath_intr(adf_drv_handle_t hdl)
{
  906c38:	6c100a        	entry	a1, 80
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)hdl;
	struct ath_hal *ah = sc->sc_ah;
  906c3b:	232d05        	addmi	a3, a2, 0x500
  906c3e:	843b      	l32i.n	a4, a3, 44
	HAL_INT status;

	if (sc->sc_invalid)
  906c40:	252249        	l32i	a5, a2, 0x124
  906c43:	137244        	l32r	a3, 8e3554 <bStandardCommand+0x2c8>
  906c46:	035501        	and	a5, a5, a3
  906c49:	645004        	beqz	a5, 906c51 <ath_intr+0x19>
		return ADF_OS_IRQ_NONE;
  906c4c:	c030      	movi.n	a3, 0
  906c4e:	6006d2        	j	907324 <ath_intr+0x6ec>

	if (!ah->ah_isInterruptPending(ah))
  906c51:	234226        	l32i	a3, a4, 152
  906c54:	da40      	mov.n	a10, a4
  906c56:	0b3000        	callx8	a3
  906c59:	64afef        	beqz	a10, 906c4c <ath_intr+0x14>
		return ADF_OS_IRQ_NONE;

	ah->ah_getPendingInterrupts(ah, &status);
  906c5c:	234227        	l32i	a3, a4, 156
  906c5f:	044a02        	or	a10, a4, a4
  906c62:	2b1c18        	addi	a11, a1, 24
  906c65:	0b3000        	callx8	a3

	status &= sc->sc_imask;
  906c68:	8316      	l32i.n	a3, a1, 24
  906c6a:	2622c4        	l32i	a6, a2, 0x310
  906c6d:	036301        	and	a3, a6, a3
  906c70:	9316      	s32i.n	a3, a1, 24

	if (status & HAL_INT_FATAL) {
  906c72:	713617        	bbci	a3, 1, 906c8d <ath_intr+0x55>
		ah->ah_setInterrupts(ah, 0);
  906c75:	234228        	l32i	a3, a4, 160
  906c78:	db50      	mov.n	a11, a5
  906c7a:	044a02        	or	a10, a4, a4
  906c7d:	0b3000        	callx8	a3
 * @param[in] bh    bottom instance
 */
static inline void 
adf_os_sched_bh(adf_os_handle_t hdl, adf_os_bh_t *bh)
{
    __adf_os_sched_bh(hdl, bh);
  906c80:	2a3a44        	movi	a10, 0x344
  906c83:	aa2a      	add.n	a10, a2, a10
  906c85:	5bfe6f        	call8	906644 <__adf_os_sched_bh$isra$5>

		if (status & HAL_INT_CST)
			sc->sc_int_stats.ast_cst++;
	}

	return ADF_OS_IRQ_HANDLED;
  906c88:	c031      	movi.n	a3, 1
  906c8a:	600696        	j	907324 <ath_intr+0x6ec>

	if (status & HAL_INT_FATAL) {
		ah->ah_setInterrupts(ah, 0);
		ATH_SCHEDULE_TQUEUE(sc->sc_dev, &sc->sc_fataltq);
	} else {
		if (status & HAL_INT_SWBA) {
  906c8d:	7f3643        	bbci	a3, 15, 906cd4 <ath_intr+0x9c>
			WMI_SWBA_EVENT swbaEvt;
			struct ath_txq *txq = ATH_TXQ(sc, 8);

			swbaEvt.tsf = ah->ah_getTsf64(ah);
  906c90:	23421e        	l32i	a3, a4, 120
  906c93:	da40      	mov.n	a10, a4
  906c95:	0b3000        	callx8	a3
  906c98:	9a13      	s32i.n	a10, a1, 12
  906c9a:	9b14      	s32i.n	a11, a1, 16
			swbaEvt.beaconPendingCount = ah->ah_numTxPending(ah, sc->sc_bhalq);
  906c9c:	252d01        	addmi	a5, a2, 0x100
  906c9f:	834b      	l32i.n	a3, a4, 44
  906ca1:	2b501c        	l8ui	a11, a5, 28
  906ca4:	da40      	mov.n	a10, a4
  906ca6:	0b3000        	callx8	a3
			sc->sc_swba_tsf = ah->ah_getTsf64(ah);
  906ca9:	23421e        	l32i	a3, a4, 120
		if (status & HAL_INT_SWBA) {
			WMI_SWBA_EVENT swbaEvt;
			struct ath_txq *txq = ATH_TXQ(sc, 8);

			swbaEvt.tsf = ah->ah_getTsf64(ah);
			swbaEvt.beaconPendingCount = ah->ah_numTxPending(ah, sc->sc_bhalq);
  906cac:	2a1414        	s8i	a10, a1, 20
			sc->sc_swba_tsf = ah->ah_getTsf64(ah);
  906caf:	044a02        	or	a10, a4, a4
  906cb2:	0b3000        	callx8	a3
  906cb5:	232d16        	addmi	a3, a2, 0x1600
  906cb8:	9a3c      	s32i.n	a10, a3, 48
  906cba:	9b3d      	s32i.n	a11, a3, 52

			wmi_event(sc->tgt_wmi_handle,
  906cbc:	8a23      	l32i.n	a10, a2, 12
  906cbe:	1b729d        	l32r	a11, 8e3734 <bStandardCommand+0x4a8>
  906cc1:	bc1c      	addi.n	a12, a1, 12
  906cc3:	c0d9      	movi.n	a13, 9
  906cc5:	5bffbe        	call8	906bc0 <wmi_event>
	ah->ah_stopTxDma(ah, txq->axq_qnum);
}

static void owltgt_txq_drain(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	owltgt_tx_processq(sc, txq, OWL_TXQ_STOPPED);
  906cc8:	2b4acc        	movi	a11, 0x4cc
  906ccb:	da20      	mov.n	a10, a2
  906ccd:	ab2b      	add.n	a11, a2, a11
  906ccf:	c0c1      	movi.n	a12, 1
  906cd1:	580f66        	call8	90aa6c <owltgt_tx_processq>
				  sizeof(WMI_SWBA_EVENT));

			ath_tx_draintxq(sc, txq);
		}

		if (status & HAL_INT_RXORN)
  906cd4:	8316      	l32i.n	a3, a1, 24
  906cd6:	7a3707        	bbci	a3, 26, 906ce1 <ath_intr+0xa9>
			sc->sc_int_stats.ast_rxorn++;
  906cd9:	25224d        	l32i	a5, a2, 0x134
  906cdc:	b155      	addi.n	a5, a5, 1
  906cde:	25264d        	s32i	a5, a2, 0x134

		if (status & HAL_INT_RXEOL)
  906ce1:	7b3708        	bbci	a3, 27, 906ced <ath_intr+0xb5>
			sc->sc_int_stats.ast_rxeol++;
  906ce4:	25224e        	l32i	a5, a2, 0x138
  906ce7:	255c01        	addi	a5, a5, 1
  906cea:	25264e        	s32i	a5, a2, 0x138

		if (status & (HAL_INT_RX | HAL_INT_RXEOL | HAL_INT_RXORN)) {
  906ced:	c351      	movi.n	a5, 49
  906cef:	753802        	bany	a3, a5, 906cf5 <ath_intr+0xbd>
  906cf2:	6005e8        	j	9072de <ath_intr+0x6a6>
			if (status & HAL_INT_RX)
  906cf5:	7f3708        	bbci	a3, 31, 906d01 <ath_intr+0xc9>
				sc->sc_int_stats.ast_rx++;
  906cf8:	23224c        	l32i	a3, a2, 0x130
  906cfb:	233c01        	addi	a3, a3, 1
  906cfe:	23264c        	s32i	a3, a2, 0x130
	}
}

static void ath_uapsd_processtriggers(struct ath_softc_tgt *sc)
{
	struct ath_hal *ah = sc->sc_ah;
  906d01:	232d05        	addmi	a3, a2, 0x500
  906d04:	833b      	l32i.n	a3, a3, 44
  906d06:	9318      	s32i.n	a3, a1, 32

#define	PA2DESC(_sc, _pa)						\
	((struct ath_desc *)((caddr_t)(_sc)->sc_rxdma.dd_desc +		\
			     ((_pa) - (_sc)->sc_rxdma.dd_desc_paddr)))

	tsf = ah->ah_getTsf64(ah);
  906d08:	8a18      	l32i.n	a10, a1, 32
  906d0a:	23321e        	l32i	a3, a3, 120
  906d0d:	0b3000        	callx8	a3
	bf = asf_tailq_first(&sc->sc_rxbuf);

	ds = asf_tailq_first(&sc->sc_rxdesc);
  906d10:	2822d9        	l32i	a8, a2, 0x364
#define	PA2DESC(_sc, _pa)						\
	((struct ath_desc *)((caddr_t)(_sc)->sc_rxdma.dd_desc +		\
			     ((_pa) - (_sc)->sc_rxdma.dd_desc_paddr)))

	tsf = ah->ah_getTsf64(ah);
	bf = asf_tailq_first(&sc->sc_rxbuf);
  906d13:	2622d5        	l32i	a6, a2, 0x354

	ds = asf_tailq_first(&sc->sc_rxdesc);
	ds_head = ds;
  906d16:	d380      	mov.n	a3, a8
  906d18:	600371        	j	90708d <ath_intr+0x455>
  906d1b:	001972        	excw

	while(ds) {
		++cnt;

		if (cnt == ath_numrxbufs - 1) {
  906d1e:	9eb1      	s32i.n	a14, a11, 4

	ds = asf_tailq_first(&sc->sc_rxdesc);
	ds_head = ds;

	while(ds) {
		++cnt;
  906d20:	778a90        	bge	a8, a7, 906cb4 <ath_intr+0x7c>

		if (cnt == ath_numrxbufs - 1) {
  906d23:	b0aa      	addi.n	a10, a10, -1
  906d25:	7a7102        	beq	a7, a10, 906d2b <ath_intr+0xf3>
  906d28:	600251        	j	906f7d <ath_intr+0x345>
			adf_os_print("VERY LONG PACKET!!!!!\n");
  906d2b:	177182        	l32r	a7, 8e3334 <bStandardCommand+0xa8>
  906d2e:	1a729f        	l32r	a10, 8e37ac <bStandardCommand+0x520>
  906d31:	257212        	l32i	a5, a7, 72
  906d34:	981b      	s32i.n	a8, a1, 44
  906d36:	0b5000        	callx8	a5
			ds_tail = ds;
			ds_tmp = ds_head;
			while (ds_tmp) {
  906d39:	881b      	l32i.n	a8, a1, 44
  906d3b:	cd3e      	bnez.n	a3, 906d5d <ath_intr+0x125>
			if (status & HAL_INT_RX)
				sc->sc_int_stats.ast_rx++;

			ath_uapsd_processtriggers(sc);

			sc->sc_imask &= ~HAL_INT_RX;
  906d3d:	2322c4        	l32i	a3, a2, 0x310
  906d40:	c7be      	movi.n	a11, -2
  906d42:	03bb01        	and	a11, a11, a3
			ah->ah_setInterrupts(ah, sc->sc_imask);
  906d45:	234228        	l32i	a3, a4, 160
			if (status & HAL_INT_RX)
				sc->sc_int_stats.ast_rx++;

			ath_uapsd_processtriggers(sc);

			sc->sc_imask &= ~HAL_INT_RX;
  906d48:	2b26c4        	s32i	a11, a2, 0x310
			ah->ah_setInterrupts(ah, sc->sc_imask);
  906d4b:	da40      	mov.n	a10, a4
  906d4d:	0b3000        	callx8	a3
  906d50:	2a3a14        	movi	a10, 0x314
  906d53:	aa2a      	add.n	a10, a2, a10
  906d55:	5bfe3b        	call8	906644 <__adf_os_sched_bh$isra$5>
  906d58:	600582        	j	9072de <ath_intr+0x6a6>
  906d5b:	000029        	excw
			adf_os_print("VERY LONG PACKET!!!!!\n");
			ds_tail = ds;
			ds_tmp = ds_head;
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;
				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
  906d5e:	303826        	excw
  906d61:	303925        	excw
  906d64:	303a08        	excw
  906d67:	9910      	s32i.n	a9, a1, 0
  906d69:	006611        	slli	a6, a6, 16
  906d6c:	096602        	or	a6, a6, a9
  906d6f:	2b303b        	l8ui	a11, a3, 59
  906d72:	085511        	slli	a5, a5, 8
  906d75:	065502        	or	a5, a5, a6
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  906d78:	2a2246        	l32i	a10, a2, 0x118
  906d7b:	05bb02        	or	a11, a11, a5
  906d7e:	c0c1      	movi.n	a12, 1
  906d80:	981b      	s32i.n	a8, a1, 44
  906d82:	5bf1d3        	call8	9034d0 <__adf_nbuf_unmap>
				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  906d85:	29304c        	l8ui	a9, a3, 76
  906d88:	25304d        	l8ui	a5, a3, 77
  906d8b:	26304e        	l8ui	a6, a3, 78
  906d8e:	089910        	slli	a9, a9, 24
  906d91:	005511        	slli	a5, a5, 16
  906d94:	095502        	or	a5, a5, a9
  906d97:	086611        	slli	a6, a6, 8
  906d9a:	056602        	or	a6, a6, a5
  906d9d:	25304f        	l8ui	a5, a3, 79

				if (ds_tmp == NULL) {
  906da0:	881b      	l32i.n	a8, a1, 44
			ds_tmp = ds_head;
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;
				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  906da2:	065602        	or	a6, a5, a6

				if (ds_tmp == NULL) {
  906da5:	cc6b      	bnez.n	a6, 906db4 <ath_intr+0x17c>
					adf_os_print("ds_tmp is NULL\n");
  906da7:	227212        	l32i	a2, a7, 72
  906daa:	1a72a0        	l32r	a10, 8e382c <bStandardCommand+0x5a0>
  906dad:	0b2000        	callx8	a2
  906db0:	63fffc        	j	906db0 <ath_intr+0x178>
  906db3:	002a30        	excw
					adf_os_assert(0);
				}

				BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ds_rmv->ds_nbuf);
  906db6:	342530        	excw
  906db9:	352930        	excw
  906dbc:	3608aa        	excw
  906dbf:	100055        	l32r	a0, 8c6f14 <_bss_end+0x3b970c>
  906dc2:	110a55        	l32r	a1, 8c9718 <_bss_end+0x3bbf10>
  906dc5:	022c30        	excw
  906dc8:	370899        	excw
  906dcb:	110599        	l32r	a1, 8c8430 <_bss_end+0x3bac28>
  906dce:	028a20        	excw
  906dd1:	2572a3        	l32i	a5, a7, 0x28c
  906dd4:	09cc02        	or	a12, a12, a9
  906dd7:	981b      	s32i.n	a8, a1, 44
  906dd9:	c0b3      	movi.n	a11, 3
  906ddb:	0b5000        	callx8	a5
				ds_rmv->ds_nbuf = ADF_NBUF_NULL;
  906dde:	c050      	movi.n	a5, 0
  906de0:	253434        	s8i	a5, a3, 52
  906de3:	253435        	s8i	a5, a3, 53
  906de6:	253436        	s8i	a5, a3, 54
  906de9:	253437        	s8i	a5, a3, 55

				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  906dec:	da20      	mov.n	a10, a2
  906dee:	033b02        	or	a11, a3, a3
  906df1:	5bfec2        	call8	9068fc <ath_rxdesc_init>
  906df4:	29304d        	l8ui	a9, a3, 77
  906df7:	25304c        	l8ui	a5, a3, 76
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  906dfa:	009911        	slli	a9, a9, 16
  906dfd:	085510        	slli	a5, a5, 24
  906e00:	059902        	or	a9, a9, a5
  906e03:	25304e        	l8ui	a5, a3, 78
				}

				BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ds_rmv->ds_nbuf);
				ds_rmv->ds_nbuf = ADF_NBUF_NULL;

				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  906e06:	881b      	l32i.n	a8, a1, 44
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  906e08:	085511        	slli	a5, a5, 8
  906e0b:	095502        	or	a5, a5, a9
  906e0e:	29304f        	l8ui	a9, a3, 79
  906e11:	059502        	or	a5, a9, a5
  906e14:	293050        	l8ui	a9, a3, 80
				}

				BUF_Pool_free_buf(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ds_rmv->ds_nbuf);
				ds_rmv->ds_nbuf = ADF_NBUF_NULL;

				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  906e17:	65a0ad        	bnez	a10, 906ec8 <ath_intr+0x290>
  906e1a:	2a3051        	l8ui	a10, a3, 81
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  906e1d:	089910        	slli	a9, a9, 24
  906e20:	00aa11        	slli	a10, a10, 16
  906e23:	09aa02        	or	a10, a10, a9
  906e26:	293052        	l8ui	a9, a3, 82
  906e29:	089911        	slli	a9, a9, 8
  906e2c:	0a9902        	or	a9, a9, a10
  906e2f:	c95d      	beqz.n	a5, 906e50 <ath_intr+0x218>
  906e31:	2a3053        	l8ui	a10, a3, 83
  906e34:	09a902        	or	a9, a10, a9
  906e37:	098a57        	extui	a10, a9, 24, 8
  906e3a:	2a5450        	s8i	a10, a5, 80
  906e3d:	090a57        	extui	a10, a9, 16, 8
  906e40:	2a5451        	s8i	a10, a5, 81
  906e43:	098a47        	extui	a10, a9, 8, 8
  906e46:	2a5452        	s8i	a10, a5, 82
  906e49:	295453        	s8i	a9, a5, 83
  906e4c:	600009        	j	906e59 <ath_intr+0x221>
  906e4f:	002530        	excw
  906e52:	530959        	call0	8c93b8 <_bss_end+0x3bbbb0>
  906e55:	022926        	excw
  906e58:	da2a      	excw
  906e5a:	305029        	excw
  906e5d:	305125        	excw
  906e60:	305208        	excw
  906e63:	aa10      	add.n	a0, a1, a10
  906e65:	009911        	slli	a9, a9, 16
  906e68:	0a9902        	or	a9, a9, a10
  906e6b:	085511        	slli	a5, a5, 8
  906e6e:	095502        	or	a5, a5, a9
  906e71:	293053        	l8ui	a9, a3, 83
  906e74:	2b304c        	l8ui	a11, a3, 76
  906e77:	2a304d        	l8ui	a10, a3, 77
  906e7a:	059502        	or	a5, a9, a5
  906e7d:	29304e        	l8ui	a9, a3, 78
  906e80:	08bb10        	slli	a11, a11, 24
  906e83:	00aa11        	slli	a10, a10, 16
  906e86:	0baa02        	or	a10, a10, a11
  906e89:	089911        	slli	a9, a9, 8
  906e8c:	0a9902        	or	a9, a9, a10
  906e8f:	2a304f        	l8ui	a10, a3, 79
  906e92:	09a902        	or	a9, a10, a9
  906e95:	9950      	s32i.n	a9, a5, 0
					asf_tailq_insert_tail(&sc->sc_rxdesc, ds_rmv, ds_list);
  906e97:	c050      	movi.n	a5, 0
  906e99:	25344c        	s8i	a5, a3, 76
  906e9c:	25344d        	s8i	a5, a3, 77
  906e9f:	25344e        	s8i	a5, a3, 78
  906ea2:	25344f        	s8i	a5, a3, 79
  906ea5:	2522da        	l32i	a5, a2, 0x368
  906ea8:	058957        	extui	a9, a5, 24, 8
  906eab:	293450        	s8i	a9, a3, 80
  906eae:	050957        	extui	a9, a5, 16, 8
  906eb1:	293451        	s8i	a9, a3, 81
  906eb4:	058947        	extui	a9, a5, 8, 8
  906eb7:	253453        	s8i	a5, a3, 83
  906eba:	293452        	s8i	a9, a3, 82
  906ebd:	9350      	s32i.n	a3, a5, 0
  906ebf:	253c4c        	addi	a5, a3, 76
  906ec2:	2526da        	s32i	a5, a2, 0x368
  906ec5:	6000a9        	j	906f72 <ath_intr+0x33a>
  906ec8:	2a3051        	l8ui	a10, a3, 81
				}
				else {
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  906ecb:	089910        	slli	a9, a9, 24
  906ece:	00aa11        	slli	a10, a10, 16
  906ed1:	09aa02        	or	a10, a10, a9
  906ed4:	293052        	l8ui	a9, a3, 82
  906ed7:	089911        	slli	a9, a9, 8
  906eda:	0a9902        	or	a9, a9, a10
  906edd:	c95c      	beqz.n	a5, 906efd <ath_intr+0x2c5>
  906edf:	2a3053        	l8ui	a10, a3, 83
  906ee2:	09a902        	or	a9, a10, a9
  906ee5:	098a57        	extui	a10, a9, 24, 8
  906ee8:	2a5450        	s8i	a10, a5, 80
  906eeb:	090a57        	extui	a10, a9, 16, 8
  906eee:	2a5451        	s8i	a10, a5, 81
  906ef1:	098a47        	extui	a10, a9, 8, 8
  906ef4:	2a5452        	s8i	a10, a5, 82
  906ef7:	295453        	s8i	a9, a5, 83
  906efa:	600008        	j	906f06 <ath_intr+0x2ce>
  906efd:	253053        	l8ui	a5, a3, 83
  906f00:	095902        	or	a9, a5, a9
  906f03:	2926da        	s32i	a9, a2, 0x368
  906f06:	2a3050        	l8ui	a10, a3, 80
  906f09:	293051        	l8ui	a9, a3, 81
  906f0c:	253052        	l8ui	a5, a3, 82
  906f0f:	08aa10        	slli	a10, a10, 24
  906f12:	009911        	slli	a9, a9, 16
  906f15:	0a9902        	or	a9, a9, a10
  906f18:	085511        	slli	a5, a5, 8
  906f1b:	095502        	or	a5, a5, a9
  906f1e:	293053        	l8ui	a9, a3, 83
  906f21:	2b304c        	l8ui	a11, a3, 76
  906f24:	2a304d        	l8ui	a10, a3, 77
  906f27:	059502        	or	a5, a9, a5
  906f2a:	29304e        	l8ui	a9, a3, 78
  906f2d:	08bb10        	slli	a11, a11, 24
  906f30:	00aa11        	slli	a10, a10, 16
  906f33:	0baa02        	or	a10, a10, a11
  906f36:	089911        	slli	a9, a9, 8
  906f39:	0a9902        	or	a9, a9, a10
  906f3c:	2a304f        	l8ui	a10, a3, 79
  906f3f:	09a902        	or	a9, a10, a9
  906f42:	9950      	s32i.n	a9, a5, 0
					asf_tailq_insert_tail(&sc->sc_rxdesc_idle, ds_rmv, ds_list);
  906f44:	c050      	movi.n	a5, 0
  906f46:	25344c        	s8i	a5, a3, 76
  906f49:	25344d        	s8i	a5, a3, 77
  906f4c:	25344e        	s8i	a5, a3, 78
  906f4f:	25344f        	s8i	a5, a3, 79
  906f52:	2522d8        	l32i	a5, a2, 0x360
  906f55:	058957        	extui	a9, a5, 24, 8
  906f58:	293450        	s8i	a9, a3, 80
  906f5b:	050957        	extui	a9, a5, 16, 8
  906f5e:	293451        	s8i	a9, a3, 81
  906f61:	058947        	extui	a9, a5, 8, 8
  906f64:	253453        	s8i	a5, a3, 83
  906f67:	293452        	s8i	a9, a3, 82
  906f6a:	9350      	s32i.n	a3, a5, 0
  906f6c:	253c4c        	addi	a5, a3, 76
  906f6f:	2526d8        	s32i	a5, a2, 0x360
				}

				if (ds_rmv == ds_tail) {
  906f72:	783902        	bne	a3, a8, 906f78 <ath_intr+0x340>
  906f75:	63fdc4        	j	906d3d <ath_intr+0x105>
			ds_tmp = ds_head;
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;
				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  906f78:	d360      	mov.n	a3, a6
  906f7a:	63fddf        	j	906d5d <ath_intr+0x125>
				}
			}
			break;
		}

		if (ds->ds_link == 0) {
  906f7d:	2b8000        	l8ui	a11, a8, 0
  906f80:	2a8001        	l8ui	a10, a8, 1
  906f83:	2e8002        	l8ui	a14, a8, 2
  906f86:	08bb10        	slli	a11, a11, 24
  906f89:	00aa11        	slli	a10, a10, 16
  906f8c:	0baa02        	or	a10, a10, a11
  906f8f:	08ee11        	slli	a14, a14, 8
  906f92:	0aee02        	or	a14, a14, a10
  906f95:	2a8003        	l8ui	a10, a8, 3
  906f98:	0eae02        	or	a14, a10, a14
  906f9b:	64ed9e        	beqz	a14, 906d3d <ath_intr+0x105>
			break;
		}

		if (bf->bf_status & ATH_BUFSTATUS_DONE) {
  906f9e:	8a6f      	l32i.n	a10, a6, 60
  906fa0:	7fa702        	bbci	a10, 31, 906fa6 <ath_intr+0x36e>
  906fa3:	60032f        	j	9072d6 <ath_intr+0x69e>
			continue;
		}

		retval = ah->ah_procRxDescFast(ah, ds, ds->ds_daddr,
  906fa6:	2b8048        	l8ui	a11, a8, 72
  906fa9:	2a8049        	l8ui	a10, a8, 73
  906fac:	08bb10        	slli	a11, a11, 24
  906faf:	00aa11        	slli	a10, a10, 16
  906fb2:	0baa02        	or	a10, a10, a11
  906fb5:	2b804a        	l8ui	a11, a8, 74
						PA2DESC(sc, ds->ds_link), &bf->bf_rx_status);
  906fb8:	2d22de        	l32i	a13, a2, 0x378

		if (bf->bf_status & ATH_BUFSTATUS_DONE) {
			continue;
		}

		retval = ah->ah_procRxDescFast(ah, ds, ds->ds_daddr,
  906fbb:	08bb11        	slli	a11, a11, 8
  906fbe:	0ab902        	or	a9, a11, a10
						PA2DESC(sc, ds->ds_link), &bf->bf_rx_status);
  906fc1:	2a22e0        	l32i	a10, a2, 0x380

		if (bf->bf_status & ATH_BUFSTATUS_DONE) {
			continue;
		}

		retval = ah->ah_procRxDescFast(ah, ds, ds->ds_daddr,
  906fc4:	2c804b        	l8ui	a12, a8, 75
						PA2DESC(sc, ds->ds_link), &bf->bf_rx_status);
  906fc7:	0add0c        	sub	a13, a13, a10

		if (bf->bf_status & ATH_BUFSTATUS_DONE) {
			continue;
		}

		retval = ah->ah_procRxDescFast(ah, ds, ds->ds_daddr,
  906fca:	8a18      	l32i.n	a10, a1, 32
  906fcc:	db80      	mov.n	a11, a8
  906fce:	2fa222        	l32i	a15, a10, 136
  906fd1:	aedd      	add.n	a13, a13, a14
  906fd3:	981b      	s32i.n	a8, a1, 44
  906fd5:	09cc02        	or	a12, a12, a9
  906fd8:	2e6c40        	addi	a14, a6, 64
  906fdb:	0bf000        	callx8	a15
						PA2DESC(sc, ds->ds_link), &bf->bf_rx_status);
		if (HAL_EINPROGRESS == retval) {
  906fde:	c0bf      	movi.n	a11, 15
  906fe0:	881b      	l32i.n	a8, a1, 44
  906fe2:	7ba902        	bne	a10, a11, 906fe8 <ath_intr+0x3b0>
  906fe5:	63fd54        	j	906d3d <ath_intr+0x105>
			break;
		}

		if (adf_nbuf_len(ds->ds_nbuf) == 0) {
  906fe8:	2c8034        	l8ui	a12, a8, 52
  906feb:	2b8035        	l8ui	a11, a8, 53
  906fee:	2a8036        	l8ui	a10, a8, 54
  906ff1:	08cc10        	slli	a12, a12, 24
  906ff4:	00bb11        	slli	a11, a11, 16
  906ff7:	0cbb02        	or	a11, a11, a12
  906ffa:	08aa11        	slli	a10, a10, 8
  906ffd:	0baa02        	or	a10, a10, a11
  907000:	2b8037        	l8ui	a11, a8, 55
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  907003:	0aba02        	or	a10, a11, a10
  907006:	5bf198        	call8	903668 <__adf_nbuf_len>
  907009:	881b      	l32i.n	a8, a1, 44
  90700b:	cea5      	bnez.n	a10, 907034 <ath_intr+0x3fc>
			adf_nbuf_put_tail(ds->ds_nbuf, bf->bf_rx_status.rs_datalen);
  90700d:	2c8034        	l8ui	a12, a8, 52
  907010:	2b8035        	l8ui	a11, a8, 53
  907013:	2a8036        	l8ui	a10, a8, 54
  907016:	08cc10        	slli	a12, a12, 24
  907019:	00bb11        	slli	a11, a11, 16
  90701c:	0cbb02        	or	a11, a11, a12
  90701f:	08aa11        	slli	a10, a10, 8
  907022:	0baa02        	or	a10, a10, a11
  907025:	2b8037        	l8ui	a11, a8, 55
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  907028:	0aba02        	or	a10, a11, a10
  90702b:	2b6124        	l16ui	a11, a6, 72
  90702e:	5bf17a        	call8	903618 <__adf_nbuf_put_tail>
  907031:	28120b        	l32i	a8, a1, 44
		}

		frame_len += bf->bf_rx_status.rs_datalen;
  907034:	2a6124        	l16ui	a10, a6, 72

		if (bf->bf_rx_status.rs_more == 0) {
  907037:	2d6056        	l8ui	a13, a6, 86

		if (adf_nbuf_len(ds->ds_nbuf) == 0) {
			adf_nbuf_put_tail(ds->ds_nbuf, bf->bf_rx_status.rs_datalen);
		}

		frame_len += bf->bf_rx_status.rs_datalen;
  90703a:	aa55      	add.n	a5, a5, a10
  90703c:	05054f        	extui	a5, a5, 0, 16

		if (bf->bf_rx_status.rs_more == 0) {
  90703f:	65d275        	bnez	a13, 9072b8 <ath_intr+0x680>
 * @param[in] head  buf queue head
 */
static inline void
adf_nbuf_queue_init(adf_nbuf_queue_t *head)
{
    __adf_nbuf_queue_init(head);
  907042:	da10      	mov.n	a10, a1
  907044:	981b      	s32i.n	a8, a1, 44
  907046:	2d160a        	s32i	a13, a1, 40
  907049:	5bf195        	call8	9036a0 <__adf_nbuf_queue_init>
			adf_nbuf_queue_init(&nbuf_head);

			cnt = 0;

			ds_tail = ds;
			ds = asf_tailq_next(ds, ds_list);
  90704c:	881b      	l32i.n	a8, a1, 44
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;

				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				adf_nbuf_queue_add(&nbuf_head, ds_tmp->ds_nbuf);
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;
  90704e:	8d1a      	l32i.n	a13, a1, 40
			adf_nbuf_queue_init(&nbuf_head);

			cnt = 0;

			ds_tail = ds;
			ds = asf_tailq_next(ds, ds_list);
  907050:	2b804c        	l8ui	a11, a8, 76
  907053:	2a804d        	l8ui	a10, a8, 77
  907056:	27804e        	l8ui	a7, a8, 78
  907059:	08bb10        	slli	a11, a11, 24
  90705c:	00aa11        	slli	a10, a10, 16
  90705f:	0baa02        	or	a10, a10, a11
  907062:	087711        	slli	a7, a7, 8
  907065:	0a7702        	or	a7, a7, a10
  907068:	2a804f        	l8ui	a10, a8, 79
  90706b:	07aa02        	or	a10, a10, a7
  90706e:	9a19      	s32i.n	a10, a1, 36
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;

				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				adf_nbuf_queue_add(&nbuf_head, ds_tmp->ds_nbuf);
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;
  907070:	d7d0      	mov.n	a7, a13
			ds = asf_tailq_next(ds, ds_list);

			ds_tmp = ds_head;
			ds_head = asf_tailq_next(ds_tail, ds_list);

			while (ds_tmp) {
  907072:	cd3f      	bnez.n	a3, 907095 <ath_intr+0x45d>
					break;
				}
			}


			bf->bf_rx_status.rs_datalen = frame_len;
  907074:	256524        	s16i	a5, a6, 72
}

static inline adf_nbuf_t
adf_nbuf_create_frm_frag(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_create_frm_frag(head);
  907077:	da10      	mov.n	a10, a1
  907079:	5bf129        	call8	903520 <__adf_nbuf_create_frm_frag>
			frame_len = 0;

			bf->bf_skb = adf_nbuf_create_frm_frag(&nbuf_head);

			bf->bf_status |= ATH_BUFSTATUS_DONE;
  90707c:	856f      	l32i.n	a5, a6, 60
  90707e:	c031      	movi.n	a3, 1
  907080:	035302        	or	a3, a5, a3
  907083:	936f      	s32i.n	a3, a6, 60

			ds_tail = ds;
			ds = asf_tailq_next(ds, ds_list);

			ds_tmp = ds_head;
			ds_head = asf_tailq_next(ds_tail, ds_list);
  907085:	8319      	l32i.n	a3, a1, 36


			bf->bf_rx_status.rs_datalen = frame_len;
			frame_len = 0;

			bf->bf_skb = adf_nbuf_create_frm_frag(&nbuf_head);
  907087:	9a68      	s32i.n	a10, a6, 32

			bf->bf_status |= ATH_BUFSTATUS_DONE;

			bf = (struct ath_rx_buf *)asf_tailq_next(bf, bf_list);
  907089:	8669      	l32i.n	a6, a6, 36
			adf_nbuf_queue_init(&nbuf_head);

			cnt = 0;

			ds_tail = ds;
			ds = asf_tailq_next(ds, ds_list);
  90708b:	d830      	mov.n	a8, a3
				}
			}


			bf->bf_rx_status.rs_datalen = frame_len;
			frame_len = 0;
  90708d:	c050      	movi.n	a5, 0

		if (bf->bf_rx_status.rs_more == 0) {
			adf_nbuf_queue_t nbuf_head;
			adf_nbuf_queue_init(&nbuf_head);

			cnt = 0;
  90708f:	d750      	mov.n	a7, a5
  907091:	600241        	j	9072d6 <ath_intr+0x69e>
  907094:	002c30        	excw
			ds_head = asf_tailq_next(ds_tail, ds_list);

			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;

				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
  907097:	382a30        	excw
  90709a:	392b30        	excw
  90709d:	3a08cc        	excw
  9070a0:	1000aa        	l32r	a0, 8c7348 <_bss_end+0x3b9b40>
  9070a3:	110caa        	l32r	a1, 8ca34c <_bss_end+0x3bcb44>
  9070a6:	0208bb        	excw
  9070a9:	112c30        	l32r	a1, 8d216c <_bss_end+0x3c4964>
  9070ac:	3b0abb        	excw
  9070af:	022a22        	excw
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  9070b2:	460bcb        	excw
  9070b5:	02c0c1        	excw
  9070b8:	981b      	s32i.n	a8, a1, 44
  9070ba:	5bf105        	call8	9034d0 <__adf_nbuf_unmap>
				adf_nbuf_queue_add(&nbuf_head, ds_tmp->ds_nbuf);
  9070bd:	2c3034        	l8ui	a12, a3, 52
  9070c0:	2a3035        	l8ui	a10, a3, 53
  9070c3:	2b3036        	l8ui	a11, a3, 54
  9070c6:	08cc10        	slli	a12, a12, 24
  9070c9:	00aa11        	slli	a10, a10, 16
  9070cc:	0caa02        	or	a10, a10, a12
  9070cf:	08bb11        	slli	a11, a11, 8
  9070d2:	2c3037        	l8ui	a12, a3, 55
  9070d5:	0abb02        	or	a11, a11, a10
 * @param[in] buf   buf
 */
static inline void
adf_nbuf_queue_add(adf_nbuf_queue_t *head, adf_nbuf_t buf)
{
    __adf_nbuf_queue_add(head, buf);
  9070d8:	0bcb02        	or	a11, a12, a11
  9070db:	da10      	mov.n	a10, a1
  9070dd:	5bf0e0        	call8	903460 <__adf_nbuf_queue_add>
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;

				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  9070e0:	2b304c        	l8ui	a11, a3, 76
  9070e3:	2a304d        	l8ui	a10, a3, 77
  9070e6:	2c304e        	l8ui	a12, a3, 78
  9070e9:	08bb10        	slli	a11, a11, 24
  9070ec:	00aa11        	slli	a10, a10, 16
  9070ef:	0baa02        	or	a10, a10, a11
  9070f2:	08cc11        	slli	a12, a12, 8
  9070f5:	0acc02        	or	a12, a12, a10
  9070f8:	2a304f        	l8ui	a10, a3, 79
			while (ds_tmp) {
				struct ath_rx_desc *ds_rmv;

				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				adf_nbuf_queue_add(&nbuf_head, ds_tmp->ds_nbuf);
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;
  9070fb:	273434        	s8i	a7, a3, 52
  9070fe:	273435        	s8i	a7, a3, 53
  907101:	273436        	s8i	a7, a3, 54
  907104:	273437        	s8i	a7, a3, 55

				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  907107:	0cac02        	or	a12, a10, a12
				if (ds_tmp == NULL) {
  90710a:	881b      	l32i.n	a8, a1, 44
  90710c:	ccc1      	bnez.n	a12, 907111 <ath_intr+0x4d9>
  90710e:	63fffc        	j	90710e <ath_intr+0x4d6>
					adf_os_assert(0);
				}

				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  907111:	db30      	mov.n	a11, a3
  907113:	da20      	mov.n	a10, a2
  907115:	981b      	s32i.n	a8, a1, 44
  907117:	9c1a      	s32i.n	a12, a1, 40
  907119:	5bfdf8        	call8	9068fc <ath_rxdesc_init>
  90711c:	2e304c        	l8ui	a14, a3, 76
  90711f:	2b304d        	l8ui	a11, a3, 77
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  907122:	08ee10        	slli	a14, a14, 24
  907125:	00bb11        	slli	a11, a11, 16
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
				if (ds_tmp == NULL) {
					adf_os_assert(0);
				}

				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  907128:	881b      	l32i.n	a8, a1, 44
  90712a:	8c1a      	l32i.n	a12, a1, 40
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  90712c:	0ebb02        	or	a11, a11, a14
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
				if (ds_tmp == NULL) {
					adf_os_assert(0);
				}

				if (ath_rxdesc_init(sc, ds_rmv) == 0) {
  90712f:	65a0bd        	bnez	a10, 9071f0 <ath_intr+0x5b8>
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  907132:	2a304e        	l8ui	a10, a3, 78
  907135:	2e3051        	l8ui	a14, a3, 81
  907138:	08aa11        	slli	a10, a10, 8
  90713b:	0baa02        	or	a10, a10, a11
  90713e:	2b304f        	l8ui	a11, a3, 79
  907141:	00ee11        	slli	a14, a14, 16
  907144:	0aba02        	or	a10, a11, a10
  907147:	2b3050        	l8ui	a11, a3, 80
  90714a:	08bb10        	slli	a11, a11, 24
  90714d:	0bee02        	or	a14, a14, a11
  907150:	2b3052        	l8ui	a11, a3, 82
  907153:	08bb11        	slli	a11, a11, 8
  907156:	0ebb02        	or	a11, a11, a14
  907159:	c9ac      	beqz.n	a10, 907179 <ath_intr+0x541>
  90715b:	2e3053        	l8ui	a14, a3, 83
  90715e:	0beb02        	or	a11, a14, a11
  907161:	0b8e57        	extui	a14, a11, 24, 8
  907164:	2ea450        	s8i	a14, a10, 80
  907167:	0b0e57        	extui	a14, a11, 16, 8
  90716a:	2ea451        	s8i	a14, a10, 81
  90716d:	0b8e47        	extui	a14, a11, 8, 8
  907170:	2ea452        	s8i	a14, a10, 82
  907173:	2ba453        	s8i	a11, a10, 83
  907176:	600008        	j	907182 <ath_intr+0x54a>
  907179:	2a3053        	l8ui	a10, a3, 83
  90717c:	0bab02        	or	a11, a10, a11
  90717f:	2b26da        	s32i	a11, a2, 0x368
  907182:	2e3050        	l8ui	a14, a3, 80
  907185:	2b3051        	l8ui	a11, a3, 81
  907188:	2a3052        	l8ui	a10, a3, 82
  90718b:	08ee10        	slli	a14, a14, 24
  90718e:	00bb11        	slli	a11, a11, 16
  907191:	0ebb02        	or	a11, a11, a14
  907194:	08aa11        	slli	a10, a10, 8
  907197:	0baa02        	or	a10, a10, a11
  90719a:	2b3053        	l8ui	a11, a3, 83
  90719d:	2f304c        	l8ui	a15, a3, 76
  9071a0:	2e304d        	l8ui	a14, a3, 77
  9071a3:	0aba02        	or	a10, a11, a10
  9071a6:	2b304e        	l8ui	a11, a3, 78
  9071a9:	08ff10        	slli	a15, a15, 24
  9071ac:	00ee11        	slli	a14, a14, 16
  9071af:	0fee02        	or	a14, a14, a15
  9071b2:	08bb11        	slli	a11, a11, 8
  9071b5:	0ebb02        	or	a11, a11, a14
  9071b8:	2e304f        	l8ui	a14, a3, 79
  9071bb:	0beb02        	or	a11, a14, a11
  9071be:	9ba0      	s32i.n	a11, a10, 0
					asf_tailq_insert_tail(&sc->sc_rxdesc, ds_rmv, ds_list);
  9071c0:	27344c        	s8i	a7, a3, 76
  9071c3:	27344d        	s8i	a7, a3, 77
  9071c6:	27344e        	s8i	a7, a3, 78
  9071c9:	27344f        	s8i	a7, a3, 79
  9071cc:	2a22da        	l32i	a10, a2, 0x368
  9071cf:	0a8b57        	extui	a11, a10, 24, 8
  9071d2:	2b3450        	s8i	a11, a3, 80
  9071d5:	0a0b57        	extui	a11, a10, 16, 8
  9071d8:	2b3451        	s8i	a11, a3, 81
  9071db:	0a8b47        	extui	a11, a10, 8, 8
  9071de:	2a3453        	s8i	a10, a3, 83
  9071e1:	2b3452        	s8i	a11, a3, 82
  9071e4:	93a0      	s32i.n	a3, a10, 0
  9071e6:	2a3c4c        	addi	a10, a3, 76
  9071e9:	2a26da        	s32i	a10, a2, 0x368
  9071ec:	6000bb        	j	9072ab <ath_intr+0x673>
  9071ef:	002a30        	excw
				}  else {
					asf_tailq_remove(&sc->sc_rxdesc, ds_rmv, ds_list);
  9071f2:	4e2e30        	excw
  9071f5:	5108aa        	call0	9494a0 <_etext+0x3e607>
  9071f8:	110baa        	l32r	a1, 8ca0a0 <_bss_end+0x3bc898>
  9071fb:	022b30        	excw
  9071fe:	4f00ee        	excw
  907201:	110aba        	l32r	a1, 8c9cec <_bss_end+0x3bc4e4>
  907204:	022b30        	excw
  907207:	5008bb        	call0	9094f4 <ath_buf_toggle+0x70>
  90720a:	100bee        	l32r	a0, 8ca1c4 <_bss_end+0x3bc9bc>
  90720d:	022b30        	excw
  907210:	5208bb        	call0	889500 <_bss_end+0x37bcf8>
  907213:	110ebb        	l32r	a1, 8cad00 <_bss_end+0x3bd4f8>
  907216:	02c9ad        	excw
  907219:	2e3053        	l8ui	a14, a3, 83
  90721c:	0beb02        	or	a11, a14, a11
  90721f:	0b8e57        	extui	a14, a11, 24, 8
  907222:	2ea450        	s8i	a14, a10, 80
  907225:	0b0e57        	extui	a14, a11, 16, 8
  907228:	2ea451        	s8i	a14, a10, 81
  90722b:	0b8e47        	extui	a14, a11, 8, 8
  90722e:	2ea452        	s8i	a14, a10, 82
  907231:	2ba453        	s8i	a11, a10, 83
  907234:	600009        	j	907241 <ath_intr+0x609>
  907237:	002a30        	excw
  90723a:	530bab        	call0	8ca0e8 <_bss_end+0x3bc8e0>
  90723d:	022b26        	excw
  907240:	da2e      	excw
  907242:	30502b        	excw
  907245:	30512a        	excw
  907248:	305208        	excw
  90724b:	ee          	.byte 0xee
  90724c:	1000bb        	l32r	a0, 8c7538 <_bss_end+0x3b9d30>
  90724f:	110ebb        	l32r	a1, 8cad3c <_bss_end+0x3bd534>
  907252:	0208aa        	excw
  907255:	110baa        	l32r	a1, 8ca100 <_bss_end+0x3bc8f8>
  907258:	022b30        	excw
  90725b:	532f30        	call0	8d2f1c <_bss_end+0x3c5714>
  90725e:	4c2e30        	excw
  907261:	4d0aba        	excw
  907264:	022b30        	excw
  907267:	4e08ff        	excw
  90726a:	1000ee        	l32r	a0, 8c7624 <_bss_end+0x3b9e1c>
  90726d:	110fee        	l32r	a1, 8cb228 <_bss_end+0x3bda20>
  907270:	0208bb        	excw
  907273:	110ebb        	l32r	a1, 8cad60 <_bss_end+0x3bd558>
  907276:	022e30        	excw
  907279:	4f0beb        	excw
  90727c:	029ba0        	excw
					asf_tailq_insert_tail(&sc->sc_rxdesc_idle, ds_rmv, ds_list);
  90727f:	27344c        	s8i	a7, a3, 76
  907282:	27344d        	s8i	a7, a3, 77
  907285:	27344e        	s8i	a7, a3, 78
  907288:	27344f        	s8i	a7, a3, 79
  90728b:	2a22d8        	l32i	a10, a2, 0x360
  90728e:	0a8b57        	extui	a11, a10, 24, 8
  907291:	2b3450        	s8i	a11, a3, 80
  907294:	0a0b57        	extui	a11, a10, 16, 8
  907297:	2b3451        	s8i	a11, a3, 81
  90729a:	0a8b47        	extui	a11, a10, 8, 8
  90729d:	2a3453        	s8i	a10, a3, 83
  9072a0:	2b3452        	s8i	a11, a3, 82
  9072a3:	93a0      	s32i.n	a3, a10, 0
  9072a5:	2a3c4c        	addi	a10, a3, 76
  9072a8:	2a26d8        	s32i	a10, a2, 0x360
				}

				if (ds_rmv == ds_tail) {
  9072ab:	783902        	bne	a3, a8, 9072b1 <ath_intr+0x679>
  9072ae:	63fdc2        	j	907074 <ath_intr+0x43c>
				adf_nbuf_unmap(sc->sc_dev, ds_tmp->ds_dmap, ADF_OS_DMA_FROM_DEVICE);
				adf_nbuf_queue_add(&nbuf_head, ds_tmp->ds_nbuf);
				ds_tmp->ds_nbuf = ADF_NBUF_NULL;

				ds_rmv = ds_tmp;
				ds_tmp = asf_tailq_next(ds_tmp, ds_list);
  9072b1:	d3c0      	mov.n	a3, a12
  9072b3:	63fdde        	j	907095 <ath_intr+0x45d>
  9072b6:	00002c        	excw
			bf->bf_status |= ATH_BUFSTATUS_DONE;

			bf = (struct ath_rx_buf *)asf_tailq_next(bf, bf_list);
		}
		else {
			ds = asf_tailq_next(ds, ds_list);
  9072b9:	804c      	l32i.n	a0, a4, 48
  9072bb:	2b804d        	l8ui	a11, a8, 77
  9072be:	2a804e        	l8ui	a10, a8, 78
  9072c1:	08cc10        	slli	a12, a12, 24
  9072c4:	00bb11        	slli	a11, a11, 16
  9072c7:	0cbb02        	or	a11, a11, a12
  9072ca:	08aa11        	slli	a10, a10, 8
  9072cd:	28804f        	l8ui	a8, a8, 79
  9072d0:	0baa02        	or	a10, a10, a11
  9072d3:	0a8802        	or	a8, a8, a10
	bf = asf_tailq_first(&sc->sc_rxbuf);

	ds = asf_tailq_first(&sc->sc_rxdesc);
	ds_head = ds;

	while(ds) {
  9072d6:	658a42        	bnez	a8, 906d1c <ath_intr+0xe4>
  9072d9:	63fa60        	j	906d3d <ath_intr+0x105>
  9072dc:	000083        	excw
			ah->ah_setInterrupts(ah, sc->sc_imask);

			ATH_SCHEDULE_TQUEUE(sc->sc_dev, &sc->sc_rxtq);
		}

		if (status & HAL_INT_TXURN) {
  9072df:	167437        	l32r	a6, 8e43bc <vdesc_module_install+0x280>
  9072e2:	102322        	l32r	a0, 8cff6c <_bss_end+0x3c2764>
			sc->sc_int_stats.ast_txurn++;
  9072e5:	4fda40        	excw
  9072e8:	b133      	addi.n	a3, a3, 1
  9072ea:	23264f        	s32i	a3, a2, 0x13c
			ah->ah_updateTxTrigLevel(ah, AH_TRUE);
  9072ed:	8347      	l32i.n	a3, a4, 28
  9072ef:	c0b1      	movi.n	a11, 1
  9072f1:	0b3000        	callx8	a3
  9072f4:	2a5a1c        	movi	a10, 0x51c
  9072f7:	aa2a      	add.n	a10, a2, a10
  9072f9:	5bfcd2        	call8	906644 <__adf_os_sched_bh$isra$5>
		}

		ATH_SCHEDULE_TQUEUE(sc->sc_dev, &sc->sc_txtq);

		if (status & HAL_INT_BMISS) {
  9072fc:	8316      	l32i.n	a3, a1, 24
  9072fe:	7d3607        	bbci	a3, 13, 907309 <ath_intr+0x6d1>
  907301:	2a3a24        	movi	a10, 0x324
  907304:	aa2a      	add.n	a10, a2, a10
  907306:	5bfccf        	call8	906644 <__adf_os_sched_bh$isra$5>
			ATH_SCHEDULE_TQUEUE(sc->sc_dev, &sc->sc_bmisstq);
		}

		if (status & HAL_INT_GTT)
  907309:	8416      	l32i.n	a4, a1, 24
  90730b:	724607        	bbci	a4, 2, 907316 <ath_intr+0x6de>
			sc->sc_int_stats.ast_txto++;
  90730e:	232250        	l32i	a3, a2, 0x140
  907311:	b133      	addi.n	a3, a3, 1
  907313:	232650        	s32i	a3, a2, 0x140

		if (status & HAL_INT_CST)
			sc->sc_int_stats.ast_cst++;
	}

	return ADF_OS_IRQ_HANDLED;
  907316:	c031      	movi.n	a3, 1
		}

		if (status & HAL_INT_GTT)
			sc->sc_int_stats.ast_txto++;

		if (status & HAL_INT_CST)
  907318:	764608        	bbci	a4, 6, 907324 <ath_intr+0x6ec>
			sc->sc_int_stats.ast_cst++;
  90731b:	242251        	l32i	a4, a2, 0x144
  90731e:	034408        	add	a4, a4, a3
  907321:	242651        	s32i	a4, a2, 0x144
	}

	return ADF_OS_IRQ_HANDLED;
}
  907324:	d230      	mov.n	a2, a3
  907326:	d10f      	retw.n

00907328 <wmi_cmd_rsp>:
	WMI_SendEvent(handle, netbuf, evt_id, 0, Length);
}

void wmi_cmd_rsp(void *pContext, WMI_COMMAND_ID cmd_id, A_UINT16 SeqNo,
		 void *buffer, a_int32_t Length)
{
  907328:	6c1004        	entry	a1, 32
	adf_nbuf_t netbuf = ADF_NBUF_NULL;
	A_UINT8 *pData;

	netbuf = WMI_AllocEvent(pContext, WMI_EVT_CLASS_CMD_REPLY,
  90732b:	177182        	l32r	a7, 8e3934 <bStandardCommand+0x6a8>
  90732e:	da20      	mov.n	a10, a2
  907330:	277292        	l32i	a7, a7, 0x248
  907333:	2b0a01        	movi	a11, 1
  907336:	2c6c04        	addi	a12, a6, 4
  907339:	0b7000        	callx8	a7
	WMI_SendEvent(handle, netbuf, evt_id, 0, Length);
}

void wmi_cmd_rsp(void *pContext, WMI_COMMAND_ID cmd_id, A_UINT16 SeqNo,
		 void *buffer, a_int32_t Length)
{
  90733c:	04044f        	extui	a4, a4, 0, 16
	adf_nbuf_t netbuf = ADF_NBUF_NULL;
	A_UINT8 *pData;

	netbuf = WMI_AllocEvent(pContext, WMI_EVT_CLASS_CMD_REPLY,
  90733f:	d7a0      	mov.n	a7, a10
				sizeof(WMI_CMD_HDR) + Length);

	if (netbuf == ADF_NBUF_NULL) {
  907341:	cca1      	bnez.n	a10, 907346 <wmi_cmd_rsp+0x1e>
  907343:	63fffc        	j	907343 <wmi_cmd_rsp+0x1b>
		adf_os_assert(0);
		return;
	}

	if (Length != 0 && buffer != NULL) {
  907346:	c86e      	beqz.n	a6, 907358 <wmi_cmd_rsp+0x30>
  907348:	c85c      	beqz.n	a5, 907358 <wmi_cmd_rsp+0x30>
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  90734a:	066b02        	or	a11, a6, a6
  90734d:	5bf0b2        	call8	903618 <__adf_nbuf_put_tail>
  907350:	db50      	mov.n	a11, a5
  907352:	066c02        	or	a12, a6, a6
  907355:	5bfc28        	call8	9063f8 <__adf_os_mem_copy>
		pData = (A_UINT8 *)adf_nbuf_put_tail(netbuf, Length);
		adf_os_mem_copy(pData, buffer, Length);
	}

	WMI_SendEvent(pContext, netbuf, cmd_id, SeqNo, Length);
  907358:	157182        	l32r	a5, 8e3960 <bStandardCommand+0x6d4>
  90735b:	da20      	mov.n	a10, a2
  90735d:	255293        	l32i	a5, a5, 0x24c
  907360:	db70      	mov.n	a11, a7
  907362:	030c4f        	extui	a12, a3, 0, 16
  907365:	dd40      	mov.n	a13, a4
  907367:	de60      	mov.n	a14, a6
  907369:	0b5000        	callx8	a5
  90736c:	d10f      	retw.n
	...

00907370 <ath_hal_reg_rmw_tgt>:
}

static void ath_hal_reg_rmw_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data,
				a_int32_t datalen)
{
  907370:	6c1006        	entry	a1, 48
  907373:	03084f        	extui	a8, a3, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  907376:	232d05        	addmi	a3, a2, 0x500
  907379:	893b      	l32i.n	a9, a3, 44
}

static void ath_hal_reg_rmw_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data,
				a_int32_t datalen)
{
  90737b:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
	struct register_rmw *buf = (struct register_rmw *)data;
	int i;

	for (i = 0; i < datalen;
  90737e:	d750      	mov.n	a7, a5
	     i += sizeof(struct register_rmw)) {
		a_uint32_t val;
		buf = (struct register_rmw *)(data + i);

		val = ath_reg_read_filter(ah, buf->reg);
		val &= ~buf->clr;
  907380:	c73f      	movi.n	a3, -1
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
	struct register_rmw *buf = (struct register_rmw *)data;
	int i;

	for (i = 0; i < datalen;
  907382:	600022        	j	9073a8 <ath_hal_reg_rmw_tgt+0x38>
	     i += sizeof(struct register_rmw)) {
		a_uint32_t val;
		buf = (struct register_rmw *)(data + i);

		val = ath_reg_read_filter(ah, buf->reg);
  907385:	8b70      	l32i.n	a11, a7, 0
  907387:	da90      	mov.n	a10, a9
  907389:	9811      	s32i.n	a8, a1, 4
  90738b:	9910      	s32i.n	a9, a1, 0
  90738d:	5bfcd5        	call8	9066e4 <ath_reg_read_filter>
		val &= ~buf->clr;
  907390:	8c72      	l32i.n	a12, a7, 8
		val |= buf->set;
  907392:	8b71      	l32i.n	a11, a7, 4
	     i += sizeof(struct register_rmw)) {
		a_uint32_t val;
		buf = (struct register_rmw *)(data + i);

		val = ath_reg_read_filter(ah, buf->reg);
		val &= ~buf->clr;
  907394:	0c3c03        	xor	a12, a3, a12
  907397:	0cac01        	and	a12, a10, a12
		val |= buf->set;
		ath_hal_reg_write_filter(ah, buf->reg, val);
  90739a:	8a70      	l32i.n	a10, a7, 0
  90739c:	0bcb02        	or	a11, a12, a11
  90739f:	5bfcad        	call8	906654 <ath_hal_reg_write_filter$isra$10>
  9073a2:	8910      	l32i.n	a9, a1, 0
  9073a4:	8811      	l32i.n	a8, a1, 4
  9073a6:	bc77      	addi.n	a7, a7, 12
	}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_hal_reg_rmw_tgt(void *Context, A_UINT16 Command,
  9073a8:	057a0c        	sub	a10, a7, a5
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
	struct register_rmw *buf = (struct register_rmw *)data;
	int i;

	for (i = 0; i < datalen;
  9073ab:	76a2d6        	blt	a10, a6, 907385 <ath_hal_reg_rmw_tgt+0x15>
		val = ath_reg_read_filter(ah, buf->reg);
		val &= ~buf->clr;
		val |= buf->set;
		ath_hal_reg_write_filter(ah, buf->reg, val);
	}
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9073ae:	c0d0      	movi.n	a13, 0
  9073b0:	8a23      	l32i.n	a10, a2, 12
  9073b2:	db80      	mov.n	a11, a8
  9073b4:	dc40      	mov.n	a12, a4
  9073b6:	0dde02        	or	a14, a13, a13
  9073b9:	5bffdb        	call8	907328 <wmi_cmd_rsp>
  9073bc:	d10f      	retw.n
	...

009073c0 <ath_rc_mask_tgt>:
	adf_os_assert(0);
}

static void ath_rc_mask_tgt(void *Context, A_UINT16 Command,
			    A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  9073c0:	6c1004        	entry	a1, 32
	int idx, band, i;

	idx = wmi_data->vap_index;
	band = wmi_data->band;

	sc->sc_vap[idx].av_rate_mask[band] = adf_os_ntohl(wmi_data->mask);
  9073c3:	2e5002        	l8ui	a14, a5, 2
  9073c6:	2d5003        	l8ui	a13, a5, 3
  9073c9:	285004        	l8ui	a8, a5, 4
  9073cc:	08ee10        	slli	a14, a14, 24
  9073cf:	00dd11        	slli	a13, a13, 16
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_rate_mask_cmd *wmi_data = (struct wmi_rc_rate_mask_cmd *)buffer;
	int idx, band, i;

	idx = wmi_data->vap_index;
  9073d2:	295000        	l8ui	a9, a5, 0
	band = wmi_data->band;
  9073d5:	2a5001        	l8ui	a10, a5, 1

	sc->sc_vap[idx].av_rate_mask[band] = adf_os_ntohl(wmi_data->mask);
  9073d8:	0edd02        	or	a13, a13, a14
  9073db:	255005        	l8ui	a5, a5, 5
  9073de:	088811        	slli	a8, a8, 8
  9073e1:	0d8802        	or	a8, a8, a13
  9073e4:	085802        	or	a8, a5, a8
  9073e7:	0c9511        	slli	a5, a9, 4
  9073ea:	a955      	add.n	a5, a5, a9
  9073ec:	aa5e      	add.n	a14, a5, a10
  9073ee:	2d5a70        	movi	a13, 0x570
  9073f1:	aded      	add.n	a13, a14, a13
  9073f3:	02dd0a        	addx4	a13, a13, a2
  9073f6:	98d4      	s32i.n	a8, a13, 16
	adf_os_assert(0);
}

static void ath_rc_mask_tgt(void *Context, A_UINT16 Command,
			    A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  9073f8:	030b4f        	extui	a11, a3, 0, 16
  9073fb:	040c4f        	extui	a12, a4, 0, 16
	idx = wmi_data->vap_index;
	band = wmi_data->band;

	sc->sc_vap[idx].av_rate_mask[band] = adf_os_ntohl(wmi_data->mask);

	if (sc->sc_vap[idx].av_rate_mask[band]) {
  9073fe:	ca8a      	beqz.n	a8, 90742c <ath_rc_mask_tgt+0x6c>
  907400:	c050      	movi.n	a5, 0
		for (i = 0; i < RATE_TABLE_SIZE; i++) {
			if ((1 << i) & sc->sc_vap[idx].av_rate_mask[band]) {
  907402:	c0d1      	movi.n	a13, 1
  907404:	005104        	ssl	a5
  907407:	00de1a        	sll	a14, a13
  90740a:	78e014        	bnone	a14, a8, 907422 <ath_rc_mask_tgt+0x62>
				sc->sc_vap[idx].av_minrateidx[band] = i;
  90740d:	0c9811        	slli	a8, a9, 4
  907410:	a989      	add.n	a9, a8, a9
  907412:	02990a        	addx4	a9, a9, a2
  907415:	1872a1        	l32r	a8, 8e3e9c <mUsbEPinHighBandSet+0x18c>
  907418:	aa9a      	add.n	a10, a9, a10
  90741a:	a8aa      	add.n	a10, a10, a8
  90741c:	25a408        	s8i	a5, a10, 8
				break;
  90741f:	600016        	j	907439 <ath_rc_mask_tgt+0x79>
	band = wmi_data->band;

	sc->sc_vap[idx].av_rate_mask[band] = adf_os_ntohl(wmi_data->mask);

	if (sc->sc_vap[idx].av_rate_mask[band]) {
		for (i = 0; i < RATE_TABLE_SIZE; i++) {
  907422:	b155      	addi.n	a5, a5, 1
  907424:	695cdc        	bnei	a5, 32, 907404 <ath_rc_mask_tgt+0x44>
  907427:	60000e        	j	907439 <ath_rc_mask_tgt+0x79>
  90742a:	000002        	or	a0, a0, a0
				sc->sc_vap[idx].av_minrateidx[band] = i;
				break;
			}
		}
	} else {
		sc->sc_vap[idx].av_minrateidx[band] = 0;
  90742d:	550a19        	call4	949c94 <_etext+0x3edfb>
  907430:	72a1aa        	beq	a10, a2, 9073de <ath_rc_mask_tgt+0x1e>
  907433:	5aa9aa        	call8	8b1adc <_bss_end+0x3a42d4>
  907436:	28a408        	s8i	a8, a10, 8
	}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  907439:	c0d0      	movi.n	a13, 0
  90743b:	8a23      	l32i.n	a10, a2, 12
  90743d:	ded0      	mov.n	a14, a13
  90743f:	5bffba        	call8	907328 <wmi_cmd_rsp>
  907442:	d10f      	retw.n

00907444 <ath_rx_stats_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
}

static void ath_rx_stats_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
			     A_UINT8 *data, a_int32_t datalen)
{
  907444:	6c1006        	entry	a1, 48
		a_uint32_t   ast_rx_done;
	};

	struct fusion_stats stats;

	stats.ast_rx_nobuf = sc->sc_rx_stats.ast_rx_nobuf;
  907447:	28227c        	l32i	a8, a2, 0x1f0
	stats.ast_rx_send = sc->sc_rx_stats.ast_rx_send;
	stats.ast_rx_done = sc->sc_rx_stats.ast_rx_done;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  90744a:	8a23      	l32i.n	a10, a2, 12
		a_uint32_t   ast_rx_done;
	};

	struct fusion_stats stats;

	stats.ast_rx_nobuf = sc->sc_rx_stats.ast_rx_nobuf;
  90744c:	9810      	s32i.n	a8, a1, 0
	stats.ast_rx_send = sc->sc_rx_stats.ast_rx_send;
  90744e:	28227d        	l32i	a8, a2, 0x1f4
	stats.ast_rx_done = sc->sc_rx_stats.ast_rx_done;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  907451:	030b4f        	extui	a11, a3, 0, 16
	};

	struct fusion_stats stats;

	stats.ast_rx_nobuf = sc->sc_rx_stats.ast_rx_nobuf;
	stats.ast_rx_send = sc->sc_rx_stats.ast_rx_send;
  907454:	9811      	s32i.n	a8, a1, 4
	stats.ast_rx_done = sc->sc_rx_stats.ast_rx_done;
  907456:	28227e        	l32i	a8, a2, 0x1f8

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  907459:	040c4f        	extui	a12, a4, 0, 16
  90745c:	dd10      	mov.n	a13, a1
  90745e:	c0ec      	movi.n	a14, 12

	struct fusion_stats stats;

	stats.ast_rx_nobuf = sc->sc_rx_stats.ast_rx_nobuf;
	stats.ast_rx_send = sc->sc_rx_stats.ast_rx_send;
	stats.ast_rx_done = sc->sc_rx_stats.ast_rx_done;
  907460:	9812      	s32i.n	a8, a1, 8

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  907462:	5bffb1        	call8	907328 <wmi_cmd_rsp>
  907465:	d10f      	retw.n
	...

00907468 <ath_tx_stats_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
}

static void ath_tx_stats_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
			     A_UINT8 *data, a_int32_t datalen)
{
  907468:	6c100a        	entry	a1, 80
		a_uint32_t   tx_nobufs;
	};

	struct fusion_stats stats;

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
  90746b:	282252        	l32i	a8, a2, 0x148
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  90746e:	8a23      	l32i.n	a10, a2, 12
		a_uint32_t   tx_nobufs;
	};

	struct fusion_stats stats;

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
  907470:	9810      	s32i.n	a8, a1, 0
	stats.ast_tx_fifoerr = sc->sc_tx_stats.ast_tx_fifoerr;
  907472:	282253        	l32i	a8, a2, 0x14c
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  907475:	030b4f        	extui	a11, a3, 0, 16
	};

	struct fusion_stats stats;

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
	stats.ast_tx_fifoerr = sc->sc_tx_stats.ast_tx_fifoerr;
  907478:	9811      	s32i.n	a8, a1, 4
	stats.ast_tx_filtered = sc->sc_tx_stats.ast_tx_filtered;
  90747a:	282254        	l32i	a8, a2, 0x150
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  90747d:	040c4f        	extui	a12, a4, 0, 16

	struct fusion_stats stats;

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
	stats.ast_tx_fifoerr = sc->sc_tx_stats.ast_tx_fifoerr;
	stats.ast_tx_filtered = sc->sc_tx_stats.ast_tx_filtered;
  907480:	9812      	s32i.n	a8, a1, 8
	stats.ast_tx_timer_exp = sc->sc_tx_stats.ast_tx_timer_exp;
  907482:	282255        	l32i	a8, a2, 0x154
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  907485:	dd10      	mov.n	a13, a1
	struct fusion_stats stats;

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
	stats.ast_tx_fifoerr = sc->sc_tx_stats.ast_tx_fifoerr;
	stats.ast_tx_filtered = sc->sc_tx_stats.ast_tx_filtered;
	stats.ast_tx_timer_exp = sc->sc_tx_stats.ast_tx_timer_exp;
  907487:	9813      	s32i.n	a8, a1, 12
	stats.ast_tx_shortretry = sc->sc_tx_stats.ast_tx_shortretry;
  907489:	282256        	l32i	a8, a2, 0x158
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  90748c:	c2e4      	movi.n	a14, 36

	stats.ast_tx_xretries = sc->sc_tx_stats.ast_tx_xretries;
	stats.ast_tx_fifoerr = sc->sc_tx_stats.ast_tx_fifoerr;
	stats.ast_tx_filtered = sc->sc_tx_stats.ast_tx_filtered;
	stats.ast_tx_timer_exp = sc->sc_tx_stats.ast_tx_timer_exp;
	stats.ast_tx_shortretry = sc->sc_tx_stats.ast_tx_shortretry;
  90748e:	9814      	s32i.n	a8, a1, 16
	stats.ast_tx_longretry = sc->sc_tx_stats.ast_tx_longretry;
  907490:	282257        	l32i	a8, a2, 0x15c
  907493:	9815      	s32i.n	a8, a1, 20
	stats.tx_qnull = sc->sc_tx_stats.tx_qnull;
  907495:	28225c        	l32i	a8, a2, 0x170
  907498:	9816      	s32i.n	a8, a1, 24
	stats.tx_noskbs = sc->sc_tx_stats.tx_noskbs;
  90749a:	282276        	l32i	a8, a2, 0x1d8
  90749d:	9817      	s32i.n	a8, a1, 28
	stats.tx_nobufs = sc->sc_tx_stats.tx_nobufs;
  90749f:	282277        	l32i	a8, a2, 0x1dc
  9074a2:	281608        	s32i	a8, a1, 32

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  9074a5:	5bffa0        	call8	907328 <wmi_cmd_rsp>
  9074a8:	d10f      	retw.n
	...

009074ac <ath_int_stats_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_int_stats_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
			      A_UINT8 *data, a_int32_t datalen)
{
  9074ac:	6c1008        	entry	a1, 64
		a_uint32_t ast_cst;
	};

	struct fusion_stats stats;

	stats.ast_rx = sc->sc_int_stats.ast_rx;
  9074af:	28224c        	l32i	a8, a2, 0x130
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
	stats.ast_txto = sc->sc_int_stats.ast_txto;
	stats.ast_cst = sc->sc_int_stats.ast_cst;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  9074b2:	8a23      	l32i.n	a10, a2, 12
		a_uint32_t ast_cst;
	};

	struct fusion_stats stats;

	stats.ast_rx = sc->sc_int_stats.ast_rx;
  9074b4:	9810      	s32i.n	a8, a1, 0
	stats.ast_rxorn = sc->sc_int_stats.ast_rxorn;
  9074b6:	28224d        	l32i	a8, a2, 0x134
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
	stats.ast_txto = sc->sc_int_stats.ast_txto;
	stats.ast_cst = sc->sc_int_stats.ast_cst;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  9074b9:	030b4f        	extui	a11, a3, 0, 16
	};

	struct fusion_stats stats;

	stats.ast_rx = sc->sc_int_stats.ast_rx;
	stats.ast_rxorn = sc->sc_int_stats.ast_rxorn;
  9074bc:	9811      	s32i.n	a8, a1, 4
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
  9074be:	28224e        	l32i	a8, a2, 0x138
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
	stats.ast_txto = sc->sc_int_stats.ast_txto;
	stats.ast_cst = sc->sc_int_stats.ast_cst;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  9074c1:	040c4f        	extui	a12, a4, 0, 16

	struct fusion_stats stats;

	stats.ast_rx = sc->sc_int_stats.ast_rx;
	stats.ast_rxorn = sc->sc_int_stats.ast_rxorn;
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
  9074c4:	9812      	s32i.n	a8, a1, 8
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
  9074c6:	28224f        	l32i	a8, a2, 0x13c
	stats.ast_txto = sc->sc_int_stats.ast_txto;
	stats.ast_cst = sc->sc_int_stats.ast_cst;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  9074c9:	dd10      	mov.n	a13, a1
	struct fusion_stats stats;

	stats.ast_rx = sc->sc_int_stats.ast_rx;
	stats.ast_rxorn = sc->sc_int_stats.ast_rxorn;
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
  9074cb:	9813      	s32i.n	a8, a1, 12
	stats.ast_txto = sc->sc_int_stats.ast_txto;
  9074cd:	282250        	l32i	a8, a2, 0x140
	stats.ast_cst = sc->sc_int_stats.ast_cst;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  9074d0:	c1e8      	movi.n	a14, 24

	stats.ast_rx = sc->sc_int_stats.ast_rx;
	stats.ast_rxorn = sc->sc_int_stats.ast_rxorn;
	stats.ast_rxeol = sc->sc_int_stats.ast_rxeol;
	stats.ast_txurn = sc->sc_int_stats.ast_txurn;
	stats.ast_txto = sc->sc_int_stats.ast_txto;
  9074d2:	9814      	s32i.n	a8, a1, 16
	stats.ast_cst = sc->sc_int_stats.ast_cst;
  9074d4:	282251        	l32i	a8, a2, 0x144
  9074d7:	9815      	s32i.n	a8, a1, 20

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
  9074d9:	5bff93        	call8	907328 <wmi_cmd_rsp>
  9074dc:	d10f      	retw.n
	...

009074e0 <ath_node_update_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_update_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9074e0:	6c1004        	entry	a1, 32

	node->ni_htcap = adf_os_ntohs(node->ni_htcap);
	node->ni_flags = adf_os_ntohs(node->ni_flags);
	node->ni_maxampdu = adf_os_ntohs(node->ni_maxampdu);

	adf_os_mem_copy(&(sc->sc_sta[node_index].ni), node,
  9074e3:	29500c        	l8ui	a9, a5, 12
  9074e6:	265a30        	movi	a6, 0x530
  9074e9:	0a9711        	slli	a7, a9, 6
  9074ec:	a977      	add.n	a7, a7, a9
  9074ee:	097909        	addx2	a9, a7, a9
  9074f1:	0e9711        	slli	a7, a9, 2
  9074f4:	a67a      	add.n	a10, a7, a6
  9074f6:	aa2a      	add.n	a10, a2, a10
  9074f8:	db50      	mov.n	a11, a5
  9074fa:	b8aa      	addi.n	a10, a10, 8
  9074fc:	c1c6      	movi.n	a12, 22
  9074fe:	5bfbbe        	call8	9063f8 <__adf_os_mem_copy>
			NODE_TARGET_SIZE);

	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
  907501:	a728      	add.n	a8, a2, a7
	node->ni_maxampdu = adf_os_ntohs(node->ni_maxampdu);

	adf_os_mem_copy(&(sc->sc_sta[node_index].ni), node,
			NODE_TARGET_SIZE);

	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
  907503:	a686      	add.n	a6, a8, a6
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
  907505:	256015        	l8ui	a5, a6, 21
  907508:	275a50        	movi	a7, 0x550
  90750b:	0c5611        	slli	a6, a5, 4
  90750e:	a565      	add.n	a5, a6, a5
  907510:	1672a2        	l32r	a6, 8e3f98 <mUsbEPinHighBandSet+0x288>
  907513:	a787      	add.n	a7, a8, a7
  907515:	06550a        	addx4	a5, a5, a6
  907518:	a525      	add.n	a5, a2, a5
  90751a:	b855      	addi.n	a5, a5, 8
  90751c:	9572      	s32i.n	a5, a7, 8

	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
  90751e:	255a40        	movi	a5, 0x540
  907521:	a588      	add.n	a8, a8, a5
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
	sc->sc_sta[node_index].ni.ni_iv32 = 0;
  907523:	c0e0      	movi.n	a14, 0
			NODE_TARGET_SIZE);

	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);

	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
  907525:	c050      	movi.n	a5, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_update_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907527:	03034f        	extui	a3, a3, 0, 16
  90752a:	04044f        	extui	a4, a4, 0, 16

	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
	sc->sc_sta[node_index].ni.ni_iv32 = 0;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90752d:	8a23      	l32i.n	a10, a2, 12
			NODE_TARGET_SIZE);

	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);

	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
  90752f:	258508        	s16i	a5, a8, 16
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
  907532:	258509        	s16i	a5, a8, 18
	sc->sc_sta[node_index].ni.ni_iv32 = 0;
  907535:	9e85      	s32i.n	a14, a8, 20

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  907537:	db30      	mov.n	a11, a3
  907539:	dc40      	mov.n	a12, a4
  90753b:	dde0      	mov.n	a13, a14
  90753d:	5bff7a        	call8	907328 <wmi_cmd_rsp>
  907540:	d10f      	retw.n
	...

00907544 <ath_detach_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_detach_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
				 A_UINT8 *data, a_int32_t datalen)
{
  907544:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  907547:	252d05        	addmi	a5, a2, 0x500
  90754a:	855b      	l32i.n	a5, a5, 44

	ath_desc_free(sc);
  90754c:	022a02        	or	a10, a2, a2
  90754f:	5bfc7c        	call8	906740 <ath_desc_free>
	ah->ah_detach(ah);
  907552:	8856      	l32i.n	a8, a5, 24
  907554:	da50      	mov.n	a10, a5
  907556:	0b8000        	callx8	a8
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_detach_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
				 A_UINT8 *data, a_int32_t datalen)
{
  907559:	03034f        	extui	a3, a3, 0, 16
  90755c:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ath_desc_free(sc);
	ah->ah_detach(ah);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90755f:	c0d0      	movi.n	a13, 0
  907561:	8a23      	l32i.n	a10, a2, 12
  907563:	db30      	mov.n	a11, a3
  907565:	dc40      	mov.n	a12, a4
  907567:	ded0      	mov.n	a14, a13
  907569:	5bff6f        	call8	907328 <wmi_cmd_rsp>
  90756c:	d10f      	retw.n
	...

00907570 <ath_enable_aggr_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
}

static void ath_enable_aggr_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
				A_UINT8 *data, a_int32_t datalen)
{
  907570:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_aggr_info *aggr = (struct ath_aggr_info *)data;
	a_uint8_t nodeindex = aggr->nodeindex;
  907573:	2d5000        	l8ui	a13, a5, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
}

static void ath_enable_aggr_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
				A_UINT8 *data, a_int32_t datalen)
{
  907576:	03034f        	extui	a3, a3, 0, 16
  907579:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_aggr_info *aggr = (struct ath_aggr_info *)data;
	a_uint8_t nodeindex = aggr->nodeindex;
	a_uint8_t tidno = aggr->tidno;
  90757c:	285001        	l8ui	a8, a5, 1
	struct ath_node_target *an = NULL ;
	struct ath_atx_tid  *tid = NULL;

	if (nodeindex >= TARGET_NODE_MAX) {
  90757f:	6fd866        	bgeui	a13, 8, 9075e9 <ath_enable_aggr_tgt+0x79>
		goto done;
	}

	an = &sc->sc_sta[nodeindex];
  907582:	0adb11        	slli	a11, a13, 6
  907585:	adbb      	add.n	a11, a11, a13
  907587:	295a30        	movi	a9, 0x530
  90758a:	0dbb09        	addx2	a11, a11, a13
  90758d:	09bb0a        	addx4	a11, a11, a9
  907590:	ab2b      	add.n	a11, a2, a11
  907592:	b8bb      	addi.n	a11, a11, 8
	if (!an->an_valid) {
  907594:	29bd02        	addmi	a9, a11, 0x200
  907597:	299004        	l8ui	a9, a9, 4
  90759a:	64904b        	beqz	a9, 9075e9 <ath_enable_aggr_tgt+0x79>
		goto done;
	}

	if (tidno >= WME_NUM_TID) {
  90759d:	6e8813        	bltui	a8, 8, 9075b4 <ath_enable_aggr_tgt+0x44>
		adf_os_print("[%s] enable_aggr with invalid tid %d(node = %d)\n",
  9075a0:	157182        	l32r	a5, 8e3ba8 <bStandardCommand+0x91c>
  9075a3:	1b72a4        	l32r	a11, 8e4034 <mUsbEPinHighBandSet+0x324>
  9075a6:	255212        	l32i	a5, a5, 72
  9075a9:	1a72a3        	l32r	a10, 8e4038 <mUsbEPinHighBandSet+0x328>
  9075ac:	dc80      	mov.n	a12, a8
  9075ae:	0b5000        	callx8	a5
			     __FUNCTION__, tidno, nodeindex);
		goto done;
  9075b1:	600034        	j	9075e9 <ath_enable_aggr_tgt+0x79>
	}

	tid = ATH_AN_2_TID(an, tidno);
  9075b4:	0c8c11        	slli	a12, a8, 4
  9075b7:	08cc0c        	sub	a12, a12, a8

	if (aggr->aggr_enable) {
  9075ba:	255002        	l8ui	a5, a5, 2
		adf_os_print("[%s] enable_aggr with invalid tid %d(node = %d)\n",
			     __FUNCTION__, tidno, nodeindex);
		goto done;
	}

	tid = ATH_AN_2_TID(an, tidno);
  9075bd:	0bcc0a        	addx4	a12, a12, a11
  9075c0:	2ccc24        	addi	a12, a12, 36
  9075c3:	c082      	movi.n	a8, 2

	if (aggr->aggr_enable) {
  9075c5:	c85b      	beqz.n	a5, 9075d4 <ath_enable_aggr_tgt+0x64>
		tid->flag |= TID_AGGR_ENABLED;
  9075c7:	25c036        	l8ui	a5, a12, 54
  9075ca:	085802        	or	a8, a5, a8
  9075cd:	28c436        	s8i	a8, a12, 54
  9075d0:	600015        	j	9075e9 <ath_enable_aggr_tgt+0x79>
  9075d3:	0025c0        	excw
	} else if ( tid->flag & TID_AGGR_ENABLED ) {
  9075d6:	367850        	excw
  9075d9:	0ec78d        	excw
		tid->flag &= ~TID_AGGR_ENABLED;
  9075dc:	085501        	and	a5, a5, a8
  9075df:	25c436        	s8i	a5, a12, 54
		ath_tgt_tx_cleanup(sc, an, tid, 1);
  9075e2:	da20      	mov.n	a10, a2
  9075e4:	c0d1      	movi.n	a13, 1
  9075e6:	580d81        	call8	90abec <ath_tgt_tx_cleanup>
	}
done:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9075e9:	c0d0      	movi.n	a13, 0
  9075eb:	8a23      	l32i.n	a10, a2, 12
  9075ed:	db30      	mov.n	a11, a3
  9075ef:	dc40      	mov.n	a12, a4
  9075f1:	ded0      	mov.n	a14, a13
  9075f3:	5bff4d        	call8	907328 <wmi_cmd_rsp>
  9075f6:	d10f      	retw.n

009075f8 <ath_ic_update_tgt>:
}

static void ath_ic_update_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
			      A_UINT8 *data, a_int32_t datalen)
{
  9075f8:	6c1004        	entry	a1, 32
  9075fb:	1a72a5        	l32r	a10, 8e4090 <vbuf_module_install+0x4>
  9075fe:	db50      	mov.n	a11, a5
  907600:	0a2a08        	add	a10, a2, a10
  907603:	c0c8      	movi.n	a12, 8
  907605:	5bfb7c        	call8	9063f8 <__adf_os_mem_copy>
	struct ieee80211com_target *ic = (struct ieee80211com_target * )data;
	struct ieee80211com_target *ictgt = &sc->sc_ic ;

	adf_os_mem_copy(ictgt, ic, sizeof(struct  ieee80211com_target));

	ictgt->ic_ampdu_limit         = adf_os_ntohl(ic->ic_ampdu_limit);
  907608:	8850      	l32i.n	a8, a5, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_ic_update_tgt(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
			      A_UINT8 *data, a_int32_t datalen)
{
  90760a:	03034f        	extui	a3, a3, 0, 16
  90760d:	04044f        	extui	a4, a4, 0, 16
	struct ieee80211com_target *ic = (struct ieee80211com_target * )data;
	struct ieee80211com_target *ictgt = &sc->sc_ic ;

	adf_os_mem_copy(ictgt, ic, sizeof(struct  ieee80211com_target));

	ictgt->ic_ampdu_limit         = adf_os_ntohl(ic->ic_ampdu_limit);
  907610:	252d16        	addmi	a5, a2, 0x1600

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  907613:	c0d0      	movi.n	a13, 0
  907615:	8a23      	l32i.n	a10, a2, 12
	struct ieee80211com_target *ic = (struct ieee80211com_target * )data;
	struct ieee80211com_target *ictgt = &sc->sc_ic ;

	adf_os_mem_copy(ictgt, ic, sizeof(struct  ieee80211com_target));

	ictgt->ic_ampdu_limit         = adf_os_ntohl(ic->ic_ampdu_limit);
  907617:	9858      	s32i.n	a8, a5, 32

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  907619:	db30      	mov.n	a11, a3
  90761b:	dc40      	mov.n	a12, a4
  90761d:	ded0      	mov.n	a14, a13
  90761f:	5bff42        	call8	907328 <wmi_cmd_rsp>
  907622:	d10f      	retw.n

00907624 <handle_rc_rate_update_cmd>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void handle_rc_rate_update_cmd(void *Context, A_UINT16 Command,
				      A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  907624:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_rate_update_cmd *wmi_data = (struct wmi_rc_rate_update_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);

	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  907627:	285000        	l8ui	a8, a5, 0
				      A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_rate_update_cmd *wmi_data = (struct wmi_rc_rate_update_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  90762a:	2a5004        	l8ui	a10, a5, 4

	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  90762d:	0a8b11        	slli	a11, a8, 6
  907630:	a8bb      	add.n	a11, a11, a8
  907632:	08bb09        	addx2	a11, a11, a8
  907635:	295a30        	movi	a9, 0x530
				      A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_rate_update_cmd *wmi_data = (struct wmi_rc_rate_update_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  907638:	285005        	l8ui	a8, a5, 5

	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  90763b:	09bb0a        	addx4	a11, a11, a9
				      A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_rate_update_cmd *wmi_data = (struct wmi_rc_rate_update_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  90763e:	295006        	l8ui	a9, a5, 6
  907641:	08aa10        	slli	a10, a10, 24
  907644:	008811        	slli	a8, a8, 16
  907647:	0a8802        	or	a8, a8, a10
  90764a:	2d5007        	l8ui	a13, a5, 7
  90764d:	089911        	slli	a9, a9, 8
  907650:	089902        	or	a9, a9, a8

	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
  907653:	2c5001        	l8ui	a12, a5, 1
  907656:	ab2b      	add.n	a11, a2, a11
  907658:	09dd02        	or	a13, a13, a9
  90765b:	b85e      	addi.n	a14, a5, 8
  90765d:	da20      	mov.n	a10, a2
  90765f:	2bbc08        	addi	a11, a11, 8
  907662:	580600        	call8	908e64 <ath_rate_node_update>
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void handle_rc_rate_update_cmd(void *Context, A_UINT16 Command,
				      A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  907665:	03034f        	extui	a3, a3, 0, 16
  907668:	04044f        	extui	a4, a4, 0, 16
	ath_rate_node_update(sc, &sc->sc_sta[wmi_data->node_index],
			     wmi_data->isNew,
			     capflag,
			     &wmi_data->rs);

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90766b:	c0d0      	movi.n	a13, 0
  90766d:	8a23      	l32i.n	a10, a2, 12
  90766f:	db30      	mov.n	a11, a3
  907671:	dc40      	mov.n	a12, a4
  907673:	ded0      	mov.n	a14, a13
  907675:	5bff2c        	call8	907328 <wmi_cmd_rsp>
  907678:	d10f      	retw.n
	...

0090767c <handle_rc_state_change_cmd>:
}

static void handle_rc_state_change_cmd(void *Context, A_UINT16 Command,
				       A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)

{
  90767c:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_state_change_cmd *wmi_data = (struct wmi_rc_state_change_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);

	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
  90767f:	285000        	l8ui	a8, a5, 0
  907682:	1972a2        	l32r	a9, 8e410c <vbuf_module_install+0x80>
  907685:	0c8b11        	slli	a11, a8, 4

{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_state_change_cmd *wmi_data = (struct wmi_rc_state_change_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  907688:	2a5004        	l8ui	a10, a5, 4

	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
  90768b:	a8bb      	add.n	a11, a11, a8

{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_state_change_cmd *wmi_data = (struct wmi_rc_state_change_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  90768d:	285005        	l8ui	a8, a5, 5

	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
  907690:	09bb0a        	addx4	a11, a11, a9

{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_rc_state_change_cmd *wmi_data = (struct wmi_rc_state_change_cmd *)buffer;

	a_uint32_t capflag = adf_os_ntohl(wmi_data->capflag);
  907693:	295006        	l8ui	a9, a5, 6
  907696:	08aa10        	slli	a10, a10, 24
  907699:	008811        	slli	a8, a8, 16
  90769c:	0a8802        	or	a8, a8, a10
  90769f:	2d5007        	l8ui	a13, a5, 7
  9076a2:	089911        	slli	a9, a9, 8
  9076a5:	089902        	or	a9, a9, a8

	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
  9076a8:	2c5001        	l8ui	a12, a5, 1
  9076ab:	ab2b      	add.n	a11, a2, a11
  9076ad:	09dd02        	or	a13, a13, a9
  9076b0:	b85e      	addi.n	a14, a5, 8
  9076b2:	da20      	mov.n	a10, a2
  9076b4:	b8bb      	addi.n	a11, a11, 8
  9076b6:	5805f0        	call8	908e78 <ath_rate_newstate>
}

static void handle_rc_state_change_cmd(void *Context, A_UINT16 Command,
				       A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)

{
  9076b9:	03034f        	extui	a3, a3, 0, 16
  9076bc:	04044f        	extui	a4, a4, 0, 16
	ath_rate_newstate(sc, &sc->sc_vap[wmi_data->vap_index].av_vap,
			  wmi_data->vap_state,
			  capflag,
			  &wmi_data->rs);

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9076bf:	c0d0      	movi.n	a13, 0
  9076c1:	8a23      	l32i.n	a10, a2, 12
  9076c3:	db30      	mov.n	a11, a3
  9076c5:	dc40      	mov.n	a12, a4
  9076c7:	ded0      	mov.n	a14, a13
  9076c9:	5bff17        	call8	907328 <wmi_cmd_rsp>
  9076cc:	d10f      	retw.n
	...

009076d0 <ath_hal_reg_write_tgt>:
	}
}

static void ath_hal_reg_write_tgt(void *Context, A_UINT16 Command,
				  A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9076d0:	6c1004        	entry	a1, 32
  9076d3:	03034f        	extui	a3, a3, 0, 16
  9076d6:	04044f        	extui	a4, a4, 0, 16
	struct registerWrite {
		a_uint32_t reg;
		a_uint32_t val;
	}*t;

	for (i = 0; i < datalen; i += sizeof(struct registerWrite)) {
  9076d9:	d750      	mov.n	a7, a5
  9076db:	600009        	j	9076e8 <ath_hal_reg_write_tgt+0x18>
		t = (struct registerWrite *)(data+i);

		ath_hal_reg_write_filter(ah, t->reg, t->val);
  9076de:	8a70      	l32i.n	a10, a7, 0
  9076e0:	8b71      	l32i.n	a11, a7, 4
  9076e2:	277c08        	addi	a7, a7, 8
  9076e5:	5bfbdb        	call8	906654 <ath_hal_reg_write_filter$isra$10>

		iowrite32_mac(reg, val);
	}
}

static void ath_hal_reg_write_tgt(void *Context, A_UINT16 Command,
  9076e8:	05780c        	sub	a8, a7, a5
	struct registerWrite {
		a_uint32_t reg;
		a_uint32_t val;
	}*t;

	for (i = 0; i < datalen; i += sizeof(struct registerWrite)) {
  9076eb:	7682ef        	blt	a8, a6, 9076de <ath_hal_reg_write_tgt+0xe>
		t = (struct registerWrite *)(data+i);

		ath_hal_reg_write_filter(ah, t->reg, t->val);
	}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9076ee:	c0d0      	movi.n	a13, 0
  9076f0:	8a23      	l32i.n	a10, a2, 12
  9076f2:	db30      	mov.n	a11, a3
  9076f4:	dc40      	mov.n	a12, a4
  9076f6:	0dde02        	or	a14, a13, a13
  9076f9:	5bff0b        	call8	907328 <wmi_cmd_rsp>
  9076fc:	d10f      	retw.n
	...

00907700 <ath_hal_reg_read_tgt>:
		return ioread32_mac(addr);
}

static void ath_hal_reg_read_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907700:	6c1016        	entry	a1, 176
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  907703:	272d05        	addmi	a7, a2, 0x500
  907706:	887b      	l32i.n	a8, a7, 44
		return ioread32_mac(addr);
}

static void ath_hal_reg_read_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907708:	03034f        	extui	a3, a3, 0, 16
  90770b:	04044f        	extui	a4, a4, 0, 16
	struct ath_hal *ah = sc->sc_ah;
	a_uint32_t addr;
	a_uint32_t val[32];
	int i;

	for (i = 0; i < datalen; i += sizeof(a_int32_t)) {
  90770e:	c070      	movi.n	a7, 0
  907710:	600019        	j	90772d <ath_hal_reg_read_tgt+0x2d>
  907713:	00a759        	extui	a7, a0, 26, 10
		addr = *(a_uint32_t *)(data + i);
		addr = adf_os_ntohl(addr);

		val[i/sizeof(a_int32_t)] =
			adf_os_ntohl(ath_reg_read_filter(ah, addr));
  907716:	8b90      	l32i.n	a11, a9, 0
  907718:	da80      	mov.n	a10, a8
  90771a:	281620        	s32i	a8, a1, 128
  90771d:	5bfbf1        	call8	9066e4 <ath_reg_read_filter>

	for (i = 0; i < datalen; i += sizeof(a_int32_t)) {
		addr = *(a_uint32_t *)(data + i);
		addr = adf_os_ntohl(addr);

		val[i/sizeof(a_int32_t)] =
  907720:	072914        	srli	a9, a7, 2
  907723:	01990a        	addx4	a9, a9, a1
	else
		/* MAC registers */
		return ioread32_mac(addr);
}

static void ath_hal_reg_read_tgt(void *Context, A_UINT16 Command,
  907726:	281220        	l32i	a8, a1, 128

	for (i = 0; i < datalen; i += sizeof(a_int32_t)) {
		addr = *(a_uint32_t *)(data + i);
		addr = adf_os_ntohl(addr);

		val[i/sizeof(a_int32_t)] =
  907729:	9a90      	s32i.n	a10, a9, 0
	else
		/* MAC registers */
		return ioread32_mac(addr);
}

static void ath_hal_reg_read_tgt(void *Context, A_UINT16 Command,
  90772b:	b477      	addi.n	a7, a7, 4
	struct ath_hal *ah = sc->sc_ah;
	a_uint32_t addr;
	a_uint32_t val[32];
	int i;

	for (i = 0; i < datalen; i += sizeof(a_int32_t)) {
  90772d:	7672e3        	blt	a7, a6, 907714 <ath_hal_reg_read_tgt+0x14>

		val[i/sizeof(a_int32_t)] =
			adf_os_ntohl(ath_reg_read_filter(ah, addr));
	}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &val[0], datalen);
  907730:	8a23      	l32i.n	a10, a2, 12
  907732:	db30      	mov.n	a11, a3
  907734:	dc40      	mov.n	a12, a4
  907736:	dd10      	mov.n	a13, a1
  907738:	de60      	mov.n	a14, a6
  90773a:	5bfefb        	call8	907328 <wmi_cmd_rsp>
  90773d:	d10f      	retw.n
	...

00907740 <ath_vap_create_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_create_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
			       A_UINT8 *data, a_int32_t datalen)
{
  907740:	6c1006        	entry	a1, 48
	vap->iv_rtsthreshold    = adf_os_ntohs(vap->iv_rtsthreshold);
	vap->iv_opmode          = adf_os_ntohl(vap->iv_opmode);

	vap_index = vap->iv_vapindex;

	adf_os_assert(sc->sc_vap[vap_index].av_valid == 0);
  907743:	265000        	l8ui	a6, a5, 0
  907746:	1772a1        	l32r	a7, 8e41cc <vdesc_module_install+0x90>
  907749:	0c6811        	slli	a8, a6, 4
  90774c:	a688      	add.n	a8, a8, a6
  90774e:	0e8811        	slli	a8, a8, 2
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_create_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
			       A_UINT8 *data, a_int32_t datalen)
{
  907751:	03094f        	extui	a9, a3, 0, 16
	vap->iv_rtsthreshold    = adf_os_ntohs(vap->iv_rtsthreshold);
	vap->iv_opmode          = adf_os_ntohl(vap->iv_opmode);

	vap_index = vap->iv_vapindex;

	adf_os_assert(sc->sc_vap[vap_index].av_valid == 0);
  907754:	a823      	add.n	a3, a2, a8
  907756:	a737      	add.n	a7, a3, a7
  907758:	26700a        	l8ui	a6, a7, 10
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_create_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
			       A_UINT8 *data, a_int32_t datalen)
{
  90775b:	04044f        	extui	a4, a4, 0, 16
	vap->iv_rtsthreshold    = adf_os_ntohs(vap->iv_rtsthreshold);
	vap->iv_opmode          = adf_os_ntohl(vap->iv_opmode);

	vap_index = vap->iv_vapindex;

	adf_os_assert(sc->sc_vap[vap_index].av_valid == 0);
  90775e:	006632        	sext	a6, a6, 7
  907761:	c863      	beqz.n	a6, 907768 <ath_vap_create_tgt+0x28>
  907763:	63fffc        	j	907763 <ath_vap_create_tgt+0x23>
  907766:	00001a        	sll	a0, a0

	adf_os_mem_copy(&(sc->sc_vap[vap_index].av_vap), vap,
  907769:	72a2db        	blt	a10, a2, 907748 <ath_vap_create_tgt+0x8>
  90776c:	50aa88        	call0	932190 <_etext+0x272f7>
  90776f:	a82a      	add.n	a10, a2, a8
  907771:	b8aa      	addi.n	a10, a10, 8
  907773:	2c0a0c        	movi	a12, 12
  907776:	291600        	s32i	a9, a1, 0
  907779:	5bfb1f        	call8	9063f8 <__adf_os_mem_copy>
			VAP_TARGET_SIZE);

	sc->sc_vap[vap_index].av_bcbuf = asf_tailq_first(&(sc->sc_bbuf));
  90777c:	1572a6        	l32r	a5, 8e4214 <vdesc_module_install+0xd8>
	sc->sc_vap[vap_index].av_valid = 1;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90777f:	dc40      	mov.n	a12, a4
	adf_os_assert(sc->sc_vap[vap_index].av_valid == 0);

	adf_os_mem_copy(&(sc->sc_vap[vap_index].av_vap), vap,
			VAP_TARGET_SIZE);

	sc->sc_vap[vap_index].av_bcbuf = asf_tailq_first(&(sc->sc_bbuf));
  907781:	a533      	add.n	a3, a3, a5
  907783:	252d16        	addmi	a5, a2, 0x1600
  907786:	855a      	l32i.n	a5, a5, 40
	sc->sc_vap[vap_index].av_valid = 1;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  907788:	dd60      	mov.n	a13, a6
	adf_os_assert(sc->sc_vap[vap_index].av_valid == 0);

	adf_os_mem_copy(&(sc->sc_vap[vap_index].av_vap), vap,
			VAP_TARGET_SIZE);

	sc->sc_vap[vap_index].av_bcbuf = asf_tailq_first(&(sc->sc_bbuf));
  90778a:	9533      	s32i.n	a5, a3, 12
	sc->sc_vap[vap_index].av_valid = 1;
  90778c:	c031      	movi.n	a3, 1
  90778e:	23740a        	s8i	a3, a7, 10

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  907791:	8910      	l32i.n	a9, a1, 0
  907793:	8a23      	l32i.n	a10, a2, 12
  907795:	db90      	mov.n	a11, a9
  907797:	de60      	mov.n	a14, a6
  907799:	5bfee3        	call8	907328 <wmi_cmd_rsp>
  90779c:	d10f      	retw.n
	...

009077a0 <ath_vap_delete_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
			       A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9077a0:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint8_t vap_index;

	vap_index = *(a_uint8_t *)data;
  9077a3:	295000        	l8ui	a9, a5, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
			       A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9077a6:	030b4f        	extui	a11, a3, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint8_t vap_index;

	vap_index = *(a_uint8_t *)data;

	sc->sc_vap[vap_index].av_valid = 0;
  9077a9:	0c9811        	slli	a8, a9, 4
  9077ac:	a988      	add.n	a8, a8, a9
  9077ae:	1372a1        	l32r	a3, 8e4234 <vdesc_module_install+0xf8>
  9077b1:	02880a        	addx4	a8, a8, a2
  9077b4:	a383      	add.n	a3, a8, a3
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
			       A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9077b6:	040c4f        	extui	a12, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint8_t vap_index;

	vap_index = *(a_uint8_t *)data;

	sc->sc_vap[vap_index].av_valid = 0;
  9077b9:	c040      	movi.n	a4, 0
  9077bb:	24340a        	s8i	a4, a3, 10
	sc->sc_vap[vap_index].av_bcbuf = NULL;
  9077be:	1372a6        	l32r	a3, 8e4258 <vdesc_module_install+0x11c>

static void ath_node_vdelete_tgt(struct ath_softc_tgt *sc, a_uint8_t vap_index)
{
	a_int32_t i;

	for (i = 0; i < TARGET_NODE_MAX; i++) {
  9077c1:	1d72a7        	l32r	a13, 8e4260 <vdesc_module_install+0x124>
	a_uint8_t vap_index;

	vap_index = *(a_uint8_t *)data;

	sc->sc_vap[vap_index].av_valid = 0;
	sc->sc_vap[vap_index].av_bcbuf = NULL;
  9077c4:	a383      	add.n	a3, a8, a3
  9077c6:	c080      	movi.n	a8, 0
  9077c8:	9833      	s32i.n	a8, a3, 12
		ath_hal_reg_write_filter(ah, buf->reg, val);
	}
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
  9077ca:	2f5a45        	movi	a15, 0x545
  9077cd:	237a3c        	movi	a3, 0x73c
{
	a_int32_t i;

	for (i = 0; i < TARGET_NODE_MAX; i++) {
		if(sc->sc_sta[i].ni.ni_vapindex == vap_index)
			sc->sc_sta[i].an_valid = 0;
  9077d0:	d480      	mov.n	a4, a8
  9077d2:	2e2a0c        	movi	a14, 0x20c
		ath_hal_reg_write_filter(ah, buf->reg, val);
	}
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
  9077d5:	a82a      	add.n	a10, a2, a8
  9077d7:	afa5      	add.n	a5, a10, a15
static void ath_node_vdelete_tgt(struct ath_softc_tgt *sc, a_uint8_t vap_index)
{
	a_int32_t i;

	for (i = 0; i < TARGET_NODE_MAX; i++) {
		if(sc->sc_sta[i].ni.ni_vapindex == vap_index)
  9077d9:	255000        	l8ui	a5, a5, 0
  9077dc:	795904        	bne	a5, a9, 9077e4 <ath_vap_delete_tgt+0x44>
		ath_hal_reg_write_filter(ah, buf->reg, val);
	}
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_vap_delete_tgt(void *Context, A_UINT16 Command,
  9077df:	a3aa      	add.n	a10, a10, a3
{
	a_int32_t i;

	for (i = 0; i < TARGET_NODE_MAX; i++) {
		if(sc->sc_sta[i].ni.ni_vapindex == vap_index)
			sc->sc_sta[i].an_valid = 0;
  9077e1:	24a400        	s8i	a4, a10, 0
  9077e4:	ae88      	add.n	a8, a8, a14

static void ath_node_vdelete_tgt(struct ath_softc_tgt *sc, a_uint8_t vap_index)
{
	a_int32_t i;

	for (i = 0; i < TARGET_NODE_MAX; i++) {
  9077e6:	7d89eb        	bne	a8, a13, 9077d5 <ath_vap_delete_tgt+0x35>
	vap_index = *(a_uint8_t *)data;

	sc->sc_vap[vap_index].av_valid = 0;
	sc->sc_vap[vap_index].av_bcbuf = NULL;
	ath_node_vdelete_tgt(sc, vap_index);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9077e9:	c0d0      	movi.n	a13, 0
  9077eb:	8a23      	l32i.n	a10, a2, 12
  9077ed:	ded0      	mov.n	a14, a13
  9077ef:	5bfece        	call8	907328 <wmi_cmd_rsp>
  9077f2:	d10f      	retw.n

009077f4 <ath_node_cleanup_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_cleanup_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9077f4:	6c1004        	entry	a1, 32
	a_uint8_t node_index;
	a_uint8_t *nodedata;

	nodedata = (a_uint8_t *)data;
	node_index = *nodedata;
	sc->sc_sta[node_index].an_valid = 0;
  9077f7:	285000        	l8ui	a8, a5, 0

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9077fa:	c0d0      	movi.n	a13, 0
	a_uint8_t node_index;
	a_uint8_t *nodedata;

	nodedata = (a_uint8_t *)data;
	node_index = *nodedata;
	sc->sc_sta[node_index].an_valid = 0;
  9077fc:	0a8911        	slli	a9, a8, 6
  9077ff:	a899      	add.n	a9, a9, a8
  907801:	089809        	addx2	a8, a9, a8
  907804:	02880a        	addx4	a8, a8, a2
  907807:	297a30        	movi	a9, 0x730
  90780a:	a988      	add.n	a8, a8, a9
  90780c:	c090      	movi.n	a9, 0
  90780e:	29840c        	s8i	a9, a8, 12

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  907811:	8a23      	l32i.n	a10, a2, 12
  907813:	030b4f        	extui	a11, a3, 0, 16
  907816:	040c4f        	extui	a12, a4, 0, 16
  907819:	ded0      	mov.n	a14, a13
  90781b:	5bfec3        	call8	907328 <wmi_cmd_rsp>
  90781e:	d10f      	retw.n

00907820 <ath_node_create_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_create_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907820:	6c1004        	entry	a1, 32
	a_uint8_t vap_index;
	a_uint8_t node_index;

	node = (struct ieee80211_node_target *)data;

	node_index = node->ni_nodeindex;
  907823:	26500c        	l8ui	a6, a5, 12
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_create_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907826:	db50      	mov.n	a11, a5

	node->ni_htcap = adf_os_ntohs(node->ni_htcap);
	node->ni_flags = adf_os_ntohs(node->ni_flags);
	node->ni_maxampdu = adf_os_ntohs(node->ni_maxampdu);

	adf_os_mem_copy(&(sc->sc_sta[node_index].ni), node,
  907828:	0a6511        	slli	a5, a6, 6
  90782b:	a655      	add.n	a5, a5, a6
  90782d:	065509        	addx2	a5, a5, a6
  907830:	0e5511        	slli	a5, a5, 2
  907833:	275a30        	movi	a7, 0x530
  907836:	a75a      	add.n	a10, a5, a7
  907838:	aa2a      	add.n	a10, a2, a10
  90783a:	b8aa      	addi.n	a10, a10, 8
			NODE_TARGET_SIZE);

    	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
  90783c:	a525      	add.n	a5, a2, a5
  90783e:	2c0a16        	movi	a12, 22
  907841:	5bfaed        	call8	9063f8 <__adf_os_mem_copy>
  907844:	a757      	add.n	a7, a5, a7
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
  907846:	287015        	l8ui	a8, a7, 21
  907849:	295a50        	movi	a9, 0x550
  90784c:	a955      	add.n	a5, a5, a9
  90784e:	0c8911        	slli	a9, a8, 4
  907851:	a899      	add.n	a9, a9, a8
  907853:	1872a2        	l32r	a8, 8e42dc <vdesc_module_install+0x1a0>
  907856:	0e9911        	slli	a9, a9, 2
  907859:	a89a      	add.n	a10, a9, a8
  90785b:	aa2a      	add.n	a10, a2, a10
  90785d:	b8aa      	addi.n	a10, a10, 8
  90785f:	9a52      	s32i.n	a10, a5, 8
	if(sc->sc_sta[node_index].ni.ni_is_vapnode == 1)
  907861:	257016        	l8ui	a5, a7, 22
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_node_create_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907864:	03034f        	extui	a3, a3, 0, 16
  907867:	04044f        	extui	a4, a4, 0, 16
	adf_os_mem_copy(&(sc->sc_sta[node_index].ni), node,
			NODE_TARGET_SIZE);

    	vap_index = sc->sc_sta[node_index].ni.ni_vapindex;
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
	if(sc->sc_sta[node_index].ni.ni_is_vapnode == 1)
  90786a:	695106        	bnei	a5, 1, 907874 <ath_node_create_tgt+0x54>
		sc->sc_vap[vap_index].av_vap.iv_nodeindex = node_index;
  90786d:	a929      	add.n	a9, a2, a9
  90786f:	a898      	add.n	a8, a9, a8
  907871:	268415        	s8i	a6, a8, 21

	sc->sc_sta[node_index].an_valid = 1;
  907874:	0a6511        	slli	a5, a6, 6
  907877:	a655      	add.n	a5, a5, a6
  907879:	065609        	addx2	a6, a5, a6
  90787c:	0e6611        	slli	a6, a6, 2
  90787f:	a625      	add.n	a5, a2, a6
  907881:	277a30        	movi	a7, 0x730
  907884:	a757      	add.n	a7, a5, a7
  907886:	c081      	movi.n	a8, 1
  907888:	28740c        	s8i	a8, a7, 12
	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
	sc->sc_sta[node_index].ni.ni_iv32 = 0;

	owl_tgt_node_init(&sc->sc_sta[node_index]);
  90788b:	2a5a30        	movi	a10, 0x530
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
	if(sc->sc_sta[node_index].ni.ni_is_vapnode == 1)
		sc->sc_vap[vap_index].av_vap.iv_nodeindex = node_index;

	sc->sc_sta[node_index].an_valid = 1;
	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
  90788e:	285a40        	movi	a8, 0x540
  907891:	a858      	add.n	a8, a5, a8
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
	sc->sc_sta[node_index].ni.ni_iv32 = 0;

	owl_tgt_node_init(&sc->sc_sta[node_index]);
  907893:	aa66      	add.n	a6, a6, a10
	sc->sc_sta[node_index].ni.ni_vap = &(sc->sc_vap[vap_index].av_vap);
	if(sc->sc_sta[node_index].ni.ni_is_vapnode == 1)
		sc->sc_vap[vap_index].av_vap.iv_nodeindex = node_index;

	sc->sc_sta[node_index].an_valid = 1;
	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
  907895:	c050      	movi.n	a5, 0
  907897:	258508        	s16i	a5, a8, 16
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
  90789a:	258509        	s16i	a5, a8, 18
	sc->sc_sta[node_index].ni.ni_iv32 = 0;

	owl_tgt_node_init(&sc->sc_sta[node_index]);
  90789d:	a62a      	add.n	a10, a2, a6
		sc->sc_vap[vap_index].av_vap.iv_nodeindex = node_index;

	sc->sc_sta[node_index].an_valid = 1;
	sc->sc_sta[node_index].ni.ni_txseqmgmt = 0;
	sc->sc_sta[node_index].ni.ni_iv16 = 0;
	sc->sc_sta[node_index].ni.ni_iv32 = 0;
  90789f:	c050      	movi.n	a5, 0
  9078a1:	9585      	s32i.n	a5, a8, 20

	owl_tgt_node_init(&sc->sc_sta[node_index]);
  9078a3:	b8aa      	addi.n	a10, a10, 8
  9078a5:	5807c4        	call8	9097b8 <owl_tgt_node_init>

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  9078a8:	8a23      	l32i.n	a10, a2, 12
  9078aa:	db30      	mov.n	a11, a3
  9078ac:	dc40      	mov.n	a12, a4
  9078ae:	dd50      	mov.n	a13, a5
  9078b0:	de50      	mov.n	a14, a5
  9078b2:	5bfe9d        	call8	907328 <wmi_cmd_rsp>
  9078b5:	d10f      	retw.n
	...

009078b8 <ath_setcurmode_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_setcurmode_tgt(void *Context, A_UINT16 Command,
			       A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9078b8:	6c1004        	entry	a1, 32
 * @param[in] size  buffer size
 */
static inline void
adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
    __adf_os_mem_set(buf, b, size);
  9078bb:	2a2a08        	movi	a10, 0x208
	a_uint16_t mode;

	mode= *((a_uint16_t *)data);
	mode = adf_os_ntohs(mode);

	ath_setcurmode(sc, mode);
  9078be:	255100        	l16ui	a5, a5, 0
  9078c1:	aa2a      	add.n	a10, a2, a10
  9078c3:	2b0aff        	movi	a11, 255
  9078c6:	2c1a00        	movi	a12, 0x100
  9078c9:	5bfad0        	call8	90640c <__adf_os_mem_set>
	const HAL_RATE_TABLE *rt;
	a_int32_t i;

	adf_os_mem_set(sc->sc_rixmap, 0xff, sizeof(sc->sc_rixmap));

	rt = sc->sc_rates[mode];
  9078cc:	02580a        	addx4	a8, a5, a2
  9078cf:	28827f        	l32i	a8, a8, 0x1fc
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_setcurmode_tgt(void *Context, A_UINT16 Command,
			       A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9078d2:	03034f        	extui	a3, a3, 0, 16
  9078d5:	04044f        	extui	a4, a4, 0, 16
	a_int32_t i;

	adf_os_mem_set(sc->sc_rixmap, 0xff, sizeof(sc->sc_rixmap));

	rt = sc->sc_rates[mode];
	adf_os_assert(rt != NULL);
  9078d8:	c885      	beqz.n	a8, 9078e1 <ath_setcurmode_tgt+0x29>
  9078da:	da80      	mov.n	a10, a8
  9078dc:	c090      	movi.n	a9, 0
  9078de:	60000f        	j	9078f1 <ath_setcurmode_tgt+0x39>
  9078e1:	63fffc        	j	9078e1 <ath_setcurmode_tgt+0x29>

	for (i = 0; i < rt->rateCount; i++) {
		sc->sc_rixmap[rt->info[i].rateCode] = i;
  9078e4:	2ba020        	l8ui	a11, a10, 32
  9078e7:	ab2b      	add.n	a11, a2, a11
  9078e9:	2bbd02        	addmi	a11, a11, 0x200
  9078ec:	29b408        	s8i	a9, a11, 8
	adf_os_mem_set(sc->sc_rixmap, 0xff, sizeof(sc->sc_rixmap));

	rt = sc->sc_rates[mode];
	adf_os_assert(rt != NULL);

	for (i = 0; i < rt->rateCount; i++) {
  9078ef:	b199      	addi.n	a9, a9, 1
  9078f1:	8b80      	l32i.n	a11, a8, 0
  9078f3:	2aac10        	addi	a10, a10, 16
  9078f6:	7b92ea        	blt	a9, a11, 9078e4 <ath_setcurmode_tgt+0x2c>
		sc->sc_rixmap[rt->info[i].rateCode] = i;
	}

	sc->sc_currates = rt;
	sc->sc_curmode = mode;
	sc->sc_protrix = ((mode == IEEE80211_MODE_11NG) ? 3 : 0);
  9078f9:	c0e0      	movi.n	a14, 0

	for (i = 0; i < rt->rateCount; i++) {
		sc->sc_rixmap[rt->info[i].rateCode] = i;
	}

	sc->sc_currates = rt;
  9078fb:	282681        	s32i	a8, a2, 0x204
	sc->sc_curmode = mode;
  9078fe:	2526c2        	s32i	a5, a2, 0x308
	sc->sc_protrix = ((mode == IEEE80211_MODE_11NG) ? 3 : 0);
  907901:	c083      	movi.n	a8, 3
  907903:	b055      	addi.n	a5, a5, -1
  907905:	05e839        	movnez	a8, a14, a5
	mode= *((a_uint16_t *)data);
	mode = adf_os_ntohs(mode);

	ath_setcurmode(sc, mode);

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  907908:	8a23      	l32i.n	a10, a2, 12
		sc->sc_rixmap[rt->info[i].rateCode] = i;
	}

	sc->sc_currates = rt;
	sc->sc_curmode = mode;
	sc->sc_protrix = ((mode == IEEE80211_MODE_11NG) ? 3 : 0);
  90790a:	252d03        	addmi	a5, a2, 0x300
  90790d:	28540c        	s8i	a8, a5, 12
	mode= *((a_uint16_t *)data);
	mode = adf_os_ntohs(mode);

	ath_setcurmode(sc, mode);

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  907910:	db30      	mov.n	a11, a3
  907912:	dc40      	mov.n	a12, a4
  907914:	dde0      	mov.n	a13, a14
  907916:	5bfe84        	call8	907328 <wmi_cmd_rsp>
  907919:	d10f      	retw.n
	...

0090791c <ath_flushrecv_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo,NULL, 0);
}

static void ath_flushrecv_tgt(void *Context, A_UINT16 Command,
			      A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  90791c:	6c1004        	entry	a1, 32
  90791f:	03034f        	extui	a3, a3, 0, 16
  907922:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_rx_buf *bf;

	asf_tailq_foreach(bf, &sc->sc_rxbuf, bf_list)
  907925:	2522d5        	l32i	a5, a2, 0x354
  907928:	60002e        	j	90795a <ath_flushrecv_tgt+0x3e>
  90792b:	000000        	ill
		if (bf->bf_skb != NULL) {
  90792e:	8658      	l32i.n	a6, a5, 32
  907930:	ca64      	beqz.n	a6, 907958 <ath_flushrecv_tgt+0x3c>
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  907932:	8b50      	l32i.n	a11, a5, 0
  907934:	2a2246        	l32i	a10, a2, 0x118
  907937:	c0c1      	movi.n	a12, 1
  907939:	5beee5        	call8	9034d0 <__adf_nbuf_unmap>
			adf_nbuf_unmap(sc->sc_dev, bf->bf_dmamap,
				       ADF_OS_DMA_FROM_DEVICE);
			ath_free_rx_skb(sc, adf_nbuf_queue_remove(&bf->bf_skbhead));
  90793c:	187182        	l32r	a8, 8e3f44 <mUsbEPinHighBandSet+0x234>
  90793f:	8720      	l32i.n	a7, a2, 0
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  907941:	2a5c14        	addi	a10, a5, 20
  907944:	2682a3        	l32i	a6, a8, 0x28c
  907947:	5beece        	call8	903480 <__adf_nbuf_queue_remove>
  90794a:	dca0      	mov.n	a12, a10
  90794c:	2b0a03        	movi	a11, 3
  90794f:	da70      	mov.n	a10, a7
  907951:	0b6000        	callx8	a6
			bf->bf_skb = NULL;
  907954:	c060      	movi.n	a6, 0
  907956:	9658      	s32i.n	a6, a5, 32
			      A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_rx_buf *bf;

	asf_tailq_foreach(bf, &sc->sc_rxbuf, bf_list)
  907958:	8559      	l32i.n	a5, a5, 36
  90795a:	655fd0        	bnez	a5, 90792e <ath_flushrecv_tgt+0x12>
				       ADF_OS_DMA_FROM_DEVICE);
			ath_free_rx_skb(sc, adf_nbuf_queue_remove(&bf->bf_skbhead));
			bf->bf_skb = NULL;
		}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90795d:	8a23      	l32i.n	a10, a2, 12
  90795f:	db30      	mov.n	a11, a3
  907961:	dc40      	mov.n	a12, a4
  907963:	dd50      	mov.n	a13, a5
  907965:	de50      	mov.n	a14, a5
  907967:	5bfe70        	call8	907328 <wmi_cmd_rsp>
  90796a:	d10f      	retw.n

0090796c <ath_stoprecv_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_stoprecv_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  90796c:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  90796f:	252d05        	addmi	a5, a2, 0x500
  907972:	855b      	l32i.n	a5, a5, 44
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_stoprecv_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907974:	03034f        	extui	a3, a3, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_stopPcuReceive(ah);
  907977:	285224        	l32i	a8, a5, 144
  90797a:	055a02        	or	a10, a5, a5
  90797d:	0b8000        	callx8	a8
	ah->ah_setRxFilter(ah, 0);
  907980:	8859      	l32i.n	a8, a5, 36
  907982:	da50      	mov.n	a10, a5
  907984:	c0b0      	movi.n	a11, 0
  907986:	0b8000        	callx8	a8
	ah->ah_stopDmaReceive(ah);
  907989:	285223        	l32i	a8, a5, 140
  90798c:	da50      	mov.n	a10, a5
  90798e:	0b8000        	callx8	a8

	sc->sc_rxlink = NULL;
  907991:	c0e0      	movi.n	a14, 0
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_stoprecv_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907993:	04044f        	extui	a4, a4, 0, 16
	ah->ah_stopPcuReceive(ah);
	ah->ah_setRxFilter(ah, 0);
	ah->ah_stopDmaReceive(ah);

	sc->sc_rxlink = NULL;
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  907996:	8a23      	l32i.n	a10, a2, 12

	ah->ah_stopPcuReceive(ah);
	ah->ah_setRxFilter(ah, 0);
	ah->ah_stopDmaReceive(ah);

	sc->sc_rxlink = NULL;
  907998:	2e26ef        	s32i	a14, a2, 0x3bc
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  90799b:	db30      	mov.n	a11, a3
  90799d:	dc40      	mov.n	a12, a4
  90799f:	dde0      	mov.n	a13, a14
  9079a1:	5bfe61        	call8	907328 <wmi_cmd_rsp>
  9079a4:	d10f      	retw.n
	...

009079a8 <ath_startrecv_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_startrecv_tgt(void *Context, A_UINT16 Command,
			      A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9079a8:	6c1004        	entry	a1, 32
#undef PA2DESC
}

static a_int32_t ath_startrecv(struct ath_softc_tgt *sc)
{
	struct ath_hal *ah = sc->sc_ah;
  9079ab:	252d05        	addmi	a5, a2, 0x500
  9079ae:	865b      	l32i.n	a6, a5, 44
	struct ath_rx_desc *ds;

	sc->sc_rxbufsize = 1024+512+128;
  9079b0:	256a80        	movi	a5, 0x680
  9079b3:	25264a        	s32i	a5, a2, 0x128
	sc->sc_rxlink = NULL;
  9079b6:	c050      	movi.n	a5, 0
  9079b8:	2526ef        	s32i	a5, a2, 0x3bc

	sc->sc_rxdesc_held = NULL;
  9079bb:	2526db        	s32i	a5, a2, 0x36c
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_startrecv_tgt(void *Context, A_UINT16 Command,
			      A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  9079be:	03034f        	extui	a3, a3, 0, 16
  9079c1:	04044f        	extui	a4, a4, 0, 16
	sc->sc_rxbufsize = 1024+512+128;
	sc->sc_rxlink = NULL;

	sc->sc_rxdesc_held = NULL;

	asf_tailq_foreach(ds, &sc->sc_rxdesc, ds_list) {
  9079c4:	2522d9        	l32i	a5, a2, 0x364
  9079c7:	600027        	j	9079f2 <ath_startrecv_tgt+0x4a>
		a_int32_t error = ath_rxdesc_init(sc, ds);
  9079ca:	da20      	mov.n	a10, a2
  9079cc:	db50      	mov.n	a11, a5
  9079ce:	5bfbcb        	call8	9068fc <ath_rxdesc_init>
		if (error != 0) {
  9079d1:	65a049        	bnez	a10, 907a1e <ath_startrecv_tgt+0x76>
	sc->sc_rxbufsize = 1024+512+128;
	sc->sc_rxlink = NULL;

	sc->sc_rxdesc_held = NULL;

	asf_tailq_foreach(ds, &sc->sc_rxdesc, ds_list) {
  9079d4:	2a504c        	l8ui	a10, a5, 76
  9079d7:	29504d        	l8ui	a9, a5, 77
  9079da:	28504e        	l8ui	a8, a5, 78
  9079dd:	08aa10        	slli	a10, a10, 24
  9079e0:	009911        	slli	a9, a9, 16
  9079e3:	0a9902        	or	a9, a9, a10
  9079e6:	088811        	slli	a8, a8, 8
  9079e9:	25504f        	l8ui	a5, a5, 79
  9079ec:	098802        	or	a8, a8, a9
  9079ef:	085502        	or	a5, a5, a8
  9079f2:	655fd4        	bnez	a5, 9079ca <ath_startrecv_tgt+0x22>
			return error;
		}
	}

	ds = asf_tailq_first(&sc->sc_rxdesc);
	ah->ah_setRxDP(ah, ds->ds_daddr);
  9079f5:	2522d9        	l32i	a5, a2, 0x364
  9079f8:	2a5048        	l8ui	a10, a5, 72
  9079fb:	295049        	l8ui	a9, a5, 73
  9079fe:	28504a        	l8ui	a8, a5, 74
  907a01:	08aa10        	slli	a10, a10, 24
  907a04:	009911        	slli	a9, a9, 16
  907a07:	0a9902        	or	a9, a9, a10
  907a0a:	2b504b        	l8ui	a11, a5, 75
  907a0d:	088811        	slli	a8, a8, 8
  907a10:	098802        	or	a8, a8, a9
  907a13:	25621f        	l32i	a5, a6, 124
  907a16:	da60      	mov.n	a10, a6
  907a18:	08bb02        	or	a11, a11, a8
  907a1b:	0b5000        	callx8	a5
{

	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;

	ath_startrecv(sc);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  907a1e:	c0d0      	movi.n	a13, 0
  907a20:	8a23      	l32i.n	a10, a2, 12
  907a22:	db30      	mov.n	a11, a3
  907a24:	dc40      	mov.n	a12, a4
  907a26:	0dde02        	or	a14, a13, a13
  907a29:	5bfe3f        	call8	907328 <wmi_cmd_rsp>
  907a2c:	d10f      	retw.n
	...

00907a30 <ath_draintxq_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_draintxq_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907a30:	6c1004        	entry	a1, 32
	owltgt_txq_drain(sc, txq);
}

static void ath_draintxq(struct ath_softc_tgt *sc, HAL_BOOL drain_softq)
{
	struct ath_hal *ah = sc->sc_ah;
  907a33:	262d05        	addmi	a6, a2, 0x500
	a_uint16_t i;
	struct ath_txq *txq = NULL;
	struct ath_atx_tid *tid = NULL;

	ath_tx_status_clear(sc);
  907a36:	da20      	mov.n	a10, a2
	sc->sc_tx_draining = 1;
  907a38:	252d01        	addmi	a5, a2, 0x100
	owltgt_txq_drain(sc, txq);
}

static void ath_draintxq(struct ath_softc_tgt *sc, HAL_BOOL drain_softq)
{
	struct ath_hal *ah = sc->sc_ah;
  907a3b:	27620b        	l32i	a7, a6, 44
	a_uint16_t i;
	struct ath_txq *txq = NULL;
	struct ath_atx_tid *tid = NULL;

	ath_tx_status_clear(sc);
  907a3e:	58076f        	call8	9097fc <ath_tx_status_clear>
	sc->sc_tx_draining = 1;
  907a41:	295024        	l8ui	a9, a5, 36
  907a44:	c480      	movi.n	a8, 64
  907a46:	089802        	or	a8, a9, a8
  907a49:	285424        	s8i	a8, a5, 36

	ah->ah_stopTxDma(ah, sc->sc_bhalq);
  907a4c:	2b501c        	l8ui	a11, a5, 28
  907a4f:	28720d        	l32i	a8, a7, 52
  907a52:	077a02        	or	a10, a7, a7
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_draintxq_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907a55:	03034f        	extui	a3, a3, 0, 16
  907a58:	04044f        	extui	a4, a4, 0, 16
	struct ath_atx_tid *tid = NULL;

	ath_tx_status_clear(sc);
	sc->sc_tx_draining = 1;

	ah->ah_stopTxDma(ah, sc->sc_bhalq);
  907a5b:	0b8000        	callx8	a8
  907a5e:	c050      	movi.n	a5, 0

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i))
  907a60:	272d03        	addmi	a7, a2, 0x300
  907a63:	2770c8        	l8ui	a7, a7, 200
  907a66:	005004        	ssr	a5
  907a69:	07071b        	sra	a7, a7
  907a6c:	7f7710        	bbci	a7, 31, 907a80 <ath_draintxq_tgt+0x50>
			ath_tx_stopdma(sc, ATH_TXQ(sc, i));
  907a6f:	285c1e        	addi	a8, a5, 30
/* TX */
/******/

static void ath_tx_stopdma(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	struct ath_hal *ah = sc->sc_ah;
  907a72:	8a6b      	l32i.n	a10, a6, 44

	ah->ah_stopTxDma(ah, sc->sc_bhalq);

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i))
			ath_tx_stopdma(sc, ATH_TXQ(sc, i));
  907a74:	0b8811        	slli	a8, a8, 5

static void ath_tx_stopdma(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_stopTxDma(ah, txq->axq_qnum);
  907a77:	a828      	add.n	a8, a2, a8
  907a79:	87ad      	l32i.n	a7, a10, 52
  907a7b:	8b83      	l32i.n	a11, a8, 12
  907a7d:	0b7000        	callx8	a7
  907a80:	b155      	addi.n	a5, a5, 1
	ath_tx_status_clear(sc);
	sc->sc_tx_draining = 1;

	ah->ah_stopTxDma(ah, sc->sc_bhalq);

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
  907a82:	6959da        	bnei	a5, 10, 907a60 <ath_draintxq_tgt+0x30>
  907a85:	c050      	movi.n	a5, 0
			txq = ATH_TXQ(sc,i);
			while (!asf_tailq_empty(&txq->axq_tidq)){
				TAILQ_DEQ(&txq->axq_tidq, tid, tid_qelem);
				if(tid == NULL)
					break;
				tid->sched = AH_FALSE;
  907a87:	d650      	mov.n	a6, a5
	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i))
			ath_tx_stopdma(sc, ATH_TXQ(sc, i));

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i)) {
  907a89:	272d03        	addmi	a7, a2, 0x300
  907a8c:	2770c8        	l8ui	a7, a7, 200
  907a8f:	005004        	ssr	a5
  907a92:	07071b        	sra	a7, a7
  907a95:	7f7f08        	bbsi	a7, 31, 907aa1 <ath_draintxq_tgt+0x71>
  907a98:	b155      	addi.n	a5, a5, 1

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i))
			ath_tx_stopdma(sc, ATH_TXQ(sc, i));

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
  907a9a:	6959eb        	bnei	a5, 10, 907a89 <ath_draintxq_tgt+0x59>
  907a9d:	600039        	j	907ada <ath_draintxq_tgt+0xaa>
  907aa0:	00275c        	extui	a7, a0, 18, 13
		if (ATH_TXQ_SETUP(sc, i)) {
			owltgt_tx_processq(sc, ATH_TXQ(sc,i), OWL_TXQ_STOPPED);
  907aa3:	1e0b77        	l32r	a14, 8ca880 <_bss_end+0x3bd078>
  907aa6:	11a727        	l32r	a1, 8f1744 <memset+0xc5a8>
  907aa9:	bc77      	addi.n	a7, a7, 12
  907aab:	da20      	mov.n	a10, a2
  907aad:	db70      	mov.n	a11, a7
  907aaf:	c0c1      	movi.n	a12, 1
  907ab1:	580bee        	call8	90aa6c <owltgt_tx_processq>
  907ab4:	60001a        	j	907ad2 <ath_draintxq_tgt+0xa2>
  907ab7:	0089b9        	excw

			txq = ATH_TXQ(sc,i);
			while (!asf_tailq_empty(&txq->axq_tidq)){
				TAILQ_DEQ(&txq->axq_tidq, tid, tid_qelem);
  907aba:	8aba      	l32i.n	a10, a11, 40
  907abc:	c894      	beqz.n	a9, 907ac4 <ath_draintxq_tgt+0x94>
  907abe:	9a9a      	s32i.n	a10, a9, 40
  907ac0:	600002        	j	907ac6 <ath_draintxq_tgt+0x96>
  907ac3:	009a77        	excw
  907ac6:	8aba      	l32i.n	a10, a11, 40
  907ac8:	99a0      	s32i.n	a9, a10, 0
				if(tid == NULL)
					break;
				tid->sched = AH_FALSE;
  907aca:	26b435        	s8i	a6, a11, 53
				ath_tgt_tid_drain(sc,tid);
  907acd:	da20      	mov.n	a10, a2
  907acf:	580804        	call8	909ae0 <ath_tgt_tid_drain>
	for (i = 0; i < HAL_NUM_TX_QUEUES; i++)
		if (ATH_TXQ_SETUP(sc, i)) {
			owltgt_tx_processq(sc, ATH_TXQ(sc,i), OWL_TXQ_STOPPED);

			txq = ATH_TXQ(sc,i);
			while (!asf_tailq_empty(&txq->axq_tidq)){
  907ad2:	8b76      	l32i.n	a11, a7, 24
  907ad4:	65bfe0        	bnez	a11, 907ab8 <ath_draintxq_tgt+0x88>
  907ad7:	63ffbd        	j	907a98 <ath_draintxq_tgt+0x68>
				tid->sched = AH_FALSE;
				ath_tgt_tid_drain(sc,tid);
			}
		}

	sc->sc_tx_draining = 0;
  907ada:	252d01        	addmi	a5, a2, 0x100
  907add:	275024        	l8ui	a7, a5, 36
  907ae0:	26fabf        	movi	a6, -65
  907ae3:	067601        	and	a6, a7, a6
  907ae6:	265424        	s8i	a6, a5, 36
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	HAL_BOOL b = (HAL_BOOL) *(a_int32_t *)data;

	ath_draintxq(Context, b);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  907ae9:	c0d0      	movi.n	a13, 0
  907aeb:	8a23      	l32i.n	a10, a2, 12
  907aed:	db30      	mov.n	a11, a3
  907aef:	dc40      	mov.n	a12, a4
  907af1:	ded0      	mov.n	a14, a13
  907af3:	5bfe0d        	call8	907328 <wmi_cmd_rsp>
  907af6:	d10f      	retw.n

00907af8 <ath_tx_draintxq_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_tx_draintxq_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
				A_UINT8 *data, a_int32_t datalen)
{
  907af8:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint32_t q = *(a_uint32_t *)data;
	struct ath_txq *txq = NULL;

	q = adf_os_ntohl(q);
	txq = ATH_TXQ(sc, q);
  907afb:	8b50      	l32i.n	a11, a5, 0
	ah->ah_stopTxDma(ah, txq->axq_qnum);
}

static void owltgt_txq_drain(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	owltgt_tx_processq(sc, txq, OWL_TXQ_STOPPED);
  907afd:	da20      	mov.n	a10, a2
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint32_t q = *(a_uint32_t *)data;
	struct ath_txq *txq = NULL;

	q = adf_os_ntohl(q);
	txq = ATH_TXQ(sc, q);
  907aff:	2bbc1e        	addi	a11, a11, 30
  907b02:	0bbb11        	slli	a11, a11, 5
  907b05:	ab2b      	add.n	a11, a2, a11
	ah->ah_stopTxDma(ah, txq->axq_qnum);
}

static void owltgt_txq_drain(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	owltgt_tx_processq(sc, txq, OWL_TXQ_STOPPED);
  907b07:	2bbc0c        	addi	a11, a11, 12
  907b0a:	2c0a01        	movi	a12, 1
  907b0d:	580bd7        	call8	90aa6c <owltgt_tx_processq>
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_tx_draintxq_tgt(void *Context, A_UINT16 Command, A_UINT16 SeqNo,
				A_UINT8 *data, a_int32_t datalen)
{
  907b10:	03034f        	extui	a3, a3, 0, 16
  907b13:	04044f        	extui	a4, a4, 0, 16

	q = adf_os_ntohl(q);
	txq = ATH_TXQ(sc, q);

	ath_tx_draintxq(sc, txq);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  907b16:	c0d0      	movi.n	a13, 0
  907b18:	8a23      	l32i.n	a10, a2, 12
  907b1a:	db30      	mov.n	a11, a3
  907b1c:	dc40      	mov.n	a12, a4
  907b1e:	0dde02        	or	a14, a13, a13
  907b21:	5bfe01        	call8	907328 <wmi_cmd_rsp>
  907b24:	d10f      	retw.n
	...

00907b28 <ath_aborttx_dma_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_aborttx_dma_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907b28:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  907b2b:	282d05        	addmi	a8, a2, 0x500
  907b2e:	8a8b      	l32i.n	a10, a8, 44
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_aborttx_dma_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907b30:	03034f        	extui	a3, a3, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_abortTxDma(sc->sc_ah);
  907b33:	28a20e        	l32i	a8, a10, 56
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_aborttx_dma_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907b36:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_abortTxDma(sc->sc_ah);
  907b39:	0b8000        	callx8	a8
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  907b3c:	c0d0      	movi.n	a13, 0
  907b3e:	8a23      	l32i.n	a10, a2, 12
  907b40:	db30      	mov.n	a11, a3
  907b42:	dc40      	mov.n	a12, a4
  907b44:	ded0      	mov.n	a14, a13
  907b46:	5bfdf8        	call8	907328 <wmi_cmd_rsp>
  907b49:	d10f      	retw.n
	...

00907b4c <ath_stop_tx_dma_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_stop_tx_dma_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907b4c:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  907b4f:	292d05        	addmi	a9, a2, 0x500
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_stop_tx_dma_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907b52:	03034f        	extui	a3, a3, 0, 16
  907b55:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  907b58:	8a9b      	l32i.n	a10, a9, 44
	a_uint32_t q;

	if (data)
  907b5a:	c850      	beqz.n	a5, 907b5e <ath_stop_tx_dma_tgt+0x12>
		q = *(a_uint32_t *)data;
  907b5c:	8b50      	l32i.n	a11, a5, 0

	q = adf_os_ntohl(q);
	ah->ah_stopTxDma(ah, q);
  907b5e:	85ad      	l32i.n	a5, a10, 52
  907b60:	0b5000        	callx8	a5
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  907b63:	c0d0      	movi.n	a13, 0
  907b65:	8a23      	l32i.n	a10, a2, 12
  907b67:	db30      	mov.n	a11, a3
  907b69:	dc40      	mov.n	a12, a4
  907b6b:	ded0      	mov.n	a14, a13
  907b6d:	5bfdee        	call8	907328 <wmi_cmd_rsp>
  907b70:	d10f      	retw.n
	...

00907b74 <ath_aborttxq_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_aborttxq_tgt(void *Context, A_UINT16 Command,
			     A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907b74:	6c1004        	entry	a1, 32
  907b77:	03034f        	extui	a3, a3, 0, 16
  907b7a:	04044f        	extui	a4, a4, 0, 16
  907b7d:	250a00        	movi	a5, 0

	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint16_t i;

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++) {
		if (ATH_TXQ_SETUP(sc, i))
  907b80:	282d03        	addmi	a8, a2, 0x300
  907b83:	2880c8        	l8ui	a8, a8, 200
  907b86:	005004        	ssr	a5
  907b89:	08081b        	sra	a8, a8
  907b8c:	7f8710        	bbci	a8, 31, 907ba0 <ath_aborttxq_tgt+0x2c>
			ath_tx_draintxq(sc, ATH_TXQ(sc,i));
  907b8f:	2b5c1e        	addi	a11, a5, 30
  907b92:	0bbb11        	slli	a11, a11, 5
  907b95:	ab2b      	add.n	a11, a2, a11
	ah->ah_stopTxDma(ah, txq->axq_qnum);
}

static void owltgt_txq_drain(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	owltgt_tx_processq(sc, txq, OWL_TXQ_STOPPED);
  907b97:	da20      	mov.n	a10, a2
  907b99:	bcbb      	addi.n	a11, a11, 12
  907b9b:	c0c1      	movi.n	a12, 1
  907b9d:	580bb3        	call8	90aa6c <owltgt_tx_processq>
  907ba0:	b155      	addi.n	a5, a5, 1
{

	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	a_uint16_t i;

	for (i = 0; i < HAL_NUM_TX_QUEUES; i++) {
  907ba2:	6959da        	bnei	a5, 10, 907b80 <ath_aborttxq_tgt+0xc>
		if (ATH_TXQ_SETUP(sc, i))
			ath_tx_draintxq(sc, ATH_TXQ(sc,i));
	}

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  907ba5:	c0d0      	movi.n	a13, 0
  907ba7:	8a23      	l32i.n	a10, a2, 12
  907ba9:	db30      	mov.n	a11, a3
  907bab:	dc40      	mov.n	a12, a4
  907bad:	ded0      	mov.n	a14, a13
  907baf:	5bfdde        	call8	907328 <wmi_cmd_rsp>
  907bb2:	d10f      	retw.n

00907bb4 <ath_init_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo,NULL, 0);
}

static void ath_init_tgt(void *Context, A_UINT16 Command,
			 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907bb4:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  907bb7:	252d05        	addmi	a5, a2, 0x500
  907bba:	855b      	l32i.n	a5, a5, 44

	sc->sc_imask = HAL_INT_RX | HAL_INT_TX
		| HAL_INT_RXEOL | HAL_INT_RXORN
		| HAL_INT_FATAL | HAL_INT_GLOBAL;

	sc->sc_imask |= HAL_INT_GTT;
  907bbc:	1872a8        	l32r	a8, 8e465c <vdesc_module_install+0x520>

	if (ath_hal_getcapability(ah, HAL_CAP_HT))
  907bbf:	055a02        	or	a10, a5, a5

	sc->sc_imask = HAL_INT_RX | HAL_INT_TX
		| HAL_INT_RXEOL | HAL_INT_RXORN
		| HAL_INT_FATAL | HAL_INT_GLOBAL;

	sc->sc_imask |= HAL_INT_GTT;
  907bc2:	2826c4        	s32i	a8, a2, 0x310

	if (ath_hal_getcapability(ah, HAL_CAP_HT))
  907bc5:	c0b5      	movi.n	a11, 5
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo,NULL, 0);
}

static void ath_init_tgt(void *Context, A_UINT16 Command,
			 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907bc7:	03034f        	extui	a3, a3, 0, 16
  907bca:	04044f        	extui	a4, a4, 0, 16
		| HAL_INT_RXEOL | HAL_INT_RXORN
		| HAL_INT_FATAL | HAL_INT_GLOBAL;

	sc->sc_imask |= HAL_INT_GTT;

	if (ath_hal_getcapability(ah, HAL_CAP_HT))
  907bcd:	5bf4d6        	call8	904f28 <ath_hal_getcapability>
  907bd0:	c8aa      	beqz.n	a10, 907bde <ath_init_tgt+0x2a>
		sc->sc_imask |= HAL_INT_CST;
  907bd2:	2922c4        	l32i	a9, a2, 0x310
  907bd5:	187268        	l32r	a8, 8e4578 <vdesc_module_install+0x43c>
  907bd8:	089802        	or	a8, a9, a8
  907bdb:	2826c4        	s32i	a8, a2, 0x310
  907bde:	2a2246        	l32i	a10, a2, 0x118
  907be1:	1b7287        	l32r	a11, 8e4600 <vdesc_module_install+0x4c4>
  907be4:	5bf9f9        	call8	9063cc <__adf_os_setup_intr>

	adf_os_setup_intr(sc->sc_dev, ath_intr);
	ah->ah_setInterrupts(ah, sc->sc_imask);
  907be7:	2b22c4        	l32i	a11, a2, 0x310
  907bea:	285228        	l32i	a8, a5, 160
  907bed:	da50      	mov.n	a10, a5
  907bef:	0b8000        	callx8	a8

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
  907bf2:	c0d0      	movi.n	a13, 0
  907bf4:	8a23      	l32i.n	a10, a2, 12
  907bf6:	db30      	mov.n	a11, a3
  907bf8:	dc40      	mov.n	a12, a4
  907bfa:	0dde02        	or	a14, a13, a13
  907bfd:	5bfdca        	call8	907328 <wmi_cmd_rsp>
  907c00:	d10f      	retw.n
	...

00907c04 <ath_enable_intr_tgt>:
/* WMI Commands */
/****************/

static void ath_enable_intr_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907c04:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  907c07:	292d05        	addmi	a9, a2, 0x500
/* WMI Commands */
/****************/

static void ath_enable_intr_tgt(void *Context, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907c0a:	03034f        	extui	a3, a3, 0, 16
  907c0d:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  907c10:	8a9b      	l32i.n	a10, a9, 44
	a_uint32_t intr;

	if (data)
  907c12:	645002        	beqz	a5, 907c18 <ath_enable_intr_tgt+0x14>
		intr = (*(a_uint32_t *)data);
  907c15:	285200        	l32i	a8, a5, 0

	intr = adf_os_ntohl(intr);

	if (intr & HAL_INT_SWBA) {
  907c18:	19720c        	l32r	a9, 8e4448 <vdesc_module_install+0x30c>
  907c1b:	2522c4        	l32i	a5, a2, 0x310
  907c1e:	798006        	bnone	a8, a9, 907c28 <ath_enable_intr_tgt+0x24>
		sc->sc_imask |= HAL_INT_SWBA;
  907c21:	095502        	or	a5, a5, a9
  907c24:	600006        	j	907c2e <ath_enable_intr_tgt+0x2a>
  907c27:	001972        	excw
	} else {
		sc->sc_imask &= ~HAL_INT_SWBA;
  907c2a:	a909      	add.n	a9, a0, a9
  907c2c:	550125        	call4	9480c4 <_etext+0x3d22b>
  907c2f:	26c415        	s8i	a6, a12, 21
	}

	if (intr & HAL_INT_BMISS) {
  907c32:	72aa75        	bge	a10, a2, 907cab <handle_echo_command+0xb>
  907c35:	8008      	l32i.n	a0, a0, 32
		sc->sc_imask |= HAL_INT_BMISS;
  907c37:	2822c4        	l32i	a8, a2, 0x310
  907c3a:	058502        	or	a5, a8, a5
  907c3d:	2526c4        	s32i	a5, a2, 0x310
	}

	ah->ah_setInterrupts(ah, sc->sc_imask);
  907c40:	2b22c4        	l32i	a11, a2, 0x310
  907c43:	25a228        	l32i	a5, a10, 160
  907c46:	0b5000        	callx8	a5
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo,NULL, 0);
  907c49:	c0d0      	movi.n	a13, 0
  907c4b:	8a23      	l32i.n	a10, a2, 12
  907c4d:	db30      	mov.n	a11, a3
  907c4f:	dc40      	mov.n	a12, a4
  907c51:	ded0      	mov.n	a14, a13
  907c53:	5bfdb5        	call8	907328 <wmi_cmd_rsp>
  907c56:	d10f      	retw.n

00907c58 <ath_disable_intr_tgt>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_disable_intr_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907c58:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;
  907c5b:	282d05        	addmi	a8, a2, 0x500
  907c5e:	8a8b      	l32i.n	a10, a8, 44

	ah->ah_setInterrupts(ah, 0);
  907c60:	2b0a00        	movi	a11, 0
  907c63:	28a228        	l32i	a8, a10, 160
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_disable_intr_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907c66:	03034f        	extui	a3, a3, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_setInterrupts(ah, 0);
  907c69:	0b8000        	callx8	a8
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, NULL, 0);
}

static void ath_disable_intr_tgt(void *Context, A_UINT16 Command,
				 A_UINT16 SeqNo, A_UINT8 *data, a_int32_t datalen)
{
  907c6c:	04044f        	extui	a4, a4, 0, 16
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct ath_hal *ah = sc->sc_ah;

	ah->ah_setInterrupts(ah, 0);
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo,NULL, 0);
  907c6f:	c0d0      	movi.n	a13, 0
  907c71:	8a23      	l32i.n	a10, a2, 12
  907c73:	db30      	mov.n	a11, a3
  907c75:	dc40      	mov.n	a12, a4
  907c77:	ded0      	mov.n	a14, a13
  907c79:	5bfdab        	call8	907328 <wmi_cmd_rsp>
  907c7c:	d10f      	retw.n
	...

00907c80 <ath_get_tgt_version>:
	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &stats, sizeof(stats));
}

static void ath_get_tgt_version(void *Context,A_UINT16 Command, A_UINT16 SeqNo,
				A_UINT8 *data, a_int32_t datalen)
{
  907c80:	6c1006        	entry	a1, 48
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_fw_version ver;

	ver.major = ATH_VERSION_MAJOR;
  907c83:	c081      	movi.n	a8, 1
	ver.minor = ATH_VERSION_MINOR;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
  907c85:	8a23      	l32i.n	a10, a2, 12
				A_UINT8 *data, a_int32_t datalen)
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_fw_version ver;

	ver.major = ATH_VERSION_MAJOR;
  907c87:	281500        	s16i	a8, a1, 0
	ver.minor = ATH_VERSION_MINOR;

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
  907c8a:	030b4f        	extui	a11, a3, 0, 16
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_fw_version ver;

	ver.major = ATH_VERSION_MAJOR;
	ver.minor = ATH_VERSION_MINOR;
  907c8d:	c084      	movi.n	a8, 4

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
  907c8f:	040c4f        	extui	a12, a4, 0, 16
  907c92:	dd10      	mov.n	a13, a1
  907c94:	c0e4      	movi.n	a14, 4
{
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)Context;
	struct wmi_fw_version ver;

	ver.major = ATH_VERSION_MAJOR;
	ver.minor = ATH_VERSION_MINOR;
  907c96:	281501        	s16i	a8, a1, 2

	wmi_cmd_rsp(sc->tgt_wmi_handle, Command, SeqNo, &ver, sizeof(ver));
  907c99:	5bfda3        	call8	907328 <wmi_cmd_rsp>
  907c9c:	d10f      	retw.n
	...

00907ca0 <handle_echo_command>:
	adf_os_mem_free(sc);
}

static void handle_echo_command(void *pContext, A_UINT16 Command,
				A_UINT16 SeqNo, A_UINT8 *buffer, a_int32_t Length)
{
  907ca0:	6c1004        	entry	a1, 32
	wmi_cmd_rsp(pContext, WMI_ECHO_CMDID, SeqNo, buffer, Length);
  907ca3:	da20      	mov.n	a10, a2
  907ca5:	c0b1      	movi.n	a11, 1
  907ca7:	040c4f        	extui	a12, a4, 0, 16
  907caa:	dd50      	mov.n	a13, a5
  907cac:	de60      	mov.n	a14, a6
  907cae:	5bfd9e        	call8	907328 <wmi_cmd_rsp>
  907cb1:	d10f      	retw.n
	...

00907cb4 <ath_get_minrateidx>:
			sc->sc_sta[i].an_valid = 0;
	}
}

a_uint8_t ath_get_minrateidx(struct ath_softc_tgt *sc, struct ath_vap_target *avp)
{
  907cb4:	6c1004        	entry	a1, 32
	if (sc->sc_curmode == IEEE80211_MODE_11NG)
  907cb7:	2822c2        	l32i	a8, a2, 0x308
  907cba:	698104        	bnei	a8, 1, 907cc2 <ath_get_minrateidx+0xe>
		return avp->av_minrateidx[0];
  907cbd:	223040        	l8ui	a2, a3, 64
  907cc0:	d10f      	retw.n
	else if (sc->sc_curmode == IEEE80211_MODE_11NA)
		return avp->av_minrateidx[1];

	return 0;
  907cc2:	c020      	movi.n	a2, 0

a_uint8_t ath_get_minrateidx(struct ath_softc_tgt *sc, struct ath_vap_target *avp)
{
	if (sc->sc_curmode == IEEE80211_MODE_11NG)
		return avp->av_minrateidx[0];
	else if (sc->sc_curmode == IEEE80211_MODE_11NA)
  907cc4:	728902        	bne	a8, a2, 907cca <ath_get_minrateidx+0x16>
		return avp->av_minrateidx[1];
  907cc7:	223041        	l8ui	a2, a3, 65

	return 0;
}
  907cca:	d10f      	retw.n

00907ccc <tgt_HTCRecv_beaconhandler>:
#undef N
}

static void tgt_HTCRecv_beaconhandler(HTC_ENDPOINT_ID EndPt, adf_nbuf_t hdr_buf,
				      adf_nbuf_t buf, void *ServiceCtx)
{
  907ccc:	6c1018        	entry	a1, 192
}

static void ath_tgt_send_beacon(struct ath_softc_tgt *sc, adf_nbuf_t bc_hdr,
				adf_nbuf_t nbuf, HTC_ENDPOINT_ID EndPt)
{
	struct ath_hal *ah = sc->sc_ah;
  907ccf:	265d05        	addmi	a6, a5, 0x500
  907cd2:	866b      	l32i.n	a6, a6, 44
	ath_beacon_hdr_t *bhdr;
	struct ieee80211vap_target  *vap;
	a_uint32_t anblen;
	struct ieee80211_frame *wh;

	if (!bc_hdr) {
  907cd4:	cd30      	bnez.n	a3, 907ce8 <tgt_HTCRecv_beaconhandler+0x1c>
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  907cd6:	da40      	mov.n	a10, a4
  907cd8:	2b1c74        	addi	a11, a1, 116
  907cdb:	2c1c70        	addi	a12, a1, 112
  907cde:	5bee6a        	call8	903688 <__adf_nbuf_peek_header>
		adf_nbuf_peek_header(nbuf, &anbdata, &anblen);
		bhdr = (ath_beacon_hdr_t *)anbdata;
  907ce1:	27121d        	l32i	a7, a1, 116
  907ce4:	60000e        	j	907cf6 <tgt_HTCRecv_beaconhandler+0x2a>
  907ce7:	001871        	excw
	} else {
		adf_os_print("found bc_hdr! 0x%x\n", bc_hdr);
  907cea:	821a      	l32i.n	a2, a1, 40
  907cec:	72ab28        	bgeu	a10, a2, 907d18 <tgt_HTCRecv_beaconhandler+0x4c>
  907cef:	8212      	l32i.n	a2, a1, 8
  907cf1:	db30      	mov.n	a11, a3
  907cf3:	0b8000        	callx8	a8
	}

	vap_index = bhdr->vap_index;
  907cf6:	277000        	l8ui	a7, a7, 0
	adf_os_assert(vap_index < TARGET_VAP_MAX);
  907cf9:	6e7204        	bltui	a7, 2, 907d01 <tgt_HTCRecv_beaconhandler+0x35>
  907cfc:	63fffc        	j	907cfc <tgt_HTCRecv_beaconhandler+0x30>
  907cff:	0000da        	excw
 *         or NULL if there is not sufficient data to pull.
 */
static inline a_uint8_t *
adf_nbuf_pull_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_pull_head(buf, size);
  907d02:	40c0b4        	excw
  907d05:	5bedb8        	call8	9033e8 <__adf_nbuf_pull_head>
	vap = &sc->sc_vap[vap_index].av_vap;

	wh = (struct ieee80211_frame *)adf_nbuf_pull_head(nbuf,
						  sizeof(ath_beacon_hdr_t));

	bf = sc->sc_vap[vap_index].av_bcbuf;
  907d08:	0c7311        	slli	a3, a7, 4
  907d0b:	a733      	add.n	a3, a3, a7
  907d0d:	1872a6        	l32r	a8, 8e47a8 <vdesc_module_install+0x66c>
  907d10:	05330a        	addx4	a3, a3, a5
  907d13:	a833      	add.n	a3, a3, a8
  907d15:	8333      	l32i.n	a3, a3, 12
	adf_os_assert(bf);
  907d17:	cc31      	bnez.n	a3, 907d1c <tgt_HTCRecv_beaconhandler+0x50>
  907d19:	63fffc        	j	907d19 <tgt_HTCRecv_beaconhandler+0x4d>
	bf->bf_endpt = EndPt;
  907d1c:	223623        	s32i	a2, a3, 140

	if (bf->bf_skb) {
  907d1f:	8238      	l32i.n	a2, a3, 32
  907d21:	c92f      	beqz.n	a2, 907d44 <tgt_HTCRecv_beaconhandler+0x78>
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  907d23:	2a5246        	l32i	a10, a5, 0x118
  907d26:	8b30      	l32i.n	a11, a3, 0
  907d28:	c0c0      	movi.n	a12, 0
  907d2a:	5bede9        	call8	9034d0 <__adf_nbuf_unmap>
 *         or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_push_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_push_head(buf, size);
  907d2d:	8a38      	l32i.n	a10, a3, 32
  907d2f:	c0b4      	movi.n	a11, 4
  907d31:	5beda2        	call8	9033bc <__adf_nbuf_push_head>
		adf_nbuf_unmap(sc->sc_dev, bf->bf_dmamap, ADF_OS_DMA_TO_DEVICE);
		adf_nbuf_push_head(bf->bf_skb, sizeof(ath_beacon_hdr_t));
		ath_free_tx_skb(sc->tgt_htc_handle, bf->bf_endpt, bf->bf_skb);
  907d34:	127182        	l32r	a2, 8e433c <vdesc_module_install+0x200>
  907d37:	8a52      	l32i.n	a10, a5, 8
  907d39:	222287        	l32i	a2, a2, 0x21c
  907d3c:	2b3223        	l32i	a11, a3, 140
  907d3f:	8c38      	l32i.n	a12, a3, 32
  907d41:	0b2000        	callx8	a2
adf_nbuf_map(adf_os_device_t        osdev, 
             adf_os_dma_map_t       bmap, 
             adf_nbuf_t             buf, 
             adf_os_dma_dir_t       dir)
{
    return __adf_nbuf_map(osdev, bmap, buf, dir);
  907d44:	8b30      	l32i.n	a11, a3, 0
  907d46:	2a5246        	l32i	a10, a5, 0x118
  907d49:	c0d0      	movi.n	a13, 0
  907d4b:	dc40      	mov.n	a12, a4
	}

	bf->bf_skb = nbuf;
  907d4d:	9438      	s32i.n	a4, a3, 32
  907d4f:	5beddd        	call8	9034c4 <__adf_nbuf_map>
 * @param[out] sg   map info
 */
static inline void
adf_nbuf_dmamap_info(adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
    __adf_nbuf_dmamap_info(bmap, sg);
  907d52:	8a30      	l32i.n	a10, a3, 0
  907d54:	b43b      	addi.n	a11, a3, 4
  907d56:	5bede3        	call8	9034e4 <__adf_nbuf_dmamap_info>
 */
static void ath_beacon_setup(struct ath_softc_tgt *sc,
			     struct ath_tx_buf *bf,
			     struct ath_vap_target *avp)
{
	adf_nbuf_t skb = bf->bf_skb;
  907d59:	8238      	l32i.n	a2, a3, 32
	struct ath_hal *ah = sc->sc_ah;
	struct ath_tx_desc *ds;
	a_int32_t flags;
	const HAL_RATE_TABLE *rt;
	a_uint8_t rix, rate;
	HAL_11N_RATE_SERIES series[4] = {{ 0 }};
  907d5b:	c5c0      	movi.n	a12, 80
 */
static void ath_beacon_setup(struct ath_softc_tgt *sc,
			     struct ath_tx_buf *bf,
			     struct ath_vap_target *avp)
{
	adf_nbuf_t skb = bf->bf_skb;
  907d5d:	221620        	s32i	a2, a1, 128
	struct ath_hal *ah = sc->sc_ah;
	struct ath_tx_desc *ds;
	a_int32_t flags;
	const HAL_RATE_TABLE *rt;
	a_uint8_t rix, rate;
	HAL_11N_RATE_SERIES series[4] = {{ 0 }};
  907d60:	2a1c20        	addi	a10, a1, 32
static void ath_beacon_setup(struct ath_softc_tgt *sc,
			     struct ath_tx_buf *bf,
			     struct ath_vap_target *avp)
{
	adf_nbuf_t skb = bf->bf_skb;
	struct ath_hal *ah = sc->sc_ah;
  907d63:	225d05        	addmi	a2, a5, 0x500
	struct ath_tx_desc *ds;
	a_int32_t flags;
	const HAL_RATE_TABLE *rt;
	a_uint8_t rix, rate;
	HAL_11N_RATE_SERIES series[4] = {{ 0 }};
  907d66:	c0b0      	movi.n	a11, 0
static void ath_beacon_setup(struct ath_softc_tgt *sc,
			     struct ath_tx_buf *bf,
			     struct ath_vap_target *avp)
{
	adf_nbuf_t skb = bf->bf_skb;
	struct ath_hal *ah = sc->sc_ah;
  907d68:	842b      	l32i.n	a4, a2, 44
	struct ath_tx_desc *ds;
	a_int32_t flags;
	const HAL_RATE_TABLE *rt;
	a_uint8_t rix, rate;
	HAL_11N_RATE_SERIES series[4] = {{ 0 }};
  907d6a:	5b750c        	call8	8e519c <memset>

	flags = HAL_TXDESC_NOACK;

	ds = bf->bf_desc;
  907d6d:	823c      	l32i.n	a2, a3, 48
	ds->ds_link = 0;
  907d6f:	c080      	movi.n	a8, 0
  907d71:	c0a0      	movi.n	a10, 0
  907d73:	282400        	s8i	a8, a2, 0
  907d76:	2a2401        	s8i	a10, a2, 1
  907d79:	2a2402        	s8i	a10, a2, 2
  907d7c:	2a2403        	s8i	a10, a2, 3
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;
  907d7f:	2a3008        	l8ui	a10, a3, 8
	bf->bf_skb = nbuf;

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, nbuf, ADF_OS_DMA_TO_DEVICE);
	adf_nbuf_dmamap_info(bf->bf_dmamap,&bf->bf_dmamap_info);

	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
  907d82:	0c7b11        	slli	a11, a7, 4

	flags = HAL_TXDESC_NOACK;

	ds = bf->bf_desc;
	ds->ds_link = 0;
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;
  907d85:	2a2404        	s8i	a10, a2, 4
  907d88:	2a3009        	l8ui	a10, a3, 9
	bf->bf_skb = nbuf;

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, nbuf, ADF_OS_DMA_TO_DEVICE);
	adf_nbuf_dmamap_info(bf->bf_dmamap,&bf->bf_dmamap_info);

	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
  907d8b:	a7bb      	add.n	a11, a11, a7

	flags = HAL_TXDESC_NOACK;

	ds = bf->bf_desc;
	ds->ds_link = 0;
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;
  907d8d:	2a2405        	s8i	a10, a2, 5
  907d90:	2a300a        	l8ui	a10, a3, 10

	rix = ath_get_minrateidx(sc, avp);
	rt  = sc->sc_currates;
	rate = rt->info[rix].rateCode;

	ah->ah_setupTxDesc(ds
  907d93:	c071      	movi.n	a7, 1

	flags = HAL_TXDESC_NOACK;

	ds = bf->bf_desc;
	ds->ds_link = 0;
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;
  907d95:	2a2406        	s8i	a10, a2, 6
  907d98:	2a300b        	l8ui	a10, a3, 11
  907d9b:	2a2407        	s8i	a10, a2, 7
	bf->bf_skb = nbuf;

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, nbuf, ADF_OS_DMA_TO_DEVICE);
	adf_nbuf_dmamap_info(bf->bf_dmamap,&bf->bf_dmamap_info);

	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
  907d9e:	1a72a2        	l32r	a10, 8e4828 <vdesc_module_install+0x6ec>

	ds = bf->bf_desc;
	ds->ds_link = 0;
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;

	rix = ath_get_minrateidx(sc, avp);
  907da1:	281624        	s32i	a8, a1, 144
	bf->bf_skb = nbuf;

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, nbuf, ADF_OS_DMA_TO_DEVICE);
	adf_nbuf_dmamap_info(bf->bf_dmamap,&bf->bf_dmamap_info);

	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
  907da4:	0abb0a        	addx4	a11, a11, a10
  907da7:	ab5b      	add.n	a11, a5, a11

	ds = bf->bf_desc;
	ds->ds_link = 0;
	ds->ds_data = bf->bf_dmamap_info.dma_segs[0].paddr;

	rix = ath_get_minrateidx(sc, avp);
  907da9:	b8bb      	addi.n	a11, a11, 8
  907dab:	da50      	mov.n	a10, a5
  907dad:	5bffc1        	call8	907cb4 <ath_get_minrateidx>
	rt  = sc->sc_currates;
	rate = rt->info[rix].rateCode;
  907db0:	295281        	l32i	a9, a5, 0x204
  907db3:	b2aa      	addi.n	a10, a10, 2
  907db5:	0caa11        	slli	a10, a10, 4
  907db8:	aa99      	add.n	a9, a9, a10
  907dba:	299010        	l8ui	a9, a9, 16
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  907dbd:	2a1220        	l32i	a10, a1, 128
  907dc0:	291621        	s32i	a9, a1, 132

	ah->ah_setupTxDesc(ds
  907dc3:	294217        	l32i	a9, a4, 92
  907dc6:	291622        	s32i	a9, a1, 136
  907dc9:	5bee27        	call8	903668 <__adf_nbuf_len>
  907dcc:	281224        	l32i	a8, a1, 144
  907dcf:	b4ab      	addi.n	a11, a10, 4
  907dd1:	2a0aff        	movi	a10, 255
  907dd4:	291222        	l32i	a9, a1, 136
  907dd7:	9a11      	s32i.n	a10, a1, 4
  907dd9:	2f1221        	l32i	a15, a1, 132
  907ddc:	c0a2      	movi.n	a10, 2
  907dde:	9813      	s32i.n	a8, a1, 12
  907de0:	9814      	s32i.n	a8, a1, 16
  907de2:	9710      	s32i.n	a7, a1, 0
  907de4:	9a12      	s32i.n	a10, a1, 8
  907de6:	c1c8      	movi.n	a12, 24
  907de8:	c0d3      	movi.n	a13, 3
  907dea:	c3ef      	movi.n	a14, 63
  907dec:	da20      	mov.n	a10, a2
  907dee:	0b9000        	callx8	a9
			    , HAL_TXKEYIX_INVALID
			    , flags
			    , 0
			    , 0);

	ah->ah_fillTxDesc(ds
  907df1:	2f4218        	l32i	a15, a4, 96
  907df4:	2a1220        	l32i	a10, a1, 128
  907df7:	2f1623        	s32i	a15, a1, 140
  907dfa:	5bee1b        	call8	903668 <__adf_nbuf_len>
			   , asf_roundup(adf_nbuf_len(skb), 4)
  907dfd:	b3aa      	addi.n	a10, a10, 3
			    , HAL_TXKEYIX_INVALID
			    , flags
			    , 0
			    , 0);

	ah->ah_fillTxDesc(ds
  907dff:	2f1223        	l32i	a15, a1, 140
			   , asf_roundup(adf_nbuf_len(skb), 4)
  907e02:	0a2b14        	srli	a11, a10, 2
			    , HAL_TXKEYIX_INVALID
			    , flags
			    , 0
			    , 0);

	ah->ah_fillTxDesc(ds
  907e05:	dc70      	mov.n	a12, a7
  907e07:	dd70      	mov.n	a13, a7
  907e09:	de20      	mov.n	a14, a2
  907e0b:	022a02        	or	a10, a2, a2
  907e0e:	0ebb11        	slli	a11, a11, 2
  907e11:	0bf000        	callx8	a15
			   , asf_roundup(adf_nbuf_len(skb), 4)
			   , AH_TRUE
			   , AH_TRUE
			   , ds);

	series[0].Tries = 1;
  907e14:	9718      	s32i.n	a7, a1, 32
	series[0].Rate = rate;
	series[0].ChSel = sc->sc_ic.ic_tx_chainmask;
  907e16:	275d16        	addmi	a7, a5, 0x1600
	series[0].RateFlags = 0;
  907e19:	281224        	l32i	a8, a1, 144
			   , AH_TRUE
			   , AH_TRUE
			   , ds);

	series[0].Tries = 1;
	series[0].Rate = rate;
  907e1c:	291221        	l32i	a9, a1, 132
	series[0].ChSel = sc->sc_ic.ic_tx_chainmask;
  907e1f:	277026        	l8ui	a7, a7, 38
	series[0].RateFlags = 0;
	ah->ah_set11nRateScenario(ds, 0, 0, series, 4, 0);
  907e22:	244210        	l32i	a4, a4, 64
  907e25:	db80      	mov.n	a11, a8
  907e27:	dc80      	mov.n	a12, a8
			   , AH_TRUE
			   , AH_TRUE
			   , ds);

	series[0].Tries = 1;
	series[0].Rate = rate;
  907e29:	9919      	s32i.n	a9, a1, 36
	series[0].ChSel = sc->sc_ic.ic_tx_chainmask;
	series[0].RateFlags = 0;
  907e2b:	981c      	s32i.n	a8, a1, 48
	ah->ah_set11nRateScenario(ds, 0, 0, series, 4, 0);
  907e2d:	2d1c20        	addi	a13, a1, 32
  907e30:	c0e4      	movi.n	a14, 4
  907e32:	df80      	mov.n	a15, a8
  907e34:	da20      	mov.n	a10, a2
			   , AH_TRUE
			   , ds);

	series[0].Tries = 1;
	series[0].Rate = rate;
	series[0].ChSel = sc->sc_ic.ic_tx_chainmask;
  907e36:	27160b        	s32i	a7, a1, 44
	series[0].RateFlags = 0;
	ah->ah_set11nRateScenario(ds, 0, 0, series, 4, 0);
  907e39:	0b4000        	callx8	a4

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, nbuf, ADF_OS_DMA_TO_DEVICE);
	adf_nbuf_dmamap_info(bf->bf_dmamap,&bf->bf_dmamap_info);

	ath_beacon_setup(sc, bf, &sc->sc_vap[vap_index]);
	ah->ah_stopTxDma(ah, sc->sc_bhalq);
  907e3c:	255d01        	addmi	a5, a5, 0x100
  907e3f:	826d      	l32i.n	a2, a6, 52
  907e41:	2b501c        	l8ui	a11, a5, 28
  907e44:	da60      	mov.n	a10, a6
  907e46:	0b2000        	callx8	a2
	ah->ah_setTxDP(ah, sc->sc_bhalq, ATH_BUF_GET_DESC_PHY_ADDR(bf));
  907e49:	2b501c        	l8ui	a11, a5, 28
  907e4c:	826a      	l32i.n	a2, a6, 40
  907e4e:	8c3c      	l32i.n	a12, a3, 48
  907e50:	da60      	mov.n	a10, a6
  907e52:	0b2000        	callx8	a2
	ah->ah_startTxDma(ah, sc->sc_bhalq);
  907e55:	2b501c        	l8ui	a11, a5, 28
  907e58:	826c      	l32i.n	a2, a6, 48
  907e5a:	066a02        	or	a10, a6, a6
  907e5d:	0b2000        	callx8	a2
  907e60:	d10f      	retw.n
	...

00907e64 <ath_tgt_attach>:
	/* Start HTC messages exchange */
	HTC_Ready(sc->tgt_htc_handle);
}

a_int32_t ath_tgt_attach(a_uint32_t devid, struct ath_softc_tgt *sc, adf_os_device_t osdev)
{
  907e64:	6c100e        	entry	a1, 112
 * @return int
 */
static inline int 
__adf_os_pci_config_read8(adf_os_device_t osdev, int offset, a_uint8_t *val)
{
    (*val) = wlan_pci_config_read(offset, 1);
  907e67:	2b0a01        	movi	a11, 1
  907e6a:	2a0a0c        	movi	a10, 12
  907e6d:	5bef91        	call8	903cb4 <wlan_pci_config_read>
  907e70:	0a0a47        	extui	a10, a10, 0, 8
	a_uint8_t csz;

	adf_os_pci_config_read8(osdev, ATH_PCI_CACHE_LINE_SIZE, &csz);

	if (csz == 0)
		csz = 16;
  907e73:	c160      	movi.n	a6, 16
  907e75:	0a6a38        	moveqz	a10, a6, a10
	sc->sc_cachelsz = csz << 2;
  907e78:	0ea511        	slli	a5, a10, 2
 */
static inline void 
adf_os_init_bh(adf_os_handle_t  hdl, adf_os_bh_t  *bh,
               adf_os_defer_fn_t  func,void  *arg)
{
    __adf_os_init_bh(hdl, bh, func, arg);
  907e7b:	1b72ac        	l32r	a11, 8e492c <vdesc_module_install+0x7f0>
  907e7e:	2a3a14        	movi	a10, 0x314

	sc->sc_dev = osdev;
  907e81:	243646        	s32i	a4, a3, 0x118
	sc->sc_hdl = osdev;
  907e84:	243645        	s32i	a4, a3, 0x114
  907e87:	aa3a      	add.n	a10, a3, a10
  907e89:	dc30      	mov.n	a12, a3

	adf_os_pci_config_read8(osdev, ATH_PCI_CACHE_LINE_SIZE, &csz);

	if (csz == 0)
		csz = 16;
	sc->sc_cachelsz = csz << 2;
  907e8b:	253596        	s16i	a5, a3, 0x12c
  907e8e:	5bf9e8        	call8	906630 <__adf_os_init_bh$isra$4>
  907e91:	1b72ad        	l32r	a11, 8e4948 <vdesc_module_install+0x80c>
  907e94:	2a5a1c        	movi	a10, 0x51c
  907e97:	0a3a08        	add	a10, a3, a10
  907e9a:	033c02        	or	a12, a3, a3
  907e9d:	5bf9e4        	call8	906630 <__adf_os_init_bh$isra$4>
  907ea0:	1b72ae        	l32r	a11, 8e4958 <vdesc_module_install+0x81c>
  907ea3:	2a3a24        	movi	a10, 0x324
  907ea6:	aa3a      	add.n	a10, a3, a10
  907ea8:	dc30      	mov.n	a12, a3
  907eaa:	5bf9e1        	call8	906630 <__adf_os_init_bh$isra$4>
  907ead:	1b72af        	l32r	a11, 8e496c <vdesc_module_install+0x830>
  907eb0:	2a3a44        	movi	a10, 0x344
  907eb3:	0a3a08        	add	a10, a3, a10
  907eb6:	033c02        	or	a12, a3, a3
  907eb9:	5bf9dd        	call8	906630 <__adf_os_init_bh$isra$4>
	ATH_INIT_TQUEUE(sc->sc_dev, &sc->sc_txtq, owl_tgt_tx_tasklet, sc);
	ATH_INIT_TQUEUE(sc->sc_dev, &sc->sc_bmisstq, ath_bmiss_tasklet, sc);
	ATH_INIT_TQUEUE(sc->sc_dev, &sc->sc_fataltq, ath_fatal_tasklet, sc);

	flags |= AH_USE_EEPROM;
	ah = _ath_hal_attach_tgt(devid, sc, sc->sc_dev, flags, &status);
  907ebc:	2c3246        	l32i	a12, a3, 0x118
  907ebf:	da20      	mov.n	a10, a2
  907ec1:	033b02        	or	a11, a3, a3
  907ec4:	c0d1      	movi.n	a13, 1
  907ec6:	2e1c34        	addi	a14, a1, 52
  907ec9:	5bef32        	call8	903b94 <_ath_hal_attach_tgt>
  907ecc:	0aa402        	or	a4, a10, a10
	if (ah == NULL) {
  907ecf:	64a3b3        	beqz	a10, 908286 <ath_tgt_attach+0x422>
	HTC_CONFIG htc_conf;
	WMI_SVC_CONFIG wmiConfig;
	WMI_DISPATCH_TABLE *Magpie_Sys_Commands_Tbl;

	/* Init dynamic buf pool */
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);
  907ed2:	127182        	l32r	a2, 8e44dc <vdesc_module_install+0x3a0>
	ah = _ath_hal_attach_tgt(devid, sc, sc->sc_dev, flags, &status);
	if (ah == NULL) {
		error = ENXIO;
		goto bad;
	}
	sc->sc_ah = ah;
  907ed5:	273d05        	addmi	a7, a3, 0x500
	HTC_CONFIG htc_conf;
	WMI_SVC_CONFIG wmiConfig;
	WMI_DISPATCH_TABLE *Magpie_Sys_Commands_Tbl;

	/* Init dynamic buf pool */
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);
  907ed8:	25229e        	l32i	a5, a2, 0x278
	ah = _ath_hal_attach_tgt(devid, sc, sc->sc_dev, flags, &status);
	if (ah == NULL) {
		error = ENXIO;
		goto bad;
	}
	sc->sc_ah = ah;
  907edb:	2a760b        	s32i	a10, a7, 44
	HTC_CONFIG htc_conf;
	WMI_SVC_CONFIG wmiConfig;
	WMI_DISPATCH_TABLE *Magpie_Sys_Commands_Tbl;

	/* Init dynamic buf pool */
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);
  907ede:	2a3245        	l32i	a10, a3, 0x114
  907ee1:	0b5000        	callx8	a5

	/* Init target-side HIF */
	sc->tgt_hif_handle = HIF_init(0);
  907ee4:	252275        	l32i	a5, a2, 0x1d4
	HTC_CONFIG htc_conf;
	WMI_SVC_CONFIG wmiConfig;
	WMI_DISPATCH_TABLE *Magpie_Sys_Commands_Tbl;

	/* Init dynamic buf pool */
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);
  907ee7:	2a3600        	s32i	a10, a3, 0

	/* Init target-side HIF */
	sc->tgt_hif_handle = HIF_init(0);
  907eea:	2a0a00        	movi	a10, 0
  907eed:	0b5000        	callx8	a5

	/* Init target-side HTC */
	htc_conf.HIFHandle = sc->tgt_hif_handle;
	htc_conf.CreditSize = 320;
  907ef0:	251a40        	movi	a5, 0x140
  907ef3:	9514      	s32i.n	a5, a1, 16
	htc_conf.CreditNumber = ATH_TXBUF;
  907ef5:	c251      	movi.n	a5, 33
  907ef7:	9515      	s32i.n	a5, a1, 20
	htc_conf.OSHandle = sc->sc_hdl;
  907ef9:	253245        	l32i	a5, a3, 0x114

	/* Init dynamic buf pool */
	sc->pool_handle = BUF_Pool_init(sc->sc_hdl);

	/* Init target-side HIF */
	sc->tgt_hif_handle = HIF_init(0);
  907efc:	9a31      	s32i.n	a10, a3, 4

	/* Init target-side HTC */
	htc_conf.HIFHandle = sc->tgt_hif_handle;
	htc_conf.CreditSize = 320;
	htc_conf.CreditNumber = ATH_TXBUF;
	htc_conf.OSHandle = sc->sc_hdl;
  907efe:	9516      	s32i.n	a5, a1, 24
	htc_conf.PoolHandle = sc->pool_handle;
  907f00:	8530      	l32i.n	a5, a3, 0

	/* Init target-side HIF */
	sc->tgt_hif_handle = HIF_init(0);

	/* Init target-side HTC */
	htc_conf.HIFHandle = sc->tgt_hif_handle;
  907f02:	9a17      	s32i.n	a10, a1, 28
	htc_conf.CreditSize = 320;
	htc_conf.CreditNumber = ATH_TXBUF;
	htc_conf.OSHandle = sc->sc_hdl;
	htc_conf.PoolHandle = sc->pool_handle;
  907f04:	9518      	s32i.n	a5, a1, 32
	sc->tgt_htc_handle = HTC_init(htc_setup_comp, &htc_conf);
  907f06:	1a72b0        	l32r	a10, 8e49c8 <vdesc_module_install+0x88c>
  907f09:	252283        	l32i	a5, a2, 0x20c
  907f0c:	a61b      	add.n	a11, a1, a6
  907f0e:	0b5000        	callx8	a5
#if defined(PROJECT_MAGPIE)
	init_htc_handle = sc->tgt_htc_handle;
#endif

	tgt_reg_service(sc, &sc->htc_beacon_service, WMI_BEACON_SVC, tgt_HTCRecv_beaconhandler);
  907f11:	1d72b1        	l32r	a13, 8e49d8 <vdesc_module_install+0x89c>
  907f14:	a63b      	add.n	a11, a3, a6
	htc_conf.HIFHandle = sc->tgt_hif_handle;
	htc_conf.CreditSize = 320;
	htc_conf.CreditNumber = ATH_TXBUF;
	htc_conf.OSHandle = sc->sc_hdl;
	htc_conf.PoolHandle = sc->pool_handle;
	sc->tgt_htc_handle = HTC_init(htc_setup_comp, &htc_conf);
  907f16:	9a32      	s32i.n	a10, a3, 8
#if defined(PROJECT_MAGPIE)
	init_htc_handle = sc->tgt_htc_handle;
#endif

	tgt_reg_service(sc, &sc->htc_beacon_service, WMI_BEACON_SVC, tgt_HTCRecv_beaconhandler);
  907f18:	2c1a01        	movi	a12, 0x101
  907f1b:	da30      	mov.n	a10, a3
  907f1d:	5bf95d        	call8	906494 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_cab_service, WMI_CAB_SVC, tgt_HTCRecv_cabhandler);
  907f20:	1d72b2        	l32r	a13, 8e49e8 <vdesc_module_install+0x8ac>
  907f23:	da30      	mov.n	a10, a3
  907f25:	2b3c2c        	addi	a11, a3, 44
  907f28:	2c1a02        	movi	a12, 0x102
  907f2b:	5bf95a        	call8	906494 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_uapsd_service, WMI_UAPSD_SVC, tgt_HTCRecv_uapsdhandler);
  907f2e:	1d72b3        	l32r	a13, 8e49fc <vdesc_module_install+0x8c0>
  907f31:	da30      	mov.n	a10, a3
  907f33:	2b3c48        	addi	a11, a3, 72
  907f36:	2c1a03        	movi	a12, 0x103
  907f39:	5bf956        	call8	906494 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_mgmt_service, WMI_MGMT_SVC, tgt_HTCRecv_mgmthandler);
  907f3c:	1d72b4        	l32r	a13, 8e4a0c <vdesc_module_install+0x8d0>
  907f3f:	da30      	mov.n	a10, a3
  907f41:	2b3c64        	addi	a11, a3, 100
  907f44:	2c1a04        	movi	a12, 0x104
  907f47:	5bf953        	call8	906494 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_data_BE_service, WMI_DATA_BE_SVC, tgt_HTCRecvMessageHandler);
  907f4a:	1572b5        	l32r	a5, 8e4a20 <vdesc_module_install+0x8e4>
  907f4d:	2b0ab8        	movi	a11, 184
  907f50:	dd50      	mov.n	a13, a5
  907f52:	da30      	mov.n	a10, a3
  907f54:	0b3b08        	add	a11, a3, a11
  907f57:	2c1a07        	movi	a12, 0x107
  907f5a:	5bf94e        	call8	906494 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_data_BK_service, WMI_DATA_BK_SVC, tgt_HTCRecvMessageHandler);
  907f5d:	2b0ad4        	movi	a11, 212
  907f60:	dd50      	mov.n	a13, a5
  907f62:	da30      	mov.n	a10, a3
  907f64:	0b3b08        	add	a11, a3, a11
  907f67:	2c1a08        	movi	a12, 0x108
  907f6a:	5bf94a        	call8	906494 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_data_VI_service, WMI_DATA_VI_SVC, tgt_HTCRecvMessageHandler);
  907f6d:	2b0a9c        	movi	a11, 156
  907f70:	dd50      	mov.n	a13, a5
  907f72:	da30      	mov.n	a10, a3
  907f74:	0b3b08        	add	a11, a3, a11
  907f77:	2c1a06        	movi	a12, 0x106
  907f7a:	5bf946        	call8	906494 <tgt_reg_service>
	tgt_reg_service(sc, &sc->htc_data_VO_service, WMI_DATA_VO_SVC, tgt_HTCRecvMessageHandler);
  907f7d:	2b0a80        	movi	a11, 128
  907f80:	dd50      	mov.n	a13, a5
  907f82:	ab3b      	add.n	a11, a3, a11
  907f84:	2c1a05        	movi	a12, 0x105
  907f87:	da30      	mov.n	a10, a3
  907f89:	5bf942        	call8	906494 <tgt_reg_service>
 * @return Buffer pointer or NULL if there's not enough memory.
 */
static inline void *
adf_os_mem_alloc(adf_os_size_t size)
{
    return __adf_os_mem_alloc(size);
  907f8c:	da60      	mov.n	a10, a6
  907f8e:	5bf915        	call8	9063e4 <__adf_os_mem_alloc>
}
/* zero a memory buffer */
static inline void
__adf_os_mem_zero(void *buf, adf_os_size_t size)
{
    A_MEMZERO(buf,size);
  907f91:	8824      	l32i.n	a8, a2, 16
  907f93:	dc60      	mov.n	a12, a6
  907f95:	c0b0      	movi.n	a11, 0
  907f97:	d5a0      	mov.n	a5, a10
  907f99:	0b8000        	callx8	a8

	/* Init target-side WMI */
	Magpie_Sys_Commands_Tbl = (WMI_DISPATCH_TABLE *)adf_os_mem_alloc(sizeof(WMI_DISPATCH_TABLE));
	adf_os_mem_zero(Magpie_Sys_Commands_Tbl, sizeof(WMI_DISPATCH_TABLE));
	Magpie_Sys_Commands_Tbl->NumberOfEntries = WMI_DISPATCH_ENTRY_COUNT(Magpie_Sys_DispatchEntries);
  907f9c:	c280      	movi.n	a8, 32
  907f9e:	9852      	s32i.n	a8, a5, 8
	Magpie_Sys_Commands_Tbl->pTable = Magpie_Sys_DispatchEntries;
  907fa0:	1872b6        	l32r	a8, 8e4a78 <vdesc_module_install+0x93c>
  907fa3:	dc60      	mov.n	a12, a6
  907fa5:	9853      	s32i.n	a8, a5, 12
  907fa7:	8824      	l32i.n	a8, a2, 16
  907fa9:	c0b0      	movi.n	a11, 0
  907fab:	2a1c24        	addi	a10, a1, 36
  907fae:	0b8000        	callx8	a8

	adf_os_mem_zero(&wmiConfig, sizeof(WMI_SVC_CONFIG));
	wmiConfig.HtcHandle = sc->tgt_htc_handle;
  907fb1:	8632      	l32i.n	a6, a3, 8
	wmiConfig.PoolHandle = sc->pool_handle;
	wmiConfig.MaxCmdReplyEvts = ATH_WMI_MAX_CMD_REPLY;
	wmiConfig.MaxEventEvts = ATH_WMI_MAX_EVENTS;

	sc->tgt_wmi_handle = WMI_Init(&wmiConfig);
  907fb3:	2a1c24        	addi	a10, a1, 36
	adf_os_mem_zero(Magpie_Sys_Commands_Tbl, sizeof(WMI_DISPATCH_TABLE));
	Magpie_Sys_Commands_Tbl->NumberOfEntries = WMI_DISPATCH_ENTRY_COUNT(Magpie_Sys_DispatchEntries);
	Magpie_Sys_Commands_Tbl->pTable = Magpie_Sys_DispatchEntries;

	adf_os_mem_zero(&wmiConfig, sizeof(WMI_SVC_CONFIG));
	wmiConfig.HtcHandle = sc->tgt_htc_handle;
  907fb6:	9619      	s32i.n	a6, a1, 36
	wmiConfig.PoolHandle = sc->pool_handle;
  907fb8:	8630      	l32i.n	a6, a3, 0
  907fba:	961a      	s32i.n	a6, a1, 40
	wmiConfig.MaxCmdReplyEvts = ATH_WMI_MAX_CMD_REPLY;
  907fbc:	c062      	movi.n	a6, 2
  907fbe:	961b      	s32i.n	a6, a1, 44
	wmiConfig.MaxEventEvts = ATH_WMI_MAX_EVENTS;
  907fc0:	c068      	movi.n	a6, 8
  907fc2:	961c      	s32i.n	a6, a1, 48

	sc->tgt_wmi_handle = WMI_Init(&wmiConfig);
  907fc4:	262290        	l32i	a6, a2, 0x240
  907fc7:	0b6000        	callx8	a6
  907fca:	9a33      	s32i.n	a10, a3, 12
	Magpie_Sys_Commands_Tbl->pContext = sc;
	WMI_RegisterDispatchTable(sc->tgt_wmi_handle, Magpie_Sys_Commands_Tbl);
  907fcc:	262291        	l32i	a6, a2, 0x244
  907fcf:	db50      	mov.n	a11, a5
	wmiConfig.PoolHandle = sc->pool_handle;
	wmiConfig.MaxCmdReplyEvts = ATH_WMI_MAX_CMD_REPLY;
	wmiConfig.MaxEventEvts = ATH_WMI_MAX_EVENTS;

	sc->tgt_wmi_handle = WMI_Init(&wmiConfig);
	Magpie_Sys_Commands_Tbl->pContext = sc;
  907fd1:	9351      	s32i.n	a3, a5, 4
	WMI_RegisterDispatchTable(sc->tgt_wmi_handle, Magpie_Sys_Commands_Tbl);
  907fd3:	0b6000        	callx8	a6

	HTC_NotifyTargetInserted(sc->tgt_htc_handle);

	/* Start HTC messages exchange */
	HTC_Ready(sc->tgt_htc_handle);
  907fd6:	8a32      	l32i.n	a10, a3, 8
  907fd8:	222286        	l32i	a2, a2, 0x218
	}
	sc->sc_ah = ah;

	tgt_hif_htc_wmi_init(sc);

	sc->sc_bhalq = HAL_NUM_TX_QUEUES - 1;
  907fdb:	c059      	movi.n	a5, 9
	WMI_RegisterDispatchTable(sc->tgt_wmi_handle, Magpie_Sys_Commands_Tbl);

	HTC_NotifyTargetInserted(sc->tgt_htc_handle);

	/* Start HTC messages exchange */
	HTC_Ready(sc->tgt_htc_handle);
  907fdd:	0b2000        	callx8	a2
	return tsf64;
}

static a_int32_t ath_rate_setup(struct ath_softc_tgt *sc, a_uint32_t mode)
{
	struct ath_hal *ah = sc->sc_ah;
  907fe0:	8a7b      	l32i.n	a10, a7, 44
	}
	sc->sc_ah = ah;

	tgt_hif_htc_wmi_init(sc);

	sc->sc_bhalq = HAL_NUM_TX_QUEUES - 1;
  907fe2:	223d01        	addmi	a2, a3, 0x100
  907fe5:	25241c        	s8i	a5, a2, 28
	struct ath_hal *ah = sc->sc_ah;
	const HAL_RATE_TABLE *rt;

	switch (mode) {
	case IEEE80211_MODE_11NA:
		sc->sc_rates[mode] = ah->ah_getRateTable(ah, HAL_MODE_11NA);
  907fe8:	82a5      	l32i.n	a2, a10, 20
  907fea:	1b7229        	l32r	a11, 8e4890 <vdesc_module_install+0x754>
  907fed:	0b2000        	callx8	a2
  907ff0:	2a367f        	s32i	a10, a3, 0x1fc
	return tsf64;
}

static a_int32_t ath_rate_setup(struct ath_softc_tgt *sc, a_uint32_t mode)
{
	struct ath_hal *ah = sc->sc_ah;
  907ff3:	8a7b      	l32i.n	a10, a7, 44
	switch (mode) {
	case IEEE80211_MODE_11NA:
		sc->sc_rates[mode] = ah->ah_getRateTable(ah, HAL_MODE_11NA);
		break;
	case IEEE80211_MODE_11NG:
		sc->sc_rates[mode] = ah->ah_getRateTable(ah, HAL_MODE_11NG);
  907ff5:	1b7228        	l32r	a11, 8e4898 <vdesc_module_install+0x75c>
  907ff8:	82a5      	l32i.n	a2, a10, 20
  907ffa:	0b2000        	callx8	a2
  907ffd:	2a3680        	s32i	a10, a3, 0x200
	sc->sc_bhalq = HAL_NUM_TX_QUEUES - 1;

	ath_rate_setup(sc, IEEE80211_MODE_11NA);
	ath_rate_setup(sc, IEEE80211_MODE_11NG);

	sc->sc_rc = ath_rate_attach(sc);
  908000:	da30      	mov.n	a10, a3
  908002:	58036e        	call8	908dbc <ath_rate_attach>
  908005:	2a3648        	s32i	a10, a3, 0x120
	if (sc->sc_rc == NULL) {
  908008:	64a27a        	beqz	a10, 908286 <ath_tgt_attach+0x422>

	/* Start HTC messages exchange */
	HTC_Ready(sc->tgt_htc_handle);
}

a_int32_t ath_tgt_attach(a_uint32_t devid, struct ath_softc_tgt *sc, adf_os_device_t osdev)
  90800b:	1572a7        	l32r	a5, 8e4aa8 <vdesc_module_install+0x96c>
  90800e:	d230      	mov.n	a2, a3
  908010:	a535      	add.n	a5, a3, a5
  908012:	277a40        	movi	a7, 0x740
		error = EIO;
		goto bad2;
	}

	for (i=0; i < TARGET_NODE_MAX; i++) {
		sc->sc_sta[i].an_rcnode = adf_os_mem_alloc(sc->sc_rc->arc_space);
  908015:	263248        	l32i	a6, a3, 0x120
  908018:	2a6200        	l32i	a10, a6, 0

	/* Start HTC messages exchange */
	HTC_Ready(sc->tgt_htc_handle);
}

a_int32_t ath_tgt_attach(a_uint32_t devid, struct ath_softc_tgt *sc, adf_os_device_t osdev)
  90801b:	a726      	add.n	a6, a2, a7
  90801d:	5bf8f1        	call8	9063e4 <__adf_os_mem_alloc>
		error = EIO;
		goto bad2;
	}

	for (i=0; i < TARGET_NODE_MAX; i++) {
		sc->sc_sta[i].an_rcnode = adf_os_mem_alloc(sc->sc_rc->arc_space);
  908020:	9a60      	s32i.n	a10, a6, 0
  908022:	262a0c        	movi	a6, 0x20c
  908025:	a622      	add.n	a2, a2, a6
	if (sc->sc_rc == NULL) {
		error = EIO;
		goto bad2;
	}

	for (i=0; i < TARGET_NODE_MAX; i++) {
  908027:	7529ea        	bne	a2, a5, 908015 <ath_tgt_attach+0x1b1>
	((_dd)->dd_desc_paddr + ((caddr_t)(_ds) - (caddr_t)(_dd)->dd_desc))

	a_int32_t error;
	struct ath_tx_buf *bf;

	if(ath_numrxbufs == -1)
  90802a:	12729e        	l32r	a2, 8e4aa4 <vdesc_module_install+0x968>
  90802d:	8520      	l32i.n	a5, a2, 0
  90802f:	695005        	bnei	a5, -1, 908038 <ath_tgt_attach+0x1d4>
		ath_numrxbufs = ATH_RXBUF;
  908032:	250a0b        	movi	a5, 11
  908035:	252600        	s32i	a5, a2, 0

	if (ath_numrxdescs == -1)
  908038:	1272b7        	l32r	a2, 8e4b14 <vdesc_module_install+0x9d8>
  90803b:	8520      	l32i.n	a5, a2, 0
  90803d:	695003        	bnei	a5, -1, 908044 <ath_tgt_attach+0x1e0>
		ath_numrxdescs = ATH_RXDESC;
  908040:	c05b      	movi.n	a5, 11
  908042:	9520      	s32i.n	a5, a2, 0

	error = ath_descdma_setup(sc, &sc->sc_rxdma, (ath_bufhead *)&sc->sc_rxbuf,
  908044:	1772b7        	l32r	a7, 8e4b20 <vdesc_module_install+0x9e4>
  908047:	c524      	movi.n	a2, 84
  908049:	263a74        	movi	a6, 0x374
  90804c:	253a54        	movi	a5, 0x354
  90804f:	9210      	s32i.n	a2, a1, 0
  908051:	a636      	add.n	a6, a3, a6
  908053:	a535      	add.n	a5, a3, a5
  908055:	1d72b8        	l32r	a13, 8e4b38 <vdesc_module_install+0x9fc>
  908058:	8e70      	l32i.n	a14, a7, 0
  90805a:	da30      	mov.n	a10, a3
  90805c:	066b02        	or	a11, a6, a6
  90805f:	055c02        	or	a12, a5, a5
  908062:	2f0a68        	movi	a15, 104
  908065:	5bf9c9        	call8	90678c <ath_descdma_setup$constprop$20>
				  "rx", ath_numrxdescs, 1,
				  sizeof(struct ath_rx_buf),
				  sizeof(struct ath_rx_desc));
	if (error != 0)
  908068:	65a21a        	bnez	a10, 908286 <ath_tgt_attach+0x422>
	a_uint32_t i;
	struct ath_descdma *dd = &sc->sc_rxdma;
	struct ath_rx_desc *ds = (struct ath_rx_desc *)dd->dd_desc;
	struct ath_rx_desc *ds_prev = NULL;

	asf_tailq_init(&sc->sc_rxdesc);
  90806b:	283a64        	movi	a8, 0x364
  90806e:	a838      	add.n	a8, a3, a8
  908070:	2836da        	s32i	a8, a3, 0x368
	asf_tailq_init(&sc->sc_rxdesc_idle);
  908073:	283a5c        	movi	a8, 0x35c
  908076:	a838      	add.n	a8, a3, a8
  908078:	2836d8        	s32i	a8, a3, 0x360
	if (error != 0)
		return error;

	a_uint32_t i;
	struct ath_descdma *dd = &sc->sc_rxdma;
	struct ath_rx_desc *ds = (struct ath_rx_desc *)dd->dd_desc;
  90807b:	2232de        	l32i	a2, a3, 0x378
	struct ath_rx_desc *ds_prev = NULL;

	asf_tailq_init(&sc->sc_rxdesc);
  90807e:	2a36d9        	s32i	a10, a3, 0x364
	asf_tailq_init(&sc->sc_rxdesc_idle);
  908081:	2a36d7        	s32i	a10, a3, 0x35c
		return error;

	a_uint32_t i;
	struct ath_descdma *dd = &sc->sc_rxdma;
	struct ath_rx_desc *ds = (struct ath_rx_desc *)dd->dd_desc;
	struct ath_rx_desc *ds_prev = NULL;
  908084:	d8a0      	mov.n	a8, a10

	asf_tailq_init(&sc->sc_rxdesc);
	asf_tailq_init(&sc->sc_rxdesc_idle);

	for (i = 0; i < ath_numrxdescs; i++, ds++) {
  908086:	dca0      	mov.n	a12, a10
  908088:	6000be        	j	90814a <ath_tgt_attach+0x2e6>
  90808b:	00002b        	mulsh	a0, a0, a0

		if (ds->ds_nbuf != ADF_NBUF_NULL) {
  90808e:	20342a        	s8i	a0, a3, 42
  908091:	203529        	s16i	a0, a3, 82
  908094:	203608        	s32i	a0, a3, 32
  908097:	bb10      	addi.n	a0, a1, 11
  908099:	00aa11        	slli	a10, a10, 16
  90809c:	0baa02        	or	a10, a10, a11
  90809f:	089911        	slli	a9, a9, 8
  9080a2:	0a9902        	or	a9, a9, a10
  9080a5:	2a2037        	l8ui	a10, a2, 55
  9080a8:	09a902        	or	a9, a10, a9
  9080ab:	c89d      	beqz.n	a9, 9080bc <ath_tgt_attach+0x258>
			ds->ds_nbuf = ADF_NBUF_NULL;
  9080ad:	290a00        	movi	a9, 0
  9080b0:	292434        	s8i	a9, a2, 52
  9080b3:	292435        	s8i	a9, a2, 53
  9080b6:	292436        	s8i	a9, a2, 54
  9080b9:	292437        	s8i	a9, a2, 55
 */
static inline a_status_t
adf_nbuf_dmamap_create(adf_os_device_t osdev,
                       adf_os_dma_map_t *dmap)
{
    return (__adf_nbuf_dmamap_create(osdev, dmap));
  9080bc:	2a3246        	l32i	a10, a3, 0x118
  9080bf:	2b2c38        	addi	a11, a2, 56
  9080c2:	281611        	s32i	a8, a1, 68
  9080c5:	2c1610        	s32i	a12, a1, 64
  9080c8:	5becf7        	call8	9034a8 <__adf_nbuf_dmamap_create>
		}

		if (adf_nbuf_dmamap_create(sc->sc_dev, &ds->ds_dmap) != A_STATUS_OK) {
  9080cb:	281211        	l32i	a8, a1, 68
  9080ce:	2c1210        	l32i	a12, a1, 64
  9080d1:	c8a3      	beqz.n	a10, 9080d8 <ath_tgt_attach+0x274>
  9080d3:	63fffc        	j	9080d3 <ath_tgt_attach+0x26f>
  9080d6:	000029        	excw
			adf_os_assert(0);
		}

		ds->ds_daddr = DS2PHYS(&sc->sc_rxdma, ds);
  9080d9:	32de2a        	excw
  9080dc:	32e009        	excw
  9080df:	290caa        	addi	a9, a0, -86
  9080e2:	9909      	s32i.n	a9, a0, 36
  9080e4:	8d57      	l32i.n	a13, a5, 28
  9080e6:	090b57        	extui	a11, a9, 16, 8
  9080e9:	098a47        	extui	a10, a9, 8, 8
  9080ec:	090947        	extui	a9, a9, 0, 8
  9080ef:	2d2448        	s8i	a13, a2, 72
  9080f2:	2b2449        	s8i	a11, a2, 73
  9080f5:	2a244a        	s8i	a10, a2, 74
  9080f8:	29244b        	s8i	a9, a2, 75

		if (ds_prev) {
  9080fb:	c88a      	beqz.n	a8, 908109 <ath_tgt_attach+0x2a5>
			ds_prev->ds_link = ds->ds_daddr;
  9080fd:	2d8400        	s8i	a13, a8, 0
  908100:	2b8401        	s8i	a11, a8, 1
  908103:	2a8402        	s8i	a10, a8, 2
  908106:	298403        	s8i	a9, a8, 3
		}

		ds->ds_link = 0;
  908109:	c080      	movi.n	a8, 0
  90810b:	282400        	s8i	a8, a2, 0
  90810e:	282401        	s8i	a8, a2, 1
  908111:	282402        	s8i	a8, a2, 2
  908114:	282403        	s8i	a8, a2, 3
		ds_prev = ds;

		asf_tailq_insert_tail(&sc->sc_rxdesc, ds, ds_list);
  908117:	28244c        	s8i	a8, a2, 76
  90811a:	28244d        	s8i	a8, a2, 77
  90811d:	28244e        	s8i	a8, a2, 78
  908120:	28244f        	s8i	a8, a2, 79
  908123:	2832da        	l32i	a8, a3, 0x368
	struct ath_rx_desc *ds_prev = NULL;

	asf_tailq_init(&sc->sc_rxdesc);
	asf_tailq_init(&sc->sc_rxdesc_idle);

	for (i = 0; i < ath_numrxdescs; i++, ds++) {
  908126:	b1cc      	addi.n	a12, a12, 1
		}

		ds->ds_link = 0;
		ds_prev = ds;

		asf_tailq_insert_tail(&sc->sc_rxdesc, ds, ds_list);
  908128:	088957        	extui	a9, a8, 24, 8
  90812b:	292450        	s8i	a9, a2, 80
  90812e:	080957        	extui	a9, a8, 16, 8
  908131:	292451        	s8i	a9, a2, 81
  908134:	088947        	extui	a9, a8, 8, 8
  908137:	282453        	s8i	a8, a2, 83
  90813a:	292452        	s8i	a9, a2, 82
  90813d:	9280      	s32i.n	a2, a8, 0
  90813f:	282c4c        	addi	a8, a2, 76
  908142:	2836da        	s32i	a8, a3, 0x368
	struct ath_rx_desc *ds_prev = NULL;

	asf_tailq_init(&sc->sc_rxdesc);
	asf_tailq_init(&sc->sc_rxdesc_idle);

	for (i = 0; i < ath_numrxdescs; i++, ds++) {
  908145:	d820      	mov.n	a8, a2
  908147:	222c54        	addi	a2, a2, 84
  90814a:	8970      	l32i.n	a9, a7, 0
  90814c:	79cb02        	bgeu	a12, a9, 908152 <ath_tgt_attach+0x2ee>
  90814f:	63ff3a        	j	90808d <ath_tgt_attach+0x229>
		ds_prev = ds;

		asf_tailq_insert_tail(&sc->sc_rxdesc, ds, ds_list);
	}

	error = ath_descdma_setup(sc, &sc->sc_txdma, (ath_bufhead *)&sc->sc_txbuf,
  908152:	273a8c        	movi	a7, 0x38c
  908155:	223ac0        	movi	a2, 0x3c0
  908158:	290a88        	movi	a9, 136
  90815b:	a737      	add.n	a7, a3, a7
  90815d:	a232      	add.n	a2, a3, a2
  90815f:	1d72b9        	l32r	a13, 8e4c44 <vdesc_module_install+0xb08>
  908162:	9910      	s32i.n	a9, a1, 0
  908164:	da30      	mov.n	a10, a3
  908166:	db70      	mov.n	a11, a7
  908168:	dc20      	mov.n	a12, a2
  90816a:	c2e2      	movi.n	a14, 34
  90816c:	2f0a94        	movi	a15, 148
  90816f:	291610        	s32i	a9, a1, 64
  908172:	5bf986        	call8	90678c <ath_descdma_setup$constprop$20>
  908175:	d8a0      	mov.n	a8, a10
				  "tx", ATH_TXBUF + 1, ATH_TXDESC,
				  sizeof(struct ath_tx_buf),
				  sizeof(struct ath_tx_desc));
	if (error != 0) {
  908177:	291210        	l32i	a9, a1, 64
  90817a:	c8a3      	beqz.n	a10, 908181 <ath_tgt_attach+0x31d>
  90817c:	60002d        	j	9081ad <ath_tgt_attach+0x349>
  90817f:	00001c        	mul16u	a0, a0, a0
		ath_descdma_cleanup(sc, &sc->sc_rxdma, (ath_bufhead *)&sc->sc_rxbuf,
				    ADF_OS_DMA_FROM_DEVICE);
		return error;
	}

	error = ath_descdma_setup(sc, &sc->sc_bdma, (ath_bufhead *)&sc->sc_bbuf,
  908182:	72ba2b        	bge	a11, a2, 9081b1 <ath_tgt_attach+0x34d>
  908185:	3aa41d        	excw
  908188:	72bb99        	bgeu	a11, a2, 908125 <ath_tgt_attach+0x2c1>
  90818b:	10da30        	l32r	a0, 8fea4c <memset+0x198b0>
  90818e:	ab3b      	add.n	a11, a3, a11
  908190:	ac3c      	add.n	a12, a3, a12
  908192:	c0e1      	movi.n	a14, 1
  908194:	2f0a94        	movi	a15, 148
  908197:	281611        	s32i	a8, a1, 68
  90819a:	5bf97c        	call8	90678c <ath_descdma_setup$constprop$20>
				  "beacon", ATH_BCBUF, 1,
				  sizeof(struct ath_tx_buf),
				  sizeof(struct ath_tx_desc));
	if (error != 0) {
  90819d:	281211        	l32i	a8, a1, 68
  9081a0:	c9a8      	beqz.n	a10, 9081bc <ath_tgt_attach+0x358>
		ath_descdma_cleanup(sc, &sc->sc_txdma, (ath_bufhead *)&sc->sc_txbuf,
  9081a2:	da30      	mov.n	a10, a3
  9081a4:	db70      	mov.n	a11, a7
  9081a6:	dc20      	mov.n	a12, a2
  9081a8:	dd80      	mov.n	a13, a8
  9081aa:	5bf8fb        	call8	906598 <ath_descdma_cleanup>
				    ADF_OS_DMA_TO_DEVICE);
		ath_descdma_cleanup(sc, &sc->sc_rxdma, (ath_bufhead *)&sc->sc_rxbuf,
  9081ad:	da30      	mov.n	a10, a3
  9081af:	db60      	mov.n	a11, a6
  9081b1:	dc50      	mov.n	a12, a5
  9081b3:	c0d1      	movi.n	a13, 1
  9081b5:	5bf8f8        	call8	906598 <ath_descdma_cleanup>
  9081b8:	6000ca        	j	908286 <ath_tgt_attach+0x422>
  9081bb:	002232        	sext	a2, a2, 7
				    ADF_OS_DMA_FROM_DEVICE);
		return error;
	}

	bf = asf_tailq_first(&sc->sc_txbuf);
  9081be:	f0          	.byte 0xf0
	bf->bf_isaggr = bf->bf_isretried = bf->bf_retries = 0;
  9081bf:	c65f      	movi.n	a5, -17
  9081c1:	262087        	l8ui	a6, a2, 135
  9081c4:	2a2486        	s8i	a10, a2, 134
  9081c7:	056501        	and	a5, a6, a5
  9081ca:	26fadf        	movi	a6, -33
  9081cd:	065501        	and	a5, a5, a6
  9081d0:	252487        	s8i	a5, a2, 135
	asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  9081d3:	8529      	l32i.n	a5, a2, 36
  9081d5:	862a      	l32i.n	a6, a2, 40
  9081d7:	c856      	beqz.n	a5, 9081e1 <ath_tgt_attach+0x37d>
  9081d9:	965a      	s32i.n	a6, a5, 40
  9081db:	600005        	j	9081e4 <ath_tgt_attach+0x380>
  9081de:	000000        	ill
  9081e1:	2636f1        	s32i	a6, a3, 0x3c4
  9081e4:	862a      	l32i.n	a6, a2, 40
	error = ath_desc_alloc(sc);
	if (error != 0) {
		goto bad;
	}

	BUF_Pool_create_pool(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ath_numrxdescs, 1664);
  9081e6:	c0b3      	movi.n	a11, 3
		return error;
	}

	bf = asf_tailq_first(&sc->sc_txbuf);
	bf->bf_isaggr = bf->bf_isretried = bf->bf_retries = 0;
	asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  9081e8:	9560      	s32i.n	a5, a6, 0

	sc->sc_txbuf_held = bf;
  9081ea:	2236dc        	s32i	a2, a3, 0x370
	error = ath_desc_alloc(sc);
	if (error != 0) {
		goto bad;
	}

	BUF_Pool_create_pool(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ath_numrxdescs, 1664);
  9081ed:	1572b7        	l32r	a5, 8e4ccc <xthal_get_ccount+0x20>
  9081f0:	127182        	l32r	a2, 8e47f8 <vdesc_module_install+0x6bc>
  9081f3:	2a3200        	l32i	a10, a3, 0
  9081f6:	2222a0        	l32i	a2, a2, 0x280
  9081f9:	2c5200        	l32i	a12, a5, 0
  9081fc:	2d6a80        	movi	a13, 0x680
  9081ff:	0b2000        	callx8	a2
static void ath_tgt_txq_setup(struct ath_softc_tgt *sc)
{
	a_int32_t qnum;
	struct ath_txq *txq;

	sc->sc_txqsetup=0;
  908202:	c050      	movi.n	a5, 0
  908204:	223d03        	addmi	a2, a3, 0x300
  908207:	2524c8        	s8i	a5, a2, 200

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
  90820a:	c050      	movi.n	a5, 0
		txq= &sc->sc_txq[qnum];
		txq->axq_qnum = qnum;
		txq->axq_link = NULL;
  90820c:	d750      	mov.n	a7, a5
		asf_tailq_init(&txq->axq_q);
		txq->axq_depth = 0;
		txq->axq_linkbuf = NULL;
		asf_tailq_init(&txq->axq_tidq);
		sc->sc_txqsetup |= 1<<qnum;
  90820e:	2a0a01        	movi	a10, 1
	struct ath_txq *txq;

	sc->sc_txqsetup=0;

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
		txq= &sc->sc_txq[qnum];
  908211:	285c1e        	addi	a8, a5, 30
  908214:	0b8811        	slli	a8, a8, 5
  908217:	a838      	add.n	a8, a3, a8
		txq->axq_qnum = qnum;
		txq->axq_link = NULL;
		asf_tailq_init(&txq->axq_q);
  908219:	298c14        	addi	a9, a8, 20

	sc->sc_txqsetup=0;

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
		txq= &sc->sc_txq[qnum];
		txq->axq_qnum = qnum;
  90821c:	9583      	s32i.n	a5, a8, 12
		txq->axq_link = NULL;
		asf_tailq_init(&txq->axq_q);
  90821e:	9986      	s32i.n	a9, a8, 24
	struct ath_txq *txq;

	sc->sc_txqsetup=0;

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
		txq= &sc->sc_txq[qnum];
  908220:	bc86      	addi.n	a6, a8, 12
		txq->axq_qnum = qnum;
		txq->axq_link = NULL;
  908222:	9784      	s32i.n	a7, a8, 16
		asf_tailq_init(&txq->axq_q);
  908224:	9785      	s32i.n	a7, a8, 20
		txq->axq_depth = 0;
  908226:	9787      	s32i.n	a7, a8, 28
		txq->axq_linkbuf = NULL;
  908228:	9788      	s32i.n	a7, a8, 32
		asf_tailq_init(&txq->axq_tidq);
  90822a:	9789      	s32i.n	a7, a8, 36
  90822c:	288c24        	addi	a8, a8, 36
  90822f:	9867      	s32i.n	a8, a6, 28
		sc->sc_txqsetup |= 1<<qnum;
  908231:	263d03        	addmi	a6, a3, 0x300
  908234:	2860c8        	l8ui	a8, a6, 200
  908237:	005104        	ssl	a5
  90823a:	00a91a        	sll	a9, a10
  90823d:	089802        	or	a8, a9, a8
  908240:	2864c8        	s8i	a8, a6, 200
	a_int32_t qnum;
	struct ath_txq *txq;

	sc->sc_txqsetup=0;

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
  908243:	b155      	addi.n	a5, a5, 1
		txq= &sc->sc_txq[qnum];
		txq->axq_qnum = qnum;
		txq->axq_link = NULL;
  908245:	c020      	movi.n	a2, 0
	a_int32_t qnum;
	struct ath_txq *txq;

	sc->sc_txqsetup=0;

	for (qnum=0;qnum<HAL_NUM_TX_QUEUES;qnum++) {
  908247:	6959c6        	bnei	a5, 10, 908211 <ath_tgt_attach+0x3ad>
		txq->axq_linkbuf = NULL;
		asf_tailq_init(&txq->axq_tidq);
		sc->sc_txqsetup |= 1<<qnum;
	}

	sc->sc_uapsdq  = &sc->sc_txq[UAPSDQ_NUM];
  90824a:	264aec        	movi	a6, 0x4ec
  90824d:	253d05        	addmi	a5, a3, 0x500
  908250:	a636      	add.n	a6, a3, a6
  908252:	965d      	s32i.n	a6, a5, 52
	sc->sc_cabq    = &sc->sc_txq[CABQ_NUM];
  908254:	264acc        	movi	a6, 0x4cc
  908257:	a636      	add.n	a6, a3, a6
  908259:	965c      	s32i.n	a6, a5, 48

	sc->sc_ac2q[WME_AC_BE]  = &sc->sc_txq[0];
  90825b:	263acc        	movi	a6, 0x3cc
  90825e:	a636      	add.n	a6, a3, a6
  908260:	9653      	s32i.n	a6, a5, 12
	sc->sc_ac2q[WME_AC_BK]  = &sc->sc_txq[1];
  908262:	263aec        	movi	a6, 0x3ec
  908265:	a636      	add.n	a6, a3, a6
  908267:	9654      	s32i.n	a6, a5, 16
	sc->sc_ac2q[WME_AC_VI]  = &sc->sc_txq[2];
  908269:	264a0c        	movi	a6, 0x40c
  90826c:	a636      	add.n	a6, a3, a6
  90826e:	9655      	s32i.n	a6, a5, 20
	sc->sc_ac2q[WME_AC_VO]  = &sc->sc_txq[3];
  908270:	264a2c        	movi	a6, 0x42c
  908273:	a636      	add.n	a6, a3, a6
	}

	BUF_Pool_create_pool(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ath_numrxdescs, 1664);

	ath_tgt_txq_setup(sc);
	sc->sc_imask =0;
  908275:	2236c4        	s32i	a2, a3, 0x310
	ah->ah_setInterrupts(ah, 0);
  908278:	234228        	l32i	a3, a4, 160
	sc->sc_cabq    = &sc->sc_txq[CABQ_NUM];

	sc->sc_ac2q[WME_AC_BE]  = &sc->sc_txq[0];
	sc->sc_ac2q[WME_AC_BK]  = &sc->sc_txq[1];
	sc->sc_ac2q[WME_AC_VI]  = &sc->sc_txq[2];
	sc->sc_ac2q[WME_AC_VO]  = &sc->sc_txq[3];
  90827b:	9656      	s32i.n	a6, a5, 24

	BUF_Pool_create_pool(sc->pool_handle, POOL_ID_WLAN_RX_BUF, ath_numrxdescs, 1664);

	ath_tgt_txq_setup(sc);
	sc->sc_imask =0;
	ah->ah_setInterrupts(ah, 0);
  90827d:	da40      	mov.n	a10, a4
  90827f:	db20      	mov.n	a11, a2
  908281:	0b3000        	callx8	a3
  908284:	d10f      	retw.n

	return 0;
bad:
bad2:
	ath_desc_free(sc);
  908286:	da30      	mov.n	a10, a3
  908288:	5bf92d        	call8	906740 <ath_desc_free>
	if (ah)
  90828b:	c845      	beqz.n	a4, 908294 <ath_tgt_attach+0x430>
		ah->ah_detach(ah);
  90828d:	8246      	l32i.n	a2, a4, 24
  90828f:	da40      	mov.n	a10, a4
  908291:	0b2000        	callx8	a2
}
  908294:	d10f      	retw.n
	...

00908298 <ath_detach>:
	HIF_shutdown(sc->tgt_hif_handle);
	BUF_Pool_shutdown(sc->pool_handle);
}

a_int32_t ath_detach(struct ath_softc_tgt *sc)
{
  908298:	6c1004        	entry	a1, 32

static void tgt_hif_htc_wmi_shutdown(struct ath_softc_tgt *sc)
{
	HTC_NotifyTargetDetached(sc->tgt_htc_handle);

	WMI_Shutdown(sc->tgt_wmi_handle);
  90829b:	137182        	l32r	a3, 8e48a4 <vdesc_module_install+0x768>
  90829e:	8a23      	l32i.n	a10, a2, 12
  9082a0:	283297        	l32i	a8, a3, 0x25c
  9082a3:	0b8000        	callx8	a8
	HTC_Shutdown(sc->tgt_htc_handle);
  9082a6:	8a22      	l32i.n	a10, a2, 8
  9082a8:	283284        	l32i	a8, a3, 0x210
  9082ab:	0b8000        	callx8	a8
	HIF_shutdown(sc->tgt_hif_handle);
  9082ae:	8a21      	l32i.n	a10, a2, 4
  9082b0:	283276        	l32i	a8, a3, 0x1d8
  9082b3:	0b8000        	callx8	a8
	BUF_Pool_shutdown(sc->pool_handle);
  9082b6:	8a20      	l32i.n	a10, a2, 0
  9082b8:	23329f        	l32i	a3, a3, 0x27c
  9082bb:	0b3000        	callx8	a3
}

a_int32_t ath_detach(struct ath_softc_tgt *sc)
{
	tgt_hif_htc_wmi_shutdown(sc);
}
  9082be:	d10f      	retw.n

009082c0 <__adf_os_dmamem_alloc>:
 * @return void* (Virtual address)
 */
inline void*
__adf_os_dmamem_alloc(__adf_os_device_t osdev, adf_os_size_t size, 
                      a_bool_t coherent, __adf_os_dma_map_t *dmap)
{    
  9082c0:	6c1004        	entry	a1, 32
    (*dmap) = A_ALLOCRAM(sizeof(struct __adf_dma_map));
  9082c3:	147182        	l32r	a4, 8e48cc <vdesc_module_install+0x790>
  9082c6:	c0a0      	movi.n	a10, 0
  9082c8:	224252        	l32i	a2, a4, 0x148
  9082cb:	c0bc      	movi.n	a11, 12
  9082cd:	0b2000        	callx8	a2
  9082d0:	9a50      	s32i.n	a10, a5, 0
  9082d2:	d2a0      	mov.n	a2, a10
    
	if((*dmap) == NULL){
  9082d4:	c9a1      	beqz.n	a10, 9082e9 <__adf_os_dmamem_alloc+0x29>
		goto fail_malloc;
	}
	    
    (*dmap)->ds_addr = A_ALLOCRAM(size);
  9082d6:	244252        	l32i	a4, a4, 0x148
  9082d9:	c0a0      	movi.n	a10, 0
  9082db:	db30      	mov.n	a11, a3
  9082dd:	0b4000        	callx8	a4
  9082e0:	9a21      	s32i.n	a10, a2, 4
    (*dmap)->ds_len = size;
  9082e2:	8250      	l32i.n	a2, a5, 0
  9082e4:	232504        	s16i	a3, a2, 8
    
    return (*dmap)->ds_addr;
  9082e7:	8221      	l32i.n	a2, a2, 4
    
fail_malloc: 
    return NULL;            
}
  9082e9:	d10f      	retw.n
	...

009082ec <rcIsValidPhyRate>:

/* Return true only for single stream */

static A_BOOL
rcIsValidPhyRate(A_UINT32 phy, A_UINT32 capflag, A_BOOL ignoreCW)
{
  9082ec:	6c1004        	entry	a1, 32
  9082ef:	d820      	mov.n	a8, a2
	if (WLAN_RC_PHY_HT(phy) && !(capflag & WLAN_RC_HT_FLAG)) {
  9082f1:	6e2404        	bltui	a2, 4, 9082f9 <rcIsValidPhyRate+0xd>
		return FALSE;
  9082f4:	c020      	movi.n	a2, 0
/* Return true only for single stream */

static A_BOOL
rcIsValidPhyRate(A_UINT32 phy, A_UINT32 capflag, A_BOOL ignoreCW)
{
	if (WLAN_RC_PHY_HT(phy) && !(capflag & WLAN_RC_HT_FLAG)) {
  9082f6:	7c3764        	bbci	a3, 28, 90835e <rcIsValidPhyRate+0x72>
		return FALSE;
	}

	if (WLAN_RC_PHY_DS(phy) && !(capflag & WLAN_RC_DS_FLAG))  {
  9082f9:	c72d      	movi.n	a2, -3
  9082fb:	028201        	and	a2, a8, a2
  9082fe:	682504        	beqi	a2, 5, 908306 <rcIsValidPhyRate+0x1a>
  908301:	c099      	movi.n	a9, 9
  908303:	792904        	bne	a2, a9, 90830b <rcIsValidPhyRate+0x1f>

static A_BOOL
rcIsValidPhyRate(A_UINT32 phy, A_UINT32 capflag, A_BOOL ignoreCW)
{
	if (WLAN_RC_PHY_HT(phy) && !(capflag & WLAN_RC_HT_FLAG)) {
		return FALSE;
  908306:	c020      	movi.n	a2, 0
	}

	if (WLAN_RC_PHY_DS(phy) && !(capflag & WLAN_RC_DS_FLAG))  {
  908308:	7f3752        	bbci	a3, 31, 90835e <rcIsValidPhyRate+0x72>
		return FALSE;
	}
	if (WLAN_RC_PHY_SGI(phy) && !(capflag & WLAN_RC_HT40_SGI_FLAG)) {
  90830b:	228cf8        	addi	a2, a8, -8
  90830e:	6f2404        	bgeui	a2, 4, 908316 <rcIsValidPhyRate+0x2a>

static A_BOOL
rcIsValidPhyRate(A_UINT32 phy, A_UINT32 capflag, A_BOOL ignoreCW)
{
	if (WLAN_RC_PHY_HT(phy) && !(capflag & WLAN_RC_HT_FLAG)) {
		return FALSE;
  908311:	c020      	movi.n	a2, 0
	}

	if (WLAN_RC_PHY_DS(phy) && !(capflag & WLAN_RC_DS_FLAG))  {
		return FALSE;
	}
	if (WLAN_RC_PHY_SGI(phy) && !(capflag & WLAN_RC_HT40_SGI_FLAG)) {
  908313:	7d3747        	bbci	a3, 29, 90835e <rcIsValidPhyRate+0x72>
		return FALSE;
	}

	if (!ignoreCW && WLAN_RC_PHY_HT(phy)) {
  908316:	c020      	movi.n	a2, 0
  908318:	c0a1      	movi.n	a10, 1
  90831a:	d520      	mov.n	a5, a2
  90831c:	04a538        	moveqz	a5, a10, a4
  90831f:	d450      	mov.n	a4, a5
  908321:	725135        	beq	a5, a2, 90835a <rcIsValidPhyRate+0x6e>
  908324:	6e8432        	bltui	a8, 4, 90835a <rcIsValidPhyRate+0x6e>
		if (WLAN_RC_PHY_40(phy) && !(capflag & WLAN_RC_40_FLAG)) {
  908327:	298cfa        	addi	a9, a8, -6
  90832a:	6e920c        	bltui	a9, 2, 90833a <rcIsValidPhyRate+0x4e>
  90832d:	2b8cf6        	addi	a11, a8, -10
  908330:	0ba238        	moveqz	a2, a10, a11
  908333:	cc23      	bnez.n	a2, 90833a <rcIsValidPhyRate+0x4e>
  908335:	c02b      	movi.n	a2, 11
  908337:	728904        	bne	a8, a2, 90833f <rcIsValidPhyRate+0x53>
			return FALSE;
  90833a:	c020      	movi.n	a2, 0
	if (WLAN_RC_PHY_SGI(phy) && !(capflag & WLAN_RC_HT40_SGI_FLAG)) {
		return FALSE;
	}

	if (!ignoreCW && WLAN_RC_PHY_HT(phy)) {
		if (WLAN_RC_PHY_40(phy) && !(capflag & WLAN_RC_40_FLAG)) {
  90833c:	7e371e        	bbci	a3, 30, 90835e <rcIsValidPhyRate+0x72>
		if (!WLAN_RC_PHY_40(phy) && (capflag & WLAN_RC_40_FLAG)) {
			return FALSE;
		}
	}
    
	return TRUE;
  90833f:	c021      	movi.n	a2, 1
	if (!ignoreCW && WLAN_RC_PHY_HT(phy)) {
		if (WLAN_RC_PHY_40(phy) && !(capflag & WLAN_RC_40_FLAG)) {
			return FALSE;
		}

		if (!WLAN_RC_PHY_40(phy) && (capflag & WLAN_RC_40_FLAG)) {
  908341:	6e9219        	bltui	a9, 2, 90835e <rcIsValidPhyRate+0x72>
  908344:	688916        	beqi	a8, 10, 90835e <rcIsValidPhyRate+0x72>
  908347:	c09b      	movi.n	a9, 11
  908349:	798111        	beq	a8, a9, 90835e <rcIsValidPhyRate+0x72>
  90834c:	002004        	ssr	a2
  90834f:	030319        	srl	a3, a3
  908352:	023203        	xor	a2, a3, a2
  908355:	020240        	extui	a2, a2, 0, 1
  908358:	d10f      	retw.n
			return FALSE;
		}
	}
    
	return TRUE;
  90835a:	c021      	movi.n	a2, 1
  90835c:	d10f      	retw.n
}
  90835e:	d10f      	retw.n

00908360 <rcRateSetseries$isra$5>:

	return rate;
}

static void
rcRateSetseries(const RATE_TABLE_11N *pRateTable ,
  908360:	6c1004        	entry	a1, 32
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
  908363:	c0b0      	movi.n	a11, 0
  908365:	c190      	movi.n	a9, 16
  908367:	06b938        	moveqz	a9, a11, a6
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
  90836a:	05560a        	addx4	a6, a5, a5
  90836d:	02660b        	addx8	a6, a6, a2
rcRateSetseries(const RATE_TABLE_11N *pRateTable ,
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
	series->tries = tries;
  908370:	243401        	s8i	a4, a3, 1
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
  908373:	28600c        	l8ui	a8, a6, 12
  908376:	c76d      	movi.n	a6, -3
  908378:	068601        	and	a6, a8, a6
  90837b:	c0a1      	movi.n	a10, 1
  90837d:	68650b        	beqi	a6, 5, 90838c <rcRateSetseries$isra$5+0x2c>
  908380:	260a09        	movi	a6, 9
  908383:	768105        	beq	a8, a6, 90838c <rcRateSetseries$isra$5+0x2c>
  908386:	268cf5        	addi	a6, a8, -11
  908389:	06ba39        	movnez	a10, a11, a6
		(WLAN_RC_PHY_40(pRateTable->info[rix].phy) ? ATH_RC_CW40_FLAG : 0) | 
  90838c:	268cfa        	addi	a6, a8, -6
  90838f:	060647        	extui	a6, a6, 0, 8
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
  908392:	09ab02        	or	a11, a10, a9
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
		(WLAN_RC_PHY_40(pRateTable->info[rix].phy) ? ATH_RC_CW40_FLAG : 0) | 
  908395:	6e6219        	bltui	a6, 2, 9083b2 <rcRateSetseries$isra$5+0x52>
  908398:	c0a0      	movi.n	a10, 0
  90839a:	298cf6        	addi	a9, a8, -10
  90839d:	c061      	movi.n	a6, 1
  90839f:	096a38        	moveqz	a10, a6, a9
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
  9083a2:	ccac      	bnez.n	a10, 9083b2 <rcRateSetseries$isra$5+0x52>
  9083a4:	c092      	movi.n	a9, 2
  9083a6:	268cf5        	addi	a6, a8, -11
  9083a9:	06a939        	movnez	a9, a10, a6
  9083ac:	600004        	j	9083b4 <rcRateSetseries$isra$5+0x54>
  9083af:	000000        	ill
  9083b2:	c092      	movi.n	a9, 2
		(WLAN_RC_PHY_DS(pRateTable->info[rix].phy) ? ATH_RC_DS_FLAG : 0) | 
		(WLAN_RC_PHY_40(pRateTable->info[rix].phy) ? ATH_RC_CW40_FLAG : 0) | 
		(WLAN_RC_PHY_SGI(pRateTable->info[rix].phy) ? ATH_RC_HT40_SGI_FLAG : 0);
  9083b4:	288cf8        	addi	a8, a8, -8
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
  9083b7:	080847        	extui	a8, a8, 0, 8
  9083ba:	09b902        	or	a9, a11, a9
  9083bd:	c0b0      	movi.n	a11, 0
  9083bf:	6f8401        	bgeui	a8, 4, 9083c4 <rcRateSetseries$isra$5+0x64>
  9083c2:	c0b4      	movi.n	a11, 4
  9083c4:	0b9b02        	or	a11, a9, a11
		{
			series->flags |= ATH_RC_TX_STBC_FLAG;
		}
	}
#endif
	series->rix = pRateTable->info[rix].baseIndex;
  9083c7:	05550a        	addx4	a5, a5, a5
                struct ath_rc_series *series,
		A_UINT8 tries, A_UINT8 rix,
		A_BOOL rtsctsenable, A_UINT32 chainmask,int stbc)
{
	series->tries = tries;
	series->flags = (rtsctsenable? ATH_RC_RTSCTS_FLAG : 0) | 
  9083ca:	2b3403        	s8i	a11, a3, 3
		{
			series->flags |= ATH_RC_TX_STBC_FLAG;
		}
	}
#endif
	series->rix = pRateTable->info[rix].baseIndex;
  9083cd:	02550b        	addx8	a5, a5, a2
  9083d0:	22501e        	l8ui	a2, a5, 30
  9083d3:	223400        	s8i	a2, a3, 0
	series->max4msframelen = pRateTable->info[rix].max4msframelen;
  9083d6:	8259      	l32i.n	a2, a5, 36
  9083d8:	9231      	s32i.n	a2, a3, 4
	series->txrateKbps = pRateTable->info[rix].rateKbps;
  9083da:	8254      	l32i.n	a2, a5, 16
  9083dc:	9232      	s32i.n	a2, a3, 8
	else if(chainmask == 1) 
		series->tx_chainmask = 1;
	else 
		series->tx_chainmask = pRateTable->info[rix].txChainMask_2ch;  /*Chainmask is 3 or 5*/
#else
	series->tx_chainmask = 1;
  9083de:	c021      	movi.n	a2, 1
  9083e0:	223402        	s8i	a2, a3, 2
  9083e3:	d10f      	retw.n
  9083e5:	000000        	ill

009083e8 <rcUpdate_ht$isra$7>:
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  9083e8:	6c1006        	entry	a1, 48
  9083eb:	2c1119        	l16ui	a12, a1, 50
  9083ee:	07094f        	extui	a9, a7, 0, 16
            A_BOOL Xretries, int retries, A_UINT8 curTxAnt, 
            A_UINT16 nFrames, A_UINT16 nBad)
{
	TX_RATE_CTRL *pRc;
	A_UINT32 nowMsec = A_MS_TICKGET();
  9083f1:	c0a0      	movi.n	a10, 0
  9083f3:	9912      	s32i.n	a9, a1, 8
  9083f5:	9510      	s32i.n	a5, a1, 0
  9083f7:	9c13      	s32i.n	a12, a1, 12
  9083f9:	5bede2        	call8	903b84 <ath_hal_getuptime>
	A_UINT8 lastPer;
	int rate,count;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  9083fc:	252248        	l32i	a5, a2, 0x120
  9083ff:	2222c2        	l32i	a2, a2, 0x308
{
	TX_RATE_CTRL *pRc;
	A_UINT32 nowMsec = A_MS_TICKGET();
	A_UINT8 lastPer;
	int rate,count;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
  908402:	233282        	l32i	a3, a3, 0x208
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  908405:	05220a        	addx4	a2, a2, a5
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
            A_BOOL Xretries, int retries, A_UINT8 curTxAnt, 
            A_UINT16 nFrames, A_UINT16 nBad)
{
	TX_RATE_CTRL *pRc;
	A_UINT32 nowMsec = A_MS_TICKGET();
  908408:	d8a0      	mov.n	a8, a10
	A_UINT8 lastPer;
	int rate,count;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90840a:	8521      	l32i.n	a5, a2, 4
		100 * 7 / 8,    // 87.5
		100 * 8 / 9,    // 88.8
		100 * 9 / 10    // 90
	};

	if (!pSib)
  90840c:	8912      	l32i.n	a9, a1, 8
  90840e:	8b10      	l32i.n	a11, a1, 0
  908410:	8c13      	l32i.n	a12, a1, 12
  908412:	6431c6        	beqz	a3, 9085dc <rcUpdate_ht$isra$7+0x1f4>
	pRc = (TX_RATE_CTRL *)(pSib);

	ASSERT(retries >= 0 && retries < MAX_TX_RETRIES);
	ASSERT(txRate >= 0);
    
	if (txRate < 0) {
  908415:	6641c3        	bltz	a4, 9085dc <rcUpdate_ht$isra$7+0x1f4>
		return;
	}

	lastPer = pRc->state[txRate].per;
  908418:	a437      	add.n	a7, a3, a4
  90841a:	227000        	l8ui	a2, a7, 0

	if (Xretries) {
  90841d:	cbb0      	beqz.n	a11, 908451 <rcUpdate_ht$isra$7+0x69>
		/* Update the PER. */
		if (Xretries == 1) {
  90841f:	69b111        	bnei	a11, 1, 908434 <rcUpdate_ht$isra$7+0x4c>
			pRc->state[txRate].per += 30;
  908422:	292c1e        	addi	a9, a2, 30
  908425:	090947        	extui	a9, a9, 0, 8
			if (pRc->state[txRate].per > 100) {
  908428:	260a64        	movi	a6, 100
  90842b:	79630d        	bltu	a6, a9, 90843c <rcUpdate_ht$isra$7+0x54>
	lastPer = pRc->state[txRate].per;

	if (Xretries) {
		/* Update the PER. */
		if (Xretries == 1) {
			pRc->state[txRate].per += 30;
  90842e:	297400        	s8i	a9, a7, 0
  908431:	60000a        	j	90843f <rcUpdate_ht$isra$7+0x57>
			if (retries >= count) {
				retries = count - 1;
			}

			/* new_PER = 7/8*old_PER + 1/8*(currentPER) */
			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  908434:	bc29      	addi.n	a9, a2, 12
  908436:	023614        	srli	a6, a2, 3
  908439:	06960c        	sub	a6, a9, a6
  90843c:	267400        	s8i	a6, a7, 0
						   (pRc->state[txRate].per / 8) + ((100) / 8));
		}

		/* Xretries == 1 or 2 */

		if (pRc->probeRate == txRate)
  90843f:	263037        	l8ui	a6, a3, 55
  908442:	746102        	beq	a6, a4, 908448 <rcUpdate_ht$isra$7+0x60>
  908445:	6000c3        	j	90850c <rcUpdate_ht$isra$7+0x124>
			pRc->probeRate = 0;
  908448:	c060      	movi.n	a6, 0
  90844a:	263437        	s8i	a6, a3, 55
  90844d:	6000bb        	j	90850c <rcUpdate_ht$isra$7+0x124>
  908450:	00c0a9        	excw
  908453:	0a6634        	min	a6, a6, a10
		count = sizeof(nRetry2PerLookup) / sizeof(nRetry2PerLookup[0]);
		if (retries >= count) {
			retries = count - 1;
		}

		if (nBad) {
  908456:	64c03f        	beqz	a12, 908499 <rcUpdate_ht$isra$7+0xb1>
			 * that part is 100 * nBad / nFrames, and it contributes
			 * 100 * nBad / (nFrames * (retries+1)) to the above
			 * PER.  The expression below is a simplified version
			 * of the sum of these two terms.
			 */
			if (nFrames > 0)
  908459:	649053        	beqz	a9, 9084b0 <rcUpdate_ht$isra$7+0xc8>
				pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
  90845c:	096a28        	mull	a10, a6, a9
  90845f:	b16b      	addi.n	a11, a6, 1
  908461:	acaa      	add.n	a10, a10, a12
  908463:	0aaa0a        	addx4	a10, a10, a10
  908466:	0b9b28        	mull	a11, a9, a11
			 * 100 * nBad / (nFrames * (retries+1)) to the above
			 * PER.  The expression below is a simplified version
			 * of the sum of these two terms.
			 */
			if (nFrames > 0)
				pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  908469:	023d14        	srli	a13, a2, 3
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
  90846c:	0aaa0a        	addx4	a10, a10, a10
			 * 100 * nBad / (nFrames * (retries+1)) to the above
			 * PER.  The expression below is a simplified version
			 * of the sum of these two terms.
			 */
			if (nFrames > 0)
				pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90846f:	0d2d0c        	sub	a13, a2, a13
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
  908472:	0eaa11        	slli	a10, a10, 2
  908475:	9810      	s32i.n	a8, a1, 0
  908477:	9912      	s32i.n	a9, a1, 8
  908479:	9c13      	s32i.n	a12, a1, 12
  90847b:	9d11      	s32i.n	a13, a1, 4
  90847d:	5b721b        	call8	8e4cec <__divsi3>
  908480:	b7ab      	addi.n	a11, a10, 7
			 * 100 * nBad / (nFrames * (retries+1)) to the above
			 * PER.  The expression below is a simplified version
			 * of the sum of these two terms.
			 */
			if (nFrames > 0)
				pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  908482:	8d11      	l32i.n	a13, a1, 4
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
  908484:	0aba3a        	movltz	a10, a11, a10
  908487:	0a3a12        	srai	a10, a10, 3
			 * 100 * nBad / (nFrames * (retries+1)) to the above
			 * PER.  The expression below is a simplified version
			 * of the sum of these two terms.
			 */
			if (nFrames > 0)
				pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90848a:	aadd      	add.n	a13, a13, a10
  90848c:	2d7400        	s8i	a13, a7, 0
  90848f:	8810      	l32i.n	a8, a1, 0
  908491:	8912      	l32i.n	a9, a1, 8
  908493:	8c13      	l32i.n	a12, a1, 12
  908495:	600017        	j	9084b0 <rcUpdate_ht$isra$7+0xc8>
  908498:	001a72        	excw
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
		} else {
			/* new_PER = 7/8*old_PER + 1/8*(currentPER) */

			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
				   (pRc->state[txRate].per / 8) + (nRetry2PerLookup[retries] / 8));
  90849b:	bc02      	addi.n	a2, a0, 12
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
		} else {
			/* new_PER = 7/8*old_PER + 1/8*(currentPER) */

			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  90849d:	3b140a        	excw
				   (pRc->state[txRate].per / 8) + (nRetry2PerLookup[retries] / 8));
  9084a0:	6a0a8a        	blti	a0, 12, 90842e <rcUpdate_ht$isra$7+0x46>
  9084a3:	a00b      	add.n	a11, a0, a0
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
		} else {
			/* new_PER = 7/8*old_PER + 1/8*(currentPER) */

			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  9084a5:	2b0c0a        	addi	a11, a0, 10
				   (pRc->state[txRate].per / 8) + (nRetry2PerLookup[retries] / 8));
  9084a8:	3a140a        	excw
					   (pRc->state[txRate].per / 8) + 
					   ((100*(retries*nFrames + nBad)/(nFrames*(retries+1))) / 8));
		} else {
			/* new_PER = 7/8*old_PER + 1/8*(currentPER) */

			pRc->state[txRate].per = (A_UINT8)(pRc->state[txRate].per - 
  9084ab:	ba08      	addi.n	a8, a0, 10
  9084ad:	2a7400        	s8i	a10, a7, 0
		/*
		 * If we got at most one retry then increase the max rate if
		 * this was a probe.  Otherwise, ignore the probe.
		 */

		if (pRc->probeRate && pRc->probeRate == txRate) {
  9084b0:	273037        	l8ui	a7, a3, 55
  9084b3:	cb79      	beqz.n	a7, 9084f0 <rcUpdate_ht$isra$7+0x108>
  9084b5:	747937        	bne	a7, a4, 9084f0 <rcUpdate_ht$isra$7+0x108>
			if (retries > 0 || 2 * nBad > nFrames) {
  9084b8:	6b6105        	bgei	a6, 1, 9084c1 <rcUpdate_ht$isra$7+0xd9>
  9084bb:	0fcc11        	slli	a12, a12, 1
  9084be:	7c9a07        	bge	a9, a12, 9084c9 <rcUpdate_ht$isra$7+0xe1>
				 * any retries means the probe failed.  Also,
				 * if the attempt worked, but more than half
				 * the subframes were bad then also consider
				 * the probe a failure.
				 */
				pRc->probeRate = 0;
  9084c1:	c070      	movi.n	a7, 0
  9084c3:	273437        	s8i	a7, a3, 55
  9084c6:	600026        	j	9084f0 <rcUpdate_ht$isra$7+0x108>
			} else {
				pRc->rateMaxPhy = pRc->probeRate;
  9084c9:	24347d        	s8i	a4, a3, 125

				if (pRc->state[pRc->probeRate].per > 30) {
  9084cc:	a436      	add.n	a6, a3, a4
  9084ce:	276000        	l8ui	a7, a6, 0
  9084d1:	c19e      	movi.n	a9, 30
  9084d3:	779b05        	bgeu	a9, a7, 9084dc <rcUpdate_ht$isra$7+0xf4>
					pRc->state[pRc->probeRate].per = 20;
  9084d6:	270a14        	movi	a7, 20
  9084d9:	276400        	s8i	a7, a6, 0
				}

				pRc->probeRate = 0;
  9084dc:	c060      	movi.n	a6, 0
  9084de:	263437        	s8i	a6, a3, 55
				/*
				 * Since this probe succeeded, we allow the next probe
				 * twice as soon.  This allows the maxRate to move up
				 * faster if the probes are succesful.
				 */
				pRc->probeTime = nowMsec - pRateTable->probeInterval / 2;
  9084e1:	265001        	l8ui	a6, a5, 1
  9084e4:	061614        	srli	a6, a6, 1
  9084e7:	06860c        	sub	a6, a8, a6
  9084ea:	963f      	s32i.n	a6, a3, 60
  9084ec:	600008        	j	9084f8 <rcUpdate_ht$isra$7+0x110>
  9084ef:	006a61        	excw
			}
		}

		if (retries > 0) {
  9084f2:	04c060        	excw
			 *
			 * Later: if rssiAck is close to pRc->state[txRate].rssiThres
			 * and we see lots of retries, then we could increase
			 * pRc->state[txRate].rssiThres.
			 */
			pRc->hwMaxRetryPktCnt = 0;
  9084f5:	600010        	j	908509 <rcUpdate_ht$isra$7+0x121>
		} else {
			/*
			 * It worked with no retries.  First ignore bogus (small)
			 * rssiAck values.
			 */
			if (txRate == pRc->rateMaxPhy && pRc->hwMaxRetryPktCnt < 255) {
  9084f8:	26307d        	l8ui	a6, a3, 125
  9084fb:	76490d        	bne	a4, a6, 90850c <rcUpdate_ht$isra$7+0x124>
  9084fe:	263040        	l8ui	a6, a3, 64
  908501:	270aff        	movi	a7, 255
  908504:	776104        	beq	a6, a7, 90850c <rcUpdate_ht$isra$7+0x124>
				pRc->hwMaxRetryPktCnt++;
  908507:	b166      	addi.n	a6, a6, 1
  908509:	263440        	s8i	a6, a3, 64
    
	/*
	 * If this rate looks bad (high PER) then stop using it for
	 * a while (except if we are probing).
	 */
	if (pRc->state[txRate].per >= 55 && txRate > 0 &&
  90850c:	a436      	add.n	a6, a3, a4
  90850e:	296000        	l8ui	a9, a6, 0
  908511:	c366      	movi.n	a6, 54
  908513:	796b42        	bgeu	a6, a9, 908559 <rcUpdate_ht$isra$7+0x171>
  908516:	cb4f      	beqz.n	a4, 908559 <rcUpdate_ht$isra$7+0x171>
	    pRateTable->info[txRate].rateKbps <= 
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  908518:	26307d        	l8ui	a6, a3, 125
	/*
	 * If this rate looks bad (high PER) then stop using it for
	 * a while (except if we are probing).
	 */
	if (pRc->state[txRate].per >= 55 && txRate > 0 &&
	    pRateTable->info[txRate].rateKbps <= 
  90851b:	04470a        	addx4	a7, a4, a4
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  90851e:	06660a        	addx4	a6, a6, a6
	/*
	 * If this rate looks bad (high PER) then stop using it for
	 * a while (except if we are probing).
	 */
	if (pRc->state[txRate].per >= 55 && txRate > 0 &&
	    pRateTable->info[txRate].rateKbps <= 
  908521:	05770b        	addx8	a7, a7, a5
            pRateTable->info[pRc->rateMaxPhy].rateKbps)
  908524:	05660b        	addx8	a6, a6, a5
    
	/*
	 * If this rate looks bad (high PER) then stop using it for
	 * a while (except if we are probing).
	 */
	if (pRc->state[txRate].per >= 55 && txRate > 0 &&
  908527:	8774      	l32i.n	a7, a7, 16
  908529:	8664      	l32i.n	a6, a6, 16
  90852b:	77632a        	bltu	a6, a7, 908559 <rcUpdate_ht$isra$7+0x171>
  90852e:	040c47        	extui	a12, a4, 0, 8
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  908531:	2a3041        	l8ui	a10, a3, 65
  908534:	d730      	mov.n	a7, a3
  908536:	c061      	movi.n	a6, 1
  908538:	600016        	j	908552 <rcUpdate_ht$isra$7+0x16a>
  90853b:	002d70        	excw
		if (pRc->validRateIndex[i] == curValidTxRate) {
  90853e:	43b166        	excw
  908541:	b177      	addi.n	a7, a7, 1
  908543:	7cd90b        	bne	a13, a12, 908552 <rcUpdate_ht$isra$7+0x16a>
			*pNextIndex = pRc->validRateIndex[i-1];
  908546:	ab3b      	add.n	a11, a3, a11
  908548:	26b041        	l8ui	a6, a11, 65
  90854b:	26347d        	s8i	a6, a3, 125
  90854e:	600005        	j	908557 <rcUpdate_ht$isra$7+0x16f>
  908551:	00db60        	excw
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  908554:	7a62e4        	blt	a6, a10, 90853c <rcUpdate_ht$isra$7+0x154>
	{
		rcGetNextLowerValidTxRate(pRateTable, pRc, (A_UINT8) txRate, 
					  &pRc->rateMaxPhy);

		/* Don't probe for a little while. */
		pRc->probeTime = nowMsec;
  908557:	983f      	s32i.n	a8, a3, 60
	}

	/* Make sure the rates below this have lower PER */
	/* Monotonicity is kept only for rates below the current rate. */
	if (pRc->state[txRate].per < lastPer) {
  908559:	729307        	bltu	a9, a2, 908564 <rcUpdate_ht$isra$7+0x17c>
			}
		}
	}

	/* Maintain monotonicity for rates above the current rate*/
	for (rate = txRate; rate < pRc->rateTableSize - 1; rate++) {
  90855c:	263036        	l8ui	a6, a3, 54
  90855f:	b069      	addi.n	a9, a6, -1
  908561:	60004b        	j	9085b0 <rcUpdate_ht$isra$7+0x1c8>
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  908564:	04490a        	addx4	a9, a4, a4
  908567:	05990b        	addx8	a9, a9, a5
	}

	/* Make sure the rates below this have lower PER */
	/* Monotonicity is kept only for rates below the current rate. */
	if (pRc->state[txRate].per < lastPer) {
		for (rate = txRate - 1; rate >= 0; rate--) {
  90856a:	b042      	addi.n	a2, a4, -1
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  90856c:	c060      	movi.n	a6, 0

	/* Make sure the rates below this have lower PER */
	/* Monotonicity is kept only for rates below the current rate. */
	if (pRc->state[txRate].per < lastPer) {
		for (rate = txRate - 1; rate >= 0; rate--) {
			if (pRateTable->info[rate].phy != pRateTable->info[txRate].phy) {
  90856e:	db90      	mov.n	a11, a9
  908570:	600021        	j	908595 <rcUpdate_ht$isra$7+0x1ad>
  908573:	00a697        	excw
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  908576:	277ce4        	addi	a7, a7, -28

	/* Make sure the rates below this have lower PER */
	/* Monotonicity is kept only for rates below the current rate. */
	if (pRc->state[txRate].per < lastPer) {
		for (rate = txRate - 1; rate >= 0; rate--) {
			if (pRateTable->info[rate].phy != pRateTable->info[txRate].phy) {
  908579:	2a7000        	l8ui	a10, a7, 0
  90857c:	27b00c        	l8ui	a7, a11, 12
  90857f:	77a9d9        	bne	a10, a7, 90855c <rcUpdate_ht$isra$7+0x174>
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  908582:	a237      	add.n	a7, a3, a2
		for (rate = txRate - 1; rate >= 0; rate--) {
			if (pRateTable->info[rate].phy != pRateTable->info[txRate].phy) {
				break;
			}

			if (pRc->state[rate].per > pRc->state[rate+1].per) {
  908584:	2a7001        	l8ui	a10, a7, 1
  908587:	2c7000        	l8ui	a12, a7, 0
  90858a:	7cab02        	bgeu	a10, a12, 908590 <rcUpdate_ht$isra$7+0x1a8>
				pRc->state[rate].per = pRc->state[rate+1].per;
  90858d:	2a7400        	s8i	a10, a7, 0
	}

	/* Make sure the rates below this have lower PER */
	/* Monotonicity is kept only for rates below the current rate. */
	if (pRc->state[txRate].per < lastPer) {
		for (rate = txRate - 1; rate >= 0; rate--) {
  908590:	b022      	addi.n	a2, a2, -1
  908592:	266cd8        	addi	a6, a6, -40
  908595:	6920db        	bnei	a2, -1, 908574 <rcUpdate_ht$isra$7+0x18c>
  908598:	63ffc0        	j	90855c <rcUpdate_ht$isra$7+0x174>
  90859b:	000000        	ill
		}
	}

	/* Maintain monotonicity for rates above the current rate*/
	for (rate = txRate; rate < pRc->rateTableSize - 1; rate++) {
		if (pRc->state[rate+1].per < pRc->state[rate].per) {
  90859e:	b144      	addi.n	a4, a4, 1
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  9085a0:	a432      	add.n	a2, a3, a4
  9085a2:	b027      	addi.n	a7, a2, -1
		}
	}

	/* Maintain monotonicity for rates above the current rate*/
	for (rate = txRate; rate < pRc->rateTableSize - 1; rate++) {
		if (pRc->state[rate+1].per < pRc->state[rate].per) {
  9085a4:	277000        	l8ui	a7, a7, 0
  9085a7:	2a2000        	l8ui	a10, a2, 0
  9085aa:	77ab02        	bgeu	a10, a7, 9085b0 <rcUpdate_ht$isra$7+0x1c8>
			pRc->state[rate+1].per = pRc->state[rate].per;
  9085ad:	272400        	s8i	a7, a2, 0
			}
		}
	}

	/* Maintain monotonicity for rates above the current rate*/
	for (rate = txRate; rate < pRc->rateTableSize - 1; rate++) {
  9085b0:	7942ea        	blt	a4, a9, 90859e <rcUpdate_ht$isra$7+0x1b6>
			pRc->state[rate+1].per = pRc->state[rate].per;
		}
	}

	/* Every so often, we reduce the thresholds and PER (different for CCK and OFDM). */
	if (nowMsec - pRc->perDownTime >= pRateTable->rssiReduceInterval) {
  9085b3:	24321e        	l32i	a4, a3, 120
  9085b6:	225002        	l8ui	a2, a5, 2
  9085b9:	04840c        	sub	a4, a8, a4
  9085bc:	72431c        	bltu	a4, a2, 9085dc <rcUpdate_ht$isra$7+0x1f4>
  9085bf:	d230      	mov.n	a2, a3
  9085c1:	60000e        	j	9085d3 <rcUpdate_ht$isra$7+0x1eb>
  9085c4:	002420        	excw
		for (rate = 0; rate < pRc->rateTableSize; rate++) {
			pRc->state[rate].per = 7*pRc->state[rate].per/8;
  9085c7:	000444        	extui	a4, a0, 0, 5
  9085ca:	0f0434        	min	a4, a0, a15
  9085cd:	122424        	l32r	a2, 8d1660 <_bss_end+0x3c3e58>
  9085d0:	00b122        	excw
		}
	}
}

static void
rcUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an, int txRate, 
  9085d3:	03240c        	sub	a4, a2, a3
		}
	}

	/* Every so often, we reduce the thresholds and PER (different for CCK and OFDM). */
	if (nowMsec - pRc->perDownTime >= pRateTable->rssiReduceInterval) {
		for (rate = 0; rate < pRc->rateTableSize; rate++) {
  9085d6:	7642eb        	blt	a4, a6, 9085c5 <rcUpdate_ht$isra$7+0x1dd>
			pRc->state[rate].per = 7*pRc->state[rate].per/8;
		}

		pRc->perDownTime = nowMsec;
  9085d9:	28361e        	s32i	a8, a3, 120
  9085dc:	d10f      	retw.n
	...

009085e0 <rcSibUpdate_ht$constprop$9>:
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  9085e0:	6c105e        	entry	a1, 0x2f0
	TX_RATE_CTRL *pRc = (TX_RATE_CTRL *)(pSib);
	PHY_STATE_CTRL mPhyCtrlState;  

	A_UINT8 i, j, k, hi = 0, htHi = 0;

	pRateTable = (RATE_TABLE_11N*)asc->hwRateTable[sc->sc_curmode];
  9085e3:	262248        	l32i	a6, a2, 0x120
  9085e6:	2222c2        	l32i	a2, a2, 0x308
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
	       A_UINT32 capflag, A_BOOL keepState, struct ieee80211_rate  *pRateSet)
{
	RATE_TABLE_11N *pRateTable = 0;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
  9085e9:	233282        	l32i	a3, a3, 0x208
	TX_RATE_CTRL *pRc = (TX_RATE_CTRL *)(pSib);
	PHY_STATE_CTRL mPhyCtrlState;  

	A_UINT8 i, j, k, hi = 0, htHi = 0;

	pRateTable = (RATE_TABLE_11N*)asc->hwRateTable[sc->sc_curmode];
  9085ec:	06220a        	addx4	a2, a2, a6

	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;
  9085ef:	c366      	movi.n	a6, 54
	TX_RATE_CTRL *pRc = (TX_RATE_CTRL *)(pSib);
	PHY_STATE_CTRL mPhyCtrlState;  

	A_UINT8 i, j, k, hi = 0, htHi = 0;

	pRateTable = (RATE_TABLE_11N*)asc->hwRateTable[sc->sc_curmode];
  9085f1:	8221      	l32i.n	a2, a2, 4

	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;
  9085f3:	263436        	s8i	a6, a3, 54
  9085f6:	c060      	movi.n	a6, 0

	/* Initialize thresholds according to the global rate table */
	for (i = 0 ; (i < pRc->rateTableSize) && (!keepState); i++) {
		pRc->state[i].per       = 0;
  9085f8:	d960      	mov.n	a9, a6

	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;

	/* Initialize thresholds according to the global rate table */
	for (i = 0 ; (i < pRc->rateTableSize) && (!keepState); i++) {
  9085fa:	c376      	movi.n	a7, 54
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  9085fc:	a638      	add.n	a8, a3, a6
	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;

	/* Initialize thresholds according to the global rate table */
	for (i = 0 ; (i < pRc->rateTableSize) && (!keepState); i++) {
		pRc->state[i].per       = 0;
  9085fe:	298400        	s8i	a9, a8, 0
  908601:	b166      	addi.n	a6, a6, 1

	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;

	/* Initialize thresholds according to the global rate table */
	for (i = 0 ; (i < pRc->rateTableSize) && (!keepState); i++) {
  908603:	7769f5        	bne	a6, a7, 9085fc <rcSibUpdate_ht$constprop$9+0x1c>
  908606:	d730      	mov.n	a7, a3
rcInitValidTxMask(TX_RATE_CTRL *pRc)
{
	A_UINT8 i;

	for (i = 0; i < pRc->rateTableSize; i++) {
		pRc->validRateIndex[i] = FALSE;
  908608:	c080      	movi.n	a8, 0
  90860a:	b066      	addi.n	a6, a6, -1
  90860c:	287442        	s8i	a8, a7, 66
  90860f:	060647        	extui	a6, a6, 0, 8
  908612:	b177      	addi.n	a7, a7, 1
static void
rcInitValidTxMask(TX_RATE_CTRL *pRc)
{
	A_UINT8 i;

	for (i = 0; i < pRc->rateTableSize; i++) {
  908614:	656ff2        	bnez	a6, 90860a <rcSibUpdate_ht$constprop$9+0x2a>
  908617:	2116aa        	s32i	a1, a1, 0x2a8
  90861a:	d810      	mov.n	a8, a1
	/* Determine the valid rates */
	rcInitValidTxMask(pRc);

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < MAX_TX_RATE_TBL; j++) {
			mPhyCtrlState.validPhyRateIndex[i][j] = 0;
  90861c:	d960      	mov.n	a9, a6

	/* Determine the valid rates */
	rcInitValidTxMask(pRc);

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < MAX_TX_RATE_TBL; j++) {
  90861e:	c3a6      	movi.n	a10, 54
			mPhyCtrlState.validPhyRateIndex[i][j] = 0;
  908620:	db60      	mov.n	a11, a6
  908622:	600016        	j	90863c <rcSibUpdate_ht$constprop$9+0x5c>
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  908625:	a78c      	add.n	a12, a8, a7
	/* Determine the valid rates */
	rcInitValidTxMask(pRc);

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < MAX_TX_RATE_TBL; j++) {
			mPhyCtrlState.validPhyRateIndex[i][j] = 0;
  908627:	29c40c        	s8i	a9, a12, 12
  90862a:	b177      	addi.n	a7, a7, 1

	/* Determine the valid rates */
	rcInitValidTxMask(pRc);

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < MAX_TX_RATE_TBL; j++) {
  90862c:	7a79f5        	bne	a7, a10, 908625 <rcSibUpdate_ht$constprop$9+0x45>
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90862f:	a617      	add.n	a7, a1, a6

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < MAX_TX_RATE_TBL; j++) {
			mPhyCtrlState.validPhyRateIndex[i][j] = 0;
		}   
		mPhyCtrlState.validPhyRateCount[i] = 0;
  908631:	2b7400        	s8i	a11, a7, 0
  908634:	b166      	addi.n	a6, a6, 1
  908636:	288c36        	addi	a8, a8, 54
	}

	/* Determine the valid rates */
	rcInitValidTxMask(pRc);

	for (i = 0; i < WLAN_RC_PHY_MAX; i++) {
  908639:	686a04        	beqi	a6, 12, 908641 <rcSibUpdate_ht$constprop$9+0x61>

	/* Initial rate table size. Will change depending on the working rate set */
	pRc->rateTableSize = MAX_TX_RATE_TBL;

	/* Initialize thresholds according to the global rate table */
	for (i = 0 ; (i < pRc->rateTableSize) && (!keepState); i++) {
  90863c:	c070      	movi.n	a7, 0
  90863e:	63ffe3        	j	908625 <rcSibUpdate_ht$constprop$9+0x45>
			mPhyCtrlState.validPhyRateIndex[i][j] = 0;
		}   
		mPhyCtrlState.validPhyRateCount[i] = 0;
	}

	pRc->rcPhyMode = (capflag & WLAN_RC_40_FLAG);
  908641:	c062      	movi.n	a6, 2
  908643:	064801        	and	a8, a4, a6
  908646:	040f40        	extui	a15, a4, 0, 1
  908649:	2816a8        	s32i	a8, a1, 0x2a0
  90864c:	28347c        	s8i	a8, a3, 124
  90864f:	2f16ab        	s32i	a15, a1, 0x2ac

	if (pRateSet == NULL || !pRateSet->rates.rs_nrates) {
  908652:	c854      	beqz.n	a5, 90865a <rcSibUpdate_ht$constprop$9+0x7a>
  908654:	275000        	l8ui	a7, a5, 0
  908657:	657069        	bnez	a7, 9086c4 <rcSibUpdate_ht$constprop$9+0xe4>
static A_UINT8 rcSibInitValidRates(const RATE_TABLE_11N *pRateTable,
				   TX_RATE_CTRL *pRc,
				   A_UINT32 capflag,
				   PHY_STATE_CTRL *pPhyStateCtrl)
{
	A_UINT8 i, hi = 0;
  90865a:	c060      	movi.n	a6, 0
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	for (i = 0; i < pRateTable->rateCount; i++) {
  90865c:	d560      	mov.n	a5, a6
  90865e:	600058        	j	9086ba <rcSibUpdate_ht$constprop$9+0xda>
  908661:	0e5711        	slli	a7, a5, 2
		if (singleStream) {
  908664:	2812ab        	l32i	a8, a1, 0x2ac
			valid = pRateTable->info[i].validSingleStream;
  908667:	a577      	add.n	a7, a7, a5
  908669:	02770b        	addx8	a7, a7, a2
	A_UINT8 i, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	for (i = 0; i < pRateTable->rateCount; i++) {
		if (singleStream) {
  90866c:	cc85      	bnez.n	a8, 908675 <rcSibUpdate_ht$constprop$9+0x95>
			valid = pRateTable->info[i].validSingleStream;
  90866e:	28700b        	l8ui	a8, a7, 11
  908671:	600003        	j	908678 <rcSibUpdate_ht$constprop$9+0x98>
  908674:	002870        	excw
		} else {
			valid = pRateTable->info[i].valid;
  908677:	076981        	excw
		}
            
		if (valid == TRUE) {
  90867a:	390557        	excw
			A_UINT32 phy = pRateTable->info[i].phy;
  90867d:	0a0277        	excw
  908680:	0b2770        	excw
  908683:	0cdb40        	extui	a11, a12, 13, 1

			if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
  908686:	da70      	mov.n	a10, a7
  908688:	c0c0      	movi.n	a12, 0
  90868a:	2816b1        	s32i	a8, a1, 0x2c4
  90868d:	5bff17        	call8	9082ec <rcIsValidPhyRate>
  908690:	2812b1        	l32i	a8, a1, 0x2c4
  908693:	c9ae      	beqz.n	a10, 9086b5 <rcSibUpdate_ht$constprop$9+0xd5>
				continue;

			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = i;
  908695:	a719      	add.n	a9, a1, a7
  908697:	2a9000        	l8ui	a10, a9, 0
  90869a:	077709        	addx2	a7, a7, a7
  90869d:	07770b        	addx8	a7, a7, a7
  9086a0:	0a7709        	addx2	a7, a7, a10
  9086a3:	a717      	add.n	a7, a1, a7
  9086a5:	25740c        	s8i	a5, a7, 12
			pPhyStateCtrl->validPhyRateCount[phy] += 1;
  9086a8:	b1aa      	addi.n	a10, a10, 1

static INLINE void
rcSetValidTxMask(TX_RATE_CTRL *pRc, A_UINT8 index, A_BOOL validTxRate)
{
	ASSERT(index < pRc->rateTableSize);
	pRc->validRateIndex[index] = validTxRate ? TRUE : FALSE;
  9086aa:	a537      	add.n	a7, a3, a5

			if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
				continue;

			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = i;
			pPhyStateCtrl->validPhyRateCount[phy] += 1;
  9086ac:	2a9400        	s8i	a10, a9, 0

static INLINE void
rcSetValidTxMask(TX_RATE_CTRL *pRc, A_UINT8 index, A_BOOL validTxRate)
{
	ASSERT(index < pRc->rateTableSize);
	pRc->validRateIndex[index] = validTxRate ? TRUE : FALSE;
  9086af:	287442        	s8i	a8, a7, 66
			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = i;
			pPhyStateCtrl->validPhyRateCount[phy] += 1;

			rcSetValidTxMask(pRc, i, TRUE);

			hi = A_MAX(hi, i);
  9086b2:	056637        	maxu	a6, a6, a5
{
	A_UINT8 i, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	for (i = 0; i < pRateTable->rateCount; i++) {
  9086b5:	b155      	addi.n	a5, a5, 1
  9086b7:	050547        	extui	a5, a5, 0, 8
  9086ba:	272000        	l8ui	a7, a2, 0
  9086bd:	7753a0        	bltu	a5, a7, 908661 <rcSibUpdate_ht$constprop$9+0x81>
  9086c0:	6001aa        	j	90886e <rcSibUpdate_ht$constprop$9+0x28e>
  9086c3:	00c0f0        	excw
                   struct ieee80211_rateset *pRateSet,
		   A_UINT32 capflag,
		   struct ath_node_target *an,
		   PHY_STATE_CTRL *pPhyStateCtrl)
{
	A_UINT8 i, j, hi = 0;
  9086c6:	2f16a9        	s32i	a15, a1, 0x2a4
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
  9086c9:	d8f0      	mov.n	a8, a15
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
			     (pRateTable->info[j].dot11Rate & 0x7F))
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) == 
  9086cb:	2f12a8        	l32i	a15, a1, 0x2a0
  9086ce:	c0d8      	movi.n	a13, 8
  9086d0:	c094      	movi.n	a9, 4
  9086d2:	0d4d01        	and	a13, a4, a13

static INLINE void
rcSetValidTxMask(TX_RATE_CTRL *pRc, A_UINT8 index, A_BOOL validTxRate)
{
	ASSERT(index < pRc->rateTableSize);
	pRc->validRateIndex[index] = validTxRate ? TRUE : FALSE;
  9086d5:	c0e1      	movi.n	a14, 1
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
			     (pRateTable->info[j].dot11Rate & 0x7F))
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) == 
  9086d7:	0f6938        	moveqz	a9, a6, a15
  9086da:	6000aa        	j	908788 <rcSibUpdate_ht$constprop$9+0x1a8>
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
			A_UINT32 phy = pRateTable->info[j].phy;
  9086dd:	066a0a        	addx4	a10, a6, a6

			if (pSib->stbc) {
				valid = pRateTable->info[j].validSTBC;
			} else if (singleStream) {
#else
			if (singleStream) {
  9086e0:	2b12ab        	l32i	a11, a1, 0x2ac
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
			A_UINT32 phy = pRateTable->info[j].phy;
  9086e3:	02aa0b        	addx8	a10, a10, a2
  9086e6:	27a00c        	l8ui	a7, a10, 12

			if (pSib->stbc) {
				valid = pRateTable->info[j].validSTBC;
			} else if (singleStream) {
#else
			if (singleStream) {
  9086e9:	ccb5      	bnez.n	a11, 9086f2 <rcSibUpdate_ht$constprop$9+0x112>
#endif            
				valid = pRateTable->info[j].validSingleStream;
  9086eb:	8ba2      	l32i.n	a11, a10, 8
  9086ed:	600003        	j	9086f4 <rcSibUpdate_ht$constprop$9+0x114>
  9086f0:	00008b        	excw
			} else {
				valid = pRateTable->info[j].valid;
  9086f3:	a106      	add.n	a6, a0, a1
			 * We allow a rate only if its valid and the capflag matches one of
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
			     (pRateTable->info[j].dot11Rate & 0x7F))
  9086f5:	6a0a02        	blti	a0, 12, 9086fb <rcSibUpdate_ht$constprop$9+0x11b>
  9086f8:	aa0b      	add.n	a11, a0, a10
			/*
			 * We allow a rate only if its valid and the capflag matches one of
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
  9086fa:	2cf000        	l8ui	a12, a15, 0
  9086fd:	2aa01a        	l8ui	a10, a10, 26
  908700:	0aca03        	xor	a10, a12, a10
  908703:	0a0a46        	extui	a10, a10, 0, 7
  908706:	65a062        	bnez	a10, 90876c <rcSibUpdate_ht$constprop$9+0x18c>
			     (pRateTable->info[j].dot11Rate & 0x7F))
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) == 
  908709:	c0a1      	movi.n	a10, 1
  90870b:	0d9a39        	movnez	a10, a9, a13
  90870e:	0bab01        	and	a11, a10, a11
  908711:	c0a1      	movi.n	a10, 1
  908713:	0d9a39        	movnez	a10, a9, a13
  908716:	7ab952        	bne	a11, a10, 90876c <rcSibUpdate_ht$constprop$9+0x18c>
				WLAN_RC_CAP_MODE(capflag)) && !WLAN_RC_PHY_HT(phy)) {
  908719:	6f744f        	bgeui	a7, 4, 90876c <rcSibUpdate_ht$constprop$9+0x18c>
				if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
  90871c:	da70      	mov.n	a10, a7
  90871e:	db40      	mov.n	a11, a4
  908720:	2c0a00        	movi	a12, 0
  908723:	2816b1        	s32i	a8, a1, 0x2c4
  908726:	2916b0        	s32i	a9, a1, 0x2c0
  908729:	2d16ae        	s32i	a13, a1, 0x2b8
  90872c:	2e16af        	s32i	a14, a1, 0x2bc
  90872f:	2f16ad        	s32i	a15, a1, 0x2b4
  908732:	5bfeee        	call8	9082ec <rcIsValidPhyRate>
  908735:	2812b1        	l32i	a8, a1, 0x2c4
  908738:	2912b0        	l32i	a9, a1, 0x2c0
  90873b:	2d12ae        	l32i	a13, a1, 0x2b8
  90873e:	2e12af        	l32i	a14, a1, 0x2bc
  908741:	2f12ad        	l32i	a15, a1, 0x2b4
  908744:	caa4      	beqz.n	a10, 90876c <rcSibUpdate_ht$constprop$9+0x18c>
					continue;

				pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
  908746:	a71a      	add.n	a10, a1, a7
  908748:	2ba000        	l8ui	a11, a10, 0
  90874b:	077709        	addx2	a7, a7, a7
  90874e:	07770b        	addx8	a7, a7, a7
  908751:	0b7709        	addx2	a7, a7, a11
				pPhyStateCtrl->validPhyRateCount[phy] += 1;
  908754:	b1bb      	addi.n	a11, a11, 1
  908756:	2ba400        	s8i	a11, a10, 0

				rcSetValidTxMask(pRc, j, TRUE);
				hi = A_MAX(hi, j);
  908759:	2a12a9        	l32i	a10, a1, 0x2a4
			    && ((valid & WLAN_RC_CAP_MODE(capflag)) == 
				WLAN_RC_CAP_MODE(capflag)) && !WLAN_RC_PHY_HT(phy)) {
				if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
					continue;

				pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
  90875c:	a717      	add.n	a7, a1, a7
  90875e:	26740c        	s8i	a6, a7, 12
				pPhyStateCtrl->validPhyRateCount[phy] += 1;

				rcSetValidTxMask(pRc, j, TRUE);
				hi = A_MAX(hi, j);
  908761:	06aa37        	maxu	a10, a10, a6

static INLINE void
rcSetValidTxMask(TX_RATE_CTRL *pRc, A_UINT8 index, A_BOOL validTxRate)
{
	ASSERT(index < pRc->rateTableSize);
	pRc->validRateIndex[index] = validTxRate ? TRUE : FALSE;
  908764:	a637      	add.n	a7, a3, a6
  908766:	2e7442        	s8i	a14, a7, 66

				pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
				pPhyStateCtrl->validPhyRateCount[phy] += 1;

				rcSetValidTxMask(pRc, j, TRUE);
				hi = A_MAX(hi, j);
  908769:	2a16a9        	s32i	a10, a1, 0x2a4
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
  90876c:	b166      	addi.n	a6, a6, 1
  90876e:	060647        	extui	a6, a6, 0, 8
  908771:	600005        	j	90877a <rcSibUpdate_ht$constprop$9+0x19a>
			/*
			 * We allow a rate only if its valid and the capflag matches one of
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
  908774:	a85f      	add.n	a15, a5, a8
	A_UINT8 i, j, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
  908776:	c060      	movi.n	a6, 0
			/*
			 * We allow a rate only if its valid and the capflag matches one of
			 * the validity (TRUE/TRUE_20/TRUE_40) flags
			 */

			if (((pRateSet->rs_rates[i] & 0x7F) == 
  908778:	b1ff      	addi.n	a15, a15, 1
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
  90877a:	272000        	l8ui	a7, a2, 0
  90877d:	776b02        	bgeu	a6, a7, 908783 <rcSibUpdate_ht$constprop$9+0x1a3>
  908780:	63ff59        	j	9086dd <rcSibUpdate_ht$constprop$9+0xfd>
	A_UINT8 i, j, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT32 valid;
       
	/* Use intersection of working rates and valid rates */
	for (i = 0; i < pRateSet->rs_nrates; i++) {
  908783:	b188      	addi.n	a8, a8, 1
  908785:	080847        	extui	a8, a8, 0, 8
  908788:	265000        	l8ui	a6, a5, 0
  90878b:	7683e5        	bltu	a8, a6, 908774 <rcSibUpdate_ht$constprop$9+0x194>
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	A_UINT8 *phtMcs = (A_UINT8*)&pRateSet->htrates;
	TX_RATE_CTRL *pRc = (TX_RATE_CTRL *)(pSib);
	PHY_STATE_CTRL mPhyCtrlState;  

	A_UINT8 i, j, k, hi = 0, htHi = 0;
  90878e:	c080      	movi.n	a8, 0
	} else {
		/* Use intersection of working rates and valid rates */
		hi = rcSibSetValidRates(pRateTable, pRc, &(pRateSet->rates),
					capflag, an, &mPhyCtrlState);

		if (capflag & WLAN_RC_HT_FLAG) {
  908790:	7c4f02        	bbsi	a4, 28, 908796 <rcSibUpdate_ht$constprop$9+0x1b6>
  908793:	6000d1        	j	908868 <rcSibUpdate_ht$constprop$9+0x288>
	       A_UINT32 capflag, A_BOOL keepState, struct ieee80211_rate  *pRateSet)
{
	RATE_TABLE_11N *pRateTable = 0;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	A_UINT8 *phtMcs = (A_UINT8*)&pRateSet->htrates;
  908796:	2e5c1f        	addi	a14, a5, 31
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
			    || !WLAN_RC_PHY_HT(phy) 
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
			    || ((pRateTable->info[j].dot11Rate == 15) && 
				(valid & TRUE_20) && 
				(capflag & WLAN_RC_WEP_TKIP_FLAG)) )
  908799:	251a00        	movi	a5, 0x100
  90879c:	054501        	and	a5, a4, a5
	       A_UINT32 capflag, A_BOOL keepState, struct ieee80211_rate  *pRateSet)
{
	RATE_TABLE_11N *pRateTable = 0;
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	A_UINT8 *phtMcs = (A_UINT8*)&pRateSet->htrates;
  90879f:	d780      	mov.n	a7, a8
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
			    || !WLAN_RC_PHY_HT(phy) 
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
			    || ((pRateTable->info[j].dot11Rate == 15) && 
				(valid & TRUE_20) && 
				(capflag & WLAN_RC_WEP_TKIP_FLAG)) )
  9087a1:	2516ac        	s32i	a5, a1, 0x2b0
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
			    || !WLAN_RC_PHY_HT(phy) 
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
			    || ((pRateTable->info[j].dot11Rate == 15) && 
  9087a4:	c09f      	movi.n	a9, 15
  9087a6:	6000b8        	j	908862 <rcSibUpdate_ht$constprop$9+0x282>
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
			A_UINT32 phy = pRateTable->info[j].phy;
  9087a9:	0e5c11        	slli	a12, a5, 2
  9087ac:	a5ca      	add.n	a10, a12, a5

			if (pSib->stbc) {
				valid = pRateTable->info[j].validSTBC;
			} else if (singleStream) {
#else
			if (singleStream) {
  9087ae:	2f12ab        	l32i	a15, a1, 0x2ac
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
			A_UINT32 phy = pRateTable->info[j].phy;
  9087b1:	02aa0b        	addx8	a10, a10, a2
  9087b4:	26a00c        	l8ui	a6, a10, 12

			if (pSib->stbc) {
				valid = pRateTable->info[j].validSTBC;
			} else if (singleStream) {
#else
			if (singleStream) {
  9087b7:	ccf6      	bnez.n	a15, 9087c1 <rcSibUpdate_ht$constprop$9+0x1e1>
#endif
				valid = pRateTable->info[j].validSingleStream;
  9087b9:	2ba00b        	l8ui	a11, a10, 11
  9087bc:	600004        	j	9087c4 <rcSibUpdate_ht$constprop$9+0x1e4>
  9087bf:	00002b        	mulsh	a0, a0, a0
			} else {
				valid = pRateTable->info[j].valid;
  9087c2:	a007      	add.n	a7, a0, a0
			}
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
  9087c4:	a5cc      	add.n	a12, a12, a5
  9087c6:	02cc0b        	addx8	a12, a12, a2
  9087c9:	2ac01a        	l8ui	a10, a12, 26
  9087cc:	2cd000        	l8ui	a12, a13, 0
  9087cf:	0cac03        	xor	a12, a10, a12
				valid = pRateTable->info[j].validSingleStream;
			} else {
				valid = pRateTable->info[j].valid;
			}
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
  9087d2:	0c0c46        	extui	a12, a12, 0, 7
  9087d5:	65c06b        	bnez	a12, 908844 <rcSibUpdate_ht$constprop$9+0x264>
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
			    || !WLAN_RC_PHY_HT(phy) 
  9087d8:	6e6468        	bltui	a6, 4, 908844 <rcSibUpdate_ht$constprop$9+0x264>
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
  9087db:	c0f2      	movi.n	a15, 2
  9087dd:	0fbc01        	and	a12, a11, a15
  9087e0:	c8c4      	beqz.n	a12, 9087e8 <rcSibUpdate_ht$constprop$9+0x208>
  9087e2:	2f12a8        	l32i	a15, a1, 0x2a0
  9087e5:	64f13f        	beqz	a15, 908928 <rcSibUpdate_ht$constprop$9+0x348>
  9087e8:	c0f4      	movi.n	a15, 4
  9087ea:	7fb056        	bnone	a11, a15, 908844 <rcSibUpdate_ht$constprop$9+0x264>
  9087ed:	2f12a8        	l32i	a15, a1, 0x2a0
  9087f0:	64f050        	beqz	a15, 908844 <rcSibUpdate_ht$constprop$9+0x264>
			    || ((pRateTable->info[j].dot11Rate == 15) && 
  9087f3:	79a907        	bne	a10, a9, 9087fe <rcSibUpdate_ht$constprop$9+0x21e>
  9087f6:	c8c4      	beqz.n	a12, 9087fe <rcSibUpdate_ht$constprop$9+0x21e>
				(valid & TRUE_20) && 
  9087f8:	2f12ac        	l32i	a15, a1, 0x2b0
  9087fb:	65f045        	bnez	a15, 908844 <rcSibUpdate_ht$constprop$9+0x264>
				(capflag & WLAN_RC_WEP_TKIP_FLAG)) )
			{
				continue;
			}
    
			if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
  9087fe:	da60      	mov.n	a10, a6
  908800:	db40      	mov.n	a11, a4
  908802:	2c0a00        	movi	a12, 0
  908805:	2816b1        	s32i	a8, a1, 0x2c4
  908808:	2916b0        	s32i	a9, a1, 0x2c0
  90880b:	2d16ae        	s32i	a13, a1, 0x2b8
  90880e:	2e16af        	s32i	a14, a1, 0x2bc
  908811:	5bfeb6        	call8	9082ec <rcIsValidPhyRate>
  908814:	2812b1        	l32i	a8, a1, 0x2c4
  908817:	2912b0        	l32i	a9, a1, 0x2c0
  90881a:	2d12ae        	l32i	a13, a1, 0x2b8
  90881d:	2e12af        	l32i	a14, a1, 0x2bc
  908820:	caa0      	beqz.n	a10, 908844 <rcSibUpdate_ht$constprop$9+0x264>
				continue;
    
			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
  908822:	a61a      	add.n	a10, a1, a6
  908824:	2ba000        	l8ui	a11, a10, 0
  908827:	066609        	addx2	a6, a6, a6
  90882a:	06660b        	addx8	a6, a6, a6
  90882d:	0b6609        	addx2	a6, a6, a11
  908830:	a616      	add.n	a6, a1, a6
			pPhyStateCtrl->validPhyRateCount[phy] += 1;
  908832:	b1bb      	addi.n	a11, a11, 1
			}
    
			if (!rcIsValidPhyRate(phy, capflag, FALSE)) 
				continue;
    
			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
  908834:	25640c        	s8i	a5, a6, 12
			pPhyStateCtrl->validPhyRateCount[phy] += 1;
  908837:	2ba400        	s8i	a11, a10, 0

static INLINE void
rcSetValidTxMask(TX_RATE_CTRL *pRc, A_UINT8 index, A_BOOL validTxRate)
{
	ASSERT(index < pRc->rateTableSize);
	pRc->validRateIndex[index] = validTxRate ? TRUE : FALSE;
  90883a:	a536      	add.n	a6, a3, a5
  90883c:	c0a1      	movi.n	a10, 1
  90883e:	2a6442        	s8i	a10, a6, 66
    
			pPhyStateCtrl->validPhyRateIndex[phy][pPhyStateCtrl->validPhyRateCount[phy]] = j;
			pPhyStateCtrl->validPhyRateCount[phy] += 1;

			rcSetValidTxMask(pRc, j, TRUE);
			hi = A_MAX(hi, j);
  908841:	058837        	maxu	a8, a8, a5
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
  908844:	b155      	addi.n	a5, a5, 1
  908846:	050547        	extui	a5, a5, 0, 8
  908849:	600007        	j	908854 <rcSibUpdate_ht$constprop$9+0x274>
  90884c:	0000a7        	excw
				valid = pRateTable->info[j].validSingleStream;
			} else {
				valid = pRateTable->info[j].valid;
			}
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
  90884f:	ed          	.byte 0xed
	A_UINT8 i, j, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
  908850:	c050      	movi.n	a5, 0
				valid = pRateTable->info[j].validSingleStream;
			} else {
				valid = pRateTable->info[j].valid;
			}
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
  908852:	b1dd      	addi.n	a13, a13, 1
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
		for (j = 0; j < pRateTable->rateCount; j++) {
  908854:	262000        	l8ui	a6, a2, 0
  908857:	765b02        	bgeu	a5, a6, 90885d <rcSibUpdate_ht$constprop$9+0x27d>
  90885a:	63ff4b        	j	9087a9 <rcSibUpdate_ht$constprop$9+0x1c9>
	A_UINT8 i, j, hi = 0;
	A_UINT8 singleStream = (capflag & WLAN_RC_DS_FLAG) ? 0 : 1;
	A_UINT8 valid;
    
	/* Use intersection of working rates and valid rates */
	for (i = 0; i <  ((struct ieee80211_rateset *)pMcsSet)->rs_nrates; i++) {
  90885d:	b177      	addi.n	a7, a7, 1
  90885f:	070747        	extui	a7, a7, 0, 8
  908862:	25e000        	l8ui	a5, a14, 0
  908865:	7573e5        	bltu	a7, a5, 90884e <rcSibUpdate_ht$constprop$9+0x26e>
		if (capflag & WLAN_RC_HT_FLAG) {
			htHi = rcSibSetValidHtRates(pRateTable, pRc, phtMcs,
						    capflag, an, &mPhyCtrlState);
		}

		hi = A_MAX(hi, htHi);
  908868:	2f12a9        	l32i	a15, a1, 0x2a4
  90886b:	0f8637        	maxu	a6, a8, a15
	}

	pRc->rateTableSize = hi + 1;
	pRc->rateMaxPhy    = 0;
  90886e:	c040      	movi.n	a4, 0
		}

		hi = A_MAX(hi, htHi);
	}

	pRc->rateTableSize = hi + 1;
  908870:	b166      	addi.n	a6, a6, 1
	pRc->rateMaxPhy    = 0;
  908872:	24347d        	s8i	a4, a3, 125
  908875:	c040      	movi.n	a4, 0
		}

		hi = A_MAX(hi, htHi);
	}

	pRc->rateTableSize = hi + 1;
  908877:	263436        	s8i	a6, a3, 54
	pRc->rateMaxPhy    = 0;
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);

	for (i = 0, k = 0; i < WLAN_RC_PHY_MAX; i++) {
  90887a:	d540      	mov.n	a5, a4
  90887c:	60004e        	j	9088ce <rcSibUpdate_ht$constprop$9+0x2ee>
  90887f:	002f12        	srai	a15, a0, 2
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  908882:	aaa9      	add.n	a9, a10, a10
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);

	for (i = 0, k = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < mPhyCtrlState.validPhyRateCount[i]; j++) {
			pRc->validRateIndex[k++] = mPhyCtrlState.validPhyRateIndex[i][j];
  908884:	39a7f8        	excw
  908887:	28800c        	l8ui	a8, a8, 12
  90888a:	b177      	addi.n	a7, a7, 1
  90888c:	289442        	s8i	a8, a9, 66
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  90888f:	070847        	extui	a8, a7, 0, 8
  908892:	a589      	add.n	a9, a8, a5
  908894:	090947        	extui	a9, a9, 0, 8
	pRc->rateMaxPhy    = 0;
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);

	for (i = 0, k = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < mPhyCtrlState.validPhyRateCount[i]; j++) {
  908897:	7683e5        	bltu	a8, a6, 908880 <rcSibUpdate_ht$constprop$9+0x2a0>
			pRc->validRateIndex[k++] = mPhyCtrlState.validPhyRateIndex[i][j];
		}   

		if (!rcIsValidPhyRate(i, pRateTable->initialRateMax, TRUE) ||
  90889a:	2b2003        	l8ui	a11, a2, 3
  90889d:	a565      	add.n	a5, a6, a5
  90889f:	da40      	mov.n	a10, a4
  9088a1:	c0c1      	movi.n	a12, 1
  9088a3:	050547        	extui	a5, a5, 0, 8
  9088a6:	5bfe91        	call8	9082ec <rcIsValidPhyRate>
  9088a9:	c9a3      	beqz.n	a10, 9088c0 <rcSibUpdate_ht$constprop$9+0x2e0>
  9088ab:	646011        	beqz	a6, 9088c0 <rcSibUpdate_ht$constprop$9+0x2e0>
		    !mPhyCtrlState.validPhyRateCount[i]) 
			continue;

		pRc->rateMaxPhy = mPhyCtrlState.validPhyRateIndex[i][j-1];	
  9088ae:	044709        	addx2	a7, a4, a4
  9088b1:	07770b        	addx8	a7, a7, a7
  9088b4:	017709        	addx2	a7, a7, a1
  9088b7:	067608        	add	a6, a7, a6
  9088ba:	26600b        	l8ui	a6, a6, 11
  9088bd:	26347d        	s8i	a6, a3, 125
  9088c0:	2612aa        	l32i	a6, a1, 0x2a8
  9088c3:	b144      	addi.n	a4, a4, 1
  9088c5:	266c36        	addi	a6, a6, 54
  9088c8:	2616aa        	s32i	a6, a1, 0x2a8
	pRc->rateTableSize = hi + 1;
	pRc->rateMaxPhy    = 0;
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);

	for (i = 0, k = 0; i < WLAN_RC_PHY_MAX; i++) {
  9088cb:	684a09        	beqi	a4, 12, 9088d8 <rcSibUpdate_ht$constprop$9+0x2f8>
 *  (e.g. SME operation, wireless mode change)
 *
 *  It will determine which rates are valid for use.
 */
static void
rcSibUpdate_ht(struct ath_softc_tgt *sc, struct ath_node_target *an,
  9088ce:	a416      	add.n	a6, a1, a4
	pRc->rateMaxPhy    = 0;
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);

	for (i = 0, k = 0; i < WLAN_RC_PHY_MAX; i++) {
		for (j = 0; j < mPhyCtrlState.validPhyRateCount[i]; j++) {
  9088d0:	266000        	l8ui	a6, a6, 0
  9088d3:	c070      	movi.n	a7, 0
  9088d5:	63ffb6        	j	90888f <rcSibUpdate_ht$constprop$9+0x2af>
	}
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);
	ASSERT(k <= MAX_TX_RATE_TBL);

	pRc->rateMaxPhy = pRc->validRateIndex[k-4];
  9088d8:	a534      	add.n	a4, a3, a5
  9088da:	24403e        	l8ui	a4, a4, 62
	pRc->maxValidRate = k;
  9088dd:	253441        	s8i	a5, a3, 65
	}
    
	ASSERT(pRc->rateTableSize <= MAX_TX_RATE_TBL);
	ASSERT(k <= MAX_TX_RATE_TBL);

	pRc->rateMaxPhy = pRc->validRateIndex[k-4];
  9088e0:	24347d        	s8i	a4, a3, 125
  9088e3:	600036        	j	90891d <rcSibUpdate_ht$constprop$9+0x33d>
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
#else
				// K2
				if (pRateTable->info[pRc->validRateIndex[j]].userRateKbps >
  9088e6:	a439      	add.n	a9, a3, a4
				    pRateTable->info[pRc->validRateIndex[j+1]].userRateKbps)
  9088e8:	b144      	addi.n	a4, a4, 1
  9088ea:	a438      	add.n	a8, a3, a4
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
#else
				// K2
				if (pRateTable->info[pRc->validRateIndex[j]].userRateKbps >
  9088ec:	269042        	l8ui	a6, a9, 66
				    pRateTable->info[pRc->validRateIndex[j+1]].userRateKbps)
  9088ef:	278042        	l8ui	a7, a8, 66
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
#else
				// K2
				if (pRateTable->info[pRc->validRateIndex[j]].userRateKbps >
  9088f2:	066a0a        	addx4	a10, a6, a6
				    pRateTable->info[pRc->validRateIndex[j+1]].userRateKbps)
  9088f5:	077b0a        	addx4	a11, a7, a7
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
#else
				// K2
				if (pRateTable->info[pRc->validRateIndex[j]].userRateKbps >
  9088f8:	02aa0b        	addx8	a10, a10, a2
				    pRateTable->info[pRc->validRateIndex[j+1]].userRateKbps)
  9088fb:	02bb0b        	addx8	a11, a11, a2
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
#else
				// K2
				if (pRateTable->info[pRc->validRateIndex[j]].userRateKbps >
  9088fe:	8aa5      	l32i.n	a10, a10, 20
  908900:	8bb5      	l32i.n	a11, a11, 20
  908902:	299c40        	addi	a9, a9, 64
				    pRateTable->info[pRc->validRateIndex[j+1]].userRateKbps)
  908905:	288c40        	addi	a8, a8, 64
#ifdef MAGPIE_MERLIN      
			if (pRateTable->info[pRc->validRateIndex[j]].rateKbps >
			    pRateTable->info[pRc->validRateIndex[j+1]].rateKbps)
#else
				// K2
				if (pRateTable->info[pRc->validRateIndex[j]].userRateKbps >
  908908:	7abb05        	bgeu	a11, a10, 908911 <rcSibUpdate_ht$constprop$9+0x331>
				    pRateTable->info[pRc->validRateIndex[j+1]].userRateKbps)
#endif
				{
					A_UINT8 tmp=0;
					tmp = pRc->validRateIndex[j];
					pRc->validRateIndex[j] = pRc->validRateIndex[j+1];
  90890b:	279402        	s8i	a7, a9, 2
					pRc->validRateIndex[j+1] = tmp;
  90890e:	268402        	s8i	a6, a8, 2
rcSortValidRates(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc)
{
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
		for (j=0; j <= i-1; j++) {
  908911:	040447        	extui	a4, a4, 0, 8
  908914:	600002        	j	90891a <rcSibUpdate_ht$constprop$9+0x33a>
  908917:	00c040        	extui	a0, a0, 12, 1
  90891a:	7542c8        	blt	a4, a5, 9088e6 <rcSibUpdate_ht$constprop$9+0x306>
static void
rcSortValidRates(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc)
{
	A_UINT8 i,j;

	for (i=pRc->maxValidRate-1; i > 0; i--) {
  90891d:	b055      	addi.n	a5, a5, -1
  90891f:	050547        	extui	a5, a5, 0, 8
  908922:	655ff2        	bnez	a5, 908918 <rcSibUpdate_ht$constprop$9+0x338>
  908925:	d10f      	retw.n
  908927:	0079a1        	excw
                           
			if (((((struct ieee80211_rateset *)pMcsSet)->rs_rates[i] & 0x7F) 
			     != (pRateTable->info[j].dot11Rate & 0x7F)) 
			    || !WLAN_RC_PHY_HT(phy) 
			    || !WLAN_RC_PHY_HT_VALID(valid, capflag)
			    || ((pRateTable->info[j].dot11Rate == 15) && 
  90892a:	0263fe        	excw
  90892d:	cf63      	bnez.n	a6, 908964 <rcRateFind_11n+0x30>
  90892f:	fe          	.byte 0xfe
  908930:	c600      	movi.n	a0, -32
	...

00908934 <rcRateFind_11n>:
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
  908934:	6c100a        	entry	a1, 80
  908937:	9313      	s32i.n	a3, a1, 12
  908939:	9616      	s32i.n	a6, a1, 24
	A_UINT8 i = 0; 
	A_UINT8 tryPerRate  = 0;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  90893b:	232248        	l32i	a3, a2, 0x120
  90893e:	2622c2        	l32i	a6, a2, 0x308
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
  908941:	9715      	s32i.n	a7, a1, 20
	A_UINT8 i = 0; 
	A_UINT8 tryPerRate  = 0;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  908943:	03630a        	addx4	a3, a6, a3
  908946:	8331      	l32i.n	a3, a3, 4
	struct atheros_node *asn = ATH_NODE_ATHEROS(an);
  908948:	8813      	l32i.n	a8, a1, 12
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
  90894a:	9514      	s32i.n	a5, a1, 16
  90894c:	251215        	l32i	a5, a1, 84
	A_INT8               index;
	TX_RATE_CTRL         *pRc = NULL;

	pRc = (TX_RATE_CTRL *)(pSib ? (pSib) : NULL);

	*isProbing = FALSE;
  90894f:	c070      	movi.n	a7, 0
	struct atheros_node *asn = ATH_NODE_ATHEROS(an);
	A_UINT8 rix, nrix;
	A_UINT8 dot11Rate;
	WLAN_PHY phy;

	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0, 
  908951:	8915      	l32i.n	a9, a1, 20
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
	A_UINT8 i = 0; 
	A_UINT8 tryPerRate  = 0;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  908953:	9310      	s32i.n	a3, a1, 0
	 *   0msec   <= dt <= 25msec:   don't derate
	 *   25msec  <= dt <= 185msec:  derate linearly from 0 to 10dB
	 *   185msec <= dt:             derate by 10dB
	 */

	nowMsec = A_MS_TICKGET();
  908955:	da70      	mov.n	a10, a7
{
	A_UINT8 i = 0; 
	A_UINT8 tryPerRate  = 0;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
	struct atheros_node *asn = ATH_NODE_ATHEROS(an);
  908957:	238282        	l32i	a3, a8, 0x208
	A_INT8               index;
	TX_RATE_CTRL         *pRc = NULL;

	pRc = (TX_RATE_CTRL *)(pSib ? (pSib) : NULL);

	*isProbing = FALSE;
  90895a:	9750      	s32i.n	a7, a5, 0
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
  90895c:	241602        	s32i	a4, a1, 8
	struct atheros_node *asn = ATH_NODE_ATHEROS(an);
	A_UINT8 rix, nrix;
	A_UINT8 dot11Rate;
	WLAN_PHY phy;

	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0, 
  90895f:	090640        	extui	a6, a9, 0, 1
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
  908962:	241214        	l32i	a4, a1, 80
	 *   0msec   <= dt <= 25msec:   don't derate
	 *   25msec  <= dt <= 185msec:  derate linearly from 0 to 10dB
	 *   185msec <= dt:             derate by 10dB
	 */

	nowMsec = A_MS_TICKGET();
  908965:	5bec87        	call8	903b84 <ath_hal_getuptime>
	 * Now look up the rate in the rssi table and return it.
	 * If no rates match then we return 0 (lowest rate)
	 */

	bestThruput = 0;
	maxIndex = pRc->maxValidRate-1;
  908968:	2c3041        	l8ui	a12, a3, 65
    
	/*
	 * Try the higher rate first. It will reduce memory moving time
	 * if we have very good channel characteristics.
	 */
	for (index = maxIndex; index >= minIndex ; index--) {
  90896b:	d870      	mov.n	a8, a7
	 * Now look up the rate in the rssi table and return it.
	 * If no rates match then we return 0 (lowest rate)
	 */

	bestThruput = 0;
	maxIndex = pRc->maxValidRate-1;
  90896d:	b0cf      	addi.n	a15, a12, -1
  90896f:	0f0f47        	extui	a15, a15, 0, 8
  908972:	9c18      	s32i.n	a12, a1, 32

	minIndex = 0;
	bestRate = minIndex;
  908974:	db70      	mov.n	a11, a7
	/*
	 * Now look up the rate in the rssi table and return it.
	 * If no rates match then we return 0 (lowest rate)
	 */

	bestThruput = 0;
  908976:	dc70      	mov.n	a12, a7
	}

	return rix;
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
  908978:	00f732        	sext	a7, a15, 7
  90897b:	a73d      	add.n	a13, a3, a7
  90897d:	9d11      	s32i.n	a13, a1, 4
  90897f:	600040        	j	9089c3 <rcRateFind_11n+0x8f>
  908982:	8e11      	l32i.n	a14, a1, 4
  908984:	a8e7      	add.n	a7, a14, a8
	 * if we have very good channel characteristics.
	 */
	for (index = maxIndex; index >= minIndex ; index--) {
		A_UINT8 perThres;
    
		rate = pRc->validRateIndex[index];
  908986:	297042        	l8ui	a9, a7, 66
		if (rate > pRc->rateMaxPhy) {
  908989:	27307d        	l8ui	a7, a3, 125
  90898c:	797331        	bltu	a7, a9, 9089c1 <rcRateFind_11n+0x8d>
		}

		/* if the best throughput is already larger than the userRateKbps..
		 * then we could skip of rest of calculation.. 
		 */
		if( bestThruput >= pRateTable->info[rate].userRateKbps)
  90898f:	8d10      	l32i.n	a13, a1, 0
  908991:	09970a        	addx4	a7, a9, a9
  908994:	0d770b        	addx8	a7, a7, a13
  908997:	8775      	l32i.n	a7, a7, 20
  908999:	77c308        	bltu	a12, a7, 9089a5 <rcRateFind_11n+0x71>
	/*
	 * Must check the actual rate (rateKbps) to account for non-monoticity of
	 * 11g's rate table
	 */

	if (rate >= pRc->rateMaxPhy && probeAllowed) {
  90899c:	27307d        	l8ui	a7, a3, 125
  90899f:	77bb29        	bgeu	a11, a7, 9089cc <rcRateFind_11n+0x98>
  9089a2:	600028        	j	9089ce <rcRateFind_11n+0x9a>
		 * rate whose PER has decayed close to 0.  If we
		 * used to next lower rate, its PER would grow to
		 * 10-15 and we would be worse off then staying
		 * at the current rate.
		 */
		perThres = pRc->state[rate].per;
  9089a5:	a93d      	add.n	a13, a3, a9
  9089a7:	2dd000        	l8ui	a13, a13, 0
		if ( perThres < 12 ) {
  9089aa:	c0eb      	movi.n	a14, 11
  9089ac:	7de301        	bltu	a14, a13, 9089b1 <rcRateFind_11n+0x7d>
			perThres = 12;
  9089af:	c0dc      	movi.n	a13, 12
		}

		thisThruput = pRateTable->info[rate].userRateKbps * (100 - perThres);
  9089b1:	2e0a64        	movi	a14, 100
  9089b4:	0ded0c        	sub	a13, a14, a13
  9089b7:	07dd28        	mull	a13, a13, a7
		if (bestThruput <= thisThruput) {
  9089ba:	7cd303        	bltu	a13, a12, 9089c1 <rcRateFind_11n+0x8d>
  9089bd:	db90      	mov.n	a11, a9
  9089bf:	dcd0      	mov.n	a12, a13
  9089c1:	b088      	addi.n	a8, a8, -1
	}

	return rix;
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
  9089c3:	a8f7      	add.n	a7, a15, a8
    
	/*
	 * Try the higher rate first. It will reduce memory moving time
	 * if we have very good channel characteristics.
	 */
	for (index = maxIndex; index >= minIndex ; index--) {
  9089c5:	7877b9        	bbci	a7, 24, 908982 <rcRateFind_11n+0x4e>
  9089c8:	63ffd0        	j	90899c <rcRateFind_11n+0x68>
  9089cb:	00ce68        	excw
	/*
	 * Must check the actual rate (rateKbps) to account for non-monoticity of
	 * 11g's rate table
	 */

	if (rate >= pRc->rateMaxPhy && probeAllowed) {
  9089ce:	d7b0      	mov.n	a7, a11
  9089d0:	600045        	j	908a19 <rcRateFind_11n+0xe5>
  9089d3:	00a839        	movnez	a8, a10, a0
                     A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_UINT8 i;

	for (i = 0; i < pRc->maxValidRate-1; i++) {
		if (pRc->validRateIndex[i] == curValidTxRate) {
  9089d6:	2b9042        	l8ui	a11, a9, 66
  9089d9:	77b913        	bne	a11, a7, 9089f0 <rcRateFind_11n+0xbc>
		rate = pRc->rateMaxPhy;

		/* Probe the next allowed phy state */
		/* FIXME: Check to make sure ratMax is checked properly */
		if (rcGetNextValidTxRate( pRateTable, pRc, rate, &nextRate) && 
		    (nowMsec - pRc->probeTime > pRateTable->probeInterval) &&
  9089dc:	8c10      	l32i.n	a12, a1, 0
{
	A_UINT8 i;

	for (i = 0; i < pRc->maxValidRate-1; i++) {
		if (pRc->validRateIndex[i] == curValidTxRate) {
			*pNextIndex = pRc->validRateIndex[i+1];
  9089de:	289043        	l8ui	a8, a9, 67
		rate = pRc->rateMaxPhy;

		/* Probe the next allowed phy state */
		/* FIXME: Check to make sure ratMax is checked properly */
		if (rcGetNextValidTxRate( pRateTable, pRc, rate, &nextRate) && 
		    (nowMsec - pRc->probeTime > pRateTable->probeInterval) &&
  9089e1:	893f      	l32i.n	a9, a3, 60
  9089e3:	2bc001        	l8ui	a11, a12, 1
  9089e6:	09a90c        	sub	a9, a10, a9
	if (rate >= pRc->rateMaxPhy && probeAllowed) {
		rate = pRc->rateMaxPhy;

		/* Probe the next allowed phy state */
		/* FIXME: Check to make sure ratMax is checked properly */
		if (rcGetNextValidTxRate( pRateTable, pRc, rate, &nextRate) && 
  9089e9:	79b317        	bltu	a11, a9, 908a04 <rcRateFind_11n+0xd0>
  9089ec:	600029        	j	908a19 <rcRateFind_11n+0xe5>
  9089ef:	00b188        	excw
rcGetNextValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc, 
                     A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_UINT8 i;

	for (i = 0; i < pRc->maxValidRate-1; i++) {
  9089f2:	080847        	extui	a8, a8, 0, 8
  9089f5:	600005        	j	9089fe <rcRateFind_11n+0xca>
  9089f8:	8d18      	l32i.n	a13, a1, 32
	/*
	 * Must check the actual rate (rateKbps) to account for non-monoticity of
	 * 11g's rate table
	 */

	if (rate >= pRc->rateMaxPhy && probeAllowed) {
  9089fa:	c080      	movi.n	a8, 0
rcGetNextValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc, 
                     A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_UINT8 i;

	for (i = 0; i < pRc->maxValidRate-1; i++) {
  9089fc:	b0de      	addi.n	a14, a13, -1
  9089fe:	7e82d2        	blt	a8, a14, 9089d4 <rcRateFind_11n+0xa0>
  908a01:	600014        	j	908a19 <rcRateFind_11n+0xe5>
		rate = pRc->rateMaxPhy;

		/* Probe the next allowed phy state */
		/* FIXME: Check to make sure ratMax is checked properly */
		if (rcGetNextValidTxRate( pRateTable, pRc, rate, &nextRate) && 
		    (nowMsec - pRc->probeTime > pRateTable->probeInterval) &&
  908a04:	293040        	l8ui	a9, a3, 64
  908a07:	c89e      	beqz.n	a9, 908a19 <rcRateFind_11n+0xe5>
		    (pRc->hwMaxRetryPktCnt >= 1))
		{
			rate                  = nextRate;
			pRc->probeRate        = rate;
			pRc->probeTime        = nowMsec;
			pRc->hwMaxRetryPktCnt = 0;
  908a09:	c070      	movi.n	a7, 0
  908a0b:	273440        	s8i	a7, a3, 64
		if (rcGetNextValidTxRate( pRateTable, pRc, rate, &nextRate) && 
		    (nowMsec - pRc->probeTime > pRateTable->probeInterval) &&
		    (pRc->hwMaxRetryPktCnt >= 1))
		{
			rate                  = nextRate;
			pRc->probeRate        = rate;
  908a0e:	283437        	s8i	a8, a3, 55
			pRc->probeTime        = nowMsec;
			pRc->hwMaxRetryPktCnt = 0;
			*isProbing            = TRUE;
  908a11:	c071      	movi.n	a7, 1
		    (nowMsec - pRc->probeTime > pRateTable->probeInterval) &&
		    (pRc->hwMaxRetryPktCnt >= 1))
		{
			rate                  = nextRate;
			pRc->probeRate        = rate;
			pRc->probeTime        = nowMsec;
  908a13:	9a3f      	s32i.n	a10, a3, 60
			pRc->hwMaxRetryPktCnt = 0;
			*isProbing            = TRUE;
  908a15:	9750      	s32i.n	a7, a5, 0
{
	A_UINT8 i;

	for (i = 0; i < pRc->maxValidRate-1; i++) {
		if (pRc->validRateIndex[i] == curValidTxRate) {
			*pNextIndex = pRc->validRateIndex[i+1];
  908a17:	d780      	mov.n	a7, a8
	 * Make sure rate is not higher than the allowed maximum.
	 * We should also enforce the min, but I suspect the min is
	 * normally 1 rather than 0 because of the rate 9 vs 6 issue
	 * in the old code.
	 */
	if (rate > (pRc->rateTableSize - 1)) {
  908a19:	283036        	l8ui	a8, a3, 54
  908a1c:	787205        	blt	a7, a8, 908a25 <rcRateFind_11n+0xf1>
		rate = pRc->rateTableSize - 1;
  908a1f:	278cff        	addi	a7, a8, -1
  908a22:	070747        	extui	a7, a7, 0, 8
	}

	/* record selected rate, which is used to decide if we want to do fast frame */
	if (!(*isProbing) && pSib) {
  908a25:	8850      	l32i.n	a8, a5, 0
  908a27:	cd82      	bnez.n	a8, 908a3d <rcRateFind_11n+0x109>
		pSib->lastRateKbps = pRateTable->info[rate].rateKbps;
  908a29:	8910      	l32i.n	a9, a1, 0
  908a2b:	07780a        	addx4	a8, a7, a7
  908a2e:	09880b        	addx8	a8, a8, a9
  908a31:	8884      	l32i.n	a8, a8, 16
  908a33:	283620        	s32i	a8, a3, 128
		((struct atheros_softc*)sc->sc_rc)->currentTxRateKbps = pSib->lastRateKbps;
  908a36:	232248        	l32i	a3, a2, 0x120
  908a39:	9834      	s32i.n	a8, a3, 16
		((struct atheros_softc*)sc->sc_rc)->currentTxRateIndex = rate;
  908a3b:	9735      	s32i.n	a7, a3, 20

	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0, 
			    isProbe);
	nrix = rix;

	if ((rcflag & ATH_RC_PROBE_ALLOWED) && (*isProbe)) {
  908a3d:	646041        	beqz	a6, 908a82 <rcRateFind_11n+0x14e>
  908a40:	8350      	l32i.n	a3, a5, 0

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
	A_UINT8 i = 0; 
  908a42:	c0e0      	movi.n	a14, 0

	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0, 
			    isProbe);
	nrix = rix;

	if ((rcflag & ATH_RC_PROBE_ALLOWED) && (*isProbe)) {
  908a44:	d570      	mov.n	a5, a7
  908a46:	7e313c        	beq	a3, a14, 908a86 <rcRateFind_11n+0x152>
		/* set one try for probe rates. For the probes don't enable rts */
		rcRateSetseries(pRateTable, &series[i++], 1, nrix,
  908a49:	8a10      	l32i.n	a10, a1, 0
  908a4b:	db40      	mov.n	a11, a4
  908a4d:	c0c1      	movi.n	a12, 1
  908a4f:	dd70      	mov.n	a13, a7
  908a51:	5bfe43        	call8	908360 <rcRateSetseries$isra$5>
               const RATE_TABLE_11N *pRateTable , 
               A_UINT8 rix, A_UINT16 stepDown, A_UINT16 minRate)
{
	A_UINT32                j;
	A_UINT8                 nextIndex;
	struct atheros_node     *pSib = ATH_NODE_ATHEROS(an);
  908a54:	8313      	l32i.n	a3, a1, 12
  908a56:	253282        	l32i	a5, a3, 0x208
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  908a59:	c031      	movi.n	a3, 1
  908a5b:	285041        	l8ui	a8, a5, 65
  908a5e:	d650      	mov.n	a6, a5
  908a60:	600012        	j	908a76 <rcRateFind_11n+0x142>
  908a63:	002a60        	excw
		if (pRc->validRateIndex[i] == curValidTxRate) {
  908a66:	43b133        	excw
  908a69:	b166      	addi.n	a6, a6, 1
  908a6b:	77a907        	bne	a10, a7, 908a76 <rcRateFind_11n+0x142>
			*pNextIndex = pRc->validRateIndex[i-1];
  908a6e:	a955      	add.n	a5, a5, a9
  908a70:	255041        	l8ui	a5, a5, 65
  908a73:	600006        	j	908a7d <rcRateFind_11n+0x149>
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  908a76:	d930      	mov.n	a9, a3
  908a78:	7832e8        	blt	a3, a8, 908a64 <rcRateFind_11n+0x130>
  908a7b:	d570      	mov.n	a5, a7
			    isProbe);
	nrix = rix;

	if ((rcflag & ATH_RC_PROBE_ALLOWED) && (*isProbe)) {
		/* set one try for probe rates. For the probes don't enable rts */
		rcRateSetseries(pRateTable, &series[i++], 1, nrix,
  908a7d:	c0e1      	movi.n	a14, 1
  908a7f:	600003        	j	908a86 <rcRateFind_11n+0x152>

	rix = rcRateFind_ht(sc, asn, pRateTable, (rcflag & ATH_RC_PROBE_ALLOWED) ? 1 : 0, 
			    isProbe);
	nrix = rix;

	if ((rcflag & ATH_RC_PROBE_ALLOWED) && (*isProbe)) {
  908a82:	d570      	mov.n	a5, a7

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
		    int numTries, int numRates, int stepDnInc,
		    unsigned int rcflag, struct ath_rc_series series[], int *isProbe)
{
	A_UINT8 i = 0; 
  908a84:	de60      	mov.n	a14, a6
		 * after the probe rate
		 */
		nrix = rcRateGetIndex( sc, an, pRateTable, nrix, 1, FALSE);
	}

	tryPerRate = (numTries/numRates);
  908a86:	8b14      	l32i.n	a11, a1, 16
  908a88:	2a1202        	l32i	a10, a1, 8
  908a8b:	2e1607        	s32i	a14, a1, 28
  908a8e:	5b7097        	call8	8e4cec <__divsi3>

	/* Set the choosen rate. No RTS for first series entry. */
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
  908a91:	8e17      	l32i.n	a14, a1, 28
		 * after the probe rate
		 */
		nrix = rcRateGetIndex( sc, an, pRateTable, nrix, 1, FALSE);
	}

	tryPerRate = (numTries/numRates);
  908a93:	0a0847        	extui	a8, a10, 0, 8
  908a96:	9811      	s32i.n	a8, a1, 4

	/* Set the choosen rate. No RTS for first series entry. */
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
  908a98:	0fe811        	slli	a8, a14, 1
		 * after the probe rate
		 */
		nrix = rcRateGetIndex( sc, an, pRateTable, nrix, 1, FALSE);
	}

	tryPerRate = (numTries/numRates);
  908a9b:	d6a0      	mov.n	a6, a10

	/* Set the choosen rate. No RTS for first series entry. */
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
  908a9d:	ae8b      	add.n	a11, a8, a14
  908a9f:	8a10      	l32i.n	a10, a1, 0
  908aa1:	b1e3      	addi.n	a3, a14, 1
  908aa3:	060c47        	extui	a12, a6, 0, 8
  908aa6:	04bb0a        	addx4	a11, a11, a4
  908aa9:	dd50      	mov.n	a13, a5
  908aab:	c0e0      	movi.n	a14, 0
  908aad:	5bfe2c        	call8	908360 <rcRateSetseries$isra$5>
  908ab0:	030347        	extui	a3, a3, 0, 8
	}

	return rix;
}

void rcRateFind_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, 
  908ab3:	063f1c        	mul16u	a15, a3, a6
  908ab6:	8912      	l32i.n	a9, a1, 8
	for (; i < numRates; i++) {
		A_UINT8 tryNum;
		A_UINT8 minRate;

		tryNum  = ((i + 1) == numRates) ? numTries - (tryPerRate * i) : tryPerRate ;
		minRate = (((i + 1) == numRates) && (rcflag & ATH_RC_MINRATE_LASTRATE)) ? 1 : 0;
  908ab8:	8815      	l32i.n	a8, a1, 20
  908aba:	c062      	movi.n	a6, 2
  908abc:	0f9f0c        	sub	a15, a9, a15
  908abf:	068601        	and	a6, a8, a6
  908ac2:	0f0f47        	extui	a15, a15, 0, 8
  908ac5:	9612      	s32i.n	a6, a1, 8
	/* Set the choosen rate. No RTS for first series entry. */
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
			nrix, FALSE, asc->tx_chainmask, asn->stbc);

	/* Fill in the other rates for multirate retry */
	for (; i < numRates; i++) {
  908ac7:	600099        	j	908b64 <rcRateFind_11n+0x230>
		A_UINT8 tryNum;
		A_UINT8 minRate;

		tryNum  = ((i + 1) == numRates) ? numTries - (tryPerRate * i) : tryPerRate ;
  908aca:	8914      	l32i.n	a9, a1, 16
  908acc:	b136      	addi.n	a6, a3, 1
  908ace:	8c11      	l32i.n	a12, a1, 4
		minRate = (((i + 1) == numRates) && (rcflag & ATH_RC_MINRATE_LASTRATE)) ? 1 : 0;
  908ad0:	c080      	movi.n	a8, 0
	/* Fill in the other rates for multirate retry */
	for (; i < numRates; i++) {
		A_UINT8 tryNum;
		A_UINT8 minRate;

		tryNum  = ((i + 1) == numRates) ? numTries - (tryPerRate * i) : tryPerRate ;
  908ad2:	79690a        	bne	a6, a9, 908ae0 <rcRateFind_11n+0x1ac>
		minRate = (((i + 1) == numRates) && (rcflag & ATH_RC_MINRATE_LASTRATE)) ? 1 : 0;
  908ad5:	8612      	l32i.n	a6, a1, 8
  908ad7:	c081      	movi.n	a8, 1
  908ad9:	c090      	movi.n	a9, 0
  908adb:	dcf0      	mov.n	a12, a15
  908add:	069838        	moveqz	a8, a9, a6
               const RATE_TABLE_11N *pRateTable , 
               A_UINT8 rix, A_UINT16 stepDown, A_UINT16 minRate)
{
	A_UINT32                j;
	A_UINT8                 nextIndex;
	struct atheros_node     *pSib = ATH_NODE_ATHEROS(an);
  908ae0:	8913      	l32i.n	a9, a1, 12
  908ae2:	269282        	l32i	a6, a9, 0x208
	TX_RATE_CTRL            *pRc = (TX_RATE_CTRL *)(pSib);
    
	if (minRate) {
  908ae5:	ca8b      	beqz.n	a8, 908b14 <rcRateFind_11n+0x1e0>
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  908ae7:	2b6041        	l8ui	a11, a6, 65
  908aea:	c3a6      	movi.n	a10, 54
  908aec:	d960      	mov.n	a9, a6
  908aee:	c081      	movi.n	a8, 1
  908af0:	600018        	j	908b0c <rcRateFind_11n+0x1d8>
  908af3:	002e90        	l32e	a0, a2, -8
		if (pRc->validRateIndex[i] == curValidTxRate) {
  908af6:	43b188        	excw
  908af9:	b199      	addi.n	a9, a9, 1
  908afb:	75e90d        	bne	a14, a5, 908b0c <rcRateFind_11n+0x1d8>
			*pNextIndex = pRc->validRateIndex[i-1];
  908afe:	ad6d      	add.n	a13, a6, a13
  908b00:	b0aa      	addi.n	a10, a10, -1
  908b02:	25d041        	l8ui	a5, a13, 65
	A_UINT8                 nextIndex;
	struct atheros_node     *pSib = ATH_NODE_ATHEROS(an);
	TX_RATE_CTRL            *pRc = (TX_RATE_CTRL *)(pSib);
    
	if (minRate) {
		for (j = RATE_TABLE_11N_SIZE; j > 0; j-- ) {
  908b05:	65afe3        	bnez	a10, 908aec <rcRateFind_11n+0x1b8>
  908b08:	600038        	j	908b44 <rcRateFind_11n+0x210>
  908b0b:	00dd80        	excw
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  908b0e:	7b82e2        	blt	a8, a11, 908af4 <rcRateFind_11n+0x1c0>
  908b11:	60002f        	j	908b44 <rcRateFind_11n+0x210>
		A_UINT8 minRate;

		tryNum  = ((i + 1) == numRates) ? numTries - (tryPerRate * i) : tryPerRate ;
		minRate = (((i + 1) == numRates) && (rcflag & ATH_RC_MINRATE_LASTRATE)) ? 1 : 0;

		nrix = rcRateGetIndex(sc, an, pRateTable, nrix, stepDnInc, minRate);
  908b14:	8816      	l32i.n	a8, a1, 24
  908b16:	080a4f        	extui	a10, a8, 0, 16
  908b19:	60001b        	j	908b38 <rcRateFind_11n+0x204>
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
		if (pRc->validRateIndex[i] == curValidTxRate) {
  908b1c:	2e9043        	l8ui	a14, a9, 67
  908b1f:	b188      	addi.n	a8, a8, 1
  908b21:	b199      	addi.n	a9, a9, 1
  908b23:	75e909        	bne	a14, a5, 908b30 <rcRateFind_11n+0x1fc>
			*pNextIndex = pRc->validRateIndex[i-1];
  908b26:	ad6d      	add.n	a13, a6, a13
  908b28:	25d041        	l8ui	a5, a13, 65
			} else {
				break;
			}
		}
	} else {
		for (j = stepDown; j > 0; j-- ) {
  908b2b:	b0aa      	addi.n	a10, a10, -1
  908b2d:	600007        	j	908b38 <rcRateFind_11n+0x204>
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  908b30:	dd80      	mov.n	a13, a8
  908b32:	7b82e6        	blt	a8, a11, 908b1c <rcRateFind_11n+0x1e8>
  908b35:	60000b        	j	908b44 <rcRateFind_11n+0x210>
			} else {
				break;
			}
		}
	} else {
		for (j = stepDown; j > 0; j-- ) {
  908b38:	c8a8      	beqz.n	a10, 908b44 <rcRateFind_11n+0x210>
rcGetNextLowerValidTxRate(const RATE_TABLE_11N *pRateTable, TX_RATE_CTRL *pRc,  
                          A_UINT8 curValidTxRate, A_UINT8 *pNextIndex)
{
	A_INT8 i;

	for (i = 1; i < pRc->maxValidRate ; i++) {
  908b3a:	2b6041        	l8ui	a11, a6, 65
  908b3d:	d960      	mov.n	a9, a6
  908b3f:	c081      	movi.n	a8, 1
  908b41:	63ffeb        	j	908b30 <rcRateFind_11n+0x1fc>
		minRate = (((i + 1) == numRates) && (rcflag & ATH_RC_MINRATE_LASTRATE)) ? 1 : 0;

		nrix = rcRateGetIndex(sc, an, pRateTable, nrix, stepDnInc, minRate);

		/* All other rates in the series have RTS enabled */
		rcRateSetseries(pRateTable, &series[i], tryNum,
  908b44:	033b09        	addx2	a11, a3, a3
  908b47:	8a10      	l32i.n	a10, a1, 0
  908b49:	04bb0a        	addx4	a11, a11, a4
  908b4c:	dd50      	mov.n	a13, a5
  908b4e:	c0e1      	movi.n	a14, 1
  908b50:	9f17      	s32i.n	a15, a1, 28
  908b52:	5bfe03        	call8	908360 <rcRateSetseries$isra$5>
  908b55:	8f17      	l32i.n	a15, a1, 28
  908b57:	8911      	l32i.n	a9, a1, 4
	/* Set the choosen rate. No RTS for first series entry. */
	rcRateSetseries(pRateTable, &series[i++], tryPerRate,
			nrix, FALSE, asc->tx_chainmask, asn->stbc);

	/* Fill in the other rates for multirate retry */
	for (; i < numRates; i++) {
  908b59:	b133      	addi.n	a3, a3, 1
  908b5b:	09ff0c        	sub	a15, a15, a9
  908b5e:	030347        	extui	a3, a3, 0, 8
  908b61:	0f0f47        	extui	a15, a15, 0, 8
  908b64:	8814      	l32i.n	a8, a1, 16
  908b66:	783a02        	bge	a3, a8, 908b6c <rcRateFind_11n+0x238>
  908b69:	63ff5d        	j	908aca <rcRateFind_11n+0x196>
	 *    {MCS2, MCS1, MCS0, MCS0}.
	 * When first rate in series is MCS3 in HT20 @ 2.4GHz, series should look like:
	 *    {MCS3, MCS2, MCS1, MCS1}
	 * So, set fourth rate in series to be same as third one for above conditions.
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
  908b6c:	2522c2        	l32i	a5, a2, 0x308
  908b6f:	695152        	bnei	a5, 1, 908bc5 <rcRateFind_11n+0x291>
		dot11Rate = pRateTable->info[rix].dot11Rate;
  908b72:	8910      	l32i.n	a9, a1, 0
  908b74:	07780a        	addx4	a8, a7, a7
  908b77:	09880b        	addx8	a8, a8, a9
  908b7a:	26801a        	l8ui	a6, a8, 26
		phy = pRateTable->info[rix].phy;
  908b7d:	28800c        	l8ui	a8, a8, 12
		if (i == 4 &&
  908b80:	693441        	bnei	a3, 4, 908bc5 <rcRateFind_11n+0x291>
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) || 
  908b83:	c030      	movi.n	a3, 0
  908b85:	298cfa        	addi	a9, a8, -6
  908b88:	da30      	mov.n	a10, a3
  908b8a:	095a38        	moveqz	a10, a5, a9
	 * So, set fourth rate in series to be same as third one for above conditions.
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
		dot11Rate = pRateTable->info[rix].dot11Rate;
		phy = pRateTable->info[rix].phy;
		if (i == 4 &&
  908b8d:	0a0947        	extui	a9, a10, 0, 8
  908b90:	73910a        	beq	a9, a3, 908b9e <rcRateFind_11n+0x26a>
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) || 
  908b93:	296cfe        	addi	a9, a6, -2
  908b96:	095338        	moveqz	a3, a5, a9
	 * So, set fourth rate in series to be same as third one for above conditions.
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
		dot11Rate = pRateTable->info[rix].dot11Rate;
		phy = pRateTable->info[rix].phy;
		if (i == 4 &&
  908b99:	030347        	extui	a3, a3, 0, 8
  908b9c:	cd35      	bnez.n	a3, 908bb5 <rcRateFind_11n+0x281>
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) || 
		     (dot11Rate == 3 && phy == WLAN_RC_PHY_HT_20_SS))) 
  908b9e:	c030      	movi.n	a3, 0
  908ba0:	288cfc        	addi	a8, a8, -4
  908ba3:	c051      	movi.n	a5, 1
  908ba5:	dc30      	mov.n	a12, a3
  908ba7:	085c38        	moveqz	a12, a5, a8
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
		dot11Rate = pRateTable->info[rix].dot11Rate;
		phy = pRateTable->info[rix].phy;
		if (i == 4 &&
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) || 
  908baa:	73c117        	beq	a12, a3, 908bc5 <rcRateFind_11n+0x291>
		     (dot11Rate == 3 && phy == WLAN_RC_PHY_HT_20_SS))) 
  908bad:	266cfd        	addi	a6, a6, -3
  908bb0:	065338        	moveqz	a3, a5, a6
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
		dot11Rate = pRateTable->info[rix].dot11Rate;
		phy = pRateTable->info[rix].phy;
		if (i == 4 &&
		    ((dot11Rate == 2 && phy == WLAN_RC_PHY_HT_40_SS) || 
  908bb3:	c83e      	beqz.n	a3, 908bc5 <rcRateFind_11n+0x291>
		     (dot11Rate == 3 && phy == WLAN_RC_PHY_HT_20_SS))) 
		{
			series[3].rix = series[2].rix;
  908bb5:	234018        	l8ui	a3, a4, 24
  908bb8:	234424        	s8i	a3, a4, 36
			series[3].flags = series[2].flags;
  908bbb:	23401b        	l8ui	a3, a4, 27
  908bbe:	234427        	s8i	a3, a4, 39
			series[3].max4msframelen = series[2].max4msframelen;
  908bc1:	8347      	l32i.n	a3, a4, 28
  908bc3:	934a      	s32i.n	a3, a4, 40
	/*
	 * 2009/02/06
	 * AP91 Kite: NetGear OTA location-4 downlink.
	 *            Enable RTS/CTS at MCS 3-0 for downlink throughput.
	 */
	if (sc->sc_curmode == IEEE80211_MODE_11NG) {
  908bc5:	2222c2        	l32i	a2, a2, 0x308
  908bc8:	692118        	bnei	a2, 1, 908be4 <rcRateFind_11n+0x2b0>
		dot11Rate = pRateTable->info[rix].dot11Rate;
  908bcb:	8210      	l32i.n	a2, a1, 0
  908bcd:	07770a        	addx4	a7, a7, a7
  908bd0:	02770b        	addx8	a7, a7, a2
		if (dot11Rate <= 3 ) {
  908bd3:	22701a        	l8ui	a2, a7, 26
  908bd6:	6f240a        	bgeui	a2, 4, 908be4 <rcRateFind_11n+0x2b0>
			series[0].flags |= ATH_RC_RTSCTS_FLAG;         
  908bd9:	234003        	l8ui	a3, a4, 3
  908bdc:	c120      	movi.n	a2, 16
  908bde:	023202        	or	a2, a3, a2
  908be1:	224403        	s8i	a2, a4, 3
  908be4:	d10f      	retw.n
	...

00908be8 <rcUpdate_11n>:
void rcUpdate_11n(struct ath_softc_tgt *sc, struct ath_node_target *an,
		  A_UINT8 curTxAnt, 
		  int finalTSIdx, int Xretries,
		  struct ath_rc_series rcs[], int nFrames, 
		  int nBad, int long_retry)
{
  908be8:	6c1008        	entry	a1, 64
  908beb:	d920      	mov.n	a9, a2
	A_UINT32 series = 0;
	A_UINT32 rix;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  908bed:	2492c2        	l32i	a4, a9, 0x308
  908bf0:	222248        	l32i	a2, a2, 0x120
void rcUpdate_11n(struct ath_softc_tgt *sc, struct ath_node_target *an,
		  A_UINT8 curTxAnt, 
		  int finalTSIdx, int Xretries,
		  struct ath_rc_series rcs[], int nFrames, 
		  int nBad, int long_retry)
{
  908bf3:	d870      	mov.n	a8, a7
	A_UINT32 series = 0;
	A_UINT32 rix;
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  908bf5:	02420a        	addx4	a2, a4, a2
  908bf8:	8421      	l32i.n	a4, a2, 4
	struct atheros_node *pSib = ATH_NODE_ATHEROS(an);
  908bfa:	223282        	l32i	a2, a3, 0x208
  908bfd:	9215      	s32i.n	a2, a1, 20

	/*
	 * If the first rate is not the final index, there are intermediate rate failures
	 * to be processed.
	 */
	if (finalTSIdx != 0) {
  908bff:	64509e        	beqz	a5, 908ca1 <rcUpdate_11n+0xb9>
				} else {
					rix = pRateTable->info[rcs[series].rix].baseIndex;
				}

				/* FIXME:XXXX, too many args! */
				rcUpdate_ht(sc, an, rix, Xretries? 1 : 2, rcs[series].tries, 
  908c02:	c0a1      	movi.n	a10, 1
  908c04:	9a14      	s32i.n	a10, a1, 16
  908c06:	8b14      	l32i.n	a11, a1, 16
  908c08:	c0a2      	movi.n	a10, 2
  908c0a:	06ab38        	moveqz	a11, a10, a6

	/*
	 * If the first rate is not the final index, there are intermediate rate failures
	 * to be processed.
	 */
	if (finalTSIdx != 0) {
  908c0d:	c020      	movi.n	a2, 0
				} else {
					rix = pRateTable->info[rcs[series].rix].baseIndex;
				}

				/* FIXME:XXXX, too many args! */
				rcUpdate_ht(sc, an, rix, Xretries? 1 : 2, rcs[series].tries, 
  908c0f:	9b14      	s32i.n	a11, a1, 16
  908c11:	600080        	j	908c95 <rcUpdate_11n+0xad>
  908c14:	002e70        	excw
	 */
	if (finalTSIdx != 0) {

		/* Process intermediate rates that failed.*/
		for (series = 0; series < finalTSIdx ; series++) {
			if (rcs[series].tries != 0) {
  908c17:	0164e0        	excw
  908c1a:	752b70        	bgeu	a2, a5, 908c8e <rcUpdate_11n+0xa6>
				flags = rcs[series].flags;
  908c1d:	03c0c2        	excw
				/* If HT40 and we have switched mode from 40 to 20 => don't update */
				if ((flags & ATH_RC_CW40_FLAG) && 
  908c20:	0cba01        	and	a10, a11, a12
  908c23:	c8a9      	beqz.n	a10, 908c30 <rcUpdate_11n+0x48>
				    (pRc->rcPhyMode != (flags & ATH_RC_CW40_FLAG))) {
  908c25:	8d15      	l32i.n	a13, a1, 20
  908c27:	2cd07c        	l8ui	a12, a13, 124
		/* Process intermediate rates that failed.*/
		for (series = 0; series < finalTSIdx ; series++) {
			if (rcs[series].tries != 0) {
				flags = rcs[series].flags;
				/* If HT40 and we have switched mode from 40 to 20 => don't update */
				if ((flags & ATH_RC_CW40_FLAG) && 
  908c2a:	7ac102        	beq	a12, a10, 908c30 <rcUpdate_11n+0x48>
  908c2d:	6000e8        	j	908d19 <rcUpdate_11n+0x131>
				    (pRc->rcPhyMode != (flags & ATH_RC_CW40_FLAG))) {
					return;
				}
				if ((flags & ATH_RC_CW40_FLAG) && (flags & ATH_RC_HT40_SGI_FLAG)) {
  908c30:	c0c6      	movi.n	a12, 6
  908c32:	0cbc01        	and	a12, a11, a12
  908c35:	69c60f        	bnei	a12, 6, 908c48 <rcUpdate_11n+0x60>
					rix = pRateTable->info[rcs[series].rix].htIndex;
  908c38:	2a7000        	l8ui	a10, a7, 0
  908c3b:	0aaa0a        	addx4	a10, a10, a10
  908c3e:	04aa0b        	addx8	a10, a10, a4
  908c41:	2ca021        	l8ui	a12, a10, 33
  908c44:	600030        	j	908c78 <rcUpdate_11n+0x90>
  908c47:	007db7        	excw
				} else if (flags & ATH_RC_HT40_SGI_FLAG) {
  908c4a:	0e2a70        	excw
					rix = pRateTable->info[rcs[series].rix].sgiIndex;
  908c4d:	000aaa        	excw
  908c50:	0a04aa        	excw
  908c53:	0b2ca0        	excw
  908c56:	206000        	l8ui	a0, a6, 0
  908c59:	1dc8ae        	l32r	a13, 8faf14 <memset+0x15d78>
				} else if (flags & ATH_RC_CW40_FLAG) {
					rix = pRateTable->info[rcs[series].rix].cw40Index;
  908c5c:	2a7000        	l8ui	a10, a7, 0
  908c5f:	0aaa0a        	addx4	a10, a10, a10
  908c62:	04aa0b        	addx8	a10, a10, a4
  908c65:	2ca01f        	l8ui	a12, a10, 31
  908c68:	60000c        	j	908c78 <rcUpdate_11n+0x90>
  908c6b:	002a70        	excw
				} else {
					rix = pRateTable->info[rcs[series].rix].baseIndex;
  908c6e:	000aaa        	excw
  908c71:	0a04aa        	excw
  908c74:	0b2ca0        	excw
  908c77:	1e2a12        	l32r	a14, 8d34c0 <_bss_end+0x3c5cb8>
				}

				/* FIXME:XXXX, too many args! */
				rcUpdate_ht(sc, an, rix, Xretries? 1 : 2, rcs[series].tries, 
  908c7a:	108d14        	l32r	a0, 8ec0cc <memset+0x6f30>
  908c7d:	0a0f4f        	extui	a15, a10, 0, 16
  908c80:	9f10      	s32i.n	a15, a1, 0
  908c82:	da90      	mov.n	a10, a9
  908c84:	db30      	mov.n	a11, a3
  908c86:	9817      	s32i.n	a8, a1, 28
  908c88:	9916      	s32i.n	a9, a1, 24
  908c8a:	5bfdd7        	call8	9083e8 <rcUpdate_ht$isra$7>
  908c8d:	8916      	l32i.n	a9, a1, 24
  908c8f:	8817      	l32i.n	a8, a1, 28
	 * to be processed.
	 */
	if (finalTSIdx != 0) {

		/* Process intermediate rates that failed.*/
		for (series = 0; series < finalTSIdx ; series++) {
  908c91:	b122      	addi.n	a2, a2, 1
  908c93:	bc77      	addi.n	a7, a7, 12
  908c95:	752b02        	bgeu	a2, a5, 908c9b <rcUpdate_11n+0xb3>
  908c98:	63ff79        	j	908c15 <rcUpdate_11n+0x2d>
  908c9b:	600011        	j	908cb0 <rcUpdate_11n+0xc8>
  908c9e:	000000        	ill
		/*
		 * Handle the special case of MIMO PS burst, where the second aggregate is sent
		 *  out with only one rate and one try. Treating it as an excessive retry penalizes
		 * the rate inordinately.
		 */
		if (rcs[0].tries == 1 && Xretries == 1) {
  908ca1:	277001        	l8ui	a7, a7, 1
		  A_UINT8 curTxAnt, 
		  int finalTSIdx, int Xretries,
		  struct ath_rc_series rcs[], int nFrames, 
		  int nBad, int long_retry)
{
	A_UINT32 series = 0;
  908ca4:	d250      	mov.n	a2, a5
		/*
		 * Handle the special case of MIMO PS burst, where the second aggregate is sent
		 *  out with only one rate and one try. Treating it as an excessive retry penalizes
		 * the rate inordinately.
		 */
		if (rcs[0].tries == 1 && Xretries == 1) {
  908ca6:	697106        	bnei	a7, 1, 908cb0 <rcUpdate_11n+0xc8>
			Xretries = 2;
  908ca9:	b067      	addi.n	a7, a6, -1
  908cab:	c052      	movi.n	a5, 2
  908cad:	075638        	moveqz	a6, a5, a7
		}
	}

	flags = rcs[series].flags;
  908cb0:	022209        	addx2	a2, a2, a2
  908cb3:	08280a        	addx4	a8, a2, a8
  908cb6:	278003        	l8ui	a7, a8, 3
	/* If HT40 and we have switched mode from 40 to 20 => don't update */
	if ((flags & ATH_RC_CW40_FLAG) && 
  908cb9:	c052      	movi.n	a5, 2
  908cbb:	057501        	and	a5, a7, a5
  908cbe:	c856      	beqz.n	a5, 908cc8 <rcUpdate_11n+0xe0>
	    (pRc->rcPhyMode != (flags & ATH_RC_CW40_FLAG))) {
  908cc0:	8b15      	l32i.n	a11, a1, 20
  908cc2:	22b07c        	l8ui	a2, a11, 124
		}
	}

	flags = rcs[series].flags;
	/* If HT40 and we have switched mode from 40 to 20 => don't update */
	if ((flags & ATH_RC_CW40_FLAG) && 
  908cc5:	752950        	bne	a2, a5, 908d19 <rcUpdate_11n+0x131>
	    (pRc->rcPhyMode != (flags & ATH_RC_CW40_FLAG))) {
		return;
	}
	if ((flags & ATH_RC_CW40_FLAG) && (flags & ATH_RC_HT40_SGI_FLAG)) {
  908cc8:	c026      	movi.n	a2, 6
  908cca:	027201        	and	a2, a7, a2
  908ccd:	69260f        	bnei	a2, 6, 908ce0 <rcUpdate_11n+0xf8>
		rix = pRateTable->info[rcs[series].rix].htIndex;
  908cd0:	228000        	l8ui	a2, a8, 0
  908cd3:	02220a        	addx4	a2, a2, a2
  908cd6:	04240b        	addx8	a4, a2, a4
  908cd9:	2c4021        	l8ui	a12, a4, 33
  908cdc:	60001f        	j	908cff <rcUpdate_11n+0x117>
  908cdf:	002280        	excw
  908ce2:	000222        	excw
	} else if (flags & ATH_RC_HT40_SGI_FLAG) {
		rix = pRateTable->info[rcs[series].rix].sgiIndex;
  908ce5:	0a0424        	excw
  908ce8:	0b7d77        	excw
	    (pRc->rcPhyMode != (flags & ATH_RC_CW40_FLAG))) {
		return;
	}
	if ((flags & ATH_RC_CW40_FLAG) && (flags & ATH_RC_HT40_SGI_FLAG)) {
		rix = pRateTable->info[rcs[series].rix].htIndex;
	} else if (flags & ATH_RC_HT40_SGI_FLAG) {
  908ceb:	052c40        	extui	a12, a5, 2, 1
		rix = pRateTable->info[rcs[series].rix].sgiIndex;
  908cee:	206000        	l8ui	a0, a6, 0
  908cf1:	0cc856        	extui	a8, a12, 28, 7
	} else if (flags & ATH_RC_CW40_FLAG) {
		rix = pRateTable->info[rcs[series].rix].cw40Index;
  908cf4:	2c401f        	l8ui	a12, a4, 31
  908cf7:	600004        	j	908cff <rcUpdate_11n+0x117>
  908cfa:	00002c        	excw
	} else {
		rix = pRateTable->info[rcs[series].rix].baseIndex;
  908cfd:	401e22        	excw
	}

	/* FIXME:XXXX, too many args! */
	rcUpdate_ht(sc, an, rix, Xretries, long_retry, curTxAnt, 
  908d00:	12112e        	l32r	a2, 8cd1b8 <_bss_end+0x3bf9b0>
  908d03:	121202        	l32r	a2, 8cd50c <_bss_end+0x3bfd04>
  908d06:	024f92        	excw
  908d09:	102212        	l32r	a0, 8d1554 <_bss_end+0x3c3d4c>
  908d0c:	10da90        	l32r	a0, 8ff74c <memset+0x1a5b0>
  908d0f:	db30      	mov.n	a11, a3
  908d11:	dd60      	mov.n	a13, a6
  908d13:	020f4f        	extui	a15, a2, 0, 16
  908d16:	5bfdb4        	call8	9083e8 <rcUpdate_ht$isra$7>
  908d19:	d10f      	retw.n
	...

00908d1c <ath_tx_status_update_rate>:

void ath_tx_status_update_rate(struct ath_softc_tgt *sc,
			       struct ath_rc_series rcs[],
			       int series,
			       WMI_TXSTATUS_EVENT *txs)
{
  908d1c:	6c1004        	entry	a1, 32
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  908d1f:	282248        	l32i	a8, a2, 0x120

	/* HT Rate */
	if (pRateTable->info[rcs[series].rix].rateCode & 0x80) {
  908d22:	044409        	addx2	a4, a4, a4
			       struct ath_rc_series rcs[],
			       int series,
			       WMI_TXSTATUS_EVENT *txs)
{
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  908d25:	2222c2        	l32i	a2, a2, 0x308

	/* HT Rate */
	if (pRateTable->info[rcs[series].rix].rateCode & 0x80) {
  908d28:	03430a        	addx4	a3, a4, a3
			       struct ath_rc_series rcs[],
			       int series,
			       WMI_TXSTATUS_EVENT *txs)
{
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  908d2b:	08220a        	addx4	a2, a2, a8

	/* HT Rate */
	if (pRateTable->info[rcs[series].rix].rateCode & 0x80) {
  908d2e:	293000        	l8ui	a9, a3, 0
			       struct ath_rc_series rcs[],
			       int series,
			       WMI_TXSTATUS_EVENT *txs)
{
	struct atheros_softc *asc = (struct atheros_softc*)sc->sc_rc;
	RATE_TABLE_11N *pRateTable = (RATE_TABLE_11N *)asc->hwRateTable[sc->sc_curmode];
  908d31:	8221      	l32i.n	a2, a2, 4

	/* HT Rate */
	if (pRateTable->info[rcs[series].rix].rateCode & 0x80) {
  908d33:	09940a        	addx4	a4, a9, a9
  908d36:	02420b        	addx8	a2, a4, a2
  908d39:	242018        	l8ui	a4, a2, 24
  908d3c:	285000        	l8ui	a8, a5, 0
  908d3f:	004432        	sext	a4, a4, 7
  908d42:	222c10        	addi	a2, a2, 16
  908d45:	674047        	bgez	a4, 908d90 <ath_tx_status_update_rate+0x74>
		txs->txstatus[txs->cnt].ts_rate |= SM(pRateTable->info[rcs[series].rix].dot11Rate,
  908d48:	088909        	addx2	a9, a8, a8
  908d4b:	a959      	add.n	a9, a5, a9
  908d4d:	22200a        	l8ui	a2, a2, 10
  908d50:	249002        	l8ui	a4, a9, 2
  908d53:	020243        	extui	a2, a2, 0, 4
  908d56:	042202        	or	a2, a2, a4
  908d59:	229402        	s8i	a2, a9, 2
								       ATH9K_HTC_TXSTAT_RATE);
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_MCS;
  908d5c:	229003        	l8ui	a2, a9, 3
  908d5f:	c048      	movi.n	a4, 8
  908d61:	042402        	or	a4, a2, a4
  908d64:	249403        	s8i	a4, a9, 3

		if (rcs[series].flags & ATH_RC_CW40_FLAG)
  908d67:	243003        	l8ui	a4, a3, 3
  908d6a:	7e4707        	bbci	a4, 30, 908d75 <ath_tx_status_update_rate+0x59>
			txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_CW40;
  908d6d:	c148      	movi.n	a4, 24
  908d6f:	042202        	or	a2, a2, a4
  908d72:	229403        	s8i	a2, a9, 3

		if (rcs[series].flags & ATH_RC_HT40_SGI_FLAG)
  908d75:	223003        	l8ui	a2, a3, 3
  908d78:	7d2725        	bbci	a2, 29, 908da1 <ath_tx_status_update_rate+0x85>
			txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_SGI;
  908d7b:	088809        	addx2	a8, a8, a8
  908d7e:	a858      	add.n	a8, a5, a8
  908d80:	248003        	l8ui	a4, a8, 3
  908d83:	c220      	movi.n	a2, 32
  908d85:	024202        	or	a2, a4, a2
  908d88:	228403        	s8i	a2, a8, 3
  908d8b:	600012        	j	908da1 <ath_tx_status_update_rate+0x85>
  908d8e:	000008        	add	a0, a0, a0

	} else {
		txs->txstatus[txs->cnt].ts_rate |= SM(rcs[series].rix, ATH9K_HTC_TXSTAT_RATE);
  908d91:	8809      	l32i.n	a8, a0, 36
  908d93:	a858      	add.n	a8, a5, a8
  908d95:	228002        	l8ui	a2, a8, 2
  908d98:	090943        	extui	a9, a9, 0, 4
  908d9b:	029902        	or	a9, a9, a2
  908d9e:	298402        	s8i	a9, a8, 2
	}

	if (rcs[series].flags & ATH_RC_RTSCTS_FLAG)
  908da1:	223003        	l8ui	a2, a3, 3
  908da4:	7b2712        	bbci	a2, 27, 908dba <ath_tx_status_update_rate+0x9e>
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_RTC_CTS;
  908da7:	225000        	l8ui	a2, a5, 0
  908daa:	022209        	addx2	a2, a2, a2
  908dad:	a255      	add.n	a5, a5, a2
  908daf:	235003        	l8ui	a3, a5, 3
  908db2:	c024      	movi.n	a2, 4
  908db4:	023202        	or	a2, a3, a2
  908db7:	225403        	s8i	a2, a5, 3
  908dba:	d10f      	retw.n

00908dbc <ath_rate_attach>:

}

struct ath_ratectrl *
ath_rate_attach(struct ath_softc_tgt *sc)
{
  908dbc:	6c1004        	entry	a1, 32
#include "Magpie_api.h"

static inline void *	__adf_os_mem_alloc(adf_os_size_t size)
{
//    return (malloc(size,M_DEVBUF,M_DONTWAIT | M_ZERO));
    return A_ALLOCRAM(size);
  908dbf:	137182        	l32r	a3, 8e53c8 <memset+0x22c>
  908dc2:	c0a0      	movi.n	a10, 0
  908dc4:	223252        	l32i	a2, a3, 0x148
  908dc7:	c1b8      	movi.n	a11, 24
  908dc9:	0b2000        	callx8	a2
  908dcc:	d2a0      	mov.n	a2, a10
	struct atheros_softc *asc;

	asc = adf_os_mem_alloc(sizeof(struct atheros_softc));
	if (asc == NULL)
  908dce:	c9a6      	beqz.n	a10, 908de8 <ath_rate_attach+0x2c>

/* set a memory buffer */
static inline void
__adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
	A_MEMSET(buf, b, size);
  908dd0:	8334      	l32i.n	a3, a3, 16
  908dd2:	c0b0      	movi.n	a11, 0
  908dd4:	c1c8      	movi.n	a12, 24
  908dd6:	0b3000        	callx8	a3
		return NULL;

	adf_os_mem_set(asc, 0, sizeof(struct atheros_softc));
	asc->arc.arc_space = sizeof(struct atheros_node);
  908dd9:	230a88        	movi	a3, 136
  908ddc:	9320      	s32i.n	a3, a2, 0

	ar5416AttachRateTables(asc);
  908dde:	da20      	mov.n	a10, a2

	asc->tx_chainmask = 1;
  908de0:	230a01        	movi	a3, 1
		return NULL;

	adf_os_mem_set(asc, 0, sizeof(struct atheros_softc));
	asc->arc.arc_space = sizeof(struct atheros_node);

	ar5416AttachRateTables(asc);
  908de3:	5807ec        	call8	90ad94 <ar5416AttachRateTables>

	asc->tx_chainmask = 1;
  908de6:	9323      	s32i.n	a3, a2, 12
    
	return &asc->arc;
}
  908de8:	d10f      	retw.n
	...

00908dec <ath_rate_findrate>:
                  int numRates,
                  int stepDnInc,
                  unsigned int rcflag,
                  struct ath_rc_series series[],
                  int *isProbe)
{
  908dec:	6c1006        	entry	a1, 48
  908def:	881f      	l32i.n	a8, a1, 60
	*isProbe = 0;
  908df1:	c0e0      	movi.n	a14, 0

	if (!numRates || !numTries) {
  908df3:	c091      	movi.n	a9, 1
                  int stepDnInc,
                  unsigned int rcflag,
                  struct ath_rc_series series[],
                  int *isProbe)
{
	*isProbe = 0;
  908df5:	9e80      	s32i.n	a14, a8, 0

	if (!numRates || !numTries) {
  908df7:	079e38        	moveqz	a14, a9, a7
                  int numRates,
                  int stepDnInc,
                  unsigned int rcflag,
                  struct ath_rc_series series[],
                  int *isProbe)
{
  908dfa:	dd70      	mov.n	a13, a7
  908dfc:	da20      	mov.n	a10, a2
  908dfe:	db30      	mov.n	a11, a3
  908e00:	dc60      	mov.n	a12, a6
	*isProbe = 0;

	if (!numRates || !numTries) {
  908e02:	cde0      	bnez.n	a14, 908e16 <ath_rate_findrate+0x2a>
  908e04:	06e939        	movnez	a9, a14, a6
  908e07:	cc9b      	bnez.n	a9, 908e16 <ath_rate_findrate+0x2a>
	*isProbe = 0;
	if (!numRates || !numTries) {
		return;
	}

	rcRateFind_11n(sc, an, numTries, numRates, stepDnInc, rcflag, series, isProbe);
  908e09:	891e      	l32i.n	a9, a1, 56
  908e0b:	8e1c      	l32i.n	a14, a1, 48
  908e0d:	8f1d      	l32i.n	a15, a1, 52
  908e0f:	9910      	s32i.n	a9, a1, 0
  908e11:	9811      	s32i.n	a8, a1, 4
  908e13:	5bfec8        	call8	908934 <rcRateFind_11n>
  908e16:	d10f      	retw.n

00908e18 <ath_rate_tx_complete>:
ath_rate_tx_complete(struct ath_softc_tgt *sc,
		     struct ath_node_target *an,
		     struct ath_tx_desc *ds,
		     struct ath_rc_series rcs[], 
		     int nframes, int nbad)
{
  908e18:	6c1006        	entry	a1, 48
			 int nframes, int nbad)
{
	int finalTSIdx = ds->ds_txstat.ts_rate;
	int tx_status = 0;

	if ((ds->ds_txstat.ts_status & HAL_TXERR_XRETRY) ||
  908e1b:	294066        	l8ui	a9, a4, 102
  908e1e:	c085      	movi.n	a8, 5
  908e20:	089801        	and	a8, a9, a8
ath_rate_tx_complete(struct ath_softc_tgt *sc,
		     struct ath_node_target *an,
		     struct ath_tx_desc *ds,
		     struct ath_rc_series rcs[], 
		     int nframes, int nbad)
{
  908e23:	da20      	mov.n	a10, a2
  908e25:	db30      	mov.n	a11, a3
  908e27:	df50      	mov.n	a15, a5
			 struct ath_node_target *an,
			 struct ath_tx_desc *ds,
			 struct ath_rc_series rcs[], 
			 int nframes, int nbad)
{
	int finalTSIdx = ds->ds_txstat.ts_rate;
  908e29:	2d4068        	l8ui	a13, a4, 104

	if ((ds->ds_txstat.ts_status & HAL_TXERR_XRETRY) ||
	    (ds->ds_txstat.ts_status & HAL_TXERR_FIFO) || 
	    (ds->ds_txstat.ts_flags & HAL_TX_DATA_UNDERRUN) ||
	    (ds->ds_txstat.ts_flags & HAL_TX_DELIM_UNDERRUN)) {
		tx_status = 1;
  908e2c:	c0e1      	movi.n	a14, 1
			 int nframes, int nbad)
{
	int finalTSIdx = ds->ds_txstat.ts_rate;
	int tx_status = 0;

	if ((ds->ds_txstat.ts_status & HAL_TXERR_XRETRY) ||
  908e2e:	cc8a      	bnez.n	a8, 908e3c <ath_rate_tx_complete+0x24>
	    (ds->ds_txstat.ts_status & HAL_TXERR_FIFO) || 
	    (ds->ds_txstat.ts_flags & HAL_TX_DATA_UNDERRUN) ||
  908e30:	2c4067        	l8ui	a12, a4, 103
  908e33:	290a18        	movi	a9, 24
  908e36:	09c901        	and	a9, a12, a9
  908e39:	098e38        	moveqz	a14, a8, a9
	    (ds->ds_txstat.ts_flags & HAL_TX_DELIM_UNDERRUN)) {
		tx_status = 1;
	}

	rcUpdate_11n(sc, an,
  908e3c:	2c4073        	l8ui	a12, a4, 115
  908e3f:	9610      	s32i.n	a6, a1, 0
  908e41:	9711      	s32i.n	a7, a1, 4
  908e43:	244071        	l8ui	a4, a4, 113
  908e46:	241602        	s32i	a4, a1, 8
  908e49:	5bff67        	call8	908be8 <rcUpdate_11n>
  908e4c:	d10f      	retw.n
	...

00908e50 <ath_rate_newassoc>:
}

void
ath_rate_newassoc(struct ath_softc_tgt *sc, struct ath_node_target *an, int isnew, 
		  unsigned int capflag, struct ieee80211_rate *rs)
{
  908e50:	6c1004        	entry	a1, 32
  908e53:	da20      	mov.n	a10, a2
  908e55:	db30      	mov.n	a11, a3
  908e57:	dc50      	mov.n	a12, a5
  908e59:	dd60      	mov.n	a13, a6

static void
ath_rate_newassoc_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, int isnew, 
		      unsigned int capflag, struct ieee80211_rate *rs)
{
	if (isnew) {
  908e5b:	c841      	beqz.n	a4, 908e60 <ath_rate_newassoc+0x10>
#ifdef MAGPIE_MERLIN
		struct atheros_node *oan = ATH_NODE_ATHEROS(an);
		/* Only MERLIN can send STBC */
		oan->stbc = (capflag & ATH_RC_TX_STBC_FLAG) ? 1 : 0;
#endif
		rcSibUpdate_ht(sc, an, capflag, 0, rs);
  908e5d:	5bfde0        	call8	9085e0 <rcSibUpdate_ht$constprop$9>
  908e60:	d10f      	retw.n
	...

00908e64 <ath_rate_node_update>:
void ath_rate_node_update(struct ath_softc_tgt *sc,
			  struct ath_node_target *an,
			  a_int32_t isnew,
			  a_uint32_t capflag,
			  struct ieee80211_rate *rs)
{
  908e64:	6c1004        	entry	a1, 32
  908e67:	da20      	mov.n	a10, a2
  908e69:	db30      	mov.n	a11, a3
  908e6b:	dc50      	mov.n	a12, a5
  908e6d:	dd60      	mov.n	a13, a6

static void
ath_rate_newassoc_11n(struct ath_softc_tgt *sc, struct ath_node_target *an, int isnew, 
		      unsigned int capflag, struct ieee80211_rate *rs)
{
	if (isnew) {
  908e6f:	c841      	beqz.n	a4, 908e74 <ath_rate_node_update+0x10>
#ifdef MAGPIE_MERLIN
		struct atheros_node *oan = ATH_NODE_ATHEROS(an);
		/* Only MERLIN can send STBC */
		oan->stbc = (capflag & ATH_RC_TX_STBC_FLAG) ? 1 : 0;
#endif
		rcSibUpdate_ht(sc, an, capflag, 0, rs);
  908e71:	5bfddb        	call8	9085e0 <rcSibUpdate_ht$constprop$9>
  908e74:	d10f      	retw.n
	...

00908e78 <ath_rate_newstate>:
ath_rate_newstate(struct ath_softc_tgt *sc,
		  struct ieee80211vap_target *vap,
		  enum ieee80211_state state,
		  a_uint32_t capflag,
		  struct ieee80211_rate *rs)
{
  908e78:	6c1004        	entry	a1, 32
	struct ieee80211_node_target *ni = vap->iv_bss;
	struct atheros_softc *asc = (struct atheros_softc *) sc->sc_rc;

	asc->tx_chainmask = sc->sc_ic.ic_tx_chainmask;
  908e7b:	292d16        	addmi	a9, a2, 0x1600
  908e7e:	282248        	l32i	a8, a2, 0x120
  908e81:	299026        	l8ui	a9, a9, 38
		  struct ieee80211vap_target *vap,
		  enum ieee80211_state state,
		  a_uint32_t capflag,
		  struct ieee80211_rate *rs)
{
	struct ieee80211_node_target *ni = vap->iv_bss;
  908e84:	8b34      	l32i.n	a11, a3, 16
ath_rate_newstate(struct ath_softc_tgt *sc,
		  struct ieee80211vap_target *vap,
		  enum ieee80211_state state,
		  a_uint32_t capflag,
		  struct ieee80211_rate *rs)
{
  908e86:	da20      	mov.n	a10, a2
	struct ieee80211_node_target *ni = vap->iv_bss;
	struct atheros_softc *asc = (struct atheros_softc *) sc->sc_rc;

	asc->tx_chainmask = sc->sc_ic.ic_tx_chainmask;
  908e88:	9983      	s32i.n	a9, a8, 12
#ifdef MAGPIE_MERLIN
		struct atheros_node *oan = ATH_NODE_ATHEROS(an);
		/* Only MERLIN can send STBC */
		oan->stbc = (capflag & ATH_RC_TX_STBC_FLAG) ? 1 : 0;
#endif
		rcSibUpdate_ht(sc, an, capflag, 0, rs);
  908e8a:	dc50      	mov.n	a12, a5
  908e8c:	dd60      	mov.n	a13, a6
  908e8e:	5bfdd4        	call8	9085e0 <rcSibUpdate_ht$constprop$9>
  908e91:	d10f      	retw.n
	...

00908e94 <__adf_os_mem_copy>:
    //free(buf,M_DEVBUF);
}

/* move a memory buffer */
static inline void 		__adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
  908e94:	6c1004        	entry	a1, 32
    A_MEMCPY(dst,src,size);    
  908e97:	187182        	l32r	a8, 8e54a0 <memset+0x304>
  908e9a:	da20      	mov.n	a10, a2
  908e9c:	8885      	l32i.n	a8, a8, 20
  908e9e:	db30      	mov.n	a11, a3
  908ea0:	dc40      	mov.n	a12, a4
  908ea2:	0b8000        	callx8	a8
  908ea5:	d10f      	retw.n
	...

00908ea8 <ieee80211_anyhdrsize>:
/*
 * Like ieee80211_hdrsize, but handles any type of frame.
 */
static __inline a_int32_t
ieee80211_anyhdrsize(const void *data)
{
  908ea8:	6c1004        	entry	a1, 32
	const struct ieee80211_frame *wh = data;

	if ((wh->i_fc[0]&IEEE80211_FC0_TYPE_MASK) == IEEE80211_FC0_TYPE_CTL) {
  908eab:	282000        	l8ui	a8, a2, 0
  908eae:	c09c      	movi.n	a9, 12
  908eb0:	098901        	and	a9, a8, a9
  908eb3:	69941d        	bnei	a9, 4, 908ed4 <ieee80211_anyhdrsize+0x2c>
		switch (wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK) {
  908eb6:	c720      	movi.n	a2, -16
  908eb8:	028801        	and	a8, a8, a2
  908ebb:	288c40        	addi	a8, a8, 64
  908ebe:	080847        	extui	a8, a8, 0, 8
  908ec1:	c120      	movi.n	a2, 16
  908ec3:	78232e        	bltu	a2, a8, 908ef5 <ieee80211_anyhdrsize+0x4d>
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
	}

	ah->ah_set11nRateScenario(bf->bf_desc, 0, 0, series, 4, 4);
	ath_tgt_txq_add_ucast(sc, bf);
}
  908ec6:	1272bd        	l32r	a2, 8e59bc <memset+0x820>
  908ec9:	a828      	add.n	a8, a2, a8
  908ecb:	228000        	l8ui	a2, a8, 0
  908ece:	002232        	sext	a2, a2, 7
  908ed1:	d10f      	retw.n
  908ed3:	002a20        	excw
	const struct ieee80211_frame *wh = data;
	a_int32_t size = sizeof(struct ieee80211_frame);

	/* NB: we don't handle control frames */
	adf_os_assert((wh->i_fc[0]&IEEE80211_FC0_TYPE_MASK) != IEEE80211_FC0_TYPE_CTL);
	if ((wh->i_fc[1] & IEEE80211_FC1_DIR_MASK) == IEEE80211_FC1_DIR_DSTODS)
  908ed6:	01c19e        	excw
  908ed9:	0a0a41        	extui	a10, a10, 0, 2
 */
static __inline a_int32_t
ieee80211_hdrsize(const void *data)
{
	const struct ieee80211_frame *wh = data;
	a_int32_t size = sizeof(struct ieee80211_frame);
  908edc:	2aacfd        	addi	a10, a10, -3
  908edf:	c128      	movi.n	a2, 24
  908ee1:	0a9238        	moveqz	a2, a9, a10

	/* NB: we don't handle control frames */
	adf_os_assert((wh->i_fc[0]&IEEE80211_FC0_TYPE_MASK) != IEEE80211_FC0_TYPE_CTL);
	if ((wh->i_fc[1] & IEEE80211_FC1_DIR_MASK) == IEEE80211_FC1_DIR_DSTODS)
		size += IEEE80211_ADDR_LEN;
	if (IEEE80211_QOS_HAS_SEQ(wh))
  908ee4:	29fa8c        	movi	a9, -116
  908ee7:	098801        	and	a8, a8, a9
		size += sizeof(a_uint16_t);
  908eea:	2a0a88        	movi	a10, 136
  908eed:	b229      	addi.n	a9, a2, 2
  908eef:	0a880c        	sub	a8, a8, a10
  908ef2:	089238        	moveqz	a2, a9, a8
			return sizeof(struct ieee80211_frame_ack);
		}
		return sizeof(struct ieee80211_frame_min);
	} else
		return ieee80211_hdrsize(data);
}
  908ef5:	d10f      	retw.n
	...

00908ef8 <owl_tgt_tid_init>:
	ath_rate_findrate(sc, an, 1, frameLen, 10, 4, 1,
			  ATH_RC_PROBE_ALLOWED, series, isProbe);
}

static void owl_tgt_tid_init(struct ath_atx_tid *tid)
{
  908ef8:	6c1004        	entry	a1, 32
	int i;

	tid->seq_start  = tid->seq_next = 0;
  908efb:	c090      	movi.n	a9, 0
	tid->baw_size   = WME_MAX_BA;
  908efd:	c480      	movi.n	a8, 64

static void owl_tgt_tid_init(struct ath_atx_tid *tid)
{
	int i;

	tid->seq_start  = tid->seq_next = 0;
  908eff:	292503        	s16i	a9, a2, 6
  908f02:	292502        	s16i	a9, a2, 4
	tid->baw_size   = WME_MAX_BA;
  908f05:	282504        	s16i	a8, a2, 8
	tid->baw_head   = tid->baw_tail = 0;
	tid->paused     = 0;
  908f08:	292434        	s8i	a9, a2, 52
{
	int i;

	tid->seq_start  = tid->seq_next = 0;
	tid->baw_size   = WME_MAX_BA;
	tid->baw_head   = tid->baw_tail = 0;
  908f0b:	c080      	movi.n	a8, 0
	tid->paused     = 0;
	tid->flag       = 0;
  908f0d:	292436        	s8i	a9, a2, 54
	tid->sched      = AH_FALSE;
  908f10:	292435        	s8i	a9, a2, 53

	asf_tailq_init(&tid->buf_q);
  908f13:	292c2c        	addi	a9, a2, 44
{
	int i;

	tid->seq_start  = tid->seq_next = 0;
	tid->baw_size   = WME_MAX_BA;
	tid->baw_head   = tid->baw_tail = 0;
  908f16:	9824      	s32i.n	a8, a2, 16
  908f18:	9823      	s32i.n	a8, a2, 12
	tid->paused     = 0;
	tid->flag       = 0;
	tid->sched      = AH_FALSE;

	asf_tailq_init(&tid->buf_q);
  908f1a:	982b      	s32i.n	a8, a2, 44
  908f1c:	992c      	s32i.n	a9, a2, 48

	for (i = 0; i < ATH_TID_MAX_BUFS; i++) {
		TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, i);
  908f1e:	2d0a01        	movi	a13, 1
  908f21:	2cfaff        	movi	a12, -1
  908f24:	085912        	srai	a9, a8, 5
  908f27:	b499      	addi.n	a9, a9, 4
  908f29:	02990a        	addx4	a9, a9, a2
  908f2c:	008104        	ssl	a8
  908f2f:	00da1a        	sll	a10, a13
  908f32:	8b91      	l32i.n	a11, a9, 4
  908f34:	0aca03        	xor	a10, a12, a10
  908f37:	0baa01        	and	a10, a10, a11
  908f3a:	9a91      	s32i.n	a10, a9, 4
	tid->flag       = 0;
	tid->sched      = AH_FALSE;

	asf_tailq_init(&tid->buf_q);

	for (i = 0; i < ATH_TID_MAX_BUFS; i++) {
  908f3c:	b188      	addi.n	a8, a8, 1
  908f3e:	698ee2        	bnei	a8, 128, 908f24 <owl_tgt_tid_init+0x2c>
		TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, i);
	}
}
  908f41:	d10f      	retw.n
	...

00908f44 <ath_tgt_txq_add_ucast>:

	return 0;
}

static void ath_tgt_txq_add_ucast(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  908f44:	6c1006        	entry	a1, 48
	struct ath_hal *ah = sc->sc_ah;
  908f47:	222d05        	addmi	a2, a2, 0x500
  908f4a:	842b      	l32i.n	a4, a2, 44
	struct ath_txq *txq;
	HAL_STATUS status;
	volatile a_int32_t txe_val;

	adf_os_assert(bf);
  908f4c:	cc31      	bnez.n	a3, 908f51 <ath_tgt_txq_add_ucast+0xd>
  908f4e:	63fffc        	j	908f4e <ath_tgt_txq_add_ucast+0xa>

	txq = bf->bf_txq;

	status = ah->ah_procTxDesc(ah, bf->bf_lastds);
  908f51:	28421a        	l32i	a8, a4, 104
  908f54:	8b3e      	l32i.n	a11, a3, 56
  908f56:	da40      	mov.n	a10, a4
	HAL_STATUS status;
	volatile a_int32_t txe_val;

	adf_os_assert(bf);

	txq = bf->bf_txq;
  908f58:	223220        	l32i	a2, a3, 128

	status = ah->ah_procTxDesc(ah, bf->bf_lastds);
  908f5b:	0b8000        	callx8	a8

	ATH_TXQ_INSERT_TAIL(txq, bf, bf_list);
  908f5e:	c080      	movi.n	a8, 0
  908f60:	9839      	s32i.n	a8, a3, 36
  908f62:	8823      	l32i.n	a8, a2, 12
  908f64:	983a      	s32i.n	a8, a3, 40
  908f66:	9380      	s32i.n	a3, a8, 0
  908f68:	283c24        	addi	a8, a3, 36
  908f6b:	9823      	s32i.n	a8, a2, 12
  908f6d:	8824      	l32i.n	a8, a2, 16
  908f6f:	9325      	s32i.n	a3, a2, 20
  908f71:	b188      	addi.n	a8, a8, 1
  908f73:	9824      	s32i.n	a8, a2, 16

	if (txq->axq_link == NULL) {
  908f75:	8821      	l32i.n	a8, a2, 4
  908f77:	cc89      	bnez.n	a8, 908f84 <ath_tgt_txq_add_ucast+0x40>
		ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
  908f79:	884a      	l32i.n	a8, a4, 40
  908f7b:	da40      	mov.n	a10, a4
  908f7d:	8b20      	l32i.n	a11, a2, 0
  908f7f:	8c3c      	l32i.n	a12, a3, 48
  908f81:	600024        	j	908fa9 <ath_tgt_txq_add_ucast+0x65>
	} else {
		*txq->axq_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
  908f84:	8c3c      	l32i.n	a12, a3, 48
  908f86:	9c80      	s32i.n	a12, a8, 0
  908f88:	187240        	l32r	a8, 8e5888 <memset+0x6ec>

		txe_val = ioread32_mac(0x0840);
		if (!(txe_val & (1<< txq->axq_qnum)))
  908f8b:	8b20      	l32i.n	a11, a2, 0
  908f8d:	0c0200        	memw
  908f90:	8880      	l32i.n	a8, a8, 0
	if (txq->axq_link == NULL) {
		ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
	} else {
		*txq->axq_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);

		txe_val = ioread32_mac(0x0840);
  908f92:	0c0200        	memw
  908f95:	9810      	s32i.n	a8, a1, 0
		if (!(txe_val & (1<< txq->axq_qnum)))
  908f97:	0c0200        	memw
  908f9a:	8810      	l32i.n	a8, a1, 0
  908f9c:	00b004        	ssr	a11
  908f9f:	08081b        	sra	a8, a8
  908fa2:	7f8f06        	bbsi	a8, 31, 908fac <ath_tgt_txq_add_ucast+0x68>
			ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
  908fa5:	884a      	l32i.n	a8, a4, 40
  908fa7:	da40      	mov.n	a10, a4
  908fa9:	0b8000        	callx8	a8
	}

	txq->axq_link = &bf->bf_lastds->ds_link;
  908fac:	833e      	l32i.n	a3, a3, 56
	ah->ah_startTxDma(ah, txq->axq_qnum);
  908fae:	8b20      	l32i.n	a11, a2, 0
		txe_val = ioread32_mac(0x0840);
		if (!(txe_val & (1<< txq->axq_qnum)))
			ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
	}

	txq->axq_link = &bf->bf_lastds->ds_link;
  908fb0:	9321      	s32i.n	a3, a2, 4
	ah->ah_startTxDma(ah, txq->axq_qnum);
  908fb2:	834c      	l32i.n	a3, a4, 48
  908fb4:	da40      	mov.n	a10, a4
  908fb6:	0b3000        	callx8	a3
  908fb9:	d10f      	retw.n
	...

00908fbc <ath_update_stats>:
			     bf->bf_lastds, bf->bf_rcs, 1, 0);
}

static void
ath_update_stats(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  908fbc:	6c1004        	entry	a1, 32
	struct ath_tx_desc *ds = bf->bf_desc;
  908fbf:	883c      	l32i.n	a8, a3, 48
	u_int32_t sr, lr;

	if (ds->ds_txstat.ts_status == 0) {
  908fc1:	298066        	l8ui	a9, a8, 102
  908fc4:	cd95      	bnez.n	a9, 908fdd <ath_update_stats+0x21>
		if (ds->ds_txstat.ts_rate & HAL_TXSTAT_ALTRATE)
  908fc6:	298068        	l8ui	a9, a8, 104
  908fc9:	009932        	sext	a9, a9, 7
  908fcc:	679042        	bgez	a9, 909012 <ath_update_stats+0x56>
			sc->sc_tx_stats.ast_tx_altrate++;
  908fcf:	292259        	l32i	a9, a2, 0x164
  908fd2:	b199      	addi.n	a9, a9, 1
  908fd4:	292659        	s32i	a9, a2, 0x164
  908fd7:	600037        	j	909012 <ath_update_stats+0x56>
  908fda:	000000        	ill
	} else {
		if (ds->ds_txstat.ts_status & HAL_TXERR_XRETRY)
  908fdd:	7f9707        	bbci	a9, 31, 908fe8 <ath_update_stats+0x2c>
			sc->sc_tx_stats.ast_tx_xretries++;
  908fe0:	292252        	l32i	a9, a2, 0x148
  908fe3:	b199      	addi.n	a9, a9, 1
  908fe5:	292652        	s32i	a9, a2, 0x148
		if (ds->ds_txstat.ts_status & HAL_TXERR_FIFO)
  908fe8:	298066        	l8ui	a9, a8, 102
  908feb:	7d9707        	bbci	a9, 29, 908ff6 <ath_update_stats+0x3a>
			sc->sc_tx_stats.ast_tx_fifoerr++;
  908fee:	292253        	l32i	a9, a2, 0x14c
  908ff1:	b199      	addi.n	a9, a9, 1
  908ff3:	292653        	s32i	a9, a2, 0x14c
		if (ds->ds_txstat.ts_status & HAL_TXERR_FILT)
  908ff6:	298066        	l8ui	a9, a8, 102
  908ff9:	7e9707        	bbci	a9, 30, 909004 <ath_update_stats+0x48>
			sc->sc_tx_stats.ast_tx_filtered++;
  908ffc:	292254        	l32i	a9, a2, 0x150
  908fff:	b199      	addi.n	a9, a9, 1
  909001:	292654        	s32i	a9, a2, 0x150
		if (ds->ds_txstat.ts_status & HAL_TXERR_TIMER_EXPIRED)
  909004:	298066        	l8ui	a9, a8, 102
  909007:	7b9707        	bbci	a9, 27, 909012 <ath_update_stats+0x56>
			sc->sc_tx_stats.ast_tx_timer_exp++;
  90900a:	292255        	l32i	a9, a2, 0x154
  90900d:	b199      	addi.n	a9, a9, 1
  90900f:	292655        	s32i	a9, a2, 0x154
	}
	sr = ds->ds_txstat.ts_shortretry;
	lr = ds->ds_txstat.ts_longretry;
  909012:	298071        	l8ui	a9, a8, 113
	sc->sc_tx_stats.ast_tx_shortretry += sr;
  909015:	2a2256        	l32i	a10, a2, 0x158
		if (ds->ds_txstat.ts_status & HAL_TXERR_FILT)
			sc->sc_tx_stats.ast_tx_filtered++;
		if (ds->ds_txstat.ts_status & HAL_TXERR_TIMER_EXPIRED)
			sc->sc_tx_stats.ast_tx_timer_exp++;
	}
	sr = ds->ds_txstat.ts_shortretry;
  909018:	288070        	l8ui	a8, a8, 112
	lr = ds->ds_txstat.ts_longretry;
	sc->sc_tx_stats.ast_tx_shortretry += sr;
  90901b:	a8a8      	add.n	a8, a10, a8
  90901d:	282656        	s32i	a8, a2, 0x158
	sc->sc_tx_stats.ast_tx_longretry += lr;
  909020:	282257        	l32i	a8, a2, 0x15c
  909023:	a988      	add.n	a8, a8, a9
  909025:	282657        	s32i	a8, a2, 0x15c
  909028:	d10f      	retw.n
	...

0090902c <ath_tx_update_baw>:
	ath_tgt_tx_enqueue(txq, tid);
}

static void
ath_tx_update_baw(ath_atx_tid_t *tid, int seqno)
{
  90902c:	6c1004        	entry	a1, 32
	int index;
	int cindex;

	index  = ATH_BA_INDEX(tid->seq_start, seqno);
  90902f:	2a2102        	l16ui	a10, a2, 4
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);
  909032:	8823      	l32i.n	a8, a2, 12
ath_tx_update_baw(ath_atx_tid_t *tid, int seqno)
{
	int index;
	int cindex;

	index  = ATH_BA_INDEX(tid->seq_start, seqno);
  909034:	0a330c        	sub	a3, a3, a10
  909037:	030a4b        	extui	a10, a3, 0, 12
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);
  90903a:	a8aa      	add.n	a10, a10, a8

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);
  90903c:	0a5941        	extui	a9, a10, 5, 2
  90903f:	c081      	movi.n	a8, 1
  909041:	b499      	addi.n	a9, a9, 4
  909043:	02990a        	addx4	a9, a9, a2
  909046:	c7bf      	movi.n	a11, -1
  909048:	00a104        	ssl	a10
  90904b:	008a1a        	sll	a10, a8
  90904e:	0aba03        	xor	a10, a11, a10
  909051:	8b91      	l32i.n	a11, a9, 4

	while (tid->baw_head != tid->baw_tail &&
  909053:	8c24      	l32i.n	a12, a2, 16
	int cindex;

	index  = ATH_BA_INDEX(tid->seq_start, seqno);
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);
  909055:	0baa01        	and	a10, a10, a11
  909058:	9a91      	s32i.n	a10, a9, 4

	while (tid->baw_head != tid->baw_tail &&
	       (!TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head))) {
  90905a:	db80      	mov.n	a11, a8
	index  = ATH_BA_INDEX(tid->seq_start, seqno);
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);

	while (tid->baw_head != tid->baw_tail &&
  90905c:	600012        	j	909072 <ath_tx_update_baw+0x46>
  90905f:	002921        	excw
	       (!TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head))) {
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  909062:	02b188        	excw
  909065:	b199      	addi.n	a9, a9, 1
  909067:	09094b        	extui	a9, a9, 0, 12
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
  90906a:	080846        	extui	a8, a8, 0, 7

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);

	while (tid->baw_head != tid->baw_tail &&
	       (!TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head))) {
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90906d:	292502        	s16i	a9, a2, 4
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
  909070:	9823      	s32i.n	a8, a2, 12
	index  = ATH_BA_INDEX(tid->seq_start, seqno);
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);

	while (tid->baw_head != tid->baw_tail &&
  909072:	8823      	l32i.n	a8, a2, 12
  909074:	7c8110        	beq	a8, a12, 909088 <ath_tx_update_baw+0x5c>
	       (!TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head))) {
  909077:	085912        	srai	a9, a8, 5
  90907a:	02990a        	addx4	a9, a9, a2
  90907d:	8995      	l32i.n	a9, a9, 20
  90907f:	008104        	ssl	a8
  909082:	00ba1a        	sll	a10, a11
	index  = ATH_BA_INDEX(tid->seq_start, seqno);
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);

	TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, cindex);

	while (tid->baw_head != tid->baw_tail &&
  909085:	79a0d7        	bnone	a10, a9, 909060 <ath_tx_update_baw+0x34>
  909088:	d10f      	retw.n
	...

0090908c <ath_dma_unmap>:
	skb = adf_nbuf_queue_first(&bf->bf_skbhead);
	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, skb, ADF_OS_DMA_TO_DEVICE);
}

static void ath_dma_unmap(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90908c:	6c1004        	entry	a1, 32
 * @return first buffer in queue
 */
static inline adf_nbuf_t 
adf_nbuf_queue_first(adf_nbuf_queue_t *head)
{
    return (__adf_nbuf_queue_first(head));
  90908f:	2a3c14        	addi	a10, a3, 20
  909092:	5be989        	call8	9036b8 <__adf_nbuf_queue_first>
static inline void
adf_nbuf_unmap(adf_os_device_t      osdev, 
               adf_os_dma_map_t     bmap, 
               adf_os_dma_dir_t     dir)
{
    __adf_nbuf_unmap(osdev, bmap, dir);
  909095:	2a2246        	l32i	a10, a2, 0x118
  909098:	8b30      	l32i.n	a11, a3, 0
  90909a:	2c0a00        	movi	a12, 0
  90909d:	5be90c        	call8	9034d0 <__adf_nbuf_unmap>
  9090a0:	d10f      	retw.n
	...

009090a4 <ath_tgt_skb_free>:
}

static void ath_tgt_skb_free(struct ath_softc_tgt *sc,
			     adf_nbuf_queue_t *head,
			     HTC_ENDPOINT_ID endpt)
{
  9090a4:	6c1004        	entry	a1, 32
	adf_nbuf_t tskb;

	while (adf_nbuf_queue_len(head) != 0) {
		tskb = adf_nbuf_queue_remove(head);
		ath_free_tx_skb(sc->tgt_htc_handle,endpt,tskb);
  9090a7:	157182        	l32r	a5, 8e56b0 <memset+0x514>
			     adf_nbuf_queue_t *head,
			     HTC_ENDPOINT_ID endpt)
{
	adf_nbuf_t tskb;

	while (adf_nbuf_queue_len(head) != 0) {
  9090aa:	600012        	j	9090c0 <ath_tgt_skb_free+0x1c>
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  9090ad:	da30      	mov.n	a10, a3
  9090af:	5be8f4        	call8	903480 <__adf_nbuf_queue_remove>
  9090b2:	dca0      	mov.n	a12, a10
		tskb = adf_nbuf_queue_remove(head);
		ath_free_tx_skb(sc->tgt_htc_handle,endpt,tskb);
  9090b4:	285287        	l32i	a8, a5, 0x21c
  9090b7:	2a2202        	l32i	a10, a2, 8
  9090ba:	044b02        	or	a11, a4, a4
  9090bd:	0b8000        	callx8	a8
 * @return length of the queue
 */
static inline a_uint32_t
adf_nbuf_queue_len(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_len(head);
  9090c0:	da30      	mov.n	a10, a3
  9090c2:	5be97b        	call8	9036b0 <__adf_nbuf_queue_len>
			     adf_nbuf_queue_t *head,
			     HTC_ENDPOINT_ID endpt)
{
	adf_nbuf_t tskb;

	while (adf_nbuf_queue_len(head) != 0) {
  9090c5:	65afe4        	bnez	a10, 9090ad <ath_tgt_skb_free+0x9>
		tskb = adf_nbuf_queue_remove(head);
		ath_free_tx_skb(sc->tgt_htc_handle,endpt,tskb);
	}
}
  9090c8:	d10f      	retw.n
	...

009090cc <ath_filltxdesc>:
	skb = adf_nbuf_queue_first(&bf->bf_skbhead);
	adf_nbuf_unmap( sc->sc_dev, bf->bf_dmamap, ADF_OS_DMA_TO_DEVICE);
}

static void ath_filltxdesc(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  9090cc:	6c1004        	entry	a1, 32
	struct ath_tx_desc *ds0, *ds = bf->bf_desc;
  9090cf:	863c      	l32i.n	a6, a3, 48
 * @param[out] sg   map info
 */
static inline void
adf_nbuf_dmamap_info(adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
    __adf_nbuf_dmamap_info(bmap, sg);
  9090d1:	8a30      	l32i.n	a10, a3, 0
	struct ath_hal *ah = sc->sc_ah;
  9090d3:	222d05        	addmi	a2, a2, 0x500
  9090d6:	b43b      	addi.n	a11, a3, 4
	a_uint8_t i;

	ds0 = ds;
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	for (i = 0; i < bf->bf_dmamap_info.nsegs; i++, ds++) {
  9090d8:	c040      	movi.n	a4, 0
}

static void ath_filltxdesc(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds0, *ds = bf->bf_desc;
	struct ath_hal *ah = sc->sc_ah;
  9090da:	872b      	l32i.n	a7, a2, 44
	ds0 = ds;
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	for (i = 0; i < bf->bf_dmamap_info.nsegs; i++, ds++) {

		ds->ds_data = bf->bf_dmamap_info.dma_segs[i].paddr;
  9090dc:	d540      	mov.n	a5, a4
  9090de:	5be901        	call8	9034e4 <__adf_nbuf_dmamap_info>
	adf_nbuf_unmap( sc->sc_dev, bf->bf_dmamap, ADF_OS_DMA_TO_DEVICE);
}

static void ath_filltxdesc(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds0, *ds = bf->bf_desc;
  9090e1:	d260      	mov.n	a2, a6
	a_uint8_t i;

	ds0 = ds;
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	for (i = 0; i < bf->bf_dmamap_info.nsegs; i++, ds++) {
  9090e3:	600081        	j	909168 <ath_filltxdesc+0x9c>
  9090e6:	000003        	xor	a0, a0, a0

		ds->ds_data = bf->bf_dmamap_info.dma_segs[i].paddr;
  9090e9:	480b2a        	excw
  9090ec:	8008      	l32i.n	a0, a0, 32

		if (i == (bf->bf_dmamap_info.nsegs - 1)) {
  9090ee:	b099      	addi.n	a9, a9, -1
	ds0 = ds;
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	for (i = 0; i < bf->bf_dmamap_info.nsegs; i++, ds++) {

		ds->ds_data = bf->bf_dmamap_info.dma_segs[i].paddr;
  9090f0:	2a2404        	s8i	a10, a2, 4
  9090f3:	2a8009        	l8ui	a10, a8, 9
  9090f6:	2a2405        	s8i	a10, a2, 5
  9090f9:	2a800a        	l8ui	a10, a8, 10
  9090fc:	2a2406        	s8i	a10, a2, 6
  9090ff:	28800b        	l8ui	a8, a8, 11
  909102:	282407        	s8i	a8, a2, 7

		if (i == (bf->bf_dmamap_info.nsegs - 1)) {
  909105:	794910        	bne	a4, a9, 909119 <ath_filltxdesc+0x4d>
			ds->ds_link = 0;
  909108:	252400        	s8i	a5, a2, 0
  90910b:	252401        	s8i	a5, a2, 1
  90910e:	252402        	s8i	a5, a2, 2
  909111:	252403        	s8i	a5, a2, 3
			bf->bf_lastds = ds;
  909114:	923e      	s32i.n	a2, a3, 56
  909116:	600020        	j	90913a <ath_filltxdesc+0x6e>
		} else
			ds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, i+1);
  909119:	b148      	addi.n	a8, a4, 1
  90911b:	0c8911        	slli	a9, a8, 4
  90911e:	a898      	add.n	a8, a9, a8
  909120:	893d      	l32i.n	a9, a3, 52
  909122:	09880b        	addx8	a8, a8, a9
  909125:	088957        	extui	a9, a8, 24, 8
  909128:	292400        	s8i	a9, a2, 0
  90912b:	080957        	extui	a9, a8, 16, 8
  90912e:	292401        	s8i	a9, a2, 1
  909131:	088947        	extui	a9, a8, 8, 8
  909134:	292402        	s8i	a9, a2, 2
  909137:	282403        	s8i	a8, a2, 3

		ah->ah_fillTxDesc(ds
				   , bf->bf_dmamap_info.dma_segs[i].len
				   , i == 0
				   , i == (bf->bf_dmamap_info.nsegs - 1)
  90913a:	8d31      	l32i.n	a13, a3, 4
			ds->ds_link = 0;
			bf->bf_lastds = ds;
		} else
			ds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, i+1);

		ah->ah_fillTxDesc(ds
  90913c:	c091      	movi.n	a9, 1
				   , bf->bf_dmamap_info.dma_segs[i].len
				   , i == 0
				   , i == (bf->bf_dmamap_info.nsegs - 1)
  90913e:	b0dd      	addi.n	a13, a13, -1
			ds->ds_link = 0;
			bf->bf_lastds = ds;
		} else
			ds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR_WITH_IDX(bf, i+1);

		ah->ah_fillTxDesc(ds
  909140:	0d4d0c        	sub	a13, a4, a13
  909143:	034b0b        	addx8	a11, a4, a3
  909146:	c080      	movi.n	a8, 0
  909148:	dc80      	mov.n	a12, a8
  90914a:	2f7218        	l32i	a15, a7, 96
  90914d:	0d9838        	moveqz	a8, a9, a13
  909150:	8bb3      	l32i.n	a11, a11, 12
  909152:	049c38        	moveqz	a12, a9, a4
  909155:	dd80      	mov.n	a13, a8
  909157:	da20      	mov.n	a10, a2
  909159:	de60      	mov.n	a14, a6
  90915b:	0bf000        	callx8	a15
	a_uint8_t i;

	ds0 = ds;
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	for (i = 0; i < bf->bf_dmamap_info.nsegs; i++, ds++) {
  90915e:	b144      	addi.n	a4, a4, 1
  909160:	280a88        	movi	a8, 136
  909163:	040447        	extui	a4, a4, 0, 8
  909166:	a822      	add.n	a2, a2, a8
  909168:	8931      	l32i.n	a9, a3, 4
  90916a:	794b02        	bgeu	a4, a9, 909170 <ath_filltxdesc+0xa4>
  90916d:	63ff77        	j	9090e8 <ath_filltxdesc+0x1c>
				   , bf->bf_dmamap_info.dma_segs[i].len
				   , i == 0
				   , i == (bf->bf_dmamap_info.nsegs - 1)
				   , ds0);
	}
}
  909170:	d10f      	retw.n
	...

00909174 <ath_tx_tgt_setds>:

static void ath_tx_tgt_setds(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  909174:	6c1006        	entry	a1, 48
	struct ath_tx_desc *ds = bf->bf_desc;
	struct ath_hal *ah = sc->sc_ah;

	switch (bf->bf_protmode) {
  909177:	293084        	l8ui	a9, a3, 132
}

static void ath_tx_tgt_setds(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds = bf->bf_desc;
	struct ath_hal *ah = sc->sc_ah;
  90917a:	282d05        	addmi	a8, a2, 0x500
  90917d:	8d8b      	l32i.n	a13, a8, 44
	}
}

static void ath_tx_tgt_setds(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds = bf->bf_desc;
  90917f:	8a3c      	l32i.n	a10, a3, 48
  909181:	283144        	l16ui	a8, a3, 136
	struct ath_hal *ah = sc->sc_ah;

	switch (bf->bf_protmode) {
  909184:	689108        	beqi	a9, 1, 909190 <ath_tx_tgt_setds+0x1c>
  909187:	69920d        	bnei	a9, 2, 909198 <ath_tx_tgt_setds+0x24>
    	case IEEE80211_PROT_RTSCTS:
		bf->bf_flags |= HAL_TXDESC_RTSENA;
  90918a:	c094      	movi.n	a9, 4
  90918c:	600002        	j	909192 <ath_tx_tgt_setds+0x1e>
  90918f:	00c098        	excw
		break;
    	case IEEE80211_PROT_CTSONLY:
		bf->bf_flags |= HAL_TXDESC_CTSENA;
  909192:	098802        	or	a8, a8, a9
  909195:	283544        	s16i	a8, a3, 136
		break;
    	default:
		break;
	}

	ah->ah_set11nTxDesc(ds
  909198:	293144        	l16ui	a9, a3, 136
  90919b:	c180      	movi.n	a8, 16
  90919d:	089802        	or	a8, a9, a8
  9091a0:	08084f        	extui	a8, a8, 0, 16
  9091a3:	9810      	s32i.n	a8, a1, 0
  9091a5:	2b3122        	l16ui	a11, a3, 68
  9091a8:	88df      	l32i.n	a8, a13, 60
  9091aa:	2c304a        	l8ui	a12, a3, 74
  9091ad:	2e3049        	l8ui	a14, a3, 73
  9091b0:	2f3085        	l8ui	a15, a3, 133
  9091b3:	2d0a3c        	movi	a13, 60
  9091b6:	0b8000        	callx8	a8
			      , 60
			      , bf->bf_keyix
			      , bf->bf_keytype
			      , bf->bf_flags | HAL_TXDESC_INTREQ);

	ath_filltxdesc(sc, bf);
  9091b9:	da20      	mov.n	a10, a2
  9091bb:	db30      	mov.n	a11, a3
  9091bd:	5bffc3        	call8	9090cc <ath_filltxdesc>
  9091c0:	d10f      	retw.n
	...

009091c4 <ath_tgt_tx_enqueue>:
	ath_tgt_tx_send_normal(sc, bf);
}

static void
ath_tgt_tx_enqueue(struct ath_txq *txq, struct ath_atx_tid  *tid)
{
  9091c4:	6c1004        	entry	a1, 32
	if (tid->paused)
  9091c7:	283034        	l8ui	a8, a3, 52
  9091ca:	cd88      	bnez.n	a8, 9091e6 <ath_tgt_tx_enqueue+0x22>
		return;

	if (tid->sched)
  9091cc:	283035        	l8ui	a8, a3, 53
  9091cf:	008832        	sext	a8, a8, 7
  9091d2:	cd80      	bnez.n	a8, 9091e6 <ath_tgt_tx_enqueue+0x22>
		return;

	tid->sched = AH_TRUE;
  9091d4:	c091      	movi.n	a9, 1
  9091d6:	293435        	s8i	a9, a3, 53
	asf_tailq_insert_tail(&txq->axq_tidq, tid, tid_qelem);
  9091d9:	9839      	s32i.n	a8, a3, 36
  9091db:	8827      	l32i.n	a8, a2, 28
  9091dd:	983a      	s32i.n	a8, a3, 40
  9091df:	9380      	s32i.n	a3, a8, 0
  9091e1:	233c24        	addi	a3, a3, 36
  9091e4:	9327      	s32i.n	a3, a2, 28
  9091e6:	d10f      	retw.n

009091e8 <ath_update_aggr_stats$isra$2>:
	ath_tx_set_retry(sc, bf);
	asf_tailq_insert_tail(bf_q, bf, bf_list);
}

static void
ath_update_aggr_stats(struct ath_softc_tgt *sc,
  9091e8:	6c1004        	entry	a1, 32
{

	u_int8_t status = ATH_DS_TX_STATUS(ds);
	u_int8_t txflags = ATH_DS_TX_FLAGS(ds);

	__statsn(sc, txaggr_longretries, ds->ds_txstat.ts_longretry);
  9091eb:	2a3071        	l8ui	a10, a3, 113
  9091ee:	2b2268        	l32i	a11, a2, 0x1a0
ath_update_aggr_stats(struct ath_softc_tgt *sc,
		      struct ath_tx_desc *ds, int nframes,
		      int nbad)
{

	u_int8_t status = ATH_DS_TX_STATUS(ds);
  9091f1:	283066        	l8ui	a8, a3, 102
	u_int8_t txflags = ATH_DS_TX_FLAGS(ds);

	__statsn(sc, txaggr_longretries, ds->ds_txstat.ts_longretry);
  9091f4:	0aba08        	add	a10, a11, a10
		      struct ath_tx_desc *ds, int nframes,
		      int nbad)
{

	u_int8_t status = ATH_DS_TX_STATUS(ds);
	u_int8_t txflags = ATH_DS_TX_FLAGS(ds);
  9091f7:	293067        	l8ui	a9, a3, 103

	__statsn(sc, txaggr_longretries, ds->ds_txstat.ts_longretry);
  9091fa:	2a2668        	s32i	a10, a2, 0x1a0
	__statsn(sc, txaggr_shortretries, ds->ds_txstat.ts_shortretry);
  9091fd:	233070        	l8ui	a3, a3, 112
  909200:	2a226b        	l32i	a10, a2, 0x1ac
  909203:	03a308        	add	a3, a10, a3
  909206:	23266b        	s32i	a3, a2, 0x1ac

	if (txflags & HAL_TX_DESC_CFG_ERR)
  909209:	7d9708        	bbci	a9, 29, 909215 <ath_update_aggr_stats$isra$2+0x2d>
		__stats(sc, txaggr_desc_cfgerr);
  90920c:	232271        	l32i	a3, a2, 0x1c4
  90920f:	233c01        	addi	a3, a3, 1
  909212:	232671        	s32i	a3, a2, 0x1c4

	if (txflags & HAL_TX_DATA_UNDERRUN)
  909215:	7c9708        	bbci	a9, 28, 909221 <ath_update_aggr_stats$isra$2+0x39>
		__stats(sc, txaggr_data_urun);
  909218:	232265        	l32i	a3, a2, 0x194
  90921b:	233c01        	addi	a3, a3, 1
  90921e:	232665        	s32i	a3, a2, 0x194

	if (txflags & HAL_TX_DELIM_UNDERRUN)
  909221:	7b9707        	bbci	a9, 27, 90922c <ath_update_aggr_stats$isra$2+0x44>
		__stats(sc, txaggr_delim_urun);
  909224:	232266        	l32i	a3, a2, 0x198
  909227:	b133      	addi.n	a3, a3, 1
  909229:	232666        	s32i	a3, a2, 0x198

	if (!status) {
  90922c:	cb88      	beqz.n	a8, 909268 <ath_update_aggr_stats$isra$2+0x80>
		return;
	}

	if (status & HAL_TXERR_XRETRY)
  90922e:	7f8707        	bbci	a8, 31, 909239 <ath_update_aggr_stats$isra$2+0x51>
		__stats(sc, txaggr_compxretry);
  909231:	23226a        	l32i	a3, a2, 0x1a8
  909234:	b133      	addi.n	a3, a3, 1
  909236:	23266a        	s32i	a3, a2, 0x1a8

	if (status & HAL_TXERR_FILT)
  909239:	7e8708        	bbci	a8, 30, 909245 <ath_update_aggr_stats$isra$2+0x5d>
		__stats(sc, txaggr_filtered);
  90923c:	23226e        	l32i	a3, a2, 0x1b8
  90923f:	233c01        	addi	a3, a3, 1
  909242:	23266e        	s32i	a3, a2, 0x1b8

	if (status & HAL_TXERR_FIFO)
  909245:	7d8708        	bbci	a8, 29, 909251 <ath_update_aggr_stats$isra$2+0x69>
		__stats(sc, txaggr_fifo);
  909248:	23226f        	l32i	a3, a2, 0x1bc
  90924b:	233c01        	addi	a3, a3, 1
  90924e:	23266f        	s32i	a3, a2, 0x1bc

	if (status & HAL_TXERR_XTXOP)
  909251:	7c8708        	bbci	a8, 28, 90925d <ath_update_aggr_stats$isra$2+0x75>
		__stats(sc, txaggr_xtxop);
  909254:	232270        	l32i	a3, a2, 0x1c0
  909257:	233c01        	addi	a3, a3, 1
  90925a:	232670        	s32i	a3, a2, 0x1c0

	if (status & HAL_TXERR_TIMER_EXPIRED)
  90925d:	7b8707        	bbci	a8, 27, 909268 <ath_update_aggr_stats$isra$2+0x80>
		__stats(sc, txaggr_timer_exp);
  909260:	23226c        	l32i	a3, a2, 0x1b0
  909263:	b133      	addi.n	a3, a3, 1
  909265:	23266c        	s32i	a3, a2, 0x1b0
  909268:	d10f      	retw.n
	...

0090926c <__adf_os_mem_set$constprop$13>:
}

/* set a memory buffer */
static inline void
__adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
  90926c:	6c1004        	entry	a1, 32
{
	A_MEMSET(buf, b, size);
  90926f:	187182        	l32r	a8, 8e5878 <memset+0x6dc>
  909272:	da20      	mov.n	a10, a2
  909274:	8884      	l32i.n	a8, a8, 16
  909276:	c0b0      	movi.n	a11, 0
  909278:	dc30      	mov.n	a12, a3
  90927a:	0b8000        	callx8	a8
  90927d:	d10f      	retw.n
	...

00909280 <ath_buf_set_rate>:
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  909280:	6c1012        	entry	a1, 144
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;
  909283:	272d03        	addmi	a7, a2, 0x300
  909286:	27700c        	l8ui	a7, a7, 12
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
    struct ath_hal *ah = sc->sc_ah;
  909289:	242d05        	addmi	a4, a2, 0x500
    HAL_11N_RATE_SERIES series[4];
    a_int32_t i, flags;
    a_uint8_t rix, cix, rtsctsrate;
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
  90928c:	252281        	l32i	a5, a2, 0x204
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;
  90928f:	b277      	addi.n	a7, a7, 2
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
    struct ath_hal *ah = sc->sc_ah;
  909291:	844b      	l32i.n	a4, a4, 44
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;
  909293:	0c7711        	slli	a7, a7, 4
  909296:	a757      	add.n	a7, a5, a7
  909298:	297013        	l8ui	a9, a7, 19
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
    struct ath_hal *ah = sc->sc_ah;
  90929b:	241615        	s32i	a4, a1, 84
    const HAL_RATE_TABLE *rt;
    struct ath_tx_desc *ds = bf->bf_desc;
  90929e:	843c      	l32i.n	a4, a3, 48
    a_uint8_t rix, cix, rtsctsrate;
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
  9092a0:	283144        	l16ui	a8, a3, 136
    cix = rt->info[sc->sc_protrix].controlRate;

    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
  9092a3:	273084        	l8ui	a7, a3, 132

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
    struct ath_hal *ah = sc->sc_ah;
    const HAL_RATE_TABLE *rt;
    struct ath_tx_desc *ds = bf->bf_desc;
  9092a6:	241616        	s32i	a4, a1, 88
    a_uint8_t rix, cix, rtsctsrate;
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
  9092a9:	c06c      	movi.n	a6, 12
    cix = rt->info[sc->sc_protrix].controlRate;
  9092ab:	291614        	s32i	a9, a1, 80
    a_int32_t i, flags;
    a_uint8_t rix, cix, rtsctsrate;
    a_int32_t prot_mode = AH_FALSE;

    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
  9092ae:	243050        	l8ui	a4, a3, 80
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
  9092b1:	068601        	and	a6, a8, a6
    cix = rt->info[sc->sc_protrix].controlRate;

    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
  9092b4:	ca71      	beqz.n	a7, 9092d9 <ath_buf_set_rate+0x59>
	(rt->info[rix].phy == IEEE80211_T_OFDM ||
  9092b6:	b244      	addi.n	a4, a4, 2
  9092b8:	0c4411        	slli	a4, a4, 4
  9092bb:	a454      	add.n	a4, a5, a4
  9092bd:	294009        	l8ui	a9, a4, 9
  9092c0:	c071      	movi.n	a7, 1
  9092c2:	2a9cfc        	addi	a10, a9, -4
  9092c5:	c040      	movi.n	a4, 0
  9092c7:	0a7438        	moveqz	a4, a7, a10
    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;

    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
  9092ca:	cc46      	bnez.n	a4, 9092d4 <ath_buf_set_rate+0x54>
	(rt->info[rix].phy == IEEE80211_T_OFDM ||
  9092cc:	299cfe        	addi	a9, a9, -2
    rt = sc->sc_currates;
    rix = bf->bf_rcs[0].rix;
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;

    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
  9092cf:	097438        	moveqz	a4, a7, a9
  9092d2:	c843      	beqz.n	a4, 9092d9 <ath_buf_set_rate+0x59>
	(rt->info[rix].phy == IEEE80211_T_OFDM ||
	 rt->info[rix].phy == IEEE80211_T_HT) &&
	(bf->bf_flags & HAL_TXDESC_NOACK) == 0) {
	    cix = rt->info[sc->sc_protrix].controlRate;
	    prot_mode = AH_TRUE;
  9092d4:	c071      	movi.n	a7, 1
    flags = (bf->bf_flags & (HAL_TXDESC_RTSENA | HAL_TXDESC_CTSENA));
    cix = rt->info[sc->sc_protrix].controlRate;

    if (bf->bf_protmode != IEEE80211_PROT_NONE &&
	(rt->info[rix].phy == IEEE80211_T_OFDM ||
	 rt->info[rix].phy == IEEE80211_T_HT) &&
  9092d6:	7e8744        	bbci	a8, 30, 90931e <ath_buf_set_rate+0x9e>
	(bf->bf_flags & HAL_TXDESC_NOACK) == 0) {
	    cix = rt->info[sc->sc_protrix].controlRate;
	    prot_mode = AH_TRUE;
    } else {
	    if (ath_hal_getcapability(ah, HAL_CAP_HT) && (!bf->bf_ismcast))
  9092d9:	2a1215        	l32i	a10, a1, 84
  9092dc:	c0b5      	movi.n	a11, 5
  9092de:	5bef12        	call8	904f28 <ath_hal_getcapability>
  9092e1:	c8a9      	beqz.n	a10, 9092ee <ath_buf_set_rate+0x6e>
  9092e3:	273221        	l32i	a7, a3, 132
		    flags = HAL_TXDESC_RTSENA;
  9092e6:	c044      	movi.n	a4, 4
	 rt->info[rix].phy == IEEE80211_T_HT) &&
	(bf->bf_flags & HAL_TXDESC_NOACK) == 0) {
	    cix = rt->info[sc->sc_protrix].controlRate;
	    prot_mode = AH_TRUE;
    } else {
	    if (ath_hal_getcapability(ah, HAL_CAP_HT) && (!bf->bf_ismcast))
  9092e8:	077740        	extui	a7, a7, 7, 1
		    flags = HAL_TXDESC_RTSENA;
  9092eb:	074638        	moveqz	a6, a4, a7
  9092ee:	d730      	mov.n	a7, a3

	    for (i = 4; i--;) {
  9092f0:	c044      	movi.n	a4, 4
  9092f2:	600020        	j	909316 <ath_buf_set_rate+0x96>
  9092f5:	277cf4        	addi	a7, a7, -12
		    if (bf->bf_rcs[i].tries) {
  9092f8:	287081        	l8ui	a8, a7, 129
  9092fb:	c987      	beqz.n	a8, 909316 <ath_buf_set_rate+0x96>
			    cix = rt->info[bf->bf_rcs[i].rix].controlRate;
  9092fd:	044409        	addx2	a4, a4, a4
  909300:	03440a        	addx4	a4, a4, a3
  909303:	244050        	l8ui	a4, a4, 80
  909306:	b244      	addi.n	a4, a4, 2
  909308:	0c4411        	slli	a4, a4, 4
  90930b:	a454      	add.n	a4, a5, a4
  90930d:	244013        	l8ui	a4, a4, 19
  909310:	241614        	s32i	a4, a1, 80
  909313:	600004        	j	90931b <ath_buf_set_rate+0x9b>
	    prot_mode = AH_TRUE;
    } else {
	    if (ath_hal_getcapability(ah, HAL_CAP_HT) && (!bf->bf_ismcast))
		    flags = HAL_TXDESC_RTSENA;

	    for (i = 4; i--;) {
  909316:	b044      	addi.n	a4, a4, -1
  909318:	6940d9        	bnei	a4, -1, 9092f5 <ath_buf_set_rate+0x75>
    const HAL_RATE_TABLE *rt;
    struct ath_tx_desc *ds = bf->bf_desc;
    HAL_11N_RATE_SERIES series[4];
    a_int32_t i, flags;
    a_uint8_t rix, cix, rtsctsrate;
    a_int32_t prot_mode = AH_FALSE;
  90931b:	270a00        	movi	a7, 0
 * @param[in] size  buffer size
 */
static inline void
adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
    __adf_os_mem_set(buf, b, size);
  90931e:	da10      	mov.n	a10, a1
  909320:	c5b0      	movi.n	a11, 80
  909322:	5bffd2        	call8	90926c <__adf_os_mem_set$constprop$13>
	if (bf != NULL) {
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  909325:	2f3c30        	addi	a15, a3, 48
  909328:	d830      	mov.n	a8, a3
  90932a:	241c10        	addi	a4, a1, 16
  90932d:	2f1617        	s32i	a15, a1, 92
    }

    adf_os_mem_set(series, 0, sizeof(HAL_11N_RATE_SERIES) * 4);

    for (i = 0; i < 4; i++) {
	    if (!bf->bf_rcs[i].tries)
  909330:	298051        	l8ui	a9, a8, 81
  909333:	6490f2        	beqz	a9, 909429 <ath_buf_set_rate+0x1a9>
		    continue;

	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
  909336:	2d8050        	l8ui	a13, a8, 80
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);
  909339:	2c3221        	l32i	a12, a3, 132
	    if (!bf->bf_rcs[i].tries)
		    continue;

	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
  90933c:	b2db      	addi.n	a11, a13, 2
  90933e:	0cbb11        	slli	a11, a11, 4
  909341:	ab5b      	add.n	a11, a5, a11
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);
  909343:	c4f0      	movi.n	a15, 64
	    if (!bf->bf_rcs[i].tries)
		    continue;

	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
  909345:	2eb010        	l8ui	a14, a11, 16
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);
  909348:	c0a0      	movi.n	a10, 0
  90934a:	7fc002        	bnone	a12, a15, 909350 <ath_buf_set_rate+0xd0>
  90934d:	2ab011        	l8ui	a10, a11, 17
	    if (!bf->bf_rcs[i].tries)
		    continue;

	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
  909350:	0eaa02        	or	a10, a10, a14
	if (bf != NULL) {
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  909353:	2b4cf4        	addi	a11, a4, -12
	    if (!bf->bf_rcs[i].tries)
		    continue;

	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
  909356:	9ab0      	s32i.n	a10, a11, 0
	if (bf != NULL) {
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  909358:	2a4cf0        	addi	a10, a4, -16
	    rix = bf->bf_rcs[i].rix;

	    series[i].Rate = rt->info[rix].rateCode |
		    (bf->bf_shpream ? rt->info[rix].shortPreamble : 0);

	    series[i].Tries = bf->bf_rcs[i].tries;
  90935b:	99a0      	s32i.n	a9, a10, 0
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_TX_STBC_FLAG) ?
		     HAL_RATESERIES_STBC: 0);
#else
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
  90935d:	298053        	l8ui	a9, a8, 83
				   HAL_RATESERIES_RTS_CTS : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
  909360:	c0a2      	movi.n	a10, 2
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 );
  909362:	c0e4      	movi.n	a14, 4
		     HAL_RATESERIES_STBC: 0);
#else
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
				   HAL_RATESERIES_RTS_CTS : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
  909364:	0a9a01        	and	a10, a9, a10
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 );
  909367:	0e9e01        	and	a14, a9, a14
		     HAL_RATESERIES_HALFGI : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_TX_STBC_FLAG) ?
		     HAL_RATESERIES_STBC: 0);
#else
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
				   HAL_RATESERIES_RTS_CTS : 0 ) |
  90936a:	0eab02        	or	a11, a10, a14
  90936d:	094940        	extui	a9, a9, 4, 1
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
  909370:	09b902        	or	a9, a11, a9
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_TX_STBC_FLAG) ?
		     HAL_RATESERIES_STBC: 0);
#else
	    series[i].RateFlags = ((bf->bf_rcs[i].flags & ATH_RC_RTSCTS_FLAG) ?
  909373:	9940      	s32i.n	a9, a4, 0

static a_uint32_t ath_pkt_duration(struct ath_softc_tgt *sc,
				   a_uint8_t rix, struct ath_tx_buf *bf,
				   a_int32_t width, a_int32_t half_gi)
{
	const HAL_RATE_TABLE *rt = sc->sc_currates;
  909375:	2b2281        	l32i	a11, a2, 0x204
	a_uint32_t nbits, nsymbits, duration, nsymbols;
	a_uint8_t rc;
	a_int32_t streams;
	a_int32_t pktlen;

	pktlen = bf->bf_isaggr ? bf->bf_al : bf->bf_pktlen;
  909378:	7ac705        	bbci	a12, 26, 909381 <ath_buf_set_rate+0x101>
  90937b:	2c3127        	l16ui	a12, a3, 78
  90937e:	600002        	j	909384 <ath_buf_set_rate+0x104>
  909381:	2c3122        	l16ui	a12, a3, 68
	rc = rt->info[rix].rateCode;
  909384:	b2d9      	addi.n	a9, a13, 2
  909386:	0c9911        	slli	a9, a9, 4
  909389:	a9b9      	add.n	a9, a11, a9
  90938b:	299010        	l8ui	a9, a9, 16

	if (!IS_HT_RATE(rc))
  90938e:	009f32        	sext	a15, a9, 7
  909391:	66f017        	bltz	a15, 9093ac <ath_buf_set_rate+0x12c>
		return ath_hal_computetxtime(sc->sc_ah, rt, pktlen, rix,
					     bf->bf_shpream);
  909394:	2e3221        	l32i	a14, a3, 132

	pktlen = bf->bf_isaggr ? bf->bf_al : bf->bf_pktlen;
	rc = rt->info[rix].rateCode;

	if (!IS_HT_RATE(rc))
		return ath_hal_computetxtime(sc->sc_ah, rt, pktlen, rix,
  909397:	292d05        	addmi	a9, a2, 0x500
  90939a:	8a9b      	l32i.n	a10, a9, 44
  90939c:	0e6e40        	extui	a14, a14, 6, 1
  90939f:	28161a        	s32i	a8, a1, 104
  9093a2:	5beef0        	call8	904f64 <ath_hal_computetxtime>
  9093a5:	28121a        	l32i	a8, a1, 104
  9093a8:	600052        	j	9093fe <ath_buf_set_rate+0x17e>
  9093ab:	00c0d1        	excw
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 );
#endif
	    series[i].PktDuration = ath_pkt_duration(sc, rix, bf,
  9093ae:	c0b0      	movi.n	a11, 0
  9093b0:	0adb39        	movnez	a11, a13, a10
	if (!IS_HT_RATE(rc))
		return ath_hal_computetxtime(sc->sc_ah, rt, pktlen, rix,
					     bf->bf_shpream);

	nbits = (pktlen << 3) + OFDM_PLCP_BITS;
	nsymbits = bits_per_symbol[HT_RC_2_MCS(rc)][width];
  9093b3:	090a43        	extui	a10, a9, 0, 4
  9093b6:	0bab09        	addx2	a11, a10, a11
  9093b9:	1a72be        	l32r	a10, 8e5eb4 <memset+0xd18>
	nsymbols = (nbits + nsymbits - 1) / nsymbits;
  9093bc:	28161a        	s32i	a8, a1, 104
	if (!IS_HT_RATE(rc))
		return ath_hal_computetxtime(sc->sc_ah, rt, pktlen, rix,
					     bf->bf_shpream);

	nbits = (pktlen << 3) + OFDM_PLCP_BITS;
	nsymbits = bits_per_symbol[HT_RC_2_MCS(rc)][width];
  9093bf:	0abb09        	addx2	a11, a11, a10
  9093c2:	2bb100        	l16ui	a11, a11, 0
	nsymbols = (nbits + nsymbits - 1) / nsymbits;
  9093c5:	291619        	s32i	a9, a1, 100

	if (!IS_HT_RATE(rc))
		return ath_hal_computetxtime(sc->sc_ah, rt, pktlen, rix,
					     bf->bf_shpream);

	nbits = (pktlen << 3) + OFDM_PLCP_BITS;
  9093c8:	0bca0b        	addx8	a10, a12, a11
	nsymbits = bits_per_symbol[HT_RC_2_MCS(rc)][width];
	nsymbols = (nbits + nsymbits - 1) / nsymbits;
  9093cb:	2aac15        	addi	a10, a10, 21
  9093ce:	2e1618        	s32i	a14, a1, 96
  9093d1:	5b6e73        	call8	8e4da0 <__udivsi3>

	if (!half_gi)
  9093d4:	2e1218        	l32i	a14, a1, 96
  9093d7:	28121a        	l32i	a8, a1, 104
  9093da:	291219        	l32i	a9, a1, 100
  9093dd:	cce4      	bnez.n	a14, 9093e5 <ath_buf_set_rate+0x165>
		duration = SYMBOL_TIME(nsymbols);
  9093df:	0eaa11        	slli	a10, a10, 2
  9093e2:	600010        	j	9093f6 <ath_buf_set_rate+0x176>
	else
		duration = SYMBOL_TIME_HALFGI(nsymbols);
  9093e5:	0aaa0b        	addx8	a10, a10, a10
  9093e8:	0faa11        	slli	a10, a10, 1
  9093eb:	1b72bf        	l32r	a11, 8e5ee8 <memset+0xd4c>
  9093ee:	b4aa      	addi.n	a10, a10, 4
  9093f0:	0baa2a        	muluh	a10, a10, a11
  9093f3:	0a2a14        	srli	a10, a10, 2

	streams = HT_RC_2_STREAMS(rc);
  9093f6:	093943        	extui	a9, a9, 3, 4
	duration += L_STF + L_LTF + L_SIG + HT_SIG + HT_STF + HT_LTF(streams);
  9093f9:	b999      	addi.n	a9, a9, 9
  9093fb:	0a9a0a        	addx4	a10, a9, a10
	if (bf != NULL) {
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  9093fe:	294cf8        	addi	a9, a4, -8
		    ((bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) ?
		     HAL_RATESERIES_2040 : 0 ) |
		    ((bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG) ?
		     HAL_RATESERIES_HALFGI : 0 );
#endif
	    series[i].PktDuration = ath_pkt_duration(sc, rix, bf,
  909401:	9a90      	s32i.n	a10, a9, 0
				     (bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) != 0,
				     (bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG));

	    series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  909403:	2a2d16        	addmi	a10, a2, 0x1600
  909406:	2aa026        	l8ui	a10, a10, 38
	if (bf != NULL) {
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
	}
}

static void ath_buf_set_rate(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
  909409:	294cfc        	addi	a9, a4, -4
#endif
	    series[i].PktDuration = ath_pkt_duration(sc, rix, bf,
				     (bf->bf_rcs[i].flags & ATH_RC_CW40_FLAG) != 0,
				     (bf->bf_rcs[i].flags & ATH_RC_HT40_SGI_FLAG));

	    series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90940c:	9a90      	s32i.n	a10, a9, 0

	    if (prot_mode)
  90940e:	c877      	beqz.n	a7, 909419 <ath_buf_set_rate+0x199>
		    series[i].RateFlags |= HAL_RATESERIES_RTS_CTS;
  909410:	8a40      	l32i.n	a10, a4, 0
  909412:	c091      	movi.n	a9, 1
  909414:	09a902        	or	a9, a10, a9
  909417:	9940      	s32i.n	a9, a4, 0

	    if (bf->bf_rcs[i].flags & ATH_RC_DS_FLAG)
  909419:	298053        	l8ui	a9, a8, 83
  90941c:	7f9709        	bbci	a9, 31, 909429 <ath_buf_set_rate+0x1a9>
		    series[i].RateFlags |= HAL_RATESERIES_RTS_CTS;
  90941f:	8a40      	l32i.n	a10, a4, 0
  909421:	c091      	movi.n	a9, 1
  909423:	09a902        	or	a9, a10, a9
  909426:	294600        	s32i	a9, a4, 0
	    }
    }

    adf_os_mem_set(series, 0, sizeof(HAL_11N_RATE_SERIES) * 4);

    for (i = 0; i < 4; i++) {
  909429:	291217        	l32i	a9, a1, 92
  90942c:	bc88      	addi.n	a8, a8, 12
  90942e:	244c14        	addi	a4, a4, 20
  909431:	798102        	beq	a8, a9, 909437 <ath_buf_set_rate+0x1b7>
  909434:	63fef8        	j	909330 <ath_buf_set_rate+0xb0>

	    if (bf->bf_rcs[i].flags & ATH_RC_DS_FLAG)
		    series[i].RateFlags |= HAL_RATESERIES_RTS_CTS;
    }

    rtsctsrate = rt->info[cix].rateCode |
  909437:	2f1214        	l32i	a15, a1, 80
	    (bf->bf_shpream ? rt->info[cix].shortPreamble : 0);
  90943a:	233221        	l32i	a3, a3, 132

	    if (bf->bf_rcs[i].flags & ATH_RC_DS_FLAG)
		    series[i].RateFlags |= HAL_RATESERIES_RTS_CTS;
    }

    rtsctsrate = rt->info[cix].rateCode |
  90943d:	b2f2      	addi.n	a2, a15, 2
  90943f:	0c2211        	slli	a2, a2, 4
  909442:	a255      	add.n	a5, a5, a2
  909444:	2c5010        	l8ui	a12, a5, 16
  909447:	220a00        	movi	a2, 0
  90944a:	793702        	bbci	a3, 25, 909450 <ath_buf_set_rate+0x1d0>
  90944d:	225011        	l8ui	a2, a5, 17
	    (bf->bf_shpream ? rt->info[cix].shortPreamble : 0);

    ah->ah_set11nRateScenario(ds, 1,
  909450:	241215        	l32i	a4, a1, 84
  909453:	2a1216        	l32i	a10, a1, 88
  909456:	234210        	l32i	a3, a4, 64
  909459:	c0b1      	movi.n	a11, 1
  90945b:	0c2c02        	or	a12, a2, a12
  90945e:	dd10      	mov.n	a13, a1
  909460:	c0e4      	movi.n	a14, 4
  909462:	066f02        	or	a15, a6, a6
  909465:	0b3000        	callx8	a3
  909468:	d10f      	retw.n
	...

0090946c <ath_dma_map>:

	return duration;
}

static void ath_dma_map(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90946c:	6c1004        	entry	a1, 32
 * @return first buffer in queue
 */
static inline adf_nbuf_t 
adf_nbuf_queue_first(adf_nbuf_queue_t *head)
{
    return (__adf_nbuf_queue_first(head));
  90946f:	2a3c14        	addi	a10, a3, 20
  909472:	5be891        	call8	9036b8 <__adf_nbuf_queue_first>
  909475:	dca0      	mov.n	a12, a10
adf_nbuf_map(adf_os_device_t        osdev, 
             adf_os_dma_map_t       bmap, 
             adf_nbuf_t             buf, 
             adf_os_dma_dir_t       dir)
{
    return __adf_nbuf_map(osdev, bmap, buf, dir);
  909477:	8b30      	l32i.n	a11, a3, 0
  909479:	2a2246        	l32i	a10, a2, 0x118
  90947c:	c0d0      	movi.n	a13, 0
  90947e:	5be811        	call8	9034c4 <__adf_nbuf_map>
  909481:	d10f      	retw.n
	...

00909484 <ath_buf_toggle>:
}

static struct ath_tx_buf *ath_buf_toggle(struct ath_softc_tgt *sc,
				      struct ath_tx_buf *bf,
				      a_uint8_t retry)
{
  909484:	6c1004        	entry	a1, 32
  909487:	d520      	mov.n	a5, a2
	struct ath_tx_buf *tmp = NULL;
	adf_nbuf_t buf = NULL;

	adf_os_assert(sc->sc_txbuf_held != NULL);
  909489:	2222dc        	l32i	a2, a2, 0x370
  90948c:	cc21      	bnez.n	a2, 909491 <ath_buf_toggle+0xd>
  90948e:	63fffc        	j	90948e <ath_buf_toggle+0xa>

	tmp = sc->sc_txbuf_held;

	if (retry) {
  909491:	6440b7        	beqz	a4, 90954c <ath_buf_toggle+0xc8>
		ath_dma_unmap(sc, bf);
  909494:	db30      	mov.n	a11, a3
  909496:	055a02        	or	a10, a5, a5
  909499:	5bfefc        	call8	90908c <ath_dma_unmap>
		adf_nbuf_queue_init(&tmp->bf_skbhead);
  90949c:	262c14        	addi	a6, a2, 20
 * @param[in] head  buf queue head
 */
static inline void
adf_nbuf_queue_init(adf_nbuf_queue_t *head)
{
    __adf_nbuf_queue_init(head);
  90949f:	da60      	mov.n	a10, a6
  9094a1:	5be87f        	call8	9036a0 <__adf_nbuf_queue_init>
		buf = adf_nbuf_queue_remove(&bf->bf_skbhead);
  9094a4:	243c14        	addi	a4, a3, 20
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  9094a7:	da40      	mov.n	a10, a4
  9094a9:	5be7f5        	call8	903480 <__adf_nbuf_queue_remove>
  9094ac:	dba0      	mov.n	a11, a10
		adf_os_assert(buf);
  9094ae:	cca2      	bnez.n	a10, 9094b4 <ath_buf_toggle+0x30>
  9094b0:	63fffc        	j	9094b0 <ath_buf_toggle+0x2c>
  9094b3:	00da60        	excw
 * @param[in] buf   buf
 */
static inline void
adf_nbuf_queue_add(adf_nbuf_queue_t *head, adf_nbuf_t buf)
{
    __adf_nbuf_queue_add(head, buf);
  9094b6:	5be7ea        	call8	903460 <__adf_nbuf_queue_add>
 * @return length of the queue
 */
static inline a_uint32_t
adf_nbuf_queue_len(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_len(head);
  9094b9:	da40      	mov.n	a10, a4
  9094bb:	5be87d        	call8	9036b0 <__adf_nbuf_queue_len>
  9094be:	d4a0      	mov.n	a4, a10
		adf_nbuf_queue_add(&tmp->bf_skbhead, buf);

		adf_os_assert(adf_nbuf_queue_len(&bf->bf_skbhead) == 0);
  9094c0:	c8a2      	beqz.n	a10, 9094c6 <ath_buf_toggle+0x42>
  9094c2:	63fffc        	j	9094c2 <ath_buf_toggle+0x3e>
  9094c5:	00863b        	movgez	a6, a8, a0
		tmp->bf_next = bf->bf_next;
		tmp->bf_endpt = bf->bf_endpt;
		tmp->bf_tidno = bf->bf_tidno;
		tmp->bf_skb = bf->bf_skb;
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
  9094c8:	282087        	l8ui	a8, a2, 135
		adf_os_assert(buf);
		adf_nbuf_queue_add(&tmp->bf_skbhead, buf);

		adf_os_assert(adf_nbuf_queue_len(&bf->bf_skbhead) == 0);

		tmp->bf_next = bf->bf_next;
  9094cb:	962b      	s32i.n	a6, a2, 44
		tmp->bf_endpt = bf->bf_endpt;
  9094cd:	263223        	l32i	a6, a3, 140
		tmp->bf_tidno = bf->bf_tidno;
		tmp->bf_skb = bf->bf_skb;
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
  9094d0:	2b3c3c        	addi	a11, a3, 60
		adf_nbuf_queue_add(&tmp->bf_skbhead, buf);

		adf_os_assert(adf_nbuf_queue_len(&bf->bf_skbhead) == 0);

		tmp->bf_next = bf->bf_next;
		tmp->bf_endpt = bf->bf_endpt;
  9094d3:	262623        	s32i	a6, a2, 140
		tmp->bf_tidno = bf->bf_tidno;
  9094d6:	26304d        	l8ui	a6, a3, 77
		tmp->bf_skb = bf->bf_skb;
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
  9094d9:	c4cc      	movi.n	a12, 76

		adf_os_assert(adf_nbuf_queue_len(&bf->bf_skbhead) == 0);

		tmp->bf_next = bf->bf_next;
		tmp->bf_endpt = bf->bf_endpt;
		tmp->bf_tidno = bf->bf_tidno;
  9094db:	26244d        	s8i	a6, a2, 77
		tmp->bf_skb = bf->bf_skb;
  9094de:	8638      	l32i.n	a6, a3, 32
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
  9094e0:	2a2c3c        	addi	a10, a2, 60
		adf_os_assert(adf_nbuf_queue_len(&bf->bf_skbhead) == 0);

		tmp->bf_next = bf->bf_next;
		tmp->bf_endpt = bf->bf_endpt;
		tmp->bf_tidno = bf->bf_tidno;
		tmp->bf_skb = bf->bf_skb;
  9094e3:	9628      	s32i.n	a6, a2, 32
		tmp->bf_node = bf->bf_node;
  9094e5:	263204        	l32i	a6, a3, 16
  9094e8:	262604        	s32i	a6, a2, 16
		tmp->bf_isaggr = bf->bf_isaggr;
  9094eb:	293221        	l32i	a9, a3, 132
  9094ee:	26fadf        	movi	a6, -33
  9094f1:	095940        	extui	a9, a9, 5, 1
  9094f4:	0b9911        	slli	a9, a9, 5
  9094f7:	068801        	and	a8, a8, a6
  9094fa:	098802        	or	a8, a8, a9
  9094fd:	282487        	s8i	a8, a2, 135
		tmp->bf_flags = bf->bf_flags;
  909500:	283144        	l16ui	a8, a3, 136
  909503:	282544        	s16i	a8, a2, 136
		tmp->bf_state = bf->bf_state;
  909506:	5b6e6c        	call8	8e4eb8 <memcpy>
		tmp->bf_retries = bf->bf_retries;
  909509:	283086        	l8ui	a8, a3, 134
		bf->bf_comp = NULL;

		bf->bf_retries = 0;
		bf->bf_nframes = 0;

		ath_dma_map(sc, tmp);
  90950c:	da50      	mov.n	a10, a5
		tmp->bf_skb = bf->bf_skb;
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
		tmp->bf_retries = bf->bf_retries;
  90950e:	282486        	s8i	a8, a2, 134
		tmp->bf_comp = bf->bf_comp;
  909511:	883f      	l32i.n	a8, a3, 60
		bf->bf_comp = NULL;

		bf->bf_retries = 0;
		bf->bf_nframes = 0;

		ath_dma_map(sc, tmp);
  909513:	db20      	mov.n	a11, a2
		tmp->bf_node = bf->bf_node;
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
		tmp->bf_retries = bf->bf_retries;
		tmp->bf_comp = bf->bf_comp;
  909515:	982f      	s32i.n	a8, a2, 60
		tmp->bf_nframes = bf->bf_nframes;
  909517:	28304c        	l8ui	a8, a3, 76
		tmp->bf_cookie = bf->bf_cookie;

		bf->bf_isaggr = 0;
		bf->bf_next = NULL;
  90951a:	943b      	s32i.n	a4, a3, 44
		tmp->bf_isaggr = bf->bf_isaggr;
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
		tmp->bf_retries = bf->bf_retries;
		tmp->bf_comp = bf->bf_comp;
		tmp->bf_nframes = bf->bf_nframes;
  90951c:	28244c        	s8i	a8, a2, 76
		tmp->bf_cookie = bf->bf_cookie;
  90951f:	283092        	l8ui	a8, a3, 146

		bf->bf_isaggr = 0;
		bf->bf_next = NULL;
		bf->bf_skb = NULL;
  909522:	9438      	s32i.n	a4, a3, 32
		tmp->bf_flags = bf->bf_flags;
		tmp->bf_state = bf->bf_state;
		tmp->bf_retries = bf->bf_retries;
		tmp->bf_comp = bf->bf_comp;
		tmp->bf_nframes = bf->bf_nframes;
		tmp->bf_cookie = bf->bf_cookie;
  909524:	282492        	s8i	a8, a2, 146

		bf->bf_isaggr = 0;
  909527:	283087        	l8ui	a8, a3, 135
		bf->bf_next = NULL;
		bf->bf_skb = NULL;
		bf->bf_node = NULL;
  90952a:	243604        	s32i	a4, a3, 16
		tmp->bf_retries = bf->bf_retries;
		tmp->bf_comp = bf->bf_comp;
		tmp->bf_nframes = bf->bf_nframes;
		tmp->bf_cookie = bf->bf_cookie;

		bf->bf_isaggr = 0;
  90952d:	068601        	and	a6, a8, a6
  909530:	263487        	s8i	a6, a3, 135
		bf->bf_next = NULL;
		bf->bf_skb = NULL;
		bf->bf_node = NULL;
		bf->bf_flags = 0;
  909533:	243544        	s16i	a4, a3, 136
		bf->bf_comp = NULL;
  909536:	943f      	s32i.n	a4, a3, 60

		bf->bf_retries = 0;
  909538:	243486        	s8i	a4, a3, 134
		bf->bf_nframes = 0;
  90953b:	24344c        	s8i	a4, a3, 76

		ath_dma_map(sc, tmp);
  90953e:	5bffcb        	call8	90946c <ath_dma_map>
		ath_tx_tgt_setds(sc, tmp);
  909541:	da50      	mov.n	a10, a5
  909543:	022b02        	or	a11, a2, a2

		bf->bf_isaggr = 0;
		bf->bf_next = NULL;
		bf->bf_skb = NULL;
		bf->bf_node = NULL;
		bf->bf_flags = 0;
  909546:	044602        	or	a6, a4, a4

		bf->bf_retries = 0;
		bf->bf_nframes = 0;

		ath_dma_map(sc, tmp);
		ath_tx_tgt_setds(sc, tmp);
  909549:	5bff0a        	call8	909174 <ath_tx_tgt_setds>
	}

	sc->sc_txbuf_held = bf;
  90954c:	2356dc        	s32i	a3, a5, 0x370

	return tmp;
}
  90954f:	d10f      	retw.n
  909551:	000000        	ill

00909554 <ath_bar_tx>:
	ath_buf_comp(sc, bf);
}

static void ath_bar_tx(struct ath_softc_tgt *sc,
		       ath_atx_tid_t *tid, struct ath_tx_buf *bf)
{
  909554:	6c1016        	entry	a1, 176
  909557:	d730      	mov.n	a7, a3
	adf_nbuf_t skb;
	struct ieee80211_frame_bar *bar;
	u_int8_t min_rate;
	struct ath_tx_desc *ds, *ds0;
	struct ath_hal *ah = sc->sc_ah;
  909559:	232d05        	addmi	a3, a2, 0x500
  90955c:	833b      	l32i.n	a3, a3, 44
  90955e:	c5b0      	movi.n	a11, 80
  909560:	231620        	s32i	a3, a1, 128
	int i = 0;
	adf_nbuf_queue_t skbhead;
	a_uint8_t *anbdata;
	a_uint32_t anblen;

	__stats(sc, tx_bars);
  909563:	232278        	l32i	a3, a2, 0x1e0
  909566:	2a1c20        	addi	a10, a1, 32
  909569:	b133      	addi.n	a3, a3, 1
  90956b:	232678        	s32i	a3, a2, 0x1e0
  90956e:	5bff3f        	call8	90926c <__adf_os_mem_set$constprop$13>

	adf_os_mem_set(&series, 0, sizeof(series));

	ath_aggr_pause_tid(sc, tid);

	skb = adf_nbuf_queue_remove(&bf->bf_skbhead);
  909571:	254c14        	addi	a5, a4, 20
}

static inline void
ath_aggr_pause_tid(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
	tid->paused =1;
  909574:	230a01        	movi	a3, 1
  909577:	237434        	s8i	a3, a7, 52
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  90957a:	055a02        	or	a10, a5, a5
  90957d:	5be7c0        	call8	903480 <__adf_nbuf_queue_remove>
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  909580:	2c1c70        	addi	a12, a1, 112
  909583:	2b1c74        	addi	a11, a1, 116
 * @return The head buf in the buf queue.
 */
static inline adf_nbuf_t
adf_nbuf_queue_remove(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_remove(head);
  909586:	0aa302        	or	a3, a10, a10
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  909589:	5be83f        	call8	903688 <__adf_nbuf_peek_header>
 * @return none
 */
static inline void
adf_nbuf_trim_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    __adf_nbuf_trim_tail(buf, size);
  90958c:	2b121c        	l32i	a11, a1, 112
  90958f:	da30      	mov.n	a10, a3
  909591:	5be818        	call8	9035f4 <__adf_nbuf_trim_tail>
	adf_nbuf_trim_tail(skb, anblen);
	bar = (struct ieee80211_frame_bar *) anbdata;

	min_rate =  0x0b;

	ath_dma_unmap(sc, bf);
  909594:	da20      	mov.n	a10, a2
  909596:	db40      	mov.n	a11, a4
	ath_aggr_pause_tid(sc, tid);

	skb = adf_nbuf_queue_remove(&bf->bf_skbhead);
	adf_nbuf_peek_header(skb, &anbdata, &anblen);
	adf_nbuf_trim_tail(skb, anblen);
	bar = (struct ieee80211_frame_bar *) anbdata;
  909598:	26121d        	l32i	a6, a1, 116

	min_rate =  0x0b;

	ath_dma_unmap(sc, bf);
  90959b:	5bfebc        	call8	90908c <ath_dma_unmap>
 * @param[in] buf   buf
 */
static inline void
adf_nbuf_queue_add(adf_nbuf_queue_t *head, adf_nbuf_t buf)
{
    __adf_nbuf_queue_add(head, buf);
  90959e:	da50      	mov.n	a10, a5
  9095a0:	033b02        	or	a11, a3, a3
	adf_nbuf_queue_add(&bf->bf_skbhead, skb);

	bar->i_fc[1] = IEEE80211_FC1_DIR_NODS;
  9095a3:	c050      	movi.n	a5, 0
  9095a5:	5be7ae        	call8	903460 <__adf_nbuf_queue_add>
  9095a8:	256401        	s8i	a5, a6, 1
	bar->i_fc[0] = IEEE80211_FC0_VERSION_0 |
  9095ab:	25fa84        	movi	a5, -124
  9095ae:	256400        	s8i	a5, a6, 0
		IEEE80211_FC0_TYPE_CTL |
		IEEE80211_FC0_SUBTYPE_BAR;
	bar->i_ctl = tid->tidno << IEEE80211_BAR_CTL_TID_S |
  9095b1:	8970      	l32i.n	a9, a7, 0
  9095b3:	c054      	movi.n	a5, 4
  9095b5:	049911        	slli	a9, a9, 12
  9095b8:	059902        	or	a9, a9, a5
  9095bb:	09094f        	extui	a9, a9, 0, 16
  9095be:	098a14        	srli	a10, a9, 8
  9095c1:	2a6410        	s8i	a10, a6, 16
  9095c4:	296411        	s8i	a9, a6, 17
		IEEE80211_BAR_CTL_COMBA;
	bar->i_seq = adf_os_cpu_to_le16(tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT);
  9095c7:	297102        	l16ui	a9, a7, 4

	bar->i_fc[1] = IEEE80211_FC1_DIR_NODS;
	bar->i_fc[0] = IEEE80211_FC0_VERSION_0 |
		IEEE80211_FC0_TYPE_CTL |
		IEEE80211_FC0_SUBTYPE_BAR;
	bar->i_ctl = tid->tidno << IEEE80211_BAR_CTL_TID_S |
  9095ca:	c050      	movi.n	a5, 0
		IEEE80211_BAR_CTL_COMBA;
	bar->i_seq = adf_os_cpu_to_le16(tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT);
  9095cc:	0c9911        	slli	a9, a9, 4
  9095cf:	09094f        	extui	a9, a9, 0, 16

#undef adf_os_cpu_to_le16

static a_uint16_t adf_os_cpu_to_le16(a_uint16_t x)
{
	return ((((x) & 0xff00) >> 8) |   (((x) & 0x00ff) << 8));
  9095d2:	089b11        	slli	a11, a9, 8
  9095d5:	098a14        	srli	a10, a9, 8
  9095d8:	0aba02        	or	a10, a11, a10
	bar->i_fc[0] = IEEE80211_FC0_VERSION_0 |
		IEEE80211_FC0_TYPE_CTL |
		IEEE80211_FC0_SUBTYPE_BAR;
	bar->i_ctl = tid->tidno << IEEE80211_BAR_CTL_TID_S |
		IEEE80211_BAR_CTL_COMBA;
	bar->i_seq = adf_os_cpu_to_le16(tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT);
  9095db:	0a0a4f        	extui	a10, a10, 0, 16
  9095de:	0a8b14        	srli	a11, a10, 8
  9095e1:	2b6412        	s8i	a11, a6, 18
  9095e4:	2a6413        	s8i	a10, a6, 19

	bf->bf_seqno = tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT;
  9095e7:	294523        	s16i	a9, a4, 70
 *         put, or NULL if there is not enough room in this buf.
 */
static inline a_uint8_t *
adf_nbuf_put_tail(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_put_tail(buf, size);
  9095ea:	da30      	mov.n	a10, a3
  9095ec:	c1b4      	movi.n	a11, 20
  9095ee:	5be80a        	call8	903618 <__adf_nbuf_put_tail>

	adf_nbuf_put_tail(skb, sizeof(struct ieee80211_frame_bar));

	bf->bf_comp = ath_bar_tx_comp;
  9095f1:	1672c0        	l32r	a6, 8e60f4 <memset+0xf58>
	bf->bf_tidno = tid->tidno;
	bf->bf_node = &tid->an->ni;
	ath_dma_map(sc, bf);
  9095f4:	da20      	mov.n	a10, a2

	bf->bf_seqno = tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT;

	adf_nbuf_put_tail(skb, sizeof(struct ieee80211_frame_bar));

	bf->bf_comp = ath_bar_tx_comp;
  9095f6:	964f      	s32i.n	a6, a4, 60
	bf->bf_tidno = tid->tidno;
  9095f8:	8670      	l32i.n	a6, a7, 0
	bf->bf_node = &tid->an->ni;
	ath_dma_map(sc, bf);
  9095fa:	db40      	mov.n	a11, a4
	bf->bf_seqno = tid->seq_start << IEEE80211_SEQ_SEQ_SHIFT;

	adf_nbuf_put_tail(skb, sizeof(struct ieee80211_frame_bar));

	bf->bf_comp = ath_bar_tx_comp;
	bf->bf_tidno = tid->tidno;
  9095fc:	26444d        	s8i	a6, a4, 77
	bf->bf_node = &tid->an->ni;
  9095ff:	867e      	l32i.n	a6, a7, 56
  909601:	9644      	s32i.n	a6, a4, 16
	ath_dma_map(sc, bf);
  909603:	5bff9a        	call8	90946c <ath_dma_map>
 * @param[out] sg   map info
 */
static inline void
adf_nbuf_dmamap_info(adf_os_dma_map_t bmap, adf_os_dmamap_info_t *sg)
{
    __adf_nbuf_dmamap_info(bmap, sg);
  909606:	8a40      	l32i.n	a10, a4, 0
  909608:	b44b      	addi.n	a11, a4, 4
  90960a:	5be7b6        	call8	9034e4 <__adf_nbuf_dmamap_info>
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	ds = bf->bf_desc;
	ah->ah_setupTxDesc(ds
  90960d:	291220        	l32i	a9, a1, 128
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  909610:	da30      	mov.n	a10, a3
  909612:	289217        	l32i	a8, a9, 92
	bf->bf_tidno = tid->tidno;
	bf->bf_node = &tid->an->ni;
	ath_dma_map(sc, bf);
	adf_nbuf_dmamap_info(bf->bf_dmamap, &bf->bf_dmamap_info);

	ds = bf->bf_desc;
  909615:	864c      	l32i.n	a6, a4, 48
  909617:	281621        	s32i	a8, a1, 132
  90961a:	5be813        	call8	903668 <__adf_nbuf_len>
	ah->ah_setupTxDesc(ds
  90961d:	234049        	l8ui	a3, a4, 73
  909620:	c0fb      	movi.n	a15, 11
  909622:	9311      	s32i.n	a3, a1, 4
  909624:	281221        	l32i	a8, a1, 132
  909627:	c131      	movi.n	a3, 17
  909629:	b4ab      	addi.n	a11, a10, 4
  90962b:	9312      	s32i.n	a3, a1, 8
  90962d:	da60      	mov.n	a10, a6
  90962f:	9f10      	s32i.n	a15, a1, 0
  909631:	9513      	s32i.n	a5, a1, 12
  909633:	9514      	s32i.n	a5, a1, 16
  909635:	dc50      	mov.n	a12, a5
  909637:	055d02        	or	a13, a5, a5
  90963a:	2e0a3c        	movi	a14, 60
  90963d:	0b8000        	callx8	a8
			    , HAL_TXDESC_INTREQ
			    | HAL_TXDESC_CLRDMASK
			    , 0, 0);

	skbhead = bf->bf_skbhead;
	bf->bf_isaggr = 0;
  909640:	284087        	l8ui	a8, a4, 135
  909643:	23fadf        	movi	a3, -33
  909646:	038301        	and	a3, a8, a3
  909649:	234487        	s8i	a3, a4, 135
	bf->bf_next = NULL;
  90964c:	954b      	s32i.n	a5, a4, 44

	for (ds0 = ds, i=0; i < bf->bf_dmamap_info.nsegs; ds0++, i++) {
  90964e:	d360      	mov.n	a3, a6
  909650:	260a88        	movi	a6, 136
  909653:	600011        	j	909668 <ath_bar_tx+0x114>
  909656:	000000        	ill
		ah->ah_clr11nAggr(ds0);
  909659:	291220        	l32i	a9, a1, 128
  90965c:	da30      	mov.n	a10, a3
  90965e:	289214        	l32i	a8, a9, 80

	skbhead = bf->bf_skbhead;
	bf->bf_isaggr = 0;
	bf->bf_next = NULL;

	for (ds0 = ds, i=0; i < bf->bf_dmamap_info.nsegs; ds0++, i++) {
  909661:	a633      	add.n	a3, a3, a6
		ah->ah_clr11nAggr(ds0);
  909663:	0b8000        	callx8	a8

	skbhead = bf->bf_skbhead;
	bf->bf_isaggr = 0;
	bf->bf_next = NULL;

	for (ds0 = ds, i=0; i < bf->bf_dmamap_info.nsegs; ds0++, i++) {
  909666:	b155      	addi.n	a5, a5, 1
  909668:	8841      	l32i.n	a8, a4, 4
  90966a:	7853eb        	bltu	a5, a8, 909659 <ath_bar_tx+0x105>
		ah->ah_clr11nAggr(ds0);
	}

	ath_filltxdesc(sc, bf);
  90966d:	022a02        	or	a10, a2, a2
  909670:	044b02        	or	a11, a4, a4

	for (i = 0 ; i < 4; i++) {
		series[i].Tries = ATH_TXMAXTRY;
		series[i].Rate = min_rate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  909673:	232d16        	addmi	a3, a2, 0x1600

	for (ds0 = ds, i=0; i < bf->bf_dmamap_info.nsegs; ds0++, i++) {
		ah->ah_clr11nAggr(ds0);
	}

	ath_filltxdesc(sc, bf);
  909676:	5bfe95        	call8	9090cc <ath_filltxdesc>

	for (i = 0 ; i < 4; i++) {
		series[i].Tries = ATH_TXMAXTRY;
		series[i].Rate = min_rate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  909679:	283026        	l8ui	a8, a3, 38
  90967c:	251c20        	addi	a5, a1, 32

	bf->bf_comp = NULL;
	ath_buf_comp(sc, bf);
}

static void ath_bar_tx(struct ath_softc_tgt *sc,
  90967f:	261c70        	addi	a6, a1, 112
	}

	ath_filltxdesc(sc, bf);

	for (i = 0 ; i < 4; i++) {
		series[i].Tries = ATH_TXMAXTRY;
  909682:	c03b      	movi.n	a3, 11
  909684:	9350      	s32i.n	a3, a5, 0
		series[i].Rate = min_rate;
  909686:	9351      	s32i.n	a3, a5, 4
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  909688:	9853      	s32i.n	a8, a5, 12
  90968a:	255c14        	addi	a5, a5, 20
		ah->ah_clr11nAggr(ds0);
	}

	ath_filltxdesc(sc, bf);

	for (i = 0 ; i < 4; i++) {
  90968d:	7659f3        	bne	a5, a6, 909684 <ath_bar_tx+0x130>
		series[i].Tries = ATH_TXMAXTRY;
		series[i].Rate = min_rate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
	}

	ah->ah_set11nRateScenario(bf->bf_desc, 0, 0, series, 4, 4);
  909690:	251220        	l32i	a5, a1, 128
  909693:	8a4c      	l32i.n	a10, a4, 48
  909695:	c0b0      	movi.n	a11, 0
  909697:	c0e4      	movi.n	a14, 4
  909699:	235210        	l32i	a3, a5, 64
  90969c:	dcb0      	mov.n	a12, a11
  90969e:	2d1c20        	addi	a13, a1, 32
  9096a1:	dfe0      	mov.n	a15, a14
  9096a3:	0b3000        	callx8	a3
	ath_tgt_txq_add_ucast(sc, bf);
  9096a6:	da20      	mov.n	a10, a2
  9096a8:	db40      	mov.n	a11, a4
  9096aa:	5bfe26        	call8	908f44 <ath_tgt_txq_add_ucast>
  9096ad:	d10f      	retw.n
	...

009096b0 <ath_buf_comp>:
		ath_free_tx_skb(sc->tgt_htc_handle,endpt,tskb);
	}
}

static void ath_buf_comp(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  9096b0:	6c1004        	entry	a1, 32
	ath_dma_unmap(sc, bf);
  9096b3:	022a02        	or	a10, a2, a2
  9096b6:	033b02        	or	a11, a3, a3
  9096b9:	5bfe74        	call8	90908c <ath_dma_unmap>
	ath_tgt_skb_free(sc, &bf->bf_skbhead,bf->bf_endpt);
  9096bc:	2c3223        	l32i	a12, a3, 140
  9096bf:	022a02        	or	a10, a2, a2
  9096c2:	2b3c14        	addi	a11, a3, 20
  9096c5:	5bfe77        	call8	9090a4 <ath_tgt_skb_free>
	bf->bf_skb = NULL;
  9096c8:	c090      	movi.n	a9, 0
				      a_uint8_t retry)
{
	struct ath_tx_buf *tmp = NULL;
	adf_nbuf_t buf = NULL;

	adf_os_assert(sc->sc_txbuf_held != NULL);
  9096ca:	2822dc        	l32i	a8, a2, 0x370

static void ath_buf_comp(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	ath_dma_unmap(sc, bf);
	ath_tgt_skb_free(sc, &bf->bf_skbhead,bf->bf_endpt);
	bf->bf_skb = NULL;
  9096cd:	9938      	s32i.n	a9, a3, 32
	bf->bf_node = NULL;
  9096cf:	9934      	s32i.n	a9, a3, 16
				      a_uint8_t retry)
{
	struct ath_tx_buf *tmp = NULL;
	adf_nbuf_t buf = NULL;

	adf_os_assert(sc->sc_txbuf_held != NULL);
  9096d1:	798903        	bne	a8, a9, 9096d8 <ath_buf_comp+0x28>
  9096d4:	63fffc        	j	9096d4 <ath_buf_comp+0x24>
  9096d7:	002326        	excw

		ath_dma_map(sc, tmp);
		ath_tx_tgt_setds(sc, tmp);
	}

	sc->sc_txbuf_held = bf;
  9096da:	dc23      	excw
	ath_tgt_skb_free(sc, &bf->bf_skbhead,bf->bf_endpt);
	bf->bf_skb = NULL;
	bf->bf_node = NULL;
	bf = ath_buf_toggle(sc, bf, 0);
	if (bf != NULL) {
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
  9096dc:	22f199        	l16ui	a2, a15, 0x132
  9096df:	8993      	l32i.n	a9, a9, 12
  9096e1:	8a98      	l32i.n	a10, a9, 32
  9096e3:	30288c        	excw
  9096e6:	242826        	excw
  9096e9:	f1          	.byte 0xf1
  9096ea:	d10f      	retw.n

009096ec <ath_tx_freebuf>:
	bf->bf_txq_add(sc, bf);
}

static void
ath_tx_freebuf(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  9096ec:	6c1004        	entry	a1, 32
	a_int32_t i ;
	struct ath_tx_desc *bfd = NULL;
	struct ath_hal *ah = sc->sc_ah;
  9096ef:	242d05        	addmi	a4, a2, 0x500
  9096f2:	864b      	l32i.n	a6, a4, 44

	for (bfd = bf->bf_desc, i = 0; i < bf->bf_dmamap_info.nsegs; bfd++, i++) {
  9096f4:	c050      	movi.n	a5, 0
  9096f6:	843c      	l32i.n	a4, a3, 48
  9096f8:	270a88        	movi	a7, 136
  9096fb:	600023        	j	909722 <ath_tx_freebuf+0x36>
  9096fe:	000028        	mull	a0, a0, a0
		ah->ah_clr11nAggr(bfd);
  909701:	6214da        	j	8eabdf <memset+0x5a43>
  909704:	400b80        	excw
  909707:	002862        	excw
		ah->ah_set11nBurstDuration(bfd, 0);
  90970a:	15044a        	l32r	a5, 8ca834 <_bss_end+0x3bd02c>
  90970d:	022b0a        	addx4	a11, a2, a2
  909710:	000b80        	excw
  909713:	002862        	excw
		ah->ah_set11nVirtualMoreFrag(bfd, 0);
  909716:	16da40        	l32r	a6, 900018 <memset+0x1ae7c>
  909719:	c0b0      	movi.n	a11, 0
  90971b:	0b8000        	callx8	a8
{
	a_int32_t i ;
	struct ath_tx_desc *bfd = NULL;
	struct ath_hal *ah = sc->sc_ah;

	for (bfd = bf->bf_desc, i = 0; i < bf->bf_dmamap_info.nsegs; bfd++, i++) {
  90971e:	a744      	add.n	a4, a4, a7
  909720:	b155      	addi.n	a5, a5, 1
  909722:	8831      	l32i.n	a8, a3, 4
  909724:	7853d8        	bltu	a5, a8, 909700 <ath_tx_freebuf+0x14>
		ah->ah_clr11nAggr(bfd);
		ah->ah_set11nBurstDuration(bfd, 0);
		ah->ah_set11nVirtualMoreFrag(bfd, 0);
	}

	ath_dma_unmap(sc, bf);
  909727:	022a02        	or	a10, a2, a2
  90972a:	033b02        	or	a11, a3, a3
  90972d:	5bfe57        	call8	90908c <ath_dma_unmap>

	ath_tgt_skb_free(sc, &bf->bf_skbhead,bf->bf_endpt);
  909730:	2c3223        	l32i	a12, a3, 140
  909733:	022a02        	or	a10, a2, a2
  909736:	2b3c14        	addi	a11, a3, 20
  909739:	5bfe5a        	call8	9090a4 <ath_tgt_skb_free>

	bf->bf_skb = NULL;
  90973c:	c090      	movi.n	a9, 0
				      a_uint8_t retry)
{
	struct ath_tx_buf *tmp = NULL;
	adf_nbuf_t buf = NULL;

	adf_os_assert(sc->sc_txbuf_held != NULL);
  90973e:	2822dc        	l32i	a8, a2, 0x370

	ath_dma_unmap(sc, bf);

	ath_tgt_skb_free(sc, &bf->bf_skbhead,bf->bf_endpt);

	bf->bf_skb = NULL;
  909741:	9938      	s32i.n	a9, a3, 32
	bf->bf_comp = NULL;
  909743:	993f      	s32i.n	a9, a3, 60
	bf->bf_node = NULL;
  909745:	9934      	s32i.n	a9, a3, 16
	bf->bf_next = NULL;
  909747:	993b      	s32i.n	a9, a3, 44
				      a_uint8_t retry)
{
	struct ath_tx_buf *tmp = NULL;
	adf_nbuf_t buf = NULL;

	adf_os_assert(sc->sc_txbuf_held != NULL);
  909749:	798903        	bne	a8, a9, 909750 <ath_tx_freebuf+0x64>
  90974c:	63fffc        	j	90974c <ath_tx_freebuf+0x60>
  90974f:	002326        	excw

		ath_dma_map(sc, tmp);
		ath_tx_tgt_setds(sc, tmp);
	}

	sc->sc_txbuf_held = bf;
  909752:	dc24      	excw
	bf->bf_comp = NULL;
	bf->bf_node = NULL;
	bf->bf_next = NULL;
	bf = ath_buf_toggle(sc, bf, 0);
	bf->bf_retries = 0;
	bf->bf_isretried = 0;
  909754:	8087      	l32i.n	a0, a8, 28
  909756:	c63f      	movi.n	a3, -17
  909758:	034301        	and	a3, a4, a3
	bf->bf_skb = NULL;
	bf->bf_comp = NULL;
	bf->bf_node = NULL;
	bf->bf_next = NULL;
	bf = ath_buf_toggle(sc, bf, 0);
	bf->bf_retries = 0;
  90975b:	298486        	s8i	a9, a8, 134
	bf->bf_isretried = 0;
  90975e:	238487        	s8i	a3, a8, 135

	if (bf != NULL)
		asf_tailq_insert_tail(&sc->sc_txbuf, bf, bf_list);
  909761:	2322f1        	l32i	a3, a2, 0x3c4
  909764:	9989      	s32i.n	a9, a8, 36
  909766:	938a      	s32i.n	a3, a8, 40
  909768:	9830      	s32i.n	a8, a3, 0
  90976a:	288c24        	addi	a8, a8, 36
  90976d:	2826f1        	s32i	a8, a2, 0x3c4
  909770:	d10f      	retw.n
	...

00909774 <ATH_SKB_2_WH>:
int ath_tgt_tx_add_to_aggr(struct ath_softc_tgt *sc,
			   struct ath_buf *bf,int datatype,
			   ath_atx_tid_t *tid, int is_burst);

struct ieee80211_frame *ATH_SKB_2_WH(adf_nbuf_t skb)
{
  909774:	6c1006        	entry	a1, 48
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  909777:	da20      	mov.n	a10, a2
  909779:	b41b      	addi.n	a11, a1, 4
  90977b:	dc10      	mov.n	a12, a1
  90977d:	5be7c2        	call8	903688 <__adf_nbuf_peek_header>
	a_uint32_t anblen;

	adf_nbuf_peek_header(skb, &anbdata, &anblen);

	return((struct ieee80211_frame *)anbdata);
}
  909780:	8211      	l32i.n	a2, a1, 4
  909782:	d10f      	retw.n

00909784 <ath_tx_set_retry>:
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
	}
}

static void ath_tx_set_retry(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  909784:	6c1004        	entry	a1, 32
	struct ieee80211_frame *wh;

	__stats(sc, txaggr_retries);
  909787:	282260        	l32i	a8, a2, 0x180

	bf->bf_isretried = 1;
	bf->bf_retries ++;
	wh = ATH_SKB_2_WH(bf->bf_skb);
  90978a:	8a38      	l32i.n	a10, a3, 32

static void ath_tx_set_retry(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ieee80211_frame *wh;

	__stats(sc, txaggr_retries);
  90978c:	b188      	addi.n	a8, a8, 1
  90978e:	282660        	s32i	a8, a2, 0x180

	bf->bf_isretried = 1;
  909791:	283087        	l8ui	a8, a3, 135
  909794:	c120      	movi.n	a2, 16
  909796:	028202        	or	a2, a8, a2
  909799:	223487        	s8i	a2, a3, 135
	bf->bf_retries ++;
  90979c:	223086        	l8ui	a2, a3, 134
  90979f:	222c01        	addi	a2, a2, 1
  9097a2:	223486        	s8i	a2, a3, 134
	wh = ATH_SKB_2_WH(bf->bf_skb);
  9097a5:	5bfff3        	call8	909774 <ATH_SKB_2_WH>
	wh->i_fc[1] |= IEEE80211_FC1_RETRY;
  9097a8:	23a001        	l8ui	a3, a10, 1
  9097ab:	c028      	movi.n	a2, 8
  9097ad:	023202        	or	a2, a3, a2
  9097b0:	22a401        	s8i	a2, a10, 1
  9097b3:	d10f      	retw.n
  9097b5:	000000        	ill

009097b8 <owl_tgt_node_init>:
		ath_aggr_resume_tid(sc, tid);
	}
}

void owl_tgt_node_init(struct ath_node_target * an)
{
  9097b8:	6c1004        	entry	a1, 32
	struct ath_atx_tid *tid;
	int tidno;

	for (tidno = 0, tid = &an->tid[tidno]; tidno < WME_NUM_TID;tidno++, tid++) {
  9097bb:	232c24        	addi	a3, a2, 36
  9097be:	240a00        	movi	a4, 0
		tid->tidno = tidno;
		tid->an = an;

		if ( tid->flag & TID_CLEANUP_INPROGRES ) {
			tid->flag |= TID_REINITIALIZE;
  9097c1:	250a04        	movi	a5, 4

	for (tidno = 0, tid = &an->tid[tidno]; tidno < WME_NUM_TID;tidno++, tid++) {
		tid->tidno = tidno;
		tid->an = an;

		if ( tid->flag & TID_CLEANUP_INPROGRES ) {
  9097c4:	283036        	l8ui	a8, a3, 54
{
	struct ath_atx_tid *tid;
	int tidno;

	for (tidno = 0, tid = &an->tid[tidno]; tidno < WME_NUM_TID;tidno++, tid++) {
		tid->tidno = tidno;
  9097c7:	9430      	s32i.n	a4, a3, 0
		tid->an = an;
  9097c9:	923e      	s32i.n	a2, a3, 56

		if ( tid->flag & TID_CLEANUP_INPROGRES ) {
  9097cb:	7f871d        	bbci	a8, 31, 9097ec <owl_tgt_node_init+0x34>
			tid->flag |= TID_REINITIALIZE;
  9097ce:	058802        	or	a8, a8, a5
  9097d1:	283436        	s8i	a8, a3, 54
			adf_os_print("tid[%p]->incomp is not 0: %d\n",
  9097d4:	187182        	l32r	a8, 8e5ddc <memset+0xc40>
  9097d7:	2c3037        	l8ui	a12, a3, 55
  9097da:	288212        	l32i	a8, a8, 72
  9097dd:	1a72c1        	l32r	a10, 8e62e4 <memset+0x1148>
  9097e0:	db30      	mov.n	a11, a3
  9097e2:	00cc32        	sext	a12, a12, 7
  9097e5:	0b8000        	callx8	a8
  9097e8:	600005        	j	9097f1 <owl_tgt_node_init+0x39>
  9097eb:	00da30        	excw
				     tid, tid->incomp);
		} else {
			owl_tgt_tid_init(tid);
  9097ee:	5bfdc2        	call8	908ef8 <owl_tgt_tid_init>
void owl_tgt_node_init(struct ath_node_target * an)
{
	struct ath_atx_tid *tid;
	int tidno;

	for (tidno = 0, tid = &an->tid[tidno]; tidno < WME_NUM_TID;tidno++, tid++) {
  9097f1:	b144      	addi.n	a4, a4, 1
  9097f3:	233c3c        	addi	a3, a3, 60
  9097f6:	6948ca        	bnei	a4, 8, 9097c4 <owl_tgt_node_init+0xc>
				     tid, tid->incomp);
		} else {
			owl_tgt_tid_init(tid);
		}
	}
}
  9097f9:	d10f      	retw.n
	...

009097fc <ath_tx_status_clear>:

void ath_tx_status_clear(struct ath_softc_tgt *sc)
{
  9097fc:	6c1004        	entry	a1, 32
	int i;

	for (i = 0; i < 2; i++) {
		sc->tx_status[i].cnt = 0;
  9097ff:	222d16        	addmi	a2, a2, 0x1600
  909802:	c080      	movi.n	a8, 0
  909804:	282438        	s8i	a8, a2, 56
  909807:	28245d        	s8i	a8, a2, 93
  90980a:	d10f      	retw.n

0090980c <ath_tx_status_update>:

	return txs;
}

void ath_tx_status_update(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90980c:	6c1004        	entry	a1, 32
	struct ath_tx_desc *ds = bf->bf_lastds;
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  90980f:	282249        	l32i	a8, a2, 0x124
  909812:	147248        	l32r	a4, 8e6134 <memset+0xf98>

	return txs;
}

void ath_tx_status_update(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  909815:	da20      	mov.n	a10, a2
	struct ath_tx_desc *ds = bf->bf_lastds;
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  909817:	048401        	and	a4, a8, a4
	return txs;
}

void ath_tx_status_update(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds = bf->bf_lastds;
  90981a:	8c3e      	l32i.n	a12, a3, 56
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  90981c:	654075        	bnez	a4, 909895 <ath_tx_status_update+0x89>
{
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
  90981f:	292d16        	addmi	a9, a2, 0x1600
  909822:	2b9038        	l8ui	a11, a9, 56
  909825:	280a0b        	movi	a8, 11
  909828:	7b8b08        	bgeu	a8, a11, 909834 <ath_tx_status_update+0x28>
  90982b:	24905d        	l8ui	a4, a9, 93
  90982e:	748363        	bltu	a8, a4, 909895 <ath_tx_status_update+0x89>
static WMI_TXSTATUS_EVENT *ath_tx_status_get(struct ath_softc_tgt *sc)
{
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
  909831:	240a01        	movi	a4, 1
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  909834:	04480b        	addx8	a8, a4, a4
  909837:	04840a        	addx4	a4, a8, a4
  90983a:	1872c2        	l32r	a8, 8e6344 <memset+0x11a8>

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  90983d:	2b3092        	l8ui	a11, a3, 146
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  909840:	a844      	add.n	a4, a4, a8
  909842:	a4a4      	add.n	a4, a10, a4

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  909844:	284008        	l8ui	a8, a4, 8
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  909847:	b84d      	addi.n	a13, a4, 8

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  909849:	088909        	addx2	a9, a8, a8
  90984c:	a9d9      	add.n	a9, a13, a9
  90984e:	2b9401        	s8i	a11, a9, 1
	txs->txstatus[txs->cnt].ts_rate = SM(bf->bf_endpt, ATH9K_HTC_TXSTAT_EPID);
  909851:	2b3223        	l32i	a11, a3, 140
  909854:	0cbb11        	slli	a11, a11, 4
  909857:	2b9402        	s8i	a11, a9, 2

	if (ds->ds_txstat.ts_status & HAL_TXERR_FILT)
  90985a:	2ec066        	l8ui	a14, a12, 102
  90985d:	2b0a02        	movi	a11, 2
  909860:	7be008        	bnone	a14, a11, 90986c <ath_tx_status_update+0x60>
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_FILT;
  909863:	2e9003        	l8ui	a14, a9, 3
  909866:	0beb02        	or	a11, a14, a11
  909869:	2b9403        	s8i	a11, a9, 3

	if (!(ds->ds_txstat.ts_status & HAL_TXERR_XRETRY) &&
  90986c:	2bc066        	l8ui	a11, a12, 102
  90986f:	c197      	movi.n	a9, 23
  909871:	79b80f        	bany	a11, a9, 909884 <ath_tx_status_update+0x78>
	    !(ds->ds_txstat.ts_status & HAL_TXERR_FIFO) &&
	    !(ds->ds_txstat.ts_status & HAL_TXERR_TIMER_EXPIRED) &&
	    !(ds->ds_txstat.ts_status & HAL_TXERR_FILT))
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_ACK;
  909874:	088809        	addx2	a8, a8, a8
  909877:	a8d8      	add.n	a8, a13, a8
  909879:	2b8003        	l8ui	a11, a8, 3
  90987c:	c091      	movi.n	a9, 1
  90987e:	09b902        	or	a9, a11, a9
  909881:	298403        	s8i	a9, a8, 3

	ath_tx_status_update_rate(sc, bf->bf_rcs, ds->ds_txstat.ts_rate, txs);
  909884:	2cc068        	l8ui	a12, a12, 104
  909887:	2b3c50        	addi	a11, a3, 80
  90988a:	5bfd24        	call8	908d1c <ath_tx_status_update_rate>

	txs->cnt++;
  90988d:	234008        	l8ui	a3, a4, 8
  909890:	b133      	addi.n	a3, a3, 1
  909892:	234408        	s8i	a3, a4, 8
  909895:	d10f      	retw.n
	...

00909898 <ath_tx_status_update_aggr>:
}

void ath_tx_status_update_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
			       struct ath_tx_desc *ds, struct ath_rc_series rcs[],
			       int txok)
{
  909898:	6c1004        	entry	a1, 32
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  90989b:	282249        	l32i	a8, a2, 0x124
  90989e:	177248        	l32r	a7, 8e61c0 <memset+0x1024>
}

void ath_tx_status_update_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
			       struct ath_tx_desc *ds, struct ath_rc_series rcs[],
			       int txok)
{
  9098a1:	da20      	mov.n	a10, a2
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  9098a3:	078701        	and	a7, a8, a7
}

void ath_tx_status_update_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
			       struct ath_tx_desc *ds, struct ath_rc_series rcs[],
			       int txok)
{
  9098a6:	db50      	mov.n	a11, a5
	WMI_TXSTATUS_EVENT *txs;

	if (sc->sc_tx_draining)
  9098a8:	657058        	bnez	a7, 909904 <ath_tx_status_update_aggr+0x6c>
{
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
  9098ab:	292d16        	addmi	a9, a2, 0x1600
  9098ae:	2c9038        	l8ui	a12, a9, 56
  9098b1:	280a0b        	movi	a8, 11
  9098b4:	7c8b08        	bgeu	a8, a12, 9098c0 <ath_tx_status_update_aggr+0x28>
  9098b7:	27905d        	l8ui	a7, a9, 93
  9098ba:	778346        	bltu	a8, a7, 909904 <ath_tx_status_update_aggr+0x6c>
static WMI_TXSTATUS_EVENT *ath_tx_status_get(struct ath_softc_tgt *sc)
{
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
  9098bd:	270a01        	movi	a7, 1
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  9098c0:	07780b        	addx8	a8, a7, a7
  9098c3:	07870a        	addx4	a7, a8, a7
  9098c6:	1872c2        	l32r	a8, 8e63d0 <memset+0x1234>

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  9098c9:	293092        	l8ui	a9, a3, 146
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  9098cc:	a877      	add.n	a7, a7, a8
  9098ce:	a7a7      	add.n	a7, a10, a7

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  9098d0:	287008        	l8ui	a8, a7, 8
	WMI_TXSTATUS_EVENT *txs = NULL;
	int i;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt < HTC_MAX_TX_STATUS) {
			txs = &sc->tx_status[i];
  9098d3:	b87d      	addi.n	a13, a7, 8

	txs = ath_tx_status_get(sc);
	if (txs == NULL)
		return;

	txs->txstatus[txs->cnt].cookie = bf->bf_cookie;
  9098d5:	088809        	addx2	a8, a8, a8
  9098d8:	a8d8      	add.n	a8, a13, a8
  9098da:	298401        	s8i	a9, a8, 1
	txs->txstatus[txs->cnt].ts_rate = SM(bf->bf_endpt, ATH9K_HTC_TXSTAT_EPID);
  9098dd:	233223        	l32i	a3, a3, 140
  9098e0:	0c3311        	slli	a3, a3, 4
  9098e3:	238402        	s8i	a3, a8, 2

	if (txok)
  9098e6:	c86a      	beqz.n	a6, 9098f4 <ath_tx_status_update_aggr+0x5c>
		txs->txstatus[txs->cnt].ts_flags |= ATH9K_HTC_TXSTAT_ACK;
  9098e8:	298003        	l8ui	a9, a8, 3
  9098eb:	230a01        	movi	a3, 1
  9098ee:	039302        	or	a3, a9, a3
  9098f1:	238403        	s8i	a3, a8, 3

	if (rcs)
  9098f4:	c8b4      	beqz.n	a11, 9098fc <ath_tx_status_update_aggr+0x64>
		ath_tx_status_update_rate(sc, rcs, ds->ds_txstat.ts_rate, txs);
  9098f6:	2c4068        	l8ui	a12, a4, 104
  9098f9:	5bfd08        	call8	908d1c <ath_tx_status_update_rate>

	txs->cnt++;
  9098fc:	237008        	l8ui	a3, a7, 8
  9098ff:	b133      	addi.n	a3, a3, 1
  909901:	237408        	s8i	a3, a7, 8
  909904:	d10f      	retw.n
	...

00909908 <ath_tx_retry_subframe>:
}

static void
ath_tx_retry_subframe(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
		      ath_tx_bufhead *bf_q, struct ath_tx_buf **bar)
{
  909908:	6c1006        	entry	a1, 48
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
	int i = 0;

	__stats(sc, txaggr_compretries);
  90990b:	262263        	l32i	a6, a2, 0x18c
}

static void
ath_tx_retry_subframe(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
		      ath_tx_bufhead *bf_q, struct ath_tx_buf **bar)
{
  90990e:	d850      	mov.n	a8, a5
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
	int i = 0;

	__stats(sc, txaggr_compretries);
  909910:	b166      	addi.n	a6, a6, 1
{

	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
  909912:	252d05        	addmi	a5, a2, 0x500
static void
ath_tx_retry_subframe(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
		      ath_tx_bufhead *bf_q, struct ath_tx_buf **bar)
{

	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  909915:	8c34      	l32i.n	a12, a3, 16
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  909917:	29304d        	l8ui	a9, a3, 77
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
  90991a:	855b      	l32i.n	a5, a5, 44
	int i = 0;

	__stats(sc, txaggr_compretries);
  90991c:	262663        	s32i	a6, a2, 0x18c

	for(ds = bf->bf_desc, i = 0; i < bf->bf_dmamap_info.nsegs; ds++, i++) {
  90991f:	c070      	movi.n	a7, 0
  909921:	863c      	l32i.n	a6, a3, 48
  909923:	2d0a88        	movi	a13, 136
  909926:	600030        	j	90995a <ath_tx_retry_subframe+0x52>
		ah->ah_clr11nAggr(ds);
  909929:	2b5214        	l32i	a11, a5, 80
  90992c:	da60      	mov.n	a10, a6
  90992e:	9813      	s32i.n	a8, a1, 12
  909930:	9911      	s32i.n	a9, a1, 4
  909932:	9c10      	s32i.n	a12, a1, 0
  909934:	9d12      	s32i.n	a13, a1, 8
  909936:	0bb000        	callx8	a11
		ah->ah_set11nBurstDuration(ds, 0);
  909939:	2e5215        	l32i	a14, a5, 84
  90993c:	066a02        	or	a10, a6, a6
  90993f:	c0b0      	movi.n	a11, 0
  909941:	0be000        	callx8	a14
		ah->ah_set11nVirtualMoreFrag(ds, 0);
  909944:	2e5216        	l32i	a14, a5, 88
  909947:	da60      	mov.n	a10, a6
  909949:	c0b0      	movi.n	a11, 0
  90994b:	0be000        	callx8	a14
	struct ath_hal *ah = sc->sc_ah;
	int i = 0;

	__stats(sc, txaggr_compretries);

	for(ds = bf->bf_desc, i = 0; i < bf->bf_dmamap_info.nsegs; ds++, i++) {
  90994e:	8d12      	l32i.n	a13, a1, 8
  909950:	8c10      	l32i.n	a12, a1, 0
  909952:	8911      	l32i.n	a9, a1, 4
  909954:	8813      	l32i.n	a8, a1, 12
  909956:	ad66      	add.n	a6, a6, a13
  909958:	b177      	addi.n	a7, a7, 1
  90995a:	8b31      	l32i.n	a11, a3, 4
  90995c:	7b73c9        	bltu	a7, a11, 909929 <ath_tx_retry_subframe+0x21>
		ah->ah_clr11nAggr(ds);
		ah->ah_set11nBurstDuration(ds, 0);
		ah->ah_set11nVirtualMoreFrag(ds, 0);
	}

	if (bf->bf_retries >= OWLMAX_RETRIES) {
  90995f:	253086        	l8ui	a5, a3, 134
  909962:	c069      	movi.n	a6, 9
  909964:	756b40        	bgeu	a6, a5, 9099a8 <ath_tx_retry_subframe+0xa0>
		__stats(sc, txaggr_xretries);
  909967:	242274        	l32i	a4, a2, 0x1d0
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90996a:	2b3123        	l16ui	a11, a3, 70
		ah->ah_set11nBurstDuration(ds, 0);
		ah->ah_set11nVirtualMoreFrag(ds, 0);
	}

	if (bf->bf_retries >= OWLMAX_RETRIES) {
		__stats(sc, txaggr_xretries);
  90996d:	b144      	addi.n	a4, a4, 1
  90996f:	242674        	s32i	a4, a2, 0x1d0
ath_tx_retry_subframe(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
		      ath_tx_bufhead *bf_q, struct ath_tx_buf **bar)
{

	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  909972:	0c9411        	slli	a4, a9, 4
  909975:	09490c        	sub	a9, a4, a9
  909978:	0c9a0a        	addx4	a10, a9, a12
		ah->ah_set11nVirtualMoreFrag(ds, 0);
	}

	if (bf->bf_retries >= OWLMAX_RETRIES) {
		__stats(sc, txaggr_xretries);
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90997b:	2aac24        	addi	a10, a10, 36
  90997e:	0b4b14        	srli	a11, a11, 4
  909981:	9813      	s32i.n	a8, a1, 12
  909983:	5bfdaa        	call8	90902c <ath_tx_update_baw>
		ath_tx_status_update_aggr(sc, bf, bf->bf_lastds, NULL, 0);
  909986:	c0d0      	movi.n	a13, 0
  909988:	8c3e      	l32i.n	a12, a3, 56
  90998a:	da20      	mov.n	a10, a2
  90998c:	db30      	mov.n	a11, a3
  90998e:	0dde02        	or	a14, a13, a13
  909991:	5bffc1        	call8	909898 <ath_tx_status_update_aggr>

		if (!*bar)
  909994:	8813      	l32i.n	a8, a1, 12
  909996:	8480      	l32i.n	a4, a8, 0
  909998:	cc42      	bnez.n	a4, 90999e <ath_tx_retry_subframe+0x96>
			*bar = bf;
  90999a:	9380      	s32i.n	a3, a8, 0
  90999c:	d10f      	retw.n
		else
			ath_tx_freebuf(sc, bf);
  90999e:	da20      	mov.n	a10, a2
  9099a0:	db30      	mov.n	a11, a3
  9099a2:	5bff52        	call8	9096ec <ath_tx_freebuf>
  9099a5:	d10f      	retw.n
  9099a7:	00853b        	movgez	a5, a8, a0
		return;
	}

	if (!bf->bf_next) {
  9099aa:	cd54      	bnez.n	a5, 9099c2 <ath_tx_retry_subframe+0xba>
		__stats(sc, txaggr_errlast);
  9099ac:	252267        	l32i	a5, a2, 0x19c
		bf = ath_buf_toggle(sc, bf, 1);
  9099af:	db30      	mov.n	a11, a3
			ath_tx_freebuf(sc, bf);
		return;
	}

	if (!bf->bf_next) {
		__stats(sc, txaggr_errlast);
  9099b1:	b155      	addi.n	a5, a5, 1
  9099b3:	252667        	s32i	a5, a2, 0x19c
		bf = ath_buf_toggle(sc, bf, 1);
  9099b6:	da20      	mov.n	a10, a2
  9099b8:	c0c1      	movi.n	a12, 1
  9099ba:	5bfeb2        	call8	909484 <ath_buf_toggle>
  9099bd:	d3a0      	mov.n	a3, a10
  9099bf:	60000d        	j	9099d0 <ath_tx_retry_subframe+0xc8>
	} else
		bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs - 1]);
  9099c2:	b0b5      	addi.n	a5, a11, -1
  9099c4:	0c5611        	slli	a6, a5, 4
  9099c7:	a565      	add.n	a5, a6, a5
  9099c9:	863d      	l32i.n	a6, a3, 52
  9099cb:	06550b        	addx8	a5, a5, a6
  9099ce:	953e      	s32i.n	a5, a3, 56

	ath_tx_set_retry(sc, bf);
  9099d0:	da20      	mov.n	a10, a2
  9099d2:	db30      	mov.n	a11, a3
	asf_tailq_insert_tail(bf_q, bf, bf_list);
  9099d4:	c020      	movi.n	a2, 0
		__stats(sc, txaggr_errlast);
		bf = ath_buf_toggle(sc, bf, 1);
	} else
		bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs - 1]);

	ath_tx_set_retry(sc, bf);
  9099d6:	5bff6b        	call8	909784 <ath_tx_set_retry>
	asf_tailq_insert_tail(bf_q, bf, bf_list);
  9099d9:	9239      	s32i.n	a2, a3, 36
  9099db:	8241      	l32i.n	a2, a4, 4
  9099dd:	923a      	s32i.n	a2, a3, 40
  9099df:	9320      	s32i.n	a3, a2, 0
  9099e1:	233c24        	addi	a3, a3, 36
  9099e4:	9341      	s32i.n	a3, a4, 4
  9099e6:	d10f      	retw.n

009099e8 <ath_tx_comp_aggr_error>:
}

static void
ath_tx_comp_aggr_error(struct ath_softc_tgt *sc, struct ath_tx_buf *bf,
		       ath_atx_tid_t *tid)
{
  9099e8:	6c1020        	entry	a1, 0x100


	struct ath_tx_desc lastds;
	struct ath_tx_desc *ds = &lastds;
	struct ath_rc_series rcs[4];
	struct ath_tx_buf *bar = NULL;
  9099eb:	c060      	movi.n	a6, 0
  9099ed:	261630        	s32i	a6, a1, 192
	struct ath_tx_buf *bf_next;
	int nframes = bf->bf_nframes;
	ath_tx_bufhead bf_q;
	struct ath_txq *txq;

	asf_tailq_init(&bf_q);
  9099f0:	26162e        	s32i	a6, a1, 184
 * @param[in] size    buffer size
 */
static inline void
adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    __adf_os_mem_copy(dst, src, size);
  9099f3:	8b3e      	l32i.n	a11, a3, 56
  9099f5:	260ab8        	movi	a6, 184
  9099f8:	a616      	add.n	a6, a1, a6
  9099fa:	011a02        	or	a10, a1, a1
  9099fd:	2c0a88        	movi	a12, 136
	struct ath_tx_desc lastds;
	struct ath_tx_desc *ds = &lastds;
	struct ath_rc_series rcs[4];
	struct ath_tx_buf *bar = NULL;
	struct ath_tx_buf *bf_next;
	int nframes = bf->bf_nframes;
  909a00:	25304c        	l8ui	a5, a3, 76
	ath_tx_bufhead bf_q;
	struct ath_txq *txq;

	asf_tailq_init(&bf_q);
  909a03:	26162f        	s32i	a6, a1, 188
	txq = bf->bf_txq;
  909a06:	273220        	l32i	a7, a3, 128
  909a09:	5bfd22        	call8	908e94 <__adf_os_mem_copy>
  909a0c:	2a0a88        	movi	a10, 136
  909a0f:	aa1a      	add.n	a10, a1, a10
  909a11:	2b3c50        	addi	a11, a3, 80
  909a14:	2c0a30        	movi	a12, 48
  909a17:	5bfd1f        	call8	908e94 <__adf_os_mem_copy>
	adf_os_mem_copy(ds, bf->bf_lastds, sizeof (struct ath_tx_desc));
	adf_os_mem_copy(rcs, bf->bf_rcs, sizeof(rcs));

	while (bf) {
		bf_next = bf->bf_next;
		ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
  909a1a:	066802        	or	a8, a6, a6
  909a1d:	2d0ac0        	movi	a13, 192

	adf_os_mem_copy(ds, bf->bf_lastds, sizeof (struct ath_tx_desc));
	adf_os_mem_copy(rcs, bf->bf_rcs, sizeof(rcs));

	while (bf) {
		bf_next = bf->bf_next;
  909a20:	863b      	l32i.n	a6, a3, 44
		ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
  909a22:	db30      	mov.n	a11, a3
  909a24:	dc80      	mov.n	a12, a8
  909a26:	022a02        	or	a10, a2, a2
  909a29:	a1dd      	add.n	a13, a13, a1
  909a2b:	281634        	s32i	a8, a1, 208
  909a2e:	5bffb6        	call8	909908 <ath_tx_retry_subframe>
		bf = bf_next;
  909a31:	d360      	mov.n	a3, a6
	txq = bf->bf_txq;

	adf_os_mem_copy(ds, bf->bf_lastds, sizeof (struct ath_tx_desc));
	adf_os_mem_copy(rcs, bf->bf_rcs, sizeof(rcs));

	while (bf) {
  909a33:	281234        	l32i	a8, a1, 208
  909a36:	656fe3        	bnez	a6, 909a1d <ath_tx_comp_aggr_error+0x35>
		bf_next = bf->bf_next;
		ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
		bf = bf_next;
	}

	ath_update_aggr_stats(sc, ds, nframes, nframes);
  909a39:	022a02        	or	a10, a2, a2
  909a3c:	011b02        	or	a11, a1, a1
  909a3f:	5bfdea        	call8	9091e8 <ath_update_aggr_stats$isra$2>
	ath_rate_tx_complete(sc, tid->an, ds, rcs, nframes, nframes);
  909a42:	8b4e      	l32i.n	a11, a4, 56
  909a44:	2d0a88        	movi	a13, 136
  909a47:	dc10      	mov.n	a12, a1
  909a49:	da20      	mov.n	a10, a2
  909a4b:	ad1d      	add.n	a13, a1, a13
  909a4d:	de50      	mov.n	a14, a5
  909a4f:	df50      	mov.n	a15, a5
  909a51:	5bfcf1        	call8	908e18 <ath_rate_tx_complete>

	if (bar) {
  909a54:	2c1230        	l32i	a12, a1, 192
  909a57:	c8c5      	beqz.n	a12, 909a60 <ath_tx_comp_aggr_error+0x78>
		ath_bar_tx(sc, tid, bar);
  909a59:	da20      	mov.n	a10, a2
  909a5b:	db40      	mov.n	a11, a4
  909a5d:	5bfebd        	call8	909554 <ath_bar_tx>
	}

	if (!asf_tailq_empty(&bf_q)) {
  909a60:	23122e        	l32i	a3, a1, 184
  909a63:	ca3d      	beqz.n	a3, 909a94 <ath_tx_comp_aggr_error+0xac>
		__stats(sc, txaggr_prepends);
  909a65:	232264        	l32i	a3, a2, 0x190
  909a68:	b133      	addi.n	a3, a3, 1
  909a6a:	232664        	s32i	a3, a2, 0x190
		TAILQ_INSERTQ_HEAD(&tid->buf_q, &bf_q, bf_list);
  909a6d:	834b      	l32i.n	a3, a4, 44
  909a6f:	22122f        	l32i	a2, a1, 188
  909a72:	c83b      	beqz.n	a3, 909a81 <ath_tx_comp_aggr_error+0x99>
  909a74:	9320      	s32i.n	a3, a2, 0
  909a76:	824b      	l32i.n	a2, a4, 44
  909a78:	23122f        	l32i	a3, a1, 188
  909a7b:	932a      	s32i.n	a3, a2, 40
  909a7d:	600002        	j	909a83 <ath_tx_comp_aggr_error+0x9b>
  909a80:	00924c        	extui	a2, a0, 9, 13
  909a83:	22122e        	l32i	a2, a1, 184
  909a86:	234c2c        	addi	a3, a4, 44
  909a89:	924b      	s32i.n	a2, a4, 44
  909a8b:	932a      	s32i.n	a3, a2, 40
		ath_tgt_tx_enqueue(txq, tid);
  909a8d:	da70      	mov.n	a10, a7
  909a8f:	db40      	mov.n	a11, a4
  909a91:	5bfdcc        	call8	9091c4 <ath_tgt_tx_enqueue>
  909a94:	d10f      	retw.n
	...

00909a98 <ath_tx_status_send>:

	txs->cnt++;
}

void ath_tx_status_send(struct ath_softc_tgt *sc)
{
  909a98:	6c1004        	entry	a1, 32
	int i;

	if (sc->sc_tx_draining)
  909a9b:	242249        	l32i	a4, a2, 0x124
  909a9e:	137248        	l32r	a3, 8e63c0 <memset+0x1224>
  909aa1:	034401        	and	a4, a4, a3
  909aa4:	cf44      	bnez.n	a4, 909adc <ath_tx_status_send+0x44>
		return;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt) {
  909aa6:	232d16        	addmi	a3, a2, 0x1600
  909aa9:	283038        	l8ui	a8, a3, 56
  909aac:	c980      	beqz.n	a8, 909ac0 <ath_tx_status_send+0x28>
			wmi_event(sc->tgt_wmi_handle, WMI_TXSTATUS_EVENTID,
  909aae:	1c72c4        	l32r	a12, 8e65c0 <memset+0x1424>
  909ab1:	8a23      	l32i.n	a10, a2, 12
  909ab3:	1b72c3        	l32r	a11, 8e65c0 <memset+0x1424>
  909ab6:	ac2c      	add.n	a12, a2, a12
  909ab8:	c2d5      	movi.n	a13, 37
  909aba:	5bf441        	call8	906bc0 <wmi_event>
				  &sc->tx_status[i], sizeof(WMI_TXSTATUS_EVENT));
			/* FIXME: Handle failures. */
			sc->tx_status[i].cnt = 0;
  909abd:	243438        	s8i	a4, a3, 56

	if (sc->sc_tx_draining)
		return;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt) {
  909ac0:	232d16        	addmi	a3, a2, 0x1600
  909ac3:	24305d        	l8ui	a4, a3, 93
  909ac6:	c942      	beqz.n	a4, 909adc <ath_tx_status_send+0x44>
			wmi_event(sc->tgt_wmi_handle, WMI_TXSTATUS_EVENTID,
  909ac8:	1c72c5        	l32r	a12, 8e65dc <memset+0x1440>
  909acb:	8a23      	l32i.n	a10, a2, 12
  909acd:	1b72c3        	l32r	a11, 8e65dc <memset+0x1440>
  909ad0:	ac2c      	add.n	a12, a2, a12
  909ad2:	c2d5      	movi.n	a13, 37
				  &sc->tx_status[i], sizeof(WMI_TXSTATUS_EVENT));
			/* FIXME: Handle failures. */
			sc->tx_status[i].cnt = 0;
  909ad4:	c020      	movi.n	a2, 0
	if (sc->sc_tx_draining)
		return;

	for (i = 0; i < 2; i++) {
		if (sc->tx_status[i].cnt) {
			wmi_event(sc->tgt_wmi_handle, WMI_TXSTATUS_EVENTID,
  909ad6:	5bf43a        	call8	906bc0 <wmi_event>
				  &sc->tx_status[i], sizeof(WMI_TXSTATUS_EVENT));
			/* FIXME: Handle failures. */
			sc->tx_status[i].cnt = 0;
  909ad9:	22345d        	s8i	a2, a3, 93
  909adc:	d10f      	retw.n
	...

00909ae0 <ath_tgt_tid_drain>:
	return((struct ieee80211_frame *)anbdata);
}

void
ath_tgt_tid_drain(struct ath_softc_tgt *sc, struct ath_atx_tid *tid)
{
  909ae0:	6c1004        	entry	a1, 32
	struct ath_tx_buf *bf;

	while (!asf_tailq_empty(&tid->buf_q)) {
  909ae3:	600015        	j	909afc <ath_tgt_tid_drain+0x1c>
		TAILQ_DEQ(&tid->buf_q, bf, bf_list);
  909ae6:	88b9      	l32i.n	a8, a11, 36
  909ae8:	89ba      	l32i.n	a9, a11, 40
  909aea:	c883      	beqz.n	a8, 909af1 <ath_tgt_tid_drain+0x11>
  909aec:	998a      	s32i.n	a9, a8, 40
  909aee:	600001        	j	909af3 <ath_tgt_tid_drain+0x13>
  909af1:	993c      	s32i.n	a9, a3, 48
  909af3:	89ba      	l32i.n	a9, a11, 40
		ath_tx_freebuf(sc, bf);
  909af5:	da20      	mov.n	a10, a2
ath_tgt_tid_drain(struct ath_softc_tgt *sc, struct ath_atx_tid *tid)
{
	struct ath_tx_buf *bf;

	while (!asf_tailq_empty(&tid->buf_q)) {
		TAILQ_DEQ(&tid->buf_q, bf, bf_list);
  909af7:	9890      	s32i.n	a8, a9, 0
		ath_tx_freebuf(sc, bf);
  909af9:	5bfefc        	call8	9096ec <ath_tx_freebuf>
void
ath_tgt_tid_drain(struct ath_softc_tgt *sc, struct ath_atx_tid *tid)
{
	struct ath_tx_buf *bf;

	while (!asf_tailq_empty(&tid->buf_q)) {
  909afc:	8b3b      	l32i.n	a11, a3, 44
  909afe:	65bfe4        	bnez	a11, 909ae6 <ath_tgt_tid_drain+0x6>
		TAILQ_DEQ(&tid->buf_q, bf, bf_list);
		ath_tx_freebuf(sc, bf);
	}

	tid->seq_next = tid->seq_start;
  909b01:	223102        	l16ui	a2, a3, 4
  909b04:	223503        	s16i	a2, a3, 6
	tid->baw_tail = tid->baw_head;
  909b07:	8233      	l32i.n	a2, a3, 12
  909b09:	9234      	s32i.n	a2, a3, 16
  909b0b:	d10f      	retw.n
  909b0d:	000000        	ill

00909b10 <ath_tgt_tx_prepare>:
	return  bf;
}

struct ath_tx_buf* ath_tgt_tx_prepare(struct ath_softc_tgt *sc,
				   adf_nbuf_t skb, ath_data_hdr_t *dh)
{
  909b10:	6c1006        	entry	a1, 48
  909b13:	d520      	mov.n	a5, a2
	struct ath_tx_buf *bf;
	struct ieee80211_node_target *ni;
	struct ath_atx_tid *tid;

	ni = ath_tgt_find_node(sc, dh->ni_index);
  909b15:	224001        	l8ui	a2, a4, 1
							a_int32_t node_index)
{
	struct ath_node_target *an;
	struct ieee80211_node_target *ni;

	if (node_index > TARGET_NODE_MAX)
  909b18:	c068      	movi.n	a6, 8
  909b1a:	726a02        	bge	a6, a2, 909b20 <ath_tgt_tx_prepare+0x10>
  909b1d:	60022b        	j	909d4c <ath_tgt_tx_prepare+0x23c>
	  	return NULL;

	an = &sc->sc_sta[node_index];
  909b20:	0a2611        	slli	a6, a2, 6
  909b23:	a266      	add.n	a6, a6, a2
  909b25:	026609        	addx2	a6, a6, a2
  909b28:	275a30        	movi	a7, 0x530
  909b2b:	07660a        	addx4	a6, a6, a7
  909b2e:	a656      	add.n	a6, a5, a6
  909b30:	b866      	addi.n	a6, a6, 8
	ni = &an->ni;

	if (an->an_valid) {
  909b32:	226d02        	addmi	a2, a6, 0x200
  909b35:	222004        	l8ui	a2, a2, 4
  909b38:	002232        	sext	a2, a2, 7
  909b3b:	642213        	beqz	a2, 909d52 <ath_tgt_tx_prepare+0x242>
		if (ni->ni_vap == NULL) {
  909b3e:	8268      	l32i.n	a2, a6, 32
  909b40:	64220e        	beqz	a2, 909d52 <ath_tgt_tx_prepare+0x242>
	struct ath_tx_buf *bf;
	struct ieee80211_node_target *ni;
	struct ath_atx_tid *tid;

	ni = ath_tgt_find_node(sc, dh->ni_index);
	if (ni == NULL)
  909b43:	646209        	beqz	a6, 909d50 <ath_tgt_tx_prepare+0x240>
		return NULL;

	tid = ATH_AN_2_TID(ATH_NODE_TARGET(ni), dh->tidno);
  909b46:	224003        	l8ui	a2, a4, 3
  909b49:	0c2711        	slli	a7, a2, 4
  909b4c:	02720c        	sub	a2, a7, a2
  909b4f:	06220a        	addx4	a2, a2, a6
	if (tid->flag & TID_REINITIALIZE) {
  909b52:	22205a        	l8ui	a2, a2, 90
  909b55:	7d270f        	bbci	a2, 29, 909b68 <ath_tgt_tx_prepare+0x58>
		adf_os_print("drop frame due to TID reinit\n");
  909b58:	127182        	l32r	a2, 8e6160 <memset+0xfc4>
  909b5b:	1a72c6        	l32r	a10, 8e6674 <memset+0x14d8>
  909b5e:	222212        	l32i	a2, a2, 72
  909b61:	0b2000        	callx8	a2
  909b64:	6001e4        	j	909d4c <ath_tgt_tx_prepare+0x23c>
  909b67:	002252        	extui	a2, a0, 18, 3

static struct ath_tx_buf* ath_tx_buf_alloc(struct ath_softc_tgt *sc)
{
	struct ath_tx_buf *bf = NULL;

	bf = asf_tailq_first(&sc->sc_txbuf);
  909b6a:	f0          	.byte 0xf0
	if (bf !=  NULL) {
  909b6b:	cb22      	beqz.n	a2, 909ba1 <ath_tgt_tx_prepare+0x91>
 * @param[in] size  buffer size
 */
static inline void
adf_os_mem_set(void *buf, a_uint8_t b, adf_os_size_t size)
{
    __adf_os_mem_set(buf, b, size);
  909b6d:	2a2c3c        	addi	a10, a2, 60
  909b70:	c4bc      	movi.n	a11, 76
  909b72:	5bfdbe        	call8	90926c <__adf_os_mem_set$constprop$13>
		adf_os_mem_set(&bf->bf_state, 0, sizeof(struct ath_buf_state));
		asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  909b75:	8729      	l32i.n	a7, a2, 36
  909b77:	882a      	l32i.n	a8, a2, 40
  909b79:	c874      	beqz.n	a7, 909b81 <ath_tgt_tx_prepare+0x71>
  909b7b:	987a      	s32i.n	a8, a7, 40
  909b7d:	600003        	j	909b84 <ath_tgt_tx_prepare+0x74>
  909b80:	002856        	extui	a8, a0, 18, 7
  909b83:	f1          	.byte 0xf1
  909b84:	882a      	l32i.n	a8, a2, 40
		__stats(sc, tx_nobufs);
		return NULL;
	}

	bf->bf_tidno = dh->tidno;
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
  909b86:	c091      	movi.n	a9, 1
	struct ath_tx_buf *bf = NULL;

	bf = asf_tailq_first(&sc->sc_txbuf);
	if (bf !=  NULL) {
		adf_os_mem_set(&bf->bf_state, 0, sizeof(struct ath_buf_state));
		asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  909b88:	9780      	s32i.n	a7, a8, 0
	if (!bf) {
		__stats(sc, tx_nobufs);
		return NULL;
	}

	bf->bf_tidno = dh->tidno;
  909b8a:	284003        	l8ui	a8, a4, 3
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
  909b8d:	c070      	movi.n	a7, 0
  909b8f:	2a8cfd        	addi	a10, a8, -3
	if (!bf) {
		__stats(sc, tx_nobufs);
		return NULL;
	}

	bf->bf_tidno = dh->tidno;
  909b92:	28244d        	s8i	a8, a2, 77
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
  909b95:	0a9739        	movnez	a7, a9, a10
  909b98:	c870      	beqz.n	a7, 909b9c <ath_tgt_tx_prepare+0x8c>
  909b9a:	cc86      	bnez.n	a8, 909ba4 <ath_tgt_tx_prepare+0x94>
  909b9c:	c090      	movi.n	a9, 0
  909b9e:	600017        	j	909bb9 <ath_tgt_tx_prepare+0xa9>
  909ba1:	63fffc        	j	909ba1 <ath_tgt_tx_prepare+0x91>
  909ba4:	b087      	addi.n	a7, a8, -1
  909ba6:	070747        	extui	a7, a7, 0, 8
  909ba9:	6e720c        	bltui	a7, 2, 909bb9 <ath_tgt_tx_prepare+0xa9>
  909bac:	288cfc        	addi	a8, a8, -4
  909baf:	080847        	extui	a8, a8, 0, 8
  909bb2:	c093      	movi.n	a9, 3
  909bb4:	6f8201        	bgeui	a8, 2, 909bb9 <ath_tgt_tx_prepare+0xa9>
  909bb7:	c092      	movi.n	a9, 2
  909bb9:	05990a        	addx4	a9, a9, a5
  909bbc:	299d05        	addmi	a9, a9, 0x500
  909bbf:	8793      	l32i.n	a7, a9, 12
 * @param[in] buf   buf
 */
static inline void
adf_nbuf_queue_add(adf_nbuf_queue_t *head, adf_nbuf_t buf)
{
    __adf_nbuf_queue_add(head, buf);
  909bc1:	db30      	mov.n	a11, a3
  909bc3:	272620        	s32i	a7, a2, 128
	bf->bf_keytype = dh->keytype;
  909bc6:	274008        	l8ui	a7, a4, 8
  909bc9:	272485        	s8i	a7, a2, 133
	bf->bf_keyix = dh->keyix;
  909bcc:	274009        	l8ui	a7, a4, 9
  909bcf:	272449        	s8i	a7, a2, 73
	bf->bf_protmode = dh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
  909bd2:	274007        	l8ui	a7, a4, 7
	bf->bf_node = ni;
  909bd5:	9624      	s32i.n	a6, a2, 16

	bf->bf_tidno = dh->tidno;
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
	bf->bf_keytype = dh->keytype;
	bf->bf_keyix = dh->keyix;
	bf->bf_protmode = dh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
  909bd7:	070741        	extui	a7, a7, 0, 2
	bf->bf_node = ni;

	adf_nbuf_queue_add(&bf->bf_skbhead, skb);
  909bda:	262c14        	addi	a6, a2, 20
  909bdd:	da60      	mov.n	a10, a6

	bf->bf_tidno = dh->tidno;
	bf->bf_txq = TID_TO_ACTXQ(bf->bf_tidno);
	bf->bf_keytype = dh->keytype;
	bf->bf_keyix = dh->keyix;
	bf->bf_protmode = dh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
  909bdf:	272484        	s8i	a7, a2, 132
  909be2:	5be61f        	call8	903460 <__adf_nbuf_queue_add>
 * @return first buffer in queue
 */
static inline adf_nbuf_t 
adf_nbuf_queue_first(adf_nbuf_queue_t *head)
{
    return (__adf_nbuf_queue_first(head));
  909be5:	da60      	mov.n	a10, a6
  909be7:	5be6b4        	call8	9036b8 <__adf_nbuf_queue_first>
  909bea:	d3a0      	mov.n	a3, a10
 * @return length of the queue
 */
static inline a_uint32_t
adf_nbuf_queue_len(adf_nbuf_queue_t *head)
{
    return __adf_nbuf_queue_len(head);
  909bec:	da60      	mov.n	a10, a6
  909bee:	5be6b0        	call8	9036b0 <__adf_nbuf_queue_len>
	bf->bf_node = ni;

	adf_nbuf_queue_add(&bf->bf_skbhead, skb);
	skb = adf_nbuf_queue_first(&(bf->bf_skbhead));

	if (adf_nbuf_queue_len(&(bf->bf_skbhead)) == 0) {
  909bf1:	ccab      	bnez.n	a10, 909c00 <ath_tgt_tx_prepare+0xf0>
		__stats(sc, tx_noskbs);
  909bf3:	225276        	l32i	a2, a5, 0x1d8
  909bf6:	b122      	addi.n	a2, a2, 1
  909bf8:	225676        	s32i	a2, a5, 0x1d8
		return NULL;
  909bfb:	d2a0      	mov.n	a2, a10
  909bfd:	d10f      	retw.n
  909bff:	00cc32        	sext	a12, a12, 7
	}

	adf_os_assert(skb);
  909c02:	63fffc        	j	909c02 <ath_tgt_tx_prepare+0xf2>
  909c05:	00da30        	excw
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  909c08:	b41b      	addi.n	a11, a1, 4

	bf->bf_skb = skb;
  909c0a:	9328      	s32i.n	a3, a2, 32
  909c0c:	dc10      	mov.n	a12, a1
  909c0e:	5be69e        	call8	903688 <__adf_nbuf_peek_header>
				     ath_data_hdr_t *dh)

{
	struct ieee80211_frame *wh = ATH_SKB2_WH(bf->bf_skb);
	a_int32_t retval;
	a_uint32_t flags = adf_os_ntohl(dh->flags);
  909c11:	294004        	l8ui	a9, a4, 4
  909c14:	284005        	l8ui	a8, a4, 5
  909c17:	274006        	l8ui	a7, a4, 6
  909c1a:	089910        	slli	a9, a9, 24
  909c1d:	008811        	slli	a8, a8, 16
  909c20:	098802        	or	a8, a8, a9
  909c23:	244007        	l8ui	a4, a4, 7
  909c26:	087711        	slli	a7, a7, 8

static void ath_tgt_tx_seqno_normal(struct ath_tx_buf *bf)
{
	struct ieee80211_node_target *ni = bf->bf_node;
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
  909c29:	8a28      	l32i.n	a10, a2, 32
				     ath_data_hdr_t *dh)

{
	struct ieee80211_frame *wh = ATH_SKB2_WH(bf->bf_skb);
	a_int32_t retval;
	a_uint32_t flags = adf_os_ntohl(dh->flags);
  909c2b:	087702        	or	a7, a7, a8
{
	a_uint8_t *anbdata;
	a_uint32_t anblen;

	adf_nbuf_peek_header(skb, &anbdata, &anblen);
	return((struct ieee80211_frame *)anbdata);
  909c2e:	8311      	l32i.n	a3, a1, 4
				     ath_data_hdr_t *dh)

{
	struct ieee80211_frame *wh = ATH_SKB2_WH(bf->bf_skb);
	a_int32_t retval;
	a_uint32_t flags = adf_os_ntohl(dh->flags);
  909c30:	074402        	or	a4, a4, a7
	return bf;
}

static void ath_tgt_tx_seqno_normal(struct ath_tx_buf *bf)
{
	struct ieee80211_node_target *ni = bf->bf_node;
  909c33:	272204        	l32i	a7, a2, 16
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
  909c36:	5bfecf        	call8	909774 <ATH_SKB_2_WH>
	struct ath_atx_tid *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  909c39:	28204d        	l8ui	a8, a2, 77

	u_int8_t fragno = (wh->i_seq[0] & 0xf);

	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  909c3c:	2b710c        	l16ui	a11, a7, 24
static void ath_tgt_tx_seqno_normal(struct ath_tx_buf *bf)
{
	struct ieee80211_node_target *ni = bf->bf_node;
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
	struct ath_atx_tid *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  909c3f:	0c8911        	slli	a9, a8, 4
  909c42:	08980c        	sub	a8, a9, a8
  909c45:	07880a        	addx4	a8, a8, a7

	u_int8_t fragno = (wh->i_seq[0] & 0xf);

	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  909c48:	b1bb      	addi.n	a11, a11, 1
  909c4a:	0b0b4b        	extui	a11, a11, 0, 12
static void ath_tgt_tx_seqno_normal(struct ath_tx_buf *bf)
{
	struct ieee80211_node_target *ni = bf->bf_node;
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
	struct ath_atx_tid *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  909c4d:	288c24        	addi	a8, a8, 36

	u_int8_t fragno = (wh->i_seq[0] & 0xf);
  909c50:	29a016        	l8ui	a9, a10, 22

	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  909c53:	2b750c        	s16i	a11, a7, 24

	bf->bf_seqno = (tid->seq_next << IEEE80211_SEQ_SEQ_SHIFT);
  909c56:	278103        	l16ui	a7, a8, 6
	struct ieee80211_node_target *ni = bf->bf_node;
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
	struct ath_atx_tid *tid = ATH_AN_2_TID(an, bf->bf_tidno);

	u_int8_t fragno = (wh->i_seq[0] & 0xf);
  909c59:	090943        	extui	a9, a9, 0, 4

	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);

	bf->bf_seqno = (tid->seq_next << IEEE80211_SEQ_SEQ_SHIFT);
  909c5c:	0c7711        	slli	a7, a7, 4
  909c5f:	07074f        	extui	a7, a7, 0, 16
  909c62:	272523        	s16i	a7, a2, 70

#undef adf_os_cpu_to_le16

static a_uint16_t adf_os_cpu_to_le16(a_uint16_t x)
{
	return ((((x) & 0xff00) >> 8) |   (((x) & 0x00ff) << 8));
  909c65:	087b11        	slli	a11, a7, 8
  909c68:	078714        	srli	a7, a7, 8
  909c6b:	07b702        	or	a7, a11, a7

	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);

	bf->bf_seqno = (tid->seq_next << IEEE80211_SEQ_SEQ_SHIFT);

	*(u_int16_t *)wh->i_seq = adf_os_cpu_to_le16(bf->bf_seqno);
  909c6e:	070b4f        	extui	a11, a7, 0, 16
  909c71:	27a50b        	s16i	a7, a10, 22
	wh->i_seq[0] |= fragno;
  909c74:	0b8714        	srli	a7, a11, 8
  909c77:	079702        	or	a7, a9, a7
  909c7a:	27a416        	s8i	a7, a10, 22

	if (!(wh->i_fc[1] & IEEE80211_FC1_MORE_FRAG))
  909c7d:	27a001        	l8ui	a7, a10, 1
  909c80:	7d7f08        	bbsi	a7, 29, 909c8c <ath_tgt_tx_prepare+0x17c>
		INCR(tid->seq_next, IEEE80211_SEQ_MAX);
  909c83:	278103        	l16ui	a7, a8, 6
  909c86:	277c01        	addi	a7, a7, 1
  909c89:	278503        	s16i	a7, a8, 6
  909c8c:	278103        	l16ui	a7, a8, 6
	a_uint32_t flags = adf_os_ntohl(dh->flags);

	ath_tgt_tx_seqno_normal(bf);

	bf->bf_txq_add  = ath_tgt_txq_add_ucast;
	bf->bf_hdrlen   = ieee80211_anyhdrsize(wh);
  909c8f:	033a02        	or	a10, a3, a3

	*(u_int16_t *)wh->i_seq = adf_os_cpu_to_le16(bf->bf_seqno);
	wh->i_seq[0] |= fragno;

	if (!(wh->i_fc[1] & IEEE80211_FC1_MORE_FRAG))
		INCR(tid->seq_next, IEEE80211_SEQ_MAX);
  909c92:	07074b        	extui	a7, a7, 0, 12
  909c95:	278503        	s16i	a7, a8, 6
	a_int32_t retval;
	a_uint32_t flags = adf_os_ntohl(dh->flags);

	ath_tgt_tx_seqno_normal(bf);

	bf->bf_txq_add  = ath_tgt_txq_add_ucast;
  909c98:	1772c7        	l32r	a7, 8e67b4 <memset+0x1618>
  909c9b:	272610        	s32i	a7, a2, 64
	bf->bf_hdrlen   = ieee80211_anyhdrsize(wh);
  909c9e:	5bfc82        	call8	908ea8 <ieee80211_anyhdrsize>
  909ca1:	d7a0      	mov.n	a7, a10
  909ca3:	2a2448        	s8i	a10, a2, 72
 * @return first buffer in queue
 */
static inline adf_nbuf_t 
adf_nbuf_queue_first(adf_nbuf_queue_t *head)
{
    return (__adf_nbuf_queue_first(head));
  909ca6:	066a02        	or	a10, a6, a6
  909ca9:	5be683        	call8	9036b8 <__adf_nbuf_queue_first>
 * @return The total length of this buf.
 */
static inline adf_os_size_t
adf_nbuf_len(adf_nbuf_t buf)
{
    return (__adf_nbuf_len(buf));
  909cac:	5be66e        	call8	903668 <__adf_nbuf_len>
	a_int32_t pktlen;

	skb = adf_nbuf_queue_first(&bf->bf_skbhead);
	pktlen = adf_nbuf_len(skb);

	pktlen -= (hdrlen & 3);
  909caf:	070741        	extui	a7, a7, 0, 2
  909cb2:	07aa0c        	sub	a10, a10, a7
	pktlen += IEEE80211_CRC_LEN;
  909cb5:	b4a7      	addi.n	a7, a10, 4

	ath_tgt_tx_seqno_normal(bf);

	bf->bf_txq_add  = ath_tgt_txq_add_ucast;
	bf->bf_hdrlen   = ieee80211_anyhdrsize(wh);
	bf->bf_pktlen   = ath_get_pktlen(bf, bf->bf_hdrlen);
  909cb7:	272522        	s16i	a7, a2, 68
	bf->bf_ismcast  = IEEE80211_IS_MULTICAST(wh->i_addr1);
  909cba:	263004        	l8ui	a6, a3, 4
  909cbd:	232087        	l8ui	a3, a2, 135
  909cc0:	096611        	slli	a6, a6, 7
  909cc3:	030346        	extui	a3, a3, 0, 7
  909cc6:	063302        	or	a3, a3, a6
}

static a_int32_t ath_key_setup(struct ieee80211_node_target *ni,
			       struct ath_tx_buf *bf)
{
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
  909cc9:	8a28      	l32i.n	a10, a2, 32
	ath_tgt_tx_seqno_normal(bf);

	bf->bf_txq_add  = ath_tgt_txq_add_ucast;
	bf->bf_hdrlen   = ieee80211_anyhdrsize(wh);
	bf->bf_pktlen   = ath_get_pktlen(bf, bf->bf_hdrlen);
	bf->bf_ismcast  = IEEE80211_IS_MULTICAST(wh->i_addr1);
  909ccb:	232487        	s8i	a3, a2, 135

	if ((retval = ath_key_setup(bf->bf_node, bf)) < 0)
  909cce:	262204        	l32i	a6, a2, 16
}

static a_int32_t ath_key_setup(struct ieee80211_node_target *ni,
			       struct ath_tx_buf *bf)
{
	struct ieee80211_frame *wh = ATH_SKB_2_WH(bf->bf_skb);
  909cd1:	5bfea8        	call8	909774 <ATH_SKB_2_WH>

	if (!(wh->i_fc[1] & IEEE80211_FC1_WEP)) {
  909cd4:	27a001        	l8ui	a7, a10, 1
  909cd7:	c430      	movi.n	a3, 64
  909cd9:	037301        	and	a3, a7, a3
  909cdc:	030747        	extui	a7, a3, 0, 8
  909cdf:	cc79      	bnez.n	a7, 909cec <ath_tgt_tx_prepare+0x1dc>
		bf->bf_keytype = HAL_KEY_TYPE_CLEAR;
  909ce1:	232485        	s8i	a3, a2, 133
		bf->bf_keyix = HAL_TXKEYIX_INVALID;
  909ce4:	c73f      	movi.n	a3, -1
  909ce6:	232449        	s8i	a3, a2, 73
  909ce9:	60002d        	j	909d1a <ath_tgt_tx_prepare+0x20a>
		return 0;
	}

	switch (bf->bf_keytype) {
  909cec:	2c2085        	l8ui	a12, a2, 133
  909cef:	68c209        	beqi	a12, 2, 909cfc <ath_tgt_tx_prepare+0x1ec>
  909cf2:	68c30e        	beqi	a12, 3, 909d04 <ath_tgt_tx_prepare+0x1f4>
  909cf5:	69c113        	bnei	a12, 1, 909d0c <ath_tgt_tx_prepare+0x1fc>
  909cf8:	600008        	j	909d04 <ath_tgt_tx_prepare+0x1f4>
  909cfb:	002321        	excw
	case HAL_KEY_TYPE_WEP:
		bf->bf_pktlen += IEEE80211_WEP_ICVLEN;
		break;
	case HAL_KEY_TYPE_AES:
		bf->bf_pktlen += IEEE80211_WEP_MICLEN;
  909cfe:	22b833        	excw
  909d01:	600004        	j	909d09 <ath_tgt_tx_prepare+0x1f9>
		break;
	case HAL_KEY_TYPE_TKIP:
		bf->bf_pktlen += IEEE80211_WEP_ICVLEN;
  909d04:	232122        	l16ui	a3, a2, 68
  909d07:	b433      	addi.n	a3, a3, 4
  909d09:	232522        	s16i	a3, a2, 68
		break;
	default:
		break;
	}

	if (bf->bf_keytype == HAL_KEY_TYPE_AES ||
  909d0c:	23ccfe        	addi	a3, a12, -2
  909d0f:	030347        	extui	a3, a3, 0, 8
  909d12:	6f3204        	bgeui	a3, 2, 909d1a <ath_tgt_tx_prepare+0x20a>
	    bf->bf_keytype == HAL_KEY_TYPE_TKIP)
		ieee80211_tgt_crypto_encap(wh, ni, bf->bf_keytype);
  909d15:	db60      	mov.n	a11, a6
  909d17:	580432        	call8	90ade0 <ieee80211_tgt_crypto_encap>
  909d1a:	232087        	l8ui	a3, a2, 135
	bf->bf_ismcast  = IEEE80211_IS_MULTICAST(wh->i_addr1);

	if ((retval = ath_key_setup(bf->bf_node, bf)) < 0)
		return retval;

	if (flags & ATH_SHORT_PREAMBLE)
  909d1d:	7f4707        	bbci	a4, 31, 909d28 <ath_tgt_tx_prepare+0x218>
		bf->bf_shpream = AH_TRUE;
  909d20:	c440      	movi.n	a4, 64
  909d22:	043302        	or	a3, a3, a4
  909d25:	600005        	j	909d2e <ath_tgt_tx_prepare+0x21e>
	else
		bf->bf_shpream = AH_FALSE;
  909d28:	24fabf        	movi	a4, -65
  909d2b:	043301        	and	a3, a3, a4
  909d2e:	232487        	s8i	a3, a2, 135

	bf->bf_flags = HAL_TXDESC_CLRDMASK;
  909d31:	c031      	movi.n	a3, 1
  909d33:	232544        	s16i	a3, a2, 136
	bf->bf_atype = HAL_PKT_TYPE_NORMAL;
  909d36:	c030      	movi.n	a3, 0
	adf_os_assert(skb);

	bf->bf_skb = skb;

	ath_tgt_txbuf_setup(sc, bf, dh);
	ath_dma_map(sc, bf);
  909d38:	da50      	mov.n	a10, a5
  909d3a:	db20      	mov.n	a11, a2
		bf->bf_shpream = AH_TRUE;
	else
		bf->bf_shpream = AH_FALSE;

	bf->bf_flags = HAL_TXDESC_CLRDMASK;
	bf->bf_atype = HAL_PKT_TYPE_NORMAL;
  909d3c:	23244a        	s8i	a3, a2, 74
	adf_os_assert(skb);

	bf->bf_skb = skb;

	ath_tgt_txbuf_setup(sc, bf, dh);
	ath_dma_map(sc, bf);
  909d3f:	5bfdcb        	call8	90946c <ath_dma_map>
	ath_tx_tgt_setds(sc, bf);
  909d42:	da50      	mov.n	a10, a5
  909d44:	db20      	mov.n	a11, a2
  909d46:	5bfd0b        	call8	909174 <ath_tx_tgt_setds>

	return bf;
  909d49:	d10f      	retw.n
  909d4b:	00c020        	excw
	struct ieee80211_node_target *ni;
	struct ath_atx_tid *tid;

	ni = ath_tgt_find_node(sc, dh->ni_index);
	if (ni == NULL)
		return NULL;
  909d4e:	d10f      	retw.n
  909d50:	d260      	mov.n	a2, a6
	ath_tgt_txbuf_setup(sc, bf, dh);
	ath_dma_map(sc, bf);
	ath_tx_tgt_setds(sc, bf);

	return bf;
}
  909d52:	d10f      	retw.n

00909d54 <ath_tgt_tx_send_normal>:
	return pktlen;
}

void
ath_tgt_tx_send_normal(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  909d54:	6c1014        	entry	a1, 160
	struct ath_rc_series rcs[4];
	struct ath_rc_series mrcs[4];
	a_int32_t shortPreamble = 0;
	a_int32_t isProbe = 0;

	adf_os_mem_set(rcs, 0, sizeof(struct ath_rc_series)*4 );
  909d57:	251c40        	addi	a5, a1, 64
  909d5a:	da50      	mov.n	a10, a5
  909d5c:	c3b0      	movi.n	a11, 48
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	struct ath_rc_series rcs[4];
	struct ath_rc_series mrcs[4];
	a_int32_t shortPreamble = 0;
	a_int32_t isProbe = 0;
  909d5e:	c040      	movi.n	a4, 0
}

void
ath_tgt_tx_send_normal(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  909d60:	8634      	l32i.n	a6, a3, 16
	struct ath_rc_series rcs[4];
	struct ath_rc_series mrcs[4];
	a_int32_t shortPreamble = 0;
	a_int32_t isProbe = 0;
  909d62:	24161c        	s32i	a4, a1, 112
  909d65:	5bfd41        	call8	90926c <__adf_os_mem_set$constprop$13>
  909d68:	2a1c10        	addi	a10, a1, 16
  909d6b:	c3b0      	movi.n	a11, 48
  909d6d:	5bfd3f        	call8	90926c <__adf_os_mem_set$constprop$13>

	adf_os_mem_set(rcs, 0, sizeof(struct ath_rc_series)*4 );
	adf_os_mem_set(mrcs, 0, sizeof(struct ath_rc_series)*4 );

	if (!bf->bf_ismcast) {
  909d70:	283221        	l32i	a8, a3, 132
  909d73:	2d0a80        	movi	a13, 128
  909d76:	08dd01        	and	a13, a13, a8
  909d79:	74d920        	bne	a13, a4, 909d9d <ath_tgt_tx_send_normal+0x49>
				  a_int32_t stepDnInc,
				  a_uint32_t rcflag,
				  struct ath_rc_series series[],
				  a_int32_t *isProbe)
{
	ath_rate_findrate(sc, an, 1, frameLen, 10, 4, 1,
  909d7c:	c0c1      	movi.n	a12, 1

	adf_os_mem_set(rcs, 0, sizeof(struct ath_rc_series)*4 );
	adf_os_mem_set(mrcs, 0, sizeof(struct ath_rc_series)*4 );

	if (!bf->bf_ismcast) {
		ath_tgt_rate_findrate(sc, an, shortPreamble,
  909d7e:	241c70        	addi	a4, a1, 112
				  a_int32_t stepDnInc,
				  a_uint32_t rcflag,
				  struct ath_rc_series series[],
				  a_int32_t *isProbe)
{
	ath_rate_findrate(sc, an, 1, frameLen, 10, 4, 1,
  909d81:	da20      	mov.n	a10, a2
  909d83:	db60      	mov.n	a11, a6
  909d85:	9c10      	s32i.n	a12, a1, 0
  909d87:	9c11      	s32i.n	a12, a1, 4
  909d89:	9512      	s32i.n	a5, a1, 8
  909d8b:	9413      	s32i.n	a4, a1, 12
  909d8d:	c0ea      	movi.n	a14, 10
  909d8f:	c0f4      	movi.n	a15, 4
  909d91:	5bfc16        	call8	908dec <ath_rate_findrate>

	if (!bf->bf_ismcast) {
		ath_tgt_rate_findrate(sc, an, shortPreamble,
				      0, 0, 0, 0, 0,
				      rcs, &isProbe);
		ath_hal_memcpy(bf->bf_rcs, rcs, sizeof(rcs));
  909d94:	2a3c50        	addi	a10, a3, 80
  909d97:	db50      	mov.n	a11, a5
  909d99:	600023        	j	909dc0 <ath_tgt_tx_send_normal+0x6c>
  909d9c:	00c051        	extui	a0, a0, 28, 2
	} else {
		mrcs[1].tries = mrcs[2].tries = mrcs[3].tries = 0;
  909d9f:	241435        	s8i	a4, a1, 53
  909da2:	241429        	s8i	a4, a1, 41
  909da5:	24141d        	s8i	a4, a1, 29
		mrcs[1].rix = mrcs[2].rix = mrcs[3].rix = 0;
  909da8:	241434        	s8i	a4, a1, 52
  909dab:	241428        	s8i	a4, a1, 40
  909dae:	24141c        	s8i	a4, a1, 28
		mrcs[0].rix   = 0;
  909db1:	241410        	s8i	a4, a1, 16
		mrcs[0].tries = 1;
  909db4:	251411        	s8i	a5, a1, 17
		mrcs[0].flags = 0;
  909db7:	241413        	s8i	a4, a1, 19
		ath_hal_memcpy(bf->bf_rcs, mrcs, sizeof(mrcs));
  909dba:	2a3c50        	addi	a10, a3, 80
  909dbd:	2b1c10        	addi	a11, a1, 16
  909dc0:	c3c0      	movi.n	a12, 48
  909dc2:	5be78d        	call8	903bf8 <ath_hal_memcpy>
	}

	ath_buf_set_rate(sc, bf);
  909dc5:	da20      	mov.n	a10, a2
  909dc7:	db30      	mov.n	a11, a3
  909dc9:	5bfd2d        	call8	909280 <ath_buf_set_rate>
	bf->bf_txq_add(sc, bf);
  909dcc:	243210        	l32i	a4, a3, 64
  909dcf:	da20      	mov.n	a10, a2
  909dd1:	db30      	mov.n	a11, a3
  909dd3:	0b4000        	callx8	a4
  909dd6:	d10f      	retw.n

00909dd8 <ath_tgt_send_mgt>:
}

void
ath_tgt_send_mgt(struct ath_softc_tgt *sc,adf_nbuf_t hdr_buf, adf_nbuf_t skb,
		 HTC_ENDPOINT_ID endpt)
{
  909dd8:	6c1020        	entry	a1, 0x100
	struct ieee80211_node_target *ni;
	struct ieee80211vap_target *vap;
	struct ath_vap_target *avp;
	struct ath_hal *ah = sc->sc_ah;
  909ddb:	262d05        	addmi	a6, a2, 0x500
  909dde:	866b      	l32i.n	a6, a6, 44
  909de0:	2b0a84        	movi	a11, 132
  909de3:	26162d        	s32i	a6, a1, 180
  909de6:	2c0a80        	movi	a12, 128
	struct ath_rc_series rcs[4];
	HAL_11N_RATE_SERIES series[4];
	ath_mgt_hdr_t *mh;
	a_int8_t keyix;

	if (!hdr_buf) {
  909de9:	cd37      	bnez.n	a3, 909e04 <ath_tgt_send_mgt+0x2c>
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  909deb:	231c20        	addi	a3, a1, 32
  909dee:	da40      	mov.n	a10, a4
  909df0:	ab3b      	add.n	a11, a3, a11
  909df2:	0c3c08        	add	a12, a3, a12
  909df5:	5be624        	call8	903688 <__adf_nbuf_peek_header>
 *         or NULL if there is not sufficient data to pull.
 */
static inline a_uint8_t *
adf_nbuf_pull_head(adf_nbuf_t buf, adf_os_size_t size)
{
    return __adf_nbuf_pull_head(buf, size);
  909df8:	da40      	mov.n	a10, a4
  909dfa:	2b0a08        	movi	a11, 8
  909dfd:	5be57a        	call8	9033e8 <__adf_nbuf_pull_head>
  909e00:	60000c        	j	909e10 <ath_tgt_send_mgt+0x38>
  909e03:	00261c        	mul16u	a6, a2, a0
 *
 */
static inline void
adf_nbuf_peek_header(adf_nbuf_t buf, a_uint8_t **addr, a_uint32_t *len)
{
    __adf_nbuf_peek_header(buf, addr, len);
  909e06:	20da30        	movi	a0, 0xfffffd30
  909e09:	ab6b      	add.n	a11, a6, a11
  909e0b:	ac6c      	add.n	a12, a6, a12
  909e0d:	5be61e        	call8	903688 <__adf_nbuf_peek_header>
		adf_nbuf_pull_head(skb, sizeof(ath_mgt_hdr_t));
	} else {
		adf_nbuf_peek_header(hdr_buf, &data, &len);
	}

	adf_os_assert(len >= sizeof(ath_mgt_hdr_t));
  909e10:	231228        	l32i	a3, a1, 160
  909e13:	6f3802        	bgeui	a3, 8, 909e19 <ath_tgt_send_mgt+0x41>
  909e16:	63fffc        	j	909e16 <ath_tgt_send_mgt+0x3e>
  909e19:	281c20        	addi	a8, a1, 32
  909e1c:	2b0a84        	movi	a11, 132
  909e1f:	2c0a80        	movi	a12, 128
  909e22:	ab8b      	add.n	a11, a8, a11
  909e24:	0c8c08        	add	a12, a8, a12
  909e27:	044a02        	or	a10, a4, a4

	mh = (ath_mgt_hdr_t *)data;
  909e2a:	231229        	l32i	a3, a1, 164
  909e2d:	5be616        	call8	903688 <__adf_nbuf_peek_header>
  909e30:	2a1c70        	addi	a10, a1, 112
  909e33:	2b0a30        	movi	a11, 48
	adf_nbuf_peek_header(skb, &data, &len);
	wh = (struct ieee80211_frame *)data;
  909e36:	261229        	l32i	a6, a1, 164
  909e39:	5bfd0c        	call8	90926c <__adf_os_mem_set$constprop$13>
  909e3c:	2a1c20        	addi	a10, a1, 32
  909e3f:	c5b0      	movi.n	a11, 80
  909e41:	5bfd0a        	call8	90926c <__adf_os_mem_set$constprop$13>

	adf_os_mem_set(rcs, 0, sizeof(struct ath_rc_series)*4);
	adf_os_mem_set(series, 0, sizeof(HAL_11N_RATE_SERIES)*4);

	bf = asf_tailq_first(&sc->sc_txbuf);
  909e44:	2722f0        	l32i	a7, a2, 0x3c0
	if (!bf)
  909e47:	64732a        	beqz	a7, 90a175 <ath_tgt_send_mgt+0x39d>
		goto fail;

	asf_tailq_remove(&sc->sc_txbuf, bf, bf_list);
  909e4a:	8979      	l32i.n	a9, a7, 36
  909e4c:	8a7a      	l32i.n	a10, a7, 40
  909e4e:	c893      	beqz.n	a9, 909e55 <ath_tgt_send_mgt+0x7d>
  909e50:	9a9a      	s32i.n	a10, a9, 40
  909e52:	600002        	j	909e58 <ath_tgt_send_mgt+0x80>
  909e55:	2a26f1        	s32i	a10, a2, 0x3c4
  909e58:	8a7a      	l32i.n	a10, a7, 40
  909e5a:	99a0      	s32i.n	a9, a10, 0

	ni = ath_tgt_find_node(sc, mh->ni_index);
  909e5c:	293000        	l8ui	a9, a3, 0
							a_int32_t node_index)
{
	struct ath_node_target *an;
	struct ieee80211_node_target *ni;

	if (node_index > TARGET_NODE_MAX)
  909e5f:	c0a8      	movi.n	a10, 8
  909e61:	79aa02        	bge	a10, a9, 909e67 <ath_tgt_send_mgt+0x8f>
  909e64:	60030d        	j	90a175 <ath_tgt_send_mgt+0x39d>
	  	return NULL;

	an = &sc->sc_sta[node_index];
  909e67:	0a9e11        	slli	a14, a9, 6
  909e6a:	a9ee      	add.n	a14, a14, a9
  909e6c:	09ee09        	addx2	a14, a14, a9
  909e6f:	2a5a30        	movi	a10, 0x530
  909e72:	0aee0a        	addx4	a14, a14, a10
  909e75:	ae2e      	add.n	a14, a2, a14
  909e77:	b8ee      	addi.n	a14, a14, 8
	ni = &an->ni;

	if (an->an_valid) {
  909e79:	29ed02        	addmi	a9, a14, 0x200
  909e7c:	299004        	l8ui	a9, a9, 4
  909e7f:	6492f2        	beqz	a9, 90a175 <ath_tgt_send_mgt+0x39d>
		if (ni->ni_vap == NULL) {
  909e82:	89e8      	l32i.n	a9, a14, 32
  909e84:	6492ed        	beqz	a9, 90a175 <ath_tgt_send_mgt+0x39d>

	ni = ath_tgt_find_node(sc, mh->ni_index);
	if (!ni)
		goto fail;

	bf->bf_endpt = endpt;
  909e87:	257623        	s32i	a5, a7, 140
	bf->bf_cookie = mh->cookie;
  909e8a:	253006        	l8ui	a5, a3, 6
	bf->bf_protmode = mh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
	hdrlen = ieee80211_anyhdrsize(wh);
  909e8d:	da60      	mov.n	a10, a6
	ni = ath_tgt_find_node(sc, mh->ni_index);
	if (!ni)
		goto fail;

	bf->bf_endpt = endpt;
	bf->bf_cookie = mh->cookie;
  909e8f:	257492        	s8i	a5, a7, 146
	bf->bf_protmode = mh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
  909e92:	253003        	l8ui	a5, a3, 3
  909e95:	050541        	extui	a5, a5, 0, 2
  909e98:	257484        	s8i	a5, a7, 132
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
  909e9b:	296001        	l8ui	a9, a6, 1
  909e9e:	250a40        	movi	a5, 64
  909ea1:	059901        	and	a9, a9, a5
  909ea4:	291632        	s32i	a9, a1, 200
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
  909ea7:	256004        	l8ui	a5, a6, 4
	hdrlen = ieee80211_anyhdrsize(wh);
  909eaa:	2e1636        	s32i	a14, a1, 216
  909ead:	5bfbfe        	call8	908ea8 <ieee80211_anyhdrsize>
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
	pktlen -= (hdrlen & 3);
  909eb0:	0a0941        	extui	a9, a10, 0, 2
	bf->bf_cookie = mh->cookie;
	bf->bf_protmode = mh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
	hdrlen = ieee80211_anyhdrsize(wh);
  909eb3:	2a1633        	s32i	a10, a1, 204
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
	pktlen -= (hdrlen & 3);
  909eb6:	2a1228        	l32i	a10, a1, 160
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
	hdrlen = ieee80211_anyhdrsize(wh);
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
  909eb9:	280aff        	movi	a8, 255
	pktlen -= (hdrlen & 3);
  909ebc:	09a90c        	sub	a9, a10, a9
	pktlen += IEEE80211_CRC_LEN;
  909ebf:	b499      	addi.n	a9, a9, 4
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
	hdrlen = ieee80211_anyhdrsize(wh);
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
  909ec1:	281631        	s32i	a8, a1, 196
	pktlen -= (hdrlen & 3);
	pktlen += IEEE80211_CRC_LEN;

	if (iswep)
  909ec4:	281232        	l32i	a8, a1, 200
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
	hdrlen = ieee80211_anyhdrsize(wh);
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
	pktlen -= (hdrlen & 3);
	pktlen += IEEE80211_CRC_LEN;
  909ec7:	29162f        	s32i	a9, a1, 188
	bf->bf_endpt = endpt;
	bf->bf_cookie = mh->cookie;
	bf->bf_protmode = mh->flags & (IEEE80211_PROT_RTSCTS | IEEE80211_PROT_CTSONLY);
	txq = &sc->sc_txq[1];
	iswep = wh->i_fc[1] & IEEE80211_FC1_WEP;
	ismcast = IEEE80211_IS_MULTICAST(wh->i_addr1);
  909eca:	050540        	extui	a5, a5, 0, 1
	pktlen = len;
	keyix = HAL_TXKEYIX_INVALID;
	pktlen -= (hdrlen & 3);
	pktlen += IEEE80211_CRC_LEN;

	if (iswep)
  909ecd:	2e1236        	l32i	a14, a1, 216
  909ed0:	648005        	beqz	a8, 909ed9 <ath_tgt_send_mgt+0x101>
		keyix = mh->keyix;
  909ed3:	283005        	l8ui	a8, a3, 5
  909ed6:	281631        	s32i	a8, a1, 196
adf_nbuf_map(adf_os_device_t        osdev, 
             adf_os_dma_map_t       bmap, 
             adf_nbuf_t             buf, 
             adf_os_dma_dir_t       dir)
{
    return __adf_nbuf_map(osdev, bmap, buf, dir);
  909ed9:	8b70      	l32i.n	a11, a7, 0
  909edb:	2a2246        	l32i	a10, a2, 0x118
  909ede:	dc40      	mov.n	a12, a4
  909ee0:	c0d0      	movi.n	a13, 0
  909ee2:	2e1636        	s32i	a14, a1, 216
  909ee5:	5be577        	call8	9034c4 <__adf_nbuf_map>
 * @param[in] buf   buf
 */
static inline void
adf_nbuf_queue_add(adf_nbuf_queue_t *head, adf_nbuf_t buf)
{
    __adf_nbuf_queue_add(head, buf);
  909ee8:	db40      	mov.n	a11, a4

	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, skb, ADF_OS_DMA_TO_DEVICE);

	bf->bf_skb = skb;
  909eea:	9478      	s32i.n	a4, a7, 32
  909eec:	2a7c14        	addi	a10, a7, 20
  909eef:	5be55c        	call8	903460 <__adf_nbuf_queue_add>
	adf_nbuf_queue_add(&bf->bf_skbhead, skb);

	ds = bf->bf_desc;
  909ef2:	847c      	l32i.n	a4, a7, 48
	rt = sc->sc_currates;
  909ef4:	292281        	l32i	a9, a2, 0x204
	adf_nbuf_map(sc->sc_dev, bf->bf_dmamap, skb, ADF_OS_DMA_TO_DEVICE);

	bf->bf_skb = skb;
	adf_nbuf_queue_add(&bf->bf_skbhead, skb);

	ds = bf->bf_desc;
  909ef7:	241630        	s32i	a4, a1, 192
	rt = sc->sc_currates;
	adf_os_assert(rt != NULL);
  909efa:	2e1236        	l32i	a14, a1, 216
  909efd:	cc93      	bnez.n	a9, 909f04 <ath_tgt_send_mgt+0x12c>
  909eff:	63fffc        	j	909eff <ath_tgt_send_mgt+0x127>
  909f02:	000024        	excw

	if (mh->flags == ATH_SHORT_PREAMBLE)
  909f05:	3003c0        	excw
  909f08:	c0b0      	movi.n	a11, 0
  909f0a:	44c0a1        	excw
  909f0d:	d8c0      	mov.n	a8, a12
	else
		shortPreamble = AH_FALSE;

	flags = HAL_TXDESC_CLRDMASK;

	switch (wh->i_fc[0] & IEEE80211_FC0_TYPE_MASK) {
  909f0f:	2b6000        	l8ui	a11, a6, 0

	ds = bf->bf_desc;
	rt = sc->sc_currates;
	adf_os_assert(rt != NULL);

	if (mh->flags == ATH_SHORT_PREAMBLE)
  909f12:	04a838        	moveqz	a8, a10, a4
	else
		shortPreamble = AH_FALSE;

	flags = HAL_TXDESC_CLRDMASK;

	switch (wh->i_fc[0] & IEEE80211_FC0_TYPE_MASK) {
  909f15:	c04c      	movi.n	a4, 12
  909f17:	04b401        	and	a4, a11, a4
  909f1a:	7c491f        	bne	a4, a12, 909f3d <ath_tgt_send_mgt+0x165>
	case IEEE80211_FC0_TYPE_MGT:
		subtype = wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK;
  909f1d:	c7c0      	movi.n	a12, -16
  909f1f:	0cbb01        	and	a11, a11, a12

		if (subtype == IEEE80211_FC0_SUBTYPE_PROBE_RESP)
			atype = HAL_PKT_TYPE_PROBE_RESP;
  909f22:	c0c4      	movi.n	a12, 4
  909f24:	2c162e        	s32i	a12, a1, 184

	switch (wh->i_fc[0] & IEEE80211_FC0_TYPE_MASK) {
	case IEEE80211_FC0_TYPE_MGT:
		subtype = wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK;

		if (subtype == IEEE80211_FC0_SUBTYPE_PROBE_RESP)
  909f27:	c5c0      	movi.n	a12, 80
  909f29:	7cb113        	beq	a11, a12, 909f40 <ath_tgt_send_mgt+0x168>
			atype = HAL_PKT_TYPE_PROBE_RESP;
		else if (subtype == IEEE80211_FC0_SUBTYPE_ATIM)
  909f2c:	2cfa70        	movi	a12, -144
  909f2f:	acbb      	add.n	a11, a11, a12
  909f31:	0ba438        	moveqz	a4, a10, a11
  909f34:	24162e        	s32i	a4, a1, 184
  909f37:	600005        	j	909f40 <ath_tgt_send_mgt+0x168>
  909f3a:	000000        	ill
		else
			atype = HAL_PKT_TYPE_NORMAL;

		break;
	default:
		atype = HAL_PKT_TYPE_NORMAL;
  909f3d:	2c162e        	s32i	a12, a1, 184
		break;
	}

	avp = &sc->sc_vap[mh->vap_index];
  909f40:	243001        	l8ui	a4, a3, 1
  909f43:	1a72a2        	l32r	a10, 8e69cc <memset+0x1830>
  909f46:	0c4b11        	slli	a11, a4, 4
  909f49:	a4bb      	add.n	a11, a11, a4
  909f4b:	0abb0a        	addx4	a11, a11, a10
  909f4e:	ab2b      	add.n	a11, a2, a11

	rcs[0].rix = ath_get_minrateidx(sc, avp);
  909f50:	b8bb      	addi.n	a11, a11, 8
  909f52:	022a02        	or	a10, a2, a2
  909f55:	281635        	s32i	a8, a1, 212
  909f58:	291634        	s32i	a9, a1, 208
  909f5b:	2e1636        	s32i	a14, a1, 216
	rcs[0].tries = ATH_TXMAXTRY;
  909f5e:	240a0b        	movi	a4, 11
		break;
	}

	avp = &sc->sc_vap[mh->vap_index];

	rcs[0].rix = ath_get_minrateidx(sc, avp);
  909f61:	5bf754        	call8	907cb4 <ath_get_minrateidx>
  909f64:	2a1470        	s8i	a10, a1, 112
	rcs[0].tries = ATH_TXMAXTRY;
  909f67:	241471        	s8i	a4, a1, 113
 * @param[in] size    buffer size
 */
static inline void
adf_os_mem_copy(void *dst, const void *src, adf_os_size_t size)
{
    __adf_os_mem_copy(dst, src, size);
  909f6a:	2a7c50        	addi	a10, a7, 80
	rcs[0].flags = 0;
  909f6d:	240a00        	movi	a4, 0
  909f70:	2c0a30        	movi	a12, 48
  909f73:	2b1c70        	addi	a11, a1, 112
  909f76:	241473        	s8i	a4, a1, 115
  909f79:	5bfbc6        	call8	908e94 <__adf_os_mem_copy>

	adf_os_mem_copy(bf->bf_rcs, rcs, sizeof(rcs));
	rix = rcs[0].rix;
	try0 = rcs[0].tries;
	txrate = rt->info[rix].rateCode;
  909f7c:	2d1070        	l8ui	a13, a1, 112
  909f7f:	291234        	l32i	a9, a1, 208
  909f82:	b2d4      	addi.n	a4, a13, 2
  909f84:	0c4411        	slli	a4, a4, 4
  909f87:	a494      	add.n	a4, a9, a4
  909f89:	2a4010        	l8ui	a10, a4, 16

	if (shortPreamble){
  909f8c:	281235        	l32i	a8, a1, 212
	rcs[0].flags = 0;

	adf_os_mem_copy(bf->bf_rcs, rcs, sizeof(rcs));
	rix = rcs[0].rix;
	try0 = rcs[0].tries;
	txrate = rt->info[rix].rateCode;
  909f8f:	2a162c        	s32i	a10, a1, 176
	rcs[0].tries = ATH_TXMAXTRY;
	rcs[0].flags = 0;

	adf_os_mem_copy(bf->bf_rcs, rcs, sizeof(rcs));
	rix = rcs[0].rix;
	try0 = rcs[0].tries;
  909f92:	2c1071        	l8ui	a12, a1, 113
	txrate = rt->info[rix].rateCode;

	if (shortPreamble){
  909f95:	2e1236        	l32i	a14, a1, 216
  909f98:	648008        	beqz	a8, 909fa4 <ath_tgt_send_mgt+0x1cc>
		txrate |= rt->info[rix].shortPreamble;
  909f9b:	244011        	l8ui	a4, a4, 17
  909f9e:	04aa02        	or	a10, a10, a4
  909fa1:	2a162c        	s32i	a10, a1, 176
	}

	vap = ni->ni_vap;
  909fa4:	84e8      	l32i.n	a4, a14, 32
	bf->bf_node = ni;
  909fa6:	9e74      	s32i.n	a14, a7, 16

	if (ismcast) {
  909fa8:	cd56      	bnez.n	a5, 909fc2 <ath_tgt_send_mgt+0x1ea>
		flags |= HAL_TXDESC_NOACK;
		try0 = 1;
	} else if (pktlen > vap->iv_rtsthreshold) {
  909faa:	244105        	l16ui	a4, a4, 10
  909fad:	25122f        	l32i	a5, a1, 188
  909fb0:	754a16        	bge	a4, a5, 909fca <ath_tgt_send_mgt+0x1f2>
		flags |= HAL_TXDESC_RTSENA;
		cix = rt->info[rix].controlRate;
  909fb3:	b2d4      	addi.n	a4, a13, 2
  909fb5:	0c4411        	slli	a4, a4, 4
  909fb8:	a494      	add.n	a4, a9, a4
  909fba:	2b4013        	l8ui	a11, a4, 19

	if (ismcast) {
		flags |= HAL_TXDESC_NOACK;
		try0 = 1;
	} else if (pktlen > vap->iv_rtsthreshold) {
		flags |= HAL_TXDESC_RTSENA;
  909fbd:	c055      	movi.n	a5, 5
  909fbf:	60000c        	j	909fcf <ath_tgt_send_mgt+0x1f7>
	vap = ni->ni_vap;
	bf->bf_node = ni;

	if (ismcast) {
		flags |= HAL_TXDESC_NOACK;
		try0 = 1;
  909fc2:	c0c1      	movi.n	a12, 1

	vap = ni->ni_vap;
	bf->bf_node = ni;

	if (ismcast) {
		flags |= HAL_TXDESC_NOACK;
  909fc4:	c053      	movi.n	a5, 3
  909fc6:	600002        	j	909fcc <ath_tgt_send_mgt+0x1f4>
  909fc9:	00c051        	extui	a0, a0, 28, 2
{
	struct ieee80211_node_target *ni;
	struct ieee80211vap_target *vap;
	struct ath_vap_target *avp;
	struct ath_hal *ah = sc->sc_ah;
	a_uint8_t rix, txrate, ctsrate, cix = 0xff, *data;
  909fcc:	2b0aff        	movi	a11, 255
	} else if (pktlen > vap->iv_rtsthreshold) {
		flags |= HAL_TXDESC_RTSENA;
		cix = rt->info[rix].controlRate;
	}

	if ((bf->bf_protmode != IEEE80211_PROT_NONE) &&
  909fcf:	247084        	l8ui	a4, a7, 132
  909fd2:	ca46      	beqz.n	a4, 909ffc <ath_tgt_send_mgt+0x224>
	    rt->info[rix].phy == IEEE80211_T_OFDM &&
  909fd4:	b2d4      	addi.n	a4, a13, 2
  909fd6:	0c4411        	slli	a4, a4, 4
  909fd9:	a494      	add.n	a4, a9, a4
	} else if (pktlen > vap->iv_rtsthreshold) {
		flags |= HAL_TXDESC_RTSENA;
		cix = rt->info[rix].controlRate;
	}

	if ((bf->bf_protmode != IEEE80211_PROT_NONE) &&
  909fdb:	244009        	l8ui	a4, a4, 9
  909fde:	69421a        	bnei	a4, 2, 909ffc <ath_tgt_send_mgt+0x224>
	    rt->info[rix].phy == IEEE80211_T_OFDM &&
  909fe1:	745817        	bany	a5, a4, 909ffc <ath_tgt_send_mgt+0x224>
	    (flags & HAL_TXDESC_NOACK) == 0) {
		cix = rt->info[sc->sc_protrix].controlRate;
  909fe4:	242d03        	addmi	a4, a2, 0x300
  909fe7:	24400c        	l8ui	a4, a4, 12
  909fea:	b244      	addi.n	a4, a4, 2
  909fec:	0c4411        	slli	a4, a4, 4
  909fef:	a494      	add.n	a4, a9, a4
  909ff1:	2b4013        	l8ui	a11, a4, 19
		sc->sc_tx_stats.ast_tx_protect++;
  909ff4:	24225a        	l32i	a4, a2, 0x168
  909ff7:	b144      	addi.n	a4, a4, 1
  909ff9:	24265a        	s32i	a4, a2, 0x168
	}

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
  909ffc:	24e10c        	l16ui	a4, a14, 24
							   IEEE80211_SEQ_SEQ_SHIFT);
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);

	ctsduration = 0;
	if (flags & (HAL_TXDESC_RTSENA|HAL_TXDESC_CTSENA)) {
  909fff:	c0fc      	movi.n	a15, 12
	    (flags & HAL_TXDESC_NOACK) == 0) {
		cix = rt->info[sc->sc_protrix].controlRate;
		sc->sc_tx_stats.ast_tx_protect++;
	}

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
  90a001:	0c4411        	slli	a4, a4, 4
  90a004:	04044f        	extui	a4, a4, 0, 16

#undef adf_os_cpu_to_le16

static a_uint16_t adf_os_cpu_to_le16(a_uint16_t x)
{
	return ((((x) & 0xff00) >> 8) |   (((x) & 0x00ff) << 8));
  90a007:	084a11        	slli	a10, a4, 8
  90a00a:	048414        	srli	a4, a4, 8
  90a00d:	04a402        	or	a4, a10, a4
	    (flags & HAL_TXDESC_NOACK) == 0) {
		cix = rt->info[sc->sc_protrix].controlRate;
		sc->sc_tx_stats.ast_tx_protect++;
	}

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
  90a010:	24650b        	s16i	a4, a6, 22
							   IEEE80211_SEQ_SEQ_SHIFT);
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90a013:	24e10c        	l16ui	a4, a14, 24

	ctsduration = 0;
	if (flags & (HAL_TXDESC_RTSENA|HAL_TXDESC_CTSENA)) {
  90a016:	0f5f01        	and	a15, a5, a15
		sc->sc_tx_stats.ast_tx_protect++;
	}

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
							   IEEE80211_SEQ_SEQ_SHIFT);
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);
  90a019:	b144      	addi.n	a4, a4, 1
  90a01b:	04044b        	extui	a4, a4, 0, 12
  90a01e:	24e50c        	s16i	a4, a14, 24

	ctsduration = 0;
	if (flags & (HAL_TXDESC_RTSENA|HAL_TXDESC_CTSENA)) {
  90a021:	64f065        	beqz	a15, 90a08a <ath_tgt_send_mgt+0x2b2>
		adf_os_assert(cix != 0xff);
  90a024:	240aff        	movi	a4, 255
  90a027:	74b902        	bne	a11, a4, 90a02d <ath_tgt_send_mgt+0x255>
  90a02a:	63fffc        	j	90a02a <ath_tgt_send_mgt+0x252>
		ctsrate = rt->info[cix].rateCode;
  90a02d:	b2ba      	addi.n	a10, a11, 2
  90a02f:	0caa11        	slli	a10, a10, 4
  90a032:	aa9a      	add.n	a10, a9, a10
  90a034:	24a010        	l8ui	a4, a10, 16
  90a037:	c0c4      	movi.n	a12, 4
		if (shortPreamble) {
  90a039:	c98c      	beqz.n	a8, 90a059 <ath_tgt_send_mgt+0x281>
			ctsrate |= rt->info[cix].shortPreamble;
  90a03b:	2ea011        	l8ui	a14, a10, 17

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
							   IEEE80211_SEQ_SEQ_SHIFT);
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);

	ctsduration = 0;
  90a03e:	c0f0      	movi.n	a15, 0
	if (flags & (HAL_TXDESC_RTSENA|HAL_TXDESC_CTSENA)) {
		adf_os_assert(cix != 0xff);
		ctsrate = rt->info[cix].rateCode;
		if (shortPreamble) {
			ctsrate |= rt->info[cix].shortPreamble;
  90a040:	0e4402        	or	a4, a4, a14
			if (flags & HAL_TXDESC_RTSENA)      /* SIFS + CTS */
  90a043:	7c5002        	bnone	a5, a12, 90a049 <ath_tgt_send_mgt+0x271>
				ctsduration += rt->info[cix].spAckDuration;
  90a046:	2fa10b        	l16ui	a15, a10, 22
			if ((flags & HAL_TXDESC_NOACK) == 0)    /* SIFS + ACK */
  90a049:	7e5f23        	bbsi	a5, 30, 90a070 <ath_tgt_send_mgt+0x298>
				ctsduration += rt->info[cix].spAckDuration;
  90a04c:	b2bb      	addi.n	a11, a11, 2
  90a04e:	0cbb11        	slli	a11, a11, 4
  90a051:	ab9b      	add.n	a11, a9, a11
  90a053:	2ab10b        	l16ui	a10, a11, 22
  90a056:	600014        	j	90a06e <ath_tgt_send_mgt+0x296>

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
							   IEEE80211_SEQ_SEQ_SHIFT);
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);

	ctsduration = 0;
  90a059:	df80      	mov.n	a15, a8
			if (flags & HAL_TXDESC_RTSENA)      /* SIFS + CTS */
				ctsduration += rt->info[cix].spAckDuration;
			if ((flags & HAL_TXDESC_NOACK) == 0)    /* SIFS + ACK */
				ctsduration += rt->info[cix].spAckDuration;
		} else {
			if (flags & HAL_TXDESC_RTSENA)      /* SIFS + CTS */
  90a05b:	7c5002        	bnone	a5, a12, 90a061 <ath_tgt_send_mgt+0x289>
				ctsduration += rt->info[cix].lpAckDuration;
  90a05e:	2fa10a        	l16ui	a15, a10, 20
			if ((flags & HAL_TXDESC_NOACK) == 0)    /* SIFS + ACK */
  90a061:	7e5f0b        	bbsi	a5, 30, 90a070 <ath_tgt_send_mgt+0x298>
				ctsduration += rt->info[cix].lpAckDuration;
  90a064:	b2bb      	addi.n	a11, a11, 2
  90a066:	0cbb11        	slli	a11, a11, 4
  90a069:	ab9b      	add.n	a11, a9, a11
  90a06b:	2ab10a        	l16ui	a10, a11, 20
  90a06e:	aaff      	add.n	a15, a15, a10
		}
		ctsduration += ath_hal_computetxtime(ah,
  90a070:	2c122f        	l32i	a12, a1, 188
  90a073:	2a122d        	l32i	a10, a1, 180
  90a076:	db90      	mov.n	a11, a9
  90a078:	de80      	mov.n	a14, a8
  90a07a:	2f1634        	s32i	a15, a1, 208
  90a07d:	5bebb9        	call8	904f64 <ath_hal_computetxtime>
  90a080:	2f1234        	l32i	a15, a1, 208
						     rt, pktlen, rix, shortPreamble);
		try0 = 1;
  90a083:	c0c1      	movi.n	a12, 1
			if (flags & HAL_TXDESC_RTSENA)      /* SIFS + CTS */
				ctsduration += rt->info[cix].lpAckDuration;
			if ((flags & HAL_TXDESC_NOACK) == 0)    /* SIFS + ACK */
				ctsduration += rt->info[cix].lpAckDuration;
		}
		ctsduration += ath_hal_computetxtime(ah,
  90a085:	afaa      	add.n	a10, a10, a15
  90a087:	600003        	j	90a08e <ath_tgt_send_mgt+0x2b6>

	*(a_uint16_t *)&wh->i_seq[0] =  adf_os_cpu_to_le16(ni->ni_txseqmgmt <<
							   IEEE80211_SEQ_SEQ_SHIFT);
	INCR(ni->ni_txseqmgmt, IEEE80211_SEQ_MAX);

	ctsduration = 0;
  90a08a:	daf0      	mov.n	a10, a15
		}
		ctsduration += ath_hal_computetxtime(ah,
						     rt, pktlen, rix, shortPreamble);
		try0 = 1;
	} else
		ctsrate = 0;
  90a08c:	d4f0      	mov.n	a4, a15

	flags |= HAL_TXDESC_INTREQ;

	ah->ah_setupTxDesc(ds
  90a08e:	281231        	l32i	a8, a1, 196
						     rt, pktlen, rix, shortPreamble);
		try0 = 1;
	} else
		ctsrate = 0;

	flags |= HAL_TXDESC_INTREQ;
  90a091:	c190      	movi.n	a9, 16
  90a093:	095502        	or	a5, a5, a9

	ah->ah_setupTxDesc(ds
  90a096:	008932        	sext	a9, a8, 7
  90a099:	28122d        	l32i	a8, a1, 180
  90a09c:	9c10      	s32i.n	a12, a1, 0
  90a09e:	9512      	s32i.n	a5, a1, 8
  90a0a0:	9a14      	s32i.n	a10, a1, 16
  90a0a2:	9911      	s32i.n	a9, a1, 4
  90a0a4:	9413      	s32i.n	a4, a1, 12
  90a0a6:	298217        	l32i	a9, a8, 92
  90a0a9:	2a1230        	l32i	a10, a1, 192
  90a0ac:	2b122f        	l32i	a11, a1, 188
  90a0af:	2c1233        	l32i	a12, a1, 204
  90a0b2:	2d122e        	l32i	a13, a1, 184
  90a0b5:	2f122c        	l32i	a15, a1, 176
  90a0b8:	c3ec      	movi.n	a14, 60
  90a0ba:	0b9000        	callx8	a9
			    , keyix
			    , flags
			    , ctsrate
			    , ctsduration);

	bf->bf_flags = flags;
  90a0bd:	257544        	s16i	a5, a7, 136

	/*
	 * Set key type in tx desc while sending the encrypted challenge to AP
	 * in Auth frame 3 of Shared Authentication, owl needs this.
	 */
	if (iswep && (keyix != HAL_TXKEYIX_INVALID) &&
  90a0c0:	251232        	l32i	a5, a1, 200
  90a0c3:	c95f      	beqz.n	a5, 90a0e6 <ath_tgt_send_mgt+0x30e>
			(wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK) == IEEE80211_FC0_SUBTYPE_AUTH)
  90a0c5:	266000        	l8ui	a6, a6, 0
  90a0c8:	250af0        	movi	a5, 240

	/*
	 * Set key type in tx desc while sending the encrypted challenge to AP
	 * in Auth frame 3 of Shared Authentication, owl needs this.
	 */
	if (iswep && (keyix != HAL_TXKEYIX_INVALID) &&
  90a0cb:	056601        	and	a6, a6, a5
  90a0ce:	250ab0        	movi	a5, 176
  90a0d1:	756911        	bne	a6, a5, 90a0e6 <ath_tgt_send_mgt+0x30e>
			(wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK) == IEEE80211_FC0_SUBTYPE_AUTH)
		ah->ah_fillKeyTxDesc(ds, mh->keytype);
  90a0d4:	26122d        	l32i	a6, a1, 180
  90a0d7:	2b3004        	l8ui	a11, a3, 4
  90a0da:	2a1230        	l32i	a10, a1, 192
  90a0dd:	236219        	l32i	a3, a6, 100
  90a0e0:	00bb32        	sext	a11, a11, 7
  90a0e3:	0b3000        	callx8	a3

	ath_filltxdesc(sc, bf);
  90a0e6:	da20      	mov.n	a10, a2
  90a0e8:	db70      	mov.n	a11, a7
  90a0ea:	5bfbf8        	call8	9090cc <ath_filltxdesc>

	for (i=0; i<4; i++) {
		series[i].Tries = 2;
		series[i].Rate = txrate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90a0ed:	232d16        	addmi	a3, a2, 0x1600
  90a0f0:	2a3026        	l8ui	a10, a3, 38
	sc->sc_tx_stats.ast_tx_shortretry += sr;
	sc->sc_tx_stats.ast_tx_longretry += lr;
}

void
ath_tgt_send_mgt(struct ath_softc_tgt *sc,adf_nbuf_t hdr_buf, adf_nbuf_t skb,
  90a0f3:	261c70        	addi	a6, a1, 112
  90a0f6:	231c20        	addi	a3, a1, 32
		ah->ah_fillKeyTxDesc(ds, mh->keytype);

	ath_filltxdesc(sc, bf);

	for (i=0; i<4; i++) {
		series[i].Tries = 2;
  90a0f9:	c0b2      	movi.n	a11, 2
		series[i].Rate = txrate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
		series[i].RateFlags = 0;
  90a0fb:	c090      	movi.n	a9, 0

	ath_filltxdesc(sc, bf);

	for (i=0; i<4; i++) {
		series[i].Tries = 2;
		series[i].Rate = txrate;
  90a0fd:	28122c        	l32i	a8, a1, 176
		ah->ah_fillKeyTxDesc(ds, mh->keytype);

	ath_filltxdesc(sc, bf);

	for (i=0; i<4; i++) {
		series[i].Tries = 2;
  90a100:	9b30      	s32i.n	a11, a3, 0
		series[i].Rate = txrate;
  90a102:	9831      	s32i.n	a8, a3, 4
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
  90a104:	9a33      	s32i.n	a10, a3, 12
		series[i].RateFlags = 0;
  90a106:	9934      	s32i.n	a9, a3, 16
  90a108:	233c14        	addi	a3, a3, 20
  90a10b:	c050      	movi.n	a5, 0
			(wh->i_fc[0] & IEEE80211_FC0_SUBTYPE_MASK) == IEEE80211_FC0_SUBTYPE_AUTH)
		ah->ah_fillKeyTxDesc(ds, mh->keytype);

	ath_filltxdesc(sc, bf);

	for (i=0; i<4; i++) {
  90a10d:	7639ec        	bne	a3, a6, 90a0fd <ath_tgt_send_mgt+0x325>
		series[i].Tries = 2;
		series[i].Rate = txrate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
		series[i].RateFlags = 0;
	}
	ah->ah_set11nRateScenario(ds, 0, ctsrate, series, 4, 0);
  90a110:	26122d        	l32i	a6, a1, 180
  90a113:	2a1230        	l32i	a10, a1, 192
  90a116:	236210        	l32i	a3, a6, 64
  90a119:	db50      	mov.n	a11, a5
  90a11b:	dc40      	mov.n	a12, a4
  90a11d:	df50      	mov.n	a15, a5
  90a11f:	2d1c20        	addi	a13, a1, 32
  90a122:	2e0a04        	movi	a14, 4
  90a125:	0b3000        	callx8	a3
static void
ath_tgt_txqaddbuf(struct ath_softc_tgt *sc,
		  struct ath_txq *txq, struct ath_tx_buf *bf,
		  struct ath_tx_desc *lastds)
{
	struct ath_hal *ah = sc->sc_ah;
  90a128:	232d05        	addmi	a3, a2, 0x500
  90a12b:	843b      	l32i.n	a4, a3, 44

	ATH_TXQ_INSERT_TAIL(txq, bf, bf_list);
  90a12d:	233aec        	movi	a3, 0x3ec
  90a130:	a323      	add.n	a3, a2, a3
  90a132:	9579      	s32i.n	a5, a7, 36
  90a134:	8533      	l32i.n	a5, a3, 12
		series[i].Rate = txrate;
		series[i].ChSel = sc->sc_ic.ic_tx_chainmask;
		series[i].RateFlags = 0;
	}
	ah->ah_set11nRateScenario(ds, 0, ctsrate, series, 4, 0);
	ath_tgt_txqaddbuf(sc, txq, bf, bf->bf_lastds);
  90a136:	867e      	l32i.n	a6, a7, 56
		  struct ath_txq *txq, struct ath_tx_buf *bf,
		  struct ath_tx_desc *lastds)
{
	struct ath_hal *ah = sc->sc_ah;

	ATH_TXQ_INSERT_TAIL(txq, bf, bf_list);
  90a138:	957a      	s32i.n	a5, a7, 40
  90a13a:	9750      	s32i.n	a7, a5, 0
  90a13c:	257c24        	addi	a5, a7, 36
  90a13f:	9533      	s32i.n	a5, a3, 12
  90a141:	8534      	l32i.n	a5, a3, 16
  90a143:	9735      	s32i.n	a7, a3, 20
  90a145:	b155      	addi.n	a5, a5, 1
  90a147:	9534      	s32i.n	a5, a3, 16

	if (txq->axq_link == NULL) {
  90a149:	8531      	l32i.n	a5, a3, 4
  90a14b:	cc5d      	bnez.n	a5, 90a15c <ath_tgt_send_mgt+0x384>
		ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
  90a14d:	854a      	l32i.n	a5, a4, 40
  90a14f:	8b30      	l32i.n	a11, a3, 0
  90a151:	8c7c      	l32i.n	a12, a7, 48
  90a153:	da40      	mov.n	a10, a4
  90a155:	0b5000        	callx8	a5
  90a158:	600004        	j	90a160 <ath_tgt_send_mgt+0x388>
  90a15b:	00837c        	excw
	} else {
		*txq->axq_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
  90a15e:	9350      	s32i.n	a3, a5, 0
	}

	txq->axq_link = &lastds->ds_link;
  90a160:	233aec        	movi	a3, 0x3ec
  90a163:	a322      	add.n	a2, a2, a3
	ah->ah_startTxDma(ah, txq->axq_qnum);
  90a165:	8b20      	l32i.n	a11, a2, 0
  90a167:	834c      	l32i.n	a3, a4, 48
		ah->ah_setTxDP(ah, txq->axq_qnum, ATH_BUF_GET_DESC_PHY_ADDR(bf));
	} else {
		*txq->axq_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
	}

	txq->axq_link = &lastds->ds_link;
  90a169:	9621      	s32i.n	a6, a2, 4
	ah->ah_startTxDma(ah, txq->axq_qnum);
  90a16b:	da40      	mov.n	a10, a4
  90a16d:	0b3000        	callx8	a3
  90a170:	d10f      	retw.n
  90a172:	000000        	ill
	ah->ah_set11nRateScenario(ds, 0, ctsrate, series, 4, 0);
	ath_tgt_txqaddbuf(sc, txq, bf, bf->bf_lastds);

	return;
fail:
	HTC_ReturnBuffers(sc->tgt_htc_handle, endpt, skb);
  90a175:	137182        	l32r	a3, 8e6780 <memset+0x15e4>
  90a178:	8a22      	l32i.n	a10, a2, 8
  90a17a:	233287        	l32i	a3, a3, 0x21c
  90a17d:	db50      	mov.n	a11, a5
  90a17f:	dc40      	mov.n	a12, a4
  90a181:	0b3000        	callx8	a3
  90a184:	d10f      	retw.n
	...

0090a188 <ath_tgt_handle_normal>:
	txq->axq_link = &lastds->ds_link;
	ah->ah_startTxDma(ah, txq->axq_qnum);
}

void ath_tgt_handle_normal(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90a188:	6c1004        	entry	a1, 32
	ath_atx_tid_t *tid;
	struct ath_node_target *an;

	an = (struct ath_node_target *)bf->bf_node;
  90a18b:	8934      	l32i.n	a9, a3, 16
	txq->axq_link = &lastds->ds_link;
	ah->ah_startTxDma(ah, txq->axq_qnum);
}

void ath_tgt_handle_normal(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90a18d:	da20      	mov.n	a10, a2
  90a18f:	db30      	mov.n	a11, a3
	ath_atx_tid_t *tid;
	struct ath_node_target *an;

	an = (struct ath_node_target *)bf->bf_node;
	adf_os_assert(an);
  90a191:	cc94      	bnez.n	a9, 90a199 <ath_tgt_handle_normal+0x11>
  90a193:	63fffc        	j	90a193 <ath_tgt_handle_normal+0xb>
  90a196:	000000        	ill

	tid = &an->tid[bf->bf_tidno];
  90a199:	28304d        	l8ui	a8, a3, 77
  90a19c:	0c8c11        	slli	a12, a8, 4
  90a19f:	08c80c        	sub	a8, a12, a8
  90a1a2:	09880a        	addx4	a8, a8, a9
	adf_os_assert(tid);

	bf->bf_comp = ath_tgt_tx_comp_normal;
  90a1a5:	1972c8        	l32r	a9, 8e6cc8 <memset+0x1b2c>
  90a1a8:	993f      	s32i.n	a9, a3, 60
	INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90a1aa:	298114        	l16ui	a9, a8, 40
  90a1ad:	b199      	addi.n	a9, a9, 1
  90a1af:	09094b        	extui	a9, a9, 0, 12
  90a1b2:	298514        	s16i	a9, a8, 40
	ath_tgt_tx_send_normal(sc, bf);
  90a1b5:	5bfee7        	call8	909d54 <ath_tgt_tx_send_normal>
  90a1b8:	d10f      	retw.n
	...

0090a1bc <ath_tx_addto_baw>:

	return ATH_TGT_AGGR_DONE;
}

void ath_tx_addto_baw(ath_atx_tid_t *tid, struct ath_tx_buf *bf)
{
  90a1bc:	6c1004        	entry	a1, 32
	int index, cindex;

	if (bf->bf_isretried) {
  90a1bf:	283221        	l32i	a8, a3, 132
  90a1c2:	7b8f3e        	bbsi	a8, 27, 90a204 <ath_tx_addto_baw+0x48>
		return;
	}

	index  = ATH_BA_INDEX(tid->seq_start, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90a1c5:	293123        	l16ui	a9, a3, 70
  90a1c8:	232102        	l16ui	a3, a2, 4
  90a1cb:	094914        	srli	a9, a9, 4
  90a1ce:	03990c        	sub	a9, a9, a3
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);
  90a1d1:	8a23      	l32i.n	a10, a2, 12

	if (bf->bf_isretried) {
		return;
	}

	index  = ATH_BA_INDEX(tid->seq_start, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90a1d3:	09094b        	extui	a9, a9, 0, 12
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);
  90a1d6:	a9ac      	add.n	a12, a10, a9
  90a1d8:	0c0846        	extui	a8, a12, 0, 7

	TX_BUF_BITMAP_SET(tid->tx_buf_bitmap, cindex);
  90a1db:	085b12        	srai	a11, a8, 5
  90a1de:	b4bb      	addi.n	a11, a11, 4
  90a1e0:	02bb0a        	addx4	a11, a11, a2
  90a1e3:	c031      	movi.n	a3, 1
  90a1e5:	00c104        	ssl	a12
  90a1e8:	003c1a        	sll	a12, a3
  90a1eb:	83b1      	l32i.n	a3, a11, 4
  90a1ed:	0c3c02        	or	a12, a3, a12

	if (index >= ((tid->baw_tail - tid->baw_head) & (ATH_TID_MAX_BUFS - 1))) {
  90a1f0:	8324      	l32i.n	a3, a2, 16
	}

	index  = ATH_BA_INDEX(tid->seq_start, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);

	TX_BUF_BITMAP_SET(tid->tx_buf_bitmap, cindex);
  90a1f2:	9cb1      	s32i.n	a12, a11, 4

	if (index >= ((tid->baw_tail - tid->baw_head) & (ATH_TID_MAX_BUFS - 1))) {
  90a1f4:	0a3a0c        	sub	a10, a3, a10
  90a1f7:	0a0a46        	extui	a10, a10, 0, 7
  90a1fa:	7a9206        	blt	a9, a10, 90a204 <ath_tx_addto_baw+0x48>
		tid->baw_tail = cindex;
		INCR(tid->baw_tail, ATH_TID_MAX_BUFS);
  90a1fd:	b188      	addi.n	a8, a8, 1
  90a1ff:	080846        	extui	a8, a8, 0, 7
  90a202:	9824      	s32i.n	a8, a2, 16
  90a204:	d10f      	retw.n
	...

0090a208 <ath_tgt_tx_form_aggr>:
	return aggr_limit;
}

int ath_tgt_tx_form_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid,
			 ath_tx_bufhead *bf_q)
{
  90a208:	6c100e        	entry	a1, 112
  90a20b:	9419      	s32i.n	a4, a1, 36
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
	int nframes = 0, rl = 0;;
	struct ath_tx_desc *ds = NULL;
	struct ath_tx_buf *bf;
	struct ath_hal *ah = sc->sc_ah;
  90a20d:	242d05        	addmi	a4, a2, 0x500
  90a210:	844b      	l32i.n	a4, a4, 44
  90a212:	c161      	movi.n	a6, 17
  90a214:	941b      	s32i.n	a4, a1, 44
	u_int16_t aggr_limit =  (64*1024 -1), al = 0, bpad = 0, al_delta;
	u_int16_t h_baw = tid->baw_size/2, prev_al = 0, prev_frames = 0;
  90a216:	243104        	l16ui	a4, a3, 8
  90a219:	961a      	s32i.n	a6, a1, 40
  90a21b:	041414        	srli	a4, a4, 1
  90a21e:	c160      	movi.n	a6, 16

	bf_first = asf_tailq_first(&tid->buf_q);
  90a220:	853b      	l32i.n	a5, a3, 44
  90a222:	746302        	bltu	a6, a4, 90a228 <ath_tgt_tx_form_aggr+0x20>
  90a225:	24160a        	s32i	a4, a1, 40
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
	int nframes = 0, rl = 0;;
	struct ath_tx_desc *ds = NULL;
	struct ath_tx_buf *bf;
	struct ath_hal *ah = sc->sc_ah;
	u_int16_t aggr_limit =  (64*1024 -1), al = 0, bpad = 0, al_delta;
  90a228:	c090      	movi.n	a9, 0
  90a22a:	17728c        	l32r	a7, 8e6c5c <memset+0x1ac0>
  90a22d:	d890      	mov.n	a8, a9

int ath_tgt_tx_form_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid,
			 ath_tx_bufhead *bf_q)
{
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
	int nframes = 0, rl = 0;;
  90a22f:	dd90      	mov.n	a13, a9
  90a231:	d690      	mov.n	a6, a9
}

int ath_tgt_tx_form_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid,
			 ath_tx_bufhead *bf_q)
{
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
  90a233:	9918      	s32i.n	a9, a1, 32
	u_int16_t h_baw = tid->baw_size/2, prev_al = 0, prev_frames = 0;

	bf_first = asf_tailq_first(&tid->buf_q);

	do {
		bf = asf_tailq_first(&tid->buf_q);
  90a235:	843b      	l32i.n	a4, a3, 44
		adf_os_assert(bf);
  90a237:	cc41      	bnez.n	a4, 90a23c <ath_tgt_tx_form_aggr+0x34>
  90a239:	63fffc        	j	90a239 <ath_tgt_tx_form_aggr+0x31>

		if (!BAW_WITHIN(tid->seq_start, tid->baw_size,
  90a23c:	2b4123        	l16ui	a11, a4, 70
  90a23f:	2a3102        	l16ui	a10, a3, 4
  90a242:	0b4b14        	srli	a11, a11, 4
  90a245:	0abb0c        	sub	a11, a11, a10
  90a248:	2a3104        	l16ui	a10, a3, 8
  90a24b:	0b0b4b        	extui	a11, a11, 0, 12
  90a24e:	7ab20a        	blt	a11, a10, 90a25c <ath_tgt_tx_form_aggr+0x54>
				SEQNO_FROM_BF_SEQNO(bf->bf_seqno))) {

			bf_first->bf_al= al;
  90a251:	285527        	s16i	a8, a5, 78
			bf_first->bf_nframes = nframes;
  90a254:	26544c        	s8i	a6, a5, 76
			return ATH_TGT_AGGR_BAW_CLOSED;
  90a257:	c021      	movi.n	a2, 1
  90a259:	d10f      	retw.n
  90a25b:	0065d0        	excw
		}

		if (!rl) {
  90a25e:	af2a      	add.n	a10, a2, a15
				 struct ath_tx_buf *bf)
{
	int i, prate;
	u_int32_t max4msframelen, frame_length;
	u_int16_t aggr_limit, legacy=0;
	const HAL_RATE_TABLE  *rt = sc->sc_currates;
  90a260:	22812b        	l16ui	a2, a8, 86
	struct ieee80211_node_target *ieee_node = (struct ieee80211_node_target *)an;

	if (bf->bf_ismcast) {
  90a263:	0a809a        	excw
				 struct ath_tx_buf *bf)
{
	int i, prate;
	u_int32_t max4msframelen, frame_length;
	u_int16_t aggr_limit, legacy=0;
	const HAL_RATE_TABLE  *rt = sc->sc_currates;
  90a266:	1c2a42        	l32r	a12, 8d4b70 <_bss_end+0x3c7368>
	struct ieee80211_node_target *ieee_node = (struct ieee80211_node_target *)an;

	if (bf->bf_ismcast) {
  90a269:	21873e        	excw
  90a26c:	7ab018        	bnone	a11, a10, 90a288 <ath_tgt_tx_form_aggr+0x80>
		bf->bf_rcs[1].tries = bf->bf_rcs[2].tries = bf->bf_rcs[3].tries = 0;
		bf->bf_rcs[0].rix   = 0xb;
  90a26f:	c0ab      	movi.n	a10, 11
  90a271:	2a4450        	s8i	a10, a4, 80
		bf->bf_rcs[0].tries = ATH_TXMAXTRY - 1;
  90a274:	c0aa      	movi.n	a10, 10
	u_int16_t aggr_limit, legacy=0;
	const HAL_RATE_TABLE  *rt = sc->sc_currates;
	struct ieee80211_node_target *ieee_node = (struct ieee80211_node_target *)an;

	if (bf->bf_ismcast) {
		bf->bf_rcs[1].tries = bf->bf_rcs[2].tries = bf->bf_rcs[3].tries = 0;
  90a276:	2d4475        	s8i	a13, a4, 117
  90a279:	2d4469        	s8i	a13, a4, 105
  90a27c:	2d445d        	s8i	a13, a4, 93
		bf->bf_rcs[0].rix   = 0xb;
		bf->bf_rcs[0].tries = ATH_TXMAXTRY - 1;
  90a27f:	2a4451        	s8i	a10, a4, 81
		bf->bf_rcs[0].flags = 0;
  90a282:	2d4453        	s8i	a13, a4, 83
  90a285:	600024        	j	90a2ad <ath_tgt_tx_form_aggr+0xa5>
	} else {
		ath_tgt_rate_findrate(sc, an, AH_TRUE, 0, ATH_TXMAXTRY-1, 4, 1,
				      ATH_RC_PROBE_ALLOWED, bf->bf_rcs, &prate);
  90a288:	2a4c50        	addi	a10, a4, 80
				  a_int32_t stepDnInc,
				  a_uint32_t rcflag,
				  struct ath_rc_series series[],
				  a_int32_t *isProbe)
{
	ath_rate_findrate(sc, an, 1, frameLen, 10, 4, 1,
  90a28b:	c0c1      	movi.n	a12, 1
  90a28d:	9a12      	s32i.n	a10, a1, 8
  90a28f:	2a1c10        	addi	a10, a1, 16
  90a292:	9a13      	s32i.n	a10, a1, 12
  90a294:	9c10      	s32i.n	a12, a1, 0
  90a296:	9c11      	s32i.n	a12, a1, 4
  90a298:	da20      	mov.n	a10, a2
  90a29a:	db70      	mov.n	a11, a7
  90a29c:	c0ea      	movi.n	a14, 10
  90a29e:	c0f4      	movi.n	a15, 4
  90a2a0:	981f      	s32i.n	a8, a1, 60
  90a2a2:	291610        	s32i	a9, a1, 64
  90a2a5:	5bfad1        	call8	908dec <ath_rate_findrate>
  90a2a8:	291210        	l32i	a9, a1, 64
  90a2ab:	881f      	l32i.n	a8, a1, 60
}

int ath_tgt_tx_form_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid,
			 ath_tx_bufhead *bf_q)
{
	struct ath_tx_buf *bf_first ,*bf_prev = NULL;
  90a2ad:	1b728c        	l32r	a11, 8e6ce0 <memset+0x1b44>
  90a2b0:	da40      	mov.n	a10, a4
  90a2b2:	c0c0      	movi.n	a12, 0
	}

	max4msframelen = IEEE80211_AMPDU_LIMIT_MAX;

	for (i = 0; i < 4; i++) {
		if (bf->bf_rcs[i].tries) {
  90a2b4:	2da051        	l8ui	a13, a10, 81
  90a2b7:	c9d6      	beqz.n	a13, 90a2d1 <ath_tgt_tx_form_aggr+0xc9>
			frame_length = bf->bf_rcs[i].max4msframelen;

			if (rt->info[bf->bf_rcs[i].rix].phy != IEEE80211_T_HT) {
  90a2b9:	2ea050        	l8ui	a14, a10, 80
  90a2bc:	8f1c      	l32i.n	a15, a1, 48
  90a2be:	b2ee      	addi.n	a14, a14, 2
  90a2c0:	0cee11        	slli	a14, a14, 4
  90a2c3:	aefe      	add.n	a14, a15, a14
  90a2c5:	2ee009        	l8ui	a14, a14, 9

	max4msframelen = IEEE80211_AMPDU_LIMIT_MAX;

	for (i = 0; i < 4; i++) {
		if (bf->bf_rcs[i].tries) {
			frame_length = bf->bf_rcs[i].max4msframelen;
  90a2c8:	2da215        	l32i	a13, a10, 84

			if (rt->info[bf->bf_rcs[i].rix].phy != IEEE80211_T_HT) {
  90a2cb:	69e40f        	bnei	a14, 4, 90a2de <ath_tgt_tx_form_aggr+0xd6>
				legacy = 1;
				break;
			}

			max4msframelen = ATH_MIN(max4msframelen, frame_length);
  90a2ce:	0dbb36        	minu	a11, a11, a13
				      ATH_RC_PROBE_ALLOWED, bf->bf_rcs, &prate);
	}

	max4msframelen = IEEE80211_AMPDU_LIMIT_MAX;

	for (i = 0; i < 4; i++) {
  90a2d1:	b1cc      	addi.n	a12, a12, 1
  90a2d3:	bcaa      	addi.n	a10, a10, 12
  90a2d5:	69c4db        	bnei	a12, 4, 90a2b4 <ath_tgt_tx_form_aggr+0xac>
				 struct ath_node_target *an,
				 struct ath_tx_buf *bf)
{
	int i, prate;
	u_int32_t max4msframelen, frame_length;
	u_int16_t aggr_limit, legacy=0;
  90a2d8:	c0c0      	movi.n	a12, 0
  90a2da:	600002        	j	90a2e0 <ath_tgt_tx_form_aggr+0xd8>
  90a2dd:	00c0c1        	excw

			max4msframelen = ATH_MIN(max4msframelen, frame_length);
		}
	}

	if (prate || legacy)
  90a2e0:	8d14      	l32i.n	a13, a1, 16
		return 0;
  90a2e2:	c0a0      	movi.n	a10, 0

			max4msframelen = ATH_MIN(max4msframelen, frame_length);
		}
	}

	if (prate || legacy)
  90a2e4:	7ad924        	bne	a13, a10, 90a30c <ath_tgt_tx_form_aggr+0x104>
		return 0;
  90a2e7:	dad0      	mov.n	a10, a13

			max4msframelen = ATH_MIN(max4msframelen, frame_length);
		}
	}

	if (prate || legacy)
  90a2e9:	cdcf      	bnez.n	a12, 90a30c <ath_tgt_tx_form_aggr+0x104>
		return 0;

	if (sc->sc_ic.ic_enable_coex)
  90a2eb:	2a2d16        	addmi	a10, a2, 0x1600
  90a2ee:	2ca025        	l8ui	a12, a10, 37
  90a2f1:	2aa208        	l32i	a10, a10, 32
  90a2f4:	64c005        	beqz	a12, 90a2fd <ath_tgt_tx_form_aggr+0xf5>
		aggr_limit = ATH_MIN((max4msframelen*3)/8, sc->sc_ic.ic_ampdu_limit);
  90a2f7:	0bbb09        	addx2	a11, a11, a11
  90a2fa:	0b3b14        	srli	a11, a11, 3
	else
		aggr_limit = ATH_MIN(max4msframelen, sc->sc_ic.ic_ampdu_limit);
  90a2fd:	0aba36        	minu	a10, a11, a10

	if (ieee_node->ni_maxampdu)
  90a300:	27710a        	l16ui	a7, a7, 20
		return 0;

	if (sc->sc_ic.ic_enable_coex)
		aggr_limit = ATH_MIN((max4msframelen*3)/8, sc->sc_ic.ic_ampdu_limit);
	else
		aggr_limit = ATH_MIN(max4msframelen, sc->sc_ic.ic_ampdu_limit);
  90a303:	0a0a4f        	extui	a10, a10, 0, 16

	if (ieee_node->ni_maxampdu)
		aggr_limit = ATH_MIN(aggr_limit, ieee_node->ni_maxampdu);
  90a306:	07ab36        	minu	a11, a10, a7
  90a309:	07ba39        	movnez	a10, a11, a7
			bf_first->bf_nframes = nframes;
			return ATH_TGT_AGGR_BAW_CLOSED;
		}

		if (!rl) {
			aggr_limit = ath_lookup_rate(sc, tid->an, bf);
  90a30c:	0a074f        	extui	a7, a10, 0, 16
			rl = 1;
		}

		al_delta = ATH_AGGR_DELIM_SZ + bf->bf_pktlen;
  90a30f:	2c4122        	l16ui	a12, a4, 68
  90a312:	b4cc      	addi.n	a12, a12, 4
  90a314:	0c0c4f        	extui	a12, a12, 0, 16

		if (nframes && (aggr_limit < (al + bpad + al_delta + prev_al))) {
  90a317:	c869      	beqz.n	a6, 90a324 <ath_tgt_tx_form_aggr+0x11c>
  90a319:	a98a      	add.n	a10, a8, a9
  90a31b:	acaa      	add.n	a10, a10, a12
  90a31d:	7a7a03        	bge	a7, a10, 90a324 <ath_tgt_tx_form_aggr+0x11c>
  90a320:	600005        	j	90a329 <ath_tgt_tx_form_aggr+0x121>
  90a323:	008a1a        	sll	a10, a8
			bf_first->bf_nframes = nframes;
			return ATH_TGT_AGGR_LIMITED;
		}

#ifdef PROJECT_K2
		if ((nframes + prev_frames) >= ATH_MIN((h_baw), 17)) {
  90a326:	7a620a        	blt	a6, a10, 90a334 <ath_tgt_tx_form_aggr+0x12c>
#else
		if ((nframes + prev_frames) >= ATH_MIN((h_baw), 22)) {
#endif
			bf_first->bf_al= al;
  90a329:	285527        	s16i	a8, a5, 78
			bf_first->bf_nframes = nframes;
  90a32c:	26544c        	s8i	a6, a5, 76
			return ATH_TGT_AGGR_LIMITED;
  90a32f:	c022      	movi.n	a2, 2
  90a331:	d10f      	retw.n
  90a333:	00da30        	excw
		}

		ath_tx_addto_baw(tid, bf);
  90a336:	db40      	mov.n	a11, a4
  90a338:	981f      	s32i.n	a8, a1, 60
  90a33a:	291610        	s32i	a9, a1, 64
  90a33d:	9c1e      	s32i.n	a12, a1, 56
  90a33f:	5bff9f        	call8	90a1bc <ath_tx_addto_baw>
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
  90a342:	8a49      	l32i.n	a10, a4, 36
  90a344:	8b4a      	l32i.n	a11, a4, 40
  90a346:	881f      	l32i.n	a8, a1, 60
  90a348:	291210        	l32i	a9, a1, 64
  90a34b:	8c1e      	l32i.n	a12, a1, 56
  90a34d:	c8a3      	beqz.n	a10, 90a354 <ath_tgt_tx_form_aggr+0x14c>
  90a34f:	9baa      	s32i.n	a11, a10, 40
  90a351:	600001        	j	90a356 <ath_tgt_tx_form_aggr+0x14e>
  90a354:	9b3c      	s32i.n	a11, a3, 48
  90a356:	8b4a      	l32i.n	a11, a4, 40
		asf_tailq_insert_tail(bf_q, bf, bf_list);
  90a358:	8d19      	l32i.n	a13, a1, 36
			bf_first->bf_nframes = nframes;
			return ATH_TGT_AGGR_LIMITED;
		}

		ath_tx_addto_baw(tid, bf);
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
  90a35a:	9ab0      	s32i.n	a10, a11, 0
		asf_tailq_insert_tail(bf_q, bf, bf_list);
  90a35c:	8bd1      	l32i.n	a11, a13, 4
  90a35e:	c0a0      	movi.n	a10, 0
  90a360:	9b4a      	s32i.n	a11, a4, 40
  90a362:	9a49      	s32i.n	a10, a4, 36
  90a364:	94b0      	s32i.n	a4, a11, 0
  90a366:	2b4c24        	addi	a11, a4, 36
  90a369:	9bd1      	s32i.n	a11, a13, 4
		nframes ++;

		adf_os_assert(bf);

		adf_os_assert(bf->bf_comp == ath_tgt_tx_comp_aggr);
  90a36b:	8d4f      	l32i.n	a13, a4, 60
  90a36d:	1b72c9        	l32r	a11, 8e6e94 <memset+0x1cf8>
		}

		ath_tx_addto_baw(tid, bf);
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
		asf_tailq_insert_tail(bf_q, bf, bf_list);
		nframes ++;
  90a370:	b166      	addi.n	a6, a6, 1

		adf_os_assert(bf);

		adf_os_assert(bf->bf_comp == ath_tgt_tx_comp_aggr);
  90a372:	7bd102        	beq	a13, a11, 90a378 <ath_tgt_tx_form_aggr+0x170>
  90a375:	63fffc        	j	90a375 <ath_tgt_tx_form_aggr+0x16d>

		al += bpad + al_delta;
  90a378:	a988      	add.n	a8, a8, a9
		bf->bf_ndelim = ATH_AGGR_GET_NDELIM(bf->bf_pktlen);
  90a37a:	294122        	l16ui	a9, a4, 68

		adf_os_assert(bf);

		adf_os_assert(bf->bf_comp == ath_tgt_tx_comp_aggr);

		al += bpad + al_delta;
  90a37d:	ac88      	add.n	a8, a8, a12
		bf->bf_ndelim = ATH_AGGR_GET_NDELIM(bf->bf_pktlen);
  90a37f:	2b0afb        	movi	a11, 251

		adf_os_assert(bf);

		adf_os_assert(bf->bf_comp == ath_tgt_tx_comp_aggr);

		al += bpad + al_delta;
  90a382:	08084f        	extui	a8, a8, 0, 16
		bf->bf_ndelim = ATH_AGGR_GET_NDELIM(bf->bf_pktlen);
  90a385:	79b208        	blt	a11, a9, 90a391 <ath_tgt_tx_form_aggr+0x189>
  90a388:	2a0afc        	movi	a10, 252
  90a38b:	09aa0c        	sub	a10, a10, a9
  90a38e:	0a2a47        	extui	a10, a10, 2, 8

		switch (bf->bf_keytype) {
  90a391:	2b4085        	l8ui	a11, a4, 133
		adf_os_assert(bf);

		adf_os_assert(bf->bf_comp == ath_tgt_tx_comp_aggr);

		al += bpad + al_delta;
		bf->bf_ndelim = ATH_AGGR_GET_NDELIM(bf->bf_pktlen);
  90a394:	2a444b        	s8i	a10, a4, 75

		switch (bf->bf_keytype) {
  90a397:	68b212        	beqi	a11, 2, 90a3ad <ath_tgt_tx_form_aggr+0x1a5>
  90a39a:	6fb306        	bgeui	a11, 3, 90a3a4 <ath_tgt_tx_form_aggr+0x19c>
  90a39d:	69b11f        	bnei	a11, 1, 90a3c0 <ath_tgt_tx_form_aggr+0x1b8>
  90a3a0:	600010        	j	90a3b4 <ath_tgt_tx_form_aggr+0x1ac>
  90a3a3:	0068b3        	excw
  90a3a6:	0c69b4        	excw
  90a3a9:	156000        	l32r	a5, 8e23ac <athos_indirection_table_install+0xe64>
  90a3ac:	0dbaaa        	excw
		case HAL_KEY_TYPE_AES:
			bf->bf_ndelim += ATH_AGGR_ENCRYPTDELIM;
  90a3af:	60000a        	j	90a3bd <ath_tgt_tx_form_aggr+0x1b5>
  90a3b2:	00002a        	muluh	a0, a0, a0
			break;
		case HAL_KEY_TYPE_WEP:
		case HAL_KEY_TYPE_TKIP:
			bf->bf_ndelim += 64;
  90a3b5:	ac40      	add.n	a0, a4, a12
  90a3b7:	600002        	j	90a3bd <ath_tgt_tx_form_aggr+0x1b5>
  90a3ba:	00bcaa        	excw
			break;
		case HAL_KEY_TYPE_WAPI:
			bf->bf_ndelim += 12;
  90a3bd:	2a444b        	s8i	a10, a4, 75
			break;
		default:
			break;
		}

		bpad = PADBYTES(al_delta) + (bf->bf_ndelim << 2);
  90a3c0:	0c0c06        	neg	a12, a12
  90a3c3:	29404b        	l8ui	a9, a4, 75

		if (bf_prev) {
  90a3c6:	8f18      	l32i.n	a15, a1, 32
			break;
		default:
			break;
		}

		bpad = PADBYTES(al_delta) + (bf->bf_ndelim << 2);
  90a3c8:	0c0c41        	extui	a12, a12, 0, 2
  90a3cb:	0c990a        	addx4	a9, a9, a12

		if (bf_prev) {
  90a3ce:	c9fa      	beqz.n	a15, 90a3ec <ath_tgt_tx_form_aggr+0x1e4>
			bf_prev->bf_next = bf;
			bf_prev->bf_lastds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
  90a3d0:	2b4030        	l8ui	a11, a4, 48
  90a3d3:	8afe      	l32i.n	a10, a15, 56
		}

		bpad = PADBYTES(al_delta) + (bf->bf_ndelim << 2);

		if (bf_prev) {
			bf_prev->bf_next = bf;
  90a3d5:	94fb      	s32i.n	a4, a15, 44
			bf_prev->bf_lastds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
  90a3d7:	2ba400        	s8i	a11, a10, 0
  90a3da:	2b4031        	l8ui	a11, a4, 49
  90a3dd:	2ba401        	s8i	a11, a10, 1
  90a3e0:	2b4032        	l8ui	a11, a4, 50
  90a3e3:	2ba402        	s8i	a11, a10, 2
  90a3e6:	2b4033        	l8ui	a11, a4, 51
  90a3e9:	2ba403        	s8i	a11, a10, 3
		}
		bf_prev = bf;

		for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90a3ec:	8c4c      	l32i.n	a12, a4, 48
  90a3ee:	2d0a88        	movi	a13, 136
  90a3f1:	600020        	j	90a415 <ath_tgt_tx_form_aggr+0x20d>
			ah->ah_set11nAggrMiddle(ds, bf->bf_ndelim);
  90a3f4:	8a1b      	l32i.n	a10, a1, 44
  90a3f6:	2b404b        	l8ui	a11, a4, 75
  90a3f9:	2ea212        	l32i	a14, a10, 72
  90a3fc:	dac0      	mov.n	a10, a12
  90a3fe:	981f      	s32i.n	a8, a1, 60
  90a400:	291610        	s32i	a9, a1, 64
  90a403:	9c1e      	s32i.n	a12, a1, 56
  90a405:	9d1d      	s32i.n	a13, a1, 52
  90a407:	0be000        	callx8	a14
			bf_prev->bf_next = bf;
			bf_prev->bf_lastds->ds_link = ATH_BUF_GET_DESC_PHY_ADDR(bf);
		}
		bf_prev = bf;

		for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90a40a:	8c1e      	l32i.n	a12, a1, 56
  90a40c:	8d1d      	l32i.n	a13, a1, 52
  90a40e:	291210        	l32i	a9, a1, 64
  90a411:	881f      	l32i.n	a8, a1, 60
  90a413:	adcc      	add.n	a12, a12, a13
  90a415:	8a4e      	l32i.n	a10, a4, 56
  90a417:	7cabd9        	bgeu	a10, a12, 90a3f4 <ath_tgt_tx_form_aggr+0x1ec>
  90a41a:	9418      	s32i.n	a4, a1, 32
			ah->ah_set11nAggrMiddle(ds, bf->bf_ndelim);

	} while (!asf_tailq_empty(&tid->buf_q));
  90a41c:	843b      	l32i.n	a4, a3, 44
  90a41e:	c0d1      	movi.n	a13, 1
  90a420:	654e11        	bnez	a4, 90a235 <ath_tgt_tx_form_aggr+0x2d>

	bf_first->bf_al= al;
  90a423:	285527        	s16i	a8, a5, 78
	bf_first->bf_nframes = nframes;
  90a426:	26544c        	s8i	a6, a5, 76

	return ATH_TGT_AGGR_DONE;
  90a429:	d240      	mov.n	a2, a4
}
  90a42b:	d10f      	retw.n
  90a42d:	000000        	ill

0090a430 <ath_tgt_txq_schedule>:
	asf_tailq_insert_tail(&txq->axq_tidq, tid, tid_qelem);
}

static void
ath_tgt_txq_schedule(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
  90a430:	6c1008        	entry	a1, 64
	u_int8_t bdone;

	bdone = AH_FALSE;

	do {
		TAILQ_DEQ(&txq->axq_tidq, tid, tid_qelem);
  90a433:	8536      	l32i.n	a5, a3, 24
  90a435:	6451e8        	beqz	a5, 90a621 <ath_tgt_txq_schedule+0x1f1>
  90a438:	8459      	l32i.n	a4, a5, 36
  90a43a:	865a      	l32i.n	a6, a5, 40
  90a43c:	c844      	beqz.n	a4, 90a444 <ath_tgt_txq_schedule+0x14>
  90a43e:	964a      	s32i.n	a6, a4, 40
  90a440:	600002        	j	90a446 <ath_tgt_txq_schedule+0x16>
  90a443:	009637        	maxu	a6, a9, a0
  90a446:	865a      	l32i.n	a6, a5, 40
  90a448:	9460      	s32i.n	a4, a6, 0
		if (tid == NULL)
			return;

		tid->sched = AH_FALSE;

		if (tid->paused)
  90a44a:	275034        	l8ui	a7, a5, 52
		TAILQ_DEQ(&txq->axq_tidq, tid, tid_qelem);

		if (tid == NULL)
			return;

		tid->sched = AH_FALSE;
  90a44d:	c040      	movi.n	a4, 0
  90a44f:	245435        	s8i	a4, a5, 53

		if (tid->paused)
  90a452:	007732        	sext	a7, a7, 7
  90a455:	6571bf        	bnez	a7, 90a618 <ath_tgt_txq_schedule+0x1e8>
			continue;

		if (!(tid->flag & TID_AGGR_ENABLED))
  90a458:	285036        	l8ui	a8, a5, 54
  90a45b:	c042      	movi.n	a4, 2
  90a45d:	048801        	and	a8, a8, a4
  90a460:	c061      	movi.n	a6, 1
  90a462:	8450      	l32i.n	a4, a5, 0
  90a464:	658050        	bnez	a8, 90a4b8 <ath_tgt_txq_schedule+0x88>

static void
ath_tgt_tx_sched_normal(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
	struct ath_tx_buf *bf;
	struct ath_txq *txq =TID_TO_ACTXQ(tid->tidno);;
  90a467:	274cfd        	addi	a7, a4, -3
  90a46a:	d980      	mov.n	a9, a8
  90a46c:	076939        	movnez	a9, a6, a7
  90a46f:	c997      	beqz.n	a9, 90a48a <ath_tgt_txq_schedule+0x5a>
  90a471:	046839        	movnez	a8, a6, a4
  90a474:	c982      	beqz.n	a8, 90a48a <ath_tgt_txq_schedule+0x5a>
  90a476:	b047      	addi.n	a7, a4, -1
  90a478:	6e7210        	bltui	a7, 2, 90a48c <ath_tgt_txq_schedule+0x5c>
  90a47b:	244cfc        	addi	a4, a4, -4
  90a47e:	c063      	movi.n	a6, 3
  90a480:	6f4208        	bgeui	a4, 2, 90a48c <ath_tgt_txq_schedule+0x5c>
  90a483:	c062      	movi.n	a6, 2
  90a485:	600003        	j	90a48c <ath_tgt_txq_schedule+0x5c>
  90a488:	0000c0        	excw
  90a48b:	600266        	j	90a6f5 <ath_tgt_tx_comp_normal+0x39>
  90a48e:	0a266d        	excw
  90a491:	058763        	excw

	do {
		if (asf_tailq_empty(&tid->buf_q))
  90a494:	8b5b      	l32i.n	a11, a5, 44
  90a496:	64b16e        	beqz	a11, 90a608 <ath_tgt_txq_schedule+0x1d8>
			break;

		bf = asf_tailq_first(&tid->buf_q);
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
  90a499:	84b9      	l32i.n	a4, a11, 36
  90a49b:	86ba      	l32i.n	a6, a11, 40
  90a49d:	c844      	beqz.n	a4, 90a4a5 <ath_tgt_txq_schedule+0x75>
  90a49f:	964a      	s32i.n	a6, a4, 40
  90a4a1:	600002        	j	90a4a7 <ath_tgt_txq_schedule+0x77>
  90a4a4:	00965c        	extui	a6, a0, 25, 13
  90a4a7:	86ba      	l32i.n	a6, a11, 40
		ath_tgt_tx_send_normal(sc, bf);
  90a4a9:	da20      	mov.n	a10, a2
	do {
		if (asf_tailq_empty(&tid->buf_q))
			break;

		bf = asf_tailq_first(&tid->buf_q);
		asf_tailq_remove(&tid->buf_q, bf, bf_list);
  90a4ab:	9460      	s32i.n	a4, a6, 0
		ath_tgt_tx_send_normal(sc, bf);
  90a4ad:	5bfe29        	call8	909d54 <ath_tgt_tx_send_normal>

	} while (txq->axq_depth < ATH_AGGR_MIN_QDEPTH);
  90a4b0:	8474      	l32i.n	a4, a7, 16
  90a4b2:	644fde        	beqz	a4, 90a494 <ath_tgt_txq_schedule+0x64>
  90a4b5:	60014f        	j	90a608 <ath_tgt_txq_schedule+0x1d8>
ath_tgt_tx_sched_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
	struct ath_tx_buf  *bf, *bf_last;
	ATH_AGGR_STATUS status;
	ath_tx_bufhead bf_q;
	struct ath_txq *txq = TID_TO_ACTXQ(tid->tidno);
  90a4b8:	284cfd        	addi	a8, a4, -3
  90a4bb:	d970      	mov.n	a9, a7
  90a4bd:	086939        	movnez	a9, a6, a8
  90a4c0:	090847        	extui	a8, a9, 0, 8
  90a4c3:	c98b      	beqz.n	a8, 90a4e2 <ath_tgt_txq_schedule+0xb2>
  90a4c5:	046739        	movnez	a7, a6, a4
  90a4c8:	070747        	extui	a7, a7, 0, 8
  90a4cb:	c973      	beqz.n	a7, 90a4e2 <ath_tgt_txq_schedule+0xb2>
  90a4cd:	b047      	addi.n	a7, a4, -1
  90a4cf:	6e7211        	bltui	a7, 2, 90a4e4 <ath_tgt_txq_schedule+0xb4>
  90a4d2:	244cfc        	addi	a4, a4, -4
  90a4d5:	c063      	movi.n	a6, 3
  90a4d7:	6f4209        	bgeui	a4, 2, 90a4e4 <ath_tgt_txq_schedule+0xb4>
  90a4da:	c062      	movi.n	a6, 2
  90a4dc:	600004        	j	90a4e4 <ath_tgt_txq_schedule+0xb4>
  90a4df:	000000        	ill
  90a4e2:	c060      	movi.n	a6, 0
  90a4e4:	02660a        	addx4	a6, a6, a2
  90a4e7:	266d05        	addmi	a6, a6, 0x500
  90a4ea:	8663      	l32i.n	a6, a6, 12
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
  90a4ec:	242d05        	addmi	a4, a2, 0x500
ath_tgt_tx_sched_aggr(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
	struct ath_tx_buf  *bf, *bf_last;
	ATH_AGGR_STATUS status;
	ath_tx_bufhead bf_q;
	struct ath_txq *txq = TID_TO_ACTXQ(tid->tidno);
  90a4ef:	9615      	s32i.n	a6, a1, 20
	struct ath_tx_desc *ds = NULL;
	struct ath_hal *ah = sc->sc_ah;
  90a4f1:	864b      	l32i.n	a6, a4, 44
	int i;


	if (asf_tailq_empty(&tid->buf_q))
  90a4f3:	845b      	l32i.n	a4, a5, 44
  90a4f5:	64410f        	beqz	a4, 90a608 <ath_tgt_txq_schedule+0x1d8>

	do {
		if (asf_tailq_empty(&tid->buf_q))
			break;

		asf_tailq_init(&bf_q);
  90a4f8:	c040      	movi.n	a4, 0

	if (asf_tailq_empty(&tid->buf_q))
		return;

	do {
		if (asf_tailq_empty(&tid->buf_q))
  90a4fa:	875b      	l32i.n	a7, a5, 44
  90a4fc:	647108        	beqz	a7, 90a608 <ath_tgt_txq_schedule+0x1d8>
			break;

		asf_tailq_init(&bf_q);

		status = ath_tgt_tx_form_aggr(sc, tid, &bf_q);
  90a4ff:	da20      	mov.n	a10, a2
  90a501:	db50      	mov.n	a11, a5
  90a503:	dc10      	mov.n	a12, a1

	do {
		if (asf_tailq_empty(&tid->buf_q))
			break;

		asf_tailq_init(&bf_q);
  90a505:	9410      	s32i.n	a4, a1, 0
  90a507:	9111      	s32i.n	a1, a1, 4

		status = ath_tgt_tx_form_aggr(sc, tid, &bf_q);
  90a509:	5bff3f        	call8	90a208 <ath_tgt_tx_form_aggr>

		if (asf_tailq_empty(&bf_q))
  90a50c:	8710      	l32i.n	a7, a1, 0
		if (asf_tailq_empty(&tid->buf_q))
			break;

		asf_tailq_init(&bf_q);

		status = ath_tgt_tx_form_aggr(sc, tid, &bf_q);
  90a50e:	9a14      	s32i.n	a10, a1, 16

		if (asf_tailq_empty(&bf_q))
  90a510:	6470f4        	beqz	a7, 90a608 <ath_tgt_txq_schedule+0x1d8>
			break;

		bf = asf_tailq_first(&bf_q);
		bf_last = asf_tailq_last(&bf_q, ath_tx_bufhead_s);
  90a513:	8a11      	l32i.n	a10, a1, 4
  90a515:	8aa1      	l32i.n	a10, a10, 4
  90a517:	8da0      	l32i.n	a13, a10, 0

		if (bf->bf_nframes == 1) {
  90a519:	2a704c        	l8ui	a10, a7, 76
  90a51c:	69a166        	bnei	a10, 1, 90a586 <ath_tgt_txq_schedule+0x156>

			if(bf->bf_retries == 0)
  90a51f:	2a7086        	l8ui	a10, a7, 134
  90a522:	cca6      	bnez.n	a10, 90a52c <ath_tgt_txq_schedule+0xfc>
				__stats(sc, txaggr_single);
  90a524:	2a2261        	l32i	a10, a2, 0x184
  90a527:	b1aa      	addi.n	a10, a10, 1
  90a529:	2a2661        	s32i	a10, a2, 0x184
			bf->bf_isaggr = 0;
  90a52c:	2b7087        	l8ui	a11, a7, 135
  90a52f:	2afadf        	movi	a10, -33
  90a532:	0aba01        	and	a10, a11, a10
  90a535:	2a7487        	s8i	a10, a7, 135
			bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs -1]);
  90a538:	8a71      	l32i.n	a10, a7, 4
			bf->bf_lastds->ds_link = 0;
  90a53a:	c080      	movi.n	a8, 0
		if (bf->bf_nframes == 1) {

			if(bf->bf_retries == 0)
				__stats(sc, txaggr_single);
			bf->bf_isaggr = 0;
			bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs -1]);
  90a53c:	b0aa      	addi.n	a10, a10, -1
  90a53e:	0cab11        	slli	a11, a10, 4
  90a541:	aaba      	add.n	a10, a11, a10
  90a543:	8b7d      	l32i.n	a11, a7, 52
			bf->bf_lastds->ds_link = 0;
			bf->bf_next = NULL;

			for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90a545:	2c0a88        	movi	a12, 136
		if (bf->bf_nframes == 1) {

			if(bf->bf_retries == 0)
				__stats(sc, txaggr_single);
			bf->bf_isaggr = 0;
			bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs -1]);
  90a548:	0baa0b        	addx8	a10, a10, a11
  90a54b:	9a7e      	s32i.n	a10, a7, 56
			bf->bf_lastds->ds_link = 0;
  90a54d:	24a400        	s8i	a4, a10, 0
  90a550:	28a401        	s8i	a8, a10, 1
  90a553:	28a402        	s8i	a8, a10, 2
  90a556:	28a403        	s8i	a8, a10, 3
			bf->bf_next = NULL;
  90a559:	947b      	s32i.n	a4, a7, 44

			for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90a55b:	8b7c      	l32i.n	a11, a7, 48
  90a55d:	600013        	j	90a574 <ath_tgt_txq_schedule+0x144>
				ah->ah_clr11nAggr(ds);
  90a560:	2d6214        	l32i	a13, a6, 80
  90a563:	dab0      	mov.n	a10, a11
  90a565:	2b1607        	s32i	a11, a1, 28
  90a568:	2c1606        	s32i	a12, a1, 24
  90a56b:	0bd000        	callx8	a13
			bf->bf_isaggr = 0;
			bf->bf_lastds = &(bf->bf_descarr[bf->bf_dmamap_info.nsegs -1]);
			bf->bf_lastds->ds_link = 0;
			bf->bf_next = NULL;

			for(ds = bf->bf_desc; ds <= bf->bf_lastds; ds++)
  90a56e:	8b17      	l32i.n	a11, a1, 28
  90a570:	8c16      	l32i.n	a12, a1, 24
  90a572:	acbb      	add.n	a11, a11, a12
  90a574:	8a7e      	l32i.n	a10, a7, 56
  90a576:	7babe6        	bgeu	a10, a11, 90a560 <ath_tgt_txq_schedule+0x130>
				ah->ah_clr11nAggr(ds);

			ath_buf_set_rate(sc, bf);
  90a579:	da20      	mov.n	a10, a2
  90a57b:	db70      	mov.n	a11, a7
  90a57d:	5bfb40        	call8	909280 <ath_buf_set_rate>
  90a580:	60006c        	j	90a5f0 <ath_tgt_txq_schedule+0x1c0>
  90a583:	000000        	ill

			continue;
		}

		bf_last->bf_next = NULL;
		bf_last->bf_lastds->ds_link = 0;
  90a586:	8ade      	l32i.n	a10, a13, 56
			bf->bf_txq_add(sc, bf);

			continue;
		}

		bf_last->bf_next = NULL;
  90a588:	94db      	s32i.n	a4, a13, 44
		bf_last->bf_lastds->ds_link = 0;
  90a58a:	24a400        	s8i	a4, a10, 0
  90a58d:	24a401        	s8i	a4, a10, 1
  90a590:	24a402        	s8i	a4, a10, 2
  90a593:	24a403        	s8i	a4, a10, 3
		bf_last->bf_ndelim = 0;
  90a596:	24d44b        	s8i	a4, a13, 75

		bf->bf_isaggr  = 1;
  90a599:	2b7087        	l8ui	a11, a7, 135
  90a59c:	c2a0      	movi.n	a10, 32
  90a59e:	0aba02        	or	a10, a11, a10
  90a5a1:	2a7487        	s8i	a10, a7, 135
		ath_buf_set_rate(sc, bf);
  90a5a4:	db70      	mov.n	a11, a7
  90a5a6:	da20      	mov.n	a10, a2
  90a5a8:	2d1606        	s32i	a13, a1, 24
  90a5ab:	5bfb35        	call8	909280 <ath_buf_set_rate>
		ah->ah_set11nAggrFirst(bf->bf_desc, bf->bf_al,
  90a5ae:	8a7c      	l32i.n	a10, a7, 48
  90a5b0:	2b7127        	l16ui	a11, a7, 78
  90a5b3:	2e6211        	l32i	a14, a6, 68
  90a5b6:	2c704b        	l8ui	a12, a7, 75
  90a5b9:	0be000        	callx8	a14
					  bf->bf_ndelim);
		bf->bf_lastds = bf_last->bf_lastds;
  90a5bc:	8d16      	l32i.n	a13, a1, 24

		for (i = 0; i < bf_last->bf_dmamap_info.nsegs; i++)
  90a5be:	c0b0      	movi.n	a11, 0

		bf->bf_isaggr  = 1;
		ath_buf_set_rate(sc, bf);
		ah->ah_set11nAggrFirst(bf->bf_desc, bf->bf_al,
					  bf->bf_ndelim);
		bf->bf_lastds = bf_last->bf_lastds;
  90a5c0:	8ade      	l32i.n	a10, a13, 56
  90a5c2:	9a7e      	s32i.n	a10, a7, 56
  90a5c4:	60001a        	j	90a5e2 <ath_tgt_txq_schedule+0x1b2>
  90a5c7:	008add        	excw
	tid->sched = AH_TRUE;
	asf_tailq_insert_tail(&txq->axq_tidq, tid, tid_qelem);
}

static void
ath_tgt_txq_schedule(struct ath_softc_tgt *sc, struct ath_txq *txq)
  90a5ca:	0cbe11        	slli	a14, a11, 4
  90a5cd:	abee      	add.n	a14, a14, a11
		ah->ah_set11nAggrFirst(bf->bf_desc, bf->bf_al,
					  bf->bf_ndelim);
		bf->bf_lastds = bf_last->bf_lastds;

		for (i = 0; i < bf_last->bf_dmamap_info.nsegs; i++)
			ah->ah_set11nAggrLast(&bf_last->bf_descarr[i]);
  90a5cf:	2c6213        	l32i	a12, a6, 76
  90a5d2:	0aea0b        	addx8	a10, a14, a10
  90a5d5:	9b17      	s32i.n	a11, a1, 28
  90a5d7:	9d16      	s32i.n	a13, a1, 24
  90a5d9:	0bc000        	callx8	a12
		ath_buf_set_rate(sc, bf);
		ah->ah_set11nAggrFirst(bf->bf_desc, bf->bf_al,
					  bf->bf_ndelim);
		bf->bf_lastds = bf_last->bf_lastds;

		for (i = 0; i < bf_last->bf_dmamap_info.nsegs; i++)
  90a5dc:	8b17      	l32i.n	a11, a1, 28
  90a5de:	8d16      	l32i.n	a13, a1, 24
  90a5e0:	b1bb      	addi.n	a11, a11, 1
  90a5e2:	8ad1      	l32i.n	a10, a13, 4
  90a5e4:	7ab3e0        	bltu	a11, a10, 90a5c8 <ath_tgt_txq_schedule+0x198>
			ah->ah_set11nAggrLast(&bf_last->bf_descarr[i]);

		if (status == ATH_AGGR_8K_LIMITED) {
  90a5e7:	8914      	l32i.n	a9, a1, 16
  90a5e9:	699403        	bnei	a9, 4, 90a5f0 <ath_tgt_txq_schedule+0x1c0>
  90a5ec:	63fffc        	j	90a5ec <ath_tgt_txq_schedule+0x1bc>
  90a5ef:	002c72        	excw
			adf_os_assert(0);
			break;
		}

		bf->bf_txq_add(sc, bf);
  90a5f2:	10da20        	l32r	a0, 900e74 <memset+0x1bcd8>
  90a5f5:	db70      	mov.n	a11, a7
  90a5f7:	0bc000        	callx8	a12
	} while (txq->axq_depth < ATH_AGGR_MIN_QDEPTH &&
		 status != ATH_TGT_AGGR_BAW_CLOSED);
  90a5fa:	8915      	l32i.n	a9, a1, 20
  90a5fc:	8894      	l32i.n	a8, a9, 16
  90a5fe:	cc86      	bnez.n	a8, 90a608 <ath_tgt_txq_schedule+0x1d8>
			adf_os_assert(0);
			break;
		}

		bf->bf_txq_add(sc, bf);
	} while (txq->axq_depth < ATH_AGGR_MIN_QDEPTH &&
  90a600:	8814      	l32i.n	a8, a1, 16
  90a602:	688102        	beqi	a8, 1, 90a608 <ath_tgt_txq_schedule+0x1d8>
  90a605:	63fef1        	j	90a4fa <ath_tgt_txq_schedule+0xca>
		else
			ath_tgt_tx_sched_aggr(sc,tid);

		bdone = AH_TRUE;

		if (!asf_tailq_empty(&tid->buf_q)) {
  90a608:	865b      	l32i.n	a6, a5, 44
		if (!(tid->flag & TID_AGGR_ENABLED))
			ath_tgt_tx_sched_normal(sc,tid);
		else
			ath_tgt_tx_sched_aggr(sc,tid);

		bdone = AH_TRUE;
  90a60a:	c041      	movi.n	a4, 1

		if (!asf_tailq_empty(&tid->buf_q)) {
  90a60c:	c86a      	beqz.n	a6, 90a61a <ath_tgt_txq_schedule+0x1ea>
			ath_tgt_tx_enqueue(txq, tid);
  90a60e:	da30      	mov.n	a10, a3
  90a610:	db50      	mov.n	a11, a5
  90a612:	5bfaec        	call8	9091c4 <ath_tgt_tx_enqueue>
  90a615:	600001        	j	90a61a <ath_tgt_txq_schedule+0x1ea>
		if (tid == NULL)
			return;

		tid->sched = AH_FALSE;

		if (tid->paused)
  90a618:	c040      	movi.n	a4, 0

		if (!asf_tailq_empty(&tid->buf_q)) {
			ath_tgt_tx_enqueue(txq, tid);
		}

	} while (!asf_tailq_empty(&txq->axq_tidq) && !bdone);
  90a61a:	8636      	l32i.n	a6, a3, 24
  90a61c:	c861      	beqz.n	a6, 90a621 <ath_tgt_txq_schedule+0x1f1>
  90a61e:	644e11        	beqz	a4, 90a433 <ath_tgt_txq_schedule+0x3>
  90a621:	d10f      	retw.n
	...

0090a624 <ath_aggr_resume_tid>:
	return ((((x) & 0xff00) >> 8) |   (((x) & 0x00ff) << 8));
}

static inline void
ath_aggr_resume_tid(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
  90a624:	6c1004        	entry	a1, 32
	struct ath_txq *txq;

	txq = TID_TO_ACTXQ(tid->tidno);
  90a627:	8930      	l32i.n	a9, a3, 0
  90a629:	c081      	movi.n	a8, 1
  90a62b:	249cfd        	addi	a4, a9, -3
  90a62e:	c0b0      	movi.n	a11, 0
  90a630:	048b39        	movnez	a11, a8, a4
  90a633:	c9b3      	beqz.n	a11, 90a64a <ath_aggr_resume_tid+0x26>
  90a635:	c991      	beqz.n	a9, 90a64a <ath_aggr_resume_tid+0x26>
  90a637:	b094      	addi.n	a4, a9, -1
  90a639:	6e420f        	bltui	a4, 2, 90a64c <ath_aggr_resume_tid+0x28>
  90a63c:	299cfc        	addi	a9, a9, -4
  90a63f:	c083      	movi.n	a8, 3
  90a641:	6f9207        	bgeui	a9, 2, 90a64c <ath_aggr_resume_tid+0x28>
  90a644:	c082      	movi.n	a8, 2
  90a646:	600002        	j	90a64c <ath_aggr_resume_tid+0x28>
  90a649:	00c080        	excw
  90a64c:	02880a        	addx4	a8, a8, a2
  90a64f:	288d05        	addmi	a8, a8, 0x500
  90a652:	8483      	l32i.n	a4, a8, 12
	tid->paused = 0;
  90a654:	c080      	movi.n	a8, 0
  90a656:	283434        	s8i	a8, a3, 52

	if (asf_tailq_empty(&tid->buf_q))
  90a659:	883b      	l32i.n	a8, a3, 44
  90a65b:	c88d      	beqz.n	a8, 90a66c <ath_aggr_resume_tid+0x48>
		return;

	ath_tgt_tx_enqueue(txq, tid);
  90a65d:	da40      	mov.n	a10, a4
  90a65f:	033b02        	or	a11, a3, a3
  90a662:	5bfad8        	call8	9091c4 <ath_tgt_tx_enqueue>
	ath_tgt_txq_schedule(sc, txq);
  90a665:	da20      	mov.n	a10, a2
  90a667:	db40      	mov.n	a11, a4
  90a669:	5bff71        	call8	90a430 <ath_tgt_txq_schedule>
  90a66c:	d10f      	retw.n
	...

0090a670 <owl_tgt_tid_cleanup>:
	}
}

static void owl_tgt_tid_cleanup(struct ath_softc_tgt *sc,
				struct ath_atx_tid *tid)
{
  90a670:	6c1004        	entry	a1, 32
	tid->incomp--;
  90a673:	283037        	l8ui	a8, a3, 55
	}
}

static void owl_tgt_tid_cleanup(struct ath_softc_tgt *sc,
				struct ath_atx_tid *tid)
{
  90a676:	da20      	mov.n	a10, a2
	tid->incomp--;
  90a678:	b088      	addi.n	a8, a8, -1
  90a67a:	080847        	extui	a8, a8, 0, 8
  90a67d:	283437        	s8i	a8, a3, 55
	if (tid->incomp) {
  90a680:	cf85      	bnez.n	a8, 90a6b9 <owl_tgt_tid_cleanup+0x49>
		return;
	}

	tid->flag &= ~TID_CLEANUP_INPROGRES;
  90a682:	283036        	l8ui	a8, a3, 54
  90a685:	29fafe        	movi	a9, -2
  90a688:	098901        	and	a9, a8, a9
  90a68b:	293436        	s8i	a9, a3, 54

	if (tid->flag & TID_REINITIALIZE) {
  90a68e:	7d8722        	bbci	a8, 29, 90a6b4 <owl_tgt_tid_cleanup+0x44>
		adf_os_print("TID REINIT DONE for tid %p\n", tid);
  90a691:	187182        	l32r	a8, 8e6c9c <memset+0x1b00>
  90a694:	1a72ca        	l32r	a10, 8e71bc <memset+0x2020>
  90a697:	288212        	l32i	a8, a8, 72
  90a69a:	033b02        	or	a11, a3, a3
  90a69d:	0b8000        	callx8	a8
		tid->flag  &= ~TID_REINITIALIZE;
  90a6a0:	293036        	l8ui	a9, a3, 54
  90a6a3:	c78b      	movi.n	a8, -5
  90a6a5:	089801        	and	a8, a9, a8
  90a6a8:	283436        	s8i	a8, a3, 54
		owl_tgt_tid_init(tid);
  90a6ab:	da30      	mov.n	a10, a3
  90a6ad:	5bfa12        	call8	908ef8 <owl_tgt_tid_init>
  90a6b0:	d10f      	retw.n
  90a6b2:	0000db        	excw
	} else {
		ath_aggr_resume_tid(sc, tid);
  90a6b5:	305bff        	excw
  90a6b8:	dbd1      	excw
  90a6ba:	0f006c        	excw

0090a6bc <ath_tgt_tx_comp_normal>:
	tid->baw_tail = tid->baw_head;
}

static void ath_tgt_tx_comp_normal(struct ath_softc_tgt *sc,
				   struct ath_tx_buf *bf)
{
  90a6bc:	6c1004        	entry	a1, 32
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90a6bf:	28304d        	l8ui	a8, a3, 77
  90a6c2:	8934      	l32i.n	a9, a3, 16
  90a6c4:	0c8b11        	slli	a11, a8, 4
  90a6c7:	08bb0c        	sub	a11, a11, a8
  90a6ca:	09bb0a        	addx4	a11, a11, a9
  90a6cd:	2bbc24        	addi	a11, a11, 36

	if (tid->flag & TID_CLEANUP_INPROGRES) {
  90a6d0:	28b036        	l8ui	a8, a11, 54
  90a6d3:	7f8705        	bbci	a8, 31, 90a6dc <ath_tgt_tx_comp_normal+0x20>
		owl_tgt_tid_cleanup(sc, tid);
  90a6d6:	022a02        	or	a10, a2, a2
  90a6d9:	5bffe5        	call8	90a670 <owl_tgt_tid_cleanup>
	}

	if (bf->bf_node) {
  90a6dc:	8834      	l32i.n	a8, a3, 16
  90a6de:	c98f      	beqz.n	a8, 90a701 <ath_tgt_tx_comp_normal+0x45>
}

static void
ath_tx_uc_comp(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	ath_tx_status_update(sc, bf);
  90a6e0:	da20      	mov.n	a10, a2
  90a6e2:	033b02        	or	a11, a3, a3
  90a6e5:	5bfc49        	call8	90980c <ath_tx_status_update>
	ath_update_stats(sc, bf);
  90a6e8:	da20      	mov.n	a10, a2
  90a6ea:	033b02        	or	a11, a3, a3
  90a6ed:	5bfa33        	call8	908fbc <ath_update_stats>
	ath_rate_tx_complete(sc, ATH_NODE_TARGET(bf->bf_node),
  90a6f0:	8b34      	l32i.n	a11, a3, 16
  90a6f2:	8c3e      	l32i.n	a12, a3, 56
  90a6f4:	da20      	mov.n	a10, a2
  90a6f6:	2d3c50        	addi	a13, a3, 80
  90a6f9:	c0e1      	movi.n	a14, 1
  90a6fb:	2f0a00        	movi	a15, 0
  90a6fe:	5bf9c6        	call8	908e18 <ath_rate_tx_complete>

	if (bf->bf_node) {
		ath_tx_uc_comp(sc, bf);
	}

	ath_tx_freebuf(sc, bf);
  90a701:	da20      	mov.n	a10, a2
  90a703:	db30      	mov.n	a11, a3
  90a705:	5bfbf9        	call8	9096ec <ath_tx_freebuf>
  90a708:	d10f      	retw.n
	...

0090a70c <ath_tgt_tx_comp_aggr>:
		INCR(tid->baw_tail, ATH_TID_MAX_BUFS);
	}
}

void ath_tgt_tx_comp_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90a70c:	6c1032        	entry	a1, 0x190
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90a70f:	25304d        	l8ui	a5, a3, 77
	}
}

void ath_tgt_tx_comp_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  90a712:	8434      	l32i.n	a4, a3, 16
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90a714:	0c5811        	slli	a8, a5, 4
  90a717:	05880c        	sub	a8, a8, a5
  90a71a:	04880a        	addx4	a8, a8, a4
  90a71d:	258c24        	addi	a5, a8, 36
	struct ath_rc_series rcs[4];
	u_int16_t seq_st;
	u_int32_t *ba;
	int ba_index;
	int nbad = 0;
	int nframes = bf->bf_nframes;
  90a720:	26304c        	l8ui	a6, a3, 76
	ath_tx_bufhead bf_q;
	int tx_ok = 1;
	struct ath_tx_buf *bar = NULL;
	struct ath_txq *txq;

	txq = bf->bf_txq;
  90a723:	283220        	l32i	a8, a3, 128

	if (tid->flag & TID_CLEANUP_INPROGRES) {
  90a726:	295036        	l8ui	a9, a5, 54
	struct ath_rc_series rcs[4];
	u_int16_t seq_st;
	u_int32_t *ba;
	int ba_index;
	int nbad = 0;
	int nframes = bf->bf_nframes;
  90a729:	261654        	s32i	a6, a1, 0x150
	struct ath_tx_buf *bf_next;
	ath_tx_bufhead bf_q;
	int tx_ok = 1;
	struct ath_tx_buf *bar = NULL;
  90a72c:	c060      	movi.n	a6, 0
  90a72e:	261652        	s32i	a6, a1, 0x148
	struct ath_txq *txq;

	txq = bf->bf_txq;
  90a731:	281655        	s32i	a8, a1, 0x154

	if (tid->flag & TID_CLEANUP_INPROGRES) {
  90a734:	090640        	extui	a6, a9, 0, 1
  90a737:	6460b1        	beqz	a6, 90a7ec <ath_tgt_tx_comp_aggr+0xe0>
  90a73a:	8b3e      	l32i.n	a11, a3, 56
  90a73c:	da10      	mov.n	a10, a1
  90a73e:	2c0a88        	movi	a12, 136
  90a741:	5bf9d4        	call8	908e94 <__adf_os_mem_copy>
  90a744:	2a1a10        	movi	a10, 0x110
  90a747:	a1aa      	add.n	a10, a10, a1
  90a749:	2b3c50        	addi	a11, a3, 80
  90a74c:	c3c0      	movi.n	a12, 48
  90a74e:	5bf9d1        	call8	908e94 <__adf_os_mem_copy>

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
		bf_next  = bf->bf_next;

		ath_tx_status_update_aggr(sc, bf, ds, rcs, 0);
  90a751:	281a10        	movi	a8, 0x110

	seq_st = ATH_DS_BA_SEQ(ds);
	ba     = ATH_DS_BA_BITMAP(ds);
	tx_ok  = (ATH_DS_TX_STATUS(ds) == HAL_OK);

	if (!bf->bf_isaggr) {
  90a754:	263221        	l32i	a6, a3, 132

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
		bf_next  = bf->bf_next;

		ath_tx_status_update_aggr(sc, bf, ds, rcs, 0);
  90a757:	a188      	add.n	a8, a8, a1
  90a759:	d780      	mov.n	a7, a8

	seq_st = ATH_DS_BA_SEQ(ds);
	ba     = ATH_DS_BA_BITMAP(ds);
	tx_ok  = (ATH_DS_TX_STATUS(ds) == HAL_OK);

	if (!bf->bf_isaggr) {
  90a75b:	7a6f2f        	bbsi	a6, 26, 90a78e <ath_tgt_tx_comp_aggr+0x82>
		ath_update_stats(sc, bf);
  90a75e:	db30      	mov.n	a11, a3
  90a760:	da20      	mov.n	a10, a2
  90a762:	5bfa16        	call8	908fbc <ath_update_stats>

		__stats(sc, tx_compunaggr);
  90a765:	24225e        	l32i	a4, a2, 0x178

		ath_tx_status_update(sc, bf);
  90a768:	db30      	mov.n	a11, a3
	tx_ok  = (ATH_DS_TX_STATUS(ds) == HAL_OK);

	if (!bf->bf_isaggr) {
		ath_update_stats(sc, bf);

		__stats(sc, tx_compunaggr);
  90a76a:	b144      	addi.n	a4, a4, 1

		ath_tx_status_update(sc, bf);
  90a76c:	022a02        	or	a10, a2, a2
	tx_ok  = (ATH_DS_TX_STATUS(ds) == HAL_OK);

	if (!bf->bf_isaggr) {
		ath_update_stats(sc, bf);

		__stats(sc, tx_compunaggr);
  90a76f:	24265e        	s32i	a4, a2, 0x178

		ath_tx_status_update(sc, bf);
  90a772:	5bfc26        	call8	90980c <ath_tx_status_update>

		ath_tx_freebuf(sc, bf);
  90a775:	db30      	mov.n	a11, a3
  90a777:	da20      	mov.n	a10, a2
  90a779:	5bfbdc        	call8	9096ec <ath_tx_freebuf>

		if (tid->flag & TID_CLEANUP_INPROGRES) {
  90a77c:	235036        	l8ui	a3, a5, 54
  90a77f:	7f3f02        	bbsi	a3, 31, 90a785 <ath_tgt_tx_comp_aggr+0x79>
  90a782:	6002e2        	j	90aa68 <ath_tgt_tx_comp_aggr+0x35c>
			owl_tgt_tid_cleanup(sc, tid);
  90a785:	da20      	mov.n	a10, a2
  90a787:	db50      	mov.n	a11, a5
  90a789:	5bffb9        	call8	90a670 <owl_tgt_tid_cleanup>
  90a78c:	d10f      	retw.n

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
		bf_next  = bf->bf_next;

		ath_tx_status_update_aggr(sc, bf, ds, rcs, 0);
  90a78e:	db30      	mov.n	a11, a3
  90a790:	da20      	mov.n	a10, a2
  90a792:	dc10      	mov.n	a12, a1
  90a794:	dd70      	mov.n	a13, a7
  90a796:	c0e0      	movi.n	a14, 0
		return;
	}

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
		bf_next  = bf->bf_next;
  90a798:	26320b        	l32i	a6, a3, 44

		ath_tx_status_update_aggr(sc, bf, ds, rcs, 0);
  90a79b:	5bfc3f        	call8	909898 <ath_tx_status_update_aggr>

		ath_tx_freebuf(sc, bf);
  90a79e:	db30      	mov.n	a11, a3
  90a7a0:	da20      	mov.n	a10, a2
  90a7a2:	5bfbd2        	call8	9096ec <ath_tx_freebuf>

		tid->incomp--;
  90a7a5:	235037        	l8ui	a3, a5, 55
  90a7a8:	b033      	addi.n	a3, a3, -1
  90a7aa:	030347        	extui	a3, a3, 0, 8
  90a7ad:	235437        	s8i	a3, a5, 55
		if (!tid->incomp) {
  90a7b0:	cd35      	bnez.n	a3, 90a7c9 <ath_tgt_tx_comp_aggr+0xbd>
			tid->flag  &= ~TID_CLEANUP_INPROGRES;
  90a7b2:	265036        	l8ui	a6, a5, 54
  90a7b5:	c73e      	movi.n	a3, -2
  90a7b7:	036301        	and	a3, a6, a3
  90a7ba:	235436        	s8i	a3, a5, 54
			ath_aggr_resume_tid(sc, tid);
  90a7bd:	da20      	mov.n	a10, a2
  90a7bf:	db50      	mov.n	a11, a5
  90a7c1:	5bff98        	call8	90a624 <ath_aggr_resume_tid>
  90a7c4:	600006        	j	90a7ce <ath_tgt_tx_comp_aggr+0xc2>
  90a7c7:	0000d3        	excw
			break;
		}

		bf = bf_next;
  90a7ca:	60656f        	j	910d3d <_etext+0x5ea4>
		}

		return;
	}

	while (bf) {
  90a7cd:	bfda      	addi.n	a10, a13, 15
		}

		bf = bf_next;
	}

	ath_update_aggr_stats(sc, ds, nframes, nbad);
  90a7cf:	20db10        	l32ai	a0, a13, 64
  90a7d2:	5bfa85        	call8	9091e8 <ath_update_aggr_stats$isra$2>
	ath_rate_tx_complete(sc, an, ds, rcs, nframes, nbad);
  90a7d5:	2d1a10        	movi	a13, 0x110
  90a7d8:	2e1254        	l32i	a14, a1, 0x150
  90a7db:	da20      	mov.n	a10, a2
  90a7dd:	db40      	mov.n	a11, a4
  90a7df:	dc10      	mov.n	a12, a1
  90a7e1:	ad1d      	add.n	a13, a1, a13
  90a7e3:	c0f0      	movi.n	a15, 0
  90a7e5:	5bf98c        	call8	908e18 <ath_rate_tx_complete>
  90a7e8:	d10f      	retw.n
  90a7ea:	00002c        	excw
void ath_tgt_tx_comp_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc lastds;
	struct ath_tx_desc *ds = &lastds;
  90a7ed:	0a882b        	mulsh	a8, a8, a10
  90a7f0:	320e0c        	excw
  90a7f3:	1a085b        	l32r	a10, 8cc960 <_bss_end+0x3bf158>
  90a7f6:	f9          	.byte 0xf9
  90a7f7:	a72d      	add.n	a13, a2, a7
		ath_tx_comp_cleanup(sc, bf);
		return;
	}

	adf_os_mem_copy(ds, bf->bf_lastds, sizeof (struct ath_tx_desc));
	adf_os_mem_copy(rcs, bf->bf_rcs, sizeof(rcs));
  90a7f9:	3c502a        	excw
  90a7fc:	1a10aa        	l32r	a10, 8ceaa4 <_bss_end+0x3c129c>
  90a7ff:	1a0ddb        	l32r	a10, 8cdf6c <_bss_end+0x3c0764>
  90a802:	022c0a        	addx4	a12, a2, a2
  90a805:	302d16        	excw
  90a808:	585bf9        	call8	9217f0 <_etext+0x16957>
  90a80b:	a22a      	add.n	a10, a2, a2

	if (ds->ds_txstat.ts_flags == HAL_TX_SW_FILTERED) {
  90a80d:	10ef2d        	l32r	a0, 9064c4 <tgt_HTCRecv_mgmthandler>
  90a810:	125869        	l32r	a2, 8e09b4 <_bss_end+0x3d31ac>
  90a813:	ae02      	add.n	a2, a0, a14
  90a815:	63fffc        	j	90a815 <ath_tgt_tx_comp_aggr+0x109>
		adf_os_assert(0);
		return;
	}

	if (!bf->bf_isaggr) {
  90a818:	273221        	l32i	a7, a3, 132
  90a81b:	c2b0      	movi.n	a11, 32
  90a81d:	07b701        	and	a7, a11, a7
  90a820:	657104        	bnez	a7, 90a928 <ath_tgt_tx_comp_aggr+0x21c>
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc *ds  = bf->bf_lastds;

	ath_update_stats(sc, bf);
  90a823:	da20      	mov.n	a10, a2
  90a825:	db30      	mov.n	a11, a3
static void
ath_tx_comp_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
	struct ath_tx_desc *ds  = bf->bf_lastds;
  90a827:	853e      	l32i.n	a5, a3, 56
}

static void
ath_tx_comp_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
  90a829:	8434      	l32i.n	a4, a3, 16
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90a82b:	26304d        	l8ui	a6, a3, 77
	struct ath_tx_desc *ds  = bf->bf_lastds;

	ath_update_stats(sc, bf);
  90a82e:	2d1658        	s32i	a13, a1, 0x160
  90a831:	5bf9e2        	call8	908fbc <ath_update_stats>
	ath_rate_tx_complete(sc, an, ds, bf->bf_rcs, 1, 0);
  90a834:	2d1258        	l32i	a13, a1, 0x160
  90a837:	dc50      	mov.n	a12, a5
  90a839:	da20      	mov.n	a10, a2
  90a83b:	db40      	mov.n	a11, a4
  90a83d:	c0e1      	movi.n	a14, 1
  90a83f:	df70      	mov.n	a15, a7
  90a841:	5bf975        	call8	908e18 <ath_rate_tx_complete>

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90a844:	255066        	l8ui	a5, a5, 102
  90a847:	7f5f02        	bbsi	a5, 31, 90a84d <ath_tgt_tx_comp_aggr+0x141>
  90a84a:	6000ab        	j	90a8f9 <ath_tgt_tx_comp_aggr+0x1ed>

static inline void
ath_tx_retry_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90a84d:	24304d        	l8ui	a4, a3, 77
	struct ath_txq *txq;

	txq = bf->bf_txq;

	if (bf->bf_retries >= OWLMAX_RETRIES) {
  90a850:	c079      	movi.n	a7, 9

static inline void
ath_tx_retry_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90a852:	0c4511        	slli	a5, a4, 4
  90a855:	04540c        	sub	a4, a5, a4
  90a858:	8534      	l32i.n	a5, a3, 16
	struct ath_txq *txq;

	txq = bf->bf_txq;
  90a85a:	263220        	l32i	a6, a3, 128

static inline void
ath_tx_retry_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90a85d:	05440a        	addx4	a4, a4, a5
	struct ath_txq *txq;

	txq = bf->bf_txq;

	if (bf->bf_retries >= OWLMAX_RETRIES) {
  90a860:	253086        	l8ui	a5, a3, 134

static inline void
ath_tx_retry_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90a863:	244c24        	addi	a4, a4, 36
	struct ath_txq *txq;

	txq = bf->bf_txq;

	if (bf->bf_retries >= OWLMAX_RETRIES) {
  90a866:	757b27        	bgeu	a7, a5, 90a891 <ath_tgt_tx_comp_aggr+0x185>
		__stats(sc, txunaggr_xretry);
  90a869:	252273        	l32i	a5, a2, 0x1cc
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90a86c:	2b3123        	l16ui	a11, a3, 70
	struct ath_txq *txq;

	txq = bf->bf_txq;

	if (bf->bf_retries >= OWLMAX_RETRIES) {
		__stats(sc, txunaggr_xretry);
  90a86f:	b155      	addi.n	a5, a5, 1
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90a871:	044a02        	or	a10, a4, a4
	struct ath_txq *txq;

	txq = bf->bf_txq;

	if (bf->bf_retries >= OWLMAX_RETRIES) {
		__stats(sc, txunaggr_xretry);
  90a874:	252673        	s32i	a5, a2, 0x1cc
		ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90a877:	0b4b14        	srli	a11, a11, 4
  90a87a:	5bf9ec        	call8	90902c <ath_tx_update_baw>
		ath_tx_status_update(sc, bf);
  90a87d:	da20      	mov.n	a10, a2
  90a87f:	db30      	mov.n	a11, a3
  90a881:	5bfbe2        	call8	90980c <ath_tx_status_update>
		ath_bar_tx(sc, tid, bf);
  90a884:	da20      	mov.n	a10, a2
  90a886:	db40      	mov.n	a11, a4
  90a888:	dc30      	mov.n	a12, a3
  90a88a:	5bfb32        	call8	909554 <ath_bar_tx>
  90a88d:	d10f      	retw.n
  90a88f:	000025        	excw
		return;
	}

	__stats(sc, txunaggr_compretries);
  90a892:	226db1        	addmi	a2, a6, 0xffffb100
  90a895:	552526        	call4	953d30 <_etext+0x48e97>
  90a898:	6d853e        	excw
	if (!bf->bf_lastds->ds_link) {
  90a89b:	295000        	l8ui	a9, a5, 0
  90a89e:	285001        	l8ui	a8, a5, 1
  90a8a1:	275002        	l8ui	a7, a5, 2
  90a8a4:	089910        	slli	a9, a9, 24
  90a8a7:	008811        	slli	a8, a8, 16
  90a8aa:	098802        	or	a8, a8, a9
  90a8ad:	087711        	slli	a7, a7, 8
  90a8b0:	255003        	l8ui	a5, a5, 3
  90a8b3:	087702        	or	a7, a7, a8
  90a8b6:	075502        	or	a5, a5, a7
  90a8b9:	cd54      	bnez.n	a5, 90a8d1 <ath_tgt_tx_comp_aggr+0x1c5>
		__stats(sc, txunaggr_errlast);
  90a8bb:	252272        	l32i	a5, a2, 0x1c8
		bf = ath_buf_toggle(sc, bf, 1);
  90a8be:	db30      	mov.n	a11, a3
		return;
	}

	__stats(sc, txunaggr_compretries);
	if (!bf->bf_lastds->ds_link) {
		__stats(sc, txunaggr_errlast);
  90a8c0:	b155      	addi.n	a5, a5, 1
  90a8c2:	252672        	s32i	a5, a2, 0x1c8
		bf = ath_buf_toggle(sc, bf, 1);
  90a8c5:	022a02        	or	a10, a2, a2
  90a8c8:	2c0a01        	movi	a12, 1
  90a8cb:	5bfaee        	call8	909484 <ath_buf_toggle>
  90a8ce:	0aa302        	or	a3, a10, a10
	}

	ath_tx_set_retry(sc, bf);
  90a8d1:	da20      	mov.n	a10, a2
  90a8d3:	db30      	mov.n	a11, a3
  90a8d5:	5bfbab        	call8	909784 <ath_tx_set_retry>
	asf_tailq_insert_head(&tid->buf_q, bf, bf_list);
  90a8d8:	824b      	l32i.n	a2, a4, 44
  90a8da:	253c24        	addi	a5, a3, 36
  90a8dd:	9239      	s32i.n	a2, a3, 36
  90a8df:	c823      	beqz.n	a2, 90a8e6 <ath_tgt_tx_comp_aggr+0x1da>
  90a8e1:	952a      	s32i.n	a5, a2, 40
  90a8e3:	600001        	j	90a8e8 <ath_tgt_tx_comp_aggr+0x1dc>
  90a8e6:	954c      	s32i.n	a5, a4, 48
  90a8e8:	934b      	s32i.n	a3, a4, 44
  90a8ea:	224c2c        	addi	a2, a4, 44
  90a8ed:	923a      	s32i.n	a2, a3, 40
	ath_tgt_tx_enqueue(txq, tid);
  90a8ef:	da60      	mov.n	a10, a6
  90a8f1:	db40      	mov.n	a11, a4
  90a8f3:	60016e        	j	90aa65 <ath_tgt_tx_comp_aggr+0x359>
  90a8f6:	000000        	ill

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
		ath_tx_retry_unaggr(sc, bf);
		return;
	}
	__stats(sc, tx_compunaggr);
  90a8f9:	25225e        	l32i	a5, a2, 0x178

	ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90a8fc:	2b3123        	l16ui	a11, a3, 70

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
		ath_tx_retry_unaggr(sc, bf);
		return;
	}
	__stats(sc, tx_compunaggr);
  90a8ff:	b155      	addi.n	a5, a5, 1
  90a901:	25265e        	s32i	a5, a2, 0x178

static void
ath_tx_comp_unaggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);
  90a904:	0c6511        	slli	a5, a6, 4
  90a907:	06560c        	sub	a6, a5, a6
  90a90a:	046a0a        	addx4	a10, a6, a4
		ath_tx_retry_unaggr(sc, bf);
		return;
	}
	__stats(sc, tx_compunaggr);

	ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90a90d:	2aac24        	addi	a10, a10, 36
  90a910:	0b4b14        	srli	a11, a11, 4
  90a913:	5bf9c6        	call8	90902c <ath_tx_update_baw>
	ath_tx_status_update(sc, bf);
  90a916:	da20      	mov.n	a10, a2
  90a918:	db30      	mov.n	a11, a3
  90a91a:	5bfbbc        	call8	90980c <ath_tx_status_update>
	ath_tx_freebuf(sc, bf);
  90a91d:	da20      	mov.n	a10, a2
  90a91f:	db30      	mov.n	a11, a3
  90a921:	5bfb72        	call8	9096ec <ath_tx_freebuf>
  90a924:	d10f      	retw.n
  90a926:	000027        	excw
	if (!bf->bf_isaggr) {
		ath_tx_comp_unaggr(sc, bf);
		return;
	}

	__stats(sc, tx_compaggr);
  90a929:	225f26        	s32ri	a2, a5, 152

	asf_tailq_init(&bf_q);
  90a92c:	1650b1        	l32r	a6, 8debf0 <_bss_end+0x3d13e8>
	if (!bf->bf_isaggr) {
		ath_tx_comp_unaggr(sc, bf);
		return;
	}

	__stats(sc, tx_compaggr);
  90a92f:	77261a        	bbci	a2, 7, 90a94d <ath_tgt_tx_comp_aggr+0x241>

	asf_tailq_init(&bf_q);
  90a932:	402726        	excw
	if (!bf->bf_isaggr) {
		ath_tx_comp_unaggr(sc, bf);
		return;
	}

	__stats(sc, tx_compaggr);
  90a935:	5fa617        	call12	8f4194 <memset+0xeff8>

	asf_tailq_init(&bf_q);
  90a938:	271651        	s32i	a7, a1, 0x144

	seq_st =  ATH_DS_BA_SEQ(ds);
  90a93b:	281176        	l16ui	a8, a1, 236
	ba     =  ATH_DS_BA_BITMAP(ds);
	tx_ok  =  (ATH_DS_TX_STATUS(ds) == HAL_OK);
  90a93e:	2710ee        	l8ui	a7, a1, 238

	__stats(sc, tx_compaggr);

	asf_tailq_init(&bf_q);

	seq_st =  ATH_DS_BA_SEQ(ds);
  90a941:	281656        	s32i	a8, a1, 0x158
	ba     =  ATH_DS_BA_BITMAP(ds);
	tx_ok  =  (ATH_DS_TX_STATUS(ds) == HAL_OK);

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90a944:	070f40        	extui	a15, a7, 0, 1
  90a947:	c8f1      	beqz.n	a15, 90a94c <ath_tgt_tx_comp_aggr+0x240>
  90a949:	60001f        	j	90a96c <ath_tgt_tx_comp_aggr+0x260>

	asf_tailq_init(&bf_q);

	seq_st =  ATH_DS_BA_SEQ(ds);
	ba     =  ATH_DS_BA_BITMAP(ds);
	tx_ok  =  (ATH_DS_TX_STATUS(ds) == HAL_OK);
  90a94c:	c091      	movi.n	a9, 1
  90a94e:	07f939        	movnez	a9, a15, a7
	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	if (tx_ok && !ATH_DS_TX_BA(ds)) {
  90a951:	ca95      	beqz.n	a9, 90a97a <ath_tgt_tx_comp_aggr+0x26e>
  90a953:	d6f0      	mov.n	a6, a15
  90a955:	7faf23        	bbsi	a10, 31, 90a97c <ath_tgt_tx_comp_aggr+0x270>
		__stats(sc, txaggr_babug);
  90a958:	242269        	l32i	a4, a2, 0x1a4
		adf_os_print("BA Bug?\n");
  90a95b:	1a72cb        	l32r	a10, 8e7488 <memset+0x22ec>
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	if (tx_ok && !ATH_DS_TX_BA(ds)) {
		__stats(sc, txaggr_babug);
  90a95e:	b144      	addi.n	a4, a4, 1
  90a960:	242669        	s32i	a4, a2, 0x1a4
		adf_os_print("BA Bug?\n");
  90a963:	147182        	l32r	a4, 8e6f6c <memset+0x1dd0>
  90a966:	244212        	l32i	a4, a4, 72
  90a969:	0b4000        	callx8	a4
		ath_tx_comp_aggr_error(sc, bf, tid);
  90a96c:	da20      	mov.n	a10, a2
  90a96e:	db30      	mov.n	a11, a3
  90a970:	dc50      	mov.n	a12, a5
  90a972:	5bfc1d        	call8	9099e8 <ath_tx_comp_aggr_error>
  90a975:	d10f      	retw.n
  90a977:	000000        	ill
	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	if (tx_ok && !ATH_DS_TX_BA(ds)) {
  90a97a:	d690      	mov.n	a6, a9

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
		bf_next  = bf->bf_next;

		if (tx_ok && ATH_BA_ISSET(ba, ba_index)) {
  90a97c:	270afc        	movi	a7, 252
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90a97f:	2b3123        	l16ui	a11, a3, 70
  90a982:	281256        	l32i	a8, a1, 0x158
  90a985:	0b4b14        	srli	a11, a11, 4
  90a988:	08ba0c        	sub	a10, a11, a8
		bf_next  = bf->bf_next;
  90a98b:	883b      	l32i.n	a8, a3, 44
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	while (bf) {
		ba_index = ATH_BA_INDEX(seq_st, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90a98d:	0a0c4b        	extui	a12, a10, 0, 12
		bf_next  = bf->bf_next;
  90a990:	281657        	s32i	a8, a1, 0x15c

		if (tx_ok && ATH_BA_ISSET(ba, ba_index)) {
  90a993:	c38f      	movi.n	a8, 63
  90a995:	7c824c        	blt	a8, a12, 90a9e5 <ath_tgt_tx_comp_aggr+0x2d9>
  90a998:	649049        	beqz	a9, 90a9e5 <ath_tgt_tx_comp_aggr+0x2d9>
  90a99b:	0c5c12        	srai	a12, a12, 5
  90a99e:	01cc0a        	addx4	a12, a12, a1
  90a9a1:	a7cc      	add.n	a12, a12, a7
  90a9a3:	c0e1      	movi.n	a14, 1
  90a9a5:	8cc0      	l32i.n	a12, a12, 0
  90a9a7:	00a104        	ssl	a10
  90a9aa:	00ea1a        	sll	a10, a14
  90a9ad:	7ca034        	bnone	a10, a12, 90a9e5 <ath_tgt_tx_comp_aggr+0x2d9>
			__stats(sc, txaggr_compgood);
  90a9b0:	2a2262        	l32i	a10, a2, 0x188
  90a9b3:	aeaa      	add.n	a10, a10, a14
  90a9b5:	2a2662        	s32i	a10, a2, 0x188
			ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90a9b8:	055a02        	or	a10, a5, a5
  90a9bb:	291659        	s32i	a9, a1, 0x164
  90a9be:	2e1658        	s32i	a14, a1, 0x160
  90a9c1:	5bf99a        	call8	90902c <ath_tx_update_baw>
			ath_tx_status_update_aggr(sc, bf, ds, rcs, 1);
  90a9c4:	2e1258        	l32i	a14, a1, 0x160
  90a9c7:	2c0a88        	movi	a12, 136
  90a9ca:	2d1a10        	movi	a13, 0x110
  90a9cd:	da20      	mov.n	a10, a2
  90a9cf:	db30      	mov.n	a11, a3
  90a9d1:	a1cc      	add.n	a12, a12, a1
  90a9d3:	0d1d08        	add	a13, a1, a13
  90a9d6:	5bfbb0        	call8	909898 <ath_tx_status_update_aggr>
			ath_tx_freebuf(sc, bf);
  90a9d9:	da20      	mov.n	a10, a2
  90a9db:	db30      	mov.n	a11, a3
  90a9dd:	5bfb43        	call8	9096ec <ath_tx_freebuf>
  90a9e0:	600019        	j	90a9fd <ath_tgt_tx_comp_aggr+0x2f1>
  90a9e3:	00002c        	excw
		} else {
			ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
  90a9e6:	1a402d        	l32r	a10, 8daa9c <_bss_end+0x3cd294>
  90a9e9:	1a48da        	l32r	a10, 8dcd54 <_bss_end+0x3cf54c>
  90a9ec:	20db30        	l32ai	a0, a13, 192
  90a9ef:	ac1c      	add.n	a12, a1, a12
  90a9f1:	0d1d08        	add	a13, a1, a13
  90a9f4:	291659        	s32i	a9, a1, 0x164
			nbad ++;
  90a9f7:	266c01        	addi	a6, a6, 1
			__stats(sc, txaggr_compgood);
			ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
			ath_tx_status_update_aggr(sc, bf, ds, rcs, 1);
			ath_tx_freebuf(sc, bf);
		} else {
			ath_tx_retry_subframe(sc, bf, &bf_q, &bar);
  90a9fa:	5bfbc3        	call8	909908 <ath_tx_retry_subframe>
  90a9fd:	231257        	l32i	a3, a1, 0x15c
			nbad ++;
  90aa00:	291259        	l32i	a9, a1, 0x164
		adf_os_print("BA Bug?\n");
		ath_tx_comp_aggr_error(sc, bf, tid);
		return;
	}

	while (bf) {
  90aa03:	653f78        	bnez	a3, 90a97f <ath_tgt_tx_comp_aggr+0x273>
			nbad ++;
		}
		bf = bf_next;
	}

	ath_update_aggr_stats(sc, ds, nframes, nbad);
  90aa06:	2b0a88        	movi	a11, 136
  90aa09:	da20      	mov.n	a10, a2
  90aa0b:	a1bb      	add.n	a11, a11, a1
  90aa0d:	5bf9f6        	call8	9091e8 <ath_update_aggr_stats$isra$2>
	ath_rate_tx_complete(sc, an, ds, rcs, nframes, nbad);
  90aa10:	2c0a88        	movi	a12, 136
  90aa13:	2d1a10        	movi	a13, 0x110
  90aa16:	2e1254        	l32i	a14, a1, 0x150
  90aa19:	a1cc      	add.n	a12, a12, a1
  90aa1b:	da20      	mov.n	a10, a2
  90aa1d:	db40      	mov.n	a11, a4
  90aa1f:	0d1d08        	add	a13, a1, a13
  90aa22:	066f02        	or	a15, a6, a6
  90aa25:	5bf8fc        	call8	908e18 <ath_rate_tx_complete>

	if (bar) {
  90aa28:	2c1252        	l32i	a12, a1, 0x148
  90aa2b:	c8c5      	beqz.n	a12, 90aa34 <ath_tgt_tx_comp_aggr+0x328>
		ath_bar_tx(sc, tid, bar);
  90aa2d:	da20      	mov.n	a10, a2
  90aa2f:	db50      	mov.n	a11, a5
  90aa31:	5bfac8        	call8	909554 <ath_bar_tx>
	}

	if (!asf_tailq_empty(&bf_q)) {
  90aa34:	231250        	l32i	a3, a1, 0x140
  90aa37:	ca3d      	beqz.n	a3, 90aa68 <ath_tgt_tx_comp_aggr+0x35c>
		__stats(sc, txaggr_prepends);
  90aa39:	232264        	l32i	a3, a2, 0x190
  90aa3c:	b133      	addi.n	a3, a3, 1
  90aa3e:	232664        	s32i	a3, a2, 0x190
		TAILQ_INSERTQ_HEAD(&tid->buf_q, &bf_q, bf_list);
  90aa41:	835b      	l32i.n	a3, a5, 44
  90aa43:	221251        	l32i	a2, a1, 0x144
  90aa46:	c83a      	beqz.n	a3, 90aa54 <ath_tgt_tx_comp_aggr+0x348>
  90aa48:	9320      	s32i.n	a3, a2, 0
  90aa4a:	825b      	l32i.n	a2, a5, 44
  90aa4c:	231251        	l32i	a3, a1, 0x144
  90aa4f:	932a      	s32i.n	a3, a2, 40
  90aa51:	600001        	j	90aa56 <ath_tgt_tx_comp_aggr+0x34a>
  90aa54:	925c      	s32i.n	a2, a5, 48
  90aa56:	221250        	l32i	a2, a1, 0x140
  90aa59:	235c2c        	addi	a3, a5, 44
  90aa5c:	925b      	s32i.n	a2, a5, 44
		ath_tgt_tx_enqueue(txq, tid);
  90aa5e:	2a1255        	l32i	a10, a1, 0x154
		ath_bar_tx(sc, tid, bar);
	}

	if (!asf_tailq_empty(&bf_q)) {
		__stats(sc, txaggr_prepends);
		TAILQ_INSERTQ_HEAD(&tid->buf_q, &bf_q, bf_list);
  90aa61:	932a      	s32i.n	a3, a2, 40
		ath_tgt_tx_enqueue(txq, tid);
  90aa63:	db50      	mov.n	a11, a5
  90aa65:	5bf9d7        	call8	9091c4 <ath_tgt_tx_enqueue>
  90aa68:	d10f      	retw.n
	...

0090aa6c <owltgt_tx_processq>:
	ath_tx_status_send(sc);
}

void owltgt_tx_processq(struct ath_softc_tgt *sc, struct ath_txq *txq,
			owl_txq_state_t txqstate)
{
  90aa6c:	6c1006        	entry	a1, 48
	struct ath_tx_buf *bf;
	struct ath_tx_desc *ds;
	struct ath_hal *ah = sc->sc_ah;
  90aa6f:	252d05        	addmi	a5, a2, 0x500
  90aa72:	865b      	l32i.n	a6, a5, 44
		bf = asf_tailq_first(&txq->axq_q);

		ds = bf->bf_lastds;
		status = ah->ah_procTxDesc(ah, ds);

		if (status == HAL_EINPROGRESS) {
  90aa74:	c07f      	movi.n	a7, 15
	struct ath_tx_desc *ds;
	struct ath_hal *ah = sc->sc_ah;
	HAL_STATUS status;

	for (;;) {
		if (asf_tailq_empty(&txq->axq_q)) {
  90aa76:	8532      	l32i.n	a5, a3, 8
  90aa78:	cc54      	bnez.n	a5, 90aa80 <owltgt_tx_processq+0x14>
			txq->axq_link = NULL;
  90aa7a:	9531      	s32i.n	a5, a3, 4
			txq->axq_linkbuf = NULL;
  90aa7c:	9535      	s32i.n	a5, a3, 20
			break;
  90aa7e:	d10f      	retw.n
		}

		bf = asf_tailq_first(&txq->axq_q);

		ds = bf->bf_lastds;
  90aa80:	885e      	l32i.n	a8, a5, 56
		status = ah->ah_procTxDesc(ah, ds);
  90aa82:	29621a        	l32i	a9, a6, 104
  90aa85:	db80      	mov.n	a11, a8
  90aa87:	9810      	s32i.n	a8, a1, 0
  90aa89:	da60      	mov.n	a10, a6
  90aa8b:	0b9000        	callx8	a9

		if (status == HAL_EINPROGRESS) {
  90aa8e:	8810      	l32i.n	a8, a1, 0
  90aa90:	77a91e        	bne	a10, a7, 90aab2 <owltgt_tx_processq+0x46>
			if (txqstate == OWL_TXQ_ACTIVE)
  90aa93:	64406d        	beqz	a4, 90ab04 <owltgt_tx_processq+0x98>
				break;
			else if (txqstate == OWL_TXQ_STOPPED) {
  90aa96:	694112        	bnei	a4, 1, 90aaac <owltgt_tx_processq+0x40>
				__stats(sc, tx_stopfiltered);
  90aa99:	292275        	l32i	a9, a2, 0x1d4
  90aa9c:	b199      	addi.n	a9, a9, 1
  90aa9e:	292675        	s32i	a9, a2, 0x1d4
				ds->ds_txstat.ts_flags  = 0;
  90aaa1:	c090      	movi.n	a9, 0
  90aaa3:	298467        	s8i	a9, a8, 103
				ds->ds_txstat.ts_status = HAL_OK;
  90aaa6:	298466        	s8i	a9, a8, 102
  90aaa9:	600005        	j	90aab2 <owltgt_tx_processq+0x46>
			} else {
				ds->ds_txstat.ts_flags  = HAL_TX_SW_FILTERED;
  90aaac:	29fa80        	movi	a9, -128
  90aaaf:	298467        	s8i	a9, a8, 103
			}
		}

		ATH_TXQ_REMOVE_HEAD(txq, bf, bf_list);
  90aab2:	8859      	l32i.n	a8, a5, 36
  90aab4:	895a      	l32i.n	a9, a5, 40
  90aab6:	c883      	beqz.n	a8, 90aabd <owltgt_tx_processq+0x51>
  90aab8:	998a      	s32i.n	a9, a8, 40
  90aaba:	600001        	j	90aabf <owltgt_tx_processq+0x53>
  90aabd:	9933      	s32i.n	a9, a3, 12
  90aabf:	895a      	l32i.n	a9, a5, 40
  90aac1:	9890      	s32i.n	a8, a9, 0
  90aac3:	8834      	l32i.n	a8, a3, 16
  90aac5:	b088      	addi.n	a8, a8, -1
  90aac7:	9834      	s32i.n	a8, a3, 16
		if ((asf_tailq_empty(&txq->axq_q))) {
  90aac9:	8832      	l32i.n	a8, a3, 8
  90aacb:	cc8a      	bnez.n	a8, 90aad9 <owltgt_tx_processq+0x6d>
			__stats(sc, tx_qnull);
  90aacd:	29225c        	l32i	a9, a2, 0x170
  90aad0:	b199      	addi.n	a9, a9, 1
  90aad2:	29265c        	s32i	a9, a2, 0x170
			txq->axq_link = NULL;
  90aad5:	9831      	s32i.n	a8, a3, 4
			txq->axq_linkbuf = NULL;
  90aad7:	9835      	s32i.n	a8, a3, 20
		}

		if (bf->bf_comp) {
  90aad9:	885f      	l32i.n	a8, a5, 60
			bf->bf_comp(sc, bf);
  90aadb:	da20      	mov.n	a10, a2
  90aadd:	db50      	mov.n	a11, a5
			__stats(sc, tx_qnull);
			txq->axq_link = NULL;
			txq->axq_linkbuf = NULL;
		}

		if (bf->bf_comp) {
  90aadf:	c886      	beqz.n	a8, 90aae9 <owltgt_tx_processq+0x7d>
			bf->bf_comp(sc, bf);
  90aae1:	0b8000        	callx8	a8
  90aae4:	60000c        	j	90aaf4 <owltgt_tx_processq+0x88>
  90aae7:	00005b        	extui	a0, a0, 16, 12
		} else {
			ath_tx_status_update(sc, bf);
  90aaea:	fb          	.byte 0xfb
  90aaeb:	48022a        	excw
			ath_buf_comp(sc, bf);
  90aaee:	02db50        	extui	a11, a2, 29, 1
  90aaf1:	5bfaef        	call8	9096b0 <ath_buf_comp>
		}

		if (txqstate == OWL_TXQ_ACTIVE) {
  90aaf4:	654f7e        	bnez	a4, 90aa76 <owltgt_tx_processq+0xa>
			ath_tgt_txq_schedule(sc, txq);
  90aaf7:	022a02        	or	a10, a2, a2
  90aafa:	033b02        	or	a11, a3, a3
  90aafd:	5bfe4c        	call8	90a430 <ath_tgt_txq_schedule>
  90ab00:	63ff72        	j	90aa76 <owltgt_tx_processq+0xa>
  90ab03:	00d10f        	subx8	a1, a13, a0
	...

0090ab08 <owl_tgt_tx_tasklet>:
	owltgt_tx_processq(sc, txq, OWL_TXQ_ACTIVE);
	ah->ah_setInterrupts(ah, sc->sc_imask);
}

void owl_tgt_tx_tasklet(TQUEUE_ARG data)
{
  90ab08:	6c1004        	entry	a1, 32
	struct ath_softc_tgt *sc = (struct ath_softc_tgt *)data;
	a_int32_t i;
	struct ath_txq *txq;

	ath_tx_status_clear(sc);
  90ab0b:	da20      	mov.n	a10, a2
  90ab0d:	5bfb3b        	call8	9097fc <ath_tx_status_clear>

	for (i = 0; i < (HAL_NUM_TX_QUEUES - 6); i++) {
  90ab10:	c030      	movi.n	a3, 0
		txq = ATH_TXQ(sc, i);

		if (ATH_TXQ_SETUP(sc, i)) {
			if (txq == sc->sc_cabq)
  90ab12:	262d05        	addmi	a6, a2, 0x500
	ath_tx_status_clear(sc);

	for (i = 0; i < (HAL_NUM_TX_QUEUES - 6); i++) {
		txq = ATH_TXQ(sc, i);

		if (ATH_TXQ_SETUP(sc, i)) {
  90ab15:	242d03        	addmi	a4, a2, 0x300
  90ab18:	2440c8        	l8ui	a4, a4, 200
  90ab1b:	003004        	ssr	a3
  90ab1e:	04041b        	sra	a4, a4
  90ab21:	7f4745        	bbci	a4, 31, 90ab6a <owl_tgt_tx_tasklet+0x62>
	struct ath_txq *txq;

	ath_tx_status_clear(sc);

	for (i = 0; i < (HAL_NUM_TX_QUEUES - 6); i++) {
		txq = ATH_TXQ(sc, i);
  90ab24:	253c1e        	addi	a5, a3, 30
  90ab27:	0b5511        	slli	a5, a5, 5
  90ab2a:	a525      	add.n	a5, a2, a5

		if (ATH_TXQ_SETUP(sc, i)) {
			if (txq == sc->sc_cabq)
  90ab2c:	846c      	l32i.n	a4, a6, 48
	struct ath_txq *txq;

	ath_tx_status_clear(sc);

	for (i = 0; i < (HAL_NUM_TX_QUEUES - 6); i++) {
		txq = ATH_TXQ(sc, i);
  90ab2e:	bc55      	addi.n	a5, a5, 12

		if (ATH_TXQ_SETUP(sc, i)) {
			if (txq == sc->sc_cabq)
  90ab30:	74592d        	bne	a5, a4, 90ab61 <owl_tgt_tx_tasklet+0x59>
	}
}

static void owltgt_tx_process_cabq(struct ath_softc_tgt *sc, struct ath_txq *txq)
{
	struct ath_hal *ah = sc->sc_ah;
  90ab33:	846b      	l32i.n	a4, a6, 44
	ah->ah_setInterrupts(ah, sc->sc_imask & ~HAL_INT_SWBA);
  90ab35:	1972a9        	l32r	a9, 8e75dc <memset+0x2440>
  90ab38:	2b22c4        	l32i	a11, a2, 0x310
  90ab3b:	284228        	l32i	a8, a4, 160
  90ab3e:	09bb01        	and	a11, a11, a9
  90ab41:	da40      	mov.n	a10, a4
  90ab43:	0b8000        	callx8	a8
	owltgt_tx_processq(sc, txq, OWL_TXQ_ACTIVE);
  90ab46:	da20      	mov.n	a10, a2
  90ab48:	db50      	mov.n	a11, a5
  90ab4a:	2c0a00        	movi	a12, 0
  90ab4d:	5bffc7        	call8	90aa6c <owltgt_tx_processq>
	ah->ah_setInterrupts(ah, sc->sc_imask);
  90ab50:	2b22c4        	l32i	a11, a2, 0x310
  90ab53:	254228        	l32i	a5, a4, 160
  90ab56:	044a02        	or	a10, a4, a4
  90ab59:	0b5000        	callx8	a5
  90ab5c:	60000a        	j	90ab6a <owl_tgt_tx_tasklet+0x62>
  90ab5f:	0000da        	excw

		if (ATH_TXQ_SETUP(sc, i)) {
			if (txq == sc->sc_cabq)
				owltgt_tx_process_cabq(sc, txq);
			else
				owltgt_tx_processq(sc, txq, OWL_TXQ_ACTIVE);
  90ab62:	20db50        	l32ai	a0, a13, 0x140
  90ab65:	c0c0      	movi.n	a12, 0
  90ab67:	5bffc1        	call8	90aa6c <owltgt_tx_processq>
	a_int32_t i;
	struct ath_txq *txq;

	ath_tx_status_clear(sc);

	for (i = 0; i < (HAL_NUM_TX_QUEUES - 6); i++) {
  90ab6a:	b133      	addi.n	a3, a3, 1
  90ab6c:	6934a5        	bnei	a3, 4, 90ab15 <owl_tgt_tx_tasklet+0xd>
			else
				owltgt_tx_processq(sc, txq, OWL_TXQ_ACTIVE);
		}
	}

	ath_tx_status_send(sc);
  90ab6f:	da20      	mov.n	a10, a2
  90ab71:	5bfbc9        	call8	909a98 <ath_tx_status_send>
  90ab74:	d10f      	retw.n
	...

0090ab78 <ath_tgt_handle_aggr>:
	} while (!asf_tailq_empty(&txq->axq_tidq) && !bdone);
}

void
ath_tgt_handle_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90ab78:	6c1004        	entry	a1, 32
	ath_atx_tid_t *tid;
	struct ath_node_target *an;
	struct ath_txq *txq = bf->bf_txq;
	a_bool_t queue_frame, within_baw;

	an = (struct ath_node_target *)bf->bf_node;
  90ab7b:	8834      	l32i.n	a8, a3, 16
void
ath_tgt_handle_aggr(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	ath_atx_tid_t *tid;
	struct ath_node_target *an;
	struct ath_txq *txq = bf->bf_txq;
  90ab7d:	2a3220        	l32i	a10, a3, 128
	a_bool_t queue_frame, within_baw;

	an = (struct ath_node_target *)bf->bf_node;
	adf_os_assert(an);
  90ab80:	cc81      	bnez.n	a8, 90ab85 <ath_tgt_handle_aggr+0xd>
  90ab82:	63fffc        	j	90ab82 <ath_tgt_handle_aggr+0xa>

	tid = &an->tid[bf->bf_tidno];
  90ab85:	29304d        	l8ui	a9, a3, 77
	within_baw = BAW_WITHIN(tid->seq_start, tid->baw_size,
				SEQNO_FROM_BF_SEQNO(bf->bf_seqno));

	queue_frame = ( (txq->axq_depth >= ATH_AGGR_MIN_QDEPTH) ||
			(!asf_tailq_empty(&tid->buf_q)) ||
			(tid->paused) || (!within_baw) );
  90ab88:	8da4      	l32i.n	a13, a10, 16
	a_bool_t queue_frame, within_baw;

	an = (struct ath_node_target *)bf->bf_node;
	adf_os_assert(an);

	tid = &an->tid[bf->bf_tidno];
  90ab8a:	0c9b11        	slli	a11, a9, 4
  90ab8d:	09bb0c        	sub	a11, a11, a9
  90ab90:	08bb0a        	addx4	a11, a11, a8
	adf_os_assert(tid);

	bf->bf_comp = ath_tgt_tx_comp_aggr;
  90ab93:	1872c9        	l32r	a8, 8e76b8 <memset+0x251c>
	a_bool_t queue_frame, within_baw;

	an = (struct ath_node_target *)bf->bf_node;
	adf_os_assert(an);

	tid = &an->tid[bf->bf_tidno];
  90ab96:	2bbc24        	addi	a11, a11, 36
	adf_os_assert(tid);

	bf->bf_comp = ath_tgt_tx_comp_aggr;
  90ab99:	983f      	s32i.n	a8, a3, 60

	within_baw = BAW_WITHIN(tid->seq_start, tid->baw_size,
  90ab9b:	293123        	l16ui	a9, a3, 70
  90ab9e:	2cb102        	l16ui	a12, a11, 4
  90aba1:	28b104        	l16ui	a8, a11, 8
				SEQNO_FROM_BF_SEQNO(bf->bf_seqno));

	queue_frame = ( (txq->axq_depth >= ATH_AGGR_MIN_QDEPTH) ||
			(!asf_tailq_empty(&tid->buf_q)) ||
			(tid->paused) || (!within_baw) );
  90aba4:	cdd4      	bnez.n	a13, 90abbc <ath_tgt_handle_aggr+0x44>
	bf->bf_comp = ath_tgt_tx_comp_aggr;

	within_baw = BAW_WITHIN(tid->seq_start, tid->baw_size,
				SEQNO_FROM_BF_SEQNO(bf->bf_seqno));

	queue_frame = ( (txq->axq_depth >= ATH_AGGR_MIN_QDEPTH) ||
  90aba6:	8dbb      	l32i.n	a13, a11, 44
  90aba8:	65d010        	bnez	a13, 90abbc <ath_tgt_handle_aggr+0x44>
			(!asf_tailq_empty(&tid->buf_q)) ||
  90abab:	2db034        	l8ui	a13, a11, 52
  90abae:	ccda      	bnez.n	a13, 90abbc <ath_tgt_handle_aggr+0x44>
	tid = &an->tid[bf->bf_tidno];
	adf_os_assert(tid);

	bf->bf_comp = ath_tgt_tx_comp_aggr;

	within_baw = BAW_WITHIN(tid->seq_start, tid->baw_size,
  90abb0:	094914        	srli	a9, a9, 4
  90abb3:	0c990c        	sub	a9, a9, a12
  90abb6:	09094b        	extui	a9, a9, 0, 12
				SEQNO_FROM_BF_SEQNO(bf->bf_seqno));

	queue_frame = ( (txq->axq_depth >= ATH_AGGR_MIN_QDEPTH) ||
			(!asf_tailq_empty(&tid->buf_q)) ||
			(tid->paused) || (!within_baw) );
  90abb9:	789215        	blt	a9, a8, 90abd2 <ath_tgt_handle_aggr+0x5a>

	if (queue_frame) {
		asf_tailq_insert_tail(&tid->buf_q, bf, bf_list);
  90abbc:	c020      	movi.n	a2, 0
  90abbe:	9239      	s32i.n	a2, a3, 36
  90abc0:	82bc      	l32i.n	a2, a11, 48
  90abc2:	923a      	s32i.n	a2, a3, 40
  90abc4:	9320      	s32i.n	a3, a2, 0
  90abc6:	233c24        	addi	a3, a3, 36
  90abc9:	93bc      	s32i.n	a3, a11, 48
		ath_tgt_tx_enqueue(txq, tid);
  90abcb:	5bf97e        	call8	9091c4 <ath_tgt_tx_enqueue>
  90abce:	d10f      	retw.n
  90abd0:	0000da        	excw
	} else {
		ath_tx_addto_baw(tid, bf);
  90abd3:	b0db      	addi.n	a11, a13, -1
  90abd5:	305bfd        	excw
  90abd8:	792822        	bany	a2, a9, 90abfe <ath_tgt_tx_cleanup+0x12>
		__stats(sc, txaggr_nframes);
  90abdb:	5dda20        	call12	98145c <_etext+0x765c3>
  90abde:	b188      	addi.n	a8, a8, 1
  90abe0:	28265d        	s32i	a8, a2, 0x174
		ath_tgt_tx_send_normal(sc, bf);
  90abe3:	db30      	mov.n	a11, a3
  90abe5:	5bfc5b        	call8	909d54 <ath_tgt_tx_send_normal>
  90abe8:	d10f      	retw.n
	...

0090abec <ath_tgt_tx_cleanup>:
	wh->i_fc[1] |= IEEE80211_FC1_RETRY;
}

void ath_tgt_tx_cleanup(struct ath_softc_tgt *sc, struct ath_node_target *an,
			ath_atx_tid_t *tid, a_uint8_t discard_all)
{
  90abec:	6c1004        	entry	a1, 32
  90abef:	050547        	extui	a5, a5, 0, 8
	struct ath_tx_buf *bf_next;
	struct ath_txq *txq;

	txq = TID_TO_ACTXQ(tid->tidno);

	bf = asf_tailq_first(&tid->buf_q);
  90abf2:	834b      	l32i.n	a3, a4, 44

	while (bf) {
		if (discard_all || bf->bf_isretried) {
			bf_next = asf_tailq_next(bf, bf_list);
			TAILQ_DEQ(&tid->buf_q, bf, bf_list);
			if (bf->bf_isretried)
  90abf4:	c160      	movi.n	a6, 16

	txq = TID_TO_ACTXQ(tid->tidno);

	bf = asf_tailq_first(&tid->buf_q);

	while (bf) {
  90abf6:	600042        	j	90ac3c <ath_tgt_tx_cleanup+0x50>
		if (discard_all || bf->bf_isretried) {
  90abf9:	cc54      	bnez.n	a5, 90ac01 <ath_tgt_tx_cleanup+0x15>
  90abfb:	273221        	l32i	a7, a3, 132
  90abfe:	776033        	bnone	a6, a7, 90ac35 <ath_tgt_tx_cleanup+0x49>
			bf_next = asf_tailq_next(bf, bf_list);
  90ac01:	8739      	l32i.n	a7, a3, 36
			TAILQ_DEQ(&tid->buf_q, bf, bf_list);
  90ac03:	834b      	l32i.n	a3, a4, 44
  90ac05:	c83f      	beqz.n	a3, 90ac18 <ath_tgt_tx_cleanup+0x2c>
  90ac07:	8839      	l32i.n	a8, a3, 36
  90ac09:	893a      	l32i.n	a9, a3, 40
  90ac0b:	c883      	beqz.n	a8, 90ac12 <ath_tgt_tx_cleanup+0x26>
  90ac0d:	998a      	s32i.n	a9, a8, 40
  90ac0f:	600001        	j	90ac14 <ath_tgt_tx_cleanup+0x28>
  90ac12:	994c      	s32i.n	a9, a4, 48
  90ac14:	893a      	l32i.n	a9, a3, 40
  90ac16:	9890      	s32i.n	a8, a9, 0
			if (bf->bf_isretried)
  90ac18:	283221        	l32i	a8, a3, 132
  90ac1b:	78600a        	bnone	a6, a8, 90ac29 <ath_tgt_tx_cleanup+0x3d>
				ath_tx_update_baw(tid, SEQNO_FROM_BF_SEQNO(bf->bf_seqno));
  90ac1e:	2b3123        	l16ui	a11, a3, 70
  90ac21:	da40      	mov.n	a10, a4
  90ac23:	0b4b14        	srli	a11, a11, 4
  90ac26:	5bf901        	call8	90902c <ath_tx_update_baw>
			ath_tx_freebuf(sc, bf);
  90ac29:	db30      	mov.n	a11, a3
  90ac2b:	da20      	mov.n	a10, a2
  90ac2d:	5bfaaf        	call8	9096ec <ath_tx_freebuf>
			bf = bf_next;
  90ac30:	d370      	mov.n	a3, a7
			continue;
  90ac32:	600006        	j	90ac3c <ath_tgt_tx_cleanup+0x50>
		}
		bf->bf_comp = ath_tgt_tx_comp_normal;
  90ac35:	1772c8        	l32r	a7, 8e7758 <memset+0x25bc>
  90ac38:	973f      	s32i.n	a7, a3, 60
		bf = asf_tailq_next(bf, bf_list);
  90ac3a:	8339      	l32i.n	a3, a3, 36

	txq = TID_TO_ACTXQ(tid->tidno);

	bf = asf_tailq_first(&tid->buf_q);

	while (bf) {
  90ac3c:	653fb9        	bnez	a3, 90abf9 <ath_tgt_tx_cleanup+0xd>
}

static inline void
ath_aggr_pause_tid(struct ath_softc_tgt *sc, ath_atx_tid_t *tid)
{
	tid->paused =1;
  90ac3f:	c031      	movi.n	a3, 1
  90ac41:	234434        	s8i	a3, a4, 52
		bf = asf_tailq_next(bf, bf_list);
	}

	ath_aggr_pause_tid(sc, tid);

	while (tid->baw_head != tid->baw_tail) {
  90ac44:	8944      	l32i.n	a9, a4, 16
		if (TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head)) {
  90ac46:	c051      	movi.n	a5, 1
			tid->incomp++;
			tid->flag |= TID_CLEANUP_INPROGRES;
			TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, tid->baw_head);
  90ac48:	c7af      	movi.n	a10, -1
  90ac4a:	60003d        	j	90ac8b <ath_tgt_tx_cleanup+0x9f>
	}

	ath_aggr_pause_tid(sc, tid);

	while (tid->baw_head != tid->baw_tail) {
		if (TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head)) {
  90ac4d:	035612        	srai	a6, a3, 5
  90ac50:	b466      	addi.n	a6, a6, 4
  90ac52:	04660a        	addx4	a6, a6, a4
  90ac55:	8761      	l32i.n	a7, a6, 4
  90ac57:	003104        	ssl	a3
  90ac5a:	00581a        	sll	a8, a5
  90ac5d:	778018        	bnone	a8, a7, 90ac79 <ath_tgt_tx_cleanup+0x8d>
			tid->incomp++;
  90ac60:	2b4037        	l8ui	a11, a4, 55
			tid->flag |= TID_CLEANUP_INPROGRES;
			TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, tid->baw_head);
  90ac63:	08a803        	xor	a8, a10, a8

	ath_aggr_pause_tid(sc, tid);

	while (tid->baw_head != tid->baw_tail) {
		if (TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head)) {
			tid->incomp++;
  90ac66:	b1bb      	addi.n	a11, a11, 1
  90ac68:	2b4437        	s8i	a11, a4, 55
			tid->flag |= TID_CLEANUP_INPROGRES;
  90ac6b:	2b4036        	l8ui	a11, a4, 54
			TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, tid->baw_head);
  90ac6e:	078701        	and	a7, a8, a7
	ath_aggr_pause_tid(sc, tid);

	while (tid->baw_head != tid->baw_tail) {
		if (TX_BUF_BITMAP_IS_SET(tid->tx_buf_bitmap, tid->baw_head)) {
			tid->incomp++;
			tid->flag |= TID_CLEANUP_INPROGRES;
  90ac71:	05bb02        	or	a11, a11, a5
  90ac74:	2b4436        	s8i	a11, a4, 54
			TX_BUF_BITMAP_CLR(tid->tx_buf_bitmap, tid->baw_head);
  90ac77:	9761      	s32i.n	a7, a6, 4
		}
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
  90ac79:	b133      	addi.n	a3, a3, 1
  90ac7b:	030346        	extui	a3, a3, 0, 7
  90ac7e:	9343      	s32i.n	a3, a4, 12
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
  90ac80:	234102        	l16ui	a3, a4, 4
  90ac83:	b133      	addi.n	a3, a3, 1
  90ac85:	03034b        	extui	a3, a3, 0, 12
  90ac88:	234502        	s16i	a3, a4, 4
		bf = asf_tailq_next(bf, bf_list);
	}

	ath_aggr_pause_tid(sc, tid);

	while (tid->baw_head != tid->baw_tail) {
  90ac8b:	8343      	l32i.n	a3, a4, 12
  90ac8d:	7939bc        	bne	a3, a9, 90ac4d <ath_tgt_tx_cleanup+0x61>
		}
		INCR(tid->baw_head, ATH_TID_MAX_BUFS);
		INCR(tid->seq_start, IEEE80211_SEQ_MAX);
	}

	if (!(tid->flag & TID_CLEANUP_INPROGRES)) {
  90ac90:	234036        	l8ui	a3, a4, 54
  90ac93:	7f3f06        	bbsi	a3, 31, 90ac9d <ath_tgt_tx_cleanup+0xb1>
		ath_aggr_resume_tid(sc, tid);
  90ac96:	da20      	mov.n	a10, a2
  90ac98:	db40      	mov.n	a11, a4
  90ac9a:	5bfe62        	call8	90a624 <ath_aggr_resume_tid>
  90ac9d:	d10f      	retw.n
	...

0090aca0 <ath_bar_tx_comp>:
	ath_tx_set_retry(sc, bf);
	ath_tgt_txq_add_ucast(sc, bf);
}

static void ath_bar_tx_comp(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
  90aca0:	6c1006        	entry	a1, 48
	struct ath_node_target *an;
	ath_atx_tid_t *tid;
	struct ath_txq *txq;

	an = (struct ath_node_target *)bf->bf_node;
	tid = &an->tid[bf->bf_tidno];
  90aca3:	25304d        	l8ui	a5, a3, 77
	ath_tgt_txq_add_ucast(sc, bf);
}

static void ath_bar_tx_comp(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_tx_desc *ds = bf->bf_lastds;
  90aca6:	883e      	l32i.n	a8, a3, 56
	struct ath_node_target *an;
	ath_atx_tid_t *tid;
	struct ath_txq *txq;

	an = (struct ath_node_target *)bf->bf_node;
	tid = &an->tid[bf->bf_tidno];
  90aca8:	0c5911        	slli	a9, a5, 4
	struct ath_tx_desc *ds = bf->bf_lastds;
	struct ath_node_target *an;
	ath_atx_tid_t *tid;
	struct ath_txq *txq;

	an = (struct ath_node_target *)bf->bf_node;
  90acab:	8434      	l32i.n	a4, a3, 16
	tid = &an->tid[bf->bf_tidno];
	txq = TID_TO_ACTXQ(tid->tidno);

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90acad:	268066        	l8ui	a6, a8, 102
	struct ath_node_target *an;
	ath_atx_tid_t *tid;
	struct ath_txq *txq;

	an = (struct ath_node_target *)bf->bf_node;
	tid = &an->tid[bf->bf_tidno];
  90acb0:	05990c        	sub	a9, a9, a5
  90acb3:	04990a        	addx4	a9, a9, a4
	txq = TID_TO_ACTXQ(tid->tidno);

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90acb6:	060640        	extui	a6, a6, 0, 1
	struct ath_node_target *an;
	ath_atx_tid_t *tid;
	struct ath_txq *txq;

	an = (struct ath_node_target *)bf->bf_node;
	tid = &an->tid[bf->bf_tidno];
  90acb9:	259c24        	addi	a5, a9, 36
  90acbc:	299c20        	addi	a9, a9, 32
	txq = TID_TO_ACTXQ(tid->tidno);

	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
  90acbf:	6460bf        	beqz	a6, 90ad82 <ath_bar_tx_comp+0xe2>
static void ath_bar_retry(struct ath_softc_tgt *sc, struct ath_tx_buf *bf)
{
	struct ath_node_target *an = ATH_NODE_TARGET(bf->bf_node);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);

	if (bf->bf_retries >= OWLMAX_BAR_RETRIES) {
  90acc2:	263086        	l8ui	a6, a3, 134
  90acc5:	c0a9      	movi.n	a10, 9
  90acc7:	76ab5a        	bgeu	a10, a6, 90ad25 <ath_bar_tx_comp+0x85>
		ath_tgt_delba_send(sc, bf->bf_node, tid->tidno, 1,
  90acca:	269007        	l8ui	a6, a9, 7
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, tidno);
	struct wmi_data_delba wmi_delba;

	tid->flag &= ~TID_AGGR_ENABLED;

	ath_tgt_tx_cleanup(sc, an, tid, 1);
  90accd:	db40      	mov.n	a11, a4
			       struct ieee80211_node_target *ni,
			       a_uint8_t tidno, a_uint8_t initiator,
			       a_uint16_t reasoncode)
{
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, tidno);
  90accf:	0c6811        	slli	a8, a6, 4
  90acd2:	06860c        	sub	a6, a8, a6
  90acd5:	04660a        	addx4	a6, a6, a4
  90acd8:	2c6c24        	addi	a12, a6, 36
	struct wmi_data_delba wmi_delba;

	tid->flag &= ~TID_AGGR_ENABLED;
  90acdb:	29c036        	l8ui	a9, a12, 54
  90acde:	c78d      	movi.n	a8, -3
  90ace0:	089801        	and	a8, a9, a8
  90ace3:	28c436        	s8i	a8, a12, 54

	ath_tgt_tx_cleanup(sc, an, tid, 1);
  90ace6:	da20      	mov.n	a10, a2
  90ace8:	c0d1      	movi.n	a13, 1
  90acea:	5bffc0        	call8	90abec <ath_tgt_tx_cleanup>

	wmi_delba.ni_nodeindex = ni->ni_nodeindex;
  90aced:	24400c        	l8ui	a4, a4, 12
	wmi_delba.tidno = tid->tidno;
	wmi_delba.initiator = 1;
	wmi_delba.reasoncode = IEEE80211_REASON_UNSPECIFIED;

	__stats(sc, txbar_xretry);
	wmi_event(sc->tgt_wmi_handle,
  90acf0:	1b72cc        	l32r	a11, 8e7820 <memset+0x2684>

	tid->flag &= ~TID_AGGR_ENABLED;

	ath_tgt_tx_cleanup(sc, an, tid, 1);

	wmi_delba.ni_nodeindex = ni->ni_nodeindex;
  90acf3:	241400        	s8i	a4, a1, 0
	wmi_delba.tidno = tid->tidno;
  90acf6:	8469      	l32i.n	a4, a6, 36
	wmi_delba.initiator = 1;
	wmi_delba.reasoncode = IEEE80211_REASON_UNSPECIFIED;

	__stats(sc, txbar_xretry);
	wmi_event(sc->tgt_wmi_handle,
  90acf8:	8a23      	l32i.n	a10, a2, 12
	tid->flag &= ~TID_AGGR_ENABLED;

	ath_tgt_tx_cleanup(sc, an, tid, 1);

	wmi_delba.ni_nodeindex = ni->ni_nodeindex;
	wmi_delba.tidno = tid->tidno;
  90acfa:	241401        	s8i	a4, a1, 1
	wmi_delba.initiator = 1;
  90acfd:	c041      	movi.n	a4, 1
  90acff:	241402        	s8i	a4, a1, 2
	wmi_delba.reasoncode = IEEE80211_REASON_UNSPECIFIED;
  90ad02:	241403        	s8i	a4, a1, 3

	__stats(sc, txbar_xretry);
  90ad05:	242279        	l32i	a4, a2, 0x1e4
	wmi_event(sc->tgt_wmi_handle,
  90ad08:	dc10      	mov.n	a12, a1
	wmi_delba.ni_nodeindex = ni->ni_nodeindex;
	wmi_delba.tidno = tid->tidno;
	wmi_delba.initiator = 1;
	wmi_delba.reasoncode = IEEE80211_REASON_UNSPECIFIED;

	__stats(sc, txbar_xretry);
  90ad0a:	b144      	addi.n	a4, a4, 1
  90ad0c:	242679        	s32i	a4, a2, 0x1e4
	wmi_event(sc->tgt_wmi_handle,
  90ad0f:	c0d4      	movi.n	a13, 4
  90ad11:	5befab        	call8	906bc0 <wmi_event>
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);

	if (bf->bf_retries >= OWLMAX_BAR_RETRIES) {
		ath_tgt_delba_send(sc, bf->bf_node, tid->tidno, 1,
				   IEEE80211_REASON_UNSPECIFIED);
		ath_tgt_tid_drain(sc, tid);
  90ad14:	da20      	mov.n	a10, a2
  90ad16:	db50      	mov.n	a11, a5

		bf->bf_comp = NULL;
  90ad18:	c040      	movi.n	a4, 0
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, bf->bf_tidno);

	if (bf->bf_retries >= OWLMAX_BAR_RETRIES) {
		ath_tgt_delba_send(sc, bf->bf_node, tid->tidno, 1,
				   IEEE80211_REASON_UNSPECIFIED);
		ath_tgt_tid_drain(sc, tid);
  90ad1a:	5bfb71        	call8	909ae0 <ath_tgt_tid_drain>
			       struct ieee80211_node_target *ni,
			       a_uint8_t tidno, a_uint8_t initiator,
			       a_uint16_t reasoncode)
{
	struct ath_node_target *an = ATH_NODE_TARGET(ni);
	ath_atx_tid_t *tid = ATH_AN_2_TID(an, tidno);
  90ad1d:	266c20        	addi	a6, a6, 32
	if (bf->bf_retries >= OWLMAX_BAR_RETRIES) {
		ath_tgt_delba_send(sc, bf->bf_node, tid->tidno, 1,
				   IEEE80211_REASON_UNSPECIFIED);
		ath_tgt_tid_drain(sc, tid);

		bf->bf_comp = NULL;
  90ad20:	943f      	s32i.n	a4, a3, 60
  90ad22:	600065        	j	90ad8b <ath_bar_tx_comp+0xeb>
		ath_buf_comp(sc, bf);
		return;
	}

	__stats(sc, txbar_compretries);
  90ad25:	24227a        	l32i	a4, a2, 0x1e8
  90ad28:	b144      	addi.n	a4, a4, 1
  90ad2a:	24267a        	s32i	a4, a2, 0x1e8

	if (!bf->bf_lastds->ds_link) {
  90ad2d:	268000        	l8ui	a6, a8, 0
  90ad30:	258001        	l8ui	a5, a8, 1
  90ad33:	248002        	l8ui	a4, a8, 2
  90ad36:	086610        	slli	a6, a6, 24
  90ad39:	005511        	slli	a5, a5, 16
  90ad3c:	065502        	or	a5, a5, a6
  90ad3f:	084411        	slli	a4, a4, 8
  90ad42:	054402        	or	a4, a4, a5
  90ad45:	258003        	l8ui	a5, a8, 3
  90ad48:	045402        	or	a4, a5, a4
  90ad4b:	cd43      	bnez.n	a4, 90ad62 <ath_bar_tx_comp+0xc2>
		__stats(sc, txbar_errlast);
  90ad4d:	24227b        	l32i	a4, a2, 0x1ec
		bf = ath_buf_toggle(sc, bf, 1);
  90ad50:	db30      	mov.n	a11, a3
	}

	__stats(sc, txbar_compretries);

	if (!bf->bf_lastds->ds_link) {
		__stats(sc, txbar_errlast);
  90ad52:	b144      	addi.n	a4, a4, 1
  90ad54:	24267b        	s32i	a4, a2, 0x1ec
		bf = ath_buf_toggle(sc, bf, 1);
  90ad57:	022a02        	or	a10, a2, a2
  90ad5a:	2c0a01        	movi	a12, 1
  90ad5d:	5bf9c9        	call8	909484 <ath_buf_toggle>
  90ad60:	d3a0      	mov.n	a3, a10
	}

	bf->bf_lastds->ds_link = 0;
  90ad62:	843e      	l32i.n	a4, a3, 56
  90ad64:	c080      	movi.n	a8, 0

	ath_tx_set_retry(sc, bf);
  90ad66:	da20      	mov.n	a10, a2
  90ad68:	db30      	mov.n	a11, a3
	if (!bf->bf_lastds->ds_link) {
		__stats(sc, txbar_errlast);
		bf = ath_buf_toggle(sc, bf, 1);
	}

	bf->bf_lastds->ds_link = 0;
  90ad6a:	284400        	s8i	a8, a4, 0
  90ad6d:	284401        	s8i	a8, a4, 1
  90ad70:	284402        	s8i	a8, a4, 2
  90ad73:	284403        	s8i	a8, a4, 3

	ath_tx_set_retry(sc, bf);
  90ad76:	5bfa83        	call8	909784 <ath_tx_set_retry>
	ath_tgt_txq_add_ucast(sc, bf);
  90ad79:	da20      	mov.n	a10, a2
  90ad7b:	db30      	mov.n	a11, a3
  90ad7d:	5bf871        	call8	908f44 <ath_tgt_txq_add_ucast>
  90ad80:	d10f      	retw.n
	if (ATH_DS_TX_STATUS(ds) & HAL_TXERR_XRETRY) {
		ath_bar_retry(sc, bf);
		return;
	}

	ath_aggr_resume_tid(sc, tid);
  90ad82:	da20      	mov.n	a10, a2
  90ad84:	db50      	mov.n	a11, a5
  90ad86:	5bfe27        	call8	90a624 <ath_aggr_resume_tid>

	bf->bf_comp = NULL;
  90ad89:	963f      	s32i.n	a6, a3, 60
	ath_buf_comp(sc, bf);
  90ad8b:	da20      	mov.n	a10, a2
  90ad8d:	db30      	mov.n	a11, a3
  90ad8f:	5bfa48        	call8	9096b0 <ath_buf_comp>
  90ad92:	d10f      	retw.n

0090ad94 <ar5416AttachRateTables>:

#endif //#ifdef MAGPIE_MERLIN // MAGPIE_MERLIN 

void
ar5416AttachRateTables(struct atheros_softc *sc)
{
  90ad94:	6c1004        	entry	a1, 32
    sc->hwRateTable[WIRELESS_MODE_11NG]  = &ar5416_11ngRateTable;
  90ad97:	1872cd        	l32r	a8, 8e78cc <memset+0x2730>
  90ad9a:	9822      	s32i.n	a8, a2, 8
  90ad9c:	d10f      	retw.n
	...

0090ada0 <io32_rmw>:
	iowrite8(addr, val);
}

static inline void io32_rmw(volatile uint32_t addr,
			    const uint32_t set, const uint32_t clr)
{
  90ada0:	6c1006        	entry	a1, 48
  90ada3:	0c0200        	memw
  90ada6:	9210      	s32i.n	a2, a1, 0
	uint32_t val;

	val = ioread32(addr);
  90ada8:	0c0200        	memw
  90adab:	8810      	l32i.n	a8, a1, 0
	val &= ~clr;
  90adad:	c79f      	movi.n	a9, -1
	return *(const volatile uint16_t *) addr;
}

static inline uint32_t ioread32(const volatile uint32_t addr)
{
	return *(const volatile uint32_t *) addr;
  90adaf:	0c0200        	memw
  90adb2:	8880      	l32i.n	a8, a8, 0
			    const uint32_t set, const uint32_t clr)
{
	uint32_t val;

	val = ioread32(addr);
	val &= ~clr;
  90adb4:	049403        	xor	a4, a9, a4
  90adb7:	084801        	and	a8, a4, a8
	val |= set;
	iowrite32(addr, val);
  90adba:	0c0200        	memw
  90adbd:	8a10      	l32i.n	a10, a1, 0
{
	uint32_t val;

	val = ioread32(addr);
	val &= ~clr;
	val |= set;
  90adbf:	038302        	or	a3, a8, a3
	*(volatile uint16_t *) addr = b;
}

static inline void iowrite32(volatile uint32_t addr, const uint32_t b)
{
	*(volatile uint32_t *) addr = b;
  90adc2:	0c0200        	memw
  90adc5:	93a0      	s32i.n	a3, a10, 0
  90adc7:	d10f      	retw.n
  90adc9:	000000        	ill

0090adcc <__adf_net_register_drv>:
 * 
 * @return a_status_t
 */
a_status_t
__adf_net_register_drv(adf_drv_info_t *drv)
{
  90adcc:	6c1004        	entry	a1, 32
    wlan_pci_register_drv(drv);    
  90adcf:	da20      	mov.n	a10, a2
  90add1:	5be393        	call8	903c20 <wlan_pci_register_drv>
    return A_STATUS_OK;
}
  90add4:	c020      	movi.n	a2, 0
  90add6:	d10f      	retw.n

0090add8 <__adf_net_unregister_drv>:
 * @brief unregister the driver from the shim
 * @param[in] name
 */
void
__adf_net_unregister_drv(a_uint8_t *name)
{
  90add8:	6c1004        	entry	a1, 32
  90addb:	d10f      	retw.n
  90addd:	000000        	ill

0090ade0 <ieee80211_tgt_crypto_encap>:

a_status_t
ieee80211_tgt_crypto_encap(struct ieee80211_frame *wh,
			   struct ieee80211_node_target *ni,
			   a_uint8_t keytype)
{
  90ade0:	6c1004        	entry	a1, 32
	a_uint16_t tmp;
	a_uint16_t offset = IEEE80211_WLAN_HDR_LEN;
	a_uint8_t b1, b2;
	struct ieee80211_qosframe_addr4 *wh_mesh;

	if (IEEE80211_QOS_HAS_SEQ(wh))
  90ade3:	2a2000        	l8ui	a10, a2, 0
  90ade6:	280a8c        	movi	a8, 140
  90ade9:	08aa01        	and	a10, a10, a8
#define CRYPTO_KEY_TYPE_WAPI         4
#define IEEE80211_WLAN_HDR_LEN      24

	a_uint8_t *iv = NULL;
	a_uint16_t tmp;
	a_uint16_t offset = IEEE80211_WLAN_HDR_LEN;
  90adec:	290a88        	movi	a9, 136
  90adef:	09aa0c        	sub	a10, a10, a9
  90adf2:	c188      	movi.n	a8, 24
  90adf4:	c19c      	movi.n	a9, 28
  90adf6:	0a9838        	moveqz	a8, a9, a10
	if (IEEE80211_QOS_HAS_SEQ(wh))
		offset += 4;  // pad for 4 byte alignment

	/* set the offset to 32 if the mesh control field is present */
	wh_mesh = (struct ieee80211_qosframe_addr4 *)wh;
	if (wh_mesh->i_qos[1] == 0x01)
  90adf9:	2a201f        	l8ui	a10, a2, 31
		offset = 32;
  90adfc:	c290      	movi.n	a9, 32
  90adfe:	b0aa      	addi.n	a10, a10, -1
  90ae00:	0a9838        	moveqz	a8, a9, a10

a_status_t
ieee80211_tgt_crypto_encap(struct ieee80211_frame *wh,
			   struct ieee80211_node_target *ni,
			   a_uint8_t keytype)
{
  90ae03:	040447        	extui	a4, a4, 0, 8
	wh_mesh = (struct ieee80211_qosframe_addr4 *)wh;
	if (wh_mesh->i_qos[1] == 0x01)
		offset = 32;

	iv = (a_uint8_t *) wh;
	iv = iv + offset;
  90ae06:	a822      	add.n	a2, a2, a8

	switch (keytype) {
  90ae08:	684209        	beqi	a4, 2, 90ae15 <ieee80211_tgt_crypto_encap+0x35>
  90ae0b:	684302        	beqi	a4, 3, 90ae11 <ieee80211_tgt_crypto_encap+0x31>
  90ae0e:	600083        	j	90ae95 <ieee80211_tgt_crypto_encap+0xb5>
  90ae11:	600032        	j	90ae47 <ieee80211_tgt_crypto_encap+0x67>
  90ae14:	002831        	excw
	case CRYPTO_KEY_TYPE_AES:
		ni->ni_iv16++;
  90ae17:	0db188        	excw
  90ae1a:	08084f        	extui	a8, a8, 0, 16
  90ae1d:	28350d        	s16i	a8, a3, 26
		if (ni->ni_iv16 == 0)
  90ae20:	cc84      	bnez.n	a8, 90ae28 <ieee80211_tgt_crypto_encap+0x48>
		{
			ni->ni_iv32++;
  90ae22:	8437      	l32i.n	a4, a3, 28
  90ae24:	b144      	addi.n	a4, a4, 1
  90ae26:	9437      	s32i.n	a4, a3, 28
		}

		*iv++ = (a_uint8_t) ni->ni_iv16;
  90ae28:	282400        	s8i	a8, a2, 0
		*iv++ = (a_uint8_t) (ni->ni_iv16 >> 8);
  90ae2b:	24310d        	l16ui	a4, a3, 26
		*iv++ = 0x00;
		*iv++ |= 0x20;
  90ae2e:	282003        	l8ui	a8, a2, 3
		{
			ni->ni_iv32++;
		}

		*iv++ = (a_uint8_t) ni->ni_iv16;
		*iv++ = (a_uint8_t) (ni->ni_iv16 >> 8);
  90ae31:	048414        	srli	a4, a4, 8
  90ae34:	242401        	s8i	a4, a2, 1
		*iv++ = 0x00;
  90ae37:	c040      	movi.n	a4, 0
  90ae39:	242402        	s8i	a4, a2, 2
		*iv++ |= 0x20;
  90ae3c:	c240      	movi.n	a4, 32
  90ae3e:	048402        	or	a4, a8, a4
  90ae41:	242403        	s8i	a4, a2, 3
  90ae44:	600036        	j	90ae7e <ieee80211_tgt_crypto_encap+0x9e>
		tmp = (a_uint16_t) (ni->ni_iv32 >> 16);
		*iv++ = (a_uint8_t) tmp;
		*iv = (a_uint8_t) (tmp >> 8);
		break;
	case CRYPTO_KEY_TYPE_TKIP:
		ni->ni_iv16++;
  90ae47:	28310d        	l16ui	a8, a3, 26
  90ae4a:	b188      	addi.n	a8, a8, 1
  90ae4c:	08084f        	extui	a8, a8, 0, 16
  90ae4f:	28350d        	s16i	a8, a3, 26
		if (ni->ni_iv16 == 0)
  90ae52:	cc86      	bnez.n	a8, 90ae5c <ieee80211_tgt_crypto_encap+0x7c>
		{
			ni->ni_iv32++;
  90ae54:	243207        	l32i	a4, a3, 28
  90ae57:	b144      	addi.n	a4, a4, 1
  90ae59:	243607        	s32i	a4, a3, 28
		}

		b1 = (a_uint8_t) (ni->ni_iv16 >> 8);
  90ae5c:	088814        	srli	a8, a8, 8
		b2 = (b1 | 0x20) & 0x7f;
  90ae5f:	c54f      	movi.n	a4, 95
		if (ni->ni_iv16 == 0)
		{
			ni->ni_iv32++;
		}

		b1 = (a_uint8_t) (ni->ni_iv16 >> 8);
  90ae61:	282400        	s8i	a8, a2, 0
		b2 = (b1 | 0x20) & 0x7f;
  90ae64:	c290      	movi.n	a9, 32
  90ae66:	048801        	and	a8, a8, a4
  90ae69:	098802        	or	a8, a8, a9
  90ae6c:	282401        	s8i	a8, a2, 1

		*iv++ = b1;
		*iv++ = b2;

		*iv++ = (a_uint8_t) ni->ni_iv16;
  90ae6f:	24310d        	l16ui	a4, a3, 26
  90ae72:	242402        	s8i	a4, a2, 2
		*iv++ |= 0x20;
  90ae75:	242003        	l8ui	a4, a2, 3
  90ae78:	094902        	or	a9, a4, a9
  90ae7b:	292403        	s8i	a9, a2, 3

		tmp = (a_uint16_t) ni->ni_iv32;
  90ae7e:	8837      	l32i.n	a8, a3, 28
		*iv++ = (a_uint8_t) tmp;
  90ae80:	282404        	s8i	a8, a2, 4
		*iv++ = (a_uint8_t) (tmp >> 8);
  90ae83:	088847        	extui	a8, a8, 8, 8
  90ae86:	282405        	s8i	a8, a2, 5

		tmp = (a_uint16_t) (ni->ni_iv32 >> 16);
  90ae89:	23310e        	l16ui	a3, a3, 28
		*iv++ = (a_uint8_t) tmp;
  90ae8c:	232406        	s8i	a3, a2, 6
		*iv = (a_uint8_t) (tmp >> 8);
  90ae8f:	038314        	srli	a3, a3, 8
  90ae92:	232407        	s8i	a3, a2, 7

#undef CRYPTO_KEY_TYPE_TKIP
#undef CRYPTO_KEY_TYPE_AES
#undef CRYPTO_KEY_TYPE_WAPI
#undef IEEE80211_WLAN_HDR_LEN
}
  90ae95:	c021      	movi.n	a2, 1
  90ae97:	d10f      	retw.n
